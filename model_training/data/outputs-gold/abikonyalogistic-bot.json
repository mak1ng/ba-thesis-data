	0
from typing import Any [EOL] import bot_app [EOL] import typing [EOL] import requests [EOL] from . models import Products , Statuses , Payments [EOL] from . import api_func [EOL] import requests [EOL] import json [EOL] import math [EOL] [EOL] currency_url = [string] [EOL] [EOL] currency = requests . get ( currency_url ) [EOL] [EOL] currency_to_usd = json . loads ( currency . text ) [ [string] ] [EOL] [EOL] [EOL] def add_product ( telegram_id ) : [EOL] query = Products ( api = api_func . return_param ( telegram_id , [string] ) , telegram_id = telegram_id , user_id = api_func . return_param ( telegram_id , [string] ) , task_id = api_func . return_param ( telegram_id , [string] ) , zipcode = api_func . return_param ( telegram_id , [string] ) , store_name = api_func . return_param ( telegram_id , [string] ) , store_phone = api_func . return_param ( telegram_id , [string] ) , order_number = api_func . return_param ( telegram_id , [string] ) , pickup_person = api_func . return_param ( telegram_id , [string] ) , pickup_location = api_func . return_param ( telegram_id , [string] ) , more_info = api_func . return_param ( telegram_id , [string] ) , product_category = api_func . return_param ( telegram_id , [string] ) , product_item = api_func . return_param ( telegram_id , [string] ) , price = api_func . return_param ( telegram_id , [string] ) ) [EOL] query . save ( ) [EOL] [EOL] [EOL] def status_updater ( each ) : [EOL] try : [EOL] status = Statuses . objects . get ( task_id = each [ [string] ] ) [EOL] status . status = each [ [string] ] [EOL] status . save ( update_fields = [ [string] ] ) [EOL] except Exception : [EOL] new_position = Statuses ( api = each [ [string] ] , task_id = each [ [string] ] , status = each [ [string] ] ) [EOL] new_position . save ( ) [EOL] [EOL] [EOL] def payments_updater ( each ) : [EOL] if each . total_received is True and each . total_received > [number] : [EOL] total = math . ceil ( ( each . total_received / [number] ) * currency_to_usd [ [string] ] ) [EOL] obj , created = Payments . objects . update_or_create ( username = each . label , address = each . address , amount = total ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from bot_app import api_func [EOL] import requests [EOL] import json [EOL] from bot_app import localization [EOL] from vedis import Vedis [EOL] from bot_app import tech_info [EOL] from logistic_bot import settings [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] tech_info . set_language ( [string] , [string] ) [EOL] language = tech_info . return_language ( [string] ) [EOL] print ( localization . return_translation ( [string] , language ) ) [EOL] [EOL] [EOL] def print_localization ( name , lang ) : [EOL] print ( localization . return_translation ( name = name , language = lang ) ) [EOL] [EOL] [EOL] print_localization ( [string] , [string] ) [EOL] [EOL] [EOL] print ( localization . return_all_translations ( [string] ) ) [EOL] print ( settings . BASE_DIR + [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import re [EOL] import time [EOL] [EOL] import telebot [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] from telebot import types [EOL] [EOL] from bot_app import api_func [EOL] from bot_app import config [EOL] from bot_app import localization [EOL] from bot_app import tech_info [EOL] from . models import AuthorizedCustomers [EOL] from . dbworker import add_product , status_updater [EOL] from bot_app . models import ConnectedApi [EOL] [EOL] bot = telebot . TeleBot ( config . token ) [EOL] [EOL] [EOL] class UpdateBot ( APIView ) : [EOL] def post ( self , request ) : [EOL] json_string = request . body . decode ( [string] ) [EOL] update = telebot . types . Update . de_json ( json_string ) [EOL] bot . process_new_updates ( [ update ] ) [EOL] [EOL] return Response ( { [string] : [number] } ) [EOL] [EOL] [EOL] @ bot . message_handler ( commands = [ [string] ] ) def start ( message ) : [EOL] if message . chat . id in AuthorizedCustomers . objects . values_list ( [string] , flat = True ) : [EOL] keyboard = types . InlineKeyboardMarkup ( row_width = [number] ) [EOL] button_en = types . InlineKeyboardButton ( text = [string] , callback_data = [string] ) [EOL] button_ru = types . InlineKeyboardButton ( text = [string] , callback_data = [string] ) [EOL] keyboard . add ( button_en , button_ru ) [EOL] bot . send_message ( message . chat . id , [string] , reply_markup = keyboard ) [EOL] else : [EOL] bot . send_message ( message . chat . id , [string] , ) [EOL] [EOL] [EOL] @ bot . message_handler ( commands = [ [string] ] ) def enter_zip ( message ) : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] bot . send_message ( message . chat . id , localization . return_translation ( [string] , language ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( commands = [ [string] ] ) def status_check ( message ) : [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] bot . send_message ( message . chat . id , localization . return_translation ( [string] , language ) ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : call . data in [ [string] , [string] ] ) def lang_select ( call ) : [EOL] keyboard = types . ReplyKeyboardMarkup ( row_width = [number] , resize_keyboard = True ) [EOL] if call . data == [string] : [EOL] tech_info . set_language ( call . message . chat . id , call . data ) [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] button = types . KeyboardButton ( text = localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( text = localization . return_translation ( [string] , language ) , chat_id = call . message . chat . id , reply_markup = keyboard ) [EOL] else : [EOL] tech_info . set_language ( call . message . chat . id , call . data ) [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] button = types . KeyboardButton ( text = localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( text = localization . return_translation ( [string] , language ) , chat_id = call . message . chat . id , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : message . text in localization . return_all_translations ( [string] ) ) @ bot . message_handler ( func = lambda message : message . text in localization . return_all_translations ( [string] ) ) def main ( message ) : [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] bot . send_message ( message . chat . id , localization . return_translation ( [string] , language ) + [string] + localization . return_translation ( [string] , language ) , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : re . search ( [string] , message . text ) ) def answer_on_digits ( message ) : [EOL] position = tech_info . return_position ( message . chat . id ) [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] if position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_user_id ( telegram_id = message . chat . id , user_id = [string] ) [EOL] api_func . set_zipcode ( telegram_id = message . chat . id , zipcode = message . text ) [EOL] get_distance = dict ( ) [EOL] for each in ConnectedApi . objects . all ( ) : [EOL] get_distance = api_func . get_distance ( message . chat . id , each ) [EOL] if type ( get_distance ) == dict and get_distance [ [string] ] : [EOL] couriers_list = sorted ( get_distance [ [string] ] , key = api_func . sort_by_dist ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] for each in couriers_list : [EOL] button = types . InlineKeyboardButton ( text = [string] . format ( each [ [string] ] , each [ [string] ] . replace ( [string] , [string] ) , each [ [string] ] ) , callback_data = each [ [string] ] ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] elif not get_distance [ [string] ] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif type ( get_distance ) != dict : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] if position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_user_id ( telegram_id = message . chat . id , user_id = [string] ) [EOL] get_status = api_func . get_status ( ) [EOL] if type ( get_status ) == list and get_status : [EOL] for each in get_status : [EOL] status_updater ( each ) [EOL] pack_id = each [ [string] ] [EOL] if pack_id == message . text : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) + each [ [string] ] ) [EOL] if each [ [string] ] == [string] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] api_func . set_pack_id ( telegram_id = message . chat . id , pack_id = each [ [string] ] ) [EOL] keyboard = types . ReplyKeyboardMarkup ( resize_keyboard = True ) [EOL] button = types . KeyboardButton ( text = localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif each [ [string] ] == [string] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif each [ [string] ] == [string] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif each [ [string] ] == [string] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) . format ( each [ [string] ] , each [ [string] ] ) ) [EOL] else : [EOL] bot . send_message ( message . chat . id , text = [string] ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_store_phone ( telegram_id = message . chat . id , store_phone = message . text ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_order_number ( telegram_id = message . chat . id , order_number = message . text ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_price ( telegram_id = message . chat . id , price = message . text ) [EOL] keyboard = types . ReplyKeyboardMarkup ( resize_keyboard = True ) [EOL] button = types . KeyboardButton ( text = localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : re . search ( [string] , call . data ) ) def call_digit_answers ( call ) : [EOL] position = tech_info . return_position ( call . message . chat . id ) [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] if position == [string] : [EOL] api_func . set_zipcode ( telegram_id = call . message . chat . id , zipcode = call . data ) [EOL] keyboard = types . ReplyKeyboardMarkup ( row_width = [number] , resize_keyboard = True ) [EOL] button = types . KeyboardButton ( text = localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) . format ( api_func . return_param ( telegram_id = call . message . chat . id , param = [string] ) ) , reply_markup = keyboard ) [EOL] elif position == [string] : [EOL] api_func . set_product_category ( telegram_id = call . message . chat . id , product_category = call . data ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] get_items = api_func . get_items ( call . message . chat . id ) [EOL] tech_info . set_position ( call . message . chat . id , [string] ) [EOL] for each in get_items [ [string] ] : [EOL] button = types . InlineKeyboardButton ( text = [string] . format ( each [ [string] ] ) , callback_data = each [ [string] ] ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] elif position == [string] : [EOL] api_func . set_product_item ( call . message . chat . id , call . data ) [EOL] tech_info . set_position ( call . message . chat . id , [string] ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] button_shop = types . InlineKeyboardButton ( text = localization . return_translation ( [string] , language ) , callback_data = [string] ) [EOL] button_company = types . InlineKeyboardButton ( text = localization . return_translation ( [string] , language ) , callback_data = [string] ) [EOL] keyboard . add ( button_shop , button_company ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : call . data in [ [string] , [string] ] ) def choose_kind ( call ) : [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] api_func . set_kind_of_pickup ( call . message . chat . id , call . data ) [EOL] print ( api_func . return_param ( call . message . chat . id , [string] ) ) [EOL] tech_info . set_position ( call . message . chat . id , [string] ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : message . text in localization . return_all_translations ( [string] ) ) def show_stuff_list ( message ) : [EOL] tech_info . set_offset ( message . chat . id , [number] ) [EOL] offset = int ( tech_info . return_offset ( message . chat . id ) ) [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] get_stuff_list = api_func . get_all ( telegram_id = message . chat . id , offset = offset ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] button_reset = types . InlineKeyboardButton ( text = localization . return_translation ( [string] , language ) , callback_data = [string] ) [EOL] button_confirm = types . InlineKeyboardButton ( text = localization . return_translation ( [string] , language ) , callback_data = [string] ) [EOL] keyboard . add ( button_reset , button_confirm ) [EOL] bot . send_message ( message . chat . id , text = get_stuff_list [ [string] ] , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : call . data == [string] ) def courier_approved ( call ) : [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] tech_info . set_position ( call . message . chat . id , [string] ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] get_category = api_func . get_category ( call . message . chat . id ) [EOL] for each in get_category [ [string] ] : [EOL] button = types . InlineKeyboardButton ( text = [string] . format ( each [ [string] ] ) , callback_data = each [ [string] ] ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : call . data == [string] ) def courier_reset ( call ) : [EOL] language = tech_info . return_language ( call . message . chat . id ) [EOL] tech_info . set_position ( call . message . chat . id , [string] ) [EOL] get_distance = dict ( ) [EOL] for each in ConnectedApi . objects . all ( ) : [EOL] get_distance = api_func . get_distance ( call . message . chat . id , each ) [EOL] if type ( get_distance ) == dict and get_distance [ [string] ] : [EOL] couriers_list = sorted ( get_distance [ [string] ] , key = api_func . sort_by_dist ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] for each in couriers_list : [EOL] button = types . InlineKeyboardButton ( text = [string] . format ( each [ [string] ] , each [ [string] ] . replace ( [string] , [string] ) , each [ [string] ] ) , callback_data = each [ [string] ] ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( call . message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : message . text in localization . return_all_translations ( [string] ) ) def send_info ( message ) : [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] add_data = api_func . add_data ( telegram_id = message . chat . id ) [EOL] api_func . set_task_id ( message . chat . id , add_data [ [string] ] ) [EOL] add_product ( message . chat . id ) [EOL] api_func . clear_all ( message . chat . id ) [EOL] keyboard = types . ReplyKeyboardMarkup ( resize_keyboard = True ) [EOL] button = types . KeyboardButton ( localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) + add_data [ [string] ] , reply_markup = keyboard ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : re . search ( [string] , message . text ) ) def form ( message ) : [EOL] language = tech_info . return_language ( message . chat . id ) [EOL] position = tech_info . return_position ( message . chat . id ) [EOL] if position == [string] : [EOL] api_func . set_payout ( telegram_id = message . chat . id , payout = message . text ) [EOL] payment_info = api_func . payment ( message . chat . id ) [EOL] for each in payment_info [ [string] ] : [EOL] if each [ [string] ] == api_func . return_param ( message . chat . id , [string] ) : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) . format ( each [ [string] ] , each [ [string] ] ) ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_pickup_location ( telegram_id = message . chat . id , pickup_location = message . text ) [EOL] if api_func . return_param ( message . chat . id , [string] ) == [string] : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] else : [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif position == [string] : [EOL] if api_func . return_param ( message . chat . id , [string] ) == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_store_name ( telegram_id = message . chat . id , store_name = message . text ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] else : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_store_name ( telegram_id = message . chat . id , store_name = message . text ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] api_func . set_pickup_person ( telegram_id = message . chat . id , pickup_person = message . text ) [EOL] keyboard = types . ReplyKeyboardMarkup ( resize_keyboard = True ) [EOL] button = types . KeyboardButton ( localization . return_translation ( [string] , language ) ) [EOL] keyboard . add ( button ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = keyboard ) [EOL] elif position == [string] : [EOL] tech_info . set_position ( message . chat . id , [string] ) [EOL] if message . text in localization . return_all_translations ( [string] ) : [EOL] api_func . set_more_info ( telegram_id = message . chat . id , more_info = [string] ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] else : [EOL] api_func . set_more_info ( telegram_id = message . chat . id , more_info = message . text ) [EOL] bot . send_message ( message . chat . id , text = localization . return_translation ( [string] , language ) , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda message : message . text == [string] ) def empty_message ( message ) : [EOL] bot . send_message ( message . chat . id , text = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import requests [EOL] import requests [EOL] import json [EOL] from vedis import Vedis [EOL] import os [EOL] from bot_app . models import ConnectedApi [EOL] [EOL] base_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] os . path . join ( base_dir , [string] ) [EOL] [EOL] [EOL] def set_api_address ( telegram_id , api_address , get_distance , get_all , add_data , get_category , get_items , get_status , payment ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = api_address [EOL] account [ [string] ] = get_distance [EOL] account [ [string] ] = get_all [EOL] account [ [string] ] = add_data [EOL] account [ [string] ] = get_category [EOL] account [ [string] ] = get_items [EOL] account [ [string] ] = get_status [EOL] account [ [string] ] = payment [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_user_id ( telegram_id , user_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = user_id [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_zipcode ( telegram_id , zipcode ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = zipcode [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_store_name ( telegram_id , store_name ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = store_name [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_store_phone ( telegram_id , store_phone ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = store_phone [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_order_number ( telegram_id , order_number ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = order_number [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_pickup_person ( telegram_id , pickup_person ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = pickup_person [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_pickup_location ( telegram_id , pickup_location ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = pickup_location [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_more_info ( telegram_id , more_info ) : [EOL] with Vedis ( os . path . join ( base_dir , os . path . join ( base_dir , [string] ) ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = more_info [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_product_category ( telegram_id , product_category ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = product_category [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_product_item ( telegram_id , product_item ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = product_item [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_price ( telegram_id , price ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = price [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_pack_id ( telegram_id , pack_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = pack_id [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_payout ( telegram_id , payout ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = payout [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_list_id ( telegram_id , list_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = list_id [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_kind_of_pickup ( telegram_id , kind_of_pickup ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = kind_of_pickup [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_task_id ( telegram_id , task_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = task_id [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_param ( telegram_id , param ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] return account [ param ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def clear_all ( telegram_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] account = db . Hash ( telegram_id ) [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] account [ [string] ] = [string] [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def get_distance ( telegram_id , args ) : [EOL] try : [EOL] request = requests . get ( ( args . address + args . get_distance ) . format ( zipcode = return_param ( telegram_id , [string] ) , user_id = return_param ( telegram_id , [string] ) ) ) [EOL] answer = json . loads ( request . text ) [EOL] if answer [ [string] ] : [EOL] set_api_address ( telegram_id = telegram_id , api_address = args . address , get_distance = args . get_distance , get_all = args . get_all , add_data = args . add_data , get_category = args . get_category , get_items = args . get_items , get_status = args . get_status , payment = args . payment ) [EOL] return answer [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def get_all ( telegram_id , offset ) : [EOL] try : [EOL] url = ( return_param ( telegram_id , [string] ) + return_param ( telegram_id , [string] ) ) [EOL] request = requests . get ( url . format ( user_id = return_param ( telegram_id , [string] ) , zipcode = return_param ( telegram_id , [string] ) , offset = offset ) ) [EOL] return json . loads ( request . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def add_data ( telegram_id ) : [EOL] try : [EOL] url = ( return_param ( telegram_id , [string] ) + return_param ( telegram_id , [string] ) ) [EOL] request = requests . get ( url . format ( user_id = return_param ( telegram_id , [string] ) , zipcode = return_param ( telegram_id , [string] ) , store_name = return_param ( telegram_id , [string] ) , store_phone = return_param ( telegram_id , [string] ) , order_number = return_param ( telegram_id , [string] ) , pickup_person = return_param ( telegram_id , [string] ) , pickup_location = return_param ( telegram_id , [string] ) , more_info = return_param ( telegram_id , [string] ) , product_category = return_param ( telegram_id , [string] ) , product_item = return_param ( telegram_id , [string] ) , price = return_param ( telegram_id , [string] ) ) ) [EOL] return json . loads ( request . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def get_category ( telegram_id ) : [EOL] try : [EOL] url = ( return_param ( telegram_id , [string] ) + return_param ( telegram_id , [string] ) ) [EOL] request = requests . get ( url . format ( user_id = return_param ( telegram_id , [string] ) , zipcode = return_param ( telegram_id , [string] ) ) ) [EOL] return json . loads ( request . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def get_items ( telegram_id ) : [EOL] try : [EOL] url = ( return_param ( telegram_id , [string] ) + return_param ( telegram_id , [string] ) ) [EOL] request = requests . get ( url . format ( user_id = return_param ( telegram_id , [string] ) , zipcode = return_param ( telegram_id , [string] ) , list_id = return_param ( telegram_id , [string] ) ) ) [EOL] return json . loads ( request . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def get_status ( ) : [EOL] try : [EOL] all_statuses = list ( ) [EOL] for each in ConnectedApi . objects . all ( ) : [EOL] url = each . address + each . get_status [EOL] request = requests . get ( url . format ( user_id = [string] ) ) [EOL] answer = json . loads ( request . text ) [ [string] ] [EOL] for every in answer : [EOL] every [ [string] ] = each . address [EOL] all_statuses . append ( every ) [EOL] return all_statuses [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def payment ( telegram_id ) : [EOL] try : [EOL] url = ( return_param ( telegram_id , [string] ) + return_param ( telegram_id , [string] ) ) [EOL] request = requests . get ( url . format ( user_id = return_param ( telegram_id , [string] ) , pack_id = return_param ( telegram_id , [string] ) , payout = return_param ( telegram_id , [string] ) ) ) [EOL] return json . loads ( request . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def sort_by_dist ( response ) : [EOL] return response [ [string] ] . replace ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple , Any [EOL] import bot_app [EOL] import typing [EOL] from django . contrib import admin [EOL] from bot_app . models import AuthorizedCustomers , Products , Statuses , Payments , ConnectedApi , Tickets [EOL] from bot_app . models import ( User as MyUser ) [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django import forms [EOL] from django . contrib . auth . admin import UserAdmin as BaseUserAdmin [EOL] from django . contrib . auth . forms import ReadOnlyPasswordHashField [EOL] from django . contrib . auth . models import Group [EOL] [EOL] [EOL] class UserCreationForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] password1 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] password2 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = MyUser [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def clean_password2 ( self ) : [EOL] [comment] [EOL] password1 = self . cleaned_data . get ( [string] ) [EOL] password2 = self . cleaned_data . get ( [string] ) [EOL] if password1 and password2 and password1 != password2 : [EOL] raise forms . ValidationError ( [string] ) [EOL] return password2 [EOL] [EOL] def save ( self , commit = True ) : [EOL] [comment] [EOL] user = super ( UserCreationForm , self ) . save ( commit = False ) [EOL] user . set_password ( self . cleaned_data [ [string] ] ) [EOL] if commit : [EOL] user . save ( ) [EOL] return user [EOL] [EOL] [EOL] class UserChangeForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] password = ReadOnlyPasswordHashField ( ) [EOL] [EOL] class Meta : [EOL] model = MyUser [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def clean_password ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . initial [ [string] ] [EOL] [EOL] [EOL] class UserAdmin ( BaseUserAdmin ) : [EOL] fieldsets = ( ( None , { [string] : ( [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] , [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] , [string] , [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] ) } ) , ) [EOL] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ACAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class ProductsAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class StatusesAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PaymentsAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ConnectedApiAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , ) [EOL] [EOL] [EOL] class TicketsAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] admin . site . register ( AuthorizedCustomers , ACAdmin ) [EOL] admin . site . register ( Products , ProductsAdmin ) [EOL] admin . site . register ( Statuses , StatusesAdmin ) [EOL] admin . site . register ( Payments , PaymentsAdmin ) [EOL] admin . site . register ( MyUser , UserAdmin ) [EOL] admin . site . register ( ConnectedApi , ConnectedApiAdmin ) [EOL] admin . site . register ( Tickets , TicketsAdmin ) [EOL] admin . site . unregister ( Group ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] from vedis import Vedis [EOL] import os [EOL] [EOL] [EOL] base_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] def set_language ( telegram_id , language ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] user [ [string] ] = language [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_language ( telegram_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] return user [ [string] ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_position ( telegram_id , position ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] user [ [string] ] = position [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_position ( telegram_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] return user [ [string] ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_offset ( telegram_id , offset ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] user [ [string] ] = offset [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_offset ( telegram_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] return user [ [string] ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def set_pages ( telegram_id , pages ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] user [ [string] ] = pages [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_pages ( telegram_id ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] user = db . Hash ( telegram_id ) [EOL] return user [ [string] ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BotAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] [EOL] bots_site = [string] [EOL] [EOL] token = [string] [EOL] [EOL] [comment] [EOL] [EOL] wallet_id = [string] [EOL] wallet_pass = [string] [EOL] [EOL] host = [string] [EOL] [EOL] [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] from vedis import Vedis [EOL] import os [EOL] [EOL] [EOL] base_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] [EOL] def add_translation ( name , language , translation ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] position = db . Hash ( name ) [EOL] position [ language ] = translation [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_translation ( name , language ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] position = db . Hash ( name ) [EOL] return position [ language ] . decode ( [string] ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] def return_all_translations ( name ) : [EOL] with Vedis ( os . path . join ( base_dir , [string] ) ) as db : [EOL] try : [EOL] answer = [ ] [EOL] position = db . Hash ( name ) [EOL] for each in position . values ( ) : [EOL] answer . append ( each . decode ( [string] ) ) [EOL] return answer [EOL] except Exception as err : [EOL] print ( err ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] translations = [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] def update_translations ( list_of_translations ) : [EOL] count = [number] [EOL] for each in list_of_translations : [EOL] add_translation ( name = each [ [number] ] , language = each [ [number] ] , translation = each [ [number] ] ) [EOL] count += [number] [EOL] [EOL] print ( [string] . format ( count ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] update_translations ( translations ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . views import UpdateBot [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , UpdateBot . as_view ( ) , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import bot_app [EOL] import typing [EOL] from django . db import models [EOL] from django . contrib . auth . base_user import AbstractBaseUser [EOL] from django . contrib . auth . base_user import AbstractBaseUser [EOL] from django . contrib . auth . models import PermissionsMixin , UnicodeUsernameValidator , UserManager [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . utils import timezone [EOL] from django . core . mail import send_mail [EOL] [EOL] [EOL] class AuthorizedCustomers ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] telegram_id = models . IntegerField ( null = False , verbose_name = [string] ) [EOL] created = models . DateTimeField ( auto_now_add = True , db_index = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class Products ( models . Model ) : [EOL] api = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] telegram_id = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] user_id = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] task_id = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] zipcode = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] store_name = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] store_phone = models . CharField ( max_length = [number] , null = True , verbose_name = [string] ) [EOL] order_number = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] pickup_person = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] pickup_location = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] more_info = models . TextField ( blank = True , verbose_name = [string] ) [EOL] product_category = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] product_item = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] price = models . FloatField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] created = models . DateTimeField ( max_length = [number] , auto_now_add = True , db_index = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class Statuses ( models . Model ) : [EOL] api = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] task_id = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] status = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] updated = models . DateTimeField ( max_length = [number] , auto_now_add = True , db_index = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class Payments ( models . Model ) : [EOL] username = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] address = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] amount = models . CharField ( max_length = [number] , null = True , verbose_name = [string] ) [EOL] created = models . DateTimeField ( max_length = [number] , auto_now_add = True , db_index = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] , [string] ] [EOL] [EOL] [EOL] class User ( AbstractBaseUser , PermissionsMixin ) : [EOL] username_validator = UnicodeUsernameValidator ( ) [EOL] [EOL] username = models . CharField ( _ ( [string] ) , max_length = [number] , unique = True , help_text = _ ( [string] ) , validators = [ username_validator ] , error_messages = { [string] : _ ( [string] ) , } , ) [EOL] telegram = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] jabber = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] api_address = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] email = models . EmailField ( _ ( [string] ) , blank = True ) [EOL] is_staff = models . BooleanField ( _ ( [string] ) , default = False , help_text = _ ( [string] ) , ) [EOL] is_active = models . BooleanField ( _ ( [string] ) , default = True , help_text = _ ( [string] [string] ) , ) [EOL] date_joined = models . DateTimeField ( _ ( [string] ) , default = timezone . now ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] EMAIL_FIELD = [string] [EOL] USERNAME_FIELD = [string] [EOL] REQUIRED_FIELDS = [ [string] ] [EOL] [EOL] class Meta : [EOL] verbose_name = _ ( [string] ) [EOL] verbose_name_plural = _ ( [string] ) [EOL] abstract = False [EOL] [EOL] def clean ( self ) : [EOL] super ( ) . clean ( ) [EOL] self . email = self . __class__ . objects . normalize_email ( self . email ) [EOL] [EOL] def get_full_name ( self ) : [EOL] [docstring] [EOL] full_name = self . username [EOL] return full_name . strip ( ) [EOL] [EOL] def get_short_name ( self ) : [EOL] [docstring] [EOL] return self . username [EOL] [EOL] def email_user ( self , subject , message , from_email = None , ** kwargs ) : [EOL] [docstring] [EOL] send_mail ( subject , message , from_email , [ self . email ] , ** kwargs ) [EOL] [EOL] [EOL] class ConnectedApi ( models . Model ) : [EOL] address = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] get_distance = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] get_all = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] add_data = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] get_category = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] get_items = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] get_status = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] payment = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class Tickets ( models . Model ) : [EOL] username = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] description = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] answer = models . CharField ( max_length = [number] , verbose_name = [string] , default = [string] ) [EOL] status = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] created = models . DateTimeField ( max_length = [number] , auto_now_add = True , db_index = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] verbose_name = [string] [EOL] ordering = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.AuthorizedCustomers]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.AuthorizedCustomers]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.AuthorizedCustomers]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Products]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Statuses]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Statuses]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Statuses]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Statuses]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Payments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Payments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Payments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Payments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.User]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.ConnectedApi]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Tickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Tickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Tickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Tickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bot_app.models.Tickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import List , Union , Dict , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import dj_database_url [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [EOL] db_from_env = dj_database_url . config ( ) [EOL] DATABASES [ [string] ] . update ( db_from_env ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( BASE_DIR , [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
command = [string] [EOL] pythonpath = [string] [EOL] bind = [string] [EOL] workers = [number] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StatisticSiteConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import statistic_site [EOL] from django . db import models [EOL] from bot_app . models import User [EOL] [EOL] [EOL] class Statistic ( models . Model ) : [EOL] [EOL] user = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] canceled = models . IntegerField ( verbose_name = [string] ) [EOL] process = models . IntegerField ( verbose_name = [string] ) [EOL] confirm = models . IntegerField ( verbose_name = [string] ) [EOL] paid = models . IntegerField ( verbose_name = [string] ) [EOL] total_orders = models . IntegerField ( verbose_name = [string] ) [EOL] sum = models . FloatField ( null = True , default = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.models.Statistic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from statistic_site import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , views . MainView . as_view ( ) , name = [string] ) , url ( [string] , views . LoginFormView . as_view ( ) , name = [string] ) , url ( [string] , views . LogoutView . as_view ( ) , name = [string] ) , url ( [string] , views . getwallet , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , Any [EOL] import bot_app [EOL] import typing [EOL] import statistic_site [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponseRedirect , HttpResponse , HttpRequest [EOL] from django . views . generic import TemplateView , View [EOL] from django . views . generic . edit import FormView [EOL] from django . contrib . auth . forms import AuthenticationForm [EOL] from django . contrib . auth import login , logout [EOL] from bot_app . api_func import get_status [EOL] from bot_app . models import Products , Statuses , Payments , Tickets [EOL] from django . db . models import Sum [EOL] from bot_app . dbworker import status_updater , payments_updater [EOL] from blockchain . wallet import Wallet [EOL] from bot_app . config import wallet_id , wallet_pass , host [EOL] from bot_app . models import User [EOL] from django . utils import timezone [EOL] [EOL] wallet = Wallet ( wallet_id , wallet_pass , host ) [EOL] [EOL] [EOL] class MainView ( TemplateView ) : [EOL] template_name = [string] [EOL] login_template = [string] [EOL] [EOL] def get ( self , request ) : [EOL] if request . user . is_authenticated : [EOL] statuses_request = get_status ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ctx = dict ( ) [EOL] api = User . objects . get ( username = request . user ) . api_address [EOL] total_sum = Payments . objects . filter ( username = request . user ) . aggregate ( Sum ( [string] ) ) [ [string] ] [EOL] if total_sum is not None : [EOL] ctx [ [string] ] = total_sum [EOL] else : [EOL] ctx [ [string] ] = [number] [EOL] ctx [ [string] ] = Products . objects . filter ( api = api ) . order_by ( [string] ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api , status = [string] ) . count ( ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api , status = [string] ) . count ( ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api , status = [string] ) . count ( ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api , status = [string] ) . count ( ) [EOL] ctx [ [string] ] = Statuses . objects . filter ( api = api ) . count ( ) [EOL] ctx [ [string] ] = Products . objects . filter ( api = api ) . aggregate ( Sum ( [string] ) ) [ [string] ] [EOL] ctx [ [string] ] = Payments . objects . filter ( username = request . user ) . order_by ( [string] ) [EOL] ctx [ [string] ] = Tickets . objects . filter ( username = request . user ) . order_by ( [string] ) [EOL] return render ( request , self . template_name , ctx ) [EOL] else : [EOL] return render ( request , self . login_template , { } ) [EOL] [EOL] def post ( self , request ) : [EOL] new_ticket = Tickets ( username = request . POST . get ( [string] ) , description = request . POST . get ( [string] ) , status = [string] ) [EOL] new_ticket . save ( ) [EOL] return HttpResponseRedirect ( [string] ) [EOL] [EOL] [EOL] class LoginFormView ( FormView ) : [EOL] form_class = AuthenticationForm [EOL] [EOL] template_name = [string] [EOL] [EOL] success_url = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] self . user = form . get_user ( ) [EOL] [EOL] login ( self . request , self . user ) [EOL] return super ( LoginFormView , self ) . form_valid ( form ) [EOL] [EOL] [EOL] class LogoutView ( View ) : [EOL] def get ( self , request ) : [EOL] logout ( request ) [EOL] return HttpResponseRedirect ( [string] ) [EOL] [EOL] [EOL] def getwallet ( request , id ) : [EOL] new_address = wallet . new_address ( label = id ) [EOL] return HttpResponse ( new_address . address ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot_app.models.Tickets$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot_app.models.Tickets$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[statistic_site.views.LoginFormView]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from bot_app . models import User , Statuses , Products , Payments [EOL] from statistic_site . models import Statistic [EOL] from django . conf . urls import url [EOL] from django . template . response import TemplateResponse [EOL] from django . http import HttpResponseRedirect [EOL] from django . db . models import Sum [EOL] [EOL] [EOL] class StatisticAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] search_fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def get_urls ( self ) : [EOL] urls = super ( ) . get_urls ( ) [EOL] [EOL] new_urls = [ url ( [string] , self . admin_site . admin_view ( self . update_info ) , name = [string] ) ] [EOL] return new_urls + urls [EOL] [EOL] def change_list ( self , request ) : [EOL] context = ( self . admin_site . each_context ( request ) ) [EOL] return TemplateResponse ( request , [string] , context ) [EOL] [EOL] def changelist_view ( self , request , extra_context = None ) : [EOL] extra_context = extra_context or { } [EOL] extra_context [ [string] ] = Payments . objects . all ( ) . aggregate ( Sum ( [string] ) ) [ [string] ] [EOL] return super ( StatisticAdmin , self ) . changelist_view ( request , extra_context = extra_context ) [EOL] [EOL] def update_info ( self , request ) : [EOL] for each in User . objects . all ( ) : [EOL] obj , created = Statistic . objects . update_or_create ( user = each . username , canceled = Statuses . objects . filter ( api = each . api_address , status = [string] ) . count ( ) , process = Statuses . objects . filter ( api = each . api_address , status = [string] ) . count ( ) , confirm = Statuses . objects . filter ( api = each . api_address , status = [string] ) . count ( ) , paid = Statuses . objects . filter ( api = each . api_address , status = [string] ) . count ( ) , total_orders = Statuses . objects . filter ( api = each . api_address ) . count ( ) , sum = Products . objects . filter ( api = each . api_address ) . aggregate ( Sum ( [string] ) ) [ [string] ] ) [EOL] return HttpResponseRedirect ( [string] ) [EOL] [EOL] [EOL] admin . site . register ( Statistic , StatisticAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0