from setuptools import setup , find_packages [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , packages = find_packages ( ) , entry_points = { [string] : [ [string] ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import builtins [EOL] import datetime [EOL] import invoices [EOL] import typing [EOL] import decimal [EOL] import logging [EOL] [docstring] [EOL] import datetime [EOL] import locale [EOL] import logging [EOL] import math [EOL] import os [EOL] import typing [EOL] from dataclasses import dataclass , asdict [EOL] from decimal import Decimal [EOL] [EOL] from docxtpl import DocxTemplate [EOL] [EOL] from invoices . report import Report [EOL] [EOL] DEFAULT_HOURLY_RATE = [number] [EOL] DATE_FORMAT = [string] [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ dataclass class Context : [EOL] [docstring] [EOL] invoice_no = ... [EOL] date_en = ... [EOL] date_uk = ... [EOL] hours = ... [EOL] rate = ... [EOL] amount = ... [EOL] [EOL] [EOL] def context ( invoice_number , report , settings ) : [EOL] [docstring] [EOL] hours = math . floor ( report . hours ) [EOL] [EOL] today = datetime . date . today ( ) [EOL] date_en = datetime . date . strftime ( today , DATE_FORMAT ) [EOL] [EOL] locale . setlocale ( locale . LC_TIME , [string] ) [EOL] date_uk = datetime . date . strftime ( today , DATE_FORMAT ) [EOL] [EOL] rate = Decimal ( settings . get ( [string] , DEFAULT_HOURLY_RATE ) ) [EOL] LOGGER . info ( [string] , rate ) [EOL] [EOL] return Context ( invoice_no = invoice_number , date_en = date_en , date_uk = date_uk , hours = str ( hours ) , rate = str ( rate ) , amount = [string] . format ( hours * rate ) ) [EOL] [EOL] [EOL] def render ( context , input_filename , output_filename , force ) : [EOL] [docstring] [EOL] if os . path . isfile ( output_filename ) : [EOL] if not force : [EOL] raise RuntimeError ( [string] . format ( output_filename ) ) [EOL] [EOL] logging . warning ( [string] , output_filename ) [EOL] os . remove ( output_filename ) [EOL] [EOL] context_dict = asdict ( context ) [EOL] logging . info ( [string] , context_dict ) [EOL] [EOL] doc = DocxTemplate ( input_filename ) [EOL] doc . render ( context_dict ) [EOL] doc . save ( output_filename ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , MutableMapping [EOL] import builtins [EOL] import datetime [EOL] import invoices [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] [docstring] [EOL] import argparse [EOL] import calendar [EOL] import datetime [EOL] import logging [EOL] import tempfile [EOL] from typing import Tuple [EOL] [EOL] import toml [EOL] [EOL] from invoices import template , report [EOL] from invoices . export import export_docx [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def month ( value ) : [EOL] [docstring] [EOL] return datetime . datetime . strptime ( value , [string] ) [EOL] [EOL] [EOL] def period ( args ) : [EOL] [docstring] [EOL] if args . month is not None : [EOL] start = args . month [EOL] _ , last_day = calendar . monthrange ( start . year , start . month ) [EOL] since = start [EOL] until = start . replace ( day = last_day ) [EOL] else : [EOL] [comment] [EOL] today = datetime . date . today ( ) [EOL] start = today . replace ( day = [number] ) [EOL] until = start - datetime . timedelta ( days = [number] ) [EOL] since = until . replace ( day = [number] ) [EOL] [EOL] return since , until [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , [string] , type = int , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , type = month , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] since , until = period ( args ) [EOL] [EOL] LOGGER . info ( [string] [string] ) [EOL] [EOL] config = toml . load ( [string] ) [EOL] rep = report . fetch ( config [ [string] ] , since = since , until = until ) [EOL] context = template . context ( args . invoice , rep , config [ [string] ] ) [EOL] [EOL] with tempfile . TemporaryDirectory ( ) as tmp_dirname : [EOL] filename = export_docx ( args . template_id , tmp_dirname ) [EOL] template . render ( context , filename , args . output , args . force ) [EOL] [EOL] LOGGER . info ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[datetime.date,datetime.date]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import builtins [EOL] import datetime [EOL] import invoices [EOL] import typing [EOL] import decimal [EOL] import logging [EOL] [docstring] [EOL] import datetime [EOL] import logging [EOL] import pprint [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from decimal import Decimal [EOL] [EOL] from toggl . api_client import TogglClientApi [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ dataclass class Report : [EOL] [docstring] [EOL] hours = ... [EOL] [EOL] [EOL] def fetch ( settings , since , until ) : [EOL] [docstring] [EOL] LOGGER . info ( [string] , since , until , settings . get ( [string] ) ) [EOL] [EOL] client = TogglClientApi ( settings ) [EOL] [EOL] params = settings [EOL] params . pop ( [string] ) [EOL] params [ [string] ] = str ( since ) [EOL] params [ [string] ] = str ( until ) [EOL] params [ [string] ] = [string] [EOL] params [ [string] ] = [string] [EOL] [EOL] response = client . query_report ( [string] , params = params ) [EOL] response_data = response . json ( ) [EOL] [EOL] if response . status_code != [number] : [EOL] raise RuntimeError ( [string] . format ( response_data ) ) [EOL] [EOL] LOGGER . debug ( [string] , pprint . pformat ( response_data ) ) [EOL] [EOL] total_grand = response_data [ [string] ] [EOL] if not total_grand : [EOL] raise RuntimeError ( [string] . format ( response_data ) ) [EOL] [EOL] hours = Decimal ( total_grand ) / Decimal ( [number] * [number] * [number] ) [EOL] report = Report ( hours = hours ) [EOL] LOGGER . info ( [string] , report ) [EOL] [EOL] return report [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 $Report$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import pickle [EOL] [EOL] import httplib2 [EOL] from google_auth_httplib2 import Request [EOL] from google_auth_oauthlib . flow import InstalledAppFlow [EOL] from googleapiclient . discovery import build [EOL] from googleapiclient . http import MediaIoBaseDownload [EOL] [EOL] DOCX_MIME_TYPE = [string] [EOL] SCOPES = [ [string] ] [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def export_docx ( file_id , dirname ) : [EOL] [docstring] [EOL] service = _build_service ( ) [EOL] [EOL] filename = os . path . join ( dirname , [string] . format ( file_id ) ) [EOL] request = service . files ( ) . export ( fileId = file_id , mimeType = DOCX_MIME_TYPE ) [EOL] [EOL] with open ( filename , mode = [string] ) as file_handle : [EOL] downloader = MediaIoBaseDownload ( file_handle , request ) [EOL] done = False [EOL] while done is False : [EOL] status , done = downloader . next_chunk ( ) [EOL] print ( [string] % int ( status . progress ( ) * [number] ) ) [EOL] [EOL] LOGGER . debug ( [string] , filename ) [EOL] [EOL] return filename [EOL] [EOL] [EOL] def _build_service ( ) : [EOL] credentials = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if os . path . exists ( [string] ) : [EOL] with open ( [string] , [string] ) as token : [EOL] credentials = pickle . load ( token ) [EOL] [EOL] [comment] [EOL] if not credentials or not credentials . valid : [EOL] if credentials and credentials . expired and credentials . refresh_token : [EOL] http = httplib2 . Http ( ) [EOL] credentials . refresh ( Request ( http ) ) [EOL] else : [EOL] flow = InstalledAppFlow . from_client_secrets_file ( [string] , SCOPES ) [EOL] credentials = flow . run_local_server ( ) [EOL] [comment] [EOL] with open ( [string] , [string] ) as token : [EOL] pickle . dump ( credentials , token ) [EOL] [EOL] return build ( [string] , [string] , credentials = credentials , cache_discovery = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0