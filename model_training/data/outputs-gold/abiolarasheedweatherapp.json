from typing import List [EOL] import typing [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path [EOL] from rest_framework . authtoken . views import obtain_auth_token [EOL] [EOL] from api . views import WeatherFilterListAPIView [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , WeatherFilterListAPIView . as_view ( ) ) , path ( [string] , obtain_auth_token , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from typing import Type , Tuple [EOL] import api [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] import django_filters [EOL] from django_filters import DateTimeFromToRangeFilter [EOL] from django_filters . widgets import RangeWidget [EOL] [EOL] from api . models import WeatherForecast [EOL] [EOL] [EOL] class WeatherFilter ( django_filters . rest_framework . FilterSet ) : [EOL] datetime = DateTimeFromToRangeFilter ( lookup_expr = ( [string] ) , widget = RangeWidget ( attrs = { [string] : [string] } ) ) [EOL] [EOL] class Meta : [EOL] model = WeatherForecast [EOL] fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.filters.WeatherFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.models.WeatherForecast]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] from typing import Dict [EOL] import requests [EOL] import builtins [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] from os import environ [EOL] from typing import Dict [EOL] [EOL] from django . core . cache import cache [EOL] from requests import Response [EOL] import requests [EOL] [EOL] [EOL] class WeatherClient : [EOL] [docstring] [EOL] [EOL] base_url = [string] [EOL] querystring = { } [EOL] headers = { } [EOL] [EOL] def __make_request ( self ) : [EOL] [docstring] [EOL] return requests . get ( self . base_url , headers = self . headers , params = self . querystring ) [EOL] [EOL] def get_forecast ( self , location = [string] ) : [EOL] [docstring] [EOL] response = cache . get ( location , None ) [EOL] if response is None : [EOL] self . querystring . update ( { [string] : location } ) [EOL] self . headers . update ( { [string] : environ . get ( [string] ) } ) [EOL] response = self . __make_request ( ) [EOL] cache . set ( location , response , [number] ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0
[comment] [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] from django . contrib import admin [EOL] [EOL] [comment] [EOL] from api . models import WeatherForecast [EOL] [EOL] admin . register ( WeatherForecast ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Type [EOL] import api [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from rest_framework . generics import ListAPIView [EOL] [EOL] from api . filters import WeatherFilter [EOL] from api . models import WeatherForecast [EOL] from api . serializers import WeatherForecastSerializer [EOL] [EOL] [EOL] class WeatherFilterListAPIView ( ListAPIView ) : [EOL] serializer_class = WeatherForecastSerializer [EOL] queryset = WeatherForecast . objects . all ( ) [EOL] filter_backends = ( DjangoFilterBackend , ) [EOL] filter_class = WeatherFilter [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.filters.WeatherFilter]$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import api [EOL] import requests [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] import json [EOL] [EOL] from celery import shared_task [EOL] from django . utils import timezone [EOL] [EOL] from api . models import WeatherForecast [EOL] from api . open_weather import WeatherClient [EOL] [EOL] [EOL] @ shared_task def fetch_weather_forecast ( ) : [EOL] datetime = timezone . now ( ) [EOL] client = WeatherClient ( ) [EOL] response = client . get_forecast ( ) [EOL] WeatherForecast . objects . create ( datetime = datetime , data = json . dumps ( response . json ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Type , Dict [EOL] import api [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] import json [EOL] from typing import Dict , Any [EOL] [EOL] from rest_framework import serializers [EOL] from api . models import WeatherForecast [EOL] [EOL] [EOL] class WeatherForecastSerializer ( serializers . ModelSerializer ) : [EOL] data = serializers . SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = WeatherForecast [EOL] fields = [string] [EOL] [EOL] @ staticmethod def get_data ( obj ) : [EOL] [docstring] [EOL] return json . loads ( obj . data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.WeatherForecastSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.models.WeatherForecast]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import api [EOL] import builtins [EOL] import typing [EOL] from __future__ import unicode_literals , absolute_import [EOL] [EOL] from django . db import models [EOL] [EOL] [EOL] class WeatherForecast ( models . Model ) : [EOL] data = models . TextField ( ) [EOL] city = models . CharField ( max_length = [number] ) [EOL] datetime = models . DateTimeField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . city } [string] { self . datetime }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.models.WeatherForecast]$ 0 0 0 0 0 0 0 $typing.Type[api.models.WeatherForecast]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.models.WeatherForecast]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0