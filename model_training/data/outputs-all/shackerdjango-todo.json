from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] [docstring] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any , List [EOL] import typing [EOL] from django . core . checks import Error , register [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ register ( ) def dal_check ( app_configs , ** kwargs ) : [EOL] from django . conf import settings [EOL] from todo . features import HAS_AUTOCOMPLETE [EOL] [EOL] if not HAS_AUTOCOMPLETE : [EOL] return [ ] [EOL] [EOL] errors = [ ] [EOL] missing_apps = { [string] , [string] } - set ( settings . INSTALLED_APPS ) [EOL] for missing_app in missing_apps : [EOL] errors . append ( Error ( [string] . format ( missing_app ) ) ) [EOL] return errors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] HAS_AUTOCOMPLETE = True [EOL] try : [EOL] import dal [EOL] except ImportError : [EOL] HAS_AUTOCOMPLETE = False [EOL] [EOL] HAS_TASK_MERGE = False [EOL] if HAS_AUTOCOMPLETE : [EOL] import dal . autocomplete [EOL] [EOL] if getattr ( dal . autocomplete , [string] , None ) is not None : [EOL] HAS_TASK_MERGE = True [EOL]	0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import path [EOL] [EOL] from todo import views [EOL] from todo . features import HAS_TASK_MERGE [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . list_lists , name = [string] ) , path ( [string] , views . reorder_tasks , name = [string] ) , path ( [string] , views . external_add , name = [string] ) , path ( [string] , views . list_detail , { [string] : [string] } , name = [string] ) , path ( [string] , views . list_detail , { [string] : True } , name = [string] , ) , path ( [string] , views . list_detail , name = [string] ) , path ( [string] , views . del_list , name = [string] ) , path ( [string] , views . add_list , name = [string] ) , path ( [string] , views . task_detail , name = [string] ) , path ( [string] , views . remove_attachment , name = [string] ) , ] [EOL] [EOL] if HAS_TASK_MERGE : [EOL] [comment] [EOL] from todo . views . task_autocomplete import TaskAutocomplete [EOL] [EOL] urlpatterns . append ( path ( [string] , TaskAutocomplete . as_view ( ) , name = [string] ) ) [EOL] [EOL] urlpatterns . extend ( [ path ( [string] , views . toggle_done , name = [string] ) , path ( [string] , views . delete_task , name = [string] ) , path ( [string] , views . search , name = [string] ) , path ( [string] , views . import_csv , name = [string] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Type , List [EOL] import typing [EOL] import todo [EOL] from __future__ import unicode_literals [EOL] [EOL] import datetime [EOL] import os [EOL] import textwrap [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import Group [EOL] from django . db import DEFAULT_DB_ALIAS , models [EOL] from django . db . transaction import Atomic , get_connection [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] [EOL] def get_attachment_upload_dir ( instance , filename ) : [EOL] [docstring] [EOL] [EOL] return [string] . join ( [ [string] , [string] , str ( instance . task . id ) , filename ] ) [EOL] [EOL] [EOL] class LockedAtomicTransaction ( Atomic ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * models , using = None , savepoint = None ) : [EOL] if using is None : [EOL] using = DEFAULT_DB_ALIAS [EOL] super ( ) . __init__ ( using , savepoint ) [EOL] self . models = models [EOL] [EOL] def __enter__ ( self ) : [EOL] super ( LockedAtomicTransaction , self ) . __enter__ ( ) [EOL] [EOL] [comment] [EOL] if settings . DATABASES [ self . using ] [ [string] ] != [string] : [EOL] cursor = None [EOL] try : [EOL] cursor = get_connection ( self . using ) . cursor ( ) [EOL] for model in self . models : [EOL] cursor . execute ( [string] . format ( table_name = model . _meta . db_table ) ) [EOL] finally : [EOL] if cursor and not cursor . closed : [EOL] cursor . close ( ) [EOL] [EOL] [EOL] class TaskList ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( default = [string] ) [EOL] group = models . ForeignKey ( Group , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] verbose_name_plural = [string] [EOL] [EOL] [comment] [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] [EOL] class Task ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] ) [EOL] task_list = models . ForeignKey ( TaskList , on_delete = models . CASCADE , null = True ) [EOL] created_date = models . DateField ( default = timezone . now , blank = True , null = True ) [EOL] due_date = models . DateField ( blank = True , null = True ) [EOL] completed = models . BooleanField ( default = False ) [EOL] completed_date = models . DateField ( blank = True , null = True ) [EOL] created_by = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , blank = True , related_name = [string] , on_delete = models . CASCADE , ) [EOL] assigned_to = models . ForeignKey ( settings . AUTH_USER_MODEL , blank = True , null = True , related_name = [string] , on_delete = models . CASCADE , ) [EOL] note = models . TextField ( blank = True , null = True ) [EOL] priority = models . PositiveIntegerField ( blank = True , null = True ) [EOL] [EOL] [comment] [EOL] def overdue_status ( self ) : [EOL] [docstring] [EOL] if self . due_date and datetime . date . today ( ) > self . due_date : [EOL] return True [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . id } ) [EOL] [EOL] [comment] [EOL] def save ( self , ** kwargs ) : [EOL] [comment] [EOL] if self . completed : [EOL] self . completed_date = datetime . datetime . now ( ) [EOL] super ( Task , self ) . save ( ) [EOL] [EOL] def merge_into ( self , merge_target ) : [EOL] if merge_target . pk == self . pk : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with LockedAtomicTransaction ( Comment ) : [EOL] Comment . objects . filter ( task = self ) . update ( task = merge_target ) [EOL] self . delete ( ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] , [string] ] [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] [docstring] [EOL] [EOL] author = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE , blank = True , null = True ) [EOL] task = models . ForeignKey ( Task , on_delete = models . CASCADE ) [EOL] date = models . DateTimeField ( default = datetime . datetime . now ) [EOL] email_from = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] email_message_id = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] body = models . TextField ( blank = True ) [EOL] [EOL] class Meta : [EOL] [comment] [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] @ property def author_text ( self ) : [EOL] if self . author is not None : [EOL] return str ( self . author ) [EOL] [EOL] assert self . email_message_id is not None [EOL] return str ( self . email_from ) [EOL] [EOL] @ property def snippet ( self ) : [EOL] body_snippet = textwrap . shorten ( self . body , width = [number] , placeholder = [string] ) [EOL] [comment] [EOL] return [string] . format ( author = self . author_text , snippet = body_snippet ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . snippet [EOL] [EOL] [EOL] class Attachment ( models . Model ) : [EOL] [docstring] [EOL] [EOL] task = models . ForeignKey ( Task , on_delete = models . CASCADE ) [EOL] added_by = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] timestamp = models . DateTimeField ( default = datetime . datetime . now ) [EOL] file = models . FileField ( upload_to = get_attachment_upload_dir , max_length = [number] ) [EOL] [EOL] def filename ( self ) : [EOL] return os . path . basename ( self . file . name ) [EOL] [EOL] def extension ( self ) : [EOL] name , extension = os . path . splitext ( self . file . name ) [EOL] return extension [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . task . id } [string] { self . file . name }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.TaskList]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.TaskList]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.TaskList]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Attachment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Attachment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Attachment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[todo.models.Attachment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Dict , Union , List [EOL] import typing [EOL] import builtins [EOL] from django . conf import settings [EOL] [EOL] hash = { [string] : True , [string] : [ ] , [string] : None , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [number] , [string] : [string] , [string] : True , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def defaults ( key ) : [EOL] [docstring] [EOL] [EOL] if hasattr ( settings , key ) : [EOL] val = getattr ( settings , key ) [EOL] else : [EOL] val = hash . get ( key ) [EOL] return val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],typing.List[builtins.str],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],typing.List[builtins.str],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0
[docstring] [EOL] __version__ = [string] [EOL] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL] [EOL] __url__ = [string] [EOL] __license__ = [string] [EOL] [EOL] from . import check [EOL]	0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import email . utils [EOL] import logging [EOL] import os [EOL] import time [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . sites . models import Site [EOL] from django . core import mail [EOL] from django . template . loader import render_to_string [EOL] [EOL] from todo . defaults import defaults [EOL] from todo . models import Attachment , Comment , Task [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def staff_check ( user ) : [EOL] [docstring] [EOL] [EOL] if defaults ( [string] ) : [EOL] return user . is_staff [EOL] else : [EOL] [comment] [EOL] return True [EOL] [EOL] [EOL] def user_can_read_task ( task , user ) : [EOL] return task . task_list . group in user . groups . all ( ) or user . is_superuser [EOL] [EOL] [EOL] def todo_get_backend ( task ) : [EOL] [docstring] [EOL] mail_backends = getattr ( settings , [string] , None ) [EOL] if mail_backends is None : [EOL] return None [EOL] [EOL] task_backend = mail_backends [ task . task_list . slug ] [EOL] if task_backend is None : [EOL] return None [EOL] [EOL] return task_backend [EOL] [EOL] [EOL] def todo_get_mailer ( user , task ) : [EOL] [docstring] [EOL] task_backend = todo_get_backend ( task ) [EOL] if task_backend is None : [EOL] return ( None , mail . get_connection ) [EOL] [EOL] from_address = getattr ( task_backend , [string] ) [EOL] from_address = email . utils . formataddr ( ( user . username , from_address ) ) [EOL] return ( from_address , task_backend ) [EOL] [EOL] [EOL] def todo_send_mail ( user , task , subject , body , recip_list ) : [EOL] [docstring] [EOL] references = Comment . objects . filter ( task = task ) . only ( [string] ) [EOL] references = ( ref . email_message_id for ref in references ) [EOL] references = [string] . join ( filter ( bool , references ) ) [EOL] [EOL] from_address , backend = todo_get_mailer ( user , task ) [EOL] message_hash = hash ( ( subject , body , from_address , frozenset ( recip_list ) , references ) ) [EOL] [EOL] message_id = ( [string] [string] [string] ) . format ( task_id = task . pk , message_hash = abs ( message_hash ) , epoch = int ( time . time ( ) ) , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] thread_message_id = [string] . format ( task . pk ) [EOL] references = [string] . format ( references , thread_message_id ) [EOL] [EOL] with backend ( ) as connection : [EOL] message = mail . EmailMessage ( subject , body , from_address , recip_list , [ ] , headers = { ** getattr ( backend , [string] , { } ) , [string] : message_id , [string] : references , [string] : thread_message_id , } , connection = connection , ) [EOL] message . send ( ) [EOL] [EOL] [EOL] def send_notify_mail ( new_task ) : [EOL] [docstring] [EOL] [EOL] if new_task . assigned_to == new_task . created_by : [EOL] return [EOL] [EOL] current_site = Site . objects . get_current ( ) [EOL] subject = render_to_string ( [string] , { [string] : new_task } ) [EOL] body = render_to_string ( [string] , { [string] : new_task , [string] : current_site } ) [EOL] [EOL] recip_list = [ new_task . assigned_to . email ] [EOL] todo_send_mail ( new_task . created_by , new_task , subject , body , recip_list ) [EOL] [EOL] [EOL] def send_email_to_thread_participants ( task , msg_body , user , subject = None ) : [EOL] [docstring] [EOL] [EOL] current_site = Site . objects . get_current ( ) [EOL] email_subject = subject [EOL] if not subject : [EOL] subject = render_to_string ( [string] , { [string] : task } ) [EOL] [EOL] email_body = render_to_string ( [string] , { [string] : task , [string] : msg_body , [string] : current_site , [string] : user } , ) [EOL] [EOL] [comment] [EOL] commenters = Comment . objects . filter ( task = task ) [EOL] recip_list = set ( ca . author . email for ca in commenters if ca . author is not None ) [EOL] for related_user in ( task . created_by , task . assigned_to ) : [EOL] if related_user is not None : [EOL] recip_list . add ( related_user . email ) [EOL] recip_list = list ( m for m in recip_list if m ) [EOL] [EOL] todo_send_mail ( user , task , email_subject , email_body , recip_list ) [EOL] [EOL] [EOL] def toggle_task_completed ( task_id ) : [EOL] [docstring] [EOL] try : [EOL] task = Task . objects . get ( id = task_id ) [EOL] task . completed = not task . completed [EOL] task . save ( ) [EOL] return True [EOL] [EOL] except Task . DoesNotExist : [EOL] log . info ( f" [string] { task_id } [string] " ) [EOL] return False [EOL] [EOL] [EOL] def remove_attachment_file ( attachment_id ) : [EOL] [docstring] [EOL] try : [EOL] attachment = Attachment . objects . get ( id = attachment_id ) [EOL] if attachment . file : [EOL] if os . path . isfile ( attachment . file . path ) : [EOL] os . remove ( attachment . file . path ) [EOL] [EOL] attachment . delete ( ) [EOL] return True [EOL] [EOL] except Attachment . DoesNotExist : [EOL] log . info ( f" [string] { attachment_id } [string] " ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Loggerbuiltins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . core import mail [EOL] [EOL] from todo . defaults import defaults [EOL] from todo . models import Comment , Task [EOL] from todo . utils import send_email_to_thread_participants , send_notify_mail [EOL] [EOL] [EOL] def test_send_notify_mail_not_me ( todo_setup , django_user_model , email_backend_setup ) : [EOL] [docstring] [EOL] [EOL] u1 = django_user_model . objects . get ( username = [string] ) [EOL] u2 = django_user_model . objects . get ( username = [string] ) [EOL] [EOL] task = Task . objects . filter ( created_by = u1 ) . first ( ) [EOL] task . assigned_to = u2 [EOL] task . save ( ) [EOL] send_notify_mail ( task ) [EOL] assert len ( mail . outbox ) == [number] [EOL] [EOL] [EOL] def test_send_notify_mail_myself ( todo_setup , django_user_model , email_backend_setup ) : [EOL] [docstring] [EOL] [EOL] u1 = django_user_model . objects . get ( username = [string] ) [EOL] task = Task . objects . filter ( created_by = u1 ) . first ( ) [EOL] task . assigned_to = u1 [EOL] task . save ( ) [EOL] send_notify_mail ( task ) [EOL] assert len ( mail . outbox ) == [number] [EOL] [EOL] [EOL] def test_send_email_to_thread_participants ( todo_setup , django_user_model , email_backend_setup ) : [EOL] [docstring] [EOL] [EOL] u1 = django_user_model . objects . get ( username = [string] ) [EOL] task = Task . objects . filter ( created_by = u1 ) . first ( ) [EOL] [EOL] u3 = django_user_model . objects . create_user ( username = [string] , password = [string] , email = [string] ) [EOL] u4 = django_user_model . objects . create_user ( username = [string] , password = [string] , email = [string] ) [EOL] Comment . objects . create ( author = u3 , task = task , body = [string] ) [EOL] Comment . objects . create ( author = u4 , task = task , body = [string] ) [EOL] [EOL] send_email_to_thread_participants ( task , [string] , u1 ) [EOL] assert len ( mail . outbox ) == [number] [comment] [EOL] assert [string] in mail . outbox [ [number] ] . recipients ( ) [EOL] assert [string] in mail . outbox [ [number] ] . recipients ( ) [EOL] assert [string] in mail . outbox [ [number] ] . recipients ( ) [EOL] [EOL] [EOL] def test_defaults ( settings ) : [EOL] [docstring] [EOL] [EOL] key = [string] [EOL] [EOL] [comment] [EOL] assert not hasattr ( settings , key ) [EOL] assert defaults ( key ) [EOL] [EOL] [comment] [EOL] settings . TODO_STAFF_ONLY = True [EOL] assert defaults ( key ) [EOL] [EOL] [comment] [EOL] settings . TODO_STAFF_ONLY = False [EOL] assert not defaults ( key ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] import datetime [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] from todo . models import Task , TaskList [EOL] from todo . operations . csv_importer import CSVImporter [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def import_setup ( todo_setup ) : [EOL] app_path = Path ( __file__ ) . resolve ( ) . parent . parent [EOL] filepath = Path ( app_path , [string] ) [EOL] with filepath . open ( mode = [string] , encoding = [string] ) as fileobj : [EOL] importer = CSVImporter ( ) [EOL] results = importer . upsert ( fileobj , as_string_obj = True ) [EOL] assert results [EOL] return { [string] : results } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_setup ( todo_setup ) : [EOL] [docstring] [EOL] assert TaskList . objects . all ( ) . count ( ) == [number] [EOL] assert Task . objects . all ( ) . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_import ( import_setup ) : [EOL] [docstring] [EOL] assert Task . objects . all ( ) . count ( ) == [number] [comment] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_report ( import_setup ) : [EOL] [docstring] [EOL] [EOL] results = import_setup [ [string] ] [EOL] [EOL] assert [string] in results [ [string] ] [EOL] assert [string] in results [ [string] ] [EOL] assert [string] in results [ [string] ] [EOL] [EOL] assert isinstance ( results [ [string] ] , list ) [EOL] assert len ( results [ [string] ] ) == [number] [EOL] assert ( results [ [string] ] [ [number] ] . get ( [number] ) [ [number] ] == [string] ) [EOL] [EOL] assert ( [string] in results [ [string] ] ) [EOL] assert ( [string] in results [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_inserted_row ( import_setup ) : [EOL] [docstring] [EOL] task = Task . objects . get ( title = [string] , task_list__name = [string] ) [EOL] assert task . created_by == get_user_model ( ) . objects . get ( username = [string] ) [EOL] assert task . assigned_to == get_user_model ( ) . objects . get ( username = [string] ) [EOL] assert not task . completed [EOL] assert task . note == [string] [EOL] assert task . priority == [number] [EOL] assert task . created_date == datetime . datetime . today ( ) . date ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def imap_producer ( ** kwargs ) : [EOL] def imap_producer_factory ( ) : [EOL] [comment] [EOL] [comment] [EOL] from . imap import imap_producer [EOL] [EOL] return imap_producer ( ** kwargs ) [EOL] [EOL] return imap_producer_factory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def tracker_consumer ( ** kwargs ) : [EOL] def tracker_factory ( producer ) : [EOL] [comment] [EOL] [comment] [EOL] from . tracker import tracker_consumer [EOL] [EOL] return tracker_consumer ( producer , ** kwargs ) [EOL] [EOL] return tracker_factory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Match , List , Optional , Pattern , Any , Tuple [EOL] import typing [EOL] import logging [EOL] import re [EOL] import logging [EOL] [EOL] from email . charset import Charset as EMailCharset [EOL] from django . db import transaction [EOL] from django . db . models import Count [EOL] from html2text import html2text [EOL] from todo . models import Comment , Task , TaskList [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def part_decode ( message ) : [EOL] charset = ( [string] , [string] ) [EOL] email_charset = message . get_content_charset ( ) [EOL] if email_charset : [EOL] charset = ( EMailCharset ( email_charset ) . input_charset , ) [EOL] [EOL] body = message . get_payload ( decode = True ) [EOL] return body . decode ( * charset ) [EOL] [EOL] [EOL] def message_find_mime ( message , mime_type ) : [EOL] for submessage in message . walk ( ) : [EOL] if submessage . get_content_type ( ) == mime_type : [EOL] return submessage [EOL] return None [EOL] [EOL] [EOL] def message_text ( message ) : [EOL] text_part = message_find_mime ( message , [string] ) [EOL] if text_part is not None : [EOL] return part_decode ( text_part ) [EOL] [EOL] html_part = message_find_mime ( message , [string] ) [EOL] if html_part is not None : [EOL] return html2text ( part_decode ( html_part ) ) [EOL] [EOL] [comment] [EOL] return [string] [EOL] [EOL] [EOL] def format_task_title ( format_string , message ) : [EOL] return format_string . format ( subject = message [ [string] ] , author = message [ [string] ] ) [EOL] [EOL] [EOL] DJANGO_TODO_THREAD = re . compile ( [string] ) [EOL] [EOL] [EOL] def parse_references ( task_list , references ) : [EOL] related_messages = [ ] [EOL] answer_thread = None [EOL] for related_message in references . split ( ) : [EOL] logger . info ( [string] , related_message ) [EOL] match = re . match ( DJANGO_TODO_THREAD , related_message ) [EOL] if match is None : [EOL] related_messages . append ( related_message ) [EOL] continue [EOL] [EOL] thread_id = int ( match . group ( [number] ) ) [EOL] new_answer_thread = Task . objects . filter ( task_list = task_list , pk = thread_id ) . first ( ) [EOL] if new_answer_thread is not None : [EOL] answer_thread = new_answer_thread [EOL] [EOL] if answer_thread is None : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . info ( [string] , answer_thread ) [EOL] return related_messages , answer_thread [EOL] [EOL] [EOL] def insert_message ( task_list , message , priority , task_title_format ) : [EOL] if [string] not in message : [EOL] logger . warning ( [string] ) [EOL] return [EOL] [EOL] if [string] not in message : [EOL] logger . warning ( [string] ) [EOL] return [EOL] [EOL] if [string] not in message : [EOL] logger . warning ( [string] ) [EOL] return [EOL] [EOL] logger . info ( [string] f" [string] { message [ [string] ] } [string] " f" [string] { message [ [string] ] } [string] " f" [string] { message [ [string] ] } [string] " f" [string] { message [ [string] ] } [string] " f" [string] { message [ [string] ] } [string] " ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] original_message_id = message [ [string] ] [EOL] message_id = ( ( original_message_id [ : [number] ] + [string] ) [EOL] if len ( original_message_id ) > [number] [EOL] else original_message_id ) [EOL] message_from = message [ [string] ] [EOL] text = message_text ( message ) [EOL] [EOL] related_messages , answer_thread = parse_references ( task_list , message . get ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] best_task = ( Task . objects . filter ( task_list = task_list , comment__email_message_id__in = related_messages ) . annotate ( num_comments = Count ( [string] ) ) . order_by ( [string] ) . only ( [string] ) . first ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if best_task is None and answer_thread is not None : [EOL] best_task = answer_thread [EOL] [EOL] with transaction . atomic ( ) : [EOL] if best_task is None : [EOL] best_task = Task . objects . create ( priority = priority , title = format_task_title ( task_title_format , message ) , task_list = task_list , ) [EOL] logger . info ( [string] , best_task ) [EOL] [EOL] comment , comment_created = Comment . objects . get_or_create ( task = best_task , email_message_id = message_id , defaults = { [string] : message_from , [string] : text } , ) [EOL] logger . info ( [string] , comment ) [EOL] [EOL] [EOL] def tracker_consumer ( producer , group = None , task_list_slug = None , priority = [number] , task_title_format = [string] ) : [EOL] task_list = TaskList . objects . get ( group__name = group , slug = task_list_slug ) [EOL] for message in producer : [EOL] try : [EOL] insert_message ( task_list , message , priority , task_title_format ) [EOL] except Exception : [EOL] [comment] [EOL] logger . exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import socket [EOL] import sys [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . conf import settings [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] DEFAULT_IMAP_TIMEOUT = [number] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = int , default = [number] ) [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if not hasattr ( settings , [string] ) : [EOL] logger . error ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] worker_name = options [ [string] ] [EOL] tracker = settings . TODO_MAIL_TRACKERS . get ( worker_name , None ) [EOL] if tracker is None : [EOL] logger . error ( [string] , worker_name ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] timeout = options [ [string] ] [EOL] if timeout : [EOL] socket . setdefaulttimeout ( timeout ) [EOL] [EOL] [comment] [EOL] producer = tracker [ [string] ] [EOL] consumer = tracker [ [string] ] [EOL] [EOL] consumer ( producer ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import django [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import redirect , render , reverse [EOL] [EOL] from todo . operations . csv_importer import CSVImporter [EOL] from todo . utils import staff_check [EOL] [EOL] [EOL] @ login_required @ user_passes_test ( staff_check ) def import_csv ( request ) : [EOL] [docstring] [EOL] [EOL] ctx = { [string] : None } [EOL] [EOL] if request . method == [string] : [EOL] filepath = request . FILES . get ( [string] ) [EOL] [EOL] if not filepath : [EOL] messages . error ( request , [string] ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] importer = CSVImporter ( ) [EOL] results = importer . upsert ( filepath ) [EOL] [EOL] if results : [EOL] ctx [ [string] ] = results [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] return render ( request , [string] , context = ctx ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import django [EOL] import datetime [EOL] import datetime [EOL] [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render [EOL] [EOL] from todo . forms import SearchForm [EOL] from todo . models import Task , TaskList [EOL] from todo . utils import staff_check [EOL] [EOL] [EOL] @ login_required @ user_passes_test ( staff_check ) def list_lists ( request ) : [EOL] [docstring] [EOL] [EOL] thedate = datetime . datetime . now ( ) [EOL] searchform = SearchForm ( auto_id = False ) [EOL] [EOL] [comment] [EOL] if not request . user . groups . all ( ) . exists ( ) : [EOL] messages . warning ( request , [string] , ) [EOL] [EOL] [comment] [EOL] lists = TaskList . objects . all ( ) . order_by ( [string] , [string] ) [EOL] if not request . user . is_superuser : [EOL] lists = lists . filter ( group__in = request . user . groups . all ( ) ) [EOL] [EOL] list_count = lists . count ( ) [EOL] [EOL] [comment] [EOL] if request . user . is_superuser : [EOL] task_count = Task . objects . filter ( completed = [number] ) . count ( ) [EOL] else : [EOL] task_count = ( Task . objects . filter ( completed = [number] ) . filter ( task_list__group__in = request . user . groups . all ( ) ) . count ( ) ) [EOL] [EOL] context = { [string] : lists , [string] : thedate , [string] : searchform , [string] : list_count , [string] : task_count , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import django [EOL] from django . conf import settings [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . sites . models import Site [EOL] from django . core . mail import send_mail [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import redirect , render [EOL] from django . template . loader import render_to_string [EOL] [EOL] from todo . defaults import defaults [EOL] from todo . forms import AddExternalTaskForm [EOL] from todo . models import TaskList [EOL] from todo . utils import staff_check [EOL] [EOL] [EOL] @ login_required @ user_passes_test ( staff_check ) def external_add ( request ) : [EOL] [docstring] [EOL] [EOL] if not settings . TODO_DEFAULT_LIST_SLUG : [EOL] [comment] [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if not TaskList . objects . filter ( slug = settings . TODO_DEFAULT_LIST_SLUG ) . exists ( ) : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if request . POST : [EOL] form = AddExternalTaskForm ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] current_site = Site . objects . get_current ( ) [EOL] task = form . save ( commit = False ) [EOL] task . task_list = TaskList . objects . get ( slug = settings . TODO_DEFAULT_LIST_SLUG ) [EOL] task . created_by = request . user [EOL] if defaults ( [string] ) : [EOL] task . assigned_to = get_user_model ( ) . objects . get ( username = settings . TODO_DEFAULT_ASSIGNEE ) [EOL] task . save ( ) [EOL] [EOL] [comment] [EOL] if task . assigned_to : [EOL] email_subject = render_to_string ( [string] , { [string] : task . title } ) [EOL] email_body = render_to_string ( [string] , { [string] : task , [string] : current_site } ) [EOL] try : [EOL] send_mail ( email_subject , email_body , task . created_by . email , [ task . assigned_to . email ] , fail_silently = False , ) [EOL] except ConnectionRefusedError : [EOL] messages . warning ( request , [string] ) [EOL] [EOL] messages . success ( request , [string] ) [EOL] return redirect ( defaults ( [string] ) ) [EOL] [EOL] else : [EOL] form = AddExternalTaskForm ( initial = { [string] : [number] } ) [EOL] [EOL] context = { [string] : form } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse
from todo . views . add_list import add_list [comment] [EOL] from todo . views . del_list import del_list [comment] [EOL] from todo . views . delete_task import delete_task [comment] [EOL] from todo . views . external_add import external_add [comment] [EOL] from todo . views . import_csv import import_csv [comment] [EOL] from todo . views . list_detail import list_detail [comment] [EOL] from todo . views . list_lists import list_lists [comment] [EOL] from todo . views . remove_attachment import remove_attachment [comment] [EOL] from todo . views . reorder_tasks import reorder_tasks [comment] [EOL] from todo . views . search import search [comment] [EOL] from todo . views . task_detail import task_detail [comment] [EOL] from todo . views . toggle_done import toggle_done [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from dal import autocomplete [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . shortcuts import get_object_or_404 [EOL] from django . utils . decorators import method_decorator [EOL] from todo . models import Task [EOL] from todo . utils import user_can_read_task [EOL] [EOL] [EOL] class TaskAutocomplete ( autocomplete . Select2QuerySetView ) : [EOL] @ method_decorator ( login_required ) def dispatch ( self , request , task_id , * args , ** kwargs ) : [EOL] self . task = get_object_or_404 ( Task , pk = task_id ) [EOL] if not user_can_read_task ( self . task , request . user ) : [EOL] raise PermissionDenied [EOL] [EOL] return super ( ) . dispatch ( request , task_id , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] if not self . request . user . is_authenticated : [EOL] return Task . objects . none ( ) [EOL] [EOL] qs = Task . objects . filter ( task_list = self . task . task_list ) . exclude ( pk = self . task . pk ) [EOL] [EOL] if self . q : [EOL] qs = qs . filter ( title__istartswith = self . q ) [EOL] [EOL] return qs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import django [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . http import HttpResponse [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] from todo . models import Task [EOL] from todo . utils import staff_check [EOL] [EOL] [EOL] @ csrf_exempt @ login_required @ user_passes_test ( staff_check ) def reorder_tasks ( request ) : [EOL] [docstring] [EOL] newtasklist = request . POST . getlist ( [string] ) [EOL] if newtasklist : [EOL] [comment] [EOL] del newtasklist [ [number] ] [EOL] [EOL] [comment] [EOL] i = [number] [EOL] for id in newtasklist : [EOL] try : [EOL] task = Task . objects . get ( pk = id ) [EOL] task . priority = i [EOL] task . save ( ) [EOL] i += [number] [EOL] except Task . DoesNotExist : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] [comment] [EOL] return HttpResponse ( status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import django [EOL] import builtins [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from django . urls import reverse [EOL] [EOL] from todo . models import Attachment [EOL] from todo . utils import remove_attachment_file [EOL] [EOL] [EOL] @ login_required def remove_attachment ( request , attachment_id ) : [EOL] [docstring] [EOL] [EOL] if request . method == [string] : [EOL] attachment = get_object_or_404 ( Attachment , pk = attachment_id ) [EOL] [EOL] redir_url = reverse ( [string] , kwargs = { [string] : attachment . task . id } ) [EOL] [EOL] [comment] [EOL] if not ( attachment . task . task_list . group in request . user . groups . all ( ) or request . user . is_superuser ) : [EOL] raise PermissionDenied [EOL] [EOL] if remove_attachment_file ( attachment . id ) : [EOL] messages . success ( request , f" [string] { attachment . id } [string] " ) [EOL] else : [EOL] messages . error ( request , f" [string] { attachment . id } [string] " ) [EOL] [EOL] return redirect ( redir_url ) [EOL] [EOL] else : [EOL] raise PermissionDenied [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import django [EOL] import datetime [EOL] import builtins [EOL] import datetime [EOL] import os [EOL] [EOL] import bleach [EOL] from django import forms [EOL] from django . conf import settings [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] from django . urls import reverse [EOL] [EOL] from todo . defaults import defaults [EOL] from todo . features import HAS_TASK_MERGE [EOL] from todo . forms import AddEditTaskForm [EOL] from todo . models import Attachment , Comment , Task [EOL] from todo . utils import ( send_email_to_thread_participants , staff_check , toggle_task_completed , user_can_read_task , ) [EOL] [EOL] if HAS_TASK_MERGE : [EOL] from dal import autocomplete [EOL] [EOL] [EOL] def handle_add_comment ( request , task ) : [EOL] if not request . POST . get ( [string] ) : [EOL] return [EOL] [EOL] Comment . objects . create ( author = request . user , task = task , body = bleach . clean ( request . POST [ [string] ] , strip = True ) ) [EOL] [EOL] send_email_to_thread_participants ( task , request . POST [ [string] ] , request . user , subject = [string] . format ( task . title ) , ) [EOL] [EOL] messages . success ( request , [string] ) [EOL] [EOL] [EOL] @ login_required @ user_passes_test ( staff_check ) def task_detail ( request , task_id ) : [EOL] [docstring] [EOL] [EOL] task = get_object_or_404 ( Task , pk = task_id ) [EOL] comment_list = Comment . objects . filter ( task = task_id ) . order_by ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not user_can_read_task ( task , request . user ) : [EOL] raise PermissionDenied [EOL] [EOL] [comment] [EOL] if not HAS_TASK_MERGE : [EOL] merge_form = None [EOL] else : [EOL] [EOL] class MergeForm ( forms . Form ) : [EOL] merge_target = forms . ModelChoiceField ( queryset = Task . objects . all ( ) , widget = autocomplete . ModelSelect2 ( url = reverse ( [string] , kwargs = { [string] : task_id } ) ) , ) [EOL] [EOL] [comment] [EOL] if not request . POST . get ( [string] ) : [EOL] merge_form = MergeForm ( ) [EOL] else : [EOL] merge_form = MergeForm ( request . POST ) [EOL] if merge_form . is_valid ( ) : [EOL] merge_target = merge_form . cleaned_data [ [string] ] [EOL] if not user_can_read_task ( merge_target , request . user ) : [EOL] raise PermissionDenied [EOL] [EOL] task . merge_into ( merge_target ) [EOL] return redirect ( reverse ( [string] , kwargs = { [string] : merge_target . pk } ) ) [EOL] [EOL] [comment] [EOL] handle_add_comment ( request , task ) [EOL] [EOL] [comment] [EOL] if not request . POST . get ( [string] ) : [EOL] form = AddEditTaskForm ( request . user , instance = task , initial = { [string] : task . task_list } ) [EOL] else : [EOL] form = AddEditTaskForm ( request . user , request . POST , instance = task , initial = { [string] : task . task_list } ) [EOL] [EOL] if form . is_valid ( ) : [EOL] item = form . save ( commit = False ) [EOL] item . note = bleach . clean ( form . cleaned_data [ [string] ] , strip = True ) [EOL] item . title = bleach . clean ( form . cleaned_data [ [string] ] , strip = True ) [EOL] item . save ( ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] , list_id = task . task_list . id , list_slug = task . task_list . slug ) [EOL] [EOL] [comment] [EOL] if request . POST . get ( [string] ) : [EOL] results_changed = toggle_task_completed ( task . id ) [EOL] if results_changed : [EOL] messages . success ( request , f" [string] { task . id }" ) [EOL] [EOL] return redirect ( [string] , task_id = task . id ) [EOL] [EOL] if task . due_date : [EOL] thedate = task . due_date [EOL] else : [EOL] thedate = datetime . datetime . now ( ) [EOL] [EOL] [comment] [EOL] if request . FILES . get ( [string] ) : [EOL] file = request . FILES . get ( [string] ) [EOL] [EOL] if file . size > defaults ( [string] ) : [EOL] messages . error ( request , f" [string] " ) [EOL] return redirect ( [string] , task_id = task . id ) [EOL] [EOL] name , extension = os . path . splitext ( file . name ) [EOL] [EOL] if extension not in defaults ( [string] ) : [EOL] messages . error ( request , f" [string] { extension } [string] " ) [EOL] return redirect ( [string] , task_id = task . id ) [EOL] [EOL] Attachment . objects . create ( task = task , added_by = request . user , timestamp = datetime . datetime . now ( ) , file = file ) [EOL] messages . success ( request , f" [string] " ) [EOL] return redirect ( [string] , task_id = task . id ) [EOL] [EOL] context = { [string] : task , [string] : comment_list , [string] : form , [string] : merge_form , [string] : thedate , [string] : defaults ( [string] ) , [string] : defaults ( [string] ) , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0