import setuptools [EOL] [EOL] [EOL] def get_long_description ( ) : [EOL] return open ( [string] , [string] , encoding = [string] ) . read ( ) [EOL] [EOL] [EOL] setuptools . setup ( name = [string] , version = [string] , url = [string] , license = [string] , description = [string] , long_description = get_long_description ( ) , author = [string] , author_email = [string] , packages = setuptools . find_packages ( ) , py_modules = [ [string] ] , install_requires = [ [string] , [string] , [string] ] , entry_points = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import minimizer [EOL] import typing [EOL] import os [EOL] import typing [EOL] [EOL] import click [EOL] [EOL] from minimizer . core import Minimizer [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , [string] , [string] , default = os . getcwd ( ) , help = [string] , ) @ click . option ( [string] , [string] , [string] , type = ( int , int ) , default = ( [number] , [number] ) , help = [string] , ) @ click . option ( [string] , [string] , [string] , default = None , help = [string] , ) @ click . option ( [string] , [string] , [string] , help = [string] , ) def run ( * args , ** kwargs ) : [EOL] try : [EOL] mini = Minimizer ( * args , ** kwargs ) [EOL] mini ( ) [EOL] finally : [EOL] click . echo ( f" [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Generator , Tuple [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import typing [EOL] [EOL] import click [EOL] import crayons [EOL] from PIL import Image [EOL] [EOL] [EOL] IMAGE_FORMATS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class Minimizer : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , directory , name = None , size = None , format = None , ) : [EOL] assert os . path . isdir ( directory ) , f"{ directory } [string] " [EOL] [EOL] if format is not None : [EOL] assert ( format . upper ( ) in IMAGE_FORMATS ) , f" [string] { format } [string] " [EOL] [EOL] if name is not None : [EOL] assert os . path . isfile ( f"{ directory } [string] { name }" ) , f" [string] { crayons . red ( name , bold = True ) } [string] " [EOL] self . dir = directory [EOL] self . size = size [EOL] self . format = format [EOL] self . name = name [EOL] [EOL] def __call__ ( self ) : [EOL] for path , name , extension in self . _images_of_dir ( ) : [EOL] if self . format is not None : [EOL] extension = f" [string] { self . format . lower ( ) }" [EOL] outfile = f"{ name } [string] { extension }" [EOL] try : [EOL] im = Image . open ( path ) [EOL] im . thumbnail ( self . size , Image . ANTIALIAS ) [EOL] im . save ( outfile , self . format ) [EOL] except IOError : [EOL] filename = crayons . red ( path . split ( [string] ) [ - [number] ] , bold = True ) [EOL] click . echo ( f" [string] { filename }" ) [EOL] [EOL] def _images_of_dir ( self ) : [EOL] for entry in os . scandir ( self . dir ) : [EOL] if not entry . is_file ( ) : [EOL] continue [comment] [EOL] if self . name is not None and self . name != entry . name : [EOL] continue [comment] [EOL] name , extension = os . path . splitext ( entry . path ) [EOL] yield entry . path , name , extension [EOL] if self . name is not None and self . name == entry . name : [EOL] break [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,builtins.str,builtins.str],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Tuple [EOL] import minimizer [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from minimizer . core import Minimizer [EOL] [EOL] fp = os . path . abspath ( os . path . join ( [string] , os . pardir ) ) + [string] [EOL] filename = [string] [EOL] size = ( [number] , [number] ) [EOL] _format = [string] [EOL] [EOL] [EOL] def test_minimizer_fails_with_bad_directory ( ) : [EOL] with pytest . raises ( AssertionError ) as exc : [EOL] m = Minimizer ( [string] ) [EOL] assert [string] in str ( exc ) [EOL] [EOL] [EOL] def test_minimizer_fails_with_unsupported_image_format ( ) : [EOL] with pytest . raises ( AssertionError ) as exc : [EOL] m = Minimizer ( fp , format = [string] ) [EOL] assert [string] in str ( exc ) [EOL] [EOL] [EOL] def test_minimizer_fails_with_bad_filename ( ) : [EOL] with pytest . raises ( AssertionError ) as exc : [EOL] m = Minimizer ( fp , name = [string] ) [EOL] assert [string] in str ( exc ) [EOL] [EOL] [EOL] def test_minimizer_runs_and_creates_new_image ( ) : [EOL] m = Minimizer ( fp , size = size ) [EOL] m ( ) [EOL] assert os . path . isfile ( f"{ fp } [string] { filename }" ) == True [EOL] os . remove ( f"{ fp } [string] { filename }" ) [EOL] [EOL] [EOL] def test_minimizer_converts_image_format ( ) : [EOL] m = Minimizer ( fp , size = size , format = _format ) [EOL] m ( ) [EOL] name = filename . replace ( [string] , [string] ) [EOL] assert os . path . isfile ( f"{ fp } [string] { name }" ) == True [EOL] os . remove ( f"{ fp } [string] { name }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] from click . testing import CliRunner [EOL] [EOL] from minimizer . cli import run [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def runner ( ) : [EOL] return CliRunner ( ) [EOL] [EOL] [EOL] def test_run_function_completes_without_error ( runner ) : [EOL] result = runner . invoke ( run ) [EOL] assert result . exception is None [EOL] assert result . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0