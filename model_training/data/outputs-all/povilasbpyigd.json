from aiomock import AIOMock [EOL] [EOL] [EOL] class AsyncMock ( AIOMock ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . async_return_value = kwargs . get ( [string] ) [EOL] self . async_side_effect = kwargs . get ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import igd [EOL] from unittest . mock import patch , MagicMock , ANY [EOL] import io [EOL] [EOL] from hamcrest import assert_that , is_ [EOL] import pytest [EOL] import curio [EOL] [EOL] from igd . proto import PortMapping [EOL] from igd . core import _port_mapping_to_arr , delete_port_mappings [EOL] from igd import core , soap [EOL] [EOL] from utils import AsyncMock [EOL] [EOL] [EOL] def describe_handle_exceptions ( ) : [EOL] def describe_when_given_function_succeeds ( ) : [EOL] def it_returns_what_function_returns ( ) : [EOL] @ core . handle_exceptions async def func ( ) : [EOL] return [number] [EOL] [EOL] retval = curio . run ( func ) [EOL] [EOL] assert_that ( retval , is_ ( [number] ) ) [EOL] [EOL] def describe_when_expected_exceptions_happen ( ) : [EOL] @ patch ( [string] , MagicMock ( ) ) @ pytest . mark . parametrize ( [string] , [ soap . HttpError ( [number] , [string] ) , soap . InvalidArgsError ( [number] , [string] ) ] ) def it_makes_wrapped_function_not_to_fail ( error ) : [EOL] @ core . handle_exceptions async def func ( ) : [EOL] raise error [EOL] [EOL] curio . run ( func ) [EOL] [EOL] def describe_get_ip ( ) : [EOL] def it_prints_external_ip_address ( ) : [EOL] gateway = AsyncMock ( ) [EOL] gateway . get_ext_ip . async_return_value = [string] [EOL] [EOL] with patch ( [string] , AsyncMock ( async_return_value = gateway ) ) : [EOL] with patch ( [string] , new_callable = io . StringIO ) as out : [EOL] curio . run ( core . get_ip ) [EOL] [EOL] assert_that ( out . getvalue ( ) , is_ ( [string] ) ) [EOL] [EOL] [EOL] def describe__port_mapping_to_arr ( ) : [EOL] def it_returns_port_mapping_fields_as_array_ready_to_be_printed ( ) : [EOL] mapping = PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) [EOL] [EOL] values = _port_mapping_to_arr ( mapping ) [EOL] [EOL] assert_that ( values , is_ ( [ [string] , [string] , [string] , [string] , [string] , [string] ] ) ) [EOL] [EOL] [EOL] def describe_delete_port_mappings ( ) : [EOL] def describe_when_pattern_is_port ( ) : [EOL] def describe_when_protocol_is_not_specified ( ) : [EOL] @ patch ( [string] , AsyncMock ( ) ) def it_deletes_mappings_for_all_possible_protocols ( ) : [EOL] with patch ( [string] , AsyncMock ( ) ) as delete_mappings : [EOL] curio . run ( delete_port_mappings ( [string] , None ) ) [EOL] [EOL] delete_mappings . assert_called_with ( ANY , [number] , [ [string] , [string] ] ) [EOL] [EOL] def describe_when_protocol_is_specified ( ) : [EOL] @ patch ( [string] , AsyncMock ( ) ) def it_deletes_mapping_for_given_port_and_protocol ( ) : [EOL] with patch ( [string] , AsyncMock ( ) ) as delete_mappings : [EOL] curio . run ( delete_port_mappings ( [string] , [string] ) ) [EOL] [EOL] delete_mappings . assert_called_with ( ANY , [number] , [ [string] ] ) [EOL] [EOL] def describe_when_pattern_is_any_other_string ( ) : [EOL] @ patch ( [string] , AsyncMock ( ) ) def it_deletes_mappings_by_description ( ) : [EOL] with patch ( [string] , AsyncMock ( ) ) as delete_mappings : [EOL] curio . run ( delete_port_mappings ( [string] , None ) ) [EOL] [EOL] delete_mappings . assert_called_with ( ANY , [string] , [ [string] , [string] ] ) [EOL] [EOL] [EOL] def describe__delete_port_mappings_by_port ( ) : [EOL] def it_deletes_port_for_every_given_protocol ( ) : [EOL] gateway = AsyncMock ( ) [EOL] [EOL] curio . run ( core . _delete_port_mappings_by_port ( gateway , [number] , [ [string] , [string] ] ) ) [EOL] [EOL] gateway . delete_port_mapping . assert_any_call ( [number] , [string] ) [EOL] gateway . delete_port_mapping . assert_any_call ( [number] , [string] ) [EOL] [EOL] def describe_soap_error_is_received ( ) : [EOL] def describe_when_error_is_invalid_args ( ) : [EOL] def it_continues_silently ( ) : [EOL] gateway = AsyncMock ( ) [EOL] gateway . delete_port_mapping . side_effect = soap . InvalidArgsError ( soap . ERROR_INVALID_ARGS , [string] ) [EOL] [EOL] curio . run ( core . _delete_port_mappings_by_port ( gateway , [number] , [ [string] ] ) ) [EOL] [EOL] def describe_when_error_is_unknown ( ) : [EOL] def it_reraises_it ( ) : [EOL] gateway = AsyncMock ( ) [EOL] gateway . delete_port_mapping . side_effect = soap . Error ( [number] , [string] ) [EOL] [EOL] async def del_port ( ) : [EOL] try : [EOL] await core . _delete_port_mappings_by_port ( gateway , [number] , [ [string] ] ) [EOL] except soap . Error as e : [EOL] assert_that ( e . code , is_ ( [number] ) ) [EOL] [EOL] curio . run ( del_port ) [EOL] [EOL] [EOL] def describe__delete_port_mappings_by_description ( ) : [EOL] def it_deletes_all_mappings_whose_description_match_given_pattern ( ) : [EOL] gateway = AsyncMock ( ) [EOL] gateway . get_port_mappings = AsyncMock ( async_return_value = [ PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , ] ) [EOL] [EOL] curio . run ( core . _delete_port_mappings_by_description ( gateway , [string] , [ [string] , [string] ] ) ) [EOL] [EOL] gateway . delete_port_mapping . assert_any_call ( [number] , [string] ) [EOL] gateway . delete_port_mapping . assert_any_call ( [number] , [string] ) [EOL] [EOL] def describe_when_not_all_ports_are_specified ( ) : [EOL] def it_deletes_only_mappings_whose_description_and_protocol_match ( ) : [EOL] gateway = AsyncMock ( ) [EOL] gateway . get_port_mappings = AsyncMock ( async_return_value = [ PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , PortMapping ( None , [number] , [number] , [string] , [string] , True , [string] , [number] ) , ] ) [EOL] [EOL] curio . run ( core . _delete_port_mappings_by_description ( gateway , [string] , [ [string] ] ) ) [EOL] [EOL] gateway . delete_port_mapping . assert_called_with ( [number] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from unittest . mock import patch , MagicMock [EOL] [EOL] from hamcrest import assert_that , is_ [EOL] import curio [EOL] from aiomock import AIOMock [EOL] [EOL] from igd import ssdp [EOL] [EOL] from utils import AsyncMock [EOL] [EOL] [EOL] def read_fixture_bytes ( fixture_name ) : [EOL] with open ( [string] . format ( fixture_name ) , [string] ) as f : [EOL] return f . read ( ) [EOL] [EOL] [EOL] def describe_parse_igd_profile ( ) : [EOL] def it_extracts_upnpn_scheme_and_control_url ( ) : [EOL] resp_xml = read_fixture_bytes ( [string] ) [EOL] [EOL] control_url , upnp_schema = ssdp . _parse_igd_profile ( resp_xml ) [EOL] [EOL] assert_that ( control_url , is_ ( [string] ) ) [EOL] assert_that ( upnp_schema , is_ ( [string] ) ) [EOL] [EOL] [EOL] def describe_make_ssdp_request ( ) : [EOL] def it_returns_ip_from_which_the_response_was_received ( ) : [EOL] sock = AsyncMock ( ) [EOL] resp = [string] [EOL] sock . recvfrom . async_return_value = ( resp , ( [string] , [number] ) ) [EOL] with patch ( [string] , MagicMock ( return_value = sock ) ) : [EOL] _ , igd_ip = curio . run ( ssdp . _make_ssdp_request ( ) ) [EOL] [EOL] assert_that ( igd_ip , is_ ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import igd [EOL] from hamcrest import assert_that , is_ [EOL] [EOL] from igd import proto [EOL] [EOL] [EOL] def describe_parse_port_mapping ( ) : [EOL] def it_extracts_fields_from_xml_response ( ) : [EOL] xml_resp = [string] [EOL] [EOL] port_mapping = proto . parse_port_mapping ( xml_resp ) [EOL] [EOL] assert_that ( port_mapping . external_port , is_ ( [number] ) ) [EOL] assert_that ( port_mapping . internal_port , is_ ( [number] ) ) [EOL] assert_that ( port_mapping . ip , is_ ( [string] ) ) [EOL] assert_that ( port_mapping . protocol , is_ ( [string] ) ) [EOL] assert_that ( port_mapping . remote_host , is_ ( [string] ) ) [EOL] assert_that ( port_mapping . enabled , is_ ( True ) ) [EOL] assert_that ( port_mapping . description , is_ ( [string] ) ) [EOL] assert_that ( port_mapping . duration , is_ ( [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import igd [EOL] from unittest . mock import MagicMock , patch [EOL] [EOL] from hamcrest import assert_that , is_ , calling , raises [EOL] import curio [EOL] [EOL] from igd import soap [EOL] [EOL] from utils import AsyncMock [EOL] [EOL] [EOL] def describe_Error ( ) : [EOL] def describe__str__ ( ) : [EOL] def it_formats_message_and_error_code ( ) : [EOL] err = soap . Error ( [number] , [string] ) [EOL] [EOL] assert_that ( str ( err ) , is_ ( [string] ) ) [EOL] [EOL] [EOL] def describe_Response ( ) : [EOL] def describe_xml ( ) : [EOL] def it_returns_response_body_parsed_to_beautifulsoap_xml_object ( ) : [EOL] resp = soap . Response ( [string] , [number] ) [EOL] [EOL] doc = resp . xml ( ) [EOL] [EOL] assert_that ( doc . data . string , is_ ( [string] ) ) [EOL] [EOL] [EOL] def describe_post ( ) : [EOL] def it_returns_successfull_responses ( ) : [EOL] resp = MagicMock ( content = [string] , status_code = [number] ) [EOL] [EOL] with patch ( [string] , AsyncMock ( async_return_value = resp ) ) : [EOL] soap_resp = curio . run ( soap . post , [string] , [string] , [string] ) [EOL] [EOL] assert_that ( soap_resp . status_code , is_ ( [number] ) ) [EOL] assert_that ( soap_resp . body , is_ ( [string] ) ) [EOL] [EOL] [EOL] def describe__validate_response ( ) : [EOL] def describe_when_response_code_is_500 ( ) : [EOL] def describe_and_soap_error_is_402 ( ) : [EOL] def it_raises_invalid_args_error ( ) : [EOL] resp = MagicMock ( ) [EOL] resp . status_code = [number] [EOL] resp . content = [string] [EOL] [EOL] assert_that ( calling ( soap . _validate_response ) . with_args ( resp ) , raises ( soap . InvalidArgsError ) ) [EOL] [EOL] def describe_and_soap_error_is_713 ( ) : [EOL] def it_raises_invalid_array_index_error ( ) : [EOL] resp = MagicMock ( ) [EOL] resp . status_code = [number] [EOL] resp . content = [string] [EOL] [EOL] assert_that ( calling ( soap . _validate_response ) . with_args ( resp ) , raises ( soap . InvalidArrayIndex ) ) [EOL] [EOL] def describe_and_soap_error_is_some_unknown_error ( ) : [EOL] def it_raises_generic_soap_error ( ) : [EOL] resp = MagicMock ( ) [EOL] resp . status_code = [number] [EOL] resp . content = [string] [EOL] [EOL] assert_that ( calling ( soap . _validate_response ) . with_args ( resp ) , raises ( soap . Error ) ) [EOL] [EOL] def describe_when_response_code_is_not_200 ( ) : [EOL] def it_raises_http_error ( ) : [EOL] resp = MagicMock ( ) [EOL] resp . status_code = [number] [EOL] resp . content = [string] [EOL] [EOL] assert_that ( calling ( soap . _validate_response ) . with_args ( resp ) , raises ( soap . HttpError ) ) [EOL] [EOL] def describe_when_response_code_is_200 ( ) : [EOL] def it_returns_silently ( ) : [EOL] resp = MagicMock ( ) [EOL] resp . status_code = [number] [EOL] resp . content = [string] [EOL] [EOL] soap . _validate_response ( resp ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] import igd [EOL] import igd [EOL] import curio [EOL] [EOL] [EOL] async def main ( ) : [EOL] gateway = await igd . find_gateway ( ) [EOL] print ( [string] , gateway ) [EOL] [EOL] internal_port = [number] [EOL] external_port = [number] [EOL] ip = [string] [EOL] duration_in_seconds = [number] [EOL] description = [string] [EOL] enabled = True [EOL] mapping = igd . proto . PortMapping ( [string] , internal_port , external_port , [string] , ip , enabled , description , duration_in_seconds ) [EOL] await gateway . add_port_mapping ( mapping ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] curio . run ( main ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import builtins [EOL] import typing [EOL] import igd [EOL] from typing import Optional [EOL] [EOL] import curio [EOL] import click [EOL] [EOL] from . import core , proto [EOL] [EOL] [EOL] @ click . command ( short_help = [string] , help = [string] , ) def ls ( ) : [EOL] port_mapping = curio . run ( core . get_port_mappings ) [EOL] print ( port_mapping ) [EOL] [EOL] [EOL] @ click . command ( short_help = [string] , help = [string] , ) def ip ( ) : [EOL] curio . run ( core . get_ip ) [EOL] [EOL] [EOL] @ click . command ( short_help = [string] , help = [string] , ) @ click . option ( [string] , [string] , [string] , type = int , required = True , help = [string] , ) @ click . option ( [string] , [string] , [string] , type = int , help = [string] [string] , ) @ click . option ( [string] , [string] , type = str , required = False , help = [string] [string] , ) @ click . option ( [string] , [string] , [string] , type = str , default = [string] , show_default = True , help = [string] , ) @ click . option ( [string] , [string] , [string] , type = str , default = [string] , show_default = True , help = [string] , ) @ click . option ( [string] , [string] , [string] , type = int , default = [number] , show_default = True , help = [string] [string] , ) def add ( external_port , internal_port , ip , protocol , description , duration ) : [EOL] internal_port = internal_port or external_port [EOL] mapping = proto . PortMapping ( [string] , internal_port , external_port , protocol , ip , True , description , duration ) [EOL] curio . run ( core . add_port_mapping , mapping ) [EOL] [EOL] [EOL] @ click . command ( short_help = [string] , help = [string] [string] , ) @ click . option ( [string] , [string] , [string] , type = str , help = [string] [string] [string] [string] , ) @ click . argument ( [string] , type = str , required = True , ) def rm ( pattern , protocol ) : [EOL] curio . run ( core . delete_port_mappings , pattern , protocol ) [EOL] [EOL] [EOL] @ click . group ( ) def cli ( ) : [EOL] pass [EOL] [EOL] [EOL] def main ( ) : [EOL] cli . add_command ( ls ) [EOL] cli . add_command ( ip ) [EOL] cli . add_command ( add ) [EOL] cli . add_command ( rm ) [EOL] cli ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import asks [EOL] import typing [EOL] import builtins [EOL] import bs4 [EOL] import asks [EOL] from bs4 import BeautifulSoup [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] ERROR_INVALID_ARGS = [number] [EOL] ERROR_INVALID_ACTION = [number] [EOL] ERROR_ACTION_FAILED = [number] [EOL] ERROR_INVALID_ARRAY_INDEX = [number] [EOL] ERROR_NO_SUCH_ENTRY_IN_ARRAY = [number] [EOL] [EOL] [EOL] class Error ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , code , msg ) : [EOL] self . code = code [EOL] self . message = msg [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . message , self . code ) [EOL] [EOL] [EOL] class InvalidArgsError ( Error ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidArrayIndex ( Error ) : [EOL] pass [EOL] [EOL] [EOL] class NoSuchEntryInArray ( Error ) : [EOL] pass [EOL] [EOL] [EOL] class HttpError ( Error ) : [EOL] pass [EOL] [EOL] [EOL] class Response : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , body , status_code ) : [EOL] self . body = body [EOL] self . status_code = status_code [EOL] [EOL] def xml ( self ) : [EOL] [docstring] [EOL] return BeautifulSoup ( self . body , [string] ) [EOL] [EOL] [EOL] async def post ( url , msg , soap_action ) : [EOL] [docstring] [EOL] headers = { [string] : soap_action , [string] : [string] } [EOL] resp = await asks . post ( url , data = msg , headers = headers ) [EOL] _validate_response ( resp ) [EOL] return Response ( resp . content , resp . status_code ) [EOL] [EOL] [EOL] def _validate_response ( resp ) : [EOL] if resp . status_code == [number] : [EOL] doc = BeautifulSoup ( resp . content , [string] ) [EOL] err_code = int ( doc . errorCode . string ) [EOL] err_msg = doc . errorDescription . string [EOL] [EOL] if err_code == ERROR_INVALID_ARGS : [EOL] raise InvalidArgsError ( err_code , err_msg ) [EOL] elif err_code == ERROR_INVALID_ARRAY_INDEX : [EOL] raise InvalidArrayIndex ( err_code , err_msg ) [EOL] elif err_code == ERROR_NO_SUCH_ENTRY_IN_ARRAY : [EOL] raise NoSuchEntryInArray ( err_code , err_msg ) [EOL] raise Error ( err_code , err_msg ) [EOL] [EOL] if resp . status_code != [number] : [EOL] raise HttpError ( resp . status_code , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 $builtins.int$ 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , List , Literal , Callable , Any [EOL] import proto [EOL] import typing_extensions [EOL] import builtins [EOL] import igd [EOL] import typing [EOL] from typing import List , Optional , Callable , Any [EOL] [EOL] from tabulate import tabulate [EOL] from curio import socket [EOL] import curio [EOL] [EOL] from . import ssdp , proto , soap , Gateway [EOL] [EOL] [EOL] def handle_exceptions ( func ) : [EOL] [docstring] [EOL] async def wrapper ( * args , ** kwargs ) : [EOL] try : [EOL] return await func ( * args , ** kwargs ) [EOL] except soap . HttpError as e : [EOL] print ( [string] . format ( e . code , e . message ) ) [EOL] except soap . InvalidArgsError as e : [EOL] print ( [string] . format ( e . message ) ) [EOL] return wrapper [EOL] [EOL] [EOL] @ handle_exceptions async def get_ip ( ) : [EOL] gateway = await ssdp . find_gateway ( ) [EOL] ip = await gateway . get_ext_ip ( ) [EOL] print ( ip ) [EOL] [EOL] [EOL] async def get_port_mappings ( ) : [EOL] gateway = await ssdp . find_gateway ( ) [EOL] mappings = await gateway . get_port_mappings ( ) [EOL] return _format_mappings ( mappings ) [EOL] [EOL] [EOL] @ handle_exceptions async def add_port_mapping ( mapping ) : [EOL] gateway = await ssdp . find_gateway ( ) [EOL] if mapping . ip is None : [EOL] mapping . ip = await _get_local_ip_to ( gateway . ip ) [EOL] await gateway . add_port_mapping ( mapping ) [EOL] [EOL] [EOL] [comment] [EOL] @ handle_exceptions async def delete_port_mappings ( pattern , protocol ) : [EOL] [docstring] [EOL] gateway = await ssdp . find_gateway ( ) [EOL] protocols = [ protocol . upper ( ) ] if protocol is not None else [ [string] , [string] ] [EOL] if pattern . isdigit ( ) : [EOL] await _delete_port_mappings_by_port ( gateway , int ( pattern ) , protocols ) [EOL] else : [EOL] await _delete_port_mappings_by_description ( gateway , pattern , protocols ) [EOL] [EOL] [EOL] async def _delete_port_mappings_by_port ( gateway , ext_port , protocols ) : [EOL] for prot in protocols : [EOL] try : [EOL] await gateway . delete_port_mapping ( ext_port , prot ) [EOL] except ( soap . InvalidArgsError , soap . NoSuchEntryInArray ) : [EOL] pass [EOL] [EOL] [EOL] async def _delete_port_mappings_by_description ( gateway , pattern , protocols ) : [EOL] mappings = await gateway . get_port_mappings ( ) [EOL] mappings = [ m for m in mappings if m . description == pattern and m . protocol in protocols ] [EOL] tasks = [ await curio . spawn ( gateway . delete_port_mapping , m . external_port , m . protocol ) for m in mappings ] [EOL] for t in tasks : [EOL] [comment] [EOL] await t . join ( ) [EOL] [EOL] [EOL] def _format_mappings ( mappings ) : [EOL] headers = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] rows = [ _port_mapping_to_arr ( m ) for m in mappings ] [EOL] return tabulate ( rows , headers = headers ) [EOL] [EOL] [EOL] def _port_mapping_to_arr ( mapping ) : [EOL] status = [string] if mapping . enabled else [string] [EOL] return [ mapping . description , str ( mapping . external_port ) , mapping . protocol , str ( mapping . internal_port ) , mapping . ip , status ] [EOL] [EOL] [EOL] async def _get_local_ip_to ( gateway_ip ) : [EOL] [docstring] [EOL] sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] await sock . connect ( ( gateway_ip , [number] ) ) [EOL] return sock . getsockname ( ) [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Tuple [EOL] import proto [EOL] import soap [EOL] import builtins [EOL] import igd [EOL] import typing [EOL] [docstring] [EOL] [EOL] import re [EOL] from typing import Tuple , List [EOL] [EOL] from curio import socket [EOL] import asks [EOL] from yarl import URL [EOL] from bs4 import BeautifulSoup [EOL] [EOL] from . import proto , soap [EOL] [EOL] [EOL] asks . init ( [string] ) [EOL] [EOL] SSDP_REQUEST = [string] [string] [string] [string] [string] [string] [EOL] [EOL] [EOL] class Gateway : [EOL] def __init__ ( self , control_url , ip ) : [EOL] self . control_url = control_url [EOL] self . ip = ip [EOL] [EOL] async def get_ext_ip ( self ) : [EOL] req = proto . RequestBuilder ( ) . ext_ip ( ) [EOL] resp = await soap . post ( self . control_url , req . body ( ) , req . header ( ) ) [EOL] return resp . xml ( ) . NewExternalIPAddress . string [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] async def get_port_mappings ( self ) : [EOL] [docstring] [EOL] mappings = [ ] [EOL] i = [number] [EOL] while True : [EOL] try : [EOL] mappings . append ( await self . get_port_mapping ( i ) ) [EOL] i += [number] [EOL] except ( soap . InvalidArgsError , soap . InvalidArrayIndex ) : [EOL] break [EOL] [EOL] return mappings [EOL] [EOL] async def get_port_mapping ( self , i ) : [EOL] req = proto . RequestBuilder ( ) . get_port_mapping ( i ) [EOL] resp = await self . _make_request ( req ) [EOL] return proto . parse_port_mapping ( resp . body ) [EOL] [EOL] async def add_port_mapping ( self , mapping ) : [EOL] req = proto . RequestBuilder ( ) . add_port_mapping ( mapping ) [EOL] await self . _make_request ( req ) [EOL] [EOL] async def delete_port_mapping ( self , ext_port , protocol ) : [EOL] req = proto . RequestBuilder ( ) . delete_port_mapping ( ext_port , protocol ) [EOL] await self . _make_request ( req ) [EOL] [EOL] async def _make_request ( self , req ) : [EOL] return await soap . post ( self . control_url , req . body ( ) , req . header ( ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . control_url ) [EOL] [EOL] [EOL] async def find_gateway ( ) : [EOL] location , gateway_ip = await _make_ssdp_request ( ) [EOL] resp = await asks . get ( location ) [EOL] control_path , upnp_schema = _parse_igd_profile ( resp . content ) [EOL] control_url = URL ( location ) . with_path ( control_path ) [EOL] return Gateway ( str ( control_url ) , gateway_ip ) [EOL] [EOL] [EOL] async def _make_ssdp_request ( ) : [EOL] [docstring] [EOL] sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] await sock . sendto ( SSDP_REQUEST , ( [string] , [number] ) ) [EOL] [comment] [EOL] resp , addr = await sock . recvfrom ( [number] ) [EOL] return _parse_location_from ( resp . decode ( [string] ) ) , addr [ [number] ] [EOL] [EOL] [EOL] [comment] [EOL] def _parse_location_from ( response ) : [EOL] [docstring] [EOL] parsed = re . findall ( [string] , response ) [EOL] location_header = list ( filter ( lambda x : x [ [number] ] . lower ( ) == [string] , parsed ) ) [EOL] [EOL] if not len ( location_header ) : [EOL] raise Exception ( [string] ) [EOL] return location_header [ [number] ] [ [number] ] [EOL] [EOL] [EOL] def _parse_igd_profile ( profile_xml ) : [EOL] [docstring] [EOL] doc = BeautifulSoup ( profile_xml , [string] ) [EOL] elems = doc . find_all ( [string] ) [EOL] for service_type in elems : [EOL] upnp_schema = service_type . string . split ( [string] ) [ - [number] ] [EOL] if upnp_schema in [ [string] , [string] , [string] ] : [EOL] control_url = service_type . parent . find ( [string] ) . string [EOL] return control_url , upnp_schema [EOL] [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 0 0 0 0 $igd.soap.Response$ 0 0 0 0 0 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 $igd.soap.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[proto.PortMapping]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $proto.PortMapping$ 0 0 0 $builtins.int$ 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $igd.soap.Response$ 0 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 $igd.soap.Response$ 0 0 0 0 0 0 0 $None$ 0 0 0 $proto.PortMapping$ 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 0 0 $proto.PortMapping$ 0 0 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 $igd.proto.RequestBuilder$ 0 0 0 0 0 $soap.Response$ 0 0 0 $proto.RequestBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $proto.RequestBuilder$ 0 0 0 0 0 $proto.RequestBuilder$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Gateway$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . ssdp import find_gateway , Gateway [EOL] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from bs4 import BeautifulSoup [EOL] [EOL] [EOL] class PortMapping : [EOL] def __init__ ( self , remote_host , external_port , internal_port , protocol , ip , enabled , description , duration ) : [EOL] self . remote_host = remote_host [EOL] self . external_port = external_port [EOL] self . internal_port = internal_port [EOL] self . protocol = protocol [EOL] self . ip = ip [EOL] self . enabled = enabled [EOL] self . description = description [EOL] self . duration = duration [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( str ( self . __dict__ ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] [EOL] class RequestBuilder : [EOL] def __init__ ( self ) : [EOL] self . _body_tmpl = [string] [EOL] self . _scheme = [string] [EOL] self . _header_tmpl = [string] . format ( self . _scheme ) + [string] [EOL] [EOL] def ext_ip ( self ) : [EOL] self . _body = [string] . format ( self . _scheme ) [EOL] self . _header = [string] [EOL] return self [EOL] [EOL] def get_port_mapping ( self , port_index ) : [EOL] [docstring] [EOL] self . _body = [string] . format ( self . _scheme , port_index ) [EOL] self . _header = [string] [EOL] return self [EOL] [EOL] def add_port_mapping ( self , mapping ) : [EOL] self . _body = [string] . format ( self . _scheme , ext_port = mapping . external_port , protocol = mapping . protocol . upper ( ) , int_port = mapping . internal_port , ip = mapping . ip , description = mapping . description , duration = mapping . duration , ) [EOL] self . _header = [string] [EOL] return self [EOL] [EOL] def delete_port_mapping ( self , ext_port , protocol ) : [EOL] self . _body = [string] . format ( self . _scheme , ext_port = ext_port , protocol = protocol ) [EOL] self . _header = [string] [EOL] return self [EOL] [EOL] def body ( self ) : [EOL] [docstring] [EOL] return self . _body_tmpl . format ( self . _body ) [EOL] [EOL] def header ( self ) : [EOL] [docstring] [EOL] return self . _header_tmpl . format ( self . _header ) [EOL] [EOL] [EOL] def parse_port_mapping ( xml_resp ) : [EOL] doc = BeautifulSoup ( xml_resp , [string] ) [EOL] return PortMapping ( remote_host = doc . NewRemoteHost . string , external_port = int ( doc . NewExternalPort . string ) , internal_port = int ( doc . NewInternalPort . string ) , protocol = doc . NewProtocol . string , ip = doc . NewInternalClient . string , enabled = bool ( int ( doc . NewEnabled . string ) ) , description = doc . NewPortMappingDescription . string , duration = int ( doc . NewLeaseDuration . string ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $'RequestBuilder'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'RequestBuilder'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $'RequestBuilder'$ 0 0 0 $PortMapping$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'RequestBuilder'$ 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PortMapping$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0