from typing import List , Dict , Any [EOL] import typing [EOL] from setuptools import setup [EOL] import os [EOL] from setuptools . command . install import install [EOL] [EOL] [EOL] classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def package_files ( directory ) : [EOL] paths = [ ] [EOL] for ( path , directories , filenames ) in os . walk ( directory ) : [EOL] for filename in filenames : [EOL] paths . append ( os . path . join ( [string] , path , filename ) ) [EOL] return paths [EOL] [EOL] [EOL] ms_extra_files = package_files ( [string] ) [EOL] tw_extra_files = package_files ( [string] ) [EOL] [EOL] [EOL] try : [EOL] import twisted [comment] [EOL] except ImportError : [EOL] raise SystemExit ( [string] [string] ) [EOL] [EOL] [EOL] class InstallTwistedPlugin ( install , object ) : [EOL] def run ( self ) : [EOL] super ( InstallTwistedPlugin , self ) . run ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] try : [EOL] from twisted . plugin import IPlugin , getPlugins [EOL] list ( getPlugins ( IPlugin ) ) [EOL] print ( [string] ) [EOL] except Exception as e : [EOL] print ( [string] ) [EOL] print ( str ( e ) ) [EOL] [EOL] [EOL] try : [EOL] from setuptools . command import egg_info [EOL] egg_info . write_toplevel_names [EOL] except ( ImportError , AttributeError ) : [EOL] pass [EOL] else : [EOL] def _top_level_package ( name ) : [EOL] return name . split ( [string] , [number] ) [ [number] ] [EOL] [EOL] def _hacked_write_toplevel_names ( cmd , basename , filename ) : [EOL] pkgs = dict . fromkeys ( [ _top_level_package ( k ) for k in cmd . distribution . iter_distribution_names ( ) if _top_level_package ( k ) != [string] ] ) [EOL] cmd . write_file ( [string] , filename , [string] . join ( pkgs ) + [string] ) [EOL] [EOL] egg_info . write_toplevel_names = _hacked_write_toplevel_names [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] with open ( [string] ) as f : [EOL] readme = f . read ( ) [EOL] [EOL] setup ( name = [string] , packages = [ [string] , [string] , [string] ] , package_data = { [string] : ms_extra_files , [string] : tw_extra_files } , setup_requires = [ ] , install_requires = [ [string] , [string] , [string] , ] , extras_require = { [string] : [ [string] , [string] , [string] , [string] , [string] ] , } , author = [string] , author_email = [string] , classifiers = classifiers , description = [string] , license = [string] , url = [string] , long_description = readme , scripts = [ [string] ] , cmdclass = { [string] : InstallTwistedPlugin , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Optional , Generator [EOL] import typing [EOL] import minerstat [EOL] import builtins [EOL] import configparser [EOL] from typing import Generator [EOL] from twisted . internet import defer [EOL] from configparser import ConfigParser [EOL] import os . path [EOL] from typing import Optional [EOL] [EOL] InlineCallbacks = Generator [ defer . Deferred , defer . Deferred , None ] [EOL] [EOL] [EOL] class ConfigParseError ( Exception ) : [EOL] [EOL] pass [EOL] [EOL] [EOL] class Config : [EOL] [EOL] def __init__ ( self , client , accesskey , worker , path , db = None , api_base = [string] , ) : [EOL] self . client = client [EOL] self . db = db [EOL] if not db : [EOL] if client == [string] : [EOL] self . db = [string] [EOL] elif client == [string] : [EOL] self . db = [string] [EOL] elif client == [string] : [EOL] self . db = [string] [EOL] elif client == [string] : [EOL] self . db = [string] [EOL] self . accesskey = accesskey [EOL] self . worker = worker [EOL] self . path = path [EOL] self . api_base = api_base [EOL] [EOL] @ classmethod def from_configparser ( cls , parser , section ) : [EOL] conf = parser [ section ] [EOL] if [string] not in conf : [EOL] conf [ [string] ] = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] self = cls ( ** dict ( conf ) ) [EOL] return self [EOL] [EOL] @ classmethod def from_path ( cls , path , section ) : [EOL] parser = ConfigParser ( ) [EOL] parser . read ( path ) [EOL] try : [EOL] return cls . from_configparser ( parser , section ) [EOL] except TypeError as e : [EOL] raise ConfigParseError ( [string] . format ( e ) ) [EOL] [EOL] @ classmethod def default ( cls ) : [EOL] return cls ( client = [string] , accesskey = [string] , worker = [string] , path = os . path . dirname ( os . path . join ( __file__ , [string] , [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 $builtins.str$ 0 0 0 $configparser.SectionProxy$ 0 $configparser.ConfigParser$ 0 $builtins.str$ 0 0 0 0 0 0 $configparser.SectionProxy$ 0 0 $configparser.SectionProxy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $minerstat.utils.Config$ 0 0 0 0 0 0 $configparser.SectionProxy$ 0 0 0 0 $minerstat.utils.Config$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from twisted . trial import unittest [EOL] from minerstat . utils import Config , ConfigParseError [EOL] [EOL] [EOL] class ConfigTest ( unittest . TestCase ) : [EOL] [EOL] def test_default ( self ) : [EOL] default = Config . default ( ) [EOL] self . assertEqual ( default . worker , [string] ) [EOL] [EOL] def test_from_path_bad_conf ( self ) : [EOL] open ( [string] , [string] ) . write ( [string] ) [EOL] self . assertRaises ( ConfigParseError , Config . from_path , [string] , [string] ) [EOL] [EOL] def test_from_path_not_enough ( self ) : [EOL] open ( [string] , [string] ) . write ( [string] ) [EOL] self . assertRaises ( ConfigParseError , Config . from_path , [string] , [string] ) [EOL] [EOL] def test_from_path ( self ) : [EOL] open ( [string] , [string] ) . write ( [string] ) [EOL] config = Config . from_path ( [string] , [string] ) [EOL] self . assertTrue ( config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
	0
from typing import List , Type , Any [EOL] import typing [EOL] import twisted [EOL] import minerstat [EOL] from zope . interface import implementer [EOL] [EOL] from twisted . python import usage [EOL] from twisted . plugin import IPlugin [EOL] from twisted . application . service import IServiceMaker [EOL] [EOL] from minerstat . service import MinerStatService [EOL] from minerstat . rig import Rig [EOL] from minerstat . utils import Config [EOL] from minerstat . remote import MinerStatRemoteProtocol [EOL] [EOL] from minerstat . miners . claymore import EthClaymoreMiner [EOL] from minerstat . miners . claymore import EtcClaymoreMiner [EOL] from minerstat . miners . claymore import ExpClaymoreMiner [EOL] from minerstat . miners . claymore import MusicClaymoreMiner [EOL] from minerstat . miners . claymore import UbqClaymoreMiner [EOL] from minerstat . miners . claymore import ZecClaymoreMiner [EOL] from minerstat . miners . claymore import AlgoClaymoreMiner [EOL] from minerstat . miners . claymore import DualClaymoreMiner [EOL] [EOL] [EOL] from minerstat . miners . ewbf import EWBFZecMiner [EOL] from minerstat . miners . sgminer import SGMiner [EOL] import os . path [EOL] [EOL] eth = EthClaymoreMiner ( ) [EOL] etc = EtcClaymoreMiner ( ) [EOL] exp = ExpClaymoreMiner ( ) [EOL] music = MusicClaymoreMiner ( ) [EOL] ubq = UbqClaymoreMiner ( ) [EOL] zec = ZecClaymoreMiner ( ) [EOL] ewbf = EWBFZecMiner ( ) [EOL] sg = SGMiner ( ) [EOL] algo = AlgoClaymoreMiner ( ) [EOL] dual = DualClaymoreMiner ( ) [EOL] [EOL] [EOL] class Options ( usage . Options ) : [EOL] optParameters = [ [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] @ implementer ( IServiceMaker , IPlugin ) class MinerServiceMaker : [EOL] tapname = [string] [EOL] description = [string] [EOL] options = Options [EOL] [EOL] def makeService ( self , options ) : [EOL] [docstring] [EOL] config_path = options . get ( [string] ) [comment] [EOL] config_path = os . path . expanduser ( config_path ) [EOL] config_section = options . get ( [string] ) [comment] [EOL] config = Config . from_path ( config_path , config_section ) [EOL] remote = MinerStatRemoteProtocol ( config ) [EOL] rig = Rig ( config , remote ) [EOL] return MinerStatService ( rig ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] serviceMaker = MinerServiceMaker ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $minerstat.miners.ewbf.EWBFZecMiner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $minerstat.miners.claymore.EthClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.EtcClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.ExpClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.MusicClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.UbqClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.ZecClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.ewbf.EWBFZecMiner$ 0 0 0 0 0 $minerstat.miners.sgminer.SGMiner$ 0 0 0 0 0 $minerstat.miners.claymore.AlgoClaymoreMiner$ 0 0 0 0 0 $minerstat.miners.claymore.DualClaymoreMiner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[twisted.plugins.minerstat_plugin.Options]$ 0 0 0 0 0 0 0 0 0 $twisted.python.usage.Options$ 0 0 0 0 0 $typing.Any$ 0 $twisted.python.usage.Options$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $twisted.python.usage.Options$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $minerstat.remote.MinerStatRemoteProtocol$ 0 0 0 $typing.Any$ 0 0 $minerstat.rig.Rig$ 0 0 0 $typing.Any$ 0 $minerstat.remote.MinerStatRemoteProtocol$ 0 0 0 0 0 $minerstat.rig.Rig$ 0 0 0 0 0 0 0 0 0 0 0 $twisted.plugins.minerstat_plugin.MinerServiceMaker$ 0 0 0 0 0