[comment] [EOL] from typing import List , Any , Tuple , Union [EOL] import simetuc [EOL] import builtins [EOL] import matplotlib [EOL] import numpy [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import List , Union , Tuple , Type [EOL] [EOL] import numpy as np [EOL] import scipy . interpolate as interpolate [EOL] import matplotlib . pyplot as plt [EOL] import matplotlib as mpl [EOL] [EOL] from simetuc . util import Conc [EOL] [EOL] A_TOL = [number] [EOL] [EOL] ColorMap = Type [ mpl . colors . Colormap ] [EOL] [EOL] [EOL] class PlotWarning ( UserWarning ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def plot_avg_decay_data ( t_sol , list_sim_data , list_exp_data = None , state_labels = None , concentration = None , atol = A_TOL , colors = [string] , fig = None , title = [string] ) : [EOL] [docstring] [EOL] num_plots = len ( list_sim_data ) [EOL] num_rows = [number] [EOL] num_cols = int ( np . ceil ( num_plots / [number] ) ) [EOL] [EOL] [comment] [EOL] list_exp_data = list_exp_data or [ None ] * num_plots [EOL] state_labels = state_labels or [ [string] ] * num_plots [EOL] [EOL] list_t_sim = t_sol if len ( t_sol ) == num_plots else [ t_sol ] * num_plots [comment] [EOL] [EOL] if concentration : [EOL] conc_str = [string] + str ( concentration . S_conc ) + [string] + str ( concentration . A_conc ) + [string] [EOL] [comment] [EOL] else : [EOL] conc_str = [string] [EOL] [EOL] sim_color = colors [ [number] ] [EOL] exp_color = colors [ [number] ] [EOL] exp_size = [number] [comment] [EOL] exp_marker = [string] [EOL] [EOL] if fig is None : [EOL] fig = plt . figure ( ) [EOL] [EOL] fig . suptitle ( title + [string] ) [EOL] [EOL] list_axes = fig . get_axes ( ) [comment] [EOL] if not list_axes : [EOL] for num in range ( num_plots ) : [EOL] fig . add_subplot ( num_rows , num_cols , num + [number] ) [EOL] list_axes = fig . get_axes ( ) [EOL] [EOL] for sim_data , t_sim , exp_data , state_label , axes in zip ( list_sim_data , list_t_sim , list_exp_data , state_labels , list_axes ) : [EOL] [EOL] if state_label : [EOL] axes . set_title ( state_label . replace ( [string] , [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } ) [EOL] [EOL] if sim_data is None or np . isnan ( sim_data ) . any ( ) or not np . any ( sim_data > [number] ) : [EOL] continue [EOL] [EOL] [comment] [EOL] if exp_data is [number] or exp_data is None : [EOL] [comment] [EOL] axes . semilogy ( t_sim * [number] , sim_data , color = sim_color , label = state_label + conc_str ) [EOL] [EOL] axes . axis ( [string] ) [EOL] axes . set_xlim ( left = t_sim [ [number] ] * [number] ) [EOL] [comment] [EOL] margin_factor = np . array ( [ [number] , [number] ] ) [EOL] axes . set_ylim ( * np . array ( axes . get_ylim ( ) ) * margin_factor ) [EOL] if axes . set_ylim ( ) [ [number] ] < atol : [EOL] axes . set_ylim ( bottom = atol ) [comment] [EOL] [comment] [EOL] above = sim_data > atol [EOL] change_indices = np . where ( np . roll ( above , [number] ) != above ) [ [number] ] [EOL] [comment] [EOL] if change_indices . size > [number] and sim_data [ change_indices [ - [number] ] ] < atol : [comment] [EOL] [comment] [EOL] max_index = change_indices [ - [number] ] [EOL] [comment] [EOL] axes . set_xlim ( right = t_sim [ max_index ] * [number] ) [EOL] min_y = min ( * axes . get_ylim ( ) ) [EOL] max_y = max ( * axes . get_ylim ( ) ) [EOL] axes . set_ylim ( bottom = min_y , top = max_y ) [EOL] else : [comment] [EOL] sim_handle , = axes . semilogy ( t_sim * [number] , sim_data , color = sim_color , label = state_label + conc_str , zorder = [number] ) [EOL] [comment] [EOL] exp_handle , = axes . semilogy ( exp_data [ : , [number] ] * [number] , exp_data [ : , [number] ] * np . max ( sim_data ) , color = exp_color , marker = exp_marker , linewidth = [number] , markersize = exp_size , zorder = [number] ) [EOL] axes . axis ( [string] ) [EOL] axes . set_ylim ( top = axes . get_ylim ( ) [ [number] ] * [number] ) [comment] [EOL] tmin = min ( exp_data [ - [number] , [number] ] , t_sim [ [number] ] ) [EOL] axes . set_xlim ( left = tmin * [number] , right = exp_data [ - [number] , [number] ] * [number] ) [comment] [EOL] [EOL] if conc_str : [EOL] list_axes [ [number] ] . legend ( loc = [string] , fontsize = [string] ) [EOL] curr_handles , curr_labels = list_axes [ [number] ] . get_legend_handles_labels ( ) [EOL] new_labels = [ label . replace ( state_labels [ [number] ] + [string] , [string] ) . replace ( [string] , [string] ) for label in curr_labels ] [EOL] list_axes [ [number] ] . legend ( curr_handles , new_labels , markerscale = [number] , loc = [string] , fontsize = [string] ) [EOL] [EOL] fig . subplots_adjust ( top = [number] , bottom = [number] , left = [number] , right = [number] , hspace = [number] , wspace = [number] ) [EOL] [EOL] [EOL] def plot_state_decay_data ( t_sol , sim_data_array , state_label = None , atol = A_TOL ) : [EOL] [docstring] [EOL] [EOL] if sim_data_array is None : [comment] [EOL] return [EOL] if ( np . isnan ( sim_data_array ) ) . any ( ) or not np . any ( sim_data_array ) : [EOL] return [EOL] [EOL] avg_sim = np . mean ( sim_data_array , axis = [number] ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . add_subplot ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] ax . semilogy ( t_sol * [number] , sim_data_array , [string] ) [EOL] ax . semilogy ( t_sol * [number] , avg_sim , [string] , linewidth = [number] ) [EOL] plt . yscale ( [string] , nonposy = [string] ) [EOL] plt . axis ( [string] ) [EOL] plt . xlim ( xmin = [number] ) [EOL] [comment] [EOL] margin_factor = np . array ( [ [number] , [number] ] ) [EOL] plt . ylim ( * np . array ( plt . ylim ( ) ) * margin_factor ) [EOL] if plt . ylim ( ) [ [number] ] < atol : [EOL] plt . ylim ( ymin = atol ) [comment] [EOL] [comment] [EOL] above = sim_data_array > atol [EOL] change_indices = np . where ( np . roll ( above , [number] ) != above ) [ [number] ] [EOL] if change_indices . size > [number] : [EOL] [comment] [EOL] max_index = change_indices [ - [number] ] [EOL] [comment] [EOL] plt . xlim ( xmax = t_sol [ max_index ] * [number] ) [EOL] [EOL] plt . legend ( [ state_label ] , loc = [string] ) [EOL] plt . xlabel ( [string] ) [EOL] [EOL] [EOL] def plot_power_dependence ( sim_data_arr , power_dens_arr , state_labels ) : [EOL] [docstring] [EOL] [EOL] non_zero_data = np . array ( [ np . any ( sim_data_arr [ : , num ] ) for num in range ( sim_data_arr . shape [ [number] ] ) ] ) [EOL] sim_data_arr = sim_data_arr [ : , non_zero_data ] [EOL] state_labels = np . array ( state_labels ) [ non_zero_data ] [EOL] [EOL] num_plots = len ( state_labels ) [EOL] num_rows = [number] [EOL] num_cols = int ( np . ceil ( num_plots / [number] ) ) [EOL] [EOL] [comment] [EOL] Y = np . log10 ( sim_data_arr ) [ : - [number] , : ] [EOL] X = np . log10 ( power_dens_arr ) [EOL] dX = list ( ( np . roll ( X , - [number] , axis = [number] ) - X ) [ : - [number] ] ) [EOL] [comment] [EOL] slopes = [ np . gradient ( Y_arr , dX [ [number] ] ) for Y_arr in Y . T ] [EOL] slopes = np . around ( slopes , [number] ) [EOL] [EOL] fig = plt . figure ( ) [EOL] for num in range ( num_plots ) : [EOL] fig . add_subplot ( num_rows , num_cols , num + [number] ) [EOL] list_axes = fig . get_axes ( ) [EOL] [EOL] for num , ( state_label , ax ) in enumerate ( zip ( state_labels , list_axes ) ) : [comment] [EOL] sim_data = sim_data_arr [ : , num ] [EOL] if not np . any ( sim_data ) : [comment] [EOL] continue [EOL] [EOL] ax . loglog ( power_dens_arr , sim_data , [string] , mfc = [string] , ms = [number] , label = state_label ) [EOL] plt . axis ( [string] ) [EOL] margin_factor = np . array ( [ [number] , [number] ] ) [EOL] plt . ylim ( * np . array ( plt . ylim ( ) ) * margin_factor ) [comment] [EOL] plt . xlim ( * np . array ( plt . xlim ( ) ) * margin_factor ) [EOL] [EOL] ax . legend ( loc = [string] ) [EOL] plt . xlabel ( [string] ) [EOL] [EOL] for i , txt in enumerate ( slopes [ num ] ) : [EOL] ax . annotate ( txt , ( power_dens_arr [ i ] , sim_data [ i ] ) , xytext = ( [number] , - [number] ) , xycoords = [string] , textcoords = [string] ) [EOL] [EOL] [EOL] def plot_concentration_dependence ( sim_data_arr , conc_arr , state_labels , ion_label = None ) : [EOL] [docstring] [EOL] num_plots = len ( state_labels ) [EOL] num_rows = [number] [EOL] num_cols = int ( np . ceil ( num_plots / [number] ) ) [EOL] [EOL] fig = plt . figure ( ) [EOL] [EOL] heatmap = False [EOL] if len ( conc_arr . shape ) == [number] : [EOL] heatmap = True [EOL] [EOL] for num , state_label in enumerate ( state_labels ) : [comment] [EOL] sim_data = sim_data_arr [ : , num ] [EOL] if not np . any ( sim_data ) : [EOL] continue [EOL] [EOL] ax = fig . add_subplot ( num_rows , num_cols , num + [number] ) [EOL] [EOL] if state_label : [EOL] ax . set_title ( state_label . replace ( [string] , [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } ) [EOL] [EOL] if not heatmap : [EOL] ax . semilogy ( conc_arr , sim_data , [string] , mfc = [string] , ms = [number] , label = state_label ) [EOL] plt . axis ( [string] ) [EOL] margin_factor = np . array ( [ [number] , [number] ] ) [EOL] ax . set_ylim ( * np . array ( plt . ylim ( ) ) * margin_factor ) [comment] [EOL] ax . set_xlim ( * np . array ( plt . xlim ( ) ) * margin_factor ) [EOL] [EOL] ion_label = ion_label if ion_label else [string] [EOL] ax . set_xlabel ( f'{ ion_label } [string] ' ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] x , y = conc_arr [ : , [number] ] , conc_arr [ : , [number] ] [EOL] z = sim_data [EOL] [EOL] [comment] [EOL] xi , yi = np . linspace ( x . min ( ) , x . max ( ) , [number] ) , np . linspace ( y . min ( ) , y . max ( ) , [number] ) [EOL] xi , yi = np . meshgrid ( xi , yi ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] interp_f = interpolate . Rbf ( x , y , z , function = [string] , epsilon = [number] ) [EOL] zi = interp_f ( xi , yi ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] plt . imshow ( zi , vmin = z . min ( ) , vmax = z . max ( ) , origin = [string] , extent = [ x . min ( ) , x . max ( ) , y . min ( ) , y . max ( ) ] , aspect = [string] ) [EOL] ax . scatter ( x , y , c = z , edgecolors = [string] , linewidth = [number] ) [EOL] ion_label = ion_label if ion_label else [string] [EOL] ax . set_xlabel ( f'{ ion_label [ [number] ] } [string] ' ) [EOL] ax . set_ylabel ( f'{ ion_label [ [number] ] } [string] ' ) [EOL] cb = plt . colorbar ( ) [EOL] cb . formatter . set_powerlimits ( ( [number] , [number] ) ) [EOL] cb . update_ticks ( ) [EOL] cb . set_label ( [string] ) [EOL] [EOL] [comment] [EOL] fig . subplots_adjust ( hspace = [number] , wspace = [number] ) [EOL] [EOL] [EOL] def plot_lattice ( doped_lattice , ion_type ) : [EOL] [docstring] [EOL] from mpl_toolkits . mplot3d import proj3d [EOL] [EOL] def orthogonal_proj ( zfront , zback ) : [comment] [EOL] [docstring] [EOL] a = ( zfront + zback ) / ( zfront - zback ) [EOL] b = - [number] * ( zfront * zback ) / ( zfront - zback ) [EOL] return np . array ( [ [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , a , b ] , [ [number] , [number] , - [number] , zback ] ] ) [EOL] [EOL] proj3d . persp_transformation = orthogonal_proj [EOL] fig = plt . figure ( ) [EOL] axis = fig . add_subplot ( [number] , projection = [string] ) [EOL] [EOL] S_ion = [number] [EOL] A_ion = [number] [EOL] [comment] [EOL] if np . any ( ion_type == S_ion ) : [EOL] axis . scatter ( doped_lattice [ ion_type == S_ion , [number] ] , doped_lattice [ ion_type == S_ion , [number] ] , doped_lattice [ ion_type == S_ion , [number] ] , c = [string] , marker = [string] , label = [string] ) [EOL] if np . any ( ion_type == A_ion ) : [EOL] axis . scatter ( doped_lattice [ ion_type == A_ion , [number] ] , doped_lattice [ ion_type == A_ion , [number] ] , doped_lattice [ ion_type == A_ion , [number] ] , c = [string] , marker = [string] , label = [string] ) [EOL] [EOL] axis . set_xlabel ( [string] ) [EOL] axis . set_ylabel ( [string] ) [EOL] axis . set_zlabel ( [string] ) [EOL] plt . axis ( [string] ) [EOL] [EOL] plt . legend ( loc = [string] , scatterpoints = [number] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	one
[comment] [EOL] from typing import Callable , Any , Tuple [EOL] import builtins [EOL] import numpy [EOL] import scipy [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import logging [EOL] import warnings [EOL] [EOL] from typing import Callable , Tuple [EOL] [EOL] import numpy as np [EOL] [EOL] from scipy . sparse import csr_matrix [EOL] from scipy . integrate import ode [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from tqdm import tqdm [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def _rate_eq ( t , y , decay_matrix , UC_matrix , N_indices , coop_ET_matrix , coop_N_indices ) : [EOL] [docstring] [EOL] N_prod_sel = y [ N_indices [ : , [number] ] ] * y [ N_indices [ : , [number] ] ] [EOL] UC_matrix = UC_matrix . dot ( N_prod_sel ) [EOL] [EOL] N_coop_prod_sel = y [ coop_N_indices [ : , [number] ] ] * y [ coop_N_indices [ : , [number] ] ] * y [ coop_N_indices [ : , [number] ] ] [EOL] coop_ET_matrix = coop_ET_matrix . dot ( N_coop_prod_sel ) [EOL] [EOL] return decay_matrix . dot ( y ) + UC_matrix + coop_ET_matrix [EOL] [EOL] [EOL] def _jac_rate_eq ( t , y , decay_matrix , UC_matrix , jac_indices , coop_ET_matrix , coop_jac_indices ) : [EOL] [docstring] [EOL] y_values = y [ jac_indices [ : , [number] ] ] [EOL] nJ_matrix = csr_matrix ( ( y_values , ( jac_indices [ : , [number] ] , jac_indices [ : , [number] ] ) ) , shape = ( UC_matrix . shape [ [number] ] , UC_matrix . shape [ [number] ] ) , dtype = np . float64 ) [EOL] UC_J_matrix = UC_matrix . dot ( nJ_matrix ) . toarray ( ) [EOL] [EOL] y_coop_values = y [ coop_jac_indices [ : , [number] ] ] * y [ coop_jac_indices [ : , [number] ] ] [EOL] nJ_coop_matrix = csr_matrix ( ( y_coop_values , ( coop_jac_indices [ : , [number] ] , coop_jac_indices [ : , [number] ] ) ) , shape = ( coop_ET_matrix . shape [ [number] ] , coop_ET_matrix . shape [ [number] ] ) , dtype = np . float64 ) [EOL] UC_J_coop_matrix = coop_ET_matrix . dot ( nJ_coop_matrix ) . toarray ( ) [EOL] [EOL] return decay_matrix . toarray ( ) + UC_J_matrix + UC_J_coop_matrix [EOL] [EOL] [EOL] def _rate_eq_pulse ( t , y , abs_matrix , decay_matrix , UC_matrix , N_indices , coop_ET_matrix , coop_N_indices ) : [EOL] [docstring] [EOL] return abs_matrix . dot ( y ) + _rate_eq ( t , y , decay_matrix , UC_matrix , N_indices , coop_ET_matrix , coop_N_indices ) [EOL] [EOL] [EOL] def _jac_rate_eq_pulse ( t , y , abs_matrix , decay_matrix , UC_matrix , jac_indices , coop_ET_matrix , coop_jac_indices ) : [EOL] [docstring] [EOL] return abs_matrix . toarray ( ) + _jac_rate_eq ( t , y , decay_matrix , UC_matrix , jac_indices , coop_ET_matrix , coop_jac_indices ) [EOL] [EOL] [EOL] [EOL] [EOL] def _solve_ode ( t_arr , fun , fargs , jfun , jargs , initial_population , rtol = [number] , atol = [number] , nsteps = [number] , method = [string] , quiet = True ) : [EOL] [docstring] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] N_steps = len ( t_arr ) [EOL] y_arr = np . zeros ( ( N_steps , len ( initial_population ) ) , dtype = np . float64 ) [EOL] [EOL] [comment] [EOL] ode_obj = ode ( fun , jfun ) [EOL] ode_obj . set_integrator ( [string] , rtol = rtol , atol = atol , method = method , nsteps = nsteps ) [EOL] ode_obj . set_initial_value ( initial_population , t_arr [ [number] ] ) [EOL] ode_obj . set_f_params ( * fargs ) [EOL] ode_obj . set_jac_params ( * jargs ) [EOL] [EOL] [comment] [EOL] y_arr [ [number] , : ] = initial_population [EOL] step = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cmd_bar_disable = quiet [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with warnings . catch_warnings ( ) , np . errstate ( invalid = [string] , divide = [string] , over = [string] , under = [string] ) , tqdm ( total = N_steps , unit = [string] , smoothing = [number] , disable = cmd_bar_disable , desc = [string] ) as pbar_cmd : [EOL] [comment] [EOL] warnings . filterwarnings ( [string] ) [EOL] while ode_obj . successful ( ) and step < N_steps : [EOL] try : [EOL] [comment] [EOL] y_arr [ step , : ] = ode_obj . integrate ( t_arr [ step ] ) [EOL] step += [number] [EOL] pbar_cmd . update ( [number] ) [EOL] except ( UserWarning , FloatingPointError ) as err : [comment] [EOL] logger . warning ( str ( err ) ) [EOL] logger . warning ( [string] ) [EOL] logger . warning ( [string] ) [EOL] logger . warning ( [string] + [string] ) [EOL] pbar_cmd . update ( [number] ) [EOL] [EOL] return y_arr [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def solve_pulse ( t_pulse , initial_pop , abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices , nsteps = [number] , rtol = [number] , atol = [number] , quiet = False , method = [string] ) : [EOL] [docstring] [EOL] return _solve_ode ( t_pulse , _rate_eq_pulse , ( abs_matrix , decay_matrix , UC_matrix , N_indices , coop_ET_matrix , coop_N_indices ) , _jac_rate_eq_pulse , ( abs_matrix , decay_matrix , UC_matrix , jac_indices , coop_ET_matrix , coop_jac_indices ) , initial_pop , method = method , rtol = rtol , atol = atol , nsteps = nsteps , quiet = quiet ) [EOL] [EOL] [EOL] def solve_relax ( t_sol , initial_pop , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices , nsteps = [number] , rtol = [number] , atol = [number] , quiet = False ) : [EOL] [docstring] [EOL] return _solve_ode ( t_sol , _rate_eq , ( decay_matrix , UC_matrix , N_indices , coop_ET_matrix , coop_N_indices ) , _jac_rate_eq , ( decay_matrix , UC_matrix , jac_indices , coop_ET_matrix , coop_jac_indices ) , initial_pop , rtol = rtol , atol = atol , nsteps = nsteps , quiet = quiet ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] VERSION = [string] [EOL] DESCRIPTION = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any , Dict , Type , Tuple [EOL] import builtins [EOL] import typing [EOL] import simetuc [EOL] [docstring] [EOL] from fractions import Fraction [EOL] import sys [EOL] from typing import List , Tuple , Union , Dict [EOL] [EOL] from settings_parser import Value , DictValue , Kind [EOL] [EOL] class f_float ( type ) : [EOL] [docstring] [EOL] def __new__ ( mcs , x ) : [EOL] [docstring] [EOL] return float ( Fraction ( x ) ) [EOL] f_float . __name__ = [string] [EOL] [EOL] [comment] [EOL] min_float = sys . float_info . min [EOL] [EOL] Vector = Tuple [ f_float , f_float , f_float ] [EOL] [EOL] settings = { [string] : Value ( int , val_max = [number] , val_min = [number] ) , [string] : DictValue ( { [string] : str , [string] : Value ( Union [ int , str ] ) , [string] : Value ( float , val_min = [number] , val_max = [number] ) , [string] : Value ( float , val_min = [number] , val_max = [number] ) , [string] : Value ( float , val_min = [number] ) , [string] : Value ( float , val_min = [number] ) , [string] : Value ( float , val_min = [number] ) , [string] : Value ( float , val_min = [number] , val_max = [number] ) , [string] : Value ( float , val_min = [number] , val_max = [number] ) , [string] : Value ( float , val_min = [number] , val_max = [number] ) , [string] : Value ( Union [ Vector , List [ Vector ] ] , val_min = [number] , val_max = [number] , len_min = [ [number] , [number] ] , len_max = [ None , [number] ] ) , [string] : Value ( Union [ f_float , List [ f_float ] ] , val_min = [number] , val_max = [number] , len_min = [number] ) , [string] : Value ( float , val_min = [number] , kind = Kind . optional ) , [string] : Value ( float , val_min = [number] , kind = Kind . optional ) , [string] : Value ( int , val_min = [number] , kind = Value . exclusive ) , [string] : Value ( float , val_min = min_float , kind = Value . exclusive ) , [string] : Value ( str , kind = Kind . optional ) , [string] : Value ( Dict [ str , str ] , kind = Kind . optional ) , } ) , [string] : DictValue ( { [string] : str , [string] : str , [string] : Value ( List [ str ] , len_min = [number] ) , [string] : Value ( List [ str ] , len_min = [number] ) , } ) , [string] : Value ( Dict [ str , DictValue ( { [string] : bool , [string] : Value ( float , val_min = [number] ) , [string] : Value ( Union [ List [ str ] , str ] , len_min = [number] ) , [string] : Value ( Union [ f_float , List [ f_float ] ] , val_min = [number] , len_min = [number] ) , [string] : Value ( Union [ float , List [ float ] ] , val_min = [number] , len_min = [number] ) , [string] : Value ( float , kind = Value . optional ) } ) ] ) , [string] : Value ( Dict [ str , float ] ) , [string] : Value ( Dict [ str , float ] ) , [string] : Value ( Dict [ str , float ] , val_min = [number] , val_max = [number] , kind = Value . optional ) , [string] : Value ( Dict [ str , float ] , val_min = [number] , val_max = [number] , kind = Value . optional ) , [string] : Value ( Dict [ str , DictValue ( { [string] : str , [string] : Value ( float , val_min = [number] ) , [string] : Value ( float , val_min = [number] ) , [string] : Value ( float , val_min = [number] , kind = Value . optional ) , } ) ] , kind = Value . optional ) , [string] : DictValue ( { [string] : Value ( List [ str ] , kind = Value . optional ) , [string] : Value ( str , kind = Value . optional ) , [string] : Value ( List [ str ] , kind = Value . optional ) , [string] : DictValue ( { [string] : Value ( int , kind = Value . optional ) , [string] : Value ( float , kind = Value . optional ) , [string] : Value ( float , kind = Value . optional ) , [string] : Value ( float , kind = Value . optional ) } , kind = Value . optional ) } , kind = Value . optional ) , [string] : DictValue ( { [string] : Value ( float , kind = Value . optional ) , [string] : Value ( float , kind = Value . optional ) , [string] : Value ( int , kind = Value . optional ) , [string] : Value ( int , kind = Value . optional ) , } , kind = Value . optional ) , [string] : Value ( List [ float ] , len_min = [number] , len_max = [number] , kind = Value . optional ) , [string] : DictValue ( { [string] : Value ( List [ List [ float ] ] , val_min = [number] , val_max = [number] , len_min = [ [number] , None ] , len_max = [ [number] , None ] ) , [string] : Value ( List [ int ] , val_min = [number] , kind = Value . optional ) } , kind = Value . optional ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from collections import OrderedDict [EOL] [EOL] import pytest [EOL] [EOL] from simetuc . util import Excitation [EOL] from simetuc . util import DecayTransition , IonType , EneryTransferProcess , Transition [EOL] from simetuc . settings import Settings [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def setup_cte ( ) : [EOL] [docstring] [EOL] [EOL] class Cte ( dict ) : [EOL] __getattr__ = dict . __getitem__ [EOL] __setattr__ = dict . __setitem__ [EOL] __delattr__ = dict . __delitem__ [EOL] [EOL] cte = Cte ( { [string] : [number] , [string] : OrderedDict ( { [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . S , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . S , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) } ) , [string] : { [string] : { DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) } , [string] : { DecayTransition ( IonType . S , [number] , [number] , branching_ratio = [number] ) } , [string] : { DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) } , [string] : { DecayTransition ( IonType . S , [number] , [number] , decay_rate = [number] ) } } , [string] : { [string] : [ Excitation ( IonType . A , [number] , [number] , False , [number] / [number] , [number] , [number] , [number] ) ] , [string] : [ Excitation ( IonType . A , [number] , [number] , False , [number] / [number] , [number] , [number] , [number] ) , Excitation ( IonType . A , [number] , [number] , False , [number] / [number] , [number] , [number] , [number] ) ] , [string] : [ Excitation ( IonType . S , [number] , [number] , False , [number] / [number] , [number] , [number] , [number] ) ] , [string] : [ Excitation ( IonType . A , [number] , [number] , True , [number] / [number] , [number] , [number] , [number] ) ] } , [string] : { [string] : [number] , [string] : [number] , [string] : [number] } , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [ [number] , [number] ] , [string] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] , [string] : [string] } , [string] : False , [string] : False , [string] : { [string] : [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [string] : [ [number] , [number] , [number] , [number] ] } , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : { [string] : [string] , [string] : [ EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) , DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) ] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , [string] : [ [string] , [string] ] } , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : [number] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : [number] , [string] : [ [string] , [string] ] , [string] : [number] } } ) [EOL] cte [ [string] ] = [string] [EOL] cte [ [string] ] = False [EOL] cte [ [string] ] = False [EOL] return cte [EOL] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def setup_cte_settings ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] del cte [ [string] ] [ [string] ] [EOL] [EOL] cte [ [string] ] [ [string] ] = set ( ) [EOL] del cte [ [string] ] [EOL] return cte [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def setup_cte_sim ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] setup_cte [ [string] ] [ [string] ] . add ( DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) ) [EOL] setup_cte [ [string] ] = { [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . S , [number] , [number] ) ] , mult = [number] , strength = [number] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . S , [number] , [number] ) ] , mult = [number] , strength = [number] ) , [string] : EneryTransferProcess ( [ Transition ( IonType . S , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] ) } [EOL] [EOL] return Settings . load_from_dict ( setup_cte )	
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import pytest [EOL] import os [EOL] [EOL] import simetuc . commandline as commandline [EOL] from simetuc . util import temp_config_filename [EOL] [EOL] [EOL] config_file = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def no_logging ( mocker ) : [EOL] mocker . patch ( [string] ) [EOL] mocker . patch ( [string] ) [EOL] [EOL] def test_cli_help ( no_logging ) : [EOL] [docstring] [EOL] ext_args = [ [string] ] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] commandline . main ( ext_args ) [EOL] assert excinfo . type == SystemExit [EOL] [EOL] def test_cli_version ( no_logging ) : [EOL] [docstring] [EOL] ext_args = [ [string] ] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] commandline . main ( ext_args ) [EOL] assert excinfo . type == SystemExit [EOL] [EOL] def test_cli_verbose_quiet ( mocker , no_logging ) : [EOL] [docstring] [EOL] [comment] [EOL] mocked_generate = mocker . patch ( [string] ) [EOL] [EOL] ext_args = [ config_file , [string] , [string] , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_generate . call_count == [number] [EOL] assert isinstance ( mocked_generate . call_args [ [number] ] [ [number] ] , dict ) [EOL] [EOL] ext_args = [ config_file , [string] , [string] , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_generate . call_count == [number] [EOL] [EOL] option_list = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] @ pytest . mark . parametrize ( [string] , option_list , ids = option_list ) def test_cli_main_options ( option , mocker , no_logging ) : [EOL] [docstring] [EOL] mocked_sim = mocker . patch ( [string] ) [EOL] mocked_lattice = mocker . patch ( [string] ) [EOL] mocked_opt = mocker . patch ( [string] ) [EOL] mocked_opt_conc = mocker . patch ( [string] ) [EOL] [EOL] ext_args = [ config_file , [string] , option ] [EOL] commandline . main ( ext_args ) [EOL] [EOL] if option in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] assert mocked_sim . call_count == [number] [EOL] elif option == [string] : [EOL] assert mocked_opt . call_count == [number] [EOL] elif option == [string] : [EOL] assert mocked_opt_conc . call_count == [number] [EOL] elif option == [string] : [EOL] assert mocked_lattice . call_count == [number] [EOL] else : [EOL] assert False [EOL] [EOL] def test_cli_conc_dep_dyn ( mocker , no_logging ) : [EOL] [docstring] [EOL] mocked_sim = mocker . patch ( [string] ) [EOL] ext_args = [ config_file , [string] , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_sim . call_count == [number] [EOL] [EOL] def test_cli_plot_dyn ( mocker , no_logging ) : [EOL] [docstring] [EOL] mocked_sim = mocker . patch ( [string] ) [EOL] ext_args = [ config_file , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_sim . call_count == [number] [EOL] [EOL] def test_cli_no_save ( mocker , no_logging ) : [EOL] [docstring] [EOL] mocked_sim = mocker . patch ( [string] ) [EOL] mocked_save = mocker . patch ( [string] ) [EOL] ext_args = [ config_file , [string] , [string] , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_sim . call_count == [number] [EOL] assert mocked_save . call_count == [number] [EOL] [EOL] option_list = [ [string] , [string] ] [EOL] @ pytest . mark . parametrize ( [string] , option_list , ids = [ [string] , [string] ] ) def test_cli_optim_options ( mocker , no_logging , option ) : [EOL] [docstring] [EOL] [EOL] mocked_opt = mocker . patch ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( config_file , [string] ) as file : [EOL] config_content = file . read ( ) [EOL] data = config_content . replace ( [string] , option ) [EOL] [EOL] with temp_config_filename ( data ) as new_config_file : [EOL] ext_args = [ new_config_file , [string] , [string] ] [EOL] commandline . main ( ext_args ) [EOL] assert mocked_opt . call_count == [number] [EOL] [EOL] option_list = [ [string] , [string] , [string] , [string] ] [EOL] @ pytest . mark . parametrize ( [string] , option_list , ids = option_list ) @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) def test_N_samples ( option , N_samples , mocker , no_logging ) : [EOL] [docstring] [EOL] mocked_sim = mocker . patch ( [string] ) [EOL] mocked_opt = mocker . patch ( [string] ) [EOL] mocked_opt_conc = mocker . patch ( [string] ) [EOL] [EOL] ext_args = [ config_file , [string] , option , f' [string] { N_samples }' ] [EOL] commandline . main ( ext_args ) [EOL] [EOL] if option in [ [string] , [string] ] : [EOL] assert mocked_sim . call_count == [number] [EOL] elif option == [string] : [EOL] assert mocked_opt . call_count == [number] [EOL] elif option == [string] : [EOL] assert mocked_opt_conc . call_count == [number] [EOL] else : [EOL] assert False	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import pytest [EOL] import numpy as np [EOL] [comment] [EOL] [EOL] import simetuc . lattice as lattice [EOL] from simetuc . util import temp_bin_filename [EOL] [EOL] test_folder_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] def idfn ( params ) : [EOL] [docstring] [EOL] return [string] . format ( params [ [number] ] , params [ [number] ] , params [ [number] ] , params [ [number] ] , params [ [number] ] ) [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ] , ids = idfn ) def test_cte_ok ( setup_cte , params ) : [EOL] [docstring] [EOL] cte = setup_cte [EOL] cte [ [string] ] = False [EOL] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] if params [ [number] ] is not None : [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] del cte [ [string] ] [ [string] ] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( dist_array , ion_type , doped_lattice , initial_population , lattice_info , index_S_i , index_A_j , index_S_k , dist_S_k , index_S_l , dist_S_l , index_A_k , dist_A_k , index_A_l , dist_A_l ) = lattice . generate ( cte , full_path = temp_filename ) [EOL] [EOL] num_ions = lattice_info [ [string] ] [EOL] num_activators = lattice_info [ [string] ] [EOL] num_sensitizers = lattice_info [ [string] ] [EOL] [EOL] num_states = lattice_info [ [string] ] [EOL] num_S_states = lattice_info [ [string] ] [EOL] num_A_states = lattice_info [ [string] ] [EOL] [EOL] assert dist_array . shape == ( num_ions , num_ions ) [EOL] [comment] [EOL] assert np . allclose ( dist_array , dist_array . T ) [EOL] [comment] [EOL] assert np . alltrue ( dist_array >= [number] ) [EOL] [EOL] assert ion_type . shape == ( num_ions , ) [EOL] assert np . max ( ion_type ) == [number] or np . max ( ion_type ) == [number] [EOL] assert np . min ( ion_type ) == [number] or np . min ( ion_type ) == [number] [EOL] assert np . count_nonzero ( ion_type ) == num_activators [EOL] assert ion_type . shape [ [number] ] - np . count_nonzero ( ion_type ) == num_sensitizers [EOL] [EOL] assert doped_lattice . shape == ( num_ions , [number] ) [EOL] [EOL] assert initial_population . shape == ( num_states , ) [EOL] assert np . max ( initial_population ) <= [number] [EOL] assert np . min ( initial_population ) >= [number] [EOL] [EOL] assert len ( index_S_i ) == num_ions [EOL] assert min ( index_S_i ) >= - [number] [EOL] assert max ( index_S_i ) <= num_states - [number] [EOL] [EOL] assert len ( index_A_j ) == num_ions [EOL] assert min ( index_A_j ) >= - [number] [EOL] assert max ( index_A_j ) <= num_states - [number] [EOL] [EOL] if num_sensitizers > [number] and num_S_states > [number] : [EOL] assert len ( index_S_k ) == num_sensitizers [EOL] assert all ( len ( list_elem ) == num_sensitizers - [number] for list_elem in index_S_k ) [EOL] assert all ( - [number] <= max ( list_elem ) <= num_states for list_elem in index_S_k if len ( list_elem ) ) [EOL] assert len ( dist_S_k ) == num_sensitizers [EOL] assert all ( len ( list_elem ) == num_sensitizers - [number] for list_elem in dist_S_k ) [EOL] assert all ( np . alltrue ( list_elem >= [number] ) for list_elem in dist_S_k ) [EOL] [EOL] if num_activators > [number] and num_A_states > [number] : [EOL] assert len ( index_S_l ) == num_sensitizers [EOL] assert all ( len ( list_elem ) == num_activators for list_elem in index_S_l ) [EOL] assert all ( - [number] <= max ( list_elem ) <= num_states for list_elem in index_S_l if len ( list_elem ) ) [EOL] assert len ( dist_S_l ) == num_sensitizers [EOL] assert all ( len ( list_elem ) == num_activators for list_elem in dist_S_l ) [EOL] assert all ( np . alltrue ( list_elem >= [number] ) for list_elem in dist_S_l ) [EOL] [EOL] if num_activators > [number] and num_A_states > [number] : [EOL] assert len ( index_A_l ) == num_activators [EOL] assert all ( len ( list_elem ) == num_activators - [number] for list_elem in index_A_l ) [EOL] assert all ( - [number] <= max ( list_elem ) <= num_states for list_elem in index_A_l if len ( list_elem ) ) [EOL] assert len ( dist_A_l ) == num_activators [EOL] assert all ( len ( list_elem ) == num_activators - [number] for list_elem in dist_A_l ) [EOL] assert all ( np . alltrue ( list_elem >= [number] ) for list_elem in dist_A_l ) [EOL] [EOL] if num_sensitizers > [number] and num_S_states > [number] : [EOL] assert len ( index_A_k ) == num_activators [EOL] assert all ( len ( list_elem ) == num_sensitizers for list_elem in index_A_k ) [EOL] assert all ( - [number] <= max ( list_elem ) <= num_states for list_elem in index_A_k if len ( list_elem ) ) [EOL] assert len ( dist_A_k ) == num_activators [EOL] assert all ( len ( list_elem ) == num_sensitizers for list_elem in dist_A_k ) [EOL] assert all ( np . alltrue ( list_elem >= [number] ) for list_elem in dist_A_k ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( - [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , - [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , - [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , None ) , ( [number] , [number] , [number] , [number] , [number] , - [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ] , ids = idfn ) def test_cte_wrong ( setup_cte , params ) : [EOL] [docstring] [EOL] cte = setup_cte [EOL] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] if params [ [number] ] is not None : [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] del cte [ [string] ] [ [string] ] [EOL] [EOL] with pytest . raises ( lattice . LatticeError ) : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( dist_array , ion_type , doped_lattice , initial_population , lattice_info , index_S_i , index_A_j , index_S_k , dist_S_k , index_S_l , dist_S_l , index_A_k , dist_A_k , index_A_l , dist_A_l ) = lattice . generate ( cte , full_path = temp_filename ) [EOL] [EOL] [EOL] [EOL] def idfn_cell ( cell_params ) : [EOL] [docstring] [EOL] return [string] . format ( * cell_params ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( - [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ] , ids = idfn_cell ) def test_unit_cell ( setup_cte , cell_params ) : [EOL] [docstring] [EOL] [EOL] cte = setup_cte [EOL] for key , param in zip ( [ [string] , [string] , [string] , [string] , [string] , [string] ] , cell_params ) : [EOL] cte . lattice [ key ] = param [EOL] [EOL] with pytest . raises ( lattice . LatticeError ) : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( dist_array , ion_type , doped_lattice , initial_population , lattice_info , index_S_i , index_A_j , index_S_k , dist_S_k , index_S_l , dist_S_l , index_A_k , dist_A_k , index_A_l , dist_A_l ) = lattice . generate ( cte , full_path = temp_filename ) [EOL] [EOL] [EOL] def idfn_sites ( sites ) : [EOL] [docstring] [EOL] return [string] . format ( * sites ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ [ [number] , [number] , [number] ] , [ - [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] , [number] / [number] ] ) , ( [ [ [number] , [number] , [number] ] , [ [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] , [number] / [number] ] ) , ( [ [ [number] , [number] , [number] ] , [ [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] , - [number] / [number] ] ) , ( [ [ [number] , [number] , [number] ] , [ [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] , [number] / [number] ] ) , ( [ [ [number] , [number] ] , [ [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] , [number] / [number] ] ) , ( [ [ [number] , [number] , [number] ] , [ [number] / [number] , [number] / [number] ] ] , [ [number] , [number] / [number] ] ) , ( [ [ [number] , [number] , [number] ] , [ [number] / [number] , [number] / [number] , [number] / [number] ] ] , [ [number] ] ) , ] , ids = idfn_sites ) def test_sites ( setup_cte , sites ) : [EOL] [docstring] [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = sites [ [number] ] [EOL] cte [ [string] ] [ [string] ] = sites [ [number] ] [EOL] [EOL] with pytest . raises ( lattice . LatticeError ) : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( dist_array , ion_type , doped_lattice , initial_population , lattice_info , index_S_i , index_A_j , index_S_k , dist_S_k , index_S_l , dist_S_l , index_A_k , dist_A_k , index_A_l , dist_A_l ) = lattice . generate ( cte , full_path = temp_filename ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] ) , ( [number] , [number] ) ] ) def test_single_atom ( setup_cte , concs ) : [EOL] [docstring] [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] success = False [EOL] cte [ [string] ] [ [string] ] = concs [ [number] ] [EOL] cte [ [string] ] [ [string] ] = concs [ [number] ] [EOL] while not success : [EOL] try : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( dist_array , ion_type , doped_lattice , initial_population , lattice_info , index_S_i , index_A_j , index_S_k , dist_S_k , index_S_l , dist_S_l , index_A_k , dist_A_k , index_A_l , dist_A_l ) = lattice . generate ( cte , full_path = temp_filename ) [EOL] except lattice . LatticeError : [comment] [EOL] pass [EOL] else : [EOL] if len ( ion_type ) == [number] : [comment] [EOL] success = True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
[comment] [EOL] from typing import Any , Literal , Union [EOL] import typing [EOL] import simetuc [EOL] import typing_extensions [EOL] [docstring] [EOL] import pytest [EOL] import numpy as np [EOL] import warnings [EOL] [EOL] from lmfit import Parameters [EOL] [EOL] import simetuc . optimize as optimize [EOL] import simetuc . simulations as simulations [EOL] from simetuc . util import IonType , DecayTransition , EneryTransferProcess , Transition [EOL] from simetuc . util import temp_bin_filename , temp_config_filename [EOL] [EOL] [EOL] B_43 = DecayTransition ( IonType . A , [number] , [number] , branching_ratio = [number] ) [EOL] CR50 = EneryTransferProcess ( [ Transition ( IonType . A , [number] , [number] ) , Transition ( IonType . A , [number] , [number] ) ] , mult = [number] , strength = [number] , name = [string] ) [EOL] def idfn_param ( param ) : [EOL] [docstring] [EOL] return [string] . format ( param ) [EOL] def idfn_avg ( param ) : [EOL] [docstring] [EOL] return [string] . format ( param ) [EOL] def idfn_proc ( param ) : [EOL] [docstring] [EOL] return [string] . format ( len ( param ) ) [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] ] , ids = idfn_param ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ True , False ] , ids = idfn_avg ) @ pytest . mark . parametrize ( [string] , [ [ CR50 , B_43 ] , [ CR50 ] , [ B_43 ] ] , ids = idfn_proc ) @ pytest . mark . parametrize ( [string] , [ [ ] , [ [string] ] , [ [string] , [string] ] ] , ids = [ [string] , [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ None , [number] , [number] ] ) def test_optim ( setup_cte , mocker , method , function , average , processes , excitations , N_samples ) : [EOL] [docstring] [EOL] [comment] [EOL] init_param = np . array ( [ proc . value for proc in processes ] ) [EOL] def mocked_optim_fun ( function , params , sim ) : [EOL] return [number] + ( np . array ( [ val for val in params . valuesdict ( ) . values ( ) ] ) - [number] * init_param ) ** [number] [EOL] mocker . patch ( [string] , new = mocked_optim_fun ) [EOL] [EOL] setup_cte [ [string] ] [ [string] ] = method [EOL] setup_cte [ [string] ] [ [string] ] = processes [EOL] setup_cte [ [string] ] [ [string] ] = excitations [EOL] fun = getattr ( optimize , function ) [EOL] with warnings . catch_warnings ( ) , temp_bin_filename ( ) as temp_filename : [EOL] warnings . filterwarnings ( [string] , message = [string] ) [EOL] optim_solution = fun ( setup_cte , average = average , full_path = temp_filename , N_samples = N_samples ) [EOL] best_x = optim_solution . best_params [EOL] min_f = optim_solution . min_f [EOL] res = optim_solution . result [EOL] [EOL] assert len ( best_x ) == len ( processes ) [EOL] if method in [string] : [EOL] assert min_f == np . sqrt ( res . candidates [ [number] ] . score ) [EOL] else : [EOL] assert min_f == np . sqrt ( ( res . residual ** [number] ) . sum ( ) ) [EOL] [EOL] def test_optim_no_dict_params ( setup_cte , mocker ) : [EOL] [docstring] [EOL] [comment] [EOL] init_param = np . array ( [ proc . value for proc in setup_cte . energy_transfer . values ( ) if proc . value != [number] ] ) [EOL] def mocked_optim_fun ( function , params , sim ) : [EOL] return [number] + ( np . array ( [ val for val in params . valuesdict ( ) . values ( ) ] ) - [number] * init_param ) ** [number] [EOL] mocker . patch ( [string] , new = mocked_optim_fun ) [EOL] [EOL] setup_cte [ [string] ] = { } [EOL] setup_cte [ [string] ] [ [string] ] = [ proc for proc in setup_cte . energy_transfer . values ( ) if proc . value != [number] ] [EOL] setup_cte [ [string] ] [ [string] ] = { } [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] optim_solution = optimize . optimize_dynamics ( setup_cte , full_path = temp_filename ) [EOL] best_x = optim_solution . best_params [EOL] min_f = optim_solution . min_f [EOL] res = optim_solution . result [EOL] [EOL] assert len ( best_x ) == len ( init_param ) [EOL] assert min_f == np . sqrt ( ( res . residual ** [number] ) . sum ( ) ) [EOL] [EOL] [EOL] def test_optim_wrong_method ( setup_cte , mocker ) : [EOL] [docstring] [EOL] [comment] [EOL] init_param = np . array ( [ proc . value for proc in setup_cte [ [string] ] [ [string] ] ] ) [EOL] def mocked_optim_fun ( function , params , sim ) : [EOL] return [number] + ( np . array ( [ val for val in params . valuesdict ( ) . values ( ) ] ) - [number] * init_param ) ** [number] [EOL] mocker . patch ( [string] , new = mocked_optim_fun ) [EOL] [EOL] setup_cte [ [string] ] [ [string] ] = [string] [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] optimize . optimize_dynamics ( setup_cte , full_path = temp_filename ) [EOL] assert excinfo . match ( [string] ) [EOL] assert excinfo . type == ValueError [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ ] , [ [string] ] , [ [string] , [string] ] ] , ids = [ [string] , [string] , [string] ] ) def test_optim_fun ( setup_cte , mocker , excitations ) : [EOL] [docstring] [EOL] mocked_dyn = mocker . patch ( [string] ) [EOL] class mocked_dyn_res : [EOL] errors = np . ones ( ( setup_cte . states [ [string] ] + setup_cte . states [ [string] ] , ) , dtype = np . float64 ) [EOL] average = False [EOL] mocked_dyn . return_value = mocked_dyn_res [EOL] [EOL] sim = simulations . Simulations ( setup_cte ) [EOL] sim . cte [ [string] ] [ [string] ] = excitations [EOL] [EOL] [comment] [EOL] process_list = setup_cte . optimization [ [string] ] [EOL] [comment] [EOL] params = Parameters ( ) [EOL] for process in process_list : [EOL] max_val = [number] if isinstance ( process , EneryTransferProcess ) else [number] [EOL] [comment] [EOL] min_val = [number] if isinstance ( process , EneryTransferProcess ) else [number] [EOL] params . add ( process . name , value = process . value , min = min_val , max = max_val ) [EOL] [EOL] optimize . optim_fun_dynamics ( params , sim , average = False ) [EOL] [EOL] sim . cte [ [string] ] [ [string] ] = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] optimize . optim_fun_dynamics_conc ( params , sim ) [EOL] [EOL] assert mocked_dyn . called [EOL] [EOL] def test_optim_save_txt ( setup_cte , mocker ) : [EOL] [docstring] [EOL] init_param = np . array ( [ proc . value for proc in setup_cte [ [string] ] [ [string] ] ] ) [EOL] def mocked_optim_fun ( function , params , sim ) : [EOL] return [number] + ( np . array ( [ val for val in params . valuesdict ( ) . values ( ) ] ) - [number] * init_param ) ** [number] [EOL] mocker . patch ( [string] , new = mocked_optim_fun ) [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] solution = optimize . optimize_dynamics ( setup_cte , full_path = temp_filename ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save_txt ( filename ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simetuc.util.DecayTransition$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simetuc.util.EneryTransferProcess$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simetuc.util.EneryTransferProcess$ 0 $simetuc.util.DecayTransition$ 0 0 0 $simetuc.util.EneryTransferProcess$ 0 0 0 $simetuc.util.DecayTransition$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import simetuc [EOL] [docstring] [EOL] [EOL] import warnings [EOL] import pytest [EOL] [EOL] from simetuc . util import IonType , Transition , DecayTransition , Excitation , EneryTransferProcess [EOL] from simetuc . util import log_exceptions_warnings [EOL] [EOL] [EOL] def test_transition ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] t1 = Transition ( IonType . S , [number] , [number] ) [EOL] t2 = Transition ( IonType . S , [number] , [number] , label_ion = [string] , label_i = [string] , label_f = [string] ) [EOL] assert t1 == t2 [EOL] assert hash ( t1 ) == hash ( t2 ) [EOL] [EOL] [comment] [EOL] t3 = Transition ( IonType . S , [number] , [number] ) [EOL] assert t3 != t1 [EOL] assert t3 != t2 [EOL] assert hash ( t3 ) != hash ( t1 ) [EOL] assert hash ( t3 ) != hash ( t2 ) [EOL] [EOL] [comment] [EOL] t4 = Transition ( IonType . A , [number] , [number] ) [EOL] assert t4 != t1 [EOL] assert hash ( t4 ) != hash ( t1 ) [EOL] [EOL] [EOL] def test_decay_transition ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] t1 = DecayTransition ( IonType . S , [number] , [number] , branching_ratio = [number] ) [EOL] t2 = DecayTransition ( IonType . S , [number] , [number] , branching_ratio = [number] , label_ion = [string] , label_i = [string] , label_f = [string] ) [EOL] assert t1 == t2 [EOL] assert hash ( t1 ) == hash ( t2 ) [EOL] t1_dec = DecayTransition ( IonType . S , [number] , [number] , decay_rate = [number] ) [EOL] t2_dec = DecayTransition ( IonType . S , [number] , [number] , decay_rate = [number] , label_ion = [string] , label_i = [string] , label_f = [string] ) [EOL] assert t1_dec == t2_dec [EOL] assert hash ( t1_dec ) == hash ( t2_dec ) [EOL] [EOL] [comment] [EOL] t3 = DecayTransition ( IonType . S , [number] , [number] , branching_ratio = [number] ) [EOL] assert t3 != t1 [EOL] assert t3 != t2 [EOL] assert hash ( t3 ) == hash ( t1 ) [EOL] assert hash ( t3 ) == hash ( t2 ) [EOL] [EOL] [comment] [EOL] t4 = Transition ( IonType . S , [number] , [number] ) [EOL] assert t1 == t4 [EOL] assert t4 == t1 [EOL] assert hash ( t1 ) == hash ( t4 ) [EOL] [EOL] [EOL] def test_exc_transition ( ) : [EOL] [docstring] [EOL] [EOL] t1 = Excitation ( IonType . S , [number] , [number] , active = True , degeneracy = [number] / [number] , pump_rate = [number] , power_dens = [number] , t_pulse = [number] ) [EOL] t2 = Excitation ( IonType . S , [number] , [number] , active = True , degeneracy = [number] / [number] , pump_rate = [number] , power_dens = [number] , t_pulse = [number] , label_ion = [string] , label_i = [string] , label_f = [string] ) [EOL] assert t1 == t2 [EOL] [EOL] [comment] [EOL] t3 = Excitation ( IonType . S , [number] , [number] , active = False , degeneracy = [number] / [number] , pump_rate = [number] , power_dens = [number] , t_pulse = [number] ) [EOL] assert t3 != t1 [EOL] assert t3 != t2 [EOL] [EOL] [EOL] def test_ET_process ( ) : [EOL] [docstring] [EOL] [EOL] strength = [number] [EOL] t1 = Transition ( IonType . S , [number] , [number] ) [EOL] t2 = Transition ( IonType . S , [number] , [number] ) [EOL] et1 = EneryTransferProcess ( [ t1 , t2 ] , mult = [number] , strength = strength ) [EOL] et2 = EneryTransferProcess ( [ t1 , t2 ] , mult = [number] , strength = strength ) [EOL] assert et1 != et2 [EOL] [EOL] t3 = Transition ( IonType . S , [number] , [number] , label_ion = [string] ) [EOL] et3 = EneryTransferProcess ( [ t1 , t3 ] , mult = [number] , strength = strength ) [EOL] assert et1 == et3 [EOL] [EOL] assert et1 . strength == strength [EOL] assert et1 . strength_avg == strength [EOL] [EOL] strength_avg = [number] [EOL] et4 = EneryTransferProcess ( [ t1 , t2 ] , mult = [number] , strength = strength , strength_avg = strength_avg ) [EOL] assert et4 . strength_avg == strength_avg [EOL] [EOL] [EOL] def test_log_exceptions_warnings_nothing ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ log_exceptions_warnings def raise_nothing ( arg1 , arg2 = [number] ) : [EOL] return str ( arg1 ) + str ( arg2 ) [EOL] raise_nothing ( [string] , arg2 = [number] ) [EOL] [EOL] def test_log_exceptions_warnings_warning ( caplog ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ log_exceptions_warnings def raise_warning ( arg1 , arg2 = [number] ) : [EOL] warnings . warn ( str ( arg1 ) + str ( arg2 ) ) [EOL] with warnings . catch_warnings ( ) : [EOL] warnings . filterwarnings ( [string] , message = [string] ) [EOL] raise_warning ( [string] , arg2 = [number] ) [EOL] assert len ( caplog . records ) == [number] [EOL] assert caplog . records [ [number] ] . levelname == [string] [EOL] assert [string] in caplog . text [EOL] [EOL] def test_log_exceptions_warnings_exception ( caplog ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ log_exceptions_warnings def raise_exception ( arg1 , arg2 = [number] ) : [EOL] return [number] / [number] [EOL] with pytest . raises ( ZeroDivisionError ) as excinfo : [EOL] raise_exception ( [string] , arg2 = [number] ) [EOL] assert excinfo . type == ZeroDivisionError [EOL] assert len ( caplog . records ) == [number] [EOL] assert caplog . records [ [number] ] . levelname == [string] [EOL] assert [string] in caplog . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Union , Any , Dict , Set , List [EOL] import typing [EOL] import simetuc [EOL] [docstring] [EOL] import os [EOL] [EOL] import pytest [EOL] import warnings [EOL] with warnings . catch_warnings ( ) : [EOL] warnings . simplefilter ( [string] ) [EOL] import h5py [EOL] import numpy as np [EOL] [EOL] import simetuc . simulations as simulations [EOL] import simetuc . plotter as plotter [EOL] from simetuc . util import temp_config_filename , temp_bin_filename , IonType , DecayTransition [EOL] from simetuc . util import Excitation [EOL] from simetuc . settings import Settings [EOL] [comment] [EOL] [EOL] [EOL] test_folder_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] def test_sim ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] sim = simulations . Simulations ( setup_cte_sim ) [EOL] assert sim . cte [EOL] assert sim [EOL] [EOL] def test_sim_dyn ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] assert sim . cte == setup_cte_sim [EOL] [EOL] solution = sim . simulate_dynamics ( ) [EOL] assert solution [EOL] [EOL] solution . plot ( ) [EOL] solution . plot ( state = [number] ) [EOL] solution . plot ( state = [number] ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_dyn_errors ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_dynamics ( ) [EOL] [EOL] solution . errors [EOL] assert isinstance ( solution . errors , np . ndarray ) [EOL] solution . log_errors ( ) [EOL] [EOL] [EOL] def test_change_cte ( setup_cte_sim ) : [EOL] [docstring] [EOL] dynamics_sol = simulations . DynamicsSolution ( np . zeros ( ( [number] , ) ) , np . zeros ( ( [number] , [number] ) ) , [ - [number] ] * [number] , [ - [number] ] * [number] , setup_cte_sim ) [EOL] [EOL] setup_cte_sim . excitations [ [string] ] [ [number] ] . power_dens = [number] [EOL] [EOL] dynamics_sol2 = simulations . DynamicsSolution ( np . zeros ( ( [number] , ) ) , np . zeros ( ( [number] , [number] ) ) , [ - [number] ] * [number] , [ - [number] ] * [number] , setup_cte_sim ) [EOL] [EOL] assert dynamics_sol != dynamics_sol2 [EOL] assert dynamics_sol2 . cte . excitations [ [string] ] [ [number] ] . power_dens == [number] [EOL] [EOL] [EOL] def test_sim_dyn_2S_2A ( setup_cte_sim ) : [EOL] [docstring] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = test_filename ) [EOL] [EOL] solution = sim . simulate_dynamics ( ) [EOL] assert solution . index_A_j == [ [number] , - [number] , - [number] , [number] ] [EOL] assert solution . index_S_i == [ - [number] , [number] , [number] , - [number] ] [EOL] [EOL] with h5py . File ( os . path . join ( test_folder_path , [string] ) ) as file : [EOL] t_sol = np . array ( file [ [string] ] ) [EOL] assert np . allclose ( t_sol , solution . t_sol ) [EOL] [EOL] with h5py . File ( os . path . join ( test_folder_path , [string] ) ) as file : [EOL] y_sol = np . array ( file [ [string] ] ) [EOL] assert np . allclose ( y_sol , solution . y_sol ) [EOL] [EOL] def test_sim_dyn_wrong_state_plot ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_dynamics ( ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] solution . plot ( state = [number] ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_average_dyn ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_avg_dynamics ( ) [EOL] assert solution [EOL] [EOL] def test_sim_dyn_diff ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim1 = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution1 = sim1 . simulate_dynamics ( ) [EOL] solution1 . total_error [EOL] [EOL] setup_cte_sim [ [string] ] = { } [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim2 = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution2 = sim2 . simulate_dynamics ( ) [EOL] solution2 . total_error [EOL] [EOL] assert sim1 != sim2 [EOL] assert solution1 != solution2 [EOL] [EOL] [EOL] def test_sim_dyn_save_hdf5 ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim . states [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_dynamics ( ) [EOL] assert mocked . call_count == [number] [EOL] [EOL] with temp_bin_filename ( ) as filename : [EOL] solution . save ( filename ) [EOL] sol_hdf5 = simulations . DynamicsSolution . load ( filename ) [EOL] assert sol_hdf5 [EOL] [EOL] assert sol_hdf5 . cte == solution . cte [EOL] assert np . allclose ( sol_hdf5 . y_sol , solution . y_sol ) [EOL] assert np . allclose ( sol_hdf5 . t_sol , solution . t_sol ) [EOL] assert sol_hdf5 . index_S_i == solution . index_S_i [EOL] assert sol_hdf5 . index_A_j == solution . index_A_j [EOL] assert sol_hdf5 == solution [EOL] sol_hdf5 . log_errors ( ) [EOL] sol_hdf5 . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] [EOL] def test_sim_dyn_save_txt ( setup_cte_sim ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_dynamics ( ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save_txt ( filename ) [EOL] [EOL] def test_sim_no_file_hdf5 ( ) : [EOL] [docstring] [EOL] with pytest . raises ( OSError ) : [EOL] simulations . DynamicsSolution . load ( os . path . join ( test_folder_path , [string] ) ) [EOL] [EOL] def test_sim_dyn_no_t_pulse ( setup_cte_sim ) : [EOL] [docstring] [EOL] del setup_cte_sim [ [string] ] [ [string] ] [ [number] ] . t_pulse [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] with pytest . raises ( AttributeError ) : [EOL] sim . simulate_dynamics ( ) [EOL] [EOL] def test_sim_steady1 ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] [ [number] ] . t_pulse = [number] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] assert sim . cte == setup_cte_sim [EOL] solution = sim . simulate_steady_state ( ) [EOL] assert solution [EOL] [EOL] solution . log_populations ( ) [EOL] solution . plot ( ) [EOL] solution . log_populations ( ) [comment] [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save ( filename ) [EOL] sol_hdf5 = simulations . SteadyStateSolution . load ( filename ) [EOL] [EOL] assert sol_hdf5 [EOL] assert sol_hdf5 == solution [EOL] sol_hdf5 . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_steady2 ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] [ [number] ] . t_pulse = [number] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_avg_steady_state ( ) [EOL] assert solution [EOL] [EOL] def test_sim_no_plot ( setup_cte_sim ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] = True [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_dynamics ( ) [EOL] [EOL] with pytest . warns ( plotter . PlotWarning ) as warnings : [EOL] solution . plot ( ) [EOL] [comment] [EOL] warning = warnings . pop ( plotter . PlotWarning ) [EOL] assert issubclass ( warning . category , plotter . PlotWarning ) [EOL] assert [string] in str ( warning . message ) [EOL] [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_sim_power_dep ( setup_cte_sim , mocker , average , excitation_name ) : [EOL] [docstring] [EOL] for exc_name , exc_list in setup_cte_sim . excitations . items ( ) : [EOL] for exc in exc_list : [EOL] if exc_name is excitation_name : [EOL] exc . active = True [EOL] else : [EOL] exc . active = False [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim . states [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] assert sim . cte == setup_cte_sim [EOL] power_dens_list = np . logspace ( [number] , [number] , [number] - [number] + [number] ) [EOL] solution = sim . simulate_power_dependence ( power_dens_list , average = average ) [EOL] assert ( mocked . call_count == [number] * len ( power_dens_list ) ) or ( mocked . call_count == len ( power_dens_list ) ) [EOL] assert solution [EOL] [EOL] solution . plot ( ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save_txt ( filename ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save ( filename ) [EOL] solution_hdf5 = simulations . PowerDependenceSolution . load ( filename ) [EOL] [EOL] assert solution_hdf5 [EOL] for sol , sol_hdf5 in zip ( solution . solution_list , solution_hdf5 . solution_list ) : [EOL] assert sol . y_sol . shape == sol_hdf5 . y_sol . shape [EOL] assert np . allclose ( sol . t_sol , sol_hdf5 . t_sol ) [EOL] assert np . allclose ( sol . y_sol , sol_hdf5 . y_sol ) [EOL] assert sol . cte == sol_hdf5 . cte [EOL] print ( type ( sol . index_S_i ) , type ( sol_hdf5 . index_S_i ) ) [EOL] print ( sol . index_S_i , sol_hdf5 . index_S_i ) [EOL] assert sol . index_S_i == sol_hdf5 . index_S_i [EOL] assert sol . index_A_j == sol_hdf5 . index_A_j [EOL] [EOL] assert sol == sol_hdf5 [EOL] [EOL] assert solution_hdf5 == solution [EOL] solution_hdf5 . plot ( ) [EOL] [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_power_dep_save_txt ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] power_dens_list = np . logspace ( [number] , [number] , [number] ) [EOL] solution = sim . simulate_power_dependence ( power_dens_list , average = True ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save_txt ( filename ) [EOL] [EOL] def test_sim_power_dep_empty_list ( setup_cte_sim ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] power_dens_list = [ ] [EOL] solution = sim . simulate_power_dependence ( power_dens_list ) [EOL] [EOL] with pytest . warns ( plotter . PlotWarning ) as warnings : [EOL] solution . plot ( ) [EOL] [comment] [EOL] warning = warnings . pop ( plotter . PlotWarning ) [EOL] assert issubclass ( warning . category , plotter . PlotWarning ) [EOL] assert [string] in str ( warning . message ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_power_dep_no_plot ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] = True [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] mocked . return_value = simulations . SteadyStateSolution ( np . empty ( ( [number] , ) ) , np . empty ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) , [ ] , [ ] , setup_cte_sim ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] power_dens_list = np . logspace ( [number] , [number] , [number] ) [EOL] solution = sim . simulate_power_dependence ( power_dens_list ) [EOL] assert mocked . call_count == len ( power_dens_list ) [EOL] [EOL] with pytest . warns ( plotter . PlotWarning ) as warnings : [EOL] solution . plot ( ) [EOL] [comment] [EOL] warning = warnings . pop ( plotter . PlotWarning ) [EOL] assert issubclass ( warning . category , plotter . PlotWarning ) [EOL] assert [string] in str ( warning . message ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_power_dep_correct_power_dens ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] = True [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] power_dens_list = np . logspace ( [number] , [number] , [number] ) [EOL] solution = sim . simulate_power_dependence ( power_dens_list ) [EOL] assert mocked . call_count == [number] * len ( power_dens_list ) [EOL] [EOL] for num , pow_dens in enumerate ( power_dens_list ) : [EOL] assert solution [ num ] . power_dens == pow_dens [EOL] [EOL] def test_sim_power_dep_ESA ( ) : [EOL] [docstring] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] cte = { [string] : [number] , [string] : { [string] : { DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) , DecayTransition ( IonType . A , [number] , [number] , decay_rate = [number] ) } , [string] : { DecayTransition ( IonType . S , [number] , [number] , decay_rate = [number] ) } , [string] : { } , [string] : { } } , [string] : { [string] : [ Excitation ( IonType . A , [number] , [number] , True , [number] , [number] , [number] , t_pulse = None ) , Excitation ( IonType . A , [number] , [number] , True , [number] , [number] , [number] , t_pulse = None ) ] } , [string] : { } , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [ [number] , [number] ] , [string] : [ ( [number] , [number] , [number] ) , ( [number] / [number] , [number] / [number] , [number] ) ] , [string] : [string] } , [string] : False , [string] : False , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : [number] , [string] : [ [string] , [string] , [string] ] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ [string] , [string] ] } } [EOL] simple_cte = Settings . load_from_dict ( cte ) [EOL] [EOL] power_dens_list = np . logspace ( [number] , [number] , [number] ) [EOL] [EOL] sim = simulations . Simulations ( simple_cte , full_path = test_filename ) [EOL] [EOL] solution = sim . simulate_power_dependence ( power_dens_list , average = True ) [EOL] [EOL] [comment] [EOL] for sol in solution : [EOL] GS = sol . steady_state_populations [ [number] ] [EOL] ES1 = sol . steady_state_populations [ [number] ] [EOL] ES2 = sol . steady_state_populations [ [number] ] [EOL] P = sol . power_dens * sol . cte . excitations [ [string] ] [ [number] ] . pump_rate [EOL] k1 = [number] [EOL] k2 = [number] [EOL] theo_ES1 = GS * P / ( k1 + P ) [EOL] theo_ES2 = GS * P ** [number] / ( ( k1 + P ) * k2 ) [EOL] [comment] [EOL] [comment] [EOL] assert np . allclose ( theo_ES1 , ES1 , rtol = [number] ) [EOL] assert np . allclose ( theo_ES2 , ES2 , rtol = [number] ) [EOL] [EOL] [EOL] def test_sim_conc_dep_steady ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = False ) [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] assert solution [EOL] solution . plot ( ) [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save ( filename ) [EOL] sol_hdf5 = simulations . ConcentrationDependenceSolution . load ( filename ) [EOL] [EOL] assert sol_hdf5 [EOL] assert sol_hdf5 == solution [EOL] sol_hdf5 . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_conc_dep_dyn ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = True ) [EOL] [comment] [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] assert solution [EOL] solution . plot ( ) [EOL] solution . log_errors ( ) [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save ( filename ) [EOL] sol_hdf5 = simulations . ConcentrationDependenceSolution . load ( filename ) [EOL] [EOL] assert sol_hdf5 [EOL] assert sol_hdf5 == solution [EOL] sol_hdf5 . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_conc_dep_save_txt ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = False , average = True ) [EOL] [EOL] with temp_config_filename ( [string] ) as filename : [EOL] solution . save_txt ( filename ) [EOL] [EOL] def test_sim_conc_dep_list ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = True ) [EOL] [comment] [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] for num , conc in enumerate ( conc_list ) : [EOL] assert solution [ num ] . concentration == conc [EOL] [EOL] def test_sim_conc_dep_only_A ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = False ) [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] assert solution [EOL] solution . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_conc_dep_only_S ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = False ) [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] assert solution [EOL] solution . plot ( ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] def test_sim_conc_dep_empty_conc ( setup_cte_sim ) : [EOL] [docstring] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] conc_list = [ ] [EOL] solution = sim . simulate_concentration_dependence ( conc_list ) [EOL] [EOL] with pytest . warns ( plotter . PlotWarning ) as warnings : [EOL] solution . plot ( ) [EOL] [comment] [EOL] warning = warnings . pop ( plotter . PlotWarning ) [EOL] assert issubclass ( warning . category , plotter . PlotWarning ) [EOL] assert [string] in str ( warning . message ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] [EOL] def test_sim_conc_dep_no_plot ( setup_cte_sim , mocker ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] = True [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim [ [string] ] [ [string] ] ) ) [EOL] [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] solution = sim . simulate_concentration_dependence ( conc_list , dynamics = False ) [EOL] assert mocked . call_count == [number] * len ( conc_list ) [EOL] [EOL] with pytest . warns ( plotter . PlotWarning ) as warnings : [EOL] solution . plot ( ) [EOL] [comment] [EOL] warning = warnings . pop ( plotter . PlotWarning ) [EOL] assert issubclass ( warning . category , plotter . PlotWarning ) [EOL] assert [string] in str ( warning . message ) [EOL] plotter . plt . close ( [string] ) [EOL] [EOL] [EOL] def test_sim_conc_dep_no_file ( ) : [EOL] [docstring] [EOL] with pytest . raises ( OSError ) : [EOL] simulations . PowerDependenceSolution . load ( os . path . join ( test_folder_path , [string] ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) def test_sim_sample_dynamics ( setup_cte_sim , mocker , N_samples ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim . states [ [string] ] ) ) [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] assert sim . cte == setup_cte_sim [EOL] [EOL] solution = sim . sample_simulation ( sim . simulate_dynamics , N_samples = N_samples ) [EOL] assert solution [EOL] assert mocked . call_count == [number] * N_samples [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) def test_sim_sample_conc_dynamics ( setup_cte_sim , mocker , N_samples ) : [EOL] [docstring] [EOL] setup_cte_sim [ [string] ] [ [string] ] = [number] [EOL] [EOL] mocked = mocker . patch ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] mocked . return_value = np . random . random ( ( [number] , [number] * setup_cte_sim . states [ [string] ] ) ) [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] sim = simulations . Simulations ( setup_cte_sim , full_path = temp_filename ) [EOL] assert sim . cte == setup_cte_sim [EOL] conc_list = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] solution = sim . sample_simulation ( sim . simulate_concentration_dependence , N_samples = N_samples , concentrations = conc_list ) [EOL] assert solution [EOL] assert mocked . call_count == [number] * len ( conc_list ) * N_samples [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str
[comment] [EOL] from typing import Tuple , Union , Any , Dict , List [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] import pytest [EOL] import numpy as np [EOL] [EOL] import simetuc . simulations as simulations [EOL] import simetuc . odesolver as odesolver [EOL] import simetuc . precalculate as precalculate [EOL] [EOL] [EOL] test_folder_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def setup_cte ( ) : [EOL] [docstring] [EOL] [EOL] cte = { [string] : dict ( [ ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [ [number] , [number] , [number] , [number] ] , [string] : [number] , [string] : [string] , [string] : [number] } ) ] ) , [string] : { [string] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] , [string] : [ ] , [string] : [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [string] : [ ( [number] , [number] ) ] } , [string] : { [string] : { [string] : False , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [string] ] , [string] : [number] , [string] : [ [string] ] , [string] : [ [number] ] , [string] : [number] } , [string] : { [string] : False , [string] : [ [number] , [number] ] , [string] : [ [number] , [number] ] , [string] : [ [number] , [number] ] , [string] : [ [string] , [string] ] , [string] : [number] , [string] : [ [string] , [string] ] , [string] : [ [number] , [number] ] , [string] : [number] } , [string] : { [string] : False , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [string] ] , [string] : [number] , [string] : [ [string] ] , [string] : [ [number] ] , [string] : [number] } , [string] : { [string] : True , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [string] ] , [string] : [number] , [string] : [ [string] ] , [string] : [ [number] ] , [string] : [number] } } , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [string] , [string] : [ [number] , [number] ] , [string] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] , [string] : [string] } , [string] : False , [string] : False , [string] : { [string] : [string] , [string] : [number] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : [number] , [string] : [ [string] , [string] ] } } [EOL] [EOL] return cte [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def setup_benchmark ( setup_cte ) : [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] [EOL] tf = ( [number] * np . max ( precalculate . get_lifetimes ( cte ) ) ) . round ( [number] ) [comment] [EOL] tf_p = [number] [EOL] t0_sol = tf_p [EOL] tf_sol = tf [EOL] N_steps = [number] [EOL] [EOL] rtol = [number] [EOL] atol = [number] [EOL] [EOL] [comment] [EOL] ic = np . zeros ( ( cte [ [string] ] [ [string] ] ) , dtype = np . float64 ) [EOL] index_S_i = np . array ( index_S_i ) [EOL] index_A_j = np . array ( index_A_j ) [EOL] ic [ index_S_i [ index_S_i != - [number] ] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] + [number] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] + [number] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] + [number] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] + [number] ] = [number] [EOL] ic [ index_A_j [ index_A_j != - [number] ] + [number] ] = [number] [EOL] [EOL] t_sol = np . logspace ( np . log10 ( t0_sol ) , np . log10 ( tf_sol ) , N_steps , dtype = np . float64 ) [EOL] args_sol = ( t_sol , simulations . _rate_eq , ( decay_matrix , UC_matrix , N_indices ) , simulations . _jac_rate_eq , ( decay_matrix , UC_matrix , jac_indices ) , ic ) [EOL] kwargs_sol = { [string] : [string] , [string] : rtol , [string] : atol , [string] : [number] , [string] : True } [EOL] [EOL] return ( args_sol , kwargs_sol ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ pytest . mark . skip @ pytest . mark . benchmark ( group = [string] ) def test_benchmark_ode_solve_large ( setup_benchmark , benchmark ) : [EOL] [docstring] [EOL] benchmark . pedantic ( odesolver . _solve_ode , args = setup_benchmark [ [number] ] , kwargs = setup_benchmark [ [number] ] , rounds = [number] , iterations = [number] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Callable , Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] import pytest [EOL] import numpy as np [EOL] [comment] [EOL] import scipy . sparse as sparse [EOL] [EOL] import simetuc . precalculate as precalculate [EOL] import simetuc . lattice as lattice [comment] [EOL] from simetuc . util import temp_bin_filename [EOL] [EOL] [EOL] test_folder_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_lattice_1A ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] power_dens = cte [ [string] ] [ [string] ] [ [number] ] . power_dens [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ - [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] , dtype = np . float64 ) [EOL] assert np . allclose ( power_dens * good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == UC_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_1A_ESA ( setup_cte ) : [comment] [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] power_dens = cte [ [string] ] [ [string] ] [ [number] ] . power_dens [EOL] [EOL] [comment] [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] ] ) ) [EOL] [EOL] good_abs_matrix_GSA = [number] * np . array ( [ [ - [number] , [number] , [number] , [number] / [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] / [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] , dtype = np . float64 ) [EOL] [EOL] good_abs_matrix_ESA = [number] * np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] / [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] / [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] , dtype = np . float64 ) [EOL] good_abs_matrix = power_dens * ( good_abs_matrix_GSA + good_abs_matrix_ESA ) [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == UC_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] [EOL] def test_lattice_1A_two_color ( setup_cte ) : [comment] [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] power_dens_GSA = cte [ [string] ] [ [string] ] [ [number] ] . power_dens [EOL] power_dens_ESA = cte [ [string] ] [ [string] ] [ [number] ] . power_dens [EOL] [EOL] [comment] [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] setup_cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] ] ) ) [EOL] [EOL] good_abs_matrix_GSA = power_dens_GSA * np . array ( [ [ - [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] [EOL] good_abs_matrix_ESA = power_dens_ESA * [number] * np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] / [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] / [number] ] ] , dtype = np . float64 ) [EOL] good_abs_matrix = good_abs_matrix_GSA + good_abs_matrix_ESA [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == UC_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_2A ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] power_dens = cte [ [string] ] [ [string] ] [ [number] ] . power_dens [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] , - [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] , [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( power_dens * good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] good_UC_matrix = np . array ( [ [ [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] ] , [ [number] , [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] ] , [ [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_UC_matrix , UC_matrix ) [EOL] [EOL] good_N_indices = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_N_indices == N_indices ) [EOL] [EOL] good_jac_indices = np . array ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_jac_indices == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_1S ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ - [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] ] , [ [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == UC_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_2S ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ [number] , [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ - [number] , - [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] good_UC_matrix = np . array ( [ [ [number] , - [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_UC_matrix , UC_matrix ) [EOL] [EOL] good_N_indices = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_N_indices == N_indices ) [EOL] [EOL] good_jac_indices = np . array ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_jac_indices == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_1S_1A ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] , [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] , - [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] good_UC_matrix = np . array ( [ [ [number] , - [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ - [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ - [number] , [number] ] , [ [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_UC_matrix , UC_matrix ) [EOL] [EOL] good_N_indices = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_N_indices == N_indices ) [EOL] [EOL] good_jac_indices = np . array ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_jac_indices == jac_indices ) [EOL] [EOL] assert np . all ( np . array ( [ ] , dtype = np . float64 ) . reshape ( ( [number] , [number] ) ) == coop_ET_matrix ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_N_indices ) [EOL] assert np . all ( np . array ( [ ] , dtype = np . uint64 ) . reshape ( ( [number] , [number] ) ) == coop_jac_indices ) [EOL] [EOL] def test_lattice_2S_2A ( setup_cte ) : [EOL] [docstring] [EOL] [EOL] test_filename = os . path . join ( test_folder_path , [string] ) [EOL] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , UC_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( setup_cte , full_path = test_filename ) [EOL] UC_matrix = UC_matrix . toarray ( ) [EOL] coop_ET_matrix = coop_ET_matrix . toarray ( ) [EOL] total_abs_matrix = total_abs_matrix . toarray ( ) [EOL] decay_matrix = decay_matrix . toarray ( ) [EOL] [EOL] assert np . all ( initial_population == np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , dtype = np . uint64 ) ) [EOL] [EOL] assert np . all ( index_S_i == np . array ( [ - [number] , [number] , [number] , - [number] ] ) ) [EOL] assert np . all ( index_A_j == np . array ( [ [number] , - [number] , - [number] , [number] ] ) ) [EOL] [EOL] good_abs_matrix = np . array ( [ [ - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_abs_matrix , total_abs_matrix ) [EOL] [EOL] good_decay_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_decay_matrix , decay_matrix ) [EOL] [EOL] [EOL] good_UC_matrix = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , - [number] , [number] , - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ] , [ - [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_UC_matrix , UC_matrix ) [EOL] [EOL] good_N_indices = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_N_indices == N_indices ) [EOL] [EOL] good_jac_indices = np . array ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . all ( good_jac_indices == jac_indices ) [EOL] [EOL] good_coop_ET_matrix = np . array ( [ [ - [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ - [number] , - [number] ] , [ [number] , [number] ] , [ - [number] , - [number] ] , [ [number] , - [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] , dtype = np . float64 ) [EOL] assert np . allclose ( good_coop_ET_matrix , coop_ET_matrix ) [EOL] [EOL] good_coop_N_indices = np . array ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . allclose ( good_coop_N_indices , coop_N_indices ) [EOL] [EOL] good_coop_jac_indices = np . array ( [ [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] , dtype = np . uint64 ) [EOL] assert np . allclose ( good_coop_jac_indices , coop_jac_indices ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def idfn ( params ) : [EOL] [docstring] [EOL] return [string] . format ( params [ [number] ] , params [ [number] ] , params [ [number] ] , params [ [number] ] , params [ [number] ] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) ] , ids = idfn ) def test_random_lattice ( setup_cte , params , absorption , problem ) : [EOL] [docstring] [EOL] [EOL] cte = setup_cte [EOL] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] [EOL] if absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] elif absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] elif absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] [EOL] setup_func = precalculate . setup_microscopic_eqs [EOL] if problem == [string] : [EOL] setup_func = precalculate . setup_average_eqs [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = setup_func ( cte , full_path = temp_filename ) [EOL] [EOL] [comment] [EOL] assert sparse . issparse ( ET_matrix ) [EOL] assert sparse . issparse ( coop_ET_matrix ) [EOL] assert sparse . issparse ( total_abs_matrix ) [EOL] assert sparse . issparse ( decay_matrix ) [EOL] [EOL] assert cte [ [string] ] [ [string] ] == cte [ [string] ] [ [string] ] + cte [ [string] ] [ [string] ] [EOL] num_ions = cte [ [string] ] [ [string] ] [EOL] [EOL] assert cte [ [string] ] [ [string] ] == cte [ [string] ] [ [string] ] * cte [ [string] ] [ [string] ] + cte [ [string] ] [ [string] ] * cte [ [string] ] [ [string] ] [EOL] num_states = cte [ [string] ] [ [string] ] [EOL] num_interactions = N_indices . shape [ [number] ] [EOL] num_coop_interactions = coop_N_indices . shape [ [number] ] [EOL] [EOL] assert initial_population . shape == ( num_states , ) [EOL] [EOL] assert len ( index_S_i ) == num_ions [EOL] assert min ( index_S_i ) >= - [number] [EOL] assert max ( index_S_i ) <= num_states - [number] [EOL] [EOL] assert len ( index_A_j ) == num_ions [EOL] assert min ( index_A_j ) >= - [number] [EOL] assert max ( index_A_j ) <= num_states - [number] [EOL] [EOL] assert total_abs_matrix . shape == ( num_states , num_states ) [EOL] [comment] [EOL] assert np . allclose ( np . sum ( total_abs_matrix , axis = [number] ) , [number] ) [EOL] [EOL] assert decay_matrix . shape == ( num_states , num_states ) [EOL] [comment] [EOL] assert np . allclose ( np . sum ( decay_matrix , axis = [number] ) , [number] ) [EOL] [comment] [EOL] assert np . allclose ( decay_matrix . todense ( ) , np . triu ( decay_matrix . todense ( ) ) ) [EOL] [EOL] assert ET_matrix . shape == ( num_states , num_interactions ) [EOL] [comment] [EOL] assert np . allclose ( np . sum ( ET_matrix , axis = [number] ) , [number] ) [EOL] [comment] [EOL] assert ET_matrix . getnnz ( ) == [number] * num_interactions [EOL] assert np . all ( [ col . getnnz ( ) == [number] for col in ET_matrix . T ] ) [EOL] [EOL] assert N_indices . shape == ( num_interactions , [number] ) [EOL] if num_interactions != [number] : [comment] [EOL] assert np . min ( N_indices ) >= [number] [EOL] assert np . max ( N_indices ) <= num_states - [number] [EOL] [EOL] assert jac_indices . shape == ( [number] * num_interactions , [number] ) [EOL] if num_interactions != [number] : [comment] [EOL] assert np . min ( jac_indices ) >= [number] [EOL] [comment] [EOL] assert np . max ( jac_indices [ : , [number] ] ) <= num_interactions - [number] [EOL] [comment] [EOL] assert np . max ( jac_indices [ : , [number] ] ) <= num_states - [number] [EOL] assert np . max ( jac_indices [ : , [number] ] ) <= num_states - [number] [EOL] [EOL] [EOL] assert coop_ET_matrix . shape == ( num_states , num_coop_interactions ) [EOL] [comment] [EOL] assert np . allclose ( np . sum ( coop_ET_matrix , axis = [number] ) , [number] ) [EOL] [comment] [EOL] assert coop_ET_matrix . getnnz ( ) == [number] * num_coop_interactions [EOL] assert np . all ( [ col . getnnz ( ) == [number] for col in coop_ET_matrix . T ] ) [EOL] [EOL] assert coop_N_indices . shape == ( num_coop_interactions , [number] ) [EOL] if num_coop_interactions != [number] : [comment] [EOL] assert np . min ( coop_N_indices ) >= [number] [EOL] assert np . max ( coop_N_indices ) <= num_states - [number] [EOL] [EOL] assert coop_jac_indices . shape == ( [number] * num_coop_interactions , [number] ) [EOL] if num_coop_interactions != [number] : [comment] [EOL] assert np . min ( coop_jac_indices ) >= [number] [EOL] [comment] [EOL] assert np . max ( coop_jac_indices [ : , [number] ] ) <= num_coop_interactions - [number] [EOL] [comment] [EOL] assert np . max ( coop_jac_indices [ : , [number] ] ) <= num_states - [number] [EOL] assert np . max ( coop_jac_indices [ : , [number] ] ) <= num_states - [number] [EOL] assert np . max ( coop_jac_indices [ : , [number] ] ) <= num_states - [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( - [number] , [number] , [number] , [number] , [number] ) , ( [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) ] , ids = idfn ) def test_random_wrong_lattice ( setup_cte , params , absorption , problem ) : [EOL] cte = setup_cte [EOL] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] cte [ [string] ] [ [string] ] = params [ [number] ] [EOL] [EOL] setup_func = precalculate . setup_microscopic_eqs [EOL] if problem == [string] : [EOL] setup_func = precalculate . setup_average_eqs [EOL] [EOL] if absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] elif absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] elif absorption == [string] : [comment] [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = False [EOL] cte [ [string] ] [ [string] ] [ [number] ] . active = True [EOL] [EOL] with pytest . raises ( lattice . LatticeError ) : [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( cte , initial_population , index_S_i , index_A_j , absorption_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = setup_func ( setup_cte , full_path = temp_filename ) [EOL] [EOL] def test_get_lifetimes ( setup_cte ) : [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( cte , full_path = temp_filename ) [EOL] [EOL] tau_list = precalculate . get_lifetimes ( cte ) [EOL] [EOL] assert len ( tau_list ) == ( cte [ [string] ] [ [string] ] + cte [ [string] ] [ [string] ] - [number] ) [EOL] [EOL] def test_wrong_number_states ( setup_cte ) : [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( cte , full_path = temp_filename ) [EOL] [EOL] [comment] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( cte , full_path = temp_filename ) [EOL] [EOL] [EOL] def test_radius ( setup_cte , mocker ) : [EOL] [EOL] cte = setup_cte [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] cte [ [string] ] [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] mocker . patch ( [string] ) [EOL] [EOL] with temp_bin_filename ( ) as temp_filename : [EOL] ( cte , initial_population , index_S_i , index_A_j , total_abs_matrix , decay_matrix , ET_matrix , N_indices , jac_indices , coop_ET_matrix , coop_N_indices , coop_jac_indices ) = precalculate . setup_microscopic_eqs ( cte , full_path = temp_filename ) [EOL] [EOL] assert cte [ [string] ] [ [string] ] == [number]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.strbuiltins.strbuiltins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str