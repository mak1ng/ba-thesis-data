from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] import setuptools [EOL] [EOL] with open ( [string] , [string] ) as fh : [EOL] long_description = fh . read ( ) [EOL] [EOL] [comment] [EOL] package_resources = [ [string] ] [EOL] [EOL] [comment] [EOL] for name in os . listdir ( [string] ) : [EOL] package_resources . append ( os . path . join ( [string] , name ) ) [EOL] [EOL] setuptools . setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = [string] , long_description = long_description , long_description_content_type = [string] , license = [string] , install_requires = [ [string] , [string] , [string] , [string] , [string] ] , python_requires = [string] , url = [string] , packages = [ [string] , [string] , [string] ] , include_package_data = True , classifiers = ( [string] , [string] , [string] , [string] , [string] , [string] , ) , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Any , Union [EOL] import typing [EOL] import securedrop_client [EOL] import builtins [EOL] import PyQt5 [EOL] [docstring] [EOL] from typing import Union [EOL] [EOL] from PyQt5 . QtCore import QSize , Qt [EOL] from PyQt5 . QtWidgets import QHBoxLayout , QLabel , QPushButton , QWidget [EOL] [EOL] from securedrop_client . resources import load_icon , load_svg [EOL] [EOL] [EOL] class SvgToggleButton ( QPushButton ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , on , off , svg_size = None ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] [comment] [EOL] layout = QHBoxLayout ( self ) [EOL] self . setLayout ( layout ) [EOL] [EOL] [comment] [EOL] layout . setContentsMargins ( [number] , [number] , [number] , [number] ) [EOL] layout . setSpacing ( [number] ) [EOL] [EOL] [comment] [EOL] self . icon = load_icon ( normal = on , normal_off = off ) [EOL] self . setIcon ( self . icon ) [EOL] self . setIconSize ( svg_size ) if svg_size else self . setIconSize ( QSize ( ) ) [EOL] [EOL] [comment] [EOL] self . setCheckable ( True ) [EOL] [EOL] def set_icon ( self , on , off ) : [EOL] self . icon = load_icon ( normal = on , normal_off = off ) [EOL] self . setIcon ( self . icon ) [EOL] [EOL] [EOL] class SvgPushButton ( QPushButton ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , normal , disabled = None , active = None , selected = None , svg_size = None , ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] [comment] [EOL] layout = QHBoxLayout ( self ) [EOL] self . setLayout ( layout ) [EOL] [EOL] [comment] [EOL] layout . setContentsMargins ( [number] , [number] , [number] , [number] ) [EOL] layout . setSpacing ( [number] ) [EOL] [EOL] [comment] [EOL] self . icon = load_icon ( normal = normal , disabled = disabled , active = active , selected = selected , disabled_off = disabled , ) [EOL] self . setIcon ( self . icon ) [EOL] self . setIconSize ( svg_size ) if svg_size else self . setIconSize ( QSize ( ) ) [EOL] [EOL] [EOL] class SvgLabel ( QLabel ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , filename , svg_size = None ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] [comment] [EOL] layout = QHBoxLayout ( self ) [EOL] layout . setContentsMargins ( [number] , [number] , [number] , [number] ) [EOL] layout . setSpacing ( [number] ) [EOL] self . setLayout ( layout ) [EOL] [EOL] [comment] [EOL] self . svg = load_svg ( filename ) [EOL] self . svg . setFixedSize ( svg_size ) if svg_size else self . svg . setFixedSize ( QSize ( ) ) [EOL] layout . addWidget ( self . svg ) [EOL] [EOL] def update_image ( self , filename , svg_size = None ) : [EOL] self . svg = load_svg ( filename ) [EOL] self . svg . setFixedSize ( svg_size ) if svg_size else self . svg . setFixedSize ( QSize ( ) ) [EOL] child = self . layout ( ) . takeAt ( [number] ) [EOL] if child and child . widget ( ) : [EOL] child . widget ( ) . deleteLater ( ) [EOL] self . layout ( ) . addWidget ( self . svg ) [EOL] [EOL] [EOL] class SecureQLabel ( QLabel ) : [EOL] def __init__ ( self , text = [string] , parent = None , flags = Qt . WindowFlags ( ) , wordwrap = True , max_length = [number] , with_tooltip = False , ) : [EOL] super ( ) . __init__ ( parent , flags ) [EOL] self . wordwrap = wordwrap [EOL] self . max_length = max_length [EOL] self . setWordWrap ( wordwrap ) [comment] [EOL] self . with_tooltip = with_tooltip [EOL] self . setText ( text ) [EOL] self . elided = True if self . text ( ) != text else False [EOL] [EOL] def setText ( self , text ) : [EOL] text = text . strip ( ) [EOL] self . setTextFormat ( Qt . PlainText ) [EOL] elided_text = self . get_elided_text ( text ) [EOL] self . elided = True if elided_text != text else False [EOL] if self . elided and self . with_tooltip : [EOL] tooltip_label = SecureQLabel ( text ) [EOL] self . setToolTip ( tooltip_label . text ( ) ) [EOL] super ( ) . setText ( elided_text ) [EOL] [EOL] def get_elided_text ( self , full_text ) : [EOL] if not self . max_length : [EOL] return full_text [EOL] [EOL] [comment] [EOL] if [string] in full_text : [EOL] full_text = full_text . split ( [string] , [number] ) [ [number] ] [EOL] [EOL] fm = self . fontMetrics ( ) [EOL] filename_width = fm . horizontalAdvance ( full_text ) [EOL] if filename_width > self . max_length : [EOL] elided_text = [string] [EOL] for c in full_text : [EOL] if fm . horizontalAdvance ( elided_text ) > self . max_length : [EOL] elided_text = elided_text [ : - [number] ] + [string] [EOL] return elided_text [EOL] elided_text = elided_text + c [EOL] [EOL] return full_text [EOL] [EOL] def is_elided ( self ) : [EOL] return self . elided [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $PyQt5.QtWidgets.QWidget$ 0 0 0 $typing.Union[PyQt5.QtCore.Qt.WindowFlags,PyQt5.QtCore.Qt.WindowType]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QWidget$ 0 $typing.Union[PyQt5.QtCore.Qt.WindowFlags,PyQt5.QtCore.Qt.WindowType]$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $securedrop_client.gui.SecureQLabel$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $securedrop_client.gui.SecureQLabel$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import PyQt5 [EOL] [docstring] [EOL] import os [EOL] [EOL] from pkg_resources import resource_filename , resource_string [EOL] from PyQt5 . QtCore import QDir [EOL] from PyQt5 . QtGui import QFontDatabase , QIcon , QMovie , QPixmap [EOL] from PyQt5 . QtSvg import QSvgWidget [EOL] [EOL] [comment] [EOL] QDir . addSearchPath ( [string] , resource_filename ( __name__ , [string] ) ) [EOL] QDir . addSearchPath ( [string] , resource_filename ( __name__ , [string] ) ) [EOL] [EOL] [EOL] def path ( name , resource_dir = [string] ) : [EOL] [docstring] [EOL] return resource_filename ( __name__ , resource_dir + name ) [EOL] [EOL] [EOL] def load_font ( font_folder_name ) : [EOL] directory = resource_filename ( __name__ , [string] ) + font_folder_name [EOL] for filename in os . listdir ( directory ) : [EOL] if filename . endswith ( [string] ) : [EOL] QFontDatabase . addApplicationFont ( directory + [string] + filename ) [EOL] [EOL] [EOL] def load_icon ( normal , disabled = None , active = None , selected = None , normal_off = None , disabled_off = None , active_off = None , selected_off = None , ) : [EOL] [docstring] [EOL] [EOL] icon = QIcon ( ) [EOL] [EOL] icon . addFile ( path ( normal ) , mode = QIcon . Normal , state = QIcon . On ) [EOL] [EOL] if disabled : [EOL] icon . addFile ( path ( disabled ) , mode = QIcon . Disabled , state = QIcon . On ) [EOL] [EOL] if active : [EOL] icon . addFile ( path ( active ) , mode = QIcon . Active , state = QIcon . On ) [EOL] [EOL] if selected : [EOL] icon . addFile ( path ( selected ) , mode = QIcon . Selected , state = QIcon . On ) [EOL] [EOL] if normal_off : [EOL] icon . addFile ( path ( normal_off ) , mode = QIcon . Normal , state = QIcon . Off ) [EOL] [EOL] if disabled_off : [EOL] icon . addFile ( path ( disabled_off ) , mode = QIcon . Disabled , state = QIcon . Off ) [EOL] [EOL] if active_off : [EOL] icon . addFile ( path ( active_off ) , mode = QIcon . Active , state = QIcon . Off ) [EOL] [EOL] if selected_off : [EOL] icon . addFile ( path ( selected_off ) , mode = QIcon . Selected , state = QIcon . Off ) [EOL] [EOL] return icon [EOL] [EOL] [EOL] def load_svg ( name ) : [EOL] [docstring] [EOL] return QSvgWidget ( path ( name ) ) [EOL] [EOL] [EOL] def load_image ( name ) : [EOL] [docstring] [EOL] return QPixmap ( path ( name ) ) [EOL] [EOL] [EOL] def load_css ( name ) : [EOL] [docstring] [EOL] return resource_string ( __name__ , [string] + name ) . decode ( [string] ) [EOL] [EOL] [EOL] def load_movie ( name ) : [EOL] [docstring] [EOL] return QMovie ( path ( name ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtGui.QIcon$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtSvg.QSvgWidget$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtGui.QPixmap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtGui.QMovie$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] conn = op . get_bind ( ) [EOL] [EOL] op . rename_table ( [string] , [string] ) [EOL] [EOL] conn . execute ( [string] ) [EOL] [EOL] conn . execute ( [string] ) [EOL] [EOL] op . drop_table ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . VARCHAR ( length = [number] ) , server_default = sa . text ( [string] ) , nullable = False , ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . String ( length = [number] ) , nullable = False , server_default = [string] ) , ) [EOL] [EOL] conn = op . get_bind ( ) [EOL] conn . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] with op . batch_alter_table ( [string] , schema = None ) as batch_op : [EOL] batch_op . drop_column ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] from securedrop_client import db [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] CREATE_TABLE_FILES_NEW = [string] [EOL] [EOL] CREATE_TABLE_FILES_OLD = [string] [EOL] [EOL] [EOL] CREATE_TABLE_MESSAGES_NEW = [string] [EOL] [EOL] CREATE_TABLE_MESSAGES_OLD = [string] [EOL] [EOL] [EOL] CREATE_TABLE_REPLIES_NEW = [string] [EOL] [EOL] CREATE_TABLE_REPLIES_OLD = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [comment] [EOL] op . create_table ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . String ( length = [number] ) , nullable = False ) , sa . PrimaryKeyConstraint ( [string] , name = op . f ( [string] ) ) , sa . UniqueConstraint ( [string] , name = op . f ( [string] ) ) , ) [EOL] [EOL] conn = op . get_bind ( ) [EOL] for name , member in db . DownloadErrorCodes . __members__ . items ( ) : [EOL] conn . execute ( [string] , name ) [EOL] [EOL] op . rename_table ( [string] , [string] ) [EOL] op . rename_table ( [string] , [string] ) [EOL] op . rename_table ( [string] , [string] ) [EOL] [EOL] conn . execute ( CREATE_TABLE_FILES_NEW ) [EOL] conn . execute ( CREATE_TABLE_MESSAGES_NEW ) [EOL] conn . execute ( CREATE_TABLE_REPLIES_NEW ) [EOL] [EOL] conn . execute ( [string] ) [EOL] [EOL] conn . execute ( [string] ) [EOL] [EOL] conn . execute ( [string] ) [EOL] [EOL] [comment] [EOL] op . drop_table ( [string] ) [EOL] op . drop_table ( [string] ) [EOL] op . drop_table ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [EOL] conn = op . get_bind ( ) [EOL] [EOL] op . rename_table ( [string] , [string] ) [EOL] op . rename_table ( [string] , [string] ) [EOL] op . rename_table ( [string] , [string] ) [EOL] [EOL] conn . execute ( CREATE_TABLE_FILES_OLD ) [EOL] conn . execute ( CREATE_TABLE_MESSAGES_OLD ) [EOL] conn . execute ( CREATE_TABLE_REPLIES_OLD ) [EOL] [EOL] conn . execute ( [string] ) [EOL] conn . execute ( [string] ) [EOL] conn . execute ( [string] ) [EOL] [EOL] [comment] [EOL] op . drop_table ( [string] ) [EOL] op . drop_table ( [string] ) [EOL] op . drop_table ( [string] ) [EOL] [EOL] [comment] [EOL] op . drop_table ( [string] ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from PyQt5 . QtGui import QIcon , QMovie , QPixmap [EOL] from PyQt5 . QtSvg import QSvgWidget [EOL] from PyQt5 . QtWidgets import QApplication [EOL] [EOL] import securedrop_client . resources [EOL] [EOL] app = QApplication ( [ ] ) [EOL] [EOL] [EOL] def test_path ( mocker ) : [EOL] [docstring] [EOL] r = mocker . patch ( [string] , return_value = [string] ) [EOL] assert securedrop_client . resources . path ( [string] ) == [string] [EOL] r . assert_called_once_with ( securedrop_client . resources . __name__ , [string] ) [EOL] [EOL] [EOL] def test_load_icon ( ) : [EOL] [docstring] [EOL] result = securedrop_client . resources . load_icon ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] assert isinstance ( result , QIcon ) [EOL] [EOL] [EOL] def test_load_svg ( ) : [EOL] [docstring] [EOL] result = securedrop_client . resources . load_svg ( [string] ) [EOL] assert isinstance ( result , QSvgWidget ) [EOL] [EOL] [EOL] def test_load_image ( ) : [EOL] [docstring] [EOL] result = securedrop_client . resources . load_image ( [string] ) [EOL] assert isinstance ( result , QPixmap ) [EOL] [EOL] [EOL] def test_load_css ( mocker ) : [EOL] [docstring] [EOL] rs = mocker . patch ( [string] , return_value = [string] ) [EOL] assert [string] == securedrop_client . resources . load_css ( [string] ) [EOL] rs . assert_called_once_with ( securedrop_client . resources . __name__ , [string] ) [EOL] [EOL] [EOL] def test_load_movie ( ) : [EOL] [docstring] [EOL] result = securedrop_client . resources . load_movie ( [string] ) [EOL] assert isinstance ( result , QMovie ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import securedrop_client [EOL] import os [EOL] [EOL] from securedrop_client . config import Config [EOL] [EOL] [EOL] def test_missing_file ( homedir ) : [EOL] [docstring] [EOL] [comment] [EOL] assert not os . path . exists ( os . path . join ( homedir , Config . CONFIG_NAME ) ) [EOL] [EOL] config = Config . from_home_dir ( homedir ) [EOL] [EOL] assert config . journalist_key_fingerprint is None [EOL] assert config . is_valid is False [EOL] [EOL] [EOL] def test_missing_journalist_key_fpr ( homedir ) : [EOL] [docstring] [EOL] config_path = os . path . join ( homedir , Config . CONFIG_NAME ) [EOL] with open ( config_path , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] config = Config . from_home_dir ( homedir ) [EOL] [EOL] assert config . journalist_key_fingerprint is None [EOL] assert config . is_valid is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import securedrop_client [EOL] [docstring] [EOL] from PyQt5 . QtCore import QSize , Qt [EOL] from PyQt5 . QtWidgets import QApplication [EOL] [EOL] from securedrop_client . gui import SecureQLabel , SvgLabel , SvgPushButton , SvgToggleButton [EOL] [EOL] app = QApplication ( [ ] ) [EOL] [EOL] [EOL] def test_SvgToggleButton_init ( mocker ) : [EOL] [docstring] [EOL] svg_size = QSize ( [number] , [number] ) [EOL] icon = mocker . MagicMock ( ) [EOL] load_icon_fn = mocker . patch ( [string] , return_value = icon ) [EOL] setIcon_fn = mocker . patch ( [string] ) [EOL] setIconSize_fn = mocker . patch ( [string] ) [EOL] [EOL] stb = SvgToggleButton ( on = [string] , off = [string] , svg_size = svg_size ) [EOL] [EOL] assert stb . isCheckable ( ) is True [EOL] load_icon_fn . assert_called_once_with ( normal = [string] , normal_off = [string] ) [EOL] setIcon_fn . assert_called_once_with ( icon ) [EOL] setIconSize_fn . assert_called_once_with ( svg_size ) [EOL] [EOL] [EOL] def test_SvgToggleButton_toggle ( mocker ) : [EOL] [docstring] [EOL] stb = SvgToggleButton ( on = [string] , off = [string] ) [EOL] stb . toggle ( ) [EOL] assert stb . isChecked ( ) is True [EOL] stb . toggle ( ) [EOL] assert stb . isChecked ( ) is False [EOL] stb . toggle ( ) [EOL] assert stb . isChecked ( ) is True [EOL] [EOL] [EOL] def test_SvgToggleButton_set_icon ( mocker ) : [EOL] [docstring] [EOL] setIcon_fn = mocker . patch ( [string] ) [EOL] icon = mocker . MagicMock ( ) [EOL] load_icon_fn = mocker . patch ( [string] , return_value = icon ) [EOL] stb = SvgToggleButton ( on = [string] , off = [string] ) [EOL] [EOL] stb . set_icon ( on = [string] , off = [string] ) [EOL] [EOL] load_icon_fn . assert_called_with ( normal = [string] , normal_off = [string] ) [EOL] setIcon_fn . assert_called_with ( icon ) [EOL] assert stb . icon == icon [EOL] [EOL] [EOL] def test_SvgPushButton_init ( mocker ) : [EOL] [docstring] [EOL] svg_size = QSize ( [number] , [number] ) [EOL] icon = mocker . MagicMock ( ) [EOL] load_icon_fn = mocker . patch ( [string] , return_value = icon ) [EOL] setIcon_fn = mocker . patch ( [string] ) [EOL] setIconSize_fn = mocker . patch ( [string] ) [EOL] [EOL] spb = SvgPushButton ( normal = [string] , disabled = [string] , active = [string] , selected = [string] , svg_size = svg_size ) [EOL] [EOL] assert spb . isCheckable ( ) is False [EOL] load_icon_fn . assert_called_once_with ( normal = [string] , disabled = [string] , active = [string] , selected = [string] , disabled_off = [string] ) [EOL] setIcon_fn . assert_called_once_with ( icon ) [EOL] setIconSize_fn . assert_called_once_with ( svg_size ) [EOL] [EOL] [EOL] def test_SvgLabel_init ( mocker ) : [EOL] [docstring] [EOL] svg_size = QSize ( [number] , [number] ) [EOL] svg = mocker . MagicMock ( ) [EOL] load_svg_fn = mocker . patch ( [string] , return_value = svg ) [EOL] mocker . patch ( [string] ) [EOL] [EOL] sl = SvgLabel ( filename = [string] , svg_size = svg_size ) [EOL] [EOL] load_svg_fn . assert_called_once_with ( [string] ) [EOL] sl . svg . setFixedSize . assert_called_once_with ( svg_size ) [EOL] assert sl . svg == svg [EOL] [EOL] [EOL] def test_SvgLabel_update ( mocker ) : [EOL] [docstring] [EOL] svg = mocker . MagicMock ( ) [EOL] load_svg_fn = mocker . patch ( [string] , return_value = svg ) [EOL] mocker . patch ( [string] ) [EOL] sl = SvgLabel ( filename = [string] , svg_size = QSize ( [number] , [number] ) ) [EOL] [EOL] sl . update_image ( filename = [string] , svg_size = QSize ( [number] , [number] ) ) [EOL] [EOL] assert sl . svg == svg [EOL] assert load_svg_fn . call_args_list [ [number] ] [ [number] ] [ [number] ] == [string] [EOL] assert load_svg_fn . call_args_list [ [number] ] [ [number] ] [ [number] ] == [string] [EOL] assert sl . svg . setFixedSize . call_args_list [ [number] ] [ [number] ] [ [number] ] == QSize ( [number] , [number] ) [EOL] assert sl . svg . setFixedSize . call_args_list [ [number] ] [ [number] ] [ [number] ] == QSize ( [number] , [number] ) [EOL] [EOL] [EOL] def test_SecureQLabel_init ( ) : [EOL] label_text = [string] [EOL] sl = SecureQLabel ( label_text ) [EOL] assert sl . text ( ) == label_text [EOL] [EOL] [EOL] def test_SecureQLabel_init_wordwrap ( mocker ) : [EOL] [docstring] [EOL] long_string = ( [string] [string] ) [EOL] sl = SecureQLabel ( long_string , wordwrap = False ) [EOL] assert sl . text ( ) == long_string [EOL] [EOL] [EOL] def test_SecureQLabel_init_no_wordwrap ( mocker ) : [EOL] long_string = ( [string] [string] ) [EOL] sl = SecureQLabel ( long_string , wordwrap = False ) [EOL] assert sl . text ( ) == long_string [EOL] [EOL] [EOL] def test_SecureQLabel_setText ( mocker ) : [EOL] sl = SecureQLabel ( [string] ) [EOL] assert sl . text ( ) == [string] [EOL] [EOL] label_text = [string] [EOL] sl . setTextFormat = mocker . MagicMock ( ) [EOL] sl . setText ( label_text ) [EOL] assert sl . text ( ) == label_text [EOL] [comment] [EOL] sl . setTextFormat . assert_called_once_with ( Qt . PlainText ) [EOL] [EOL] [EOL] def test_SecureQLabel_get_elided_text ( mocker ) : [EOL] [comment] [EOL] long_string = [string] [EOL] sl = SecureQLabel ( long_string , wordwrap = False , max_length = [number] ) [EOL] elided_text = sl . get_elided_text ( long_string ) [EOL] assert sl . text ( ) == elided_text [EOL] assert [string] in elided_text [EOL] [EOL] [EOL] def test_SecureQLabel_get_elided_text_short_string ( mocker ) : [EOL] [comment] [EOL] long_string = [string] [EOL] sl = SecureQLabel ( long_string , wordwrap = False , max_length = [number] ) [EOL] elided_text = sl . get_elided_text ( long_string ) [EOL] assert sl . text ( ) == elided_text [EOL] assert elided_text == [string] [EOL] [EOL] [EOL] def test_SecureQLabel_get_elided_text_only_returns_oneline ( mocker ) : [EOL] [comment] [EOL] string_with_newline = [string] [EOL] sl = SecureQLabel ( string_with_newline , wordwrap = False , max_length = [number] ) [EOL] elided_text = sl . get_elided_text ( string_with_newline ) [EOL] assert sl . text ( ) == elided_text [EOL] assert elided_text == [string] [EOL] [EOL] [EOL] def test_SecureQLabel_get_elided_text_only_returns_oneline_elided ( mocker ) : [EOL] [comment] [EOL] string_with_newline = [string] [EOL] sl = SecureQLabel ( string_with_newline , wordwrap = False , max_length = [number] ) [EOL] elided_text = sl . get_elided_text ( string_with_newline ) [EOL] assert sl . text ( ) == elided_text [EOL] assert [string] in elided_text [EOL] [EOL] [EOL] def test_SecureQLabel_quotes_not_escaped_for_readability ( ) : [EOL] sl = SecureQLabel ( [string] ) [EOL] assert sl . text ( ) == [string] [EOL] [EOL] [EOL] def test_SecureQLabel_trims_leading_and_trailing_whitespace ( ) : [EOL] string_with_whitespace = [string] [EOL] sl = SecureQLabel ( string_with_whitespace ) [EOL] assert sl . text ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtGui import QPalette [EOL] [EOL] [EOL] def test_styles ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] speech_bubble = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] [EOL] assert [number] == speech_bubble . color_bar . minimumSize ( ) . height ( ) [EOL] assert [number] == speech_bubble . color_bar . maximumSize ( ) . height ( ) [EOL] assert [string] == speech_bubble . color_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [EOL] speech_bubble . set_error ( [string] , speech_bubble . uuid , speech_bubble . message . text ( ) ) [EOL] [EOL] assert [number] == speech_bubble . color_bar . minimumSize ( ) . height ( ) [EOL] assert [number] == speech_bubble . color_bar . maximumSize ( ) . height ( ) [EOL] assert [string] == speech_bubble . color_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtGui import QPalette [EOL] [EOL] [EOL] def test_styles ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] reply_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] [EOL] assert [number] == reply_widget . color_bar . minimumSize ( ) . height ( ) [EOL] assert [number] == reply_widget . color_bar . maximumSize ( ) . height ( ) [EOL] assert [string] == reply_widget . color_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [EOL] reply_widget . _set_reply_state ( [string] ) [EOL] [EOL] assert [number] == reply_widget . color_bar . minimumSize ( ) . height ( ) [EOL] assert [number] == reply_widget . color_bar . maximumSize ( ) . height ( ) [EOL] assert [string] == reply_widget . color_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [EOL] reply_widget . _set_reply_state ( [string] ) [EOL] [EOL] assert [number] == reply_widget . color_bar . minimumSize ( ) . height ( ) [EOL] assert [number] == reply_widget . color_bar . maximumSize ( ) . height ( ) [EOL] assert [string] == reply_widget . color_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtGui import QFont , QPalette [EOL] [EOL] [EOL] def test_styles ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] reply_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] [EOL] assert [string] == reply_widget . message . font ( ) . family ( ) [EOL] assert QFont . Normal == reply_widget . message . font ( ) . weight ( ) [EOL] assert [number] == reply_widget . message . font ( ) . pixelSize ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] reply_widget . _set_reply_state ( [string] ) [EOL] [EOL] assert [string] == reply_widget . message . font ( ) . family ( ) [EOL] assert QFont . Normal == reply_widget . message . font ( ) . weight ( ) [EOL] assert [number] == reply_widget . message . font ( ) . pixelSize ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] reply_widget . _set_reply_state ( [string] ) [EOL] [EOL] assert [string] == reply_widget . message . font ( ) . family ( ) [EOL] assert QFont . Normal == reply_widget . message . font ( ) . weight ( ) [EOL] assert [number] == reply_widget . message . font ( ) . pixelSize ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == reply_widget . message . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyQt5 . QtGui import QPalette [EOL] [EOL] [EOL] def test_styles ( modal_dialog ) : [EOL] error_details = modal_dialog . error_details [EOL] [EOL] assert ( [number] , [number] , [number] , [number] ) == error_details . getContentsMargins ( ) [EOL] assert [string] == error_details . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == error_details . font ( ) . family ( ) [EOL] assert [number] == error_details . font ( ) . pixelSize ( ) [EOL] [EOL] modal_dialog . start_animate_activestate ( ) [EOL] [EOL] assert ( [number] , [number] , [number] , [number] ) == error_details . getContentsMargins ( ) [EOL] assert [string] == error_details . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == error_details . font ( ) . family ( ) [EOL] assert [number] == error_details . font ( ) . pixelSize ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtGui import QFont , QPalette [EOL] [EOL] [EOL] def test_styles ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] speech_bubble = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] [EOL] assert [number] == speech_bubble . speech_bubble . minimumSize ( ) . width ( ) [EOL] assert [number] == speech_bubble . speech_bubble . maximumSize ( ) . width ( ) [EOL] assert [string] == speech_bubble . message . font ( ) . family ( ) [EOL] assert QFont . Normal == speech_bubble . message . font ( ) . weight ( ) [EOL] assert [number] == speech_bubble . message . font ( ) . pixelSize ( ) [EOL] assert [string] == speech_bubble . message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == speech_bubble . message . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] speech_bubble . set_error ( [string] , speech_bubble . uuid , speech_bubble . message . text ( ) ) [EOL] [EOL] assert [number] == speech_bubble . speech_bubble . minimumSize ( ) . width ( ) [EOL] assert [number] == speech_bubble . speech_bubble . maximumSize ( ) . width ( ) [EOL] assert [string] == speech_bubble . message . font ( ) . family ( ) [EOL] assert QFont . Normal == speech_bubble . message . font ( ) . weight ( ) [EOL] assert [number] == speech_bubble . message . font ( ) . pixelSize ( ) [EOL] assert [string] == speech_bubble . message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert speech_bubble . message . font ( ) . italic ( ) [EOL] assert [number] == round ( [number] * [number] ) [comment] [EOL] assert [number] == speech_bubble . message . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == speech_bubble . message . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == speech_bubble . message . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == speech_bubble . message . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyQt5 . QtGui import QPalette [EOL] [EOL] [EOL] def test_styles ( modal_dialog ) : [EOL] continue_button = modal_dialog . continue_button [EOL] [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] continue_button . setEnabled ( False ) [EOL] [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] modal_dialog . start_animate_activestate ( ) [EOL] [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == continue_button . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtGui import QFont , QPalette [EOL] [EOL] [EOL] def test_styles_for_placeholder ( main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] reply_box = wrapper . reply_box [EOL] reply_text_edit = reply_box . text_edit [EOL] [EOL] sign_in = reply_text_edit . placeholder . signed_out . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == sign_in . font ( ) . family ( ) [EOL] assert QFont . Bold == sign_in . font ( ) . weight ( ) [EOL] assert [number] == sign_in . font ( ) . pixelSize ( ) [EOL] assert [string] == sign_in . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] to_compose_reply = reply_text_edit . placeholder . signed_out . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == to_compose_reply . font ( ) . family ( ) [EOL] assert QFont . Normal == to_compose_reply . font ( ) . weight ( ) [EOL] assert [number] == to_compose_reply . font ( ) . pixelSize ( ) [EOL] assert [string] == to_compose_reply . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] reply_box . set_logged_in ( ) [EOL] [EOL] compose_a_reply_to = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == compose_a_reply_to . font ( ) . family ( ) [EOL] assert QFont . Normal == compose_a_reply_to . font ( ) . weight ( ) [EOL] assert [number] == compose_a_reply_to . font ( ) . pixelSize ( ) [EOL] assert [string] == compose_a_reply_to . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] source_name = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == source_name . font ( ) . family ( ) [EOL] assert QFont . Bold == source_name . font ( ) . weight ( ) [EOL] assert [number] == source_name . font ( ) . pixelSize ( ) [EOL] assert [string] == source_name . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] [EOL] def test_styles_for_placeholder_no_key ( main_window_no_key ) : [EOL] wrapper = main_window_no_key . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] reply_box = wrapper . reply_box [EOL] reply_text_edit = reply_box . text_edit [EOL] [EOL] reply_box . set_logged_in ( ) [EOL] [EOL] awaiting_key = reply_text_edit . placeholder . signed_in_no_key . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == awaiting_key . font ( ) . family ( ) [EOL] assert QFont . Bold == awaiting_key . font ( ) . weight ( ) [EOL] assert [number] == awaiting_key . font ( ) . pixelSize ( ) [EOL] assert [string] == awaiting_key . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] from_server = reply_text_edit . placeholder . signed_in_no_key . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == from_server . font ( ) . family ( ) [EOL] assert QFont . Normal == from_server . font ( ) . weight ( ) [EOL] assert [number] == from_server . font ( ) . pixelSize ( ) [EOL] assert [string] == from_server . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import math [EOL] [EOL] from PyQt5 . QtCore import QEvent [EOL] from PyQt5 . QtGui import QFont , QPalette [EOL] from PyQt5 . QtWidgets import QLabel , QLineEdit , QPushButton , QWidget [EOL] [EOL] [EOL] def test_css ( main_window ) : [EOL] assert [string] in main_window . styleSheet ( ) [EOL] [EOL] [EOL] def test_class_name_matches_css_object_name ( mocker , main_window ) : [EOL] [comment] [EOL] login_dialog = main_window . login_dialog [EOL] assert [string] == login_dialog . __class__ . __name__ [EOL] form = login_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in form . objectName ( ) [EOL] app_version_label = login_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in app_version_label . objectName ( ) [EOL] login_offline_link = login_dialog . offline_mode [EOL] assert [string] == login_offline_link . __class__ . __name__ [EOL] assert [string] == login_offline_link . objectName ( ) [EOL] login_button = login_dialog . submit [EOL] assert [string] == login_button . __class__ . __name__ [EOL] assert [string] in login_button . objectName ( ) [EOL] login_error_bar = login_dialog . error_bar [EOL] assert [string] == login_error_bar . __class__ . __name__ [EOL] assert [string] in login_error_bar . objectName ( ) [EOL] assert [string] in login_error_bar . error_icon . objectName ( ) [EOL] assert [string] in login_error_bar . error_status_bar . objectName ( ) [EOL] [EOL] [comment] [EOL] sync_icon = main_window . top_pane . sync_icon [EOL] assert [string] == sync_icon . __class__ . __name__ [EOL] assert [string] == sync_icon . objectName ( ) [EOL] activity_status_bar = main_window . top_pane . activity_status_bar [EOL] assert [string] == activity_status_bar . __class__ . __name__ [EOL] assert [string] == activity_status_bar . objectName ( ) [EOL] error_status_bar = main_window . top_pane . error_status_bar [EOL] assert [string] == error_status_bar . __class__ . __name__ [EOL] assert [string] in error_status_bar . vertical_bar . objectName ( ) [EOL] assert [string] in error_status_bar . label . objectName ( ) [EOL] assert [string] in error_status_bar . status_bar . objectName ( ) [EOL] [EOL] [comment] [EOL] user_profile = main_window . left_pane . user_profile [EOL] assert [string] == user_profile . __class__ . __name__ [EOL] assert [string] == user_profile . objectName ( ) [EOL] assert [string] in user_profile . user_icon . objectName ( ) [EOL] user_button = user_profile . user_button [EOL] assert [string] == user_button . __class__ . __name__ [EOL] assert [string] == user_button . objectName ( ) [EOL] login_button = user_profile . login_button [EOL] assert [string] == login_button . __class__ . __name__ [EOL] assert [string] == login_button . objectName ( ) [EOL] [EOL] [comment] [EOL] main_view = main_window . main_view [EOL] assert [string] == main_view . __class__ . __name__ [EOL] assert [string] == main_view . objectName ( ) [EOL] assert [string] in main_view . view_holder . objectName ( ) [EOL] empty_conversation_view = main_view . empty_conversation_view [EOL] [string] == empty_conversation_view . __class__ . __name__ [EOL] [string] == empty_conversation_view . objectName ( ) [EOL] [string] in empty_conversation_view . no_sources . objectName ( ) [EOL] [string] in empty_conversation_view . no_source_selected . objectName ( ) [EOL] source_list = main_view . source_list [EOL] [string] == source_list . __class__ . __name__ [EOL] [string] == source_list . objectName ( ) [EOL] [EOL] source_widget = source_list . itemWidget ( source_list . item ( [number] ) ) [EOL] assert [string] == source_widget . __class__ . __name__ [EOL] assert [string] in source_widget . gutter . objectName ( ) [EOL] assert [string] in source_widget . summary . objectName ( ) [EOL] assert [string] in source_widget . name . objectName ( ) [EOL] assert [string] in source_widget . preview . objectName ( ) [EOL] assert [string] in source_widget . waiting_delete_confirmation . objectName ( ) [EOL] assert [string] in source_widget . metadata . objectName ( ) [EOL] assert [string] in source_widget . paperclip . objectName ( ) [EOL] assert [string] in source_widget . timestamp . objectName ( ) [EOL] assert [string] in source_widget . source_widget . objectName ( ) [EOL] star = source_widget . star [EOL] assert [string] == star . __class__ . __name__ [EOL] assert [string] in star . objectName ( ) [EOL] [EOL] wrapper = main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == wrapper . __class__ . __name__ [EOL] assert [string] in wrapper . waiting_delete_confirmation . objectName ( ) [EOL] reply_box = wrapper . reply_box [EOL] assert [string] == reply_box . __class__ . __name__ [EOL] assert [string] == reply_box . objectName ( ) [EOL] horizontal_line = reply_box . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in horizontal_line . objectName ( ) [EOL] assert [string] in reply_box . replybox . objectName ( ) [EOL] reply_text_edit = reply_box . text_edit [EOL] assert [string] == reply_text_edit . __class__ . __name__ [EOL] assert [string] == reply_text_edit . objectName ( ) [EOL] compose_a_reply_to = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] source_name = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] sign_in = reply_text_edit . placeholder . signed_out . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] to_compose_reply = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] awaiting_key = reply_text_edit . placeholder . signed_out . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] from_server = reply_text_edit . placeholder . signed_in . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in compose_a_reply_to . objectName ( ) [EOL] assert [string] in source_name . objectName ( ) [EOL] assert [string] in sign_in . objectName ( ) [EOL] assert [string] in to_compose_reply . objectName ( ) [EOL] assert [string] in awaiting_key . objectName ( ) [EOL] assert [string] in from_server . objectName ( ) [EOL] conversation_title_bar = wrapper . conversation_title_bar [EOL] assert [string] == conversation_title_bar . __class__ . __name__ [EOL] horizontal_line = conversation_title_bar . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in horizontal_line . objectName ( ) [EOL] menu = conversation_title_bar . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in menu . objectName ( ) [EOL] last_updated_label = conversation_title_bar . updated [EOL] assert [string] in last_updated_label . objectName ( ) [EOL] title = conversation_title_bar . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in title . objectName ( ) [EOL] conversation_scroll_area = wrapper . conversation_view . scroll [EOL] assert [string] == conversation_scroll_area . __class__ . __name__ [EOL] assert [string] in conversation_scroll_area . widget ( ) . objectName ( ) [EOL] file_widget = conversation_scroll_area . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == file_widget . __class__ . __name__ [EOL] message_widget = conversation_scroll_area . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == message_widget . __class__ . __name__ [EOL] assert [string] in message_widget . speech_bubble . objectName ( ) [EOL] reply_widget = conversation_scroll_area . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == reply_widget . __class__ . __name__ [EOL] assert [string] in reply_widget . speech_bubble . objectName ( ) [EOL] error_message = reply_widget . error . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in error_message . objectName ( ) [EOL] [EOL] [EOL] def test_class_name_matches_css_object_name_for_print_dialog ( print_dialog ) : [EOL] assert [string] == print_dialog . __class__ . __name__ [EOL] [EOL] [EOL] def test_class_name_matches_css_object_name_for_export_dialog ( export_dialog ) : [EOL] assert [string] == export_dialog . __class__ . __name__ [EOL] assert [string] in export_dialog . passphrase_form . objectName ( ) [EOL] [EOL] [EOL] def test_class_name_matches_css_object_name_for_modal_dialog ( modal_dialog ) : [EOL] assert [string] in modal_dialog . header_icon . objectName ( ) [EOL] assert [string] in modal_dialog . header_spinner_label . objectName ( ) [EOL] assert [string] in modal_dialog . header . objectName ( ) [EOL] assert [string] in modal_dialog . header_line . objectName ( ) [EOL] assert [string] in modal_dialog . error_details . objectName ( ) [EOL] assert [string] in modal_dialog . body . objectName ( ) [EOL] assert [string] in modal_dialog . body . objectName ( ) [EOL] assert [string] in modal_dialog . continue_button . objectName ( ) [EOL] window_buttons = modal_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in window_buttons . objectName ( ) [EOL] button_box = window_buttons . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] in button_box . objectName ( ) [EOL] [EOL] [EOL] def test_styles_for_login_dialog ( mocker , main_window ) : [EOL] login_dialog = main_window . login_dialog [EOL] form = login_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] form_children_qlabel = form . findChildren ( QLabel ) [EOL] for c in form_children_qlabel : [EOL] assert [string] == c . font ( ) . family ( ) [EOL] [comment] [EOL] assert QFont . DemiBold - [number] == c . font ( ) . weight ( ) [EOL] assert [number] == c . font ( ) . pixelSize ( ) [EOL] assert [string] == c . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] form_children_qlineedit = form . findChildren ( QLineEdit ) [EOL] for c in form_children_qlineedit : [EOL] assert [number] == c . height ( ) [comment] [EOL] assert ( [number] , [number] , [number] , [number] ) == c . getContentsMargins ( ) [EOL] [comment] [EOL] [comment] [EOL] app_version_label = login_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == app_version_label . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] login_offline_link = login_dialog . offline_mode [EOL] assert [string] == login_offline_link . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] login_button = login_dialog . submit [EOL] [comment] [EOL] assert [string] == login_button . font ( ) . family ( ) [EOL] assert QFont . Bold == login_button . font ( ) . weight ( ) [EOL] assert [number] == login_button . font ( ) . pixelSize ( ) [EOL] assert [string] == login_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == login_button . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [EOL] login_error_bar = login_dialog . error_bar [EOL] login_error_bar_children = login_error_bar . findChildren ( QWidget ) [EOL] for c in login_error_bar_children : [EOL] assert [string] == c . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] assert [string] == login_error_bar . error_icon . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [string] == login_error_bar . error_status_bar . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] [EOL] def test_styles_for_top_pane ( mocker , main_window ) : [EOL] sync_icon = main_window . top_pane . sync_icon [EOL] assert [string] == sync_icon . palette ( ) . color ( QPalette . Base ) . name ( ) [EOL] [comment] [EOL] activity_status_bar = main_window . top_pane . activity_status_bar [EOL] assert [string] == activity_status_bar . font ( ) . family ( ) [EOL] assert QFont . Bold == activity_status_bar . font ( ) . weight ( ) [EOL] assert [number] == activity_status_bar . font ( ) . pixelSize ( ) [EOL] assert [string] == activity_status_bar . palette ( ) . color ( QPalette . Base ) . name ( ) [EOL] assert [string] == activity_status_bar . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] error_status_bar = main_window . top_pane . error_status_bar [EOL] assert [string] == error_status_bar . vertical_bar . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] assert [string] == error_status_bar . status_bar . font ( ) . family ( ) [EOL] assert QFont . Normal == error_status_bar . status_bar . font ( ) . weight ( ) [EOL] assert [number] == error_status_bar . status_bar . font ( ) . pixelSize ( ) [EOL] assert [string] == error_status_bar . status_bar . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] [EOL] def test_styles_for_left_pane ( mocker , main_window ) : [EOL] user_profile = main_window . left_pane . user_profile [EOL] [comment] [EOL] assert [string] == user_profile . user_icon . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [string] == user_profile . user_icon . font ( ) . family ( ) [EOL] assert QFont . Bold == user_profile . user_icon . font ( ) . weight ( ) [EOL] assert [number] == user_profile . user_icon . font ( ) . pixelSize ( ) [EOL] assert [string] == user_profile . user_icon . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] user_button = user_profile . user_button [EOL] [comment] [EOL] assert [string] == user_button . font ( ) . family ( ) [EOL] assert QFont . Black == user_button . font ( ) . weight ( ) [EOL] assert [number] == user_button . font ( ) . pixelSize ( ) [EOL] assert [string] == user_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] login_button = user_profile . login_button [EOL] [comment] [EOL] assert [string] == login_button . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] assert [string] == login_button . font ( ) . family ( ) [EOL] assert QFont . Bold == login_button . font ( ) . weight ( ) [EOL] assert [number] == login_button . font ( ) . pixelSize ( ) [EOL] assert [string] == login_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [EOL] [EOL] def test_styles_for_main_view ( mocker , main_window ) : [EOL] main_view = main_window . main_view [EOL] assert [number] == main_view . height ( ) [EOL] assert [number] == main_view . view_holder . width ( ) [EOL] [comment] [EOL] assert [string] == main_view . view_holder . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [EOL] no_sources = main_view . empty_conversation_view . no_sources [EOL] assert [number] == no_sources . layout ( ) . count ( ) [EOL] no_sources_instructions = no_sources . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == no_sources_instructions . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == no_sources_instructions . font ( ) . weight ( ) [EOL] assert [number] == no_sources_instructions . font ( ) . pixelSize ( ) [EOL] assert [string] == no_sources_instructions . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [number] == no_sources_instructions . maximumWidth ( ) [EOL] no_sources_spacer1 = no_sources . layout ( ) . itemAt ( [number] ) [EOL] assert [number] == no_sources_spacer1 . minimumSize ( ) . height ( ) [EOL] assert [number] == no_sources_spacer1 . maximumSize ( ) . height ( ) [EOL] no_sources_instruction_details1 = no_sources . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == no_sources_instruction_details1 . font ( ) . family ( ) [EOL] assert QFont . Normal == no_sources_instruction_details1 . font ( ) . weight ( ) [EOL] assert [number] == no_sources_instruction_details1 . font ( ) . pixelSize ( ) [EOL] assert [string] == no_sources_instruction_details1 . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] no_sources_spacer2 = no_sources . layout ( ) . itemAt ( [number] ) [EOL] assert [number] == no_sources_spacer2 . minimumSize ( ) . height ( ) [EOL] assert [number] == no_sources_spacer2 . maximumSize ( ) . height ( ) [EOL] no_sources_instruction_details2 = no_sources . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == no_sources_instruction_details2 . font ( ) . family ( ) [EOL] assert QFont . Normal == no_sources_instruction_details2 . font ( ) . weight ( ) [EOL] assert [number] == no_sources_instruction_details2 . font ( ) . pixelSize ( ) [EOL] assert [string] == no_sources_instruction_details2 . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] no_source_selected = main_view . empty_conversation_view . no_source_selected [EOL] assert [number] == no_source_selected . layout ( ) . count ( ) [EOL] no_source_selected_instructions = no_source_selected . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == no_source_selected_instructions . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == no_source_selected_instructions . font ( ) . weight ( ) [EOL] assert [number] == no_source_selected_instructions . font ( ) . pixelSize ( ) [EOL] assert [string] == no_source_selected_instructions . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert [number] == no_source_selected_instructions . maximumWidth ( ) [EOL] no_source_selected_spacer1 = no_source_selected . layout ( ) . itemAt ( [number] ) [EOL] assert [number] == no_source_selected_spacer1 . minimumSize ( ) . height ( ) [EOL] assert [number] == no_source_selected_spacer1 . maximumSize ( ) . height ( ) [EOL] bullet1_bullet = no_source_selected . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == bullet1_bullet . getContentsMargins ( ) [EOL] [number] == bullet1_bullet . font ( ) . pixelSize ( ) [EOL] QFont . Bold == bullet1_bullet . font ( ) . weight ( ) [EOL] assert [string] == bullet1_bullet . font ( ) . family ( ) [EOL] assert [string] == bullet1_bullet . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] bullet2_bullet = no_source_selected . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == bullet2_bullet . getContentsMargins ( ) [EOL] [number] == bullet2_bullet . font ( ) . pixelSize ( ) [EOL] QFont . Bold == bullet2_bullet . font ( ) . weight ( ) [EOL] assert [string] == bullet2_bullet . font ( ) . family ( ) [EOL] assert [string] == bullet2_bullet . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] bullet3_bullet = no_source_selected . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == bullet3_bullet . getContentsMargins ( ) [EOL] [number] == bullet3_bullet . font ( ) . pixelSize ( ) [EOL] QFont . Bold == bullet3_bullet . font ( ) . weight ( ) [EOL] assert [string] == bullet3_bullet . font ( ) . family ( ) [EOL] assert [string] == bullet3_bullet . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] no_source_selected_spacer2 = no_source_selected . layout ( ) . itemAt ( [number] ) [EOL] assert ( [number] * [number] ) == no_source_selected_spacer2 . minimumSize ( ) . height ( ) [EOL] assert ( [number] * [number] ) == no_source_selected_spacer2 . maximumSize ( ) . height ( ) [EOL] [EOL] [EOL] def test_styles_source_list ( mocker , main_window ) : [EOL] source_list = main_window . main_view . source_list [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_widget = source_list . itemWidget ( source_list . item ( [number] ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [number] == source_widget . gutter . minimumSize ( ) . width ( ) [EOL] assert [number] == source_widget . gutter . maximumSize ( ) . width ( ) [EOL] assert [number] == source_widget . metadata . maximumSize ( ) . width ( ) [EOL] preview = source_widget . preview [EOL] assert [string] == preview . font ( ) . family ( ) [EOL] QFont . Normal == preview . font ( ) . weight ( ) [EOL] [number] == preview . font ( ) . pixelSize ( ) [EOL] assert [string] == preview . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] waiting_delete_confirmation = source_widget . waiting_delete_confirmation [EOL] assert [string] == waiting_delete_confirmation . font ( ) . family ( ) [EOL] QFont . Normal == waiting_delete_confirmation . font ( ) . weight ( ) [EOL] [number] == waiting_delete_confirmation . font ( ) . pixelSize ( ) [EOL] assert [string] == waiting_delete_confirmation . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] name = source_widget . name [EOL] assert [string] == name . font ( ) . family ( ) [EOL] QFont . Normal == name . font ( ) . weight ( ) [EOL] [number] == name . font ( ) . pixelSize ( ) [EOL] assert [string] == name . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] timestamp = source_widget . timestamp [EOL] assert [string] == timestamp . font ( ) . family ( ) [EOL] QFont . Normal == timestamp . font ( ) . weight ( ) [EOL] [number] == timestamp . font ( ) . pixelSize ( ) [EOL] assert [string] == timestamp . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_styles_for_conversation_view ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] waiting_delete_confirmation = wrapper . waiting_delete_confirmation [EOL] assert [string] == waiting_delete_confirmation . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == waiting_delete_confirmation . font ( ) . weight ( ) [EOL] assert [number] == waiting_delete_confirmation . font ( ) . pixelSize ( ) [EOL] assert [string] == waiting_delete_confirmation . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] reply_box = wrapper . reply_box [EOL] assert [number] == reply_box . minimumSize ( ) . height ( ) [EOL] assert [number] == reply_box . maximumSize ( ) . height ( ) [EOL] assert [string] == reply_box . replybox . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] reply_box . set_logged_in ( ) [EOL] assert [string] == reply_box . replybox . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] reply_box_children = reply_box . findChildren ( QPushButton ) [EOL] hover = QEvent ( QEvent . HoverEnter ) [EOL] for c in reply_box_children : [EOL] [comment] [EOL] c . eventFilter ( c , hover ) [EOL] [comment] [EOL] [comment] [EOL] horizontal_line = reply_box . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [number] == horizontal_line . minimumSize ( ) . height ( ) [EOL] assert [number] == horizontal_line . maximumSize ( ) . height ( ) [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [comment] [EOL] reply_text_edit = reply_box . text_edit [EOL] assert [string] == reply_text_edit . font ( ) . family ( ) [EOL] assert QFont . Normal == reply_text_edit . font ( ) . weight ( ) [EOL] assert [number] == reply_text_edit . font ( ) . pixelSize ( ) [EOL] [comment] [EOL] assert ( [number] , [number] , [number] , [number] ) == reply_text_edit . getContentsMargins ( ) [EOL] [comment] [EOL] [EOL] conversation_title_bar = wrapper . conversation_title_bar [EOL] horizontal_line = conversation_title_bar . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [number] == horizontal_line . minimumSize ( ) . height ( ) [EOL] assert [number] == horizontal_line . maximumSize ( ) . height ( ) [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == horizontal_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] last_updated_label = conversation_title_bar . updated [EOL] assert [string] == last_updated_label . font ( ) . family ( ) [EOL] assert QFont . Light == last_updated_label . font ( ) . weight ( ) [EOL] assert [number] == last_updated_label . font ( ) . pixelSize ( ) [EOL] assert [string] == last_updated_label . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] title = conversation_title_bar . layout ( ) . itemAt ( [number] ) . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == title . font ( ) . family ( ) [EOL] assert QFont . Normal == title . font ( ) . weight ( ) [EOL] assert [number] == title . font ( ) . pixelSize ( ) [EOL] assert [string] == title . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] assert [string] == conversation_scrollarea . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL] assert [string] == conversation_scrollarea . widget ( ) . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] file_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [number] == file_widget . minimumSize ( ) . width ( ) [EOL] assert [number] == file_widget . maximumSize ( ) . width ( ) [EOL] assert [number] == file_widget . file_options . minimumSize ( ) . width ( ) [EOL] assert [string] == file_widget . export_button . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == file_widget . export_button . font ( ) . weight ( ) [EOL] assert [number] == file_widget . export_button . font ( ) . pixelSize ( ) [EOL] assert [string] == file_widget . export_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] assert [string] == file_widget . file_name . font ( ) . family ( ) [EOL] assert QFont . Bold == file_widget . file_name . font ( ) . weight ( ) [EOL] assert [number] == file_widget . file_name . font ( ) . pixelSize ( ) [EOL] assert [string] == file_widget . file_name . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [string] == file_widget . no_file_name . font ( ) . family ( ) [EOL] [comment] [EOL] assert QFont . Light + [number] == file_widget . no_file_name . font ( ) . weight ( ) [EOL] assert [number] == file_widget . no_file_name . font ( ) . pixelSize ( ) [EOL] assert [string] == file_widget . no_file_name . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] assert [number] == file_widget . file_size . minimumSize ( ) . width ( ) [EOL] assert [number] == file_widget . file_size . maximumSize ( ) . width ( ) [EOL] assert [string] == file_widget . file_size . font ( ) . family ( ) [EOL] assert QFont . Normal == file_widget . file_size . font ( ) . weight ( ) [EOL] assert [number] == file_widget . file_size . font ( ) . pixelSize ( ) [EOL] assert [string] == file_widget . file_size . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] assert [number] == file_widget . horizontal_line . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == file_widget . horizontal_line . maximumSize ( ) . height ( ) [comment] [EOL] [comment] [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == file_widget . horizontal_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == file_widget . horizontal_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == file_widget . horizontal_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == file_widget . horizontal_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [EOL] message_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [number] == message_widget . speech_bubble . minimumSize ( ) . width ( ) [EOL] assert [number] == message_widget . speech_bubble . maximumSize ( ) . width ( ) [EOL] assert [string] == message_widget . speech_bubble . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] reply_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [number] == reply_widget . speech_bubble . minimumSize ( ) . width ( ) [EOL] assert [number] == reply_widget . speech_bubble . maximumSize ( ) . width ( ) [EOL] assert [string] == reply_widget . speech_bubble . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] reply_widget_error_message = reply_widget . error . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] assert [string] == reply_widget_error_message . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == reply_widget_error_message . font ( ) . weight ( ) [EOL] assert [number] == reply_widget_error_message . font ( ) . pixelSize ( ) [EOL] assert [string] == reply_widget_error_message . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] [EOL] def test_styles_for_modal_dialog ( modal_dialog ) : [EOL] assert [number] == modal_dialog . minimumSize ( ) . width ( ) [EOL] assert [number] == modal_dialog . maximumSize ( ) . width ( ) [EOL] assert [number] == modal_dialog . minimumSize ( ) . height ( ) [EOL] assert [number] == modal_dialog . maximumSize ( ) . height ( ) [EOL] assert [string] == modal_dialog . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] assert [number] == modal_dialog . header_icon . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == modal_dialog . header_icon . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == modal_dialog . header_icon . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header_icon . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header_spinner_label . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == modal_dialog . header_spinner_label . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == modal_dialog . header_spinner_label . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header_spinner_label . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header . maximumSize ( ) . height ( ) [comment] [EOL] assert [string] == modal_dialog . header . font ( ) . family ( ) [EOL] assert QFont . Bold == modal_dialog . header . font ( ) . weight ( ) [EOL] assert [number] == modal_dialog . header . font ( ) . pixelSize ( ) [EOL] assert [string] == modal_dialog . header . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == modal_dialog . header . getContentsMargins ( ) [EOL] assert [number] == modal_dialog . header_line . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == modal_dialog . header_line . maximumSize ( ) . height ( ) [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == modal_dialog . header_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == modal_dialog . header_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == modal_dialog . header_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == modal_dialog . header_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [EOL] assert [string] == modal_dialog . body . font ( ) . family ( ) [EOL] assert [number] == modal_dialog . body . font ( ) . pixelSize ( ) [EOL] assert [string] == modal_dialog . body . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] window_buttons = modal_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box = window_buttons . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box_children = button_box . findChildren ( QPushButton ) [EOL] for c in button_box_children : [EOL] [comment] [EOL] assert [string] == c . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == c . font ( ) . weight ( ) [EOL] assert [number] == c . font ( ) . pixelSize ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_styles_for_print_dialog ( print_dialog ) : [EOL] assert [number] == print_dialog . minimumSize ( ) . width ( ) [EOL] assert [number] == print_dialog . maximumSize ( ) . width ( ) [EOL] assert [number] == print_dialog . minimumSize ( ) . height ( ) [EOL] assert [number] == print_dialog . maximumSize ( ) . height ( ) [EOL] assert [string] == print_dialog . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] assert [number] == print_dialog . header_icon . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == print_dialog . header_icon . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == print_dialog . header_icon . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header_icon . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header_spinner_label . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == print_dialog . header_spinner_label . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == print_dialog . header_spinner_label . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header_spinner_label . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header . maximumSize ( ) . height ( ) [comment] [EOL] assert [string] == print_dialog . header . font ( ) . family ( ) [EOL] assert QFont . Bold == print_dialog . header . font ( ) . weight ( ) [EOL] assert [number] == print_dialog . header . font ( ) . pixelSize ( ) [EOL] assert [string] == print_dialog . header . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == print_dialog . header . getContentsMargins ( ) [EOL] assert [number] == print_dialog . header_line . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == print_dialog . header_line . maximumSize ( ) . height ( ) [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == print_dialog . header_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == print_dialog . header_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == print_dialog . header_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == print_dialog . header_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [EOL] assert [string] == print_dialog . body . font ( ) . family ( ) [EOL] assert [number] == print_dialog . body . font ( ) . pixelSize ( ) [EOL] assert [string] == print_dialog . body . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] window_buttons = print_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box = window_buttons . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box_children = button_box . findChildren ( QPushButton ) [EOL] for c in button_box_children : [EOL] [comment] [EOL] assert [string] == c . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == c . font ( ) . weight ( ) [EOL] assert [number] == c . font ( ) . pixelSize ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_styles_for_export_dialog ( export_dialog ) : [EOL] assert [number] == export_dialog . minimumSize ( ) . width ( ) [EOL] assert [number] == export_dialog . maximumSize ( ) . width ( ) [EOL] assert [number] == export_dialog . minimumSize ( ) . height ( ) [EOL] assert [number] == export_dialog . maximumSize ( ) . height ( ) [EOL] assert [string] == export_dialog . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] assert [number] == export_dialog . header_icon . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == export_dialog . header_icon . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == export_dialog . header_icon . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header_icon . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header_spinner_label . minimumSize ( ) . width ( ) [comment] [EOL] assert [number] == export_dialog . header_spinner_label . maximumSize ( ) . width ( ) [comment] [EOL] assert [number] == export_dialog . header_spinner_label . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header_spinner_label . maximumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header . maximumSize ( ) . height ( ) [comment] [EOL] assert [string] == export_dialog . header . font ( ) . family ( ) [EOL] assert QFont . Bold == export_dialog . header . font ( ) . weight ( ) [EOL] assert [number] == export_dialog . header . font ( ) . pixelSize ( ) [EOL] assert [string] == export_dialog . header . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] assert ( [number] , [number] , [number] , [number] ) == export_dialog . header . getContentsMargins ( ) [EOL] assert [number] == export_dialog . header_line . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == export_dialog . header_line . maximumSize ( ) . height ( ) [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [number] == math . floor ( [number] * [number] ) [comment] [EOL] assert [number] == export_dialog . header_line . palette ( ) . color ( QPalette . Background ) . rgba64 ( ) . alpha8 ( ) [EOL] assert [number] == export_dialog . header_line . palette ( ) . color ( QPalette . Background ) . red ( ) [EOL] assert [number] == export_dialog . header_line . palette ( ) . color ( QPalette . Background ) . green ( ) [EOL] assert [number] == export_dialog . header_line . palette ( ) . color ( QPalette . Background ) . blue ( ) [EOL] [EOL] assert [string] == export_dialog . body . font ( ) . family ( ) [EOL] assert [number] == export_dialog . body . font ( ) . pixelSize ( ) [EOL] assert [string] == export_dialog . body . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] window_buttons = export_dialog . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box = window_buttons . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] button_box_children = button_box . findChildren ( QPushButton ) [EOL] for c in button_box_children : [EOL] assert [number] == c . height ( ) [comment] [EOL] assert [string] == c . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == c . font ( ) . weight ( ) [EOL] assert [number] == c . font ( ) . pixelSize ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] passphrase_children_qlabel = export_dialog . passphrase_form . findChildren ( QLabel ) [EOL] for c in passphrase_children_qlabel : [EOL] assert [string] == c . font ( ) . family ( ) [EOL] assert QFont . DemiBold - [number] == c . font ( ) . weight ( ) [EOL] assert [number] == c . font ( ) . pixelSize ( ) [EOL] assert [string] == c . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [EOL] form_children_qlineedit = export_dialog . passphrase_form . findChildren ( QLineEdit ) [EOL] for c in form_children_qlineedit : [EOL] assert [number] == c . minimumSize ( ) . height ( ) [comment] [EOL] assert [number] == c . maximumSize ( ) . height ( ) [comment] [EOL] assert [string] == c . palette ( ) . color ( QPalette . Background ) . name ( ) [EOL] [comment] [EOL]	
from typing import Any [EOL] import securedrop_client [EOL] import typing [EOL] import pytest [EOL] from PyQt5 . QtWidgets import QApplication [EOL] [EOL] from securedrop_client . gui . main import Window [EOL] from securedrop_client . gui . widgets import ExportDialog , ModalDialog , PrintDialog [EOL] from securedrop_client . logic import Controller [EOL] from tests import factory [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def main_window ( mocker , homedir ) : [EOL] [comment] [EOL] app = QApplication ( [ ] ) [EOL] gui = Window ( ) [EOL] app . setActiveWindow ( gui ) [EOL] gui . show ( ) [EOL] controller = Controller ( [string] , gui , mocker . MagicMock ( ) , homedir , proxy = False ) [EOL] controller . qubes = False [EOL] gui . setup ( controller ) [EOL] [EOL] [comment] [EOL] source_list = gui . main_view . source_list [EOL] source = factory . Source ( ) [EOL] source_list . update ( [ source ] ) [EOL] [EOL] [comment] [EOL] mocker . patch ( [string] , return_value = [string] ) [EOL] mocker . patch ( [string] , return_value = [string] ) [EOL] source . collection . append ( [ factory . File ( source = source , filename = [string] ) , factory . Message ( source = source , filename = [string] ) , factory . Reply ( source = source , filename = [string] ) , ] ) [EOL] source_list . setCurrentItem ( source_list . item ( [number] ) ) [EOL] gui . main_view . on_source_changed ( ) [EOL] [EOL] yield gui [EOL] [EOL] [comment] [EOL] gui . login_dialog . close ( ) [EOL] app . exit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def main_window_no_key ( mocker , homedir ) : [EOL] [comment] [EOL] app = QApplication ( [ ] ) [EOL] gui = Window ( ) [EOL] app . setActiveWindow ( gui ) [EOL] gui . show ( ) [EOL] controller = Controller ( [string] , gui , mocker . MagicMock ( ) , homedir , proxy = False ) [EOL] controller . qubes = False [EOL] gui . setup ( controller ) [EOL] [EOL] [comment] [EOL] source_list = gui . main_view . source_list [EOL] source = factory . Source ( public_key = None ) [EOL] source_list . update ( [ source ] ) [EOL] [EOL] [comment] [EOL] mocker . patch ( [string] , return_value = [string] ) [EOL] mocker . patch ( [string] , return_value = [string] ) [EOL] source . collection . append ( [ factory . File ( source = source , filename = [string] ) , factory . Message ( source = source , filename = [string] ) , factory . Reply ( source = source , filename = [string] ) , ] ) [EOL] source_list . setCurrentItem ( source_list . item ( [number] ) ) [EOL] gui . main_view . on_source_changed ( ) [EOL] [EOL] yield gui [EOL] [EOL] [comment] [EOL] gui . login_dialog . close ( ) [EOL] app . exit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def modal_dialog ( mocker , homedir ) : [EOL] app = QApplication ( [ ] ) [EOL] gui = Window ( ) [EOL] gui . show ( ) [EOL] controller = Controller ( [string] , gui , mocker . MagicMock ( ) , homedir , proxy = False ) [EOL] controller . qubes = False [EOL] gui . setup ( controller ) [EOL] gui . login_dialog . close ( ) [EOL] app . setActiveWindow ( gui ) [EOL] dialog = ModalDialog ( ) [EOL] [EOL] yield dialog [EOL] [EOL] dialog . close ( ) [EOL] app . exit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def print_dialog ( mocker , homedir ) : [EOL] app = QApplication ( [ ] ) [EOL] gui = Window ( ) [EOL] gui . show ( ) [EOL] controller = Controller ( [string] , gui , mocker . MagicMock ( ) , homedir , proxy = False ) [EOL] controller . qubes = False [EOL] gui . setup ( controller ) [EOL] gui . login_dialog . close ( ) [EOL] app . setActiveWindow ( gui ) [EOL] dialog = PrintDialog ( controller , [string] , [string] ) [EOL] [EOL] yield dialog [EOL] [EOL] dialog . close ( ) [EOL] app . exit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def export_dialog ( mocker , homedir ) : [EOL] app = QApplication ( [ ] ) [EOL] gui = Window ( ) [EOL] gui . show ( ) [EOL] controller = Controller ( [string] , gui , mocker . MagicMock ( ) , homedir , proxy = False ) [EOL] controller . qubes = False [EOL] gui . setup ( controller ) [EOL] gui . login_dialog . close ( ) [EOL] app . setActiveWindow ( gui ) [EOL] dialog = ExportDialog ( controller , [string] , [string] ) [EOL] dialog . show ( ) [EOL] [EOL] yield dialog [EOL] [EOL] dialog . close ( ) [EOL] gui . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from PyQt5 . QtCore import QEvent [EOL] from PyQt5 . QtGui import QFont , QPalette [EOL] [EOL] from securedrop_client . resources import load_icon [EOL] [EOL] [EOL] def test_styles ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] file_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] download_button = file_widget . download_button [EOL] [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] assert [string] == download_button . font ( ) . family ( ) [EOL] assert QFont . Bold == download_button . font ( ) . weight ( ) [EOL] assert [number] == download_button . font ( ) . pixelSize ( ) [EOL] assert [string] == download_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [EOL] file_widget . eventFilter ( download_button , QEvent ( QEvent . HoverEnter ) ) [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] [comment] [EOL] [EOL] file_widget . eventFilter ( download_button , QEvent ( QEvent . HoverLeave ) ) [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] assert [string] == download_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] [EOL] def test_styles_animated ( mocker , main_window ) : [EOL] wrapper = main_window . main_view . view_layout . itemAt ( [number] ) . widget ( ) [EOL] conversation_scrollarea = wrapper . conversation_view . scroll [EOL] file_widget = conversation_scrollarea . widget ( ) . layout ( ) . itemAt ( [number] ) . widget ( ) [EOL] download_button = file_widget . download_button [EOL] [EOL] file_widget . start_button_animation ( ) [EOL] [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] assert [string] == download_button . font ( ) . family ( ) [EOL] assert QFont . Bold == download_button . font ( ) . weight ( ) [EOL] assert [number] == download_button . font ( ) . pixelSize ( ) [EOL] assert [string] == download_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [comment] [EOL] [EOL] file_widget . eventFilter ( download_button , QEvent ( QEvent . HoverEnter ) ) [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] assert [string] == download_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL] [EOL] file_widget . eventFilter ( download_button , QEvent ( QEvent . HoverLeave ) ) [EOL] expected_image = load_icon ( [string] ) . pixmap ( [number] , [number] ) . toImage ( ) [EOL] assert download_button . icon ( ) . pixmap ( [number] , [number] ) . toImage ( ) == expected_image [EOL] assert [string] == download_button . palette ( ) . color ( QPalette . Foreground ) . name ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0