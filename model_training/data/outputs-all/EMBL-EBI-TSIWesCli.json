[EOL] [EOL] class AssertThrowsMixin ( object ) : [EOL] [EOL] def assertThrows ( self , func , exceptionClass , errorMessage = None ) : [EOL] [EOL] with self . assertRaises ( exceptionClass ) as cm : [EOL] [EOL] func ( ) [EOL] [EOL] if errorMessage : [EOL] [EOL] self . assertEqual ( str ( cm . exception ) , errorMessage ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import unittest [EOL] from WesCli . Main import main [EOL] [EOL] [EOL] class GetIntegrationTest ( unittest . TestCase ) : [EOL] [EOL] def test_get_dir ( self ) : [EOL] [docstring] [EOL] [EOL] main ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_get_file ( self ) : [EOL] [EOL] main ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , Union [EOL] import typing [EOL] import unittest [EOL] from WesCli . Get import newFormatLine [EOL] [EOL] [EOL] class GetTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] [EOL] self . maxDiff = None [comment] [EOL] [EOL] [EOL] def test_formatLine ( self ) : [EOL] [docstring] [EOL] [EOL] helloFile = { [string] : False , [string] : False , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] [EOL] aDir = { [string] : True , [string] : False , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] formatLine = newFormatLine ( [string] ) [EOL] [EOL] self . assertEquals ( formatLine ( helloFile ) , [string] ) [EOL] self . assertEquals ( formatLine ( aDir ) , [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] from WesCli . ArgParser import getOpts , hasWatch [EOL] from AssertKeyValueMixin import AssertKeyValueMixin [EOL] [EOL] [EOL] class ArgParserTest ( unittest . TestCase , AssertKeyValueMixin ) : [EOL] [EOL] def test_run ( self ) : [EOL] [EOL] args = getOpts ( [ [string] , [string] ] ) [EOL] [EOL] print ( args ) [EOL] [EOL] [docstring] [EOL] [EOL] self . assertKeyValue ( args , [string] , True ) [EOL] self . assertKeyValue ( args , [string] , [string] ) [EOL] [EOL] [EOL] def test_status ( self ) : [EOL] [EOL] args = getOpts ( [ [string] ] ) [EOL] [EOL] print ( args ) [EOL] [EOL] [docstring] [EOL] [EOL] self . assertKeyValue ( args , [string] , True ) [EOL] [EOL] [EOL] def test_status_watch ( self ) : [EOL] [EOL] args = getOpts ( [ [string] , [string] ] ) [EOL] [EOL] print ( args ) [EOL] [EOL] [docstring] [EOL] [EOL] self . assertKeyValue ( args , [string] , True ) [EOL] self . assertTrue ( hasWatch ( args ) ) [EOL] [EOL] self . assertTrue ( hasWatch ( getOpts ( [ [string] , [string] ] ) ) ) [EOL] self . assertTrue ( hasWatch ( getOpts ( [ [string] , [string] ] ) ) ) [EOL] [EOL] self . assertFalse ( hasWatch ( getOpts ( [ [string] ] ) ) ) [EOL] [EOL] [EOL] def test_ls ( self ) : [EOL] [EOL] args = getOpts ( [ [string] , [string] ] ) [EOL] [EOL] print ( args ) [EOL] [EOL] [docstring] [EOL] [EOL] self . assertKeyValue ( args , [string] , True ) [EOL] self . assertKeyValue ( args , [string] , [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] class AssertKeyValueMixin ( object ) : [EOL] [EOL] def assertKeyValue ( self , args , key , value ) : [EOL] [EOL] return self . assertEquals ( args [ key ] , value ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import unittest [EOL] from WesCli . Upload import upload [EOL] from WesCli . Main import main [EOL] from urllib . parse import urljoin [EOL] from uuid import uuid4 [EOL] from WesCli . Get import cat [EOL] [EOL] [EOL] [EOL] def randomSubDir ( ) : [EOL] [EOL] return f' [string] { uuid4 ( ) } [string] ' [EOL] [EOL] [EOL] class UploadIntegrationTest ( unittest . TestCase ) : [EOL] [EOL] def test_upload ( self ) : [EOL] [docstring] [EOL] [EOL] upload ( [string] , [string] ) [EOL] [EOL] self . assertEquals ( cat ( [string] ) , [string] ) [EOL] [EOL] [EOL] def test_upload_cmd_line ( self ) : [EOL] [EOL] main ( [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_upload_to_subdir_with_different_filename ( self ) : [EOL] [EOL] dirUrl = randomSubDir ( ) [EOL] fileUrl = urljoin ( dirUrl , [string] ) [EOL] [EOL] upload ( [string] , fileUrl ) [EOL] [EOL] self . assertEquals ( cat ( fileUrl ) , [string] ) [EOL] [EOL] [EOL] def test_upload_to_subdir ( self ) : [EOL] [EOL] dirUrl = randomSubDir ( ) [EOL] [EOL] upload ( [string] , dirUrl ) [EOL] [EOL] fileUrl = urljoin ( dirUrl , [string] ) [EOL] [EOL] self . assertEquals ( cat ( fileUrl ) , [string] ) [EOL] [EOL] [EOL] def test_nice_error_message ( self ) : [EOL] [EOL] main ( [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import unittest [EOL] from pprint import pprint [EOL] from WesCli . WesCli import loadYaml , getEffectiveConf , validateSites , replace , statusLine , info [EOL] from WesCli . exception import InvalidConf [EOL] from WesCli . either import Ok [EOL] [EOL] [EOL] class Test ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] [EOL] self . maxDiff = None [comment] [EOL] [EOL] [EOL] def test_loadYaml ( self ) : [EOL] [EOL] yaml = loadYaml ( [string] ) [EOL] [EOL] pprint ( yaml ) [EOL] [EOL] [EOL] def test_replace ( self ) : [EOL] [EOL] inputTree = { [string] : { [string] : [string] , [string] : [string] } } [EOL] [EOL] params = { [string] : [string] } [EOL] [EOL] self . assertEquals ( replace ( inputTree , params ) , { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] [EOL] [EOL] def test_getEffectiveConf ( self ) : [EOL] [docstring] [EOL] [EOL] yaml = loadYaml ( [string] ) [EOL] [EOL] self . assertEqual ( getEffectiveConf ( yaml ) , { [string] : [string] , [string] : [ { [string] : { [string] : { [string] : [string] , [string] : [string] } } , [string] : [string] } , { [string] : { [string] : { [string] : [string] , [string] : [string] } } , [string] : [string] } ] } ) [EOL] [EOL] [EOL] def test_getEffectiveConf_single_site ( self ) : [EOL] [EOL] yaml = loadYaml ( [string] ) [EOL] [EOL] self . assertEqual ( getEffectiveConf ( yaml ) , { [string] : [string] , [string] : [ { [string] : { [string] : { [string] : [string] , [string] : [string] } } , [string] : [string] } ] } ) [EOL] [EOL] [EOL] def test_hasTemplateParams ( self ) : [EOL] [EOL] [comment] [EOL] validateSites ( [ { [string] : [string] , [string] : { [string] : [number] } } , { [string] : [string] , [string] : { [string] : [number] } } ] ) [EOL] [EOL] [comment] [EOL] validateSites ( [ { [string] : [string] } , { [string] : [string] } ] ) [EOL] [EOL] [comment] [EOL] with self . assertRaises ( InvalidConf ) as cm : [EOL] [EOL] validateSites ( [ { [string] : [string] } , { [string] : [string] , [string] : { [string] : [number] } } ] ) [EOL] [EOL] print ( cm . exception ) [EOL] [EOL] def test_statusLine ( self ) : [EOL] [docstring] [EOL] [EOL] url = [string] [EOL] id = [string] [EOL] [EOL] line = statusLine ( url , id , Ok ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } } , [string] : [string] } ) ) [EOL] [EOL] self . assertEquals ( line . split ( [string] ) , [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_statusLine_Maxim_outputs ( self ) : [EOL] [EOL] url = [string] [EOL] id = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] line = statusLine ( url , id , Ok ( { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } ] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } } , [string] : [string] } ) ) [EOL] [EOL] print ( line ) [EOL] [EOL] self . assertEquals ( line . split ( [string] ) , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_statusLine_no_outputs ( self ) : [EOL] [docstring] [EOL] [EOL] url = [string] [EOL] id = [string] [EOL] [EOL] self . assertEquals ( statusLine ( url , id , Ok ( { [string] : { } , [string] : [string] } ) ) , [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import unittest [EOL] from WesCli . WesCli import run , run_multiple , status , info , status_multiple [EOL] from WesCli . either import Ok , Error [EOL] from AssertKeyValueMixin import AssertKeyValueMixin [EOL] import os [EOL] from WesCli import LocalState [EOL] from WesCli . LocalState import DOT_FILE [EOL] from AssertThrowsMixin import AssertThrowsMixin [EOL] from WesCli . exception import UserMessageException [EOL] [EOL] [EOL] [EOL] WES_URL = [string] [EOL] [comment] [EOL] [EOL] [EOL] class IntegrationTest ( unittest . TestCase , AssertKeyValueMixin , AssertThrowsMixin ) : [EOL] [EOL] [EOL] def setUp ( self ) : [EOL] [EOL] self . maxDiff = None [comment] [EOL] [EOL] [EOL] def test_run_success ( self ) : [EOL] [EOL] r = run ( WES_URL , [string] , { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] [EOL] print ( r ) [comment] [EOL] [EOL] self . assertEquals ( type ( r ) , Ok ) [EOL] self . assertTrue ( len ( r . v [ [string] ] ) == [number] ) [EOL] [EOL] [EOL] def test_run_failure ( self ) : [EOL] [EOL] r = run ( WES_URL , [string] , [string] ) [EOL] [EOL] print ( r ) [comment] [EOL] [EOL] self . assertEquals ( type ( r ) , Error ) [EOL] self . assertTrue ( [string] in r . v ) [EOL] self . assertTrue ( [string] in r . v ) [EOL] [EOL] [EOL] def _test_run_failure_500 ( self ) : [EOL] [docstring] [EOL] [EOL] r = run ( [string] , [string] , { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] [EOL] print ( r ) [comment] [EOL] [EOL] self . assertEquals ( type ( r ) , Error ) [EOL] self . assertTrue ( [string] in r . v ) [EOL] self . assertTrue ( [string] in r . v ) [EOL] [EOL] [EOL] def test_run_multiple ( self ) : [EOL] [EOL] sites = run_multiple ( [string] ) [EOL] [EOL] self . assertGreater ( len ( sites ) , [number] ) [EOL] [EOL] [EOL] def test_run_single ( self ) : [EOL] [EOL] sites = run_multiple ( [string] ) [EOL] [EOL] self . assertTrue ( len ( sites ) == [number] ) [EOL] [EOL] r = sites [ [number] ] [EOL] [EOL] self . assertKeyValue ( r , [string] , [string] ) [EOL] self . assertKeyValue ( r , [string] , True ) [EOL] self . assertIsNotNone ( r . get ( [string] ) ) [EOL] [EOL] [EOL] def test_status_multiple ( self ) : [EOL] [EOL] print ( [string] ) [EOL] run_multiple ( [string] ) [EOL] [EOL] print ( ) [EOL] print ( [string] ) [EOL] status_multiple ( ) [EOL] [EOL] [EOL] def test_status_without_run ( self ) : [EOL] [EOL] if os . path . exists ( DOT_FILE ) : [EOL] os . remove ( DOT_FILE ) [EOL] [EOL] self . assertThrows ( status_multiple , UserMessageException , [string] ) [EOL] [EOL] [EOL] def test_status_and_info ( self ) : [EOL] [EOL] url = WES_URL [EOL] [EOL] r = run ( url , [string] , { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] [EOL] print ( r ) [comment] [EOL] [EOL] self . assertEquals ( type ( r ) , Ok ) [EOL] [EOL] s = status ( url , r . v [ [string] ] ) [EOL] [EOL] print ( s ) [comment] [EOL] [EOL] self . assertEquals ( type ( s ) , Ok ) [EOL] [EOL] i = info ( url , r . v [ [string] ] ) [EOL] [EOL] print ( i ) [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] self . assertEquals ( type ( i ) , Ok ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import unittest [EOL] from WesCli . LocalState import LocalState [EOL] from WesCli . either import Ok , Error [EOL] [EOL] [EOL] class LocalStateTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] [EOL] self . maxDiff = None [comment] [EOL] [EOL] [EOL] def test_add ( self ) : [EOL] [EOL] s = LocalState ( [string] ) [EOL] [EOL] s . add ( [string] , Ok ( [string] ) ) [EOL] s . add ( [string] , Ok ( [string] ) ) [EOL] s . add ( [string] , Error ( [string] ) ) [EOL] [EOL] print ( s ) [EOL] [EOL] self . assertEquals ( s . asDict ( ) , { [string] : [string] , [string] : [ { [string] : [string] , [string] : True , [string] : [string] } , { [string] : [string] , [string] : True , [string] : [string] } , { [string] : [string] , [string] : False , [string] : [string] } ] } ) [EOL] [EOL] [EOL] def test_load_save ( self ) : [EOL] [EOL] s1 = LocalState ( [string] ) [EOL] [EOL] s2 = LocalState ( [string] ) [EOL] s2 . add ( [string] , Ok ( [string] ) ) [EOL] s2 . add ( [string] , Ok ( [string] ) ) [EOL] s2 . add ( [string] , Error ( [string] ) ) [EOL] [EOL] [EOL] self . assertEquals ( s1 . asDict ( ) , { [string] : [string] , [string] : [ ] } ) [EOL] self . assertNotEquals ( s1 . asDict ( ) , s2 . asDict ( ) ) [EOL] [EOL] s2 . save ( ) [EOL] [EOL] s1 . load ( ) [EOL] [EOL] self . assertEquals ( s1 . asDict ( ) , s2 . asDict ( ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] [EOL] class UserMessageException ( Exception ) : [EOL] pass [EOL] [EOL] class InvalidConf ( UserMessageException ) : [EOL] pass [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import sys [EOL] from WesCli . ArgParser import getOpts , hasWatch [EOL] from WesCli . WesCli import run_multiple , status_multiple [EOL] from WesCli . Get import getCmd , download [EOL] from WesCli . Upload import upload [EOL] import os [EOL] [EOL] [EOL] def main ( args ) : [EOL] [EOL] try : [EOL] _main ( args ) [EOL] [EOL] except Exception as e : [EOL] [EOL] print ( e ) [EOL] [EOL] [EOL] def _main ( args ) : [EOL] [EOL] opts = getOpts ( args ) [EOL] [EOL] [comment] [EOL] [EOL] if opts [ [string] ] : run_multiple ( opts [ [string] ] ) [EOL] elif opts [ [string] ] : getCmd ( opts [ [string] ] ) [EOL] elif opts [ [string] ] : upload ( opts [ [string] ] , opts [ [string] ] ) [EOL] elif opts [ [string] ] : download ( opts [ [string] ] , opts [ [string] ] , opts [ [string] ] ) [EOL] elif opts [ [string] ] : [EOL] [EOL] if hasWatch ( opts ) : os . system ( [string] ) [EOL] else : status_multiple ( ) [EOL] [EOL] [EOL] def entryPoint ( ) : [EOL] return main ( sys . argv [ [number] : ] ) [EOL] [EOL] if __name__ == [string] : [EOL] entryPoint ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import sys [EOL] from docopt import docopt [EOL] [EOL] [EOL] def main ( ) : [EOL] [EOL] args = getOpts ( sys . argv [ [number] : ] ) [EOL] [EOL] print ( args ) [EOL] [EOL] [EOL] def getOpts ( args ) : [EOL] [EOL] doc = [string] [EOL] [EOL] return docopt ( doc , argv = args ) [EOL] [EOL] [EOL] def hasWatch ( args ) : [EOL] [docstring] [EOL] [EOL] return args . get ( [string] ) or args . get ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import requests [EOL] import requests [EOL] from os . path import basename [EOL] from urllib . parse import urljoin [EOL] [EOL] [EOL] [EOL] def appendFilename ( filename , url ) : [EOL] [EOL] return urljoin ( url , basename ( filename ) ) [EOL] [EOL] [EOL] def isDir ( url ) : [EOL] [EOL] return url [ - [number] ] == [string] [EOL] [EOL] [EOL] def upload ( filename , url ) : [EOL] [EOL] if isDir ( url ) : [EOL] [EOL] url = appendFilename ( filename , url ) [EOL] [EOL] [EOL] _upload ( filename , url ) [EOL] [EOL] [EOL] def _upload ( filename , url ) : [EOL] [EOL] with open ( filename , [string] ) as f : [EOL] [EOL] r = requests . post ( url , data = f ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] r . raise_for_status ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , List , Any , Union [EOL] import typing [EOL] import builtins [EOL] import WesCli [EOL] import requests [EOL] import yaml [EOL] import requests [EOL] from WesCli . either import Ok , Error , Either [EOL] from WesCli . LocalState import LocalState [EOL] from pydash . collections import partition [EOL] from WesCli . exception import InvalidConf [EOL] from pydash . predicates import is_string [EOL] from pydash . objects import map_values_deep , clone_deep [EOL] from typing import Optional , Union , List , Dict [EOL] import json [EOL] from pprint import pprint [EOL] from urllib . parse import urlsplit , urljoin [EOL] import os [EOL] from WesCli import url [EOL] from WesCli . url import getBaseUrl [EOL] [EOL] [EOL] def loadYaml ( filename ) : [EOL] [EOL] with open ( filename , [string] ) as f : [EOL] [EOL] return yaml . safe_load ( f ) [EOL] [EOL] [EOL] def validateSites ( sites ) : [EOL] [EOL] has , hasnt = partition ( sites , lambda s : [string] in s ) [EOL] [EOL] ok = len ( has ) == len ( sites ) or len ( hasnt ) == len ( sites ) [EOL] [EOL] if not ok : raise InvalidConf ( [string] ) [EOL] [EOL] [EOL] def getEffectiveConf ( conf ) : [EOL] [EOL] validateSites ( conf [ [string] ] ) [EOL] [EOL] return replaceVariables ( conf ) [EOL] [EOL] [EOL] def mapTree ( tree , func ) : [EOL] [docstring] [EOL] [EOL] return map_values_deep ( clone_deep ( tree ) , func ) [EOL] [EOL] [EOL] def replace ( inputTree , params ) : [EOL] [EOL] def isVariable ( x ) : return is_string ( x ) and len ( x ) != [number] and x [ [number] ] == [string] [EOL] [EOL] def variableValue ( name ) : return params [ name [ [number] : ] ] [comment] [EOL] [EOL] def func ( x ) : [EOL] [EOL] if isVariable ( x ) : [EOL] return variableValue ( x ) [EOL] else : [EOL] return x [EOL] [EOL] [EOL] return mapTree ( inputTree , func ) [EOL] [EOL] [EOL] def replaceVariables ( conf ) : [EOL] [EOL] inputTree = conf [ [string] ] [EOL] sites = conf [ [string] ] [EOL] [EOL] def renderSite ( s ) : [EOL] [EOL] inputParams = s . get ( [string] ) [EOL] [EOL] return { [string] : s [ [string] ] , [string] : replace ( inputTree , inputParams ) if inputParams else inputTree } [EOL] [EOL] return { [string] : conf [ [string] ] , [string] : [ renderSite ( s ) for s in sites ] } [EOL] [EOL] [EOL] def toJson ( r ) : [EOL] [EOL] try : [EOL] [EOL] return r . json ( ) [EOL] [EOL] except : [EOL] [EOL] return { [string] : r . status_code , [string] : r . reason } [EOL] [EOL] [EOL] def run ( wesUrl , workflowUrl , params ) : [EOL] [EOL] [docstring] [EOL] [EOL] r = requests . post ( f"{ wesUrl } [string] " , data = { [string] : [string] , [string] : [string] , [string] : workflowUrl , [string] : json . dumps ( params ) } ) [EOL] [EOL] if r . status_code == requests . codes . ok : return Ok ( r . json ( ) ) [comment] [EOL] else : return Error ( toJson ( r ) ) [EOL] [EOL] [EOL] def status ( wesUrl , id ) : [EOL] [EOL] r = requests . get ( f"{ wesUrl } [string] { id } [string] " ) [EOL] [EOL] if r . status_code == requests . codes . ok : return Ok ( r . json ( ) [ [string] ] ) [comment] [EOL] else : return Error ( r . text ) [EOL] [EOL] [EOL] def info ( wesUrl , id ) : [EOL] [EOL] r = requests . get ( f"{ wesUrl } [string] { id }" ) [EOL] [EOL] if r . status_code == requests . codes . ok : return Ok ( r . json ( ) ) [comment] [EOL] else : return Error ( r . text ) [EOL] [EOL] [EOL] def run_multiple ( yamlFilename ) : [EOL] [EOL] yaml = loadYaml ( yamlFilename ) [EOL] [EOL] conf = getEffectiveConf ( yaml ) [EOL] [EOL] workflow = conf [ [string] ] [EOL] [EOL] localState = LocalState ( workflow ) [EOL] [EOL] for s in conf [ [string] ] : [EOL] [docstring] [EOL] [EOL] url = s [ [string] ] [EOL] input = s [ [string] ] [EOL] [EOL] print ( f'{ url } [string] ' , end = [string] ) [EOL] [EOL] r = run ( url , workflow , input ) [EOL] [EOL] print ( r . v [ [string] ] if r . isOk ( ) else str ( r ) ) [EOL] [EOL] r . map ( lambda v : v [ [string] ] ) [comment] [EOL] [EOL] localState . add ( url , r ) [comment] [EOL] localState . save ( ) [EOL] [EOL] [EOL] return localState . sites [EOL] [EOL] [EOL] def pickUrls ( outputsBaseUrl , outputs ) : [EOL] [docstring] [EOL] [EOL] def outputUrl ( o ) : [EOL] [EOL] def f ( o ) : [EOL] try : [EOL] return urljoin ( outputsBaseUrl , o [ [string] ] ) [EOL] except : [EOL] return None [EOL] [EOL] [EOL] if isinstance ( o , List ) : return [ f ( x ) for x in o ] [EOL] else : return f ( o ) [EOL] [EOL] [EOL] return { name : outputUrl ( o ) for ( name , o ) in outputs . items ( ) } [EOL] [EOL] [EOL] def formatOutputs ( outputs ) : [EOL] [EOL] return [string] + yaml . dump ( outputs ) [EOL] [EOL] [EOL] def statusLine ( url , id , st ) : [EOL] [EOL] outputsBaseUrl = getBaseUrl ( url ) [EOL] [EOL] state = st . v [ [string] ] if st . isOk ( ) else None [EOL] outputs = pickUrls ( outputsBaseUrl , st . v [ [string] ] ) if st . isOk ( ) else None [EOL] [EOL] return [string] . join ( [ url , id , state ] ) + ( f' [string] { formatOutputs ( outputs ) }' if outputs else [string] ) [EOL] [EOL] [EOL] def status_multiple ( ) : [EOL] [EOL] s = LocalState ( [string] ) [EOL] [EOL] s . load ( ) [EOL] [EOL] [docstring] [EOL] [EOL] sites = s . sites [EOL] [EOL] successes , failures = partition ( sites , lambda s : s [ [string] ] ) [EOL] [EOL] for site in successes : [EOL] [EOL] url = site [ [string] ] [EOL] id = site [ [string] ] [EOL] [EOL] st = info ( url , id ) [EOL] [EOL] [comment] [EOL] [EOL] s = statusLine ( url , id , st ) [EOL] [EOL] print ( s ) [EOL] [EOL] [EOL] if failures : [EOL] [EOL] print ( ) [EOL] print ( [string] ) [EOL] [EOL] for site in failures : [EOL] [EOL] print ( f"{ site [ [string] ] } [string] { site [ [string] ] }" ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $WesCli.either.Either$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import urllib [EOL] from urllib . parse import urlsplit [EOL] [EOL] [EOL] [EOL] def getPath ( url ) : [EOL] [EOL] return urlsplit ( url ) . path [EOL] [EOL] [EOL] def getBaseUrl ( url ) : [EOL] [EOL] [comment] [EOL] [EOL] parts = urlsplit ( url ) [EOL] [EOL] return f'{ parts . scheme } [string] { parts . netloc } [string] ' [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] class Either ( object ) : [EOL] [EOL] def isOk ( self ) : [EOL] [EOL] return type ( self ) == Ok [EOL] [EOL] [EOL] def map ( self , f ) : [EOL] [docstring] [EOL] [EOL] if self . isOk ( ) : [EOL] [EOL] self . v = f ( self . v ) [EOL] [EOL] [EOL] [EOL] [EOL] class Ok ( Either ) : [EOL] def __init__ ( self , v ) : self . v = v [EOL] [EOL] def __str__ ( self , * args , ** kwargs ) : [EOL] [EOL] return f" [string] { self . v } [string] " [EOL] [EOL] [EOL] class Error ( Either ) : [EOL] def __init__ ( self , v ) : self . v = v [EOL] [EOL] def __str__ ( self , * args , ** kwargs ) : [EOL] [EOL] return f" [string] { self . v } [string] " [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Literal , Any , Union [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] import typing_extensions [EOL] from mypy_extensions import TypedDict [EOL] import requests [EOL] from WesCli . exception import UserMessageException [EOL] import os [EOL] from WesCli . url import getPath [EOL] from typing import List [EOL] import progressbar [EOL] [EOL] [EOL] class DirEntry ( TypedDict ) : [EOL] Name = ... [EOL] IsDir = ... [EOL] [EOL] [EOL] def formatEntry ( e ) : [EOL] [docstring] [EOL] [EOL] maybeSlash = [string] if e [ [string] ] else [string] [EOL] [EOL] return e [ [string] ] + maybeSlash [EOL] [EOL] [EOL] def newFormatLine ( wesUrl ) : [EOL] [EOL] basePath = getPath ( wesUrl ) [EOL] [EOL] def fileUrl ( filename ) : [EOL] [EOL] return f" [string] { os . path . join ( basePath , filename ) }" [EOL] [EOL] [EOL] def formatLine ( e ) : [EOL] [EOL] filename = formatEntry ( e ) [EOL] [EOL] return f'{ filename : [string] } [string] { fileUrl ( filename ) } [string] ' [EOL] [EOL] [EOL] return formatLine [EOL] [EOL] [EOL] def printDir ( entries , wesUrl ) : [EOL] [docstring] [EOL] [EOL] formatLine = newFormatLine ( wesUrl ) [EOL] [EOL] print ( [string] . join ( [ formatLine ( e ) for e in entries ] ) ) [EOL] [EOL] [EOL] def _get ( wesUrl ) : [EOL] [docstring] [EOL] r = requests . get ( wesUrl , headers = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] [EOL] r . raise_for_status ( ) [EOL] [EOL] return r [EOL] [EOL] [EOL] def getCmd ( wesUrl ) : [EOL] [EOL] r = _get ( wesUrl ) [EOL] [EOL] contentType = r . headers [ [string] ] [EOL] [EOL] if contentType . startswith ( [string] ) : printDir ( r . json ( ) , wesUrl ) [EOL] else : print ( r . text ) [EOL] [EOL] [EOL] def cat ( fileUrl ) : [EOL] [EOL] return _get ( fileUrl ) . text [EOL] [EOL] [EOL] def ls ( dirUrl ) : [EOL] [EOL] return _get ( dirUrl ) . json ( ) [EOL] [EOL] [EOL] def download ( url , progress = False , destination = False ) : [EOL] [EOL] CHUNK_SIZE = [number] * [number] [EOL] if destination : [EOL] if os . path . isdir ( destination ) : [EOL] org_file_name = url . split ( [string] ) [ - [number] ] [EOL] file_name = destination + [string] + org_file_name [EOL] else : [EOL] file_name = destination [EOL] else : [EOL] file_name = url . split ( [string] ) [ - [number] ] [EOL] rq = requests . get ( url , stream = True ) [EOL] [EOL] if progress : [EOL] file_length = int ( rq . headers [ [string] ] ) [EOL] with progressbar . ProgressBar ( max_value = file_length ) as bar : [EOL] size = [number] [EOL] with open ( file_name , [string] ) as fd : [EOL] for chunk in rq . iter_content ( chunk_size = CHUNK_SIZE ) : [EOL] fd . write ( chunk ) [EOL] size += len ( chunk ) [EOL] bar . update ( size ) [EOL] else : [EOL] with open ( file_name , [string] ) as fd : [EOL] for chunk in rq . iter_content ( chunk_size = CHUNK_SIZE ) : [EOL] fd . write ( chunk ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[DirEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0