from typing import List [EOL] import pybuses [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from pybuses import CommandBus [EOL] [EOL] [EOL] [comment] [EOL] class MakeSandwich : [EOL] def __init__ ( self , ingredients ) : [EOL] self . ingredients = ingredients [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def sandwich_maker ( command ) : [EOL] print ( f' [string] { command . ingredients } [string] ' ) [EOL] [EOL] [EOL] [comment] [EOL] command_bus = CommandBus ( ) [EOL] command_bus . subscribe ( sandwich_maker ) [EOL] command_bus . handle ( MakeSandwich ( [ [string] , [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Generator , Any [EOL] import pybuses [EOL] import typing [EOL] import builtins [EOL] import contextlib [EOL] from typing import ( Any , Generator , List , ) [EOL] [EOL] from pybuses import CommandBus [EOL] [EOL] [EOL] class MakeSandwich : [EOL] def __init__ ( self , ingredients ) : [EOL] self . ingredients = ingredients [EOL] [EOL] [EOL] def sandwich_maker ( command ) : [EOL] print ( f' [string] { command . ingredients } [string] ' ) [EOL] [EOL] [EOL] @ contextlib . contextmanager def example_middleware ( command ) : [EOL] print ( f' [string] { command }' ) [EOL] yield [EOL] print ( f' [string] { command }' ) [EOL] [EOL] [EOL] command_bus = CommandBus ( [ example_middleware ] ) [EOL] command_bus . subscribe ( sandwich_maker ) [EOL] command_bus . handle ( MakeSandwich ( [ [string] , [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import pybuses [EOL] import builtins [EOL] import attr [EOL] from pybuses import CommandBus [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class Example : [EOL] number = attr . ib ( ) [EOL] name = attr . ib ( ) [EOL] [EOL] [EOL] def example_handler ( command ) : [EOL] print ( f' [string] { type ( command ) } [string] { command } [string] ' ) [EOL] [EOL] [EOL] command_bus = CommandBus ( ) [EOL] command_bus . subscribe ( example_handler ) [EOL] command_bus . handle ( Example ( number = [number] , name = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pybuses [EOL] import decimal [EOL] import builtins [EOL] from decimal import Decimal [EOL] [EOL] from pybuses import EventBus [EOL] [EOL] [EOL] class PaymentMade : [EOL] amount = ... [EOL] who = ... [EOL] [EOL] def __init__ ( self , amount , who ) : [EOL] self . amount = amount [EOL] self . who = who [EOL] [EOL] [EOL] def handler ( payment_made ) : [EOL] print ( f' [string] { payment_made . who } [string] { payment_made . amount / [number] } [string] ' ) [EOL] [EOL] [EOL] event_bus = EventBus ( ) [EOL] event_bus . subscribe ( handler ) [EOL] event_bus . post ( PaymentMade ( Decimal ( [string] ) , [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $decimal.Decimal$ 0 $builtins.int$ 0 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.event_bus.EventBus$ 0 0 0 0 0 $pybuses.event_bus.EventBus$ 0 0 0 0 0 0 $pybuses.event_bus.EventBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pybuses [EOL] from dataclasses import dataclass [EOL] from typing import List [EOL] [EOL] from pybuses import CommandBus [EOL] [EOL] [EOL] @ dataclass class MakeSandwich : [EOL] ingredients = ... [EOL] [EOL] [EOL] def handler ( command ) : [EOL] print ( f' [string] { command }' ) [EOL] [EOL] [EOL] command_bus = CommandBus ( ) [EOL] command_bus . subscribe ( handler ) [EOL] command_bus . handle ( MakeSandwich ( [ [string] , [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 $pybuses.command_bus.CommandBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Callable , Any [EOL] import typing [EOL] from typing import ( Any , Callable , Hashable , Type , Union , ) [EOL] [EOL] Subscribable = Union [ Type , Hashable ] [EOL] Listener = Callable [ [ Any ] , None ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , Hashable , Union , Any , Optional , List , Type , Dict [EOL] import pybuses [EOL] import typing [EOL] import contextlib [EOL] import typing [EOL] [EOL] from pybuses . foundation import get_subscribed [EOL] from pybuses . types import ( Subscribable , Listener , ) [EOL] [EOL] [EOL] class CommandBus : [EOL] def __init__ ( self , middlewares = None ) : [EOL] if not middlewares : [EOL] middlewares = [ ] [EOL] [EOL] self . _middlewares = middlewares [EOL] self . _handlers = { } [EOL] [EOL] def subscribe ( self , listener ) : [EOL] command = get_subscribed ( listener ) [EOL] if command in self . _handlers : [EOL] raise ValueError ( [string] . format ( command , self . _handlers [ command ] ) ) [EOL] self . _handlers [ command ] = listener [EOL] [EOL] def handle ( self , command ) : [EOL] try : [EOL] handler = self . _handlers [ type ( command ) ] [EOL] except KeyError : [EOL] raise Exception ( [string] . format ( command ) ) [EOL] [EOL] with contextlib . ExitStack ( ) as stack : [EOL] for middleware in self . _middlewares : [EOL] stack . enter_context ( middleware ( command ) ) [EOL] handler ( command ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pybuses.types.Listener$ 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 $pybuses.types.Listener$ 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 $pybuses.types.Listener$ 0 0 0 $None$ 0 0 0 $pybuses.types.Subscribable$ 0 0 0 0 0 0 $typing.Callable[[typing.Any],None]$ 0 0 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0 0 $typing.Callable[[typing.Any],None]$ 0 $pybuses.types.Subscribable$ 0 0
from typing import Hashable , Union , Any , List , Type , Dict [EOL] import pybuses [EOL] import typing [EOL] import typing [EOL] from collections import defaultdict [EOL] [EOL] from pybuses . foundation import get_subscribed [EOL] from pybuses . types import ( Listener , Subscribable , ) [EOL] [EOL] [EOL] class EventBus : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _listeners = defaultdict ( list ) [EOL] [EOL] def subscribe ( self , listener ) : [EOL] event = get_subscribed ( listener ) [EOL] self . _listeners [ event ] . append ( listener ) [EOL] [EOL] def post ( self , event ) : [EOL] event_class = type ( event ) [EOL] if event_class not in self . _listeners : [EOL] return [EOL] [EOL] for listener in self . _listeners [ event_class ] : [EOL] listener ( event ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[typing.Any],typing.Hashable]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pybuses.types.Subscribable$ 0 0 0 $typing.Type[typing.Union[typing.Type[typing.Any],typing.Hashable]]$ 0 0 0 $pybuses.types.Subscribable$ 0 0 0 $typing.Type[typing.Union[typing.Type[typing.Any],typing.Hashable]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Union[typing.Type[typing.Any],typing.Hashable]]$ 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0
import builtins [EOL] from typing import Any [EOL] import pybuses [EOL] import typing [EOL] import inspect [EOL] import inspect [EOL] [EOL] from pybuses . types import ( Subscribable , Listener , ) [EOL] [EOL] [EOL] def get_subscribed ( listener ) : [EOL] arg_spec = inspect . getfullargspec ( listener ) [EOL] if inspect . ismethod ( listener ) : [EOL] allowed_args_len = [number] [EOL] else : [EOL] allowed_args_len = [number] [EOL] if len ( arg_spec . args ) != allowed_args_len : [EOL] raise ValueError ( [string] . format ( listener ) ) [EOL] annotated_arg = arg_spec . annotations . get ( arg_spec . args [ - [number] ] ) [EOL] return annotated_arg [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from pybuses . command_bus import CommandBus [EOL] from pybuses . event_bus import EventBus [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import builtins [EOL] import typing [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( ) def exemplary_command ( ) : [EOL] class Example : [EOL] def __init__ ( self , data ) : [EOL] self . data = data [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . __class__ . __name__ , self . data ) [EOL] [EOL] return Example [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Callable , Generator , Tuple , Any , Type [EOL] import pybuses [EOL] import unittest [EOL] import typing [EOL] import contextlib [EOL] import typing [EOL] from unittest import mock [EOL] [EOL] import pytest [EOL] [EOL] import pybuses [EOL] [EOL] [EOL] @ pytest . fixture ( ) def command_bus ( ) : [EOL] return pybuses . CommandBus ( ) [EOL] [EOL] [EOL] def test_should_execute_command ( command_bus , exemplary_command ) : [EOL] a_mock = mock . Mock ( ) [EOL] [EOL] def handler ( command ) : [comment] [EOL] a_mock ( command ) [EOL] [EOL] command_bus . subscribe ( handler ) [EOL] [EOL] command = exemplary_command ( [string] ) [EOL] command_bus . handle ( command ) [EOL] [EOL] a_mock . assert_called_once_with ( command ) [EOL] [EOL] [EOL] def test_should_raise_exception_if_handler_has_not_been_registered ( command_bus , exemplary_command ) : [EOL] command = exemplary_command ( [string] ) [EOL] [EOL] with pytest . raises ( Exception ) : [EOL] command_bus . handle ( command ) [EOL] [EOL] [EOL] def test_should_not_allow_for_multiple_handlers ( command_bus , exemplary_command ) : [EOL] def handler ( _command ) : [comment] [EOL] pass [EOL] [EOL] command_bus . subscribe ( handler ) [EOL] [EOL] with pytest . raises ( Exception ) : [EOL] command_bus . subscribe ( handler ) [EOL] [EOL] [EOL] def create_middleware_and_mock ( ) : [EOL] middleware_mock = mock . Mock ( ) [EOL] [EOL] @ contextlib . contextmanager def my_middleware ( command ) : [comment] [EOL] yield [EOL] middleware_mock ( command ) [EOL] [EOL] return my_middleware , middleware_mock [EOL] [EOL] [EOL] def test_should_call_middleware ( exemplary_command ) : [EOL] middleware , middleware_mock = create_middleware_and_mock ( ) [EOL] [EOL] command_bus = pybuses . CommandBus ( [ middleware ] ) [EOL] [EOL] def handler ( _command ) : [comment] [EOL] pass [EOL] [EOL] command_bus . subscribe ( handler ) [EOL] [EOL] command = exemplary_command ( [string] ) [EOL] command_bus . handle ( command ) [EOL] [EOL] middleware_mock . assert_called_once_with ( command ) [EOL] [EOL] [EOL] def test_should_call_whole_chain ( exemplary_command ) : [EOL] middleware_1 , middleware_mock_1 = create_middleware_and_mock ( ) [EOL] middleware_2 , middleware_mock_2 = create_middleware_and_mock ( ) [EOL] [EOL] command_bus = pybuses . CommandBus ( [ middleware_1 , middleware_2 ] ) [EOL] [EOL] def handler ( _command ) : [comment] [EOL] pass [EOL] [EOL] command_bus . subscribe ( handler ) [EOL] command = exemplary_command ( [string] ) [EOL] command_bus . handle ( command ) [EOL] [EOL] middleware_mock_1 . assert_called_once_with ( command ) [EOL] middleware_mock_2 . assert_called_once_with ( command ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.CommandBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Callable,unittest.mock.Mock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pybuses [EOL] import unittest [EOL] import typing [EOL] import builtins [EOL] import typing [EOL] from unittest import mock [EOL] [EOL] import pytest [EOL] [EOL] from pybuses import EventBus [EOL] from pybuses . types import ( Listener , Subscribable , ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def event_bus ( ) : [EOL] return EventBus ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def event_class ( ) : [EOL] return type ( [string] ) [EOL] [EOL] [EOL] def test_should_run_listener ( event_bus , event_class ) : [EOL] a_mock = mock . Mock ( ) [EOL] [EOL] def handler ( event ) : [comment] [EOL] a_mock ( event ) [EOL] [EOL] event_bus . subscribe ( handler ) [EOL] an_event = event_class ( ) [comment] [EOL] event_bus . post ( an_event ) [EOL] [EOL] a_mock . assert_called_once_with ( an_event ) [EOL] [EOL] [EOL] def test_should_not_allow_adding_invalid_subscriber ( event_bus , event_class ) : [EOL] def invalid_handler ( _event , _another_arg ) : [comment] [EOL] pass [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] event_bus . subscribe ( invalid_handler ) [comment] [EOL] [EOL] [EOL] def test_should_support_methods ( event_bus , event_class ) : [EOL] a_mock = mock . Mock ( ) [EOL] [EOL] class SomeClass : [EOL] def __init__ ( self ) : [EOL] event_bus . subscribe ( self . some_listener ) [EOL] [EOL] def some_listener ( self , event ) : [comment] [EOL] a_mock ( event ) [EOL] [EOL] SomeClass ( ) [EOL] an_event = event_class ( ) [comment] [EOL] event_bus . post ( an_event ) [EOL] [EOL] a_mock . assert_called_once_with ( an_event ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.EventBus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pybuses.types.Subscribable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $event_class$ 0 0 0 0 0 0 $event_class$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0