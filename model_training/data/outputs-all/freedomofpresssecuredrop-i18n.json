[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , Tuple , List [EOL] import typing [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] on_rtd = os . environ . get ( [string] , None ) == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if on_rtd : [EOL] html_theme = [string] [EOL] else : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import sphinx_rtd_theme [EOL] html_theme = [string] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_logo = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , author , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] linkcheck_retries = [number] [EOL] [EOL] linkcheck_ignore = [ [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] from datetime import datetime [EOL] import os [EOL] import tarfile [EOL] [EOL] [EOL] def main ( ) : [EOL] backup_filename = [string] . format ( datetime . utcnow ( ) . strftime ( [string] ) ) [EOL] [EOL] [comment] [EOL] sd_data = [string] [EOL] [EOL] sd_code = [string] [EOL] sd_config = os . path . join ( sd_code , [string] ) [EOL] sd_custom_logo = os . path . join ( sd_code , [string] ) [EOL] [EOL] tor_hidden_services = [string] [EOL] torrc = [string] [EOL] [EOL] with tarfile . open ( backup_filename , [string] ) as backup : [EOL] backup . add ( sd_config ) [EOL] backup . add ( sd_custom_logo ) [EOL] backup . add ( sd_data ) [EOL] backup . add ( tor_hidden_services ) [EOL] backup . add ( torrc ) [EOL] [EOL] print ( backup_filename ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import sys [EOL] import os [EOL] import io [EOL] import zipfile [EOL] from datetime import datetime [EOL] [comment] [EOL] sys . path . append ( [string] ) [EOL] import config [comment] [EOL] import gnupg [comment] [EOL] [EOL] TOR_SERVICES = [string] [EOL] TOR_CONFIG = [string] [EOL] [EOL] [EOL] def collect_config_file ( zf ) : [EOL] config_file_path = os . path . join ( config . SECUREDROP_ROOT , [string] ) [EOL] zf . write ( config_file_path ) [EOL] [EOL] [EOL] def collect_securedrop_data_root ( zf ) : [EOL] [comment] [EOL] for root , dirs , files in os . walk ( config . SECUREDROP_DATA_ROOT ) : [EOL] for name in files : [EOL] zf . write ( os . path . join ( root , name ) ) [EOL] [EOL] [EOL] def collect_custom_header_image ( zf ) : [EOL] [comment] [EOL] zf . write ( os . path . join ( config . SECUREDROP_ROOT , [string] ) ) [EOL] [EOL] [EOL] def collect_tor_files ( zf ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for root , dirs , files in os . walk ( TOR_SERVICES ) : [EOL] for name in files : [EOL] zf . write ( os . path . join ( root , name ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] zf . write ( TOR_CONFIG ) [EOL] [EOL] [EOL] def encrypt_zip_file ( zf_fn ) : [EOL] [comment] [EOL] gpg = gnupg . GPG ( binary = [string] , homedir = config . GPG_KEY_DIR ) [EOL] e_fn = [string] . format ( zf_fn ) [EOL] [EOL] stream = io . open ( zf_fn , [string] ) [EOL] gpg . encrypt_file ( stream , config . JOURNALIST_KEY , always_trust = [string] , output = e_fn ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] dt = str ( datetime . utcnow ( ) . strftime ( [string] ) ) [EOL] zf_fn = [string] . format ( dt ) [EOL] with zipfile . ZipFile ( zf_fn , [string] ) as zf : [EOL] collect_config_file ( zf ) [EOL] collect_securedrop_data_root ( zf ) [EOL] collect_custom_header_image ( zf ) [EOL] collect_tor_files ( zf ) [EOL] encrypt_zip_file ( zf_fn ) [EOL] print ( zf_fn ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import base [EOL] import typing [EOL] import install_files [EOL] import pkg [EOL] DOCUMENTATION = [string] [EOL] EXAMPLES = [string] [EOL] [EOL] [EOL] HAS_REQUESTS = True [EOL] try : [EOL] import requests [comment] [EOL] except ImportError : [EOL] HAS_REQUESTS = False [EOL] [EOL] [EOL] class OSSECURLs ( ) : [EOL] [EOL] def __init__ ( self , ossec_version ) : [EOL] self . REPO_URL = [string] [EOL] self . ossec_version = ossec_version [EOL] self . ansible_facts = dict ( ossec_version = self . ossec_version , ossec_tarball_filename = self . ossec_tarball_filename , ossec_tarball_url = self . ossec_tarball_url , ossec_signature_filename = self . ossec_signature_filename , ossec_signature_url = self . ossec_signature_url , ) [EOL] [EOL] @ property def ossec_tarball_filename ( self ) : [EOL] return [string] . format ( self . ossec_version ) [EOL] [EOL] @ property def ossec_tarball_url ( self ) : [EOL] return self . REPO_URL + [string] . format ( self . ossec_version ) [EOL] [EOL] @ property def ossec_signature_url ( self ) : [EOL] return self . REPO_URL + [string] . format ( self . ossec_version , self . ossec_signature_filename ) [EOL] [EOL] @ property def ossec_signature_filename ( self ) : [EOL] return [string] . format ( self . ossec_version ) [EOL] [EOL] [EOL] def main ( ) : [EOL] module = AnsibleModule ( argument_spec = dict ( ossec_version = dict ( default = [string] ) , ) , supports_check_mode = False ) [EOL] if not HAS_REQUESTS : [EOL] module . fail_json ( msg = [string] ) [EOL] [EOL] ossec_version = module . params [ [string] ] [EOL] try : [EOL] ossec_config = OSSECURLs ( ossec_version = ossec_version ) [EOL] except Exception : [EOL] msg = ( [string] [string] [string] [string] . format ( ossec_version ) ) [EOL] module . fail_json ( msg = msg ) [EOL] [EOL] results = ossec_config . ansible_facts [EOL] [EOL] if results : [EOL] module . exit_json ( changed = False , ansible_facts = results ) [EOL] else : [EOL] msg = [string] [EOL] module . fail_json ( msg = msg ) [EOL] [EOL] [EOL] from ansible . module_utils . basic import * [comment] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Pattern , Optional , Set , Match [EOL] import typing [EOL] from __future__ import print_function [EOL] [EOL] import os [EOL] import re [EOL] import sys [EOL] [EOL] [EOL] def get_tor_versions ( path ) : [EOL] [docstring] [EOL] service_re = re . compile ( [string] ) [EOL] versions = set ( [ ] ) [EOL] with open ( path ) as f : [EOL] for line in f : [EOL] m = service_re . match ( line ) [EOL] if m : [EOL] service = m . group ( [number] ) [EOL] if [string] in service : [EOL] versions . add ( [number] ) [EOL] else : [EOL] versions . add ( [number] ) [EOL] [EOL] return versions [EOL] [EOL] [EOL] def strset ( s ) : [EOL] [docstring] [EOL] return [string] . join ( str ( v ) for v in sorted ( s ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] tempdir = sys . argv [ [number] ] [EOL] [EOL] server_versions = get_tor_versions ( os . path . join ( tempdir , [string] ) ) [EOL] backup_versions = get_tor_versions ( os . path . join ( tempdir , [string] ) ) [EOL] [EOL] if server_versions == backup_versions : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] print ( [string] . format ( strset ( server_versions ) ) ) [EOL] [EOL] print ( [string] . format ( strset ( backup_versions ) ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import subprocess [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] import subprocess [EOL] import sys [EOL] [EOL] [EOL] IPTABLES_RULES_UNCONFIGURED = { [string] : [ [string] , [string] , [string] ] } [EOL] [EOL] [EOL] IPTABLES_RULES_DEFAULT_DROP = { [string] : [ [string] , [string] , [string] , ] , [string] : [ [string] , ] , [string] : [ [string] , ] , [string] : [ ( [string] [string] ) , [string] , [string] , [string] , ] } [EOL] [EOL] [EOL] def list_iptables_rules ( ) : [EOL] result = subprocess . run ( [ [string] , [string] ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] rules = result . stdout . decode ( [string] ) . splitlines ( ) [EOL] policies = [ r for r in rules if r . startswith ( [string] ) ] [EOL] input_rules = [ r for r in rules if r . startswith ( [string] ) ] [EOL] output_rules = [ r for r in rules if r . startswith ( [string] ) ] [EOL] logndrop_rules = [ r for r in rules if r . startswith ( [string] ) ] [EOL] return { [string] : rules , [string] : policies , [string] : input_rules , [string] : output_rules , [string] : logndrop_rules , } [EOL] [EOL] [EOL] def check_iptables_are_default ( rules ) : [EOL] if rules [ [string] ] == IPTABLES_RULES_UNCONFIGURED : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def check_iptables_default_drop ( rules ) : [EOL] for chain , chain_rules in IPTABLES_RULES_DEFAULT_DROP . items ( ) : [EOL] for i , rule in enumerate ( reversed ( chain_rules ) , [number] ) : [EOL] try : [EOL] if rules [ chain ] [ - i ] != rule : [EOL] raise ValueError ( [string] ) [EOL] except ( KeyError , IndexError ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def check_iptables_rules ( ) : [EOL] rules = list_iptables_rules ( ) [EOL] check_iptables_are_default ( rules ) [EOL] check_iptables_default_drop ( rules ) [EOL] [EOL] [EOL] def check_system_configuration ( args ) : [EOL] print ( [string] ) [EOL] try : [EOL] check_iptables_rules ( ) [EOL] except ValueError as e : [EOL] print ( [string] , e ) [EOL] sys . exit ( [number] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] args = parser . parse_args ( ) [EOL] check_system_configuration ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Pattern , Dict , Set , OrderedDict , List [EOL] import collections [EOL] import typing [EOL] from flask import request , session [EOL] from flask_babel import Babel [EOL] from babel import core [EOL] [EOL] import collections [EOL] import os [EOL] import re [EOL] [EOL] from os import path [EOL] [EOL] LOCALE_SPLIT = re . compile ( [string] ) [EOL] LOCALES = [ [string] ] [EOL] babel = None [EOL] [EOL] [EOL] class LocaleNotFound ( Exception ) : [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def setup_app ( config , app ) : [EOL] global LOCALES [EOL] global babel [EOL] [EOL] translation_dirs = getattr ( config , [string] , None ) [EOL] [EOL] if translation_dirs is None : [EOL] translation_dirs = path . join ( path . dirname ( path . realpath ( __file__ ) ) , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] app . config [ [string] ] = translation_dirs [EOL] [EOL] babel = Babel ( app ) [EOL] if len ( list ( babel . translation_directories ) ) != [number] : [EOL] raise AssertionError ( [string] . format ( babel . translation_directories ) ) [EOL] [EOL] translation_directories = next ( babel . translation_directories ) [EOL] for dirname in os . listdir ( translation_directories ) : [EOL] if dirname != [string] : [EOL] LOCALES . append ( dirname ) [EOL] [EOL] LOCALES = _get_supported_locales ( LOCALES , getattr ( config , [string] , None ) , getattr ( config , [string] , None ) , translation_directories ) [EOL] [EOL] babel . localeselector ( lambda : get_locale ( config ) ) [EOL] [EOL] [EOL] def get_locale ( config ) : [EOL] [docstring] [EOL] locale = None [EOL] accept_languages = [ ] [EOL] for l in list ( request . accept_languages . values ( ) ) : [EOL] if [string] in l : [EOL] sep = [string] [EOL] else : [EOL] sep = [string] [EOL] try : [EOL] accept_languages . append ( str ( core . Locale . parse ( l , sep ) ) ) [EOL] except Exception : [EOL] pass [EOL] if [string] in request . args : [EOL] if len ( request . args [ [string] ] ) == [number] : [EOL] if [string] in session : [EOL] del session [ [string] ] [EOL] locale = core . negotiate_locale ( accept_languages , LOCALES ) [EOL] else : [EOL] locale = core . negotiate_locale ( [ request . args [ [string] ] ] , LOCALES ) [EOL] session [ [string] ] = locale [EOL] else : [EOL] if [string] in session : [EOL] locale = session [ [string] ] [EOL] else : [EOL] locale = core . negotiate_locale ( accept_languages , LOCALES ) [EOL] [EOL] if locale : [EOL] return locale [EOL] else : [EOL] return getattr ( config , [string] , [string] ) [EOL] [EOL] [EOL] def get_text_direction ( locale ) : [EOL] return core . Locale . parse ( locale ) . text_direction [EOL] [EOL] [EOL] def _get_supported_locales ( locales , supported , default_locale , translation_directories ) : [EOL] [docstring] [EOL] [EOL] if not supported : [EOL] return [ default_locale or [string] ] [EOL] unsupported = set ( supported ) - set ( locales ) [EOL] if unsupported : [EOL] raise LocaleNotFound ( [string] [string] . format ( list ( unsupported ) , translation_directories , locales ) ) [EOL] if default_locale and default_locale not in supported : [EOL] raise LocaleNotFound ( [string] [string] [string] . format ( supported , default_locale ) ) [EOL] [EOL] return list ( supported ) [EOL] [EOL] [EOL] NAME_OVERRIDES = { [string] : [string] , } [EOL] [EOL] [EOL] def get_locale2name ( ) : [EOL] locale2name = collections . OrderedDict ( ) [EOL] for l in LOCALES : [EOL] if l in NAME_OVERRIDES : [EOL] locale2name [ l ] = NAME_OVERRIDES [ l ] [EOL] else : [EOL] locale = core . Locale . parse ( l ) [EOL] locale2name [ l ] = locale . languages [ locale . language ] [EOL] return locale2name [EOL] [EOL] [EOL] def locale_to_rfc_5646 ( locale ) : [EOL] lower = locale . lower ( ) [EOL] if [string] in lower : [EOL] return [string] [EOL] elif [string] in lower : [EOL] return [string] [EOL] else : [EOL] return LOCALE_SPLIT . split ( locale ) [ [number] ] [EOL] [EOL] [EOL] def get_language ( config ) : [EOL] return get_locale ( config ) . split ( [string] ) [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from io import BytesIO [EOL] [EOL] from flask import wrappers [EOL] [EOL] from secure_tempfile import SecureTemporaryFile [EOL] [EOL] [EOL] class RequestThatSecuresFileUploads ( wrappers . Request ) : [EOL] [EOL] def _secure_file_stream ( self , total_content_length , content_type , filename = None , content_length = None ) : [EOL] [docstring] [EOL] if total_content_length > [number] * [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return SecureTemporaryFile ( [string] ) [comment] [EOL] return BytesIO ( ) [EOL] [EOL] def make_form_data_parser ( self ) : [EOL] return self . form_data_parser_class ( self . _secure_file_stream , self . charset , self . encoding_errors , self . max_form_memory_size , self . max_content_length , self . parameter_storage_class ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import base64 [EOL] import os [EOL] import io [EOL] from tempfile import _TemporaryFileWrapper [comment] [EOL] [EOL] from pretty_bad_protocol . _util import _STREAMLIKE_TYPES [EOL] from cryptography . exceptions import AlreadyFinalized [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives . ciphers . algorithms import AES [EOL] from cryptography . hazmat . primitives . ciphers . modes import CTR [EOL] from cryptography . hazmat . primitives . ciphers import Cipher [EOL] [EOL] [EOL] class SecureTemporaryFile ( _TemporaryFileWrapper , object ) : [EOL] [docstring] [EOL] AES_key_size = [number] [EOL] AES_block_size = [number] [EOL] [EOL] def __init__ ( self , store_dir ) : [EOL] [docstring] [EOL] self . last_action = [string] [EOL] self . create_key ( ) [EOL] [EOL] data = base64 . urlsafe_b64encode ( os . urandom ( [number] ) ) [EOL] self . tmp_file_id = data . decode ( [string] ) . strip ( [string] ) [EOL] [EOL] self . filepath = os . path . join ( store_dir , [string] . format ( self . tmp_file_id ) ) [EOL] self . file = io . open ( self . filepath , [string] ) [EOL] super ( SecureTemporaryFile , self ) . __init__ ( self . file , self . filepath ) [EOL] [EOL] def create_key ( self ) : [EOL] [docstring] [EOL] self . key = os . urandom ( self . AES_key_size // [number] ) [EOL] self . iv = os . urandom ( self . AES_block_size // [number] ) [EOL] self . initialize_cipher ( ) [EOL] [EOL] def initialize_cipher ( self ) : [EOL] [docstring] [EOL] self . cipher = Cipher ( AES ( self . key ) , CTR ( self . iv ) , default_backend ( ) ) [EOL] self . encryptor = self . cipher . encryptor ( ) [EOL] self . decryptor = self . cipher . decryptor ( ) [EOL] [EOL] def write ( self , data ) : [EOL] [docstring] [EOL] if self . last_action == [string] : [EOL] raise AssertionError ( [string] ) [EOL] self . last_action = [string] [EOL] [EOL] if isinstance ( data , str ) : [EOL] data = data . encode ( [string] ) [EOL] [EOL] self . file . write ( self . encryptor . update ( data ) ) [EOL] [EOL] def read ( self , count = None ) : [EOL] [docstring] [EOL] if self . last_action == [string] : [EOL] raise AssertionError ( [string] ) [EOL] if self . last_action == [string] : [EOL] self . seek ( [number] , [number] ) [EOL] self . last_action = [string] [EOL] [EOL] if count : [EOL] return self . decryptor . update ( self . file . read ( count ) ) [EOL] else : [EOL] return self . decryptor . update ( self . file . read ( ) ) [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] try : [EOL] self . decryptor . finalize ( ) [EOL] except AlreadyFinalized : [EOL] pass [EOL] [EOL] [comment] [EOL] [comment] [EOL] super ( SecureTemporaryFile , self ) . close ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _STREAMLIKE_TYPES . append ( _TemporaryFileWrapper ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] db = SQLAlchemy ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Set , List [EOL] import typing [EOL] import builtins [EOL] import errno [EOL] import logging [EOL] import os [EOL] import subprocess [EOL] [EOL] [EOL] def shred ( path , delete = True ) : [EOL] [docstring] [EOL] [EOL] if not os . path . exists ( path ) : [EOL] raise EnvironmentError ( path ) [EOL] [EOL] if not os . path . isfile ( path ) : [EOL] raise ValueError ( [string] ) [EOL] cmd = [ [string] , [string] , [string] , [string] ] [EOL] if delete : [EOL] cmd . append ( [string] ) [EOL] cmd . append ( path ) [EOL] subprocess . check_call ( cmd ) [EOL] [EOL] [EOL] def secure_delete ( path ) : [EOL] [docstring] [EOL] path = os . path . abspath ( path ) [EOL] [EOL] directories = [ ] [EOL] targets = [ ] [EOL] if not os . path . isdir ( path ) : [EOL] targets . append ( path ) [EOL] else : [EOL] for directory , subdirs , files in os . walk ( path ) : [EOL] directories . append ( directory ) [EOL] directories . extend ( [ os . path . abspath ( os . path . join ( directory , s ) ) for s in subdirs ] ) [EOL] for f in files : [EOL] targets . append ( os . path . abspath ( os . path . join ( directory , f ) ) ) [EOL] [EOL] for t in targets : [EOL] shred ( t ) [EOL] [EOL] directories_to_remove = set ( directories ) [EOL] for d in reversed ( sorted ( directories_to_remove ) ) : [EOL] os . rmdir ( d ) [EOL] [EOL] [EOL] def check_secure_delete_capability ( ) : [EOL] [docstring] [EOL] try : [EOL] subprocess . check_output ( [ [string] , [string] ] ) [EOL] return True [EOL] except EnvironmentError as e : [EOL] if e . errno != errno . ENOENT : [EOL] raise [EOL] logging . error ( [string] ) [EOL] except subprocess . CalledProcessError as e : [EOL] logging . error ( [string] , e , e . output ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] strings = [ [string] , [string] + [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import markupsafe [EOL] import typing [EOL] from flask_babel import gettext , get_locale [EOL] from babel import units , dates [EOL] from datetime import datetime [EOL] from jinja2 import Markup , escape [EOL] import math [EOL] [EOL] [EOL] def rel_datetime_format ( dt , fmt = None , relative = False ) : [EOL] [docstring] [EOL] if relative : [EOL] time = dates . format_timedelta ( datetime . utcnow ( ) - dt , locale = get_locale ( ) ) [EOL] return gettext ( [string] ) . format ( time = time ) [EOL] else : [EOL] fmt = fmt or [string] [EOL] return dates . format_datetime ( dt , fmt , locale = get_locale ( ) ) [EOL] [EOL] [EOL] def nl2br ( context , value ) : [EOL] formatted = [string] . join ( escape ( value ) . split ( [string] ) ) [EOL] if context . autoescape : [EOL] formatted = Markup ( formatted ) [EOL] return formatted [EOL] [EOL] [EOL] def filesizeformat ( value ) : [EOL] prefixes = [ [string] , [string] , [string] , [string] , ] [EOL] locale = get_locale ( ) [EOL] base = [number] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if value < base : [EOL] return units . format_unit ( value , [string] , locale = locale , length = [string] ) [EOL] else : [EOL] i = min ( int ( math . log ( value , base ) ) , len ( prefixes ) ) - [number] [EOL] prefix = prefixes [ i ] [EOL] bytes = float ( value ) / base ** ( i + [number] ) [EOL] return units . format_unit ( bytes , prefix , locale = locale , length = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] import rm [EOL] [EOL] [EOL] def test_secure_delete_capability ( config ) : [EOL] assert rm . check_secure_delete_capability ( ) is True [EOL] [EOL] path = os . environ [ [string] ] [EOL] try : [EOL] os . environ [ [string] ] = [string] . format ( [string] , config . TEMP_DIR ) [EOL] assert rm . check_secure_delete_capability ( ) is False [EOL] fakeshred = os . path . join ( config . TEMP_DIR , [string] ) [EOL] with open ( fakeshred , [string] ) as f : [EOL] f . write ( [string] ) [EOL] os . chmod ( fakeshred , [number] ) [EOL] assert rm . check_secure_delete_capability ( ) is False [EOL] finally : [EOL] os . environ [ [string] ] = path [EOL] [EOL] [EOL] def test_shred ( config ) : [EOL] testfile = [string] [EOL] content = [string] [EOL] [EOL] [comment] [EOL] with pytest . raises ( EnvironmentError ) : [EOL] rm . shred ( os . path . abspath ( os . path . join ( config . TEMP_DIR , [string] ) ) ) [EOL] [EOL] [comment] [EOL] d = os . path . abspath ( os . path . join ( config . TEMP_DIR , [string] ) ) [EOL] os . makedirs ( d ) [EOL] with pytest . raises ( ValueError ) : [EOL] rm . shred ( d ) [EOL] os . rmdir ( d ) [EOL] [EOL] with open ( testfile , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] with open ( testfile ) as f : [EOL] read_content = f . read ( ) [EOL] assert read_content == content [EOL] [EOL] [comment] [EOL] rm . shred ( testfile , delete = False ) [EOL] [EOL] with open ( testfile ) as f : [EOL] read_content = f . read ( ) [EOL] assert read_content != content [EOL] [EOL] [comment] [EOL] rm . shred ( testfile ) [EOL] assert os . path . exists ( testfile ) is False [EOL] [EOL] [EOL] def test_secure_delete ( config ) : [EOL] content = [string] [EOL] testfile = [string] [EOL] [EOL] [comment] [EOL] testfile1 = os . path . abspath ( os . path . join ( config . TEMP_DIR , testfile ) ) [EOL] with open ( testfile1 , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] assert os . path . exists ( testfile1 ) [EOL] rm . secure_delete ( testfile1 ) [EOL] assert os . path . exists ( testfile1 ) is False [EOL] [EOL] [comment] [EOL] testdir = os . path . abspath ( os . path . join ( config . TEMP_DIR , [string] ) ) [EOL] testsubdir1 = os . path . abspath ( os . path . join ( testdir , [string] ) ) [EOL] testsubdir2 = os . path . abspath ( os . path . join ( testdir , [string] ) ) [EOL] [EOL] os . makedirs ( testsubdir1 ) [EOL] os . makedirs ( testsubdir2 ) [EOL] [EOL] testfile1 = os . path . abspath ( os . path . join ( testdir , testfile ) ) [EOL] with open ( testfile1 , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] testfile2 = os . path . abspath ( os . path . join ( testsubdir1 , testfile ) ) [EOL] with open ( testfile2 , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] assert os . path . exists ( testfile1 ) [EOL] assert os . path . exists ( testfile2 ) [EOL] [EOL] rm . secure_delete ( testdir ) [EOL] [EOL] assert os . path . exists ( testfile1 ) is False [EOL] assert os . path . exists ( testfile2 ) is False [EOL] assert os . path . exists ( testsubdir1 ) is False [EOL] assert os . path . exists ( testsubdir2 ) is False [EOL] assert os . path . exists ( testdir ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime [EOL] from hypothesis import given [EOL] from hypothesis . strategies import text [EOL] import io [EOL] import os [EOL] import pytest [EOL] import re [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] import crypto_util [EOL] import models [EOL] [EOL] from crypto_util import CryptoUtil , CryptoException [EOL] from db import db [EOL] [EOL] [EOL] def test_word_list_does_not_contain_empty_strings ( journalist_app ) : [EOL] assert [string] not in journalist_app . crypto_util . get_wordlist ( [string] ) [EOL] assert [string] not in journalist_app . crypto_util . nouns [EOL] assert [string] not in journalist_app . crypto_util . adjectives [EOL] [EOL] [EOL] def test_clean ( ) : [EOL] ok = ( [string] [string] ) [EOL] invalids = [ [string] , [string] ] [EOL] [EOL] assert crypto_util . clean ( ok ) == ok [EOL] [EOL] for invalid in invalids : [EOL] with pytest . raises ( CryptoException ) as err : [EOL] crypto_util . clean ( invalid ) [EOL] assert [string] . format ( invalid ) in str ( err ) [EOL] [EOL] [EOL] def test_encrypt_success ( source_app , config , test_source ) : [EOL] message = [string] [EOL] [EOL] with source_app . app_context ( ) : [EOL] ciphertext = source_app . crypto_util . encrypt ( message , [ source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) , config . JOURNALIST_KEY ] , source_app . storage . path ( test_source [ [string] ] , [string] ) ) [EOL] [EOL] assert isinstance ( ciphertext , bytes ) [EOL] assert ciphertext . decode ( [string] ) != message [EOL] assert len ( ciphertext ) > [number] [EOL] [EOL] [EOL] def test_encrypt_failure ( source_app , test_source ) : [EOL] with source_app . app_context ( ) : [EOL] with pytest . raises ( CryptoException ) as err : [EOL] source_app . crypto_util . encrypt ( str ( os . urandom ( [number] ) ) , [ ] , source_app . storage . path ( test_source [ [string] ] , [string] ) ) [EOL] assert [string] in str ( err ) [EOL] [EOL] [EOL] def test_encrypt_without_output ( source_app , config , test_source ) : [EOL] [docstring] [EOL] message = [string] [EOL] with source_app . app_context ( ) : [EOL] ciphertext = source_app . crypto_util . encrypt ( message , [ source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) , config . JOURNALIST_KEY ] ) [EOL] plaintext = source_app . crypto_util . decrypt ( test_source [ [string] ] , ciphertext ) [EOL] [EOL] assert plaintext == message [EOL] [EOL] [EOL] def test_encrypt_binary_stream ( source_app , config , test_source ) : [EOL] [docstring] [EOL] with source_app . app_context ( ) : [EOL] with io . open ( os . path . realpath ( __file__ ) ) as fh : [EOL] ciphertext = source_app . crypto_util . encrypt ( fh , [ source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) , config . JOURNALIST_KEY ] , source_app . storage . path ( test_source [ [string] ] , [string] ) ) [EOL] plaintext = source_app . crypto_util . decrypt ( test_source [ [string] ] , ciphertext ) [EOL] [EOL] with io . open ( os . path . realpath ( __file__ ) ) as fh : [EOL] assert fh . read ( ) == plaintext [EOL] [EOL] [EOL] def test_encrypt_fingerprints_not_a_list_or_tuple ( source_app , test_source ) : [EOL] [docstring] [EOL] message = [string] [EOL] [EOL] with source_app . app_context ( ) : [EOL] ciphertext = source_app . crypto_util . encrypt ( message , source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) , source_app . storage . path ( test_source [ [string] ] , [string] ) ) [EOL] plaintext = source_app . crypto_util . decrypt ( test_source [ [string] ] , ciphertext ) [EOL] [EOL] assert plaintext == message [EOL] [EOL] [EOL] def test_basic_encrypt_then_decrypt_multiple_recipients ( source_app , config , test_source ) : [EOL] message = [string] [EOL] [EOL] with source_app . app_context ( ) : [EOL] ciphertext = source_app . crypto_util . encrypt ( message , [ source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) , config . JOURNALIST_KEY ] , source_app . storage . path ( test_source [ [string] ] , [string] ) ) [EOL] plaintext = source_app . crypto_util . decrypt ( test_source [ [string] ] , ciphertext ) [EOL] [EOL] assert plaintext == message [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_app . crypto_util . delete_reply_keypair ( test_source [ [string] ] ) [EOL] plaintext = source_app . crypto_util . gpg . decrypt ( ciphertext ) . data . decode ( [string] ) [EOL] [EOL] assert plaintext == message [EOL] [EOL] [EOL] def verify_genrandomid ( app , locale ) : [EOL] id = app . crypto_util . genrandomid ( locale = locale ) [EOL] id_words = id . split ( ) [EOL] [EOL] assert crypto_util . clean ( id ) == id [EOL] assert len ( id_words ) == CryptoUtil . DEFAULT_WORDS_IN_RANDOM_ID [EOL] [EOL] for word in id_words : [EOL] assert word in app . crypto_util . get_wordlist ( locale ) [EOL] [EOL] [EOL] def test_genrandomid_default_locale_is_en ( source_app ) : [EOL] verify_genrandomid ( source_app , [string] ) [EOL] [EOL] [EOL] def test_get_wordlist ( source_app , config ) : [EOL] locales = [ ] [EOL] wordlists_path = os . path . join ( config . SECUREDROP_ROOT , [string] ) [EOL] for f in os . listdir ( wordlists_path ) : [EOL] if f . endswith ( [string] ) and f != [string] : [EOL] locales . append ( f . split ( [string] ) [ [number] ] ) [EOL] [EOL] with source_app . app_context ( ) : [EOL] list_en = source_app . crypto_util . get_wordlist ( [string] ) [EOL] for locale in locales : [EOL] assert source_app . crypto_util . get_wordlist ( locale ) != list_en [EOL] verify_genrandomid ( source_app , locale ) [EOL] assert source_app . crypto_util . get_wordlist ( [string] ) == list_en [EOL] [EOL] [EOL] def test_hash_codename ( source_app ) : [EOL] codename = source_app . crypto_util . genrandomid ( ) [EOL] hashed_codename = source_app . crypto_util . hash_codename ( codename ) [EOL] [EOL] assert re . compile ( [string] ) . match ( hashed_codename ) [EOL] [EOL] [EOL] def test_display_id ( source_app ) : [EOL] id = source_app . crypto_util . display_id ( ) [EOL] id_words = id . split ( ) [EOL] [EOL] assert len ( id_words ) == [number] [EOL] assert id_words [ [number] ] in source_app . crypto_util . adjectives [EOL] assert id_words [ [number] ] in source_app . crypto_util . nouns [EOL] [EOL] [EOL] def test_genkeypair ( source_app ) : [EOL] with source_app . app_context ( ) : [EOL] codename = source_app . crypto_util . genrandomid ( ) [EOL] filesystem_id = source_app . crypto_util . hash_codename ( codename ) [EOL] journalist_filename = source_app . crypto_util . display_id ( ) [EOL] source = models . Source ( filesystem_id , journalist_filename ) [EOL] db . session . add ( source ) [EOL] db . session . commit ( ) [EOL] source_app . crypto_util . genkeypair ( source . filesystem_id , codename ) [EOL] [EOL] assert source_app . crypto_util . get_fingerprint ( filesystem_id ) is not None [EOL] [EOL] [EOL] def parse_gpg_date_string ( date_string ) : [EOL] [docstring] [EOL] if [string] in date_string : [EOL] dt = datetime . strptime ( date_string , [string] ) [EOL] else : [EOL] dt = datetime . utcfromtimestamp ( int ( date_string ) ) [EOL] return dt [EOL] [EOL] [EOL] def test_reply_keypair_creation_and_expiration_dates ( source_app ) : [EOL] with source_app . app_context ( ) : [EOL] codename = source_app . crypto_util . genrandomid ( ) [EOL] filesystem_id = source_app . crypto_util . hash_codename ( codename ) [EOL] journalist_filename = source_app . crypto_util . display_id ( ) [EOL] source = models . Source ( filesystem_id , journalist_filename ) [EOL] db . session . add ( source ) [EOL] db . session . commit ( ) [EOL] source_app . crypto_util . genkeypair ( source . filesystem_id , codename ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] new_key_fingerprint = source_app . crypto_util . get_fingerprint ( filesystem_id ) [EOL] new_key = [ key for key in source_app . crypto_util . gpg . list_keys ( ) if new_key_fingerprint == key [ [string] ] ] [ [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] creation_date = parse_gpg_date_string ( new_key [ [string] ] ) [EOL] assert ( creation_date . date ( ) == CryptoUtil . DEFAULT_KEY_CREATION_DATE ) [EOL] [EOL] [comment] [EOL] expire_date = new_key [ [string] ] [EOL] assert expire_date == [string] [EOL] [EOL] [EOL] def test_delete_reply_keypair ( source_app , test_source ) : [EOL] fid = test_source [ [string] ] [EOL] source_app . crypto_util . delete_reply_keypair ( fid ) [EOL] assert source_app . crypto_util . get_fingerprint ( fid ) is None [EOL] [EOL] [EOL] def test_delete_reply_keypair_pinentry_status_is_handled ( source_app , test_source , mocker , capsys ) : [EOL] [docstring] [EOL] fid = test_source [ [string] ] [EOL] [EOL] [comment] [EOL] mocker . patch ( [string] , return_value = ( [string] , [string] ) ) [EOL] [EOL] source_app . crypto_util . delete_reply_keypair ( fid ) [EOL] [EOL] captured = capsys . readouterr ( ) [EOL] assert [string] not in captured . err [EOL] assert source_app . crypto_util . get_fingerprint ( fid ) is None [EOL] [EOL] [EOL] def test_delete_reply_keypair_no_key ( source_app ) : [EOL] [docstring] [EOL] source_app . crypto_util . delete_reply_keypair ( [string] ) [EOL] [EOL] [EOL] def test_delete_reply_keypair_non_source ( source_app ) : [EOL] [docstring] [EOL] name = [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] source_app . crypto_util . delete_reply_keypair ( name ) [EOL] assert [string] in str ( excinfo . value ) [EOL] assert source_app . crypto_util . get_fingerprint ( name ) [EOL] [EOL] [EOL] def test_get_fingerprint ( source_app , test_source ) : [EOL] assert ( source_app . crypto_util . get_fingerprint ( test_source [ [string] ] ) is not None ) [EOL] [EOL] [comment] [EOL] assert source_app . crypto_util . get_fingerprint ( [string] * [number] ) is None [EOL] [EOL] [EOL] def test_get_pubkey ( source_app , test_source ) : [EOL] begin_pgp = [string] [EOL] [EOL] [comment] [EOL] pubkey = source_app . crypto_util . get_pubkey ( test_source [ [string] ] ) [EOL] assert pubkey . startswith ( begin_pgp ) [EOL] [EOL] [comment] [EOL] pubkey = source_app . crypto_util . get_pubkey ( [string] * [number] ) [EOL] assert pubkey is None [EOL] [EOL] [EOL] @ given ( name = text ( alphabet = crypto_util . DICEWARE_SAFE_CHARS ) , secret = text ( alphabet = crypto_util . DICEWARE_SAFE_CHARS ) , message = text ( ) ) def test_encrypt_then_decrypt_gives_same_result ( source_app , test_source , name , secret , message ) : [EOL] [docstring] [EOL] crypto = source_app . crypto_util [EOL] [EOL] key = crypto . genkeypair ( name , secret ) [EOL] ciphertext = crypto . encrypt ( message , str ( key ) ) [EOL] decrypted_text = crypto . decrypt ( secret , ciphertext ) [EOL] [EOL] assert decrypted_text == message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Dict , List [EOL] import itsdangerous [EOL] import typing [EOL] import uuid [EOL] import json [EOL] import os [EOL] import random [EOL] [EOL] from pyotp import TOTP [EOL] from uuid import UUID , uuid4 [EOL] [EOL] from flask import current_app , url_for [EOL] from itsdangerous import TimedJSONWebSignatureSerializer [EOL] [EOL] from db import db [EOL] from models import Journalist , Reply , Source , SourceStar , Submission , RevokedToken [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] from . utils . api_helper import get_api_headers [EOL] [EOL] random . seed ( [string] ) [EOL] [EOL] [EOL] def test_unauthenticated_user_gets_all_endpoints ( journalist_app ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) ) [EOL] [EOL] expected_endpoints = [ [string] , [string] , [string] , [string] , [string] ] [EOL] expected_endpoints . sort ( ) [EOL] sorted_observed_endpoints = list ( response . json . keys ( ) ) [EOL] sorted_observed_endpoints . sort ( ) [EOL] assert expected_endpoints == sorted_observed_endpoints [EOL] [EOL] [EOL] def test_valid_user_can_get_an_api_token ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] valid_token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : test_journo [ [string] ] , [string] : valid_token } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . json [ [string] ] == test_journo [ [string] ] [EOL] assert isinstance ( Journalist . validate_api_token_and_get_user ( response . json [ [string] ] ) , Journalist ) is True [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == test_journo [ [string] ] [EOL] assert response . json [ [string] ] == test_journo [ [string] ] [EOL] [EOL] [EOL] def test_user_cannot_get_an_api_token_with_wrong_password ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] valid_token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : [string] , [string] : valid_token } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_user_cannot_get_an_api_token_with_wrong_2fa_token ( journalist_app , test_journo , hardening ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : test_journo [ [string] ] , [string] : [string] } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_user_cannot_get_an_api_token_with_no_passphase_field ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] valid_token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : valid_token } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_user_cannot_get_an_api_token_with_no_username_field ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] valid_token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : valid_token } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_user_cannot_get_an_api_token_with_no_otp_field ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . post ( url_for ( [string] ) , data = json . dumps ( { [string] : test_journo [ [string] ] , [string] : test_journo [ [string] ] } ) , headers = get_api_headers ( ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_authorized_user_gets_all_sources ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert test_submissions [ [string] ] . journalist_designation == response . json [ [string] ] [ [number] ] [ [string] ] [EOL] [EOL] [EOL] def test_user_without_token_cannot_get_protected_endpoints ( journalist_app , test_files ) : [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_files [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid , submission_uuid = test_files [ [string] ] [ [number] ] . uuid ) , url_for ( [string] , source_uuid = uuid , submission_uuid = test_files [ [string] ] [ [number] ] . uuid ) , url_for ( [string] ) , url_for ( [string] ) , url_for ( [string] , source_uuid = uuid , reply_uuid = test_files [ [string] ] [ [number] ] . uuid ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] ) ] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] response = app . get ( protected_route , headers = get_api_headers ( [string] ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_user_without_token_cannot_del_protected_endpoints ( journalist_app , test_submissions ) : [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_submissions [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid , submission_uuid = test_submissions [ [string] ] [ [number] ] . uuid ) , url_for ( [string] , source_uuid = uuid ) , ] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] response = app . delete ( protected_route , headers = get_api_headers ( [string] ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_attacker_cannot_create_valid_token_with_none_alg ( journalist_app , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] s = TimedJSONWebSignatureSerializer ( [string] , algorithm_name = [string] ) [EOL] attacker_token = s . dumps ( { [string] : test_journo [ [string] ] } ) . decode ( [string] ) [EOL] [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( attacker_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_attacker_cannot_use_token_after_admin_deletes ( journalist_app , test_source , journalist_api_token ) : [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] attacker = Journalist . validate_api_token_and_get_user ( journalist_api_token ) [EOL] [EOL] db . session . delete ( attacker ) [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_user_without_token_cannot_post_protected_endpoints ( journalist_app , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_source [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) ] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] response = app . post ( protected_route , headers = get_api_headers ( [string] ) , data = json . dumps ( { [string] : [string] } ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_api_error_handlers_defined ( journalist_app ) : [EOL] [docstring] [EOL] for status_code in [ [number] , [number] , [number] , [number] , [number] ] : [EOL] result = journalist_app . error_handler_spec [ [string] ] [ status_code ] [EOL] [EOL] expected_error_handler = [string] [EOL] assert list ( result . values ( ) ) [ [number] ] . __name__ == expected_error_handler [EOL] [EOL] [EOL] def test_api_error_handler_404 ( journalist_app , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_trailing_slash_cleanly_404s ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) + [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_authorized_user_gets_single_source ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] == test_source [ [string] ] . uuid [EOL] assert response . json [ [string] ] [ [string] ] == test_source [ [string] ] . fingerprint [EOL] assert [string] in response . json [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def test_get_non_existant_source_404s ( journalist_app , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] , source_uuid = [number] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_authorized_user_can_flag_a_source ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] source_id = test_source [ [string] ] . id [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert Source . query . get ( source_id ) . flagged [EOL] [EOL] [EOL] def test_authorized_user_can_star_a_source ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] source_id = test_source [ [string] ] . id [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert SourceStar . query . filter ( SourceStar . source_id == source_id ) . one ( ) . starred [EOL] [EOL] [comment] [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . json [ [string] ] is True [EOL] [EOL] [EOL] def test_authorized_user_can_unstar_a_source ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] source_id = test_source [ [string] ] . id [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert SourceStar . query . filter ( SourceStar . source_id == source_id ) . one ( ) . starred is False [EOL] [EOL] [comment] [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . json [ [string] ] is False [EOL] [EOL] [EOL] def test_disallowed_methods_produces_405 ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_authorized_user_can_get_all_submissions ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] observed_submissions = [ submission [ [string] ] for submission in response . json [ [string] ] ] [EOL] [EOL] expected_submissions = [ submission . filename for submission in Submission . query . all ( ) ] [EOL] assert observed_submissions == expected_submissions [EOL] [EOL] [EOL] def test_authorized_user_get_all_submissions_with_disconnected_submissions ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] db . session . execute ( [string] , { [string] : test_submissions [ [string] ] . id } ) [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_authorized_user_get_source_submissions ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_submissions [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] observed_submissions = [ submission [ [string] ] for submission in response . json [ [string] ] ] [EOL] [EOL] expected_submissions = [ submission . filename for submission in test_submissions [ [string] ] . submissions ] [EOL] assert observed_submissions == expected_submissions [EOL] [EOL] [EOL] def test_authorized_user_can_get_single_submission ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] submission_uuid = test_submissions [ [string] ] . submissions [ [number] ] . uuid [EOL] uuid = test_submissions [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid , submission_uuid = submission_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] == submission_uuid [EOL] assert response . json [ [string] ] is False [EOL] assert response . json [ [string] ] == test_submissions [ [string] ] . submissions [ [number] ] . filename [EOL] assert response . json [ [string] ] == test_submissions [ [string] ] . submissions [ [number] ] . size [EOL] [EOL] [EOL] def test_authorized_user_can_get_all_replies_with_disconnected_replies ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] db . session . execute ( [string] , { [string] : test_files [ [string] ] . id } ) [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_authorized_user_can_get_all_replies ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] observed_replies = [ reply [ [string] ] for reply in response . json [ [string] ] ] [EOL] [EOL] expected_replies = [ reply . filename for reply in Reply . query . all ( ) ] [EOL] assert observed_replies == expected_replies [EOL] [EOL] [EOL] def test_authorized_user_get_source_replies ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_files [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] observed_replies = [ reply [ [string] ] for reply in response . json [ [string] ] ] [EOL] [EOL] expected_replies = [ reply . filename for reply in test_files [ [string] ] . replies ] [EOL] assert observed_replies == expected_replies [EOL] [EOL] [EOL] def test_authorized_user_can_get_single_reply ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] reply_uuid = test_files [ [string] ] . replies [ [number] ] . uuid [EOL] uuid = test_files [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid , reply_uuid = reply_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] reply = Reply . query . filter ( Reply . uuid == reply_uuid ) . one ( ) [EOL] [EOL] assert response . json [ [string] ] == reply_uuid [EOL] assert response . json [ [string] ] == reply . journalist . username [EOL] assert response . json [ [string] ] == reply . journalist . uuid [EOL] assert response . json [ [string] ] == reply . journalist . first_name [EOL] assert response . json [ [string] ] == reply . journalist . last_name [EOL] assert response . json [ [string] ] is False [EOL] assert response . json [ [string] ] == test_files [ [string] ] . replies [ [number] ] . filename [EOL] assert response . json [ [string] ] == test_files [ [string] ] . replies [ [number] ] . size [EOL] [EOL] [EOL] def test_reply_of_deleted_journalist ( journalist_app , test_files_deleted_journalist , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] reply_uuid = test_files_deleted_journalist [ [string] ] . replies [ [number] ] . uuid [EOL] uuid = test_files_deleted_journalist [ [string] ] . uuid [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid , reply_uuid = reply_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] == reply_uuid [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] == [string] [EOL] assert response . json [ [string] ] is False [EOL] assert response . json [ [string] ] == test_files_deleted_journalist [ [string] ] . replies [ [number] ] . filename [EOL] assert response . json [ [string] ] == test_files_deleted_journalist [ [string] ] . replies [ [number] ] . size [EOL] [EOL] [EOL] def test_authorized_user_can_delete_single_submission ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] submission_uuid = test_submissions [ [string] ] . submissions [ [number] ] . uuid [EOL] uuid = test_submissions [ [string] ] . uuid [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid , submission_uuid = submission_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert Submission . query . filter ( Submission . uuid == submission_uuid ) . all ( ) == [ ] [EOL] [EOL] [EOL] def test_authorized_user_can_delete_single_reply ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] reply_uuid = test_files [ [string] ] . replies [ [number] ] . uuid [EOL] uuid = test_files [ [string] ] . uuid [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid , reply_uuid = reply_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert Reply . query . filter ( Reply . uuid == reply_uuid ) . all ( ) == [ ] [EOL] [EOL] [EOL] def test_authorized_user_can_delete_source_collection ( journalist_app , test_source , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . delete ( url_for ( [string] , source_uuid = uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert Source . query . all ( ) == [ ] [EOL] [EOL] [EOL] def test_authorized_user_can_download_submission ( journalist_app , test_submissions , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] submission_uuid = test_submissions [ [string] ] . submissions [ [number] ] . uuid [EOL] uuid = test_submissions [ [string] ] . uuid [EOL] [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid , submission_uuid = submission_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] submission = Submission . query . get ( test_submissions [ [string] ] . submissions [ [number] ] . id ) [EOL] assert submission . downloaded [EOL] [EOL] [comment] [EOL] assert response . mimetype == [string] [EOL] [EOL] [comment] [EOL] assert response . headers [ [string] ] . startswith ( [string] ) [EOL] [EOL] [EOL] def test_authorized_user_can_download_reply ( journalist_app , test_files , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] reply_uuid = test_files [ [string] ] . replies [ [number] ] . uuid [EOL] uuid = test_files [ [string] ] . uuid [EOL] [EOL] response = app . get ( url_for ( [string] , source_uuid = uuid , reply_uuid = reply_uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] assert response . mimetype == [string] [EOL] [EOL] [comment] [EOL] assert response . headers [ [string] ] . startswith ( [string] ) [EOL] [EOL] [EOL] def test_authorized_user_can_get_current_user_endpoint ( journalist_app , test_journo , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] is False [EOL] assert response . json [ [string] ] == test_journo [ [string] ] [EOL] assert response . json [ [string] ] == test_journo [ [string] ] . uuid [EOL] assert response . json [ [string] ] == test_journo [ [string] ] . first_name [EOL] assert response . json [ [string] ] == test_journo [ [string] ] . last_name [EOL] [EOL] [EOL] def test_request_with_missing_auth_header_triggers_403 ( journalist_app ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = { [string] : [string] , [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_request_with_auth_header_but_no_token_triggers_403 ( journalist_app ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) , headers = { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_unencrypted_replies_get_rejected ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] reply_content = [string] [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = json . dumps ( { [string] : reply_content } ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_authorized_user_can_add_reply ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] source_id = test_source [ [string] ] . id [EOL] uuid = test_source [ [string] ] . uuid [EOL] [EOL] [comment] [EOL] [comment] [EOL] source_key = current_app . crypto_util . get_fingerprint ( test_source [ [string] ] . filesystem_id ) [EOL] reply_content = current_app . crypto_util . gpg . encrypt ( [string] , source_key ) . data [EOL] [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = json . dumps ( { [string] : reply_content . decode ( [string] ) } ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] reply_uuid = UUID ( response . json [ [string] ] ) [EOL] [EOL] [comment] [EOL] reply = Reply . query . filter_by ( uuid = str ( reply_uuid ) ) . one_or_none ( ) [EOL] assert reply is not None [EOL] [EOL] [comment] [EOL] assert response . json [ [string] ] == reply . filename [EOL] [EOL] with journalist_app . app_context ( ) : [comment] [EOL] assert reply . journalist_id == test_journo [ [string] ] [EOL] assert reply . source_id == source_id [EOL] [EOL] [comment] [EOL] assert [string] not in reply . filename [EOL] [EOL] source = Source . query . get ( source_id ) [EOL] [EOL] expected_filename = [string] . format ( source . interaction_count , source . journalist_filename ) [EOL] [EOL] expected_filepath = current_app . storage . path ( source . filesystem_id , expected_filename ) [EOL] [EOL] with open ( expected_filepath , [string] ) as fh : [EOL] saved_content = fh . read ( ) [EOL] [EOL] assert reply_content == saved_content [EOL] [EOL] [EOL] def test_reply_without_content_400 ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = json . dumps ( { [string] : [string] } ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_reply_without_reply_field_400 ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = json . dumps ( { [string] : [string] } ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_reply_without_json_400 ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_reply_with_valid_curly_json_400 ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_reply_with_valid_square_json_400 ( journalist_app , journalist_api_token , test_source , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] uuid = test_source [ [string] ] . uuid [EOL] response = app . post ( url_for ( [string] , source_uuid = uuid ) , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_malformed_json_400 ( journalist_app , journalist_api_token , test_journo , test_source ) : [EOL] [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_source [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) , ] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] [EOL] response = app . post ( protected_route , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_empty_json_400 ( journalist_app , journalist_api_token , test_journo , test_source ) : [EOL] [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_source [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] ) , url_for ( [string] , source_uuid = uuid ) , ] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] [EOL] response = app . post ( protected_route , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . json [ [string] ] == [string] [EOL] [EOL] [EOL] def test_empty_json_20X ( journalist_app , journalist_api_token , test_journo , test_source ) : [EOL] [EOL] with journalist_app . app_context ( ) : [EOL] uuid = test_source [ [string] ] . uuid [EOL] protected_routes = [ url_for ( [string] , source_uuid = uuid ) , url_for ( [string] , source_uuid = uuid ) , ] [EOL] with journalist_app . test_client ( ) as app : [EOL] for protected_route in protected_routes : [EOL] [EOL] response = app . post ( protected_route , data = [string] , headers = get_api_headers ( journalist_api_token ) ) [EOL] [EOL] assert response . status_code in ( [number] , [number] ) [EOL] [EOL] [EOL] def test_set_reply_uuid ( journalist_app , journalist_api_token , test_source ) : [EOL] msg = [string] [EOL] reply_uuid = str ( uuid4 ( ) ) [EOL] req_data = { [string] : reply_uuid , [string] : msg } [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] [comment] [EOL] source_uuid = test_source [ [string] ] [EOL] resp = app . post ( url_for ( [string] , source_uuid = source_uuid ) , data = json . dumps ( req_data ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL] assert resp . json [ [string] ] == reply_uuid [EOL] [EOL] reply = Reply . query . filter_by ( uuid = reply_uuid ) . one_or_none ( ) [EOL] assert reply is not None [EOL] [EOL] len_of_replies = len ( Source . query . get ( test_source [ [string] ] ) . replies ) [EOL] [EOL] [comment] [EOL] source_uuid = test_source [ [string] ] [EOL] resp = app . post ( url_for ( [string] , source_uuid = source_uuid ) , data = json . dumps ( req_data ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] new_len_of_replies = len ( Source . query . get ( test_source [ [string] ] ) . replies ) [EOL] [EOL] assert new_len_of_replies == len_of_replies [EOL] [EOL] [comment] [EOL] req_data [ [string] ] = None [EOL] source_uuid = test_source [ [string] ] [EOL] resp = app . post ( url_for ( [string] , source_uuid = source_uuid ) , data = json . dumps ( req_data ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] new_uuid = resp . json [ [string] ] [EOL] reply = Reply . query . filter_by ( uuid = new_uuid ) . one_or_none ( ) [EOL] assert reply is not None [EOL] [EOL] [comment] [EOL] req_data [ [string] ] = [string] [EOL] source_uuid = test_source [ [string] ] [EOL] resp = app . post ( url_for ( [string] , source_uuid = source_uuid ) , data = json . dumps ( req_data ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_api_does_not_set_cookie_headers ( journalist_app , test_journo ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] ) ) [EOL] [EOL] observed_headers = response . headers [EOL] assert [string] not in list ( observed_headers . keys ( ) ) [EOL] if [string] in list ( observed_headers . keys ( ) ) : [EOL] assert [string] not in observed_headers [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] def test_malformed_auth_token ( journalist_app , journalist_api_token ) : [EOL] with journalist_app . app_context ( ) : [EOL] [comment] [EOL] url = url_for ( [string] ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] [comment] [EOL] resp = app . get ( url , headers = { [string] : [string] . format ( journalist_api_token ) } ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = app . get ( url , headers = { [string] : [string] . format ( journalist_api_token ) } ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = app . get ( url , headers = { [string] : journalist_api_token } ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = app . get ( url , headers = { [string] : [string] . format ( journalist_api_token ) } ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_submission_download_generates_checksum ( journalist_app , journalist_api_token , test_source , test_submissions , mocker ) : [EOL] submission = test_submissions [ [string] ] [ [number] ] [EOL] assert submission . checksum is None [comment] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] , source_uuid = test_source [ [string] ] , submission_uuid = submission . uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] assert response . headers [ [string] ] [EOL] [EOL] [comment] [EOL] fetched_submission = Submission . query . get ( submission . id ) [EOL] assert fetched_submission . checksum [EOL] [EOL] mock_add_checksum = mocker . patch ( [string] ) [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] , source_uuid = test_source [ [string] ] , submission_uuid = submission . uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] assert response . headers [ [string] ] [EOL] [EOL] fetched_submission = Submission . query . get ( submission . id ) [EOL] assert fetched_submission . checksum [EOL] [comment] [EOL] assert not mock_add_checksum . called [EOL] [EOL] [EOL] def test_reply_download_generates_checksum ( journalist_app , journalist_api_token , test_source , test_files , mocker ) : [EOL] reply = test_files [ [string] ] [ [number] ] [EOL] assert reply . checksum is None [comment] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] , source_uuid = test_source [ [string] ] , reply_uuid = reply . uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] assert response . headers [ [string] ] [EOL] [EOL] [comment] [EOL] fetched_reply = Reply . query . get ( reply . id ) [EOL] assert fetched_reply . checksum [EOL] [EOL] mock_add_checksum = mocker . patch ( [string] ) [EOL] with journalist_app . test_client ( ) as app : [EOL] response = app . get ( url_for ( [string] , source_uuid = test_source [ [string] ] , reply_uuid = reply . uuid ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert response . status_code == [number] [EOL] assert response . headers [ [string] ] [EOL] [EOL] fetched_reply = Reply . query . get ( reply . id ) [EOL] assert fetched_reply . checksum [EOL] [comment] [EOL] assert not mock_add_checksum . called [EOL] [EOL] [EOL] def test_revoke_token ( journalist_app , test_journo , journalist_api_token ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] [comment] [EOL] resp = app . post ( url_for ( [string] ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = app . post ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] revoked_token = RevokedToken . query . filter_by ( token = journalist_api_token ) . one ( ) [EOL] assert revoked_token . journalist_id == test_journo [ [string] ] [EOL] [EOL] resp = app . get ( url_for ( [string] ) , headers = get_api_headers ( journalist_api_token ) ) [EOL] assert resp . status_code == [number] [EOL]	
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import mock [EOL] import pytest [EOL] [EOL] from mock import MagicMock [EOL] [EOL] from . utils import db_helper [EOL] from models import ( Journalist , Submission , Reply , Source , get_one_or_else , LoginThrottledException ) [EOL] [EOL] [EOL] def test_source_public_key_setter_unimplemented ( journalist_app , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] source = Source . query . first ( ) [EOL] with pytest . raises ( NotImplementedError ) : [EOL] source . public_key = [string] [EOL] [EOL] [EOL] def test_source_public_key_delete_unimplemented ( journalist_app , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] source = Source . query . first ( ) [EOL] with pytest . raises ( NotImplementedError ) : [EOL] del source . public_key [EOL] [EOL] [EOL] def test_get_one_or_else_returns_one ( journalist_app , test_journo ) : [EOL] with journalist_app . app_context ( ) : [EOL] [comment] [EOL] assert Journalist . query . count ( ) == [number] [EOL] [EOL] query = Journalist . query . filter_by ( username = test_journo [ [string] ] ) [EOL] selected_journo = get_one_or_else ( query , MagicMock ( ) , MagicMock ( ) ) [EOL] [EOL] assert selected_journo . id == test_journo [ [string] ] [EOL] [EOL] [EOL] def test_get_one_or_else_multiple_results ( journalist_app , test_admin , test_journo ) : [EOL] with journalist_app . app_context ( ) : [EOL] [comment] [EOL] assert Journalist . query . count ( ) == [number] [EOL] [EOL] mock_logger = MagicMock ( ) [EOL] mock_abort = MagicMock ( ) [EOL] [EOL] [comment] [EOL] query = Journalist . query [EOL] get_one_or_else ( query , mock_logger , mock_abort ) [EOL] [comment] [EOL] mock_logger . error . assert_called ( ) [EOL] mock_abort . assert_called_with ( [number] ) [EOL] [EOL] [EOL] def test_get_one_or_else_no_result_found ( journalist_app , test_journo ) : [EOL] with journalist_app . app_context ( ) : [EOL] [comment] [EOL] assert Journalist . query . count ( ) == [number] [EOL] [EOL] bad_name = test_journo [ [string] ] + [string] [EOL] query = Journalist . query . filter_by ( username = bad_name ) [EOL] [EOL] mock_logger = MagicMock ( ) [EOL] mock_abort = MagicMock ( ) [EOL] get_one_or_else ( query , mock_logger , mock_abort ) [EOL] [EOL] log_line = ( [string] [string] ) [EOL] mock_logger . error . assert_called_with ( log_line ) [EOL] mock_abort . assert_called_with ( [number] ) [EOL] [EOL] [EOL] def test_throttle_login ( journalist_app , test_journo ) : [EOL] with journalist_app . app_context ( ) : [EOL] journalist = test_journo [ [string] ] [EOL] for _ in range ( Journalist . _MAX_LOGIN_ATTEMPTS_PER_PERIOD ) : [EOL] Journalist . throttle_login ( journalist ) [EOL] with pytest . raises ( LoginThrottledException ) : [EOL] Journalist . throttle_login ( journalist ) [EOL] [EOL] [EOL] def test_submission_string_representation ( journalist_app , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] db_helper . submit ( test_source [ [string] ] , [number] ) [EOL] test_submission = Submission . query . first ( ) [EOL] test_submission . __repr__ ( ) [EOL] [EOL] [EOL] def test_reply_string_representation ( journalist_app , test_journo , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] db_helper . reply ( test_journo [ [string] ] , test_source [ [string] ] , [number] ) [EOL] test_reply = Reply . query . first ( ) [EOL] test_reply . __repr__ ( ) [EOL] [EOL] [EOL] def test_journalist_string_representation ( journalist_app , test_journo ) : [EOL] with journalist_app . app_context ( ) : [EOL] test_journo [ [string] ] . __repr__ ( ) [EOL] [EOL] [EOL] def test_source_string_representation ( journalist_app , test_source ) : [EOL] with journalist_app . app_context ( ) : [EOL] test_source [ [string] ] . __repr__ ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from os . path import abspath , dirname , join , realpath [EOL] import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sys . path . append ( abspath ( join ( dirname ( realpath ( __file__ ) ) , [string] , [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] import io [EOL] import os [EOL] from os . path import abspath , dirname , exists , getmtime , join , realpath [EOL] os . environ [ [string] ] = [string] [comment] [EOL] import i18n_tool [EOL] from mock import patch [EOL] import pytest [EOL] import shutil [EOL] import signal [EOL] import time [EOL] [EOL] from sh import sed , msginit , pybabel , git , touch [EOL] [EOL] [EOL] class TestI18NTool ( object ) : [EOL] [EOL] def setup ( self ) : [EOL] self . dir = abspath ( dirname ( realpath ( __file__ ) ) ) [EOL] [EOL] def test_main ( self , tmpdir , caplog ) : [EOL] with pytest . raises ( SystemExit ) : [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] ] ) [EOL] [EOL] tool = i18n_tool . I18NTool ( ) [EOL] with patch . object ( tool , [string] , side_effect = KeyboardInterrupt ) : [EOL] assert tool . main ( [ [string] , [string] , str ( tmpdir ) ] ) == signal . SIGINT [EOL] [EOL] def test_translate_desktop_l10n ( self , tmpdir ) : [EOL] in_files = { } [EOL] for what in ( [string] , [string] ) : [EOL] in_files [ what ] = join ( str ( tmpdir ) , what + [string] ) [EOL] shutil . copy ( join ( self . dir , [string] + what + [string] ) , in_files [ what ] ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , str ( tmpdir ) , [string] , in_files [ [string] ] , [string] , ] ) [EOL] messages_file = join ( str ( tmpdir ) , [string] ) [EOL] assert exists ( messages_file ) [EOL] with io . open ( messages_file ) as fobj : [EOL] pot = fobj . read ( ) [EOL] assert [string] in pot [EOL] [comment] [EOL] few_seconds_ago = time . time ( ) - [number] [EOL] os . utime ( messages_file , ( few_seconds_ago , few_seconds_ago ) ) [EOL] [EOL] i18n_file = join ( str ( tmpdir ) , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] old_messages_mtime = getmtime ( messages_file ) [EOL] assert not exists ( i18n_file ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , str ( tmpdir ) , [string] , [string] . join ( list ( in_files . values ( ) ) ) , [string] , ] ) [EOL] assert not exists ( i18n_file ) [EOL] current_messages_mtime = getmtime ( messages_file ) [EOL] assert old_messages_mtime < current_messages_mtime [EOL] [EOL] locale = [string] [EOL] po_file = join ( str ( tmpdir ) , locale + [string] ) [EOL] msginit ( [string] , [string] , locale , [string] , po_file , [string] , messages_file ) [EOL] source = [string] [EOL] sed ( [string] , [string] , [string] . format ( source ) , po_file ) [EOL] assert exists ( po_file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] locale = [string] [EOL] po_file = join ( str ( tmpdir ) , locale + [string] ) [EOL] msginit ( [string] , [string] , locale , [string] , po_file , [string] , messages_file ) [EOL] source = [string] [EOL] sed ( [string] , [string] , [string] . format ( source ) , po_file ) [EOL] assert exists ( po_file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] old_messages_mtime = current_messages_mtime [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , str ( tmpdir ) , [string] , [string] . join ( list ( in_files . values ( ) ) + [ [string] ] ) , [string] , ] ) [EOL] assert old_messages_mtime == getmtime ( messages_file ) [EOL] with io . open ( po_file ) as fobj : [EOL] po = fobj . read ( ) [EOL] assert [string] in po [EOL] assert [string] not in po [EOL] with io . open ( i18n_file ) as fobj : [EOL] i18n = fobj . read ( ) [EOL] assert [string] in i18n [EOL] [EOL] def test_translate_messages_l10n ( self , tmpdir ) : [EOL] source = [ join ( self . dir , [string] ) , join ( self . dir , [string] ) , ] [EOL] args = [ [string] , [string] , [string] , str ( tmpdir ) , [string] , join ( self . dir , [string] ) , [string] , [string] . join ( source ) , [string] , [string] , ] [EOL] i18n_tool . I18NTool ( ) . main ( args ) [EOL] messages_file = join ( str ( tmpdir ) , [string] ) [EOL] assert exists ( messages_file ) [EOL] with io . open ( messages_file , [string] ) as fobj : [EOL] pot = fobj . read ( ) [EOL] assert [string] in pot [EOL] assert [string] in pot [EOL] [EOL] locale = [string] [EOL] locale_dir = join ( str ( tmpdir ) , locale ) [EOL] pybabel ( [string] , [string] , messages_file , [string] , str ( tmpdir ) , [string] , locale ) [EOL] mo_file = join ( locale_dir , [string] ) [EOL] assert not exists ( mo_file ) [EOL] i18n_tool . I18NTool ( ) . main ( args ) [EOL] assert exists ( mo_file ) [EOL] with io . open ( mo_file , mode = [string] ) as fobj : [EOL] mo = fobj . read ( ) [EOL] assert [string] in mo [EOL] assert [string] in mo [EOL] [EOL] def test_translate_messages_compile_arg ( self , tmpdir ) : [EOL] args = [ [string] , [string] , [string] , str ( tmpdir ) , [string] , join ( self . dir , [string] ) , ] [EOL] i18n_tool . I18NTool ( ) . main ( args + [ [string] , join ( self . dir , [string] ) , [string] , ] ) [EOL] messages_file = join ( str ( tmpdir ) , [string] ) [EOL] assert exists ( messages_file ) [EOL] with io . open ( messages_file ) as fobj : [EOL] pot = fobj . read ( ) [EOL] assert [string] in pot [EOL] [EOL] locale = [string] [EOL] locale_dir = join ( str ( tmpdir ) , locale ) [EOL] po_file = join ( locale_dir , [string] ) [EOL] pybabel ( [ [string] , [string] , messages_file , [string] , str ( tmpdir ) , [string] , locale ] ) [EOL] assert exists ( po_file ) [EOL] [comment] [EOL] few_seconds_ago = time . time ( ) - [number] [EOL] os . utime ( po_file , ( few_seconds_ago , few_seconds_ago ) ) [EOL] [EOL] mo_file = join ( locale_dir , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] old_po_mtime = getmtime ( po_file ) [EOL] assert not exists ( mo_file ) [EOL] i18n_tool . I18NTool ( ) . main ( args + [ [string] , join ( self . dir , [string] ) , [string] , ] ) [EOL] assert not exists ( mo_file ) [EOL] current_po_mtime = getmtime ( po_file ) [EOL] assert old_po_mtime < current_po_mtime [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source = [ join ( self . dir , [string] ) , join ( self . dir , [string] ) , ] [EOL] old_po_mtime = current_po_mtime [EOL] i18n_tool . I18NTool ( ) . main ( args + [ [string] , [string] . join ( source ) , [string] , ] ) [EOL] assert old_po_mtime == getmtime ( po_file ) [EOL] with io . open ( mo_file , mode = [string] ) as fobj : [EOL] mo = fobj . read ( ) [EOL] assert [string] in mo [EOL] assert [string] not in mo [EOL] [EOL] def test_require_git_email_name ( self , tmpdir ) : [EOL] k = { [string] : str ( tmpdir ) } [EOL] git ( [string] , ** k ) [EOL] with pytest . raises ( Exception ) as excinfo : [EOL] i18n_tool . I18NTool . require_git_email_name ( str ( tmpdir ) ) [EOL] assert [string] in str ( excinfo . value ) [EOL] [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] assert i18n_tool . I18NTool . require_git_email_name ( str ( tmpdir ) ) [EOL] [EOL] def test_update_docs ( self , tmpdir , caplog ) : [EOL] k = { [string] : str ( tmpdir ) } [EOL] git . init ( ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] os . mkdir ( join ( str ( tmpdir ) , [string] ) ) [EOL] touch ( [string] , ** k ) [EOL] git . add ( [string] , ** k ) [EOL] git . commit ( [string] , [string] , ** k ) [EOL] [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , str ( tmpdir ) ] ) [EOL] assert [string] in caplog . text [EOL] caplog . clear ( ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , str ( tmpdir ) ] ) [EOL] assert [string] in caplog . text [EOL] [EOL] def test_update_from_weblate ( self , tmpdir , caplog ) : [EOL] d = str ( tmpdir ) [EOL] for repo in ( [string] , [string] ) : [EOL] os . mkdir ( join ( d , repo ) ) [EOL] k = { [string] : join ( d , repo ) } [EOL] git . init ( ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] touch ( [string] , ** k ) [EOL] git . add ( [string] , ** k ) [EOL] git . commit ( [string] , [string] , [string] , ** k ) [EOL] for o in os . listdir ( join ( self . dir , [string] ) ) : [EOL] f = join ( self . dir , [string] , o ) [EOL] if os . path . isfile ( f ) : [EOL] shutil . copyfile ( f , join ( d , [string] , o ) ) [EOL] else : [EOL] shutil . copytree ( f , join ( d , [string] , o ) ) [EOL] k = { [string] : join ( d , [string] ) } [EOL] git . add ( [string] , [string] , ** k ) [EOL] git . commit ( [string] , [string] , [string] , ** k ) [EOL] git . checkout ( [string] , [string] , [string] , ** k ) [EOL] [EOL] def r ( ) : [EOL] return [string] . join ( [ str ( l ) for l in caplog . records ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] caplog . clear ( ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , join ( str ( tmpdir ) , [string] ) , [string] , join ( str ( tmpdir ) , [string] ) , [string] , [string] , ] ) [EOL] assert [string] in r ( ) [EOL] assert [string] not in r ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] caplog . clear ( ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , join ( str ( tmpdir ) , [string] ) , [string] , join ( str ( tmpdir ) , [string] ) , [string] , [string] , ] ) [EOL] assert [string] not in r ( ) [EOL] assert [string] in r ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] caplog . clear ( ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , join ( str ( tmpdir ) , [string] ) , [string] , join ( str ( tmpdir ) , [string] ) , [string] , [string] , ] ) [EOL] assert [string] not in r ( ) [EOL] assert [string] not in r ( ) [EOL] message = str ( git ( [string] , [string] , [string] , [string] , _cwd = d , _encoding = [string] ) ) [EOL] assert [string] in message [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] k = { [string] : join ( d , [string] ) } [EOL] f = [string] [EOL] sed ( [string] , [string] , [string] , f , ** k ) [EOL] git . add ( f , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . commit ( [string] , [string] , f , ** k ) [EOL] [EOL] k = { [string] : join ( d , [string] ) } [EOL] git . config ( [string] , [string] , ** k ) [EOL] git . config ( [string] , [string] , ** k ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] caplog . clear ( ) [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , join ( str ( tmpdir ) , [string] ) , [string] , join ( str ( tmpdir ) , [string] ) , [string] , [string] , ] ) [EOL] assert [string] in r ( ) [EOL] assert [string] not in r ( ) [EOL] message = str ( git ( [string] , [string] , [string] , [string] , _cwd = d ) ) [EOL] assert [string] in message [EOL] assert [string] not in message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import io [EOL] import os [EOL] import pytest [EOL] [EOL] from pretty_bad_protocol . _util import _is_stream [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] from secure_tempfile import SecureTemporaryFile [EOL] [EOL] MESSAGE = [string] [EOL] [EOL] [EOL] def test_read_before_writing ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] with pytest . raises ( AssertionError ) as err : [EOL] f . read ( ) [EOL] assert [string] in str ( err ) [EOL] [EOL] [EOL] def test_write_then_read_once ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] assert f . read ( ) . decode ( [string] ) == MESSAGE [EOL] [EOL] [EOL] def test_write_twice_then_read_once ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] f . write ( MESSAGE ) [EOL] assert f . read ( ) . decode ( [string] ) == MESSAGE * [number] [EOL] [EOL] [EOL] def test_write_then_read_twice ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] assert f . read ( ) . decode ( [string] ) == MESSAGE [EOL] assert f . read ( ) == [string] [EOL] [EOL] [EOL] def test_write_then_read_then_write ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] f . read ( ) [EOL] [EOL] with pytest . raises ( AssertionError ) as err : [EOL] f . write ( [string] ) [EOL] assert [string] in str ( err ) [EOL] [EOL] [EOL] def test_read_write_unicode ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] unicode_msg = [string] [EOL] f . write ( unicode_msg ) [EOL] assert f . read ( ) . decode ( [string] ) == unicode_msg [EOL] [EOL] [EOL] def test_file_seems_encrypted ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] with io . open ( f . filepath , [string] ) as fh : [EOL] contents = fh . read ( ) [EOL] [EOL] assert MESSAGE . encode ( [string] ) not in contents [EOL] assert MESSAGE not in contents . decode ( ) [EOL] [EOL] [EOL] def test_file_is_removed_from_disk ( ) : [EOL] [comment] [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] assert os . path . exists ( f . filepath ) [EOL] f . close ( ) [EOL] assert not os . path . exists ( f . filepath ) [EOL] [EOL] [comment] [EOL] f = SecureTemporaryFile ( [string] ) [EOL] f . write ( MESSAGE ) [EOL] f . read ( ) [EOL] assert os . path . exists ( f . filepath ) [EOL] f . close ( ) [EOL] assert not os . path . exists ( f . filepath ) [EOL] [EOL] [EOL] def test_SecureTemporaryFile_is_a_STREAMLIKE_TYPE ( ) : [EOL] assert _is_stream ( SecureTemporaryFile ( [string] ) ) [EOL] [EOL] [EOL] def test_buffered_read ( ) : [EOL] f = SecureTemporaryFile ( [string] ) [EOL] msg = MESSAGE * [number] [EOL] f . write ( msg ) [EOL] out = [string] [EOL] while True : [EOL] chars = f . read ( [number] ) [EOL] if chars : [EOL] out += chars [EOL] else : [EOL] break [EOL] [EOL] assert out . decode ( [string] ) == msg [EOL] [EOL] [EOL] def test_tmp_file_id_omits_invalid_chars ( ) : [EOL] [docstring] [EOL] f = SecureTemporaryFile ( [string] ) [EOL] assert [string] not in f . tmp_file_id [EOL] assert [string] not in f . tmp_file_id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] import os [EOL] import pytest [EOL] import time [EOL] [EOL] from contextlib import contextmanager [EOL] from datetime import datetime , timedelta [EOL] from flask import url_for [EOL] from pyotp import TOTP [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] from models import Journalist , BadTokenException [EOL] from . utils import login_user [EOL] from . utils . instrument import InstrumentedApp [EOL] [EOL] [EOL] @ contextmanager def totp_window ( ) : [EOL] [docstring] [EOL] [EOL] now = datetime . now ( ) [EOL] [comment] [EOL] seconds_left_in_window = ( ( [number] - now . second ) % [number] ) or [number] [EOL] [EOL] window_end = now . replace ( microsecond = [number] ) + timedelta ( seconds = seconds_left_in_window ) [EOL] window_end_delta = window_end - now [EOL] [EOL] [comment] [EOL] [comment] [EOL] if window_end_delta < timedelta ( seconds = [number] ) : [EOL] timeout = window_end_delta . seconds + window_end_delta . microseconds / [number] [EOL] time . sleep ( timeout ) [EOL] window_end = window_end + timedelta ( seconds = [number] ) [EOL] [EOL] yield [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] now = datetime . now ( ) [EOL] assert now < window_end [EOL] [EOL] [EOL] def test_totp_reuse_protections ( journalist_app , test_journo , hardening ) : [EOL] [docstring] [EOL] with totp_window ( ) : [EOL] token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] login_user ( app , test_journo ) [EOL] resp = app . get ( url_for ( [string] ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] resp = app . post ( url_for ( [string] ) , data = dict ( username = test_journo [ [string] ] , password = test_journo [ [string] ] , token = token ) ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] [EOL] def test_totp_reuse_protections2 ( journalist_app , test_journo , hardening ) : [EOL] [docstring] [EOL] [EOL] with totp_window ( ) : [EOL] token = TOTP ( test_journo [ [string] ] ) . now ( ) [EOL] [EOL] with journalist_app . app_context ( ) : [EOL] Journalist . login ( test_journo [ [string] ] , test_journo [ [string] ] , token ) [EOL] with pytest . raises ( BadTokenException ) : [EOL] Journalist . login ( test_journo [ [string] ] , test_journo [ [string] ] , token ) [EOL] [EOL] [EOL] def test_bad_token_fails_to_verify_on_admin_new_user_two_factor_page ( journalist_app , test_admin , hardening ) : [EOL] [docstring] [EOL] [EOL] invalid_token = [string] [EOL] [EOL] with totp_window ( ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] login_user ( app , test_admin ) [EOL] [comment] [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( url_for ( [string] , uid = test_admin [ [string] ] ) , data = dict ( token = invalid_token ) ) [EOL] [EOL] assert resp . status_code == [number] [EOL] ins . assert_message_flashed ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] with journalist_app . app_context ( ) : [EOL] admin = Journalist . query . get ( test_admin [ [string] ] ) [EOL] assert admin . last_token == invalid_token [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] login_user ( app , test_admin ) [EOL] [comment] [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( url_for ( [string] , uid = test_admin [ [string] ] ) , data = dict ( token = invalid_token ) ) [EOL] ins . assert_message_flashed ( [string] , [string] ) [EOL] [EOL] [EOL] def test_bad_token_fails_to_verify_on_new_user_two_factor_page ( journalist_app , test_journo , hardening ) : [EOL] [docstring] [EOL] invalid_token = [string] [EOL] [EOL] with totp_window ( ) : [EOL] with journalist_app . test_client ( ) as app : [EOL] login_user ( app , test_journo ) [EOL] [comment] [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( url_for ( [string] ) , data = dict ( token = invalid_token ) ) [EOL] [EOL] assert resp . status_code == [number] [EOL] ins . assert_message_flashed ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] with journalist_app . app_context ( ) : [EOL] journo = Journalist . query . get ( test_journo [ [string] ] ) [EOL] assert journo . last_token == invalid_token [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] login_user ( app , test_journo ) [EOL] [EOL] [comment] [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( url_for ( [string] ) , data = dict ( token = invalid_token ) ) [EOL] ins . assert_message_flashed ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] class UpgradeTester ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] pass [EOL] [EOL] def load_data ( self ) : [EOL] pass [EOL] [EOL] def check_upgrade ( self ) : [EOL] pass [EOL] [EOL] [EOL] class DowngradeTester ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] pass [EOL] [EOL] def load_data ( self ) : [EOL] pass [EOL] [EOL] def check_downgrade ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] import random [EOL] import string [EOL] [EOL] from datetime import datetime [EOL] [EOL] [EOL] def random_bool ( ) : [EOL] return bool ( random . getrandbits ( [number] ) ) [EOL] [EOL] [EOL] def bool_or_none ( ) : [EOL] return random . choice ( [ None , True , False ] ) [EOL] [EOL] [EOL] def random_bytes ( min , max , nullable ) : [EOL] if nullable and random_bool ( ) : [EOL] return None [EOL] else : [EOL] [comment] [EOL] return random_chars ( random . randint ( min , max ) ) [EOL] [EOL] [EOL] def random_name ( ) : [EOL] len = random . randint ( [number] , [number] ) [EOL] return random_chars ( len ) [EOL] [EOL] [EOL] def random_username ( ) : [EOL] len = random . randint ( [number] , [number] ) [EOL] return random_chars ( len ) [EOL] [EOL] [EOL] def random_chars ( len , chars = string . printable ) : [EOL] return [string] . join ( [ random . choice ( chars ) for _ in range ( len ) ] ) [EOL] [EOL] [EOL] def random_ascii_chars ( len , chars = string . ascii_lowercase ) : [EOL] return [string] . join ( [ random . choice ( chars ) for _ in range ( len ) ] ) [EOL] [EOL] [EOL] def random_datetime ( nullable ) : [EOL] if nullable and random_bool ( ) : [EOL] return None [EOL] else : [EOL] return datetime ( year = random . randint ( [number] , [number] ) , month = random . randint ( [number] , [number] ) , day = random . randint ( [number] , [number] ) , hour = random . randint ( [number] , [number] ) , minute = random . randint ( [number] , [number] ) , second = random . randint ( [number] , [number] ) , microsecond = random . randint ( [number] , [number] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from flask_babel import gettext [EOL] [EOL] print ( gettext ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def get_api_headers ( token = [string] ) : [EOL] if token : [EOL] return { [string] : [string] . format ( token ) , [string] : [string] , [string] : [string] , } [EOL] return { [string] : [string] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Literal , Tuple , List [EOL] import urllib [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] [EOL] [EOL] from urllib . parse import urlparse , urljoin [EOL] [EOL] import pytest [EOL] [EOL] from flask import template_rendered , message_flashed [EOL] [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] class ContextVariableDoesNotExist ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InstrumentedApp : [EOL] [EOL] def __init__ ( self , app ) : [EOL] self . app = app [EOL] [EOL] def __enter__ ( self ) : [EOL] self . templates = [ ] [EOL] self . flashed_messages = [ ] [EOL] template_rendered . connect ( self . _add_template ) [EOL] message_flashed . connect ( self . _add_flash_message ) [EOL] return self [EOL] [EOL] def __exit__ ( self , * nargs ) : [EOL] if getattr ( self , [string] , None ) is not None : [EOL] del self . app [EOL] [EOL] del self . templates [ : ] [EOL] del self . flashed_messages [ : ] [EOL] [EOL] template_rendered . disconnect ( self . _add_template ) [EOL] message_flashed . disconnect ( self . _add_flash_message ) [EOL] [EOL] def _add_flash_message ( self , app , message , category ) : [EOL] self . flashed_messages . append ( ( message , category ) ) [EOL] [EOL] def _add_template ( self , app , template , context ) : [EOL] if len ( self . templates ) > [number] : [EOL] self . templates = [ ] [EOL] self . templates . append ( ( template , context ) ) [EOL] [EOL] def assert_message_flashed ( self , message , category = [string] ) : [EOL] [docstring] [EOL] for _message , _category in self . flashed_messages : [EOL] if _message == message and _category == category : [EOL] return True [EOL] [EOL] raise AssertionError ( [string] . format ( message , category ) ) [EOL] [EOL] def assert_template_used ( self , name , tmpl_name_attribute = [string] ) : [EOL] [docstring] [EOL] used_templates = [ ] [EOL] [EOL] for template , context in self . templates : [EOL] if getattr ( template , tmpl_name_attribute ) == name : [EOL] return True [EOL] [EOL] used_templates . append ( template ) [EOL] [EOL] raise AssertionError ( [string] . format ( name , [string] . join ( repr ( used_templates ) ) ) ) [EOL] [EOL] def get_context_variable ( self , name ) : [EOL] [docstring] [EOL] for template , context in self . templates : [EOL] if name in context : [EOL] return context [ name ] [EOL] raise ContextVariableDoesNotExist [EOL] [EOL] def assert_context ( self , name , value , message = None ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] assert self . get_context_variable ( name ) == value , message [EOL] except ContextVariableDoesNotExist : [EOL] pytest . fail ( message or [string] . format ( name ) ) [EOL] [EOL] def assert_redirects ( self , response , location , message = None ) : [EOL] [docstring] [EOL] parts = urlparse ( location ) [EOL] [EOL] if parts . netloc : [EOL] expected_location = location [EOL] else : [EOL] server_name = self . app . config . get ( [string] ) or [string] [EOL] expected_location = urljoin ( [string] % server_name , location ) [EOL] [EOL] valid_status_codes = ( [number] , [number] , [number] , [number] , [number] ) [EOL] valid_status_code_str = [string] . join ( [ str ( code ) for code in valid_status_codes ] ) [EOL] not_redirect = [string] . format ( valid_status_code_str , response . status_code ) [EOL] assert ( response . status_code in ( valid_status_codes , message ) or not_redirect ) [EOL] assert response . location == expected_location , message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import io [EOL] import os [EOL] import shutil [EOL] import threading [EOL] from distutils . version import StrictVersion [EOL] from os . path import abspath [EOL] from os . path import dirname [EOL] from os . path import isdir [EOL] from os . path import join [EOL] from os . path import realpath [EOL] [EOL] import pretty_bad_protocol as gnupg [EOL] from db import db [EOL] from sdconfig import config [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] [EOL] [EOL] TESTS_DIR = abspath ( join ( dirname ( realpath ( __file__ ) ) , [string] ) ) [EOL] FILES_DIR = join ( TESTS_DIR , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TEST_WORKER_PIDFILE = [string] [EOL] [EOL] [EOL] def create_directories ( ) : [EOL] [docstring] [EOL] for d in ( config . SECUREDROP_DATA_ROOT , config . STORE_DIR , config . GPG_KEY_DIR , config . TEMP_DIR ) : [EOL] if not isdir ( d ) : [EOL] os . mkdir ( d ) [EOL] [EOL] [EOL] def init_gpg ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] gpg_agent_config = os . path . join ( config . GPG_KEY_DIR , [string] ) [EOL] with open ( gpg_agent_config , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] gpg_binary = gnupg . GPG ( binary = [string] , homedir = config . GPG_KEY_DIR ) [EOL] if StrictVersion ( gpg_binary . binary_version ) >= StrictVersion ( [string] ) : [EOL] gpg = gnupg . GPG ( binary = [string] , homedir = config . GPG_KEY_DIR , options = [ [string] ] ) [EOL] else : [EOL] gpg = gpg_binary [EOL] [EOL] [comment] [EOL] for keyfile in ( join ( FILES_DIR , [string] ) , join ( FILES_DIR , [string] ) ) : [EOL] gpg . import_keys ( io . open ( keyfile ) . read ( ) ) [EOL] return gpg [EOL] [EOL] [EOL] def setup ( ) : [EOL] [docstring] [EOL] create_directories ( ) [EOL] init_gpg ( ) [EOL] db . create_all ( ) [EOL] [EOL] [EOL] def teardown ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for t in threading . enumerate ( ) : [EOL] if t . is_alive ( ) and not isinstance ( t , threading . _MainThread ) : [EOL] t . join ( ) [EOL] db . session . remove ( ) [EOL] try : [EOL] shutil . rmtree ( config . TEMP_DIR ) [EOL] except OSError : [EOL] [comment] [EOL] assert not os . path . exists ( config . TEMP_DIR ) [EOL] try : [EOL] shutil . rmtree ( config . SECUREDROP_DATA_ROOT ) [EOL] [comment] [EOL] assert not os . path . exists ( config . SECUREDROP_DATA_ROOT ) [EOL] except OSError as exc : [EOL] if [string] != exc . strerror : [EOL] raise [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Union [EOL] import typing [EOL] import mock [EOL] [docstring] [EOL] import datetime [EOL] import mock [EOL] import os [EOL] [EOL] from flask import current_app [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] from sdconfig import config [EOL] import models [EOL] [EOL] from db import db [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def init_journalist ( first_name = None , last_name = None , is_admin = False ) : [EOL] [docstring] [EOL] username = current_app . crypto_util . genrandomid ( ) [EOL] user_pw = current_app . crypto_util . genrandomid ( ) [EOL] user = models . Journalist ( username = username , password = user_pw , first_name = first_name , last_name = last_name , is_admin = is_admin ) [EOL] db . session . add ( user ) [EOL] db . session . commit ( ) [EOL] return user , user_pw [EOL] [EOL] [EOL] def delete_journalist ( journalist ) : [EOL] [docstring] [EOL] db . session . delete ( journalist ) [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] def reply ( journalist , source , num_replies ) : [EOL] [docstring] [EOL] assert num_replies >= [number] [EOL] replies = [ ] [EOL] for _ in range ( num_replies ) : [EOL] source . interaction_count += [number] [EOL] fname = [string] . format ( source . interaction_count , source . journalist_filename ) [EOL] current_app . crypto_util . encrypt ( str ( os . urandom ( [number] ) ) , [ current_app . crypto_util . get_fingerprint ( source . filesystem_id ) , config . JOURNALIST_KEY ] , current_app . storage . path ( source . filesystem_id , fname ) ) [EOL] [EOL] reply = models . Reply ( journalist , source , fname ) [EOL] replies . append ( reply ) [EOL] db . session . add ( reply ) [EOL] [EOL] db . session . commit ( ) [EOL] return replies [EOL] [EOL] [EOL] def mock_verify_token ( testcase ) : [EOL] [docstring] [EOL] patcher = mock . patch ( [string] ) [EOL] testcase . addCleanup ( patcher . stop ) [EOL] testcase . mock_journalist_verify_token = patcher . start ( ) [EOL] testcase . mock_journalist_verify_token . return_value = True [EOL] [EOL] [EOL] def mark_downloaded ( * submissions ) : [EOL] [docstring] [EOL] for submission in submissions : [EOL] submission . downloaded = True [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def init_source_without_keypair ( ) : [EOL] [docstring] [EOL] [comment] [EOL] codename = current_app . crypto_util . genrandomid ( ) [EOL] filesystem_id = current_app . crypto_util . hash_codename ( codename ) [EOL] journalist_filename = current_app . crypto_util . display_id ( ) [EOL] source = models . Source ( filesystem_id , journalist_filename ) [EOL] db . session . add ( source ) [EOL] db . session . commit ( ) [EOL] [comment] [EOL] os . mkdir ( current_app . storage . path ( source . filesystem_id ) ) [EOL] [EOL] return source , codename [EOL] [EOL] [EOL] def init_source ( ) : [EOL] [docstring] [EOL] source , codename = init_source_without_keypair ( ) [EOL] current_app . crypto_util . genkeypair ( source . filesystem_id , codename ) [EOL] [EOL] return source , codename [EOL] [EOL] [EOL] def submit ( source , num_submissions ) : [EOL] [docstring] [EOL] assert num_submissions >= [number] [EOL] source . last_updated = datetime . datetime . utcnow ( ) [EOL] db . session . add ( source ) [EOL] submissions = [ ] [EOL] for _ in range ( num_submissions ) : [EOL] source . interaction_count += [number] [EOL] source . pending = False [EOL] fpath = current_app . storage . save_message_submission ( source . filesystem_id , source . interaction_count , source . journalist_filename , str ( os . urandom ( [number] ) ) ) [EOL] submission = models . Submission ( source , fpath ) [EOL] submissions . append ( submission ) [EOL] db . session . add ( source ) [EOL] db . session . add ( submission ) [EOL] [EOL] db . session . commit ( ) [EOL] return submissions [EOL] [EOL] [EOL] def new_codename ( client , session ) : [EOL] [docstring] [EOL] client . get ( [string] ) [EOL] tab_id , codename = next ( iter ( session [ [string] ] . items ( ) ) ) [EOL] client . post ( [string] , data = { [string] : tab_id } ) [EOL] return codename [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] conn = op . get_bind ( ) [EOL] conn . execute ( sa . text ( [string] ) ) [EOL] conn . execute ( sa . text ( [string] ) ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [comment] [EOL] raise_errors = os . environ . get ( [string] , [string] ) != [string] [EOL] [EOL] try : [EOL] from journalist_app import create_app [EOL] from sdconfig import config [EOL] from store import NoFileFoundException , TooManyFilesException [EOL] except ImportError : [EOL] [comment] [EOL] if raise_errors : [EOL] raise [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def raw_sql_grab_orphaned_objects ( table_name ) : [EOL] [docstring] [EOL] return ( [string] [string] [string] [string] ) . format ( table = table_name ) [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] conn = op . get_bind ( ) [EOL] submissions = conn . execute ( sa . text ( raw_sql_grab_orphaned_objects ( [string] ) ) ) . fetchall ( ) [EOL] [EOL] replies = conn . execute ( sa . text ( raw_sql_grab_orphaned_objects ( [string] ) ) ) . fetchall ( ) [EOL] [EOL] try : [EOL] app = create_app ( config ) [EOL] with app . app_context ( ) : [EOL] for submission in submissions : [EOL] try : [EOL] conn . execute ( sa . text ( [string] ) . bindparams ( id = submission . id ) ) [EOL] [EOL] path = app . storage . path_without_filesystem_id ( submission . filename ) [EOL] app . storage . move_to_shredder ( path ) [EOL] except NoFileFoundException : [EOL] [comment] [EOL] conn . execute ( sa . text ( [string] ) . bindparams ( id = submission . id ) ) [EOL] except TooManyFilesException : [EOL] pass [EOL] [EOL] for reply in replies : [EOL] try : [EOL] conn . execute ( sa . text ( [string] ) . bindparams ( id = reply . id ) ) [EOL] [EOL] path = app . storage . path_without_filesystem_id ( reply . filename ) [EOL] app . storage . move_to_shredder ( path ) [EOL] except NoFileFoundException : [EOL] [comment] [EOL] conn . execute ( sa . text ( [string] ) . bindparams ( id = reply . id ) ) [EOL] except TooManyFilesException : [EOL] pass [EOL] except : [comment] [EOL] if raise_errors : [EOL] raise [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [comment] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [comment] [EOL] op . create_table ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . DateTime ( ) , nullable = True ) , sa . Column ( [string] , sa . Boolean ( ) , nullable = True ) , sa . PrimaryKeyConstraint ( [string] ) , sa . UniqueConstraint ( [string] ) , ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] conn = op . get_bind ( ) [EOL] conn . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [comment] [EOL] op . drop_table ( [string] ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [comment] [EOL] raise_errors = os . environ . get ( [string] , [string] ) != [string] [EOL] [EOL] try : [EOL] from journalist_app import create_app [EOL] from models import Submission , Reply [EOL] from sdconfig import config [EOL] from store import queued_add_checksum_for_file [EOL] from worker import create_queue [EOL] except : [comment] [EOL] if raise_errors : [EOL] raise [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] with op . batch_alter_table ( [string] , schema = None ) as batch_op : [EOL] batch_op . add_column ( sa . Column ( [string] , sa . String ( length = [number] ) , nullable = True ) ) [EOL] [EOL] with op . batch_alter_table ( [string] , schema = None ) as batch_op : [EOL] batch_op . add_column ( sa . Column ( [string] , sa . String ( length = [number] ) , nullable = True ) ) [EOL] [EOL] op . create_table ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . ForeignKeyConstraint ( [ [string] ] , [ [string] ] ) , sa . PrimaryKeyConstraint ( [string] ) , sa . UniqueConstraint ( [string] ) , ) [EOL] [EOL] try : [EOL] app = create_app ( config ) [EOL] [EOL] [comment] [EOL] with app . app_context ( ) : [EOL] conn = op . get_bind ( ) [EOL] query = sa . text ( [string] ) [EOL] for ( sub_id , filesystem_id , filename ) in conn . execute ( query ) : [EOL] full_path = app . storage . path ( filesystem_id , filename ) [EOL] create_queue ( ) . enqueue ( queued_add_checksum_for_file , Submission , int ( sub_id ) , full_path , app . config [ [string] ] , ) [EOL] [EOL] query = sa . text ( [string] ) [EOL] for ( rep_id , filesystem_id , filename ) in conn . execute ( query ) : [EOL] full_path = app . storage . path ( filesystem_id , filename ) [EOL] create_queue ( ) . enqueue ( queued_add_checksum_for_file , Reply , int ( rep_id ) , full_path , app . config [ [string] ] , ) [EOL] except : [comment] [EOL] if raise_errors : [EOL] raise [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_table ( [string] ) [EOL] [EOL] with op . batch_alter_table ( [string] , schema = None ) as batch_op : [EOL] batch_op . drop_column ( [string] ) [EOL] [EOL] with op . batch_alter_table ( [string] , schema = None ) as batch_op : [EOL] batch_op . drop_column ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $Nonebuiltins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import testinfra [EOL] import time [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] SKIP_REASON = [string] [EOL] [EOL] [EOL] class TestBase ( object ) : [EOL] [EOL] @ pytest . fixture ( autouse = True ) def only_mon_staging_sudo ( self , host ) : [EOL] if host . backend . host != [string] : [EOL] pytest . skip ( ) [EOL] [EOL] with host . sudo ( ) : [EOL] yield [EOL] [EOL] def ansible ( self , host , module , parameters ) : [EOL] r = host . ansible ( module , parameters , check = False ) [EOL] assert [string] not in r [EOL] [EOL] def run ( self , host , cmd ) : [EOL] print ( host . backend . host + [string] + cmd ) [EOL] r = host . run ( cmd ) [EOL] print ( r . stdout ) [EOL] print ( r . stderr ) [EOL] return r . rc == [number] [EOL] [EOL] def wait_for ( self , fun ) : [EOL] success = False [EOL] for d in ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) : [EOL] if fun ( ) : [EOL] success = True [EOL] break [EOL] time . sleep ( d ) [EOL] return success [EOL] [EOL] def wait_for_command ( self , host , cmd ) : [EOL] return self . wait_for ( lambda : self . run ( host , cmd ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def service_started ( self , host , name ) : [EOL] assert self . run ( host , [string] . format ( name = name ) ) [EOL] assert self . wait_for_command ( host , [string] . format ( name = name ) ) [EOL] [EOL] def service_restarted ( self , host , name ) : [EOL] assert self . run ( host , [string] . format ( name = name ) ) [EOL] assert self . wait_for_command ( host , [string] . format ( name = name ) ) [EOL] [EOL] def service_stopped ( self , host , name ) : [EOL] assert self . run ( host , [string] . format ( name = name ) ) [EOL] assert self . wait_for_command ( host , [string] . format ( name = name ) ) [EOL] [EOL] [EOL] class TestJournalistMail ( TestBase ) : [EOL] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_procmail ( self , host ) : [EOL] self . service_started ( host , [string] ) [EOL] for ( destination , f ) in ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) : [EOL] [comment] [EOL] current_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] self . ansible ( host , [string] , [string] . format ( f = f , d = current_dir ) ) [EOL] assert self . run ( host , [string] ) [EOL] assert self . run ( host , [string] ) [EOL] assert self . run ( host , [string] . format ( f = f ) ) [EOL] assert self . wait_for_command ( host , [string] . format ( destination = destination ) ) [EOL] self . service_stopped ( host , [string] ) [EOL] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_process_submissions_today ( self , host ) : [EOL] assert self . run ( host , [string] [string] ) [EOL] assert self . run ( host , [string] [string] ) [EOL] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_send_encrypted_alert ( self , host ) : [EOL] self . service_started ( host , [string] ) [EOL] src = ( [string] [string] ) [EOL] self . ansible ( host , [string] , [string] . format ( src = src ) ) [EOL] [EOL] self . run ( host , [string] [string] ) [EOL] [EOL] def trigger ( who , payload ) : [EOL] assert self . run ( host , [string] . format ( who = who ) ) [EOL] assert self . run ( host , [string] . format ( who = who , payload = payload ) ) [EOL] assert self . wait_for_command ( host , [string] . format ( who = who ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for ( who , payload , expected ) in ( ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ) : [EOL] assert self . run ( host , [string] ) [EOL] trigger ( who , payload ) [EOL] assert self . run ( host , [string] . format ( expected = expected ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] assert self . run ( host , [string] ) [EOL] assert self . run ( host , [string] ) [EOL] trigger ( who , [string] ) [EOL] assert self . run ( host , [string] ) [EOL] finally : [EOL] assert self . run ( host , [string] ) [EOL] self . service_stopped ( host , [string] ) [EOL] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_missing_journalist_alert ( self , host ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert self . run ( host , [string] ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_ossec_rule_journalist ( self , host ) : [EOL] assert self . run ( host , [string] ) [EOL] [EOL] @ pytest . mark . skip ( reason = SKIP_REASON ) def test_journalist_mail_notification ( self , host ) : [EOL] mon = host [EOL] app = testinfra . host . Host . get_host ( [string] , ansible_inventory = host . backend . ansible_inventory ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . service_started ( mon , [string] ) [EOL] self . service_started ( mon , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with app . sudo ( ) : [EOL] assert self . run ( app , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert self . run ( mon , [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert self . run ( mon , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with app . sudo ( ) : [EOL] self . service_restarted ( app , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert self . wait_for_command ( mon , [string] ) [EOL] assert self . run ( mon , [string] ) [EOL] [EOL] assert self . run ( mon , [string] [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with app . sudo ( ) : [EOL] self . service_restarted ( app , [string] ) [EOL] assert self . wait_for_command ( mon , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . service_stopped ( mon , [string] ) [EOL] self . service_stopped ( mon , [string] ) [EOL] with app . sudo ( ) : [EOL] self . service_stopped ( app , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import re [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] ) def test_postfix_headers ( host , header ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . mode == [number] [EOL] regex = [string] . format ( re . escape ( header ) ) [EOL] assert re . search ( regex , f . content_string , re . M ) [EOL] [EOL] [EOL] def test_postfix_generic_maps ( host ) : [EOL] [docstring] [EOL] assert not host . file ( [string] ) . exists [EOL] assert not host . file ( [string] ) . contains ( [string] ) [EOL] [EOL] [EOL] def test_postfix_service ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] postfix = host . service ( [string] ) [EOL] assert postfix . is_running == securedrop_test_vars . postfix_enabled [EOL] assert postfix . is_enabled == securedrop_test_vars . postfix_enabled [EOL] [EOL] socket = host . socket ( [string] ) [EOL] assert socket . is_listening == securedrop_test_vars . postfix_enabled [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import jinja2 [EOL] import typing [EOL] import io [EOL] import os [EOL] import difflib [EOL] import pytest [EOL] from jinja2 import Template [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_mon_iptables_rules ( host ) : [EOL] [EOL] [comment] [EOL] kwargs = dict ( app_ip = os . environ . get ( [string] , securedrop_test_vars . app_ip ) , default_interface = host . check_output ( [string] ) , tor_user_id = host . check_output ( [string] ) , ssh_group_gid = host . check_output ( [string] ) , postfix_user_id = host . check_output ( [string] ) , dns_server = securedrop_test_vars . dns_server ) [EOL] [EOL] [comment] [EOL] iptables = [string] [EOL] environment = os . environ . get ( [string] , [string] ) [EOL] iptables_file = [string] . format ( os . path . dirname ( os . path . abspath ( __file__ ) ) , environment ) [EOL] [EOL] [comment] [EOL] jinja_iptables = Template ( io . open ( iptables_file , [string] ) . read ( ) ) [EOL] iptables_expected = jinja_iptables . render ( ** kwargs ) [EOL] [EOL] with host . sudo ( ) : [EOL] [comment] [EOL] iptables = host . check_output ( iptables ) [EOL] [comment] [EOL] [comment] [EOL] for iptablesdiff in difflib . context_diff ( iptables_expected . split ( [string] ) , iptables . split ( [string] ) ) : [EOL] print ( iptablesdiff ) [EOL] [comment] [EOL] [comment] [EOL] assert iptables_expected == iptables [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ dict ( host = [string] , proto = [string] , port = [number] , listening = True ) , dict ( host = [string] , proto = [string] , port = [number] , listening = True ) , dict ( host = [string] , proto = [string] , port = [number] , listening = False ) , ] ) def test_listening_ports ( host , ossec_service ) : [EOL] [docstring] [EOL] socket = [string] . format ( ** ossec_service ) [EOL] with host . sudo ( ) : [EOL] [comment] [EOL] [comment] [EOL] if [string] in socket : [EOL] lsof_socket = [string] . format ( ** ossec_service ) [EOL] udp_check = host . run ( [string] + lsof_socket ) [EOL] [EOL] if ossec_service [ [string] ] : [EOL] assert udp_check . rc == [number] [EOL] else : [EOL] assert udp_check . rc == [number] [EOL] else : [EOL] assert ( host . socket ( socket ) . is_listening == ossec_service [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_release_manager_upgrade_channel ( host ) : [EOL] [docstring] [EOL] expected_channels = { [string] : [string] , } [EOL] [EOL] config_path = [string] [EOL] assert host . file ( config_path ) . is_file [EOL] [EOL] raw_output = host . check_output ( [string] . format ( config_path ) ) [EOL] _ , channel = raw_output . split ( [string] ) [EOL] [EOL] expected_channel = expected_channels [ host . system_info . codename ] [EOL] assert channel == expected_channel [EOL] [EOL] [EOL] def test_do_release_upgrade_is_installed ( host ) : [EOL] [docstring] [EOL] assert host . exists ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] SUPPORTED_CODENAMES = ( [string] ) [EOL] SUPPORTED_RELEASES = ( [string] ) [EOL] [EOL] [EOL] def test_ansible_version ( host ) : [EOL] [docstring] [EOL] localhost = host . get_host ( [string] ) [EOL] c = localhost . check_output ( [string] ) [EOL] assert c . startswith ( [string] ) [EOL] [EOL] [EOL] def test_platform ( host ) : [EOL] [docstring] [EOL] assert host . system_info . type == [string] [EOL] assert host . system_info . distribution == [string] [EOL] assert host . system_info . codename in SUPPORTED_CODENAMES [EOL] assert host . system_info . release in SUPPORTED_RELEASES [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_fpf_apt_repo_present ( host ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if test_vars . fpf_apt_repo_url == [string] : [EOL] f = host . file ( [string] ) [EOL] else : [EOL] f = host . file ( [string] ) [EOL] repo_regex = [string] . format ( re . escape ( test_vars . fpf_apt_repo_url ) , re . escape ( host . system_info . codename ) ) [EOL] assert f . contains ( repo_regex ) [EOL] [EOL] [EOL] def test_fpf_apt_repo_fingerprint ( host ) : [EOL] [docstring] [EOL] [EOL] c = host . run ( [string] ) [EOL] [EOL] fpf_gpg_pub_key_info = [string] [EOL] [EOL] assert c . rc == [number] [EOL] assert fpf_gpg_pub_key_info in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] ) def test_fpf_apt_repo_old_pubkeys_absent ( host , old_pubkey ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert old_pubkey not in c . stdout [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_ip6tables_drop_everything ( host ) : [EOL] [docstring] [EOL] desired_ip6tables_output = [string] . lstrip ( ) . rstrip ( ) [EOL] [EOL] with host . sudo ( ) : [EOL] c = host . check_output ( [string] ) [EOL] assert c == desired_ip6tables_output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] [EOL] [EOL] def test_securedrop_rqworker_service ( host ) : [EOL] [docstring] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] service_file = [string] [EOL] [EOL] expected_content = [string] . join ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( securedrop_test_vars . securedrop_code , securedrop_test_vars . securedrop_venv_site_packages ) , [string] . format ( securedrop_test_vars . securedrop_venv_bin ) , [string] , [string] , [string] , [string] , [string] . format ( securedrop_test_vars . securedrop_data ) , [string] , [string] , [string] , [string] . format ( securedrop_test_vars . securedrop_user ) , [string] . format ( securedrop_test_vars . securedrop_code ) , [string] , [string] , [string] , ] ) [EOL] [EOL] f = host . file ( service_file ) [EOL] assert f . is_file [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . content_string == expected_content [EOL] [EOL] s = host . service ( [string] ) [EOL] assert s . is_enabled [EOL] assert s . is_running [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_paxctld_installed ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] if host . system_info . codename == [string] : [EOL] pkg = host . package ( [string] ) [EOL] assert pkg . is_installed [EOL] [EOL] [EOL] def test_paxctld_config ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] [EOL] [comment] [EOL] if host . system_info . codename == [string] : [EOL] assert f . is_file [EOL] regex = [string] [EOL] assert re . search ( regex , f . content_string , re . M ) [EOL] [EOL] [EOL] def test_paxctld_service ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] if host . system_info . codename == [string] : [EOL] s = host . service ( [string] ) [EOL] assert s . is_running [EOL] assert s . is_enabled [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import jinja2 [EOL] import typing [EOL] import os [EOL] import io [EOL] import difflib [EOL] import pytest [EOL] from jinja2 import Template [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_app_iptables_rules ( host ) : [EOL] [EOL] [comment] [EOL] kwargs = dict ( mon_ip = os . environ . get ( [string] , securedrop_test_vars . mon_ip ) , default_interface = host . check_output ( [string] [string] ) , tor_user_id = host . check_output ( [string] ) , securedrop_user_id = host . check_output ( [string] ) , ssh_group_gid = host . check_output ( [string] ) , dns_server = securedrop_test_vars . dns_server ) [EOL] [EOL] [comment] [EOL] iptables = [string] [EOL] environment = os . environ . get ( [string] , [string] ) [EOL] iptables_file = [string] . format ( os . path . dirname ( os . path . abspath ( __file__ ) ) , environment ) [EOL] [EOL] [comment] [EOL] jinja_iptables = Template ( io . open ( iptables_file , [string] ) . read ( ) ) [EOL] iptables_expected = jinja_iptables . render ( ** kwargs ) [EOL] [EOL] with host . sudo ( ) : [EOL] [comment] [EOL] iptables = host . check_output ( iptables ) [EOL] [comment] [EOL] [comment] [EOL] for iptablesdiff in difflib . context_diff ( iptables_expected . split ( [string] ) , iptables . split ( [string] ) ) : [EOL] print ( iptablesdiff ) [EOL] [comment] [EOL] [comment] [EOL] assert iptables_expected == iptables [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] sdvars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , ] ) def test_tor_packages ( host , package ) : [EOL] [docstring] [EOL] assert host . package ( package ) . is_installed [EOL] [EOL] [EOL] def test_tor_service_running ( host ) : [EOL] [docstring] [EOL] s = host . service ( [string] ) [EOL] assert s . is_running [EOL] assert s . is_enabled [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_tor_torrc_options ( host , torrc_option ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] assert f . contains ( [string] . format ( torrc_option ) ) [EOL] [EOL] [EOL] def test_tor_torrc_sandbox ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] assert not f . contains ( [string] ) [EOL] [EOL] [EOL] def test_tor_v2_onion_url_readable_by_app ( host ) : [EOL] v2_url_filepath = [string] [EOL] with host . sudo ( ) : [EOL] f = host . file ( v2_url_filepath ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] assert re . search ( [string] , f . content_string ) [EOL] [EOL] [EOL] def test_tor_v3_onion_url_readable_by_app ( host ) : [EOL] v3_url_filepath = [string] [EOL] with host . sudo ( ) : [EOL] f = host . file ( v3_url_filepath ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] assert re . search ( [string] , f . content_string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Match , List [EOL] import typing [EOL] import os [EOL] from subprocess import check_output [EOL] import re [EOL] import pytest [EOL] [EOL] SECUREDROP_TARGET_PLATFORM = os . environ . get ( [string] ) [EOL] testinfra_hosts = [ [string] . format ( SECUREDROP_TARGET_PLATFORM ) ] [EOL] [EOL] [EOL] def test_should_run ( ) : [EOL] command = [ [string] , [string] , [string] ] [EOL] version = check_output ( command ) . decode ( [string] ) [ [number] : - [number] ] [EOL] candidates = ( [string] [string] [string] [string] ) [EOL] result = re . match ( candidates , version ) [EOL] if result : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] @ pytest . mark . skipif ( not test_should_run ( ) , reason = [string] ) def test_ensure_no_updates_avail ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] host . run ( [string] ) [EOL] [EOL] dist_upgrade_simulate = host . run ( [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert dist_upgrade_simulate . rc != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_build_ossec_apt_dependencies ( host , build_path ) : [EOL] [docstring] [EOL] assert not host . file ( build_path ) . exists [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , List [EOL] import typing [EOL] import pytest [EOL] import os [EOL] [EOL] [EOL] SECUREDROP_TARGET_PLATFORM = os . environ . get ( [string] ) [EOL] testinfra_hosts = [ [string] . format ( SECUREDROP_TARGET_PLATFORM ) ] [EOL] [EOL] [EOL] def test_sass_gem_installed ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert [string] in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] def test_pip_dependencies_installed ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert [string] in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] [string] ) def test_build_all_packages_updated ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert [string] in c . stdout [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict , List [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import re [EOL] import tempfile [EOL] [EOL] [EOL] SECUREDROP_TARGET_PLATFORM = os . environ . get ( [string] ) [EOL] testinfra_hosts = [ [string] . format ( SECUREDROP_TARGET_PLATFORM ) ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def extract_package_name_from_filepath ( filepath ) : [EOL] [docstring] [EOL] deb_basename = os . path . basename ( filepath ) [EOL] package_name = re . search ( [string] , deb_basename ) . groups ( ) [ [number] ] [EOL] assert deb_basename . startswith ( package_name ) [EOL] return package_name [EOL] [EOL] [EOL] def get_deb_packages ( ) : [EOL] [docstring] [EOL] substitutions = dict ( securedrop_version = securedrop_test_vars . securedrop_version , ossec_version = securedrop_test_vars . ossec_version , keyring_version = securedrop_test_vars . keyring_version , config_version = securedrop_test_vars . config_version , grsec_version = securedrop_test_vars . grsec_version , securedrop_target_platform = securedrop_test_vars . securedrop_target_platform , ) [EOL] [EOL] deb_packages = [ d . format ( ** substitutions ) for d in securedrop_test_vars . build_deb_packages ] [EOL] return deb_packages [EOL] [EOL] [EOL] deb_packages = get_deb_packages ( ) [EOL] [EOL] [EOL] def get_deb_tags ( ) : [EOL] [docstring] [EOL] deb_tags = [ ] [EOL] [EOL] for deb in get_deb_packages ( ) : [EOL] for tag in securedrop_test_vars . lintian_tags : [EOL] deb_tags . append ( ( deb , tag ) ) [EOL] [EOL] return deb_tags [EOL] [EOL] [EOL] deb_tags = get_deb_tags ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_build_deb_packages ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] assert deb_package . is_file [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_packages_appear_installable ( host , deb ) : [EOL] [docstring] [EOL] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] deb_basename = os . path . basename ( deb_package . path ) [EOL] package_name = extract_package_name_from_filepath ( deb_package . path ) [EOL] assert deb_basename . startswith ( package_name ) [EOL] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] assert [string] . format ( package_name ) in c . stdout [EOL] regex = [string] . format ( re . escape ( deb_basename ) ) [EOL] assert re . search ( regex , c . stdout , re . M ) [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_control_fields ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] package_name = extract_package_name_from_filepath ( deb_package . path ) [EOL] [comment] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [EOL] assert [string] in c . stdout [EOL] [comment] [EOL] if package_name == [string] : [EOL] assert [string] in c . stdout [EOL] else : [EOL] assert [string] in c . stdout [EOL] [EOL] assert [string] . format ( package_name ) in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_control_fields_homepage ( host , deb ) : [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [comment] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] [comment] [EOL] if os . path . basename ( deb_package . path ) . startswith ( [string] ) : [EOL] assert [string] in c . stdout [EOL] else : [EOL] assert [string] in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_no_config_file ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] assert not re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_pot_file ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] assert re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_mo_file ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] assert re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_no_generated_assets ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] assert re . search ( [string] [string] , c . stdout , re . M ) [EOL] [comment] [EOL] assert not re . search ( [string] [string] , c . stdout , re . M ) [EOL] [EOL] [comment] [EOL] assert re . search ( [string] [string] , c . stdout , re . M ) [EOL] [comment] [EOL] assert not re . search ( [string] [string] , c . stdout , re . M ) [EOL] [EOL] [comment] [EOL] assert not re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [comment] [EOL] assert not re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_expected_conffiles ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] tmpdir = tempfile . mkdtemp ( ) [EOL] [comment] [EOL] host . run ( [string] . format ( deb , tmpdir ) ) [EOL] conffiles_path = os . path . join ( tmpdir , [string] , [string] ) [EOL] f = host . file ( conffiles_path ) [EOL] [EOL] assert f . is_file [EOL] [comment] [EOL] [comment] [EOL] conffiles = f . content_string . rstrip ( ) [EOL] assert conffiles == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb ) ) [EOL] assert [string] not in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_package_contains_css ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [EOL] for css_type in [ [string] , [string] ] : [EOL] assert re . search ( [string] [string] . format ( css_type ) , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_tags ) def test_deb_package_lintian ( host , deb , tag ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] c = host . run ( [string] . format ( tag , deb_package . path ) ) [EOL] assert len ( c . stdout ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_deb_app_package_contains_https_validate_dir ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] assert re . search ( [string] [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_grsec_metapackage ( host , deb ) : [EOL] [docstring] [EOL] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] assert re . search ( [string] , c . stdout , re . M ) [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] assert re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_control_helper_files_are_present ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [comment] [EOL] if [string] in deb_package . path : [EOL] wanted_files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] for wanted_file in wanted_files : [EOL] assert re . search ( [string] + wanted_file + [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_jinja_files_not_present ( host , deb ) : [EOL] [docstring] [EOL] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] [comment] [EOL] assert not re . search ( [string] , c . stdout , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_ossec_binaries_are_present_agent ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . ossec_version ) ) [EOL] [comment] [EOL] if [string] in deb_package . path and [string] not in deb_package . path : [EOL] wanted_files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] for wanted_file in wanted_files : [EOL] assert wanted_file in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_ossec_binaries_are_present_server ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . ossec_version ) ) [EOL] [comment] [EOL] if [string] in deb_package . path and [string] not in deb_package . path : [EOL] wanted_files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] for wanted_file in wanted_files : [EOL] assert wanted_file in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_config_package_contains_expected_files ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] if [string] in deb_package . path : [EOL] wanted_files = [ [string] , [string] , ] [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] for wanted_file in wanted_files : [EOL] assert wanted_file in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , deb_packages ) def test_app_package_does_not_contain_custom_logo ( host , deb ) : [EOL] [docstring] [EOL] deb_package = host . file ( deb . format ( securedrop_test_vars . securedrop_version ) ) [EOL] if [string] in deb_package . path : [EOL] c = host . run ( [string] . format ( deb_package . path ) ) [EOL] assert [string] not in c . stdout [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Any , Type , List [EOL] import packager [EOL] import typing [EOL] import molecule [EOL] import boto3 [EOL] import os [EOL] [EOL] [EOL] class S3_Bucket_IndexCreator ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , bucket , path ) : [EOL] self . s3 = boto3 . resource ( [string] ) [EOL] self . vagrant_bucket = self . s3 . Bucket ( name = bucket ) [EOL] self . bucket = bucket [EOL] self . path = path [EOL] [EOL] def bucket_get_list ( self ) : [EOL] [docstring] [EOL] [EOL] return [ obj . key . split ( [string] ) [ - [number] ] for obj in self . vagrant_bucket . objects . filter ( Prefix = self . path ) if [string] not in obj . key ] [EOL] [EOL] def generate_html_index ( self ) : [EOL] [docstring] [EOL] [EOL] str_files = [ [string] . format ( file = f ) for f in self . bucket_get_list ( ) ] [EOL] [EOL] index_string = [string] . format ( path = self . path , files = [string] . join ( str_files ) ) [EOL] [EOL] return index_string [EOL] [EOL] def upload_string_as_file ( self , contents , filename = [string] , content_type = [string] ) : [EOL] [EOL] [docstring] [EOL] object = self . s3 . Object ( self . bucket , [string] . format ( self . path , filename ) ) [EOL] object . put ( Body = contents , ContentType = content_type ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] BUCKET = os . environ . get ( [string] , [string] ) [EOL] BUCKET_PATH = os . environ . get ( [string] , [string] ) [EOL] [EOL] bucket_index_creation = S3_Bucket_IndexCreator ( BUCKET , BUCKET_PATH ) [EOL] index = bucket_index_creation . generate_html_index ( ) [EOL] bucket_index_creation . upload_string_as_file ( index ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any , Set , Dict , Union [EOL] import unittest [EOL] import typing [EOL] import unittest [EOL] import subprocess [EOL] import pexpect [EOL] import pytest [EOL] from unittest import mock [EOL] from unittest . mock import MagicMock [EOL] from PyQt5 . QtCore import Qt [EOL] from PyQt5 . QtWidgets import ( QApplication , QSizePolicy , QInputDialog ) [EOL] from PyQt5 . QtTest import QTest [EOL] [EOL] from journalist_gui . SecureDropUpdater import UpdaterApp , strings , FLAG_LOCATION [EOL] from journalist_gui . SecureDropUpdater import prevent_second_instance [EOL] [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) class TestSecondInstancePrevention ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . mock_app = mock . MagicMock ( ) [EOL] self . mock_app . applicationName = mock . MagicMock ( return_value = [string] ) [EOL] [EOL] @ staticmethod def socket_mock_generator ( already_bound_errno = [number] ) : [EOL] namespace = set ( ) [EOL] [EOL] def kernel_bind ( addr ) : [EOL] if addr in namespace : [EOL] error = OSError ( ) [EOL] error . errno = already_bound_errno [EOL] raise error [EOL] else : [EOL] namespace . add ( addr ) [EOL] [EOL] socket_mock = mock . MagicMock ( ) [EOL] socket_mock . socket ( ) . bind = mock . MagicMock ( side_effect = kernel_bind ) [EOL] return socket_mock [EOL] [EOL] def test_diff_name ( self , mock_msgbox , mock_exit ) : [EOL] mock_socket = self . socket_mock_generator ( ) [EOL] with mock . patch ( [string] , new = mock_socket ) : [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] [EOL] mock_exit . assert_not_called ( ) [EOL] [EOL] def test_same_name ( self , mock_msgbox , mock_exit ) : [EOL] mock_socket = self . socket_mock_generator ( ) [EOL] with mock . patch ( [string] , new = mock_socket ) : [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] [EOL] mock_exit . assert_any_call ( ) [EOL] [EOL] def test_unknown_kernel_error ( self , mock_msgbox , mock_exit ) : [EOL] mock_socket = self . socket_mock_generator ( [number] ) [comment] [EOL] with mock . patch ( [string] , new = mock_socket ) : [EOL] with pytest . raises ( OSError ) : [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] prevent_second_instance ( self . mock_app , [string] ) [EOL] [EOL] [EOL] class AppTestCase ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] qApp = QApplication . instance ( ) [EOL] if qApp is None : [EOL] self . app = QApplication ( [ [string] ] ) [EOL] else : [EOL] self . app = qApp [EOL] [EOL] [EOL] class WindowTestCase ( AppTestCase ) : [EOL] def setUp ( self ) : [EOL] super ( WindowTestCase , self ) . setUp ( ) [EOL] self . window = UpdaterApp ( ) [EOL] self . window . show ( ) [EOL] QTest . qWaitForWindowExposed ( self . window ) [EOL] [EOL] def test_window_is_a_fixed_size ( self ) : [EOL] [comment] [EOL] expected_sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Fixed ) [EOL] assert self . window . sizePolicy ( ) == expected_sizePolicy [EOL] [EOL] [comment] [EOL] current_size = self . window . size ( ) [EOL] assert self . window . minimumSize ( ) == current_size [EOL] assert self . window . maximumSize ( ) == current_size [EOL] [EOL] def test_clicking_install_later_exits_the_application ( self ) : [EOL] QTest . mouseClick ( self . window . pushButton , Qt . LeftButton ) [EOL] self . assertFalse ( self . window . isVisible ( ) ) [EOL] [EOL] def test_progress_bar_begins_at_zero ( self ) : [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] [EOL] def test_default_tab ( self ) : [EOL] self . assertEqual ( self . window . tabWidget . currentIndex ( ) , [number] ) [EOL] [EOL] def test_output_tab ( self ) : [EOL] [EOL] tab = self . window . tabWidget . tabBar ( ) [EOL] QTest . mouseClick ( tab , Qt . LeftButton ) [EOL] self . assertEqual ( self . window . tabWidget . currentIndex ( ) , self . window . tabWidget . indexOf ( self . window . tab_2 ) ) [EOL] [EOL] @ mock . patch ( [string] , return_value = [string] ) def test_setupThread ( self , check_output ) : [EOL] with mock . patch . object ( self . window , [string] , return_value = MagicMock ( ) ) : [EOL] with mock . patch ( [string] ) as mock_open : [EOL] self . window . setup_thread . run ( ) [comment] [EOL] [EOL] mock_open . assert_called_once_with ( FLAG_LOCATION , [string] ) [EOL] self . assertEqual ( self . window . update_success , True ) [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] [EOL] @ mock . patch ( [string] , return_value = [string] ) def test_setupThread_failure ( self , check_output ) : [EOL] with mock . patch . object ( self . window , [string] , return_value = MagicMock ( ) ) : [EOL] with mock . patch ( [string] ) as mock_open : [EOL] self . window . setup_thread . run ( ) [comment] [EOL] [EOL] mock_open . assert_called_once_with ( FLAG_LOCATION , [string] ) [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] self . assertEqual ( self . window . failure_reason , strings . update_failed_generic_reason ) [EOL] [EOL] @ mock . patch ( [string] , return_value = [string] ) def test_updateThread ( self , check_output ) : [EOL] with mock . patch . object ( self . window , [string] , return_value = MagicMock ( ) ) : [EOL] self . window . update_thread . run ( ) [comment] [EOL] self . assertEqual ( self . window . update_success , True ) [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = subprocess . CalledProcessError ( [number] , [string] , [string] ) ) def test_updateThread_failure ( self , check_output ) : [EOL] with mock . patch . object ( self . window , [string] , return_value = MagicMock ( ) ) : [EOL] self . window . update_thread . run ( ) [comment] [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . update_failed_sig_failure ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = subprocess . CalledProcessError ( [number] , [string] , [string] ) ) def test_updateThread_generic_failure ( self , check_output ) : [EOL] with mock . patch . object ( self . window , [string] , return_value = MagicMock ( ) ) : [EOL] self . window . update_thread . run ( ) [comment] [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . update_failed_generic_reason ) [EOL] [EOL] def test_get_sudo_password_when_password_provided ( self ) : [EOL] expected_password = [string] [EOL] [EOL] with mock . patch . object ( QInputDialog , [string] , return_value = [ expected_password , True ] ) : [EOL] sudo_password = self . window . get_sudo_password ( ) [EOL] [EOL] self . assertEqual ( sudo_password , expected_password ) [EOL] [EOL] def test_get_sudo_password_when_password_not_provided ( self ) : [EOL] test_password = [string] [EOL] [EOL] with mock . patch . object ( QInputDialog , [string] , return_value = [ test_password , False ] ) : [EOL] self . assertIsNone ( self . window . get_sudo_password ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) def test_tailsconfigThread_no_failures ( self , pt ) : [EOL] child = pt ( ) [EOL] before = MagicMock ( ) [EOL] [EOL] before . decode . side_effect = [ [string] , [string] ] [EOL] child . before = before [EOL] child . exitstatus = [number] [EOL] with mock . patch ( [string] ) as mock_remove : [EOL] self . window . tails_thread . run ( ) [EOL] [EOL] mock_remove . assert_called_once_with ( FLAG_LOCATION ) [EOL] self . assertIn ( [string] , self . window . output ) [EOL] self . assertEqual ( self . window . update_success , True ) [EOL] [EOL] @ mock . patch ( [string] ) def test_tailsconfigThread_generic_failure ( self , pt ) : [EOL] child = pt ( ) [EOL] before = MagicMock ( ) [EOL] before . decode . side_effect = [ [string] , [string] ] [EOL] child . before = before [EOL] self . window . tails_thread . run ( ) [EOL] self . assertNotIn ( [string] , self . window . output ) [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . tailsconfig_failed_generic_reason ) [EOL] [EOL] @ mock . patch ( [string] ) def test_tailsconfigThread_sudo_password_is_wrong ( self , pt ) : [EOL] child = pt ( ) [EOL] before = MagicMock ( ) [EOL] before . decode . return_value = [string] [EOL] child . before = before [EOL] self . window . tails_thread . run ( ) [EOL] self . assertNotIn ( [string] , self . window . output ) [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . tailsconfig_failed_sudo_password ) [EOL] [EOL] @ mock . patch ( [string] ) def test_tailsconfigThread_timeout ( self , pt ) : [EOL] child = pt ( ) [EOL] before = MagicMock ( ) [EOL] before . decode . side_effect = [ [string] , pexpect . exceptions . TIMEOUT ( [number] ) ] [EOL] child . before = before [EOL] self . window . tails_thread . run ( ) [EOL] self . assertNotIn ( [string] , self . window . output ) [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . tailsconfig_failed_timeout ) [EOL] [EOL] @ mock . patch ( [string] ) def test_tailsconfigThread_some_other_subprocess_error ( self , pt ) : [EOL] child = pt ( ) [EOL] before = MagicMock ( ) [EOL] before . decode . side_effect = subprocess . CalledProcessError ( [number] , [string] , [string] ) [EOL] child . before = before [EOL] self . window . tails_thread . run ( ) [EOL] self . assertNotIn ( [string] , self . window . output ) [EOL] self . assertEqual ( self . window . update_success , False ) [EOL] self . assertEqual ( self . window . failure_reason , strings . tailsconfig_failed_generic_reason ) [EOL] [EOL] def test_tails_status_success ( self ) : [EOL] result = { [string] : True , [string] : [string] , [string] : [string] } [EOL] [EOL] with mock . patch ( [string] ) as mock_remove : [EOL] self . window . tails_status ( result ) [EOL] [EOL] [comment] [EOL] mock_remove . assert_called_once_with ( FLAG_LOCATION ) [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] [EOL] def test_tails_status_failure ( self ) : [EOL] result = { [string] : False , [string] : [string] , [string] : [string] } [EOL] [EOL] with mock . patch ( [string] ) as mock_remove : [EOL] self . window . tails_status ( result ) [EOL] [EOL] [comment] [EOL] mock_remove . assert_not_called ( ) [EOL] self . assertEqual ( self . window . progressBar . value ( ) , [number] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_no_update_without_password ( self , mock_msgbox ) : [EOL] with mock . patch ( [string] , return_value = False ) : [EOL] self . window . update_securedrop ( ) [EOL] self . assertEqual ( self . window . pushButton . isEnabled ( ) , True ) [EOL] self . assertEqual ( self . window . pushButton_2 . isEnabled ( ) , False ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.OSError$ 0 0 0 0 0 $builtins.OSError$ 0 $builtins.int$ 0 0 0 0 $builtins.OSError$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from PyQt5 import QtCore , QtGui , QtWidgets [EOL] [EOL] [EOL] class Ui_MainWindow ( object ) : [EOL] def setupUi ( self , MainWindow ) : [EOL] MainWindow . setObjectName ( [string] ) [EOL] MainWindow . resize ( [number] , [number] ) [EOL] sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) [EOL] sizePolicy . setHorizontalStretch ( [number] ) [EOL] sizePolicy . setVerticalStretch ( [number] ) [EOL] sizePolicy . setHeightForWidth ( MainWindow . sizePolicy ( ) . hasHeightForWidth ( ) ) [EOL] MainWindow . setSizePolicy ( sizePolicy ) [EOL] MainWindow . setMinimumSize ( QtCore . QSize ( [number] , [number] ) ) [EOL] MainWindow . setMaximumSize ( QtCore . QSize ( [number] , [number] ) ) [EOL] self . centralwidget = QtWidgets . QWidget ( MainWindow ) [EOL] self . centralwidget . setObjectName ( [string] ) [EOL] self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . centralwidget ) [EOL] self . verticalLayout_3 . setObjectName ( [string] ) [EOL] self . label_2 = QtWidgets . QLabel ( self . centralwidget ) [EOL] sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Preferred , QtWidgets . QSizePolicy . Fixed ) [EOL] sizePolicy . setHorizontalStretch ( [number] ) [EOL] sizePolicy . setVerticalStretch ( [number] ) [EOL] sizePolicy . setHeightForWidth ( self . label_2 . sizePolicy ( ) . hasHeightForWidth ( ) ) [EOL] self . label_2 . setSizePolicy ( sizePolicy ) [EOL] self . label_2 . setText ( [string] ) [EOL] self . label_2 . setPixmap ( QtGui . QPixmap ( [string] ) ) [EOL] self . label_2 . setScaledContents ( True ) [EOL] self . label_2 . setObjectName ( [string] ) [EOL] self . verticalLayout_3 . addWidget ( self . label_2 ) [EOL] self . tabWidget = QtWidgets . QTabWidget ( self . centralwidget ) [EOL] self . tabWidget . setObjectName ( [string] ) [EOL] self . tab = QtWidgets . QWidget ( ) [EOL] self . tab . setObjectName ( [string] ) [EOL] self . verticalLayout = QtWidgets . QVBoxLayout ( self . tab ) [EOL] self . verticalLayout . setObjectName ( [string] ) [EOL] self . label = QtWidgets . QLabel ( self . tab ) [EOL] sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Preferred , QtWidgets . QSizePolicy . Preferred ) [EOL] sizePolicy . setHorizontalStretch ( [number] ) [EOL] sizePolicy . setVerticalStretch ( [number] ) [EOL] sizePolicy . setHeightForWidth ( self . label . sizePolicy ( ) . hasHeightForWidth ( ) ) [EOL] self . label . setSizePolicy ( sizePolicy ) [EOL] self . label . setTextFormat ( QtCore . Qt . PlainText ) [EOL] self . label . setScaledContents ( False ) [EOL] self . label . setWordWrap ( True ) [EOL] self . label . setObjectName ( [string] ) [EOL] self . verticalLayout . addWidget ( self . label ) [EOL] self . tabWidget . addTab ( self . tab , [string] ) [EOL] self . tab_2 = QtWidgets . QWidget ( ) [EOL] self . tab_2 . setObjectName ( [string] ) [EOL] self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . tab_2 ) [EOL] self . verticalLayout_2 . setObjectName ( [string] ) [EOL] self . plainTextEdit = QtWidgets . QPlainTextEdit ( self . tab_2 ) [EOL] self . plainTextEdit . setReadOnly ( True ) [EOL] self . plainTextEdit . setObjectName ( [string] ) [EOL] self . verticalLayout_2 . addWidget ( self . plainTextEdit ) [EOL] self . tabWidget . addTab ( self . tab_2 , [string] ) [EOL] self . verticalLayout_3 . addWidget ( self . tabWidget ) [EOL] self . progressBar = QtWidgets . QProgressBar ( self . centralwidget ) [EOL] self . progressBar . setProperty ( [string] , [number] ) [EOL] self . progressBar . setObjectName ( [string] ) [EOL] self . verticalLayout_3 . addWidget ( self . progressBar ) [EOL] self . horizontalLayout_2 = QtWidgets . QHBoxLayout ( ) [EOL] self . horizontalLayout_2 . setObjectName ( [string] ) [EOL] self . pushButton = QtWidgets . QPushButton ( self . centralwidget ) [EOL] self . pushButton . setObjectName ( [string] ) [EOL] self . horizontalLayout_2 . addWidget ( self . pushButton ) [EOL] self . pushButton_2 = QtWidgets . QPushButton ( self . centralwidget ) [EOL] self . pushButton_2 . setObjectName ( [string] ) [EOL] self . horizontalLayout_2 . addWidget ( self . pushButton_2 ) [EOL] self . verticalLayout_3 . addLayout ( self . horizontalLayout_2 ) [EOL] MainWindow . setCentralWidget ( self . centralwidget ) [EOL] self . menubar = QtWidgets . QMenuBar ( MainWindow ) [EOL] self . menubar . setGeometry ( QtCore . QRect ( [number] , [number] , [number] , [number] ) ) [EOL] self . menubar . setObjectName ( [string] ) [EOL] MainWindow . setMenuBar ( self . menubar ) [EOL] self . statusbar = QtWidgets . QStatusBar ( MainWindow ) [EOL] self . statusbar . setObjectName ( [string] ) [EOL] MainWindow . setStatusBar ( self . statusbar ) [EOL] [EOL] self . retranslateUi ( MainWindow ) [EOL] self . tabWidget . setCurrentIndex ( [number] ) [EOL] QtCore . QMetaObject . connectSlotsByName ( MainWindow ) [EOL] [EOL] def retranslateUi ( self , MainWindow ) : [EOL] _translate = QtCore . QCoreApplication . translate [EOL] MainWindow . setWindowTitle ( _translate ( [string] , [string] ) ) [EOL] self . label . setText ( _translate ( [string] , ( [string] [string] ) , ) ) [EOL] self . tabWidget . setTabText ( self . tabWidget . indexOf ( self . tab ) , _translate ( [string] , [string] ) ) [EOL] self . tabWidget . setTabText ( self . tabWidget . indexOf ( self . tab_2 ) , _translate ( [string] , [string] ) ) [EOL] self . pushButton . setText ( _translate ( [string] , [string] ) ) [EOL] self . pushButton_2 . setText ( _translate ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import setuptools [EOL] [EOL] setuptools . setup ( setup_requires = [ [string] , [string] ] , d2to1 = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Pattern , Literal , Dict , Tuple , Set , List [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import typing_extensions [EOL] import argparse [EOL] [docstring] [EOL] [EOL] import argparse [EOL] import ipaddress [EOL] import logging [EOL] import os [EOL] import io [EOL] import re [EOL] import subprocess [EOL] import sys [EOL] import json [EOL] import base64 [EOL] import prompt_toolkit [EOL] from prompt_toolkit . document import Document [EOL] from prompt_toolkit . validation import Validator , ValidationError [EOL] import yaml [EOL] from pkg_resources import parse_version [EOL] from cryptography . hazmat . primitives import serialization [EOL] from cryptography . hazmat . primitives . asymmetric import x25519 [EOL] [EOL] sdlog = logging . getLogger ( __name__ ) [EOL] RELEASE_KEY = [string] [EOL] DEFAULT_KEYSERVER = [string] [EOL] SUPPORT_ONION_URL = [string] [EOL] SUPPORT_URL = [string] [EOL] EXIT_SUCCESS = [number] [EOL] EXIT_SUBPROCESS_ERROR = [number] [EOL] EXIT_INTERRUPT = [number] [EOL] [EOL] MAX_NAMESERVERS = [number] [EOL] LIST_SPLIT_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] class FingerprintException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class JournalistAlertEmailException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class SiteConfig ( object ) : [EOL] [EOL] class ValidateNotEmpty ( Validator ) : [EOL] def validate ( self , document ) : [EOL] if document . text != [string] : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateTime ( Validator ) : [EOL] def validate ( self , document ) : [EOL] if document . text . isdigit ( ) and int ( document . text ) in range ( [number] , [number] ) : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateUser ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text [EOL] if text != [string] and text != [string] and text != [string] : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateIP ( Validator ) : [EOL] def validate ( self , document ) : [EOL] try : [EOL] ipaddress . ip_address ( document . text ) [EOL] return True [EOL] except ValueError as e : [EOL] raise ValidationError ( message = str ( e ) ) [EOL] [EOL] class ValidateNameservers ( Validator ) : [EOL] def validate ( self , document ) : [EOL] candidates = LIST_SPLIT_RE . split ( document . text ) [EOL] if len ( candidates ) > MAX_NAMESERVERS : [EOL] raise ValidationError ( message = [string] ) [EOL] try : [EOL] all ( map ( ipaddress . ip_address , candidates ) ) [EOL] except ValueError : [EOL] raise ValidationError ( message = ( [string] [string] ) . format ( MAX_NAMESERVERS ) ) [EOL] return True [EOL] [EOL] @ staticmethod def split_list ( text ) : [EOL] [docstring] [EOL] return LIST_SPLIT_RE . split ( text ) [EOL] [EOL] class ValidatePath ( Validator ) : [EOL] def __init__ ( self , basedir ) : [EOL] self . basedir = basedir [EOL] super ( SiteConfig . ValidatePath , self ) . __init__ ( ) [EOL] [EOL] def validate ( self , document ) : [EOL] if document . text == [string] : [EOL] raise ValidationError ( message = [string] ) [EOL] path = os . path . join ( self . basedir , document . text ) [EOL] if os . path . exists ( path ) : [EOL] return True [EOL] raise ValidationError ( message = path + [string] ) [EOL] [EOL] class ValidateOptionalPath ( ValidatePath ) : [EOL] def validate ( self , document ) : [EOL] if document . text == [string] : [EOL] return True [EOL] return super ( SiteConfig . ValidateOptionalPath , self ) . validate ( document ) [EOL] [EOL] class ValidateYesNo ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text . lower ( ) [EOL] if text == [string] or text == [string] : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateYesNoForV3 ( Validator ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] Validator . __init__ ( * args , ** kwargs ) [EOL] self . caller = args [ [number] ] [EOL] [EOL] def validate ( self , document ) : [EOL] text = document . text . lower ( ) [EOL] [comment] [EOL] [comment] [EOL] if text == [string] and not self . caller . _config_in_progress . get ( [string] ) : [comment] [EOL] raise ValidationError ( message = [string] ) [comment] [EOL] if text == [string] or text == [string] : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateFingerprint ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text . replace ( [string] , [string] ) [EOL] if text == [string] : [EOL] raise ValidationError ( message = [string] ) [EOL] if text == [string] : [EOL] raise ValidationError ( message = [string] ) [EOL] if not re . match ( [string] , text ) : [EOL] raise ValidationError ( message = [string] ) [EOL] return True [EOL] [EOL] class ValidateOptionalFingerprint ( ValidateFingerprint ) : [EOL] def validate ( self , document ) : [EOL] if document . text == [string] : [EOL] return True [EOL] return super ( SiteConfig . ValidateOptionalFingerprint , self ) . validate ( document ) [EOL] [EOL] class ValidateInt ( Validator ) : [EOL] def validate ( self , document ) : [EOL] if re . match ( [string] , document . text ) : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class Locales ( object ) : [EOL] def __init__ ( self , appdir ) : [EOL] self . translation_dir = os . path . realpath ( os . path . join ( appdir , [string] ) ) [EOL] [EOL] def get_translations ( self ) : [EOL] translations = set ( [ [string] ] ) [EOL] for dirname in os . listdir ( self . translation_dir ) : [EOL] if dirname != [string] : [EOL] translations . add ( dirname ) [EOL] return translations [EOL] [EOL] class ValidateLocales ( Validator ) : [EOL] def __init__ ( self , basedir ) : [EOL] self . basedir = basedir [EOL] super ( SiteConfig . ValidateLocales , self ) . __init__ ( ) [EOL] [EOL] def validate ( self , document ) : [EOL] desired = document . text . split ( ) [EOL] existing = SiteConfig . Locales ( self . basedir ) . get_translations ( ) [EOL] missing = set ( desired ) - set ( existing ) [EOL] if not missing : [EOL] return True [EOL] raise ValidationError ( message = [string] + [string] . join ( missing ) ) [EOL] [EOL] class ValidateOSSECUsername ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text [EOL] if text and [string] not in text and [string] != text : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateOSSECPassword ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text [EOL] if len ( text ) >= [number] and [string] != text : [EOL] return True [EOL] raise ValidationError ( message = [string] ) [EOL] [EOL] class ValidateEmail ( Validator ) : [EOL] def validate ( self , document ) : [EOL] text = document . text [EOL] if text == [string] : [EOL] raise ValidationError ( message = ( [string] ) ) [EOL] if [string] not in text : [EOL] raise ValidationError ( message = ( [string] ) ) [EOL] return True [EOL] [EOL] class ValidateOSSECEmail ( ValidateEmail ) : [EOL] def validate ( self , document ) : [EOL] super ( SiteConfig . ValidateOSSECEmail , self ) . validate ( document ) [EOL] text = document . text [EOL] if [string] != text : [EOL] return True [EOL] raise ValidationError ( message = ( [string] [string] ) ) [EOL] [EOL] class ValidateOptionalEmail ( ValidateEmail ) : [EOL] def validate ( self , document ) : [EOL] if document . text == [string] : [EOL] return True [EOL] return super ( SiteConfig . ValidateOptionalEmail , self ) . validate ( document ) [EOL] [EOL] def __init__ ( self , args ) : [EOL] self . args = args [EOL] self . config = { } [EOL] [comment] [EOL] [comment] [EOL] self . _config_in_progress = { } [EOL] translations = SiteConfig . Locales ( self . args . app_path ) . get_translations ( ) [EOL] translations = [string] . join ( translations ) [EOL] self . desc = [ [ [string] , [string] , str , [string] , SiteConfig . ValidateUser ( ) , None , lambda config : True ] , [ [string] , [number] , int , [string] , SiteConfig . ValidateTime ( ) , int , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateIP ( ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateIP ( ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateNotEmpty ( ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateNotEmpty ( ) , None , lambda config : True ] , [ [string] , [ [string] , [string] ] , list , [string] , SiteConfig . ValidateNameservers ( ) , SiteConfig . split_list , lambda config : True ] , [ [string] , [string] , str , [string] + [string] , SiteConfig . ValidatePath ( self . args . ansible_path ) , None , lambda config : True ] , [ [string] , False , bool , [string] + [string] , SiteConfig . ValidateYesNo ( ) , lambda x : x . lower ( ) == [string] , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOptionalPath ( self . args . ansible_path ) , None , lambda config : config . get ( [string] ) ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOptionalPath ( self . args . ansible_path ) , None , lambda config : config . get ( [string] ) ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOptionalPath ( self . args . ansible_path ) , None , lambda config : config . get ( [string] ) ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateFingerprint ( ) , self . sanitize_fingerprint , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidatePath ( self . args . ansible_path ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateFingerprint ( ) , self . sanitize_fingerprint , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOSSECEmail ( ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOptionalPath ( self . args . ansible_path ) , None , lambda config : True ] , [ [string] , [string] , str , [string] + [string] , SiteConfig . ValidateOptionalFingerprint ( ) , self . sanitize_fingerprint , lambda config : config . get ( [string] ) ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOptionalEmail ( ) , None , lambda config : config . get ( [string] ) ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateNotEmpty ( ) , None , lambda config : True ] , [ [string] , [number] , int , [string] , SiteConfig . ValidateInt ( ) , int , lambda config : True ] , [ [string] , [string] , str , [string] , None , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOSSECUsername ( ) , None , lambda config : True ] , [ [string] , [string] , str , [string] , SiteConfig . ValidateOSSECPassword ( ) , None , lambda config : True ] , [ [string] , True , bool , [string] + [string] , SiteConfig . ValidateYesNo ( ) , lambda x : x . lower ( ) == [string] , lambda config : True ] , [ [string] , [ ] , list , [string] [string] + translations + [string] , SiteConfig . ValidateLocales ( self . args . app_path ) , str . split , lambda config : True ] , [ [string] , self . check_for_v2_onion ( ) , bool , [string] + [string] + [string] , SiteConfig . ValidateYesNo ( ) , lambda x : x . lower ( ) == [string] , lambda config : True ] , [ [string] , self . check_for_v3_onion , bool , [string] , SiteConfig . ValidateYesNoForV3 ( self ) , lambda x : x . lower ( ) == [string] , lambda config : True ] , ] [EOL] [EOL] def load_and_update_config ( self , validate = True , prompt = True ) : [EOL] if self . exists ( ) : [EOL] self . config = self . load ( validate ) [EOL] elif not prompt : [EOL] sdlog . error ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] return self . update_config ( prompt ) [EOL] [EOL] def update_config ( self , prompt = True ) : [EOL] if prompt : [EOL] self . config . update ( self . user_prompt_config ( ) ) [EOL] self . save ( ) [EOL] self . validate_gpg_keys ( ) [EOL] self . validate_journalist_alert_email ( ) [EOL] self . validate_https_and_v3 ( ) [EOL] return True [EOL] [EOL] def validate_https_and_v3 ( self ) : [EOL] [docstring] [EOL] warning_msg = ( [string] [string] [string] [string] [string] ) [EOL] [EOL] if self . config . get ( [string] , False ) and self . config . get ( [string] ) : [EOL] print ( warning_msg ) [EOL] return False [EOL] return True [EOL] [EOL] def check_for_v2_onion ( self ) : [EOL] [docstring] [EOL] source_ths = os . path . join ( self . args . ansible_path , [string] ) [EOL] if os . path . exists ( source_ths ) : [comment] [EOL] data = [string] [EOL] with open ( source_ths ) as fobj : [EOL] data = fobj . read ( ) [EOL] [EOL] data = data . strip ( ) [EOL] if len ( data ) < [number] : [comment] [EOL] return True [EOL] return False [EOL] [EOL] def check_for_v3_onion ( self ) : [EOL] [docstring] [EOL] v2_value = self . _config_in_progress . get ( [string] , False ) [EOL] [comment] [EOL] [comment] [EOL] v3_value = self . config . get ( [string] , True ) [EOL] return v3_value or not v2_value [EOL] [EOL] def user_prompt_config ( self ) : [EOL] self . _config_in_progress = { } [EOL] for desc in self . desc : [EOL] ( var , default , type , prompt , validator , transform , condition ) = desc [EOL] if not condition ( self . _config_in_progress ) : [EOL] self . _config_in_progress [ var ] = [string] [EOL] continue [EOL] self . _config_in_progress [ var ] = self . user_prompt_config_one ( desc , self . config . get ( var ) ) [comment] [EOL] return self . _config_in_progress [EOL] [EOL] def user_prompt_config_one ( self , desc , from_config ) : [EOL] ( var , default , type , prompt , validator , transform , condition ) = desc [EOL] if from_config is not None and var != [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] default = from_config [EOL] prompt += [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if callable ( default ) : [EOL] default = default ( ) [EOL] return self . validated_input ( prompt , default , validator , transform ) [EOL] [EOL] def validated_input ( self , prompt , default , validator , transform ) : [EOL] if type ( default ) is bool : [EOL] default = default and [string] or [string] [EOL] if type ( default ) is int : [EOL] default = str ( default ) [EOL] if isinstance ( default , list ) : [EOL] default = [string] . join ( default ) [EOL] if type ( default ) is not str : [EOL] default = str ( default ) [EOL] kwargs = { } [EOL] if validator : [EOL] kwargs [ [string] ] = validator [EOL] value = prompt_toolkit . prompt ( prompt , default = default , ** kwargs ) [EOL] if transform : [EOL] return transform ( value ) [EOL] else : [EOL] return value [EOL] [EOL] def sanitize_fingerprint ( self , value ) : [EOL] return value . upper ( ) . replace ( [string] , [string] ) [EOL] [EOL] def validate_gpg_keys ( self ) : [EOL] keys = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] validate = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , [string] ) [EOL] for ( public_key , fingerprint ) in keys : [EOL] if ( self . config [ public_key ] == [string] and self . config [ fingerprint ] == [string] ) : [EOL] continue [EOL] public_key = os . path . join ( self . args . ansible_path , self . config [ public_key ] ) [EOL] fingerprint = self . config [ fingerprint ] [EOL] try : [EOL] sdlog . debug ( subprocess . check_output ( [ validate , public_key , fingerprint ] , stderr = subprocess . STDOUT ) ) [EOL] except subprocess . CalledProcessError as e : [EOL] sdlog . debug ( e . output ) [EOL] raise FingerprintException ( [string] . format ( fingerprint ) + [string] + [string] . format ( public_key ) ) [EOL] return True [EOL] [EOL] def validate_journalist_alert_email ( self ) : [EOL] if ( self . config [ [string] ] == [string] and self . config [ [string] ] == [string] ) : [EOL] return True [EOL] [EOL] class Document ( object ) : [EOL] def __init__ ( self , text ) : [EOL] self . text = text [EOL] [EOL] try : [EOL] SiteConfig . ValidateEmail ( ) . validate ( Document ( self . config [ [string] ] ) ) [EOL] except ValidationError as e : [EOL] raise JournalistAlertEmailException ( [string] + e . message ) [EOL] return True [EOL] [EOL] def exists ( self ) : [EOL] return os . path . exists ( self . args . site_config ) [EOL] [EOL] def save ( self ) : [EOL] with io . open ( self . args . site_config , [string] ) as site_config_file : [EOL] yaml . safe_dump ( self . config , site_config_file , default_flow_style = False ) [EOL] [EOL] def clean_config ( self , config ) : [EOL] [docstring] [EOL] clean_config = { } [EOL] clean_config . update ( config ) [EOL] for desc in self . desc : [EOL] var , default , vartype , prompt , validator , transform , condition = desc [EOL] if var in clean_config : [EOL] value = clean_config [ var ] [EOL] if isinstance ( value , list ) : [EOL] text = [string] . join ( str ( v ) for v in value ) [EOL] elif isinstance ( value , bool ) : [EOL] text = [string] if value else [string] [EOL] else : [EOL] text = str ( value ) [EOL] [EOL] if validator is not None : [EOL] try : [EOL] validator . validate ( Document ( text ) ) [EOL] except ValidationError as e : [EOL] sdlog . error ( e ) [EOL] sdlog . error ( [string] [string] ) [EOL] raise [EOL] clean_config [ var ] = transform ( text ) if transform else text [EOL] if var not in self . _config_in_progress : [EOL] self . _config_in_progress [ var ] = clean_config [ var ] [EOL] return clean_config [EOL] [EOL] def load ( self , validate = True ) : [EOL] [docstring] [EOL] try : [EOL] with io . open ( self . args . site_config ) as site_config_file : [EOL] c = yaml . safe_load ( site_config_file ) [EOL] return self . clean_config ( c ) if validate else c [EOL] except IOError : [EOL] sdlog . error ( [string] ) [EOL] raise [EOL] except yaml . YAMLError : [EOL] sdlog . error ( [string] . format ( self . args . site_config ) ) [EOL] raise [EOL] [EOL] [EOL] def setup_logger ( verbose = False ) : [EOL] [docstring] [EOL] [comment] [EOL] sdlog . setLevel ( logging . DEBUG ) [EOL] level = logging . DEBUG if verbose else logging . INFO [EOL] [EOL] stdout = logging . StreamHandler ( sys . stdout ) [EOL] stdout . setFormatter ( logging . Formatter ( [string] ) ) [EOL] stdout . setLevel ( level ) [EOL] sdlog . addHandler ( stdout ) [EOL] [EOL] [EOL] def sdconfig ( args ) : [EOL] [docstring] [EOL] SiteConfig ( args ) . load_and_update_config ( validate = False ) [EOL] return [number] [EOL] [EOL] [EOL] def generate_new_v3_keys ( ) : [EOL] [docstring] [EOL] [EOL] private_key = x25519 . X25519PrivateKey . generate ( ) [EOL] private_bytes = private_key . private_bytes ( encoding = serialization . Encoding . Raw , format = serialization . PrivateFormat . Raw , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] public_key = private_key . public_key ( ) [EOL] public_bytes = public_key . public_bytes ( encoding = serialization . Encoding . Raw , format = serialization . PublicFormat . Raw ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] public = base64 . b32encode ( public_bytes ) . replace ( [string] , [string] ) . decode ( [string] ) [EOL] except TypeError : [EOL] public = base64 . b32encode ( public_bytes ) . replace ( [string] , [string] ) . decode ( [string] ) [EOL] try : [EOL] private = base64 . b32encode ( private_bytes ) . replace ( [string] , [string] ) . decode ( [string] ) [EOL] except TypeError : [EOL] private = base64 . b32encode ( private_bytes ) . replace ( [string] , [string] ) . decode ( [string] ) [EOL] return public , private [EOL] [EOL] [EOL] def find_or_generate_new_torv3_keys ( args ) : [EOL] [docstring] [EOL] secret_key_path = os . path . join ( args . ansible_path , [string] ) [EOL] if os . path . exists ( secret_key_path ) : [EOL] print ( [string] . format ( secret_key_path ) ) [EOL] return [number] [EOL] [comment] [EOL] app_journalist_public_key , app_journalist_private_key = generate_new_v3_keys ( ) [EOL] [comment] [EOL] app_ssh_public_key , app_ssh_private_key = generate_new_v3_keys ( ) [EOL] [comment] [EOL] mon_ssh_public_key , mon_ssh_private_key = generate_new_v3_keys ( ) [EOL] tor_v3_service_info = { [string] : app_journalist_public_key , [string] : app_journalist_private_key , [string] : app_ssh_public_key , [string] : app_ssh_private_key , [string] : mon_ssh_public_key , [string] : mon_ssh_private_key , } [EOL] with open ( secret_key_path , [string] ) as fobj : [EOL] json . dump ( tor_v3_service_info , fobj , indent = [number] ) [EOL] print ( [string] . format ( secret_key_path ) ) [EOL] return [number] [EOL] [EOL] [EOL] def install_securedrop ( args ) : [EOL] [docstring] [EOL] SiteConfig ( args ) . load_and_update_config ( prompt = False ) [EOL] [EOL] sdlog . info ( [string] ) [EOL] sdlog . info ( [string] [string] ) [EOL] sdlog . info ( [string] [string] ) [EOL] return subprocess . check_call ( [ os . path . join ( args . ansible_path , [string] ) , [string] ] , cwd = args . ansible_path ) [EOL] [EOL] [EOL] def backup_securedrop ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] ansible_cmd = [ [string] , os . path . join ( args . ansible_path , [string] ) , ] [EOL] return subprocess . check_call ( ansible_cmd , cwd = args . ansible_path ) [EOL] [EOL] [EOL] def restore_securedrop ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] restore_file_basename = os . path . basename ( args . restore_file ) [EOL] [EOL] [comment] [EOL] os . environ [ [string] ] = [string] [EOL] [EOL] ansible_cmd_full_restore = [ [string] , os . path . join ( args . ansible_path , [string] ) , [string] , [string] . format ( restore_file_basename ) , ] [EOL] [EOL] ansible_cmd_skip_tor = [ [string] , os . path . join ( args . ansible_path , [string] ) , [string] , [string] . format ( restore_file_basename ) , ] [EOL] [EOL] if args . restore_skip_tor : [EOL] ansible_cmd = ansible_cmd_skip_tor [EOL] else : [EOL] ansible_cmd = ansible_cmd_full_restore [EOL] [EOL] return subprocess . check_call ( ansible_cmd , cwd = args . ansible_path ) [EOL] [EOL] [EOL] def run_tails_config ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] sdlog . info ( ( [string] [string] ) ) [EOL] ansible_cmd = [ os . path . join ( args . ansible_path , [string] ) , [string] , [string] , [string] , ] [EOL] return subprocess . check_call ( ansible_cmd , cwd = args . ansible_path ) [EOL] [EOL] [EOL] def check_for_updates_wrapper ( args ) : [EOL] check_for_updates ( args ) [EOL] [comment] [EOL] return [number] [EOL] [EOL] [EOL] def check_for_updates ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] [EOL] [comment] [EOL] current_tag = subprocess . check_output ( [ [string] , [string] ] , cwd = args . root ) . decode ( [string] ) . rstrip ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] git_fetch_cmd = [ [string] , [string] , [string] ] [EOL] subprocess . check_call ( git_fetch_cmd , cwd = args . root ) [EOL] [EOL] [comment] [EOL] git_all_tags = [ [string] , [string] ] [EOL] all_tags = subprocess . check_output ( git_all_tags , cwd = args . root ) . decode ( [string] ) . rstrip ( [string] ) . split ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] all_prod_tags = [ x for x in all_tags if [string] not in x ] [EOL] [EOL] [comment] [EOL] all_prod_tags . sort ( key = parse_version ) [EOL] [EOL] latest_tag = all_prod_tags [ - [number] ] [EOL] [EOL] if current_tag != latest_tag : [EOL] sdlog . info ( [string] ) [EOL] return True , latest_tag [EOL] sdlog . info ( [string] ) [EOL] return False , latest_tag [EOL] [EOL] [EOL] def get_release_key_from_keyserver ( args , keyserver = None , timeout = [number] ) : [EOL] gpg_recv = [ [string] , str ( timeout ) , [string] , [string] , [string] , [string] ] [EOL] release_key = [ RELEASE_KEY ] [EOL] [EOL] [comment] [EOL] if keyserver : [EOL] get_key_cmd = gpg_recv + [ [string] , keyserver ] + release_key [EOL] else : [EOL] get_key_cmd = gpg_recv + release_key [EOL] [EOL] subprocess . check_call ( get_key_cmd , cwd = args . root ) [EOL] [EOL] [EOL] def update ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] [EOL] update_status , latest_tag = check_for_updates ( args ) [EOL] [EOL] if not update_status : [EOL] [comment] [EOL] return [number] [EOL] [EOL] sdlog . info ( [string] ) [EOL] [EOL] [comment] [EOL] get_release_key_from_keyserver ( args , keyserver = DEFAULT_KEYSERVER ) [EOL] [EOL] git_verify_tag_cmd = [ [string] , [string] , [string] , latest_tag ] [EOL] try : [EOL] sig_result = subprocess . check_output ( git_verify_tag_cmd , stderr = subprocess . STDOUT , cwd = args . root ) . decode ( [string] ) [EOL] [EOL] good_sig_text = [ [string] + [string] , [string] + [string] ] [EOL] bad_sig_text = [string] [EOL] gpg_lines = sig_result . split ( [string] ) [EOL] [EOL] [comment] [EOL] good_sig_matches = [ s for s in gpg_lines if any ( xs in s for xs in good_sig_text ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if RELEASE_KEY in gpg_lines [ [number] ] and len ( good_sig_matches ) == [number] and bad_sig_text not in sig_result : [EOL] [comment] [EOL] [comment] [EOL] cmd = [ [string] , [string] , [string] , [string] , [string] . format ( latest_tag ) ] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] subprocess . check_output ( cmd , stderr = subprocess . STDOUT , cwd = args . root ) [EOL] sdlog . info ( [string] ) [EOL] return [number] [EOL] except subprocess . CalledProcessError as e : [EOL] if [string] in e . output . decode ( [string] ) : [EOL] [comment] [EOL] sdlog . info ( [string] ) [EOL] else : [comment] [EOL] sdlog . info ( [string] ) [EOL] return [number] [EOL] else : [comment] [EOL] sdlog . info ( [string] ) [EOL] return [number] [EOL] [EOL] except subprocess . CalledProcessError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sdlog . info ( [string] ) [EOL] return [number] [EOL] [EOL] [comment] [EOL] git_checkout_cmd = [ [string] , [string] , latest_tag ] [EOL] subprocess . check_call ( git_checkout_cmd , cwd = args . root ) [EOL] [EOL] sdlog . info ( [string] . format ( latest_tag ) ) [EOL] return [number] [EOL] [EOL] [EOL] def get_logs ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] ansible_cmd = [ [string] , os . path . join ( args . ansible_path , [string] ) , ] [EOL] subprocess . check_call ( ansible_cmd , cwd = args . ansible_path ) [EOL] sdlog . info ( [string] [string] + SUPPORT_URL ) [EOL] return [number] [EOL] [EOL] [EOL] def set_default_paths ( args ) : [EOL] if not args . ansible_path : [EOL] args . ansible_path = args . root + [string] [EOL] args . ansible_path = os . path . realpath ( args . ansible_path ) [EOL] if not args . site_config : [EOL] args . site_config = args . ansible_path + [string] [EOL] args . site_config = os . path . realpath ( args . site_config ) [EOL] if not args . app_path : [EOL] args . app_path = args . root + [string] [EOL] args . app_path = os . path . realpath ( args . app_path ) [EOL] return args [EOL] [EOL] [EOL] def reset_admin_access ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] ansible_cmd = [ [string] , os . path . join ( args . ansible_path , [string] ) , ] [EOL] return subprocess . check_call ( ansible_cmd , cwd = args . ansible_path ) [EOL] [EOL] [EOL] def parse_argv ( argv ) : [EOL] class ArgParseFormatterCombo ( argparse . ArgumentDefaultsHelpFormatter , argparse . RawTextHelpFormatter ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] parser = argparse . ArgumentParser ( description = __doc__ , formatter_class = ArgParseFormatterCombo ) [EOL] parser . add_argument ( [string] , action = [string] , default = False , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , default = False , help = [string] ) [EOL] parser . add_argument ( [string] , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] subparsers = parser . add_subparsers ( ) [EOL] [EOL] parse_sdconfig = subparsers . add_parser ( [string] , help = sdconfig . __doc__ ) [EOL] parse_sdconfig . set_defaults ( func = sdconfig ) [EOL] [EOL] parse_install = subparsers . add_parser ( [string] , help = install_securedrop . __doc__ ) [EOL] parse_install . set_defaults ( func = install_securedrop ) [EOL] [EOL] parse_tailsconfig = subparsers . add_parser ( [string] , help = run_tails_config . __doc__ ) [EOL] parse_tailsconfig . set_defaults ( func = run_tails_config ) [EOL] [EOL] parse_generate_tor_keys = subparsers . add_parser ( [string] , help = find_or_generate_new_torv3_keys . __doc__ ) [EOL] parse_generate_tor_keys . set_defaults ( func = find_or_generate_new_torv3_keys ) [EOL] [EOL] parse_backup = subparsers . add_parser ( [string] , help = backup_securedrop . __doc__ ) [EOL] parse_backup . set_defaults ( func = backup_securedrop ) [EOL] [EOL] parse_restore = subparsers . add_parser ( [string] , help = restore_securedrop . __doc__ ) [EOL] parse_restore . set_defaults ( func = restore_securedrop ) [EOL] parse_restore . add_argument ( [string] ) [EOL] parse_restore . add_argument ( [string] , default = False , action = [string] , dest = [string] , help = [string] ) [EOL] [EOL] parse_update = subparsers . add_parser ( [string] , help = update . __doc__ ) [EOL] parse_update . set_defaults ( func = update ) [EOL] [EOL] parse_check_updates = subparsers . add_parser ( [string] , help = check_for_updates . __doc__ ) [EOL] parse_check_updates . set_defaults ( func = check_for_updates_wrapper ) [EOL] [EOL] parse_logs = subparsers . add_parser ( [string] , help = get_logs . __doc__ ) [EOL] parse_logs . set_defaults ( func = get_logs ) [EOL] [EOL] parse_reset_ssh = subparsers . add_parser ( [string] , help = reset_admin_access . __doc__ ) [EOL] parse_reset_ssh . set_defaults ( func = reset_admin_access ) [EOL] [EOL] args = parser . parse_args ( argv ) [EOL] if getattr ( args , [string] , None ) is None : [EOL] print ( [string] ) [EOL] parser . print_help ( ) [EOL] sys . exit ( [number] ) [EOL] return set_default_paths ( args ) [EOL] [EOL] [EOL] def main ( argv ) : [EOL] args = parse_argv ( argv ) [EOL] setup_logger ( args . v ) [EOL] if args . v : [EOL] return_code = args . func ( args ) [EOL] if return_code != [number] : [EOL] sys . exit ( EXIT_SUBPROCESS_ERROR ) [EOL] else : [EOL] try : [EOL] return_code = args . func ( args ) [EOL] except KeyboardInterrupt : [EOL] print ( [string] ) [EOL] sys . exit ( EXIT_INTERRUPT ) [EOL] except subprocess . CalledProcessError as e : [EOL] print ( [string] . format ( msg = e ) , file = sys . stderr ) [EOL] sys . exit ( EXIT_SUBPROCESS_ERROR ) [EOL] except Exception as e : [EOL] raise SystemExit ( [string] . format ( msg = e ) ) [EOL] if return_code == [number] : [EOL] sys . exit ( EXIT_SUCCESS ) [EOL] else : [EOL] sys . exit ( EXIT_SUBPROCESS_ERROR ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( sys . argv [ [number] : ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] import mock [EOL] import os [EOL] import pytest [EOL] import subprocess [EOL] [EOL] import bootstrap [EOL] [EOL] [EOL] class TestSecureDropAdmin ( object ) : [EOL] [EOL] def test_verbose ( self , capsys ) : [EOL] bootstrap . setup_logger ( verbose = True ) [EOL] bootstrap . sdlog . debug ( [string] ) [EOL] out , err = capsys . readouterr ( ) [EOL] assert [string] in out [EOL] [EOL] def test_not_verbose ( self , capsys ) : [EOL] bootstrap . setup_logger ( verbose = False ) [EOL] bootstrap . sdlog . debug ( [string] ) [EOL] bootstrap . sdlog . info ( [string] ) [EOL] out , err = capsys . readouterr ( ) [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] [EOL] def test_run_command ( self ) : [EOL] for output_line in bootstrap . run_command ( [ [string] , [string] ] ) : [EOL] assert output_line . strip ( ) == [string] [EOL] [EOL] lines = [ ] [EOL] with pytest . raises ( subprocess . CalledProcessError ) : [EOL] for output_line in bootstrap . run_command ( [ [string] , [string] , [string] ] ) : [EOL] lines . append ( output_line . strip ( ) ) [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] [EOL] def test_install_pip_dependencies_up_to_date ( self , caplog ) : [EOL] args = argparse . Namespace ( ) [EOL] bootstrap . install_pip_dependencies ( args , [ [string] ] ) [EOL] assert [string] in caplog . text [EOL] [EOL] def test_install_pip_dependencies_upgraded ( self , caplog ) : [EOL] args = argparse . Namespace ( ) [EOL] bootstrap . install_pip_dependencies ( args , [ [string] , [string] ] ) [EOL] assert [string] in caplog . text [EOL] [EOL] def test_install_pip_dependencies_fail ( self , caplog ) : [EOL] args = argparse . Namespace ( ) [EOL] with pytest . raises ( subprocess . CalledProcessError ) : [EOL] bootstrap . install_pip_dependencies ( args , [ [string] , [string] , [string] ] ) [EOL] assert [string] in caplog . text [EOL] assert [string] in caplog . text [EOL] assert [string] in caplog . text [EOL] [EOL] def test_python3_stretch_venv_deleted_in_buster ( self , tmpdir , caplog ) : [EOL] venv_path = str ( tmpdir ) [EOL] python_lib_path = os . path . join ( str ( tmpdir ) , [string] ) [EOL] os . makedirs ( python_lib_path ) [EOL] with mock . patch ( [string] , return_value = True ) : [EOL] with mock . patch ( [string] , return_value = [string] ) : [EOL] bootstrap . clean_up_tails3_venv ( venv_path ) [EOL] assert [string] in caplog . text [EOL] assert [string] in caplog . text [EOL] assert not os . path . exists ( venv_path ) [EOL] [EOL] def test_python3_buster_venv_not_deleted_in_buster ( self , tmpdir , caplog ) : [EOL] venv_path = str ( tmpdir ) [EOL] python_lib_path = os . path . join ( venv_path , [string] ) [EOL] os . makedirs ( python_lib_path ) [EOL] with mock . patch ( [string] , return_value = True ) : [EOL] with mock . patch ( [string] , return_value = [string] ) : [EOL] bootstrap . clean_up_tails3_venv ( venv_path ) [EOL] assert ( [string] not in caplog . text ) [EOL] assert os . path . exists ( venv_path ) [EOL] [EOL] def test_python3_stretch_venv_not_deleted_in_stretch ( self , tmpdir , caplog ) : [EOL] venv_path = str ( tmpdir ) [EOL] python_lib_path = os . path . join ( venv_path , [string] ) [EOL] os . makedirs ( python_lib_path ) [EOL] with mock . patch ( [string] , return_value = True ) : [EOL] with mock . patch ( [string] , return_value = [string] ) : [EOL] bootstrap . clean_up_tails3_venv ( venv_path ) [EOL] assert os . path . exists ( venv_path ) [EOL] [EOL] def test_venv_cleanup_subprocess_exception ( self , tmpdir , caplog ) : [EOL] venv_path = str ( tmpdir ) [EOL] python_lib_path = os . path . join ( venv_path , [string] ) [EOL] os . makedirs ( python_lib_path ) [EOL] with mock . patch ( [string] , return_value = True ) : [EOL] with mock . patch ( [string] , side_effect = subprocess . CalledProcessError ( [number] , [string] ) ) : [EOL] bootstrap . clean_up_tails3_venv ( venv_path ) [EOL] assert os . path . exists ( venv_path ) [EOL] [EOL] def test_envsetup_cleanup ( self , tmpdir , caplog ) : [EOL] venv = os . path . join ( str ( tmpdir ) , [string] ) [EOL] args = [string] [EOL] with pytest . raises ( subprocess . CalledProcessError ) : [EOL] with mock . patch ( [string] , side_effect = self . side_effect_venv_bootstrap ( venv ) ) : [EOL] bootstrap . envsetup ( args , venv ) [EOL] assert not os . path . exists ( venv ) [EOL] assert [string] in caplog . text [EOL] [EOL] def side_effect_venv_bootstrap ( self , venv_path ) : [EOL] [comment] [EOL] [comment] [EOL] os . makedirs ( venv_path ) [EOL] raise subprocess . CalledProcessError ( [number] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0