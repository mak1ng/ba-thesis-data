from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[EOL] [EOL] __MAJOR__ = [number] [EOL] [docstring] [EOL] [EOL] __MINOR__ = [number] [EOL] [docstring] [EOL] [EOL] __PATCH__ = [number] [EOL] [docstring] [EOL] [EOL] [EOL] def version ( ) : [EOL] [docstring] [EOL] return [string] . format ( __MAJOR__ , __MINOR__ , __PATCH__ ) [EOL]	0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0
	0
from mangle . common import config [EOL] [EOL] [EOL] def config_middleware ( get_response ) : [EOL] [docstring] [EOL] def middleware ( request ) : [EOL] config . reload ( ) [EOL] return get_response ( request ) [EOL] return middleware [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import mangle [EOL] import logging [EOL] import logging [EOL] [EOL] from django . contrib . auth import authenticate , login , logout [EOL] from django . shortcuts import redirect , render [EOL] from django . views . decorators . csrf import ensure_csrf_cookie [EOL] from mangle . common import config , models [EOL] from mangle . web import forms [EOL] from mangle . web . decorators import * [EOL] from mangle . web . authentication . backend import redirect_login [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ install_required @ credentials_required @ mfa_required @ ensure_csrf_cookie def show_app ( request , * args , ** kwargs ) : [EOL] [docstring] [EOL] if request . user . password_change : [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def show_install ( request ) : [EOL] [docstring] [EOL] [comment] [EOL] if config . get_bool ( [string] , True ) : [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : request . session . pop ( [string] , { } ) , } ) [EOL] [EOL] [EOL] def process_install ( request ) : [EOL] [docstring] [EOL] [comment] [EOL] if config . get_bool ( [string] , True ) : [EOL] return redirect ( [string] ) [EOL] [EOL] form = forms . InstallForm ( request . POST ) [EOL] [EOL] if not form . is_valid ( ) : [EOL] save_form ( request , form ) [EOL] return redirect ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] admin = form . save ( ) [EOL] login ( request , admin , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] config . set ( [string] , True ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ install_required def show_google_login ( request ) : [EOL] [docstring] [EOL] return redirect_login ( request ) [EOL] [EOL] [EOL] @ install_required def show_login ( request ) : [EOL] [docstring] [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] @ install_required def process_login ( request ) : [EOL] [docstring] [EOL] username = request . POST [ [string] ] [EOL] password = request . POST [ [string] ] [EOL] [EOL] user = authenticate ( request , username = username , password = password ) [EOL] [EOL] if not user : [EOL] logout ( request ) [EOL] request . session [ [string] ] = [string] [EOL] return redirect ( [string] ) [EOL] [EOL] login ( request , user , [string] ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ install_required def process_oauth ( request ) : [EOL] [docstring] [EOL] user = authenticate ( request ) [EOL] [EOL] if not user : [EOL] logout ( request ) [EOL] request . session [ [string] ] = [string] [EOL] return redirect ( [string] ) [EOL] [EOL] login ( request , user , [string] ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ install_required def process_logout ( request ) : [EOL] [docstring] [EOL] logout ( request ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ install_required @ mfa_required def show_password_reset ( request ) : [EOL] [docstring] [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] @ install_required @ mfa_required def process_password_reset ( request ) : [EOL] [docstring] [EOL] form = forms . PasswordForm ( request . POST ) [EOL] [EOL] if not form . is_valid ( ) : [EOL] save_form ( request , form ) [EOL] return redirect ( [string] ) [EOL] [EOL] request . user . set_password ( form . cleaned_data [ [string] ] ) [EOL] request . user . password_change = False [EOL] request . user . save ( ) [EOL] [EOL] login ( request , request . user , [string] ) [EOL] request . session [ [string] ] = True [EOL] [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ install_required @ credentials_required def show_mfa ( request ) : [EOL] [docstring] [EOL] return render ( request , [string] , { [string] : request . session . pop ( [string] , { } ) } ) [EOL] [EOL] [EOL] @ install_required @ credentials_required def show_mfa_setup ( request ) : [EOL] [docstring] [EOL] if request . user . mfa_enabled : [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : request . session . pop ( [string] , { } ) } ) [EOL] [EOL] [EOL] @ install_required @ credentials_required def process_mfa ( request ) : [EOL] [docstring] [EOL] code = request . POST . get ( [string] ) [EOL] [EOL] if not request . user . verify_mfa_code ( code ) : [EOL] request . session [ [string] ] = { [string] : [string] } [EOL] [EOL] models . Event . objects . create ( name = [string] , user = request . user , detail = [string] ) [EOL] [EOL] [comment] [EOL] logout ( request ) [EOL] request . session [ [string] ] = [string] [EOL] return redirect ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not request . user . mfa_enabled : [EOL] request . user . mfa_enabled = True [EOL] request . user . save ( ) [EOL] [EOL] models . Event . objects . create ( name = [string] , user = request . user , detail = [string] . format ( get_client_ip ( request ) ) ) [EOL] [EOL] request . session [ [string] ] = True [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def base_context_processor ( request ) : [EOL] [docstring] [EOL] return { [string] : request . session . pop ( [string] , None ) , [string] : request . session . pop ( [string] , { } ) , [string] : config . get ( [string] , None ) , [string] : config . get ( [string] , [string] ) , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def save_form ( request , form ) : [EOL] [docstring] [EOL] request . session [ [string] ] = { [string] : form . data , [string] : form . errors , } [EOL] [EOL] [EOL] def get_client_ip ( request ) : [EOL] [docstring] [EOL] x_forwarded_for = request . META . get ( [string] ) [EOL] if x_forwarded_for : [EOL] return x_forwarded_for . split ( [string] ) [ [number] ] [EOL] [EOL] return request . META . get ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] from mangle . web import views [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , views . show_app ) , path ( [string] , views . show_login ) , path ( [string] , views . process_login ) , path ( [string] , views . show_google_login ) , path ( [string] , views . process_logout ) , path ( [string] , views . show_password_reset ) , path ( [string] , views . process_password_reset ) , path ( [string] , views . process_oauth ) , path ( [string] , views . show_install ) , path ( [string] , views . process_install ) , path ( [string] , views . show_mfa ) , path ( [string] , views . process_mfa ) , path ( [string] , views . show_mfa_setup ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . shortcuts import redirect [EOL] from mangle . common import config [EOL] [EOL] [EOL] def credentials_required ( func ) : [EOL] [docstring] [EOL] def decorator ( request , * args , ** kwargs ) : [EOL] if not request . user . is_authenticated : [EOL] return redirect ( [string] ) [EOL] return func ( request , * args , ** kwargs ) [EOL] return decorator [EOL] [EOL] [EOL] def mfa_required ( func ) : [EOL] [docstring] [EOL] def decorator ( request , * args , ** kwargs ) : [EOL] if request . user . mfa_required : [EOL] if not request . user . mfa_enabled : [EOL] return redirect ( [string] ) [EOL] if not request . session . get ( [string] , False ) : [EOL] return redirect ( [string] ) [EOL] return func ( request , * args , ** kwargs ) [EOL] return decorator [EOL] [EOL] [EOL] def install_required ( func ) : [EOL] [docstring] [EOL] def decorator ( request , * args , ** kwargs ) : [EOL] if not config . get_bool ( [string] , False ) : [EOL] return redirect ( [string] ) [EOL] return func ( request , * args , ** kwargs ) [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import mangle [EOL] from django import forms [EOL] from mangle . common import config , models , validators [EOL] [EOL] [EOL] class InstallForm ( forms . Form ) : [EOL] admin_email = forms . CharField ( required = True ) [EOL] admin_password = forms . CharField ( required = True ) [EOL] admin_password_confirm = forms . CharField ( required = True ) [EOL] app_hostname = forms . CharField ( required = True ) [EOL] app_organization = forms . CharField ( required = True ) [EOL] [EOL] def clean_admin_email ( self ) : [EOL] [docstring] [EOL] if not validators . is_email ( self . data [ [string] ] ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return self . data [ [string] ] [EOL] [EOL] def clean_app_hostname ( self ) : [EOL] [docstring] [EOL] if ( not validators . is_domain ( self . data [ [string] ] ) and not validators . is_ipv4 ( self . data [ [string] ] ) ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return self . data [ [string] ] [EOL] [EOL] def clean_admin_password ( self ) : [EOL] [docstring] [EOL] if not validators . is_valid_password ( self . data [ [string] ] ) : [EOL] raise forms . ValidationError ( [string] [string] ) [EOL] if self . data [ [string] ] != self . data [ [string] ] : [EOL] raise forms . ValidationError ( [string] ) [EOL] return self . data [ [string] ] [EOL] [EOL] def save ( self ) : [EOL] [docstring] [EOL] config . set ( [string] , self . cleaned_data [ [string] ] ) [EOL] config . set ( [string] , self . cleaned_data [ [string] ] ) [EOL] config . set ( [string] , self . cleaned_data [ [string] ] ) [EOL] [EOL] [comment] [EOL] group = models . Group . objects . by_name ( [string] ) [EOL] if not group : [EOL] group = models . Group . objects . create ( name = [string] , description = [string] , ) [EOL] [EOL] [comment] [EOL] user = models . User ( group = group , is_admin = True ) [EOL] user . email = self . cleaned_data [ [string] ] [EOL] user . set_password ( self . cleaned_data [ [string] ] ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] [EOL] class PasswordForm ( forms . Form ) : [EOL] password = forms . CharField ( required = True ) [EOL] password_confirm = forms . CharField ( required = True ) [EOL] [EOL] def clean_password ( self ) : [EOL] [docstring] [EOL] if not validators . is_valid_password ( self . data [ [string] ] ) : [EOL] raise forms . ValidationError ( [string] [string] ) [EOL] if self . data [ [string] ] != self . data [ [string] ] : [EOL] raise forms . ValidationError ( [string] ) [EOL] return self . data [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.InstallForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.InstallForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.InstallForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.InstallForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.InstallForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.PasswordForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.forms.PasswordForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import redirect [EOL] from mangle . common import config [EOL] from mangle . web . authentication import oauth2 [EOL] [EOL] [EOL] def redirect_login ( request ) : [EOL] [docstring] [EOL] backend = config . get ( [string] , [string] ) [EOL] [EOL] if backend == [string] : [EOL] url , state = oauth2 . get_provider ( ) . get_login_url ( ) [EOL] request . session [ [string] ] = state [EOL] return redirect ( url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from mangle . common import config [EOL] from . providers . google import GoogleOAuth2Provider [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_provider ( ) : [EOL] [docstring] [EOL] provider = config . get ( [string] , [string] ) [EOL] [EOL] if provider == [string] : [EOL] return GoogleOAuth2Provider ( ) [EOL] [EOL] raise ValueError ( [string] + provider ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from mangle . common . models import User [EOL] from mangle . web . authentication import oauth2 [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class OAuth2Backend : [EOL] [docstring] [EOL] [EOL] def authenticate ( self , request ) : [EOL] [docstring] [EOL] if [string] not in request . session : [EOL] logger . error ( [string] ) [EOL] return None [EOL] if [string] not in request . GET : [EOL] logger . error ( [string] ) [EOL] return None [EOL] if [string] not in request . GET : [EOL] logger . error ( [string] ) [EOL] return None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if request . session [ [string] ] != request . GET [ [string] ] : [EOL] logger . error ( [string] ) [EOL] return None [EOL] [EOL] [comment] [EOL] [comment] [EOL] email , name = oauth2 . get_provider ( ) . get_profile ( request . GET [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] user = User . objects . by_email ( email ) [EOL] if not user : [EOL] logger . error ( [string] , email ) [EOL] return None [EOL] elif not user . is_active : [EOL] logger . error ( [string] , email ) [EOL] return None [EOL] [EOL] if not user . name : [EOL] user . name = name [EOL] [EOL] [comment] [EOL] [comment] [EOL] user . password_change = False [EOL] [EOL] user . save ( ) [EOL] return user [EOL] [EOL] def get_user ( self , user_id ) : [EOL] [docstring] [EOL] return User . objects . filter ( pk = user_id ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import mangle [EOL] import logging [EOL] import abc [EOL] import logging [EOL] [EOL] from requests_oauthlib import OAuth2Session [EOL] from mangle . common import config [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class OAuth2Provider : [EOL] [docstring] [EOL] authorization_url = None [EOL] token_url = None [EOL] profile_url = None [EOL] scopes = None [EOL] [EOL] def __init__ ( self ) : [EOL] self . logger = logger [EOL] [EOL] @ property def client_id ( self ) : [EOL] [docstring] [EOL] return config . get ( [string] ) [EOL] [EOL] @ property def client_secret ( self ) : [EOL] [docstring] [EOL] return config . get ( [string] ) [EOL] [EOL] @ property def redirect_uri ( self ) : [EOL] [docstring] [EOL] return config . url ( [string] ) [EOL] [EOL] @ abc . abstractmethod def process_response ( self , resp ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def get_login_url ( self ) : [EOL] [docstring] [EOL] return self . get_session ( ) . authorization_url ( self . authorization_url ) [EOL] [EOL] def get_session ( self ) : [EOL] [docstring] [EOL] return OAuth2Session ( client_id = self . client_id , redirect_uri = self . redirect_uri , scope = self . scopes , ) [EOL] [EOL] def get_profile ( self , code ) : [EOL] [docstring] [EOL] session = self . get_session ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] session . fetch_token ( code = code , client_secret = self . client_secret , token_url = self . token_url , ) [EOL] [EOL] [comment] [EOL] resp = session . get ( self . profile_url ) [EOL] [EOL] [comment] [EOL] if resp . status_code != [number] : [EOL] logger . error ( [string] ) [EOL] logger . error ( resp . text ) [EOL] return None [EOL] [EOL] try : [EOL] return self . process_response ( resp . json ( ) ) [EOL] except ValueError : [EOL] logger . error ( [string] ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class UserPermission ( permissions . BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] [docstring] [EOL] return request . user . is_active [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [docstring] [EOL] if hasattr ( obj , [string] ) : [EOL] return obj . user == request . user [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . pagination import PageNumberPagination [EOL] [EOL] [EOL] class ApiPagination ( PageNumberPagination ) : [EOL] page_size_query_param = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] from rest_framework import routers [EOL] from mangle . web . api import views [EOL] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . DeviceViewSet ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , views . ApiInfoView . as_view ( ) ) , path ( [string] , views . ProfileView . as_view ( ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Tuple [EOL] import typing [EOL] import mangle [EOL] from django . http import HttpResponse [EOL] from django . utils import timezone [EOL] from rest_framework import status , views , viewsets [EOL] from rest_framework . response import Response [EOL] from mangle . version import version [EOL] from mangle . common import config , models , openvpn [EOL] from mangle . common . utils import bash [EOL] from mangle . web . api import authentication , permissions , serializers [EOL] [EOL] [EOL] class UserView ( views . APIView ) : [EOL] authentication_classes = ( authentication . ApiSessionAuthentication , ) [EOL] permission_classes = ( permissions . UserPermission , ) [EOL] [EOL] [EOL] class UserViewSet ( viewsets . GenericViewSet , UserView ) : [EOL] pass [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class ApiInfoView ( views . APIView ) : [EOL] def get ( self , request ) : [EOL] [docstring] [EOL] return Response ( { [string] : config . get ( [string] , [string] ) , [string] : version ( ) , [string] : config . get_bool ( [string] , False ) , [string] : self . update_available ( ) , } ) [EOL] [EOL] def update_available ( self ) : [EOL] [docstring] [EOL] _ , out_a , _ = bash . run_output ( [string] ) [EOL] _ , out_b , _ = bash . run_output ( [string] ) [EOL] return out_a . split ( ) [ [number] ] != out_b [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class ProfileView ( UserView ) : [EOL] def get ( self , request ) : [EOL] [docstring] [EOL] serializer = serializers . ProfileSerializer ( request . user ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class DeviceViewSet ( viewsets . mixins . CreateModelMixin , viewsets . mixins . DestroyModelMixin , viewsets . mixins . RetrieveModelMixin , UserViewSet ) : [EOL] queryset = models . Device . objects . all ( ) [EOL] serializer_class = serializers . ProfileDeviceSerializer [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . save ( request . user ) [EOL] return Response ( serializer . data , status . HTTP_201_CREATED ) [EOL] [EOL] def retrieve ( self , request , pk = None , * args , ** kwargs ) : [EOL] [docstring] [EOL] device = self . get_object ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if device . fingerprint or device . serial : [EOL] return Response ( status = status . HTTP_400_BAD_REQUEST ) [EOL] if ( timezone . now ( ) - device . created_at ) . seconds > [number] : [EOL] return Response ( status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [comment] [EOL] keypair = device . create_keypair ( ) [EOL] [EOL] [comment] [EOL] conf = openvpn . client_config ( * keypair . pem ( ) , request . GET [ [string] ] ) [EOL] [EOL] [comment] [EOL] resp = HttpResponse ( conf ) [EOL] resp [ [string] ] = len ( conf ) [EOL] resp [ [string] ] = [string] [EOL] resp [ [string] ] = self . get_disposition ( device ) [EOL] return resp [EOL] [EOL] def get_disposition ( self , device ) : [EOL] [docstring] [EOL] org = config . get ( [string] ) [EOL] return [string] . format ( org , device . name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[mangle.web.api.authentication.ApiSessionAuthentication]]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[mangle.web.api.permissions.UserPermission]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.serializers.ProfileSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.serializers.ProfileSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.views.DeviceViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.serializers.ProfileDeviceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import mangle [EOL] from rest_framework import serializers [EOL] from mangle . common import models [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class ProfileDeviceSerializer ( serializers . ModelSerializer ) : [EOL] os = serializers . CharField ( allow_blank = False , required = True , write_only = True ) [EOL] [EOL] class Meta : [EOL] model = models . Device [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def save ( self , user , ** kwargs ) : [EOL] [docstring] [EOL] self . is_valid ( raise_exception = True ) [EOL] [EOL] [comment] [EOL] if user . devices . count ( ) >= user . group . max_devices : [EOL] raise serializers . ValidationError ( { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] self . instance = models . Device . objects . create ( name = self . validated_data [ [string] ] , user = user , ) [EOL] [EOL] return self . instance [EOL] [EOL] def validate_name ( self , value ) : [EOL] [docstring] [EOL] return value . encode ( [string] , errors = [string] ) . decode ( ) [EOL] [EOL] def validate_os ( self , value ) : [EOL] [docstring] [EOL] if value not in ( [string] , [string] , [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] [EOL] class ProfileGroupSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Group [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ProfileSerializer ( serializers . ModelSerializer ) : [EOL] devices = ProfileDeviceSerializer ( many = True , read_only = True ) [EOL] group = ProfileGroupSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.serializers.ProfileDeviceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.serializers.ProfileDeviceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.serializers.ProfileGroupSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . authentication import exceptions , SessionAuthentication [EOL] [EOL] [EOL] class CredentialAuthentication ( SessionAuthentication ) : [EOL] [docstring] [EOL] def authenticate ( self , request ) : [EOL] user = super ( ) . authenticate ( request ) [EOL] [EOL] if isinstance ( user , tuple ) : [EOL] user = user [ [number] ] [EOL] [EOL] if not user or not user . is_authenticated : [EOL] raise exceptions . AuthenticationFailed ( [string] ) [EOL] [EOL] return user [EOL] [EOL] [EOL] class ApiSessionAuthentication ( CredentialAuthentication ) : [EOL] [docstring] [EOL] def authenticate ( self , request ) : [EOL] user = super ( ) . authenticate ( request ) [EOL] [EOL] if user . mfa_required : [EOL] if not user . mfa_enabled : [EOL] raise exceptions . AuthenticationFailed ( [string] ) [EOL] if not request . session . get ( [string] , False ) : [EOL] raise exceptions . AuthenticationFailed ( [string] ) [EOL] [EOL] return user , None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class AdminPermission ( permissions . BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] [docstring] [EOL] return request . user . is_active and request . user . is_admin [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [docstring] [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict , Type , Tuple [EOL] import typing [EOL] import mangle [EOL] import logging [EOL] import logging [EOL] [EOL] from django . conf import settings [EOL] from rest_framework import serializers [EOL] from mangle . cli . management . commands import install [EOL] from mangle . common import config , models , validators [EOL] from mangle . common . utils import bash , fs , net [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class UserDeviceSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Device [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserGroupSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Group [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] group = UserGroupSerializer ( read_only = True ) [EOL] group_id = serializers . UUIDField ( required = True ) [EOL] [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserInviteSerializer ( serializers . Serializer ) : [EOL] email = serializers . CharField ( allow_blank = False , required = True ) [EOL] group_id = serializers . UUIDField ( required = True ) [EOL] [EOL] def validate_email ( self , value ) : [EOL] [docstring] [EOL] emails = [ ] [EOL] [EOL] for email in value . split ( ) : [EOL] if validators . is_email ( email ) : [EOL] emails . append ( email . lower ( ) ) [EOL] [EOL] return emails [EOL] [EOL] def validate_group_id ( self , value ) : [EOL] [docstring] [EOL] if not models . Group . objects . filter ( pk = value ) . exists ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] self . is_valid ( True ) [EOL] [EOL] users = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] for email in self . validated_data [ [string] ] : [EOL] user = models . User . objects . by_email ( email ) [EOL] [EOL] if not user : [EOL] user = models . User ( email = email ) [EOL] [EOL] [comment] [EOL] password = user . reset_password ( ) [EOL] user . temp_password = password [EOL] users . append ( user ) [EOL] [EOL] user . group_id = self . validated_data [ [string] ] [EOL] user . is_enabled = True [EOL] user . save ( ) [EOL] [EOL] return users [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class GroupUserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class GroupSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Group [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class FirewallRuleSerializer ( serializers . ModelSerializer ) : [EOL] group_id = serializers . UUIDField ( required = True ) [EOL] [EOL] class Meta : [EOL] model = models . FirewallRule [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def validate ( self , attrs ) : [EOL] [docstring] [EOL] [comment] [EOL] if attrs [ [string] ] == [string] and attrs . get ( [string] ) : [EOL] raise serializers . ValidationError ( { [string] : [string] } ) [EOL] [EOL] return attrs [EOL] [EOL] def validate_action ( self , value ) : [EOL] [docstring] [EOL] value = value . upper ( ) [EOL] if value not in ( [string] , [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . upper ( ) [EOL] [EOL] def validate_destination ( self , value ) : [EOL] [docstring] [EOL] if value and not validators . is_ipv4 ( value ) and not validators . is_cidr ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_group_id ( self , value ) : [EOL] [docstring] [EOL] if not models . Group . objects . filter ( pk = value ) . exists ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_port ( self , value ) : [EOL] [docstring] [EOL] try : [EOL] for port in value . split ( [string] ) : [EOL] if [string] in port : [EOL] low , high = map ( lambda x : int ( x ) , port . split ( [string] ) ) [EOL] if low >= high or low < [number] or high > [number] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] elif port and not [number] <= int ( port ) <= [number] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] except ValueError : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] def validate_protocol ( self , value ) : [EOL] [docstring] [EOL] if value not in ( [string] , [string] , [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . lower ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class DeviceUserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class ClientDeviceSerializer ( serializers . ModelSerializer ) : [EOL] user = DeviceUserSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = models . Device [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ClientSerializer ( serializers . ModelSerializer ) : [EOL] device = ClientDeviceSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = models . Client [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class EventUserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class EventSerializer ( serializers . ModelSerializer ) : [EOL] user = EventUserSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = models . Event [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class BaseSettingSerializer ( serializers . Serializer ) : [EOL] @ property def settings ( self ) : [EOL] [docstring] [EOL] settings = { } [EOL] for name in self . fields : [EOL] settings [ name ] = config . get ( name , [string] ) [EOL] [EOL] settings [ [string] ] = { } [EOL] [EOL] for iface in net . interface_names ( [string] , [string] ) : [EOL] settings [ [string] ] [ iface ] = net . interface_ip ( iface ) [EOL] [EOL] return settings [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] self . is_valid ( True ) [EOL] [EOL] for name , value in self . validated_data . items ( ) : [EOL] config . set ( name , value ) [EOL] [EOL] [EOL] class AppSettingSerializer ( BaseSettingSerializer ) : [EOL] app_hostname = serializers . CharField ( required = True ) [EOL] app_http_port = serializers . IntegerField ( required = True ) [EOL] app_https_port = serializers . IntegerField ( required = True ) [EOL] app_organization = serializers . CharField ( required = True ) [EOL] app_ssl_crt = serializers . CharField ( allow_blank = True , required = False ) [EOL] app_ssl_key = serializers . CharField ( allow_blank = True , required = False ) [EOL] [EOL] def validate_app_hostname ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_domain ( value ) and not validators . is_ipv4 ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . lower ( ) [EOL] [EOL] def validate_app_http_port ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_port ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return int ( value ) [EOL] [EOL] def validate_app_https_port ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_port ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return int ( value ) [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] old_http_port = config . get ( [string] ) [EOL] old_https_port = config . get ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ssl_crt = self . initial_data . pop ( [string] , None ) [EOL] ssl_key = self . initial_data . pop ( [string] , None ) [EOL] [EOL] super ( ) . save ( ** kwargs ) [EOL] [EOL] if ssl_crt and ssl_key : [EOL] fs . write_file ( settings . WEB_SSL_CRT_FILE , ssl_crt , [number] ) [EOL] fs . write_file ( settings . WEB_SSL_KEY_FILE , ssl_key , [number] ) [EOL] bash . run ( [string] , [string] , [string] ) [EOL] [EOL] if ( old_http_port != self . validated_data [ [string] ] or old_https_port != self . validated_data [ [string] ] ) : [EOL] [comment] [EOL] http = [string] [EOL] bash . run ( http . format ( old_http_port , self . validated_data [ [string] ] ) ) [EOL] [EOL] https = [string] [EOL] bash . run ( https . format ( old_https_port , self . validated_data [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] bash . run ( [string] . format ( old_https_port , self . validated_data [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] bash . run ( [string] , [string] , [string] ) [EOL] bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class AuthSettingSerializer ( BaseSettingSerializer ) : [EOL] oauth2_provider = serializers . CharField ( allow_blank = True , required = False ) [EOL] oauth2_client_id = serializers . CharField ( allow_blank = True , required = False ) [EOL] oauth2_client_secret = serializers . CharField ( allow_blank = True , required = False ) [EOL] [EOL] def validate_oauth2_client_id ( self , value ) : [EOL] [docstring] [EOL] if self . initial_data [ [string] ] != [string] and not value : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_oauth2_client_secret ( self , value ) : [EOL] [docstring] [EOL] if self . initial_data [ [string] ] != [string] and not value : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate ( self , attrs ) : [EOL] [docstring] [EOL] if attrs [ [string] ] == [string] : [EOL] attrs [ [string] ] = [string] [EOL] attrs [ [string] ] = [string] [EOL] return attrs [EOL] [EOL] [EOL] class MailSettingSerializer ( BaseSettingSerializer ) : [EOL] smtp_host = serializers . CharField ( allow_blank = True , required = False ) [EOL] smtp_port = serializers . IntegerField ( required = False ) [EOL] smtp_username = serializers . CharField ( allow_blank = True , required = False ) [EOL] smtp_password = serializers . CharField ( allow_blank = True , required = False ) [EOL] smtp_reply_address = serializers . CharField ( allow_blank = True , required = False ) [EOL] [EOL] def validate_smtp_host ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_domain ( value ) and not validators . is_ipv4 ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . lower ( ) [EOL] [EOL] def validate_smtp_port ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_port ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return int ( value ) [EOL] [EOL] [EOL] class VpnSettingSerializer ( BaseSettingSerializer ) : [EOL] vpn_domain = serializers . CharField ( allow_blank = True , required = False ) [EOL] vpn_hostname = serializers . CharField ( required = True ) [EOL] vpn_interface = serializers . CharField ( required = True ) [EOL] vpn_nameservers = serializers . CharField ( allow_blank = True , required = False ) [EOL] vpn_nat_interface = serializers . CharField ( required = True ) [EOL] vpn_port = serializers . IntegerField ( required = True ) [EOL] vpn_protocol = serializers . CharField ( required = True ) [EOL] vpn_routes = serializers . CharField ( allow_blank = True , required = False ) [EOL] vpn_redirect_gateway = serializers . BooleanField ( default = False ) [EOL] vpn_subnet = serializers . CharField ( required = True ) [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . save ( ** kwargs ) [EOL] config . set ( [string] , True ) [EOL] [EOL] def validate_vpn_hostname ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_domain ( value ) and not validators . is_ipv4 ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . lower ( ) [EOL] [EOL] def validate_vpn_interface ( self , value ) : [EOL] [docstring] [EOL] if value not in net . interface_names ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_vpn_nameservers ( self , value ) : [EOL] [docstring] [EOL] if not value : [EOL] return [string] [EOL] [EOL] for nameserver in value . split ( [string] ) : [EOL] if not validators . is_ipv4 ( nameserver ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_vpn_nat_interface ( self , value ) : [EOL] [docstring] [EOL] if value not in net . interface_names ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_vpn_port ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_port ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return int ( value ) [EOL] [EOL] def validate_vpn_protocol ( self , value ) : [EOL] [docstring] [EOL] if value not in ( [string] , [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value . lower ( ) [EOL] [EOL] def validate_vpn_routes ( self , value ) : [EOL] [docstring] [EOL] if not value : [EOL] return [string] [EOL] [EOL] for route in value . split ( [string] ) : [EOL] if not validators . is_cidr ( route ) and not validators . is_ipv4 ( route ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_vpn_subnet ( self , value ) : [EOL] [docstring] [EOL] if not validators . is_cidr ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.admin.serializers.UserGroupSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.UserInviteSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.UserInviteSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $mangle.common.models.User$ 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 $typing.Any$ 0 $mangle.common.models.User$ 0 0 0 $mangle.common.models.User$ 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 $mangle.common.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.FirewallRuleSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.admin.serializers.DeviceUserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.admin.serializers.ClientDeviceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.web.api.admin.serializers.EventUserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AppSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AuthSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AuthSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.AuthSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.MailSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.MailSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.MailSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.MailSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.MailSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.web.api.admin.serializers.VpnSettingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] from rest_framework import routers [EOL] from mangle . web . api . admin import views [EOL] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . ClientAdminViewSet ) [EOL] router . register ( [string] , views . DeviceAdminViewSet ) [EOL] router . register ( [string] , views . FirewallAdminViewSet ) [EOL] router . register ( [string] , views . GroupAdminViewSet ) [EOL] router . register ( [string] , views . EventAdminViewSet ) [EOL] router . register ( [string] , views . UserAdminViewSet ) [EOL] router . register ( [string] , views . OpenVPNViewSet , base_name = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , views . AppSettingView . as_view ( ) ) , path ( [string] , views . MailSettingView . as_view ( ) ) , path ( [string] , views . MailSettingTestView . as_view ( ) ) , path ( [string] , views . AuthSettingView . as_view ( ) ) , path ( [string] , views . VPNSettingView . as_view ( ) ) , path ( [string] , views . UpdateAppView . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] import sys [EOL] import textwrap [EOL] [EOL] from colorama import Fore , Style [EOL] from django . core import management [EOL] [EOL] [EOL] class BaseCommand ( management . BaseCommand ) : [EOL] text_width = [number] [EOL] [EOL] def header ( self , title ) : [EOL] [docstring] [EOL] self . newline ( ) [EOL] print ( Fore . CYAN + Style . BRIGHT + title + Style . RESET_ALL ) [EOL] [EOL] def print ( self , message , * args ) : [EOL] [docstring] [EOL] self . _output ( Fore . WHITE , message , * args ) [EOL] [EOL] def bold ( self , message , * args ) : [EOL] [docstring] [EOL] message = Style . BRIGHT + message + Style . RESET_ALL [EOL] self . print ( message , * args ) [EOL] [EOL] def error ( self , message , * args ) : [EOL] [docstring] [EOL] self . _output ( Fore . RED , message , * args ) [EOL] [EOL] def info ( self , message , * args ) : [EOL] [docstring] [EOL] self . _output ( Fore . CYAN , message , * args ) [EOL] [EOL] def ok ( self , message , * args ) : [EOL] [docstring] [EOL] self . _output ( Fore . GREEN , message , * args ) [EOL] [EOL] def warn ( self , message , * args ) : [EOL] [docstring] [EOL] self . _output ( Fore . YELLOW , message , * args ) [EOL] [EOL] def newline ( self , count = [number] ) : [EOL] [docstring] [EOL] [ print ( [string] ) for _ in range ( count ) ] [EOL] [EOL] def title ( self ) : [EOL] [docstring] [EOL] os . system ( [string] ) [EOL] print ( Fore . MAGENTA + title_ascii + Fore . RESET ) [EOL] [EOL] def exit ( self , message = None , * args ) : [EOL] [docstring] [EOL] self . error ( message , * args ) [EOL] self . newline ( ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def _output ( self , color , message , * args ) : [EOL] [docstring] [EOL] for line in textwrap . wrap ( message . format ( * args ) , self . text_width ) : [EOL] print ( color + line + Fore . RESET ) [EOL] [EOL] [EOL] title_ascii = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import os [EOL] import pathlib [EOL] import sys [EOL] [EOL] from django . conf import settings [EOL] from django . template . loader import render_to_string [EOL] from django . utils import timezone [EOL] from mangle . cli . command import BaseCommand [EOL] from mangle . common import config , iptables , models , openvpn [EOL] from mangle . common . utils import net , strings [EOL] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , default = list ( ) , nargs = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] action = options [ [string] ] [EOL] [EOL] if action == [string] : [EOL] vpn_pre_start ( ) [EOL] elif action == [string] : [EOL] vpn_post_start ( ) [EOL] elif action == [string] : [EOL] vpn_post_stop ( ) [EOL] elif action == [string] : [EOL] vpn_client_authenticate ( ) [EOL] elif action == [string] : [EOL] vpn_client_connect ( ) [EOL] elif action == [string] : [EOL] vpn_client_disconnect ( ) [EOL] else : [EOL] self . exit ( [string] , action ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def vpn_pre_start ( ) : [EOL] [docstring] [EOL] with open ( settings . OPENVPN_CONFIG_FILE , [string] ) as f : [EOL] f . write ( openvpn . server_config ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] pathlib . Path ( settings . PKI_CRL_FILE ) . touch ( ) [EOL] [EOL] [EOL] def vpn_post_start ( ) : [EOL] [docstring] [EOL] vpn_post_stop ( ) [EOL] iptables . create_chain ( [string] , [string] ) [EOL] iptables . create_chain ( [string] , [string] ) [EOL] [EOL] rules = render_rules ( ) [EOL] for rule in rules . split ( [string] ) : [EOL] iptables . run ( rule ) [EOL] [EOL] for group in models . Group . objects . filter ( is_enabled = True ) . all ( ) : [EOL] group . create_firewall_chain ( ) [EOL] [EOL] config . set ( [string] , rules ) [EOL] config . set ( [string] , False ) [EOL] [EOL] [EOL] def vpn_post_stop ( ) : [EOL] [docstring] [EOL] rules = config . get ( [string] , [string] ) [EOL] [EOL] for rule in rules . split ( [string] ) : [EOL] iptables . run ( rule . replace ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] iptables . delete_chain ( [string] , [string] ) [EOL] iptables . delete_chain ( [string] , [string] ) [EOL] [EOL] config . delete ( [string] ) [EOL] [EOL] [comment] [EOL] for group in models . Group . objects . filter ( is_enabled = True ) . all ( ) : [EOL] group . delete_firewall_chain ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] models . Client . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] def vpn_client_authenticate ( ) : [EOL] [docstring] [EOL] username = os . environ [ [string] ] [EOL] password = os . environ [ [string] ] [EOL] [EOL] user = models . User . objects . by_email ( username ) [EOL] [EOL] if not user : [EOL] print ( [string] . format ( username ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if not user . is_active : [EOL] models . Event . objects . create ( name = [string] , user = user , detail = [string] , ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if user . mfa_required and not user . verify_mfa_code ( password ) : [EOL] models . Event . objects . create ( name = [string] , user = user , detail = [string] , ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def vpn_client_connect ( ) : [EOL] [docstring] [EOL] common_name = os . environ [ [string] ] [EOL] platform = os . environ [ [string] ] [EOL] fingerprint = os . environ [ [string] ] [EOL] virtual_ip = os . environ [ [string] ] [EOL] remote_ip = os . environ [ [string] ] [EOL] trusted_port = os . environ [ [string] ] [EOL] [EOL] device = models . Device . objects . by_fingerprint ( fingerprint ) [EOL] [EOL] if not device : [EOL] print ( [string] . format ( fingerprint ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] models . Client . objects . create ( common_name = common_name , device = device , platform = platform , remote_ip = remote_ip + [string] + trusted_port , virtual_ip = virtual_ip , ) [EOL] [EOL] [comment] [EOL] models . Event . objects . create ( name = [string] , user = device . user , detail = [string] . format ( device . name , remote_ip ) , ) [EOL] [EOL] device . last_login = timezone . now ( ) [EOL] device . save ( ) [EOL] [EOL] [EOL] def vpn_client_disconnect ( ) : [EOL] [docstring] [EOL] common_name = os . environ [ [string] ] [EOL] remote_ip = os . environ [ [string] ] [EOL] [EOL] client = models . Client . objects . by_common_name ( common_name ) [EOL] if client : [EOL] models . Event . objects . create ( name = [string] , user = client . device . user , detail = [string] . format ( client . device . name , remote_ip , strings . secs_to_hhmmss ( client . duration ) , ) , ) [EOL] [EOL] client . delete ( ) [EOL] [EOL] [EOL] def render_rules ( ) : [EOL] [docstring] [EOL] return render_to_string ( template_name = [string] , context = { [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : net . ip_addresses ( ) , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : config . get_list ( [string] ) , [string] : config . get ( [string] ) , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import multiprocessing [EOL] [EOL] from django . conf import settings [EOL] from django . template . loader import render_to_string [EOL] from mangle . cli . command import BaseCommand [EOL] from mangle . common import config , openvpn , pki , tasks [EOL] from mangle . common . utils import bash , fs , net [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [docstring] [EOL] self . title ( ) [EOL] self . header ( [string] ) [EOL] pki . create_certificate_authority ( ) [EOL] self . ok ( [string] ) [EOL] tasks . create_crl ( ) [EOL] self . ok ( [string] ) [EOL] openvpn . create_server_keys ( ) [EOL] self . ok ( [string] ) [EOL] create_web_keys ( ) [EOL] self . ok ( [string] ) [EOL] create_web_vhost ( ) [EOL] self . ok ( [string] ) [EOL] create_web_unit ( ) [EOL] self . ok ( [string] ) [EOL] create_vpn_unit ( ) [EOL] self . ok ( [string] ) [EOL] create_tasks_unit ( ) [EOL] self . ok ( [string] ) [EOL] bash . run ( [string] , [string] ) [EOL] self . newline ( ) [EOL] self . ok ( [string] ) [EOL] self . print ( [string] [string] , net . ip_addresses ( ) [ [number] ] , ) [EOL] self . newline ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def create_tasks_unit ( ) : [EOL] [docstring] [EOL] _create_unit_from_template ( path = settings . SYSTEMD_TASKS_FILE , template = [string] , data = { [string] : settings . BASE_DIR , } ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def create_vpn_unit ( ) : [EOL] [docstring] [EOL] _create_unit_from_template ( path = settings . SYSTEMD_VPN_FILE , template = [string] , data = { [string] : which ( [string] ) , [string] : settings . OPENVPN_CONFIG_FILE , [string] : settings . BASE_DIR , } ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def create_web_keys ( ) : [EOL] [docstring] [EOL] crt , key = pki . create_keypair ( [string] , [number] , True , True ) . pem ( ) [EOL] fs . write_file ( settings . WEB_SSL_CRT_FILE , crt , [number] ) [EOL] fs . write_file ( settings . WEB_SSL_KEY_FILE , key , [number] ) [EOL] fs . write_file ( settings . WEB_SSL_DH_FILE , pki . create_dh_params ( [number] ) , [number] ) [EOL] [EOL] [EOL] def create_web_unit ( ) : [EOL] [docstring] [EOL] _create_unit_from_template ( path = settings . SYSTEMD_WEB_FILE , template = [string] , data = { [string] : settings . WEB_ACCESS_LOG_FILE , [string] : settings . WEB_ERROR_LOG_FILE , [string] : which ( [string] ) , [string] : settings . BASE_DIR , [string] : settings . WEB_WSGI_SOCKET , [string] : multiprocessing . cpu_count ( ) * [number] , } ) [EOL] [EOL] [EOL] def create_web_vhost ( ) : [EOL] [docstring] [EOL] content = render_to_string ( [string] , { [string] : config . get ( [string] ) , [string] : config . get ( [string] , [number] ) , [string] : config . get ( [string] , [number] ) , [string] : settings . BASE_DIR , [string] : settings . WEB_SSL_CRT_FILE , [string] : settings . WEB_SSL_KEY_FILE , [string] : settings . WEB_SSL_DH_FILE , [string] : settings . WEB_WSGI_SOCKET , } ) [EOL] [EOL] fs . write_file ( settings . WEB_VHOST_FILE , content , [number] ) [EOL] bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _create_unit_from_template ( path , template , data = None ) : [EOL] [docstring] [EOL] fs . write_file ( path , render_to_string ( template , data ) , [number] ) [EOL] bash . run ( [string] , [string] , path ) [EOL] [EOL] [EOL] def which ( name ) : [EOL] [docstring] [EOL] code , out , err = bash . run_output ( [string] , name ) [EOL] return out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . template . loader import render_to_string [EOL] from mangle . cli . command import BaseCommand [EOL] from mangle . common import config , iptables [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] action = options [ [string] ] [EOL] [EOL] if action == [string] : [EOL] web_post_start ( ) [EOL] elif action == [string] : [EOL] web_post_stop ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def web_post_start ( ) : [EOL] [docstring] [EOL] web_post_stop ( ) [EOL] [EOL] rules = _render_rules ( ) [EOL] [EOL] for rule in _render_rules ( ) . split ( [string] ) : [EOL] iptables . run ( rule ) [EOL] [EOL] [comment] [EOL] config . set ( [string] , rules ) [EOL] [EOL] [EOL] def web_post_stop ( ) : [EOL] [docstring] [EOL] rules = config . get ( [string] , [string] ) [EOL] [EOL] for rule in rules . split ( [string] ) : [EOL] iptables . run ( rule . replace ( [string] , [string] ) ) [EOL] [EOL] config . delete ( [string] ) [EOL] [EOL] [EOL] def _render_rules ( ) : [EOL] [docstring] [EOL] return render_to_string ( template_name = [string] , context = { [string] : config . get ( [string] , [number] ) , [string] : config . get ( [string] , [number] ) , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from mangle . cli . command import BaseCommand [EOL] from mangle import version [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . print ( [string] . format ( version . version ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib . auth . models import BaseUserManager [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class BaseManager ( models . Manager ) : [EOL] @ property def qs ( self ) : [EOL] [docstring] [EOL] return self . get_queryset ( ) [EOL] [EOL] def by_pk ( self , pk ) : [EOL] [docstring] [EOL] return self . qs . filter ( pk = pk ) . first ( ) [EOL] [EOL] [EOL] class UserManager ( BaseUserManager , BaseManager ) : [EOL] def by_email ( self , email ) : [EOL] [docstring] [EOL] return self . qs . filter ( email__iexact = email ) . first ( ) [EOL] [EOL] def get_by_natural_key ( self , username ) : [EOL] [docstring] [EOL] return self . get ( email__iexact = username ) [EOL] [EOL] [EOL] class PasswordTokenManager ( BaseManager ) : [EOL] def by_user ( self , user ) : [EOL] [docstring] [EOL] return self . qs . filter ( user = user ) . all ( ) [EOL] [EOL] def by_token ( self , value ) : [EOL] [docstring] [EOL] return self . qs . filter ( value__iexact = value ) . first ( ) [EOL] [EOL] def expired ( self ) : [EOL] [docstring] [EOL] return self . qs . filter ( expires_at__lte = timezone . now ( ) ) . all ( ) [EOL] [EOL] [EOL] class GroupManager ( BaseManager ) : [EOL] def by_name ( self , name ) : [EOL] [docstring] [EOL] return self . qs . filter ( name__iexact = name ) . first ( ) [EOL] [EOL] [EOL] class DeviceManager ( BaseManager ) : [EOL] def by_fingerprint ( self , fingerprint ) : [EOL] [docstring] [EOL] return self . qs . filter ( fingerprint__iexact = fingerprint ) . first ( ) [EOL] [EOL] def by_serial ( self , serial ) : [EOL] [docstring] [EOL] return self . qs . filter ( serial__iexact = serial ) . first ( ) [EOL] [EOL] [EOL] class ClientManager ( BaseManager ) : [EOL] def by_common_name ( self , common_name ) : [EOL] [docstring] [EOL] return self . qs . filter ( common_name__exact = common_name ) . first ( ) [EOL] [EOL] def by_user ( self , user ) : [EOL] [docstring] [EOL] return self . qs . filter ( device__user = user ) [EOL] [EOL] [EOL] class SettingManager ( BaseManager ) : [EOL] def by_name ( self , name ) : [EOL] [docstring] [EOL] return self . qs . filter ( name__iexact = name ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] [EOL] from django . conf import settings [EOL] from mangle . common import models [EOL] [EOL] [EOL] _settings = { } [EOL] [docstring] [EOL] [EOL] [EOL] def all ( ) : [EOL] [docstring] [EOL] return _settings [EOL] [EOL] [EOL] def get ( name , default = None ) : [EOL] [docstring] [EOL] return _settings . get ( name , default ) [EOL] [EOL] [EOL] def get_int ( name , default = [number] ) : [EOL] [docstring] [EOL] return int ( get ( name , default ) ) [EOL] [EOL] [EOL] def get_float ( name , default = [number] ) : [EOL] [docstring] [EOL] return float ( get ( name , default ) ) [EOL] [EOL] [EOL] def get_bool ( name , default = False ) : [EOL] [docstring] [EOL] value = get ( name , default ) [EOL] [EOL] if isinstance ( value , bool ) : [EOL] return value [EOL] if isinstance ( value , str ) : [EOL] return value . lower ( ) in ( [string] , [string] , [string] , [string] ) [EOL] [EOL] return default [EOL] [EOL] [EOL] def get_list ( name , sep = [string] ) : [EOL] [docstring] [EOL] return get ( name , [string] ) . split ( sep ) [EOL] [EOL] [EOL] def has ( name ) : [EOL] [docstring] [EOL] return name in _settings [EOL] [EOL] [EOL] def set ( name , value ) : [EOL] [docstring] [EOL] models . Setting . objects . update_or_create ( { [string] : value } , name = name ) [EOL] _settings [ name ] = value [EOL] [EOL] [EOL] def set_default ( name , value ) : [EOL] [docstring] [EOL] if name not in _settings : [EOL] set ( name , value ) [EOL] [EOL] [EOL] def set_list ( name , value , sep = [string] ) : [EOL] [docstring] [EOL] set ( name , sep . join ( [ str ( v ) for v in value ] ) ) [EOL] [EOL] [EOL] def delete ( name ) : [EOL] [docstring] [EOL] models . Setting . objects . filter ( name__iexact = name ) . delete ( ) [EOL] [EOL] if has ( name ) : [EOL] del _settings [ name ] [EOL] [EOL] [EOL] def reload ( ) : [EOL] [docstring] [EOL] for setting in models . Setting . objects . all ( ) : [EOL] _settings [ setting . name ] = setting . value [EOL] [EOL] [EOL] def url ( * paths , ** params ) : [EOL] [docstring] [EOL] hostname = get ( [string] ) [EOL] port = get ( [string] ) [EOL] [EOL] [comment] [EOL] value = [string] . format ( hostname ) [EOL] [EOL] [comment] [EOL] if port != [string] : [EOL] value += [string] . format ( port ) [EOL] [EOL] [comment] [EOL] value += [string] + [string] . join ( paths ) [EOL] [EOL] [comment] [EOL] for key , val in params . items ( ) : [EOL] value += [string] + [string] . format ( key , val ) [EOL] value = value . rstrip ( [string] ) [EOL] [EOL] return value . lower ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db . models import signals [EOL] from django . dispatch import receiver [EOL] from mangle . common import models , tasks [EOL] [EOL] [EOL] @ receiver ( signals . post_save , sender = models . User ) def user_post_save ( instance , ** kwargs ) : [EOL] [docstring] [EOL] if not instance . is_active : [EOL] models . Client . objects . by_user ( instance ) . delete ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if instance . has_changed ( [string] ) : [EOL] for client in models . Client . objects . by_user ( instance ) . all ( ) : [EOL] client . delete_firewall_rule ( ) [EOL] client . create_firewall_rule ( ) [EOL] [EOL] [EOL] @ receiver ( signals . post_delete , sender = models . Device ) def device_post_delete ( instance , ** kwargs ) : [EOL] [docstring] [EOL] if instance . serial : [EOL] models . RevokedDevice . objects . create ( serial = instance . serial ) [EOL] [EOL] [EOL] @ receiver ( signals . post_save , sender = models . Group ) def group_post_save ( instance , ** kwargs ) : [EOL] [docstring] [EOL] if instance . is_enabled : [EOL] instance . create_firewall_chain ( ) [EOL] else : [EOL] instance . clients . delete ( ) [EOL] instance . delete_firewall_chain ( ) [EOL] [EOL] [EOL] @ receiver ( signals . post_delete , sender = models . Group ) def group_post_delete ( instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . delete_firewall_chain ( ) [EOL] [EOL] [EOL] @ receiver ( signals . post_delete , sender = models . Client ) def client_post_delete ( instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . delete_firewall_rule ( ) [EOL] tasks . disconnect_openvpn_client ( instance . remote_ip ) [EOL] [EOL] [EOL] @ receiver ( signals . post_save , sender = models . Client ) def client_post_save ( instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . create_firewall_rule ( ) [EOL] [EOL] [EOL] @ receiver ( signals . post_save , sender = models . FirewallRule ) def firewall_rule_post_save ( instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . group . create_firewall_chain ( ) [EOL] [EOL] [EOL] @ receiver ( signals . post_delete , sender = models . FirewallRule ) def firewall_rule_post_delete ( instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . delete_firewall_rule ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Tuple , List [EOL] import typing [EOL] import mangle [EOL] import builtins [EOL] import copy [EOL] import uuid [EOL] import pyotp [EOL] [EOL] from django . contrib . auth . models import AbstractBaseUser [EOL] from django . utils . crypto import get_random_string [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] from mangle . common import config , iptables , managers , pki [EOL] [EOL] [EOL] class Model ( models . Model ) : [EOL] [docstring] [EOL] id = models . UUIDField ( default = uuid . uuid4 , editable = False , primary_key = True ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] ordering = ( [string] , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . original = copy . copy ( self ) [EOL] [EOL] @ property def exists ( self ) : [EOL] [docstring] [EOL] return self . id is not None [EOL] [EOL] def has_changed ( self , field ) : [EOL] [docstring] [EOL] return getattr ( self , field ) == getattr ( self . original , field ) [EOL] [EOL] [EOL] class User ( AbstractBaseUser , Model ) : [EOL] email = models . CharField ( db_index = True , max_length = [number] , unique = True ) [EOL] group = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] is_admin = models . BooleanField ( blank = True , default = False ) [EOL] is_enabled = models . BooleanField ( blank = True , default = True ) [EOL] name = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] mfa_enabled = models . BooleanField ( blank = True , default = False ) [EOL] mfa_enforced = models . NullBooleanField ( blank = True , default = None , null = True ) [EOL] mfa_secret = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] password_change = models . BooleanField ( blank = True , default = False ) [EOL] password_expire = models . DateTimeField ( blank = True , default = None , null = True ) [EOL] [EOL] objects = managers . UserManager ( ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] @ property def is_active ( self ) : [EOL] [docstring] [EOL] return self . is_enabled and self . group . is_enabled [EOL] [EOL] @ property def mfa_required ( self ) : [EOL] [docstring] [EOL] return ( self . mfa_enforced is not False and self . group . mfa_enforced is True ) [EOL] [EOL] @ property def mfa_url ( self ) : [EOL] [docstring] [EOL] organization = config . get ( [string] , [string] ) [EOL] [EOL] return pyotp . TOTP ( self . mfa_secret ) . provisioning_uri ( name = self . email , issuer_name = [string] . format ( organization ) , ) [EOL] [EOL] def reset_password ( self ) : [EOL] [docstring] [EOL] password = get_random_string ( [number] ) [EOL] [EOL] self . set_password ( password ) [EOL] self . password_change = True [EOL] self . password_expire = timezone . now ( ) + timezone . timedelta ( days = [number] ) [EOL] [EOL] return password [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] if not self . mfa_secret : [EOL] self . reset_mfa ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def verify_mfa_code ( self , code ) : [EOL] [docstring] [EOL] return pyotp . TOTP ( self . mfa_secret ) . verify ( code ) [EOL] [EOL] def reset_mfa ( self , length = [number] ) : [EOL] [docstring] [EOL] self . mfa_secret = pyotp . random_base32 ( length ) [EOL] self . mfa_enabled = False [EOL] [EOL] [EOL] class Device ( Model ) : [EOL] fingerprint = models . CharField ( blank = True , db_index = True , max_length = [number] ) [EOL] last_login = models . DateTimeField ( blank = True , null = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] serial = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] user = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] [EOL] objects = managers . DeviceManager ( ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] @ property def common_name ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . user . email , self . name ) [EOL] [EOL] def create_keypair ( self ) : [EOL] [docstring] [EOL] keypair = pki . create_client_keypair ( self . common_name , [number] ) [EOL] self . fingerprint = keypair . fingerprint [EOL] self . serial = keypair . crt . serial_number [EOL] self . save ( ) [EOL] return keypair [EOL] [EOL] [EOL] class RevokedDevice ( Model ) : [EOL] serial = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] [EOL] [EOL] class Client ( Model ) : [EOL] common_name = models . CharField ( db_index = True , max_length = [number] , unique = True ) [EOL] device = models . OneToOneField ( [string] , on_delete = models . CASCADE ) [EOL] platform = models . CharField ( default = [string] , max_length = [number] ) [EOL] remote_ip = models . CharField ( max_length = [number] ) [EOL] virtual_ip = models . CharField ( db_index = True , max_length = [number] , unique = True ) [EOL] [EOL] objects = managers . ClientManager ( ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] @ property def duration ( self ) : [EOL] [docstring] [EOL] return ( timezone . now ( ) - self . created_at ) . seconds [EOL] [EOL] @ property def group ( self ) : [EOL] [docstring] [EOL] return self . user . group [EOL] [EOL] @ property def user ( self ) : [EOL] [docstring] [EOL] return self . device . user [EOL] [EOL] def create_firewall_rule ( self ) : [EOL] [docstring] [EOL] iptables . append_unique_rule ( [string] , [string] , [string] , self . virtual_ip , [string] , self . group . chain , ) [EOL] [EOL] def delete_firewall_rule ( self ) : [EOL] [docstring] [EOL] iptables . delete_rule ( [string] , [string] , [string] , self . virtual_ip , [string] , self . group . chain , ) [EOL] [EOL] [EOL] class Group ( Model ) : [EOL] description = models . TextField ( blank = True , default = [string] ) [EOL] is_enabled = models . BooleanField ( blank = True , default = True ) [EOL] max_devices = models . IntegerField ( blank = True , default = [number] ) [EOL] mfa_enforced = models . BooleanField ( blank = True , default = True ) [EOL] name = models . CharField ( db_index = True , max_length = [number] , unique = True ) [EOL] [EOL] objects = managers . GroupManager ( ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] @ property def chain ( self ) : [EOL] [docstring] [EOL] return [string] . format ( str ( self . id ) . replace ( [string] , [string] ) ) [ : [number] ] [EOL] [EOL] @ property def clients ( self ) : [EOL] [docstring] [EOL] return Client . objects . filter ( device__user__group_id = self . id ) . all ( ) [EOL] [EOL] def create_firewall_chain ( self ) : [EOL] [docstring] [EOL] iptables . create_chain ( [string] , self . chain ) [EOL] iptables . flush ( [string] , self . chain ) [EOL] [EOL] [comment] [EOL] for rule in self . firewall_rules . order_by ( [string] ) : [EOL] if rule . is_enabled : [EOL] rule . create_firewall_rule ( ) [EOL] [EOL] [comment] [EOL] iptables . append_unique_rule ( [string] , self . chain , [string] ) [EOL] [EOL] def delete_firewall_chain ( self ) : [EOL] [docstring] [EOL] iptables . delete_chain ( [string] , self . chain ) [EOL] [EOL] [EOL] class FirewallRule ( Model ) : [EOL] action = models . CharField ( max_length = [number] ) [EOL] destination = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] group = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] is_enabled = models . BooleanField ( blank = True , default = True ) [EOL] port = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] protocol = models . CharField ( blank = True , default = [string] , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] @ property def args ( self ) : [EOL] [docstring] [EOL] args = [ ] [EOL] [EOL] if self . destination : [EOL] args . extend ( [ [string] , self . destination , ] ) [EOL] [EOL] if self . protocol : [EOL] args . extend ( [ [string] , self . protocol , ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if self . port : [EOL] if [string] in self . port or [string] in self . port : [EOL] args . extend ( [ [string] , [string] , self . port , ] ) [EOL] else : [EOL] args . extend ( [ [string] , self . port , ] ) [EOL] [EOL] args . extend ( [ [string] , self . action , ] ) [EOL] return args [EOL] [EOL] def create_firewall_rule ( self ) : [EOL] [docstring] [EOL] return iptables . append_unique_rule ( [string] , self . group . chain , * self . args ) [EOL] [EOL] def delete_firewall_rule ( self ) : [EOL] [docstring] [EOL] return iptables . delete_rule ( [string] , self . group . chain , * self . args ) [EOL] [EOL] [EOL] class Event ( Model ) : [EOL] detail = models . TextField ( default = [string] ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] user = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , [string] , ) [EOL] default_related_name = [string] [EOL] [EOL] [EOL] class Setting ( Model ) : [EOL] name = models . CharField ( db_index = True , max_length = [number] , unique = True ) [EOL] value = models . TextField ( ) [EOL] [EOL] objects = managers . SettingManager ( ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] ordering = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Model]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.managers.UserManager$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Device]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.managers.DeviceManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.RevokedDevice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Client]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.managers.ClientManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mangle.common.managers.GroupManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.FirewallRule]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Setting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mangle.common.models.Setting]$ 0 0 0 0 0 0 0 0 $mangle.common.managers.SettingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import cryptography [EOL] from datetime import datetime , timedelta [EOL] [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives import hashes , serialization [EOL] from cryptography . hazmat . primitives . asymmetric import dh , rsa [EOL] from mangle . common import config [EOL] [EOL] [EOL] KEY_SIZE = config . get ( [string] , [number] ) [EOL] [docstring] [EOL] [EOL] [EOL] def certificate_authority ( ) : [EOL] [docstring] [EOL] return load_keypair ( crt = config . get ( [string] ) , key = config . get ( [string] ) , ) [EOL] [EOL] [EOL] def create_certificate_authority ( ) : [EOL] [docstring] [EOL] crt , key = create_keypair ( [string] , [number] , False , True ) . pem ( ) [EOL] config . set ( [string] , crt ) [EOL] config . set ( [string] , key ) [EOL] [EOL] [EOL] def create_client_keypair ( name , days ) : [EOL] [docstring] [EOL] return create_keypair ( name , days , False , False ) [EOL] [EOL] [EOL] def create_server_keypair ( name , days ) : [EOL] [docstring] [EOL] return create_keypair ( name , days , True , False ) [EOL] [EOL] [EOL] def create_keypair ( name , days , is_server , is_ca ) : [EOL] [docstring] [EOL] private_key = rsa . generate_private_key ( [number] , KEY_SIZE , default_backend ( ) ) [EOL] [EOL] builder = x509 . CertificateBuilder ( serial_number = x509 . random_serial_number ( ) , not_valid_before = datetime . now ( ) - timedelta ( days = [number] ) , not_valid_after = datetime . now ( ) + timedelta ( days = days ) , public_key = private_key . public_key ( ) , extensions = _get_certificate_extensions ( is_server , is_ca ) , subject_name = x509 . Name ( [ x509 . NameAttribute ( x509 . NameOID . COMMON_NAME , name ) , ] ) , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if is_ca : [EOL] signer = KeyPair ( builder , private_key ) [EOL] builder = builder . issuer_name ( builder . _subject_name ) [EOL] else : [EOL] signer = certificate_authority ( ) [EOL] builder = builder . issuer_name ( signer . crt . subject ) [EOL] [EOL] [comment] [EOL] certificate = builder . sign ( private_key = signer . key , algorithm = hashes . SHA512 ( ) , backend = default_backend ( ) ) [EOL] return KeyPair ( certificate , private_key ) [EOL] [EOL] [EOL] def create_dh_params ( size = None ) : [EOL] [docstring] [EOL] if not size : [EOL] size = KEY_SIZE [EOL] [EOL] params = dh . generate_parameters ( [number] , size , default_backend ( ) ) [EOL] return encode_dh_params ( params ) [EOL] [EOL] [EOL] def create_crl ( * serials ) : [EOL] [docstring] [EOL] signer = certificate_authority ( ) [EOL] [EOL] builder = x509 . CertificateRevocationListBuilder ( last_update = datetime . now ( ) - timedelta ( days = [number] ) , next_update = datetime . now ( ) + timedelta ( days = [number] ) , issuer_name = signer . crt . subject , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for serial in serials : [EOL] revoked = x509 . RevokedCertificateBuilder ( serial_number = int ( serial ) , revocation_date = datetime . now ( ) - timedelta ( days = [number] ) , ) [EOL] revoked = revoked . build ( default_backend ( ) ) [EOL] builder = builder . add_revoked_certificate ( revoked ) [EOL] [EOL] [comment] [EOL] crl = builder . sign ( private_key = signer . key , algorithm = hashes . SHA512 ( ) , backend = default_backend ( ) , ) [EOL] return encode_certificate ( crl ) [EOL] [EOL] [EOL] def _get_certificate_extensions ( is_server , is_ca ) : [EOL] [docstring] [EOL] extensions = [ ] [EOL] [EOL] [comment] [EOL] path_length = None [EOL] if is_ca : [EOL] path_length = [number] [EOL] [EOL] [comment] [EOL] extensions . append ( x509 . Extension ( oid = x509 . BasicConstraints . oid , critical = True , value = x509 . BasicConstraints ( is_ca , path_length ) ) ) [EOL] [EOL] [comment] [EOL] extensions . append ( x509 . Extension ( oid = x509 . KeyUsage . oid , critical = True , value = x509 . KeyUsage ( digital_signature = True , content_commitment = False , key_encipherment = is_server , data_encipherment = False , key_agreement = True , key_cert_sign = is_ca , crl_sign = is_ca , encipher_only = False , decipher_only = False ) ) ) [EOL] [EOL] [comment] [EOL] if is_server : [EOL] extensions . append ( x509 . Extension ( oid = x509 . ExtendedKeyUsage . oid , critical = True , value = x509 . ExtendedKeyUsage ( [ x509 . ExtendedKeyUsageOID . SERVER_AUTH , ] ) ) ) [EOL] elif not is_ca : [EOL] [comment] [EOL] [comment] [EOL] extensions . append ( x509 . Extension ( oid = x509 . ExtendedKeyUsage . oid , critical = True , value = x509 . ExtendedKeyUsage ( [ x509 . ExtendedKeyUsageOID . CLIENT_AUTH , ] ) ) ) [EOL] return extensions [EOL] [EOL] [EOL] def parse_certificate ( crt ) : [EOL] [docstring] [EOL] return x509 . load_pem_x509_certificate ( data = bytes ( crt , [string] ) , backend = default_backend ( ) ) [EOL] [EOL] [EOL] def parse_private_key ( key , password = None ) : [EOL] [docstring] [EOL] return serialization . load_pem_private_key ( data = bytes ( key , [string] ) , password = password , backend = default_backend ( ) ) [EOL] [EOL] [EOL] def encode_certificate ( certificate ) : [EOL] [docstring] [EOL] data = certificate . public_bytes ( serialization . Encoding . PEM ) [EOL] return str ( data , [string] ) [EOL] [EOL] [EOL] def encode_private_key ( private_key ) : [EOL] [docstring] [EOL] data = private_key . private_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PrivateFormat . TraditionalOpenSSL , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] return str ( data , [string] ) [EOL] [EOL] [EOL] def encode_dh_params ( params ) : [EOL] [docstring] [EOL] data = params . parameter_bytes ( encoding = serialization . Encoding . PEM , format = serialization . ParameterFormat . PKCS3 , ) [EOL] return str ( data , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class KeyPair : [EOL] [docstring] [EOL] def __init__ ( self , crt , key ) : [EOL] self . crt = crt [EOL] self . key = key [EOL] [EOL] @ property def fingerprint ( self ) : [EOL] [docstring] [EOL] value = self . crt . fingerprint ( hashes . SHA1 ( ) ) [EOL] return [string] . join ( [string] . format ( v ) for v in value ) [EOL] [EOL] @ property def certificate_pem ( self ) : [EOL] [docstring] [EOL] return encode_certificate ( self . crt ) [EOL] [EOL] @ property def private_key_pem ( self ) : [EOL] [docstring] [EOL] return encode_private_key ( self . key ) [EOL] [EOL] def pem ( self ) : [EOL] [docstring] [EOL] return self . certificate_pem , self . private_key_pem [EOL] [EOL] [EOL] def load_keypair ( crt , key ) : [EOL] [docstring] [EOL] return KeyPair ( parse_certificate ( crt ) , parse_private_key ( key ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . db . utils import OperationalError [EOL] from django . template import defaultfilters [EOL] from mangle . common . utils import net [EOL] [EOL] [EOL] class CommonConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] from mangle . common import config , signals [EOL] [EOL] [comment] [EOL] try : [EOL] interfaces = net . interface_names ( [string] , [string] ) [EOL] [EOL] config . reload ( ) [EOL] config . set_default ( [string] , False ) [EOL] config . set_default ( [string] , [string] ) [EOL] config . set_default ( [string] , [number] ) [EOL] config . set_default ( [string] , [number] ) [EOL] config . set_default ( [string] , [string] ) [EOL] config . set_default ( [string] , [number] ) [EOL] config . set_default ( [string] , [string] ) [EOL] config . set_default ( [string] , interfaces [ [number] ] ) [EOL] config . set_default ( [string] , interfaces [ [number] ] ) [EOL] config . set_default ( [string] , [number] ) [EOL] config . set_default ( [string] , [string] ) [EOL] config . set_default ( [string] , False ) [EOL] config . set_default ( [string] , [string] ) [EOL] except OperationalError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] defaultfilters . register . filter ( [string] , net . expand_cidr ) [EOL] [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from django . conf import settings [EOL] from django . core . mail import EmailMultiAlternatives [EOL] from huey import crontab [EOL] from huey . contrib . djhuey import db_task , db_periodic_task [EOL] from mangle . common import mail , models , openvpn , pki [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ db_periodic_task ( crontab ( minute = [number] , hour = [string] ) ) def create_crl ( ) : [EOL] [docstring] [EOL] serials = [ ] [EOL] [EOL] [comment] [EOL] for revoked in models . RevokedDevice . objects . all ( ) : [EOL] serials . append ( revoked . serial ) [EOL] [EOL] with open ( settings . PKI_CRL_FILE , [string] ) as f : [EOL] f . write ( pki . create_crl ( * serials ) ) [EOL] [EOL] logger . info ( [string] . format ( len ( serials ) ) ) [EOL] [EOL] [EOL] @ db_task ( ) def send_email ( recipient , subject , body , sender ) : [EOL] [docstring] [EOL] if not mail . init ( ) : [EOL] logger . error ( [string] ) [EOL] [EOL] msg = EmailMultiAlternatives ( subject , body , sender , ( recipient , ) ) [EOL] msg . attach_alternative ( body , [string] ) [EOL] [EOL] if msg . send ( ) == [number] : [EOL] logger . error ( [string] , recipient , subject ) [EOL] else : [EOL] logger . info ( [string] , recipient , subject ) [EOL] [EOL] [EOL] @ db_task ( ) def disconnect_openvpn_client ( client ) : [EOL] [docstring] [EOL] with openvpn . Management ( settings . OPENVPN_MANAGEMENT_SOCKET ) as m : [EOL] m . run ( [string] , client ) [EOL] [EOL] logger . info ( [string] , client ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . template . loader import render_to_string [EOL] from mangle . common import config , tasks [EOL] [EOL] [EOL] def send ( recipient , subject , body ) : [EOL] [docstring] [EOL] sender = config . get ( [string] , config . get ( [string] ) ) [EOL] tasks . send_email ( recipient , subject , body , sender ) [EOL] return True [EOL] [EOL] [EOL] def send_template ( recipient , subject , template , data = None ) : [EOL] [docstring] [EOL] send ( recipient , subject , render_to_string ( template , data ) ) [EOL] [EOL] [EOL] def init ( ) : [EOL] [docstring] [EOL] config . reload ( ) [EOL] [EOL] if not is_configured ( ) : [EOL] return False [EOL] [EOL] settings . EMAIL_BACKEND = [string] [EOL] settings . EMAIL_USE_TLS = config . get ( [string] , True ) [EOL] settings . EMAIL_HOST = config . get ( [string] ) [EOL] settings . EMAIL_PORT = config . get ( [string] ) [EOL] settings . EMAIL_HOST_USER = config . get ( [string] ) [EOL] settings . EMAIL_HOST_PASSWORD = config . get ( [string] ) [EOL] return True [EOL] [EOL] [EOL] def is_configured ( ) : [EOL] [docstring] [EOL] return not ( not config . get ( [string] ) or not config . get ( [string] ) or not config . get ( [string] ) or not config . get ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from . utils import bash [EOL] [EOL] [EOL] def get_chains ( table ) : [EOL] [docstring] [EOL] code , out , err = run_output ( [string] , table , [string] ) [EOL] [EOL] chains = [ ] [EOL] for line in out . split ( [string] ) : [EOL] if line . startswith ( [string] ) : [EOL] chains . append ( line . split ( [string] ) [ [number] ] ) [EOL] [EOL] return chains [EOL] [EOL] [EOL] def get_rules ( table , chain = [string] ) : [EOL] [docstring] [EOL] code , out , err = run_output ( [string] , table , [string] , chain ) [EOL] return parse_rules ( out ) [EOL] [EOL] [EOL] def flush ( table , chain = [string] ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain ) [EOL] [EOL] [EOL] def get_chain_targets ( table , chain ) : [EOL] [docstring] [EOL] code , out , err = run_output ( [string] , table , [string] ) [EOL] [EOL] rules = [ ] [EOL] for line in out . split ( [string] ) : [EOL] if [string] . format ( chain ) in line : [EOL] rules . append ( line ) [EOL] [EOL] return rules [EOL] [EOL] [EOL] def create_chain ( table , chain ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain ) [EOL] [EOL] [EOL] def delete_chain ( table , chain ) : [EOL] [docstring] [EOL] flush ( table , chain ) [EOL] return run ( [string] , table , [string] , chain ) [EOL] [EOL] [EOL] def rename_chain ( table , chain , name ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain , name ) [EOL] [EOL] [EOL] def chain_exists ( table , chain ) : [EOL] [docstring] [EOL] return chain in get_chains ( table ) [EOL] [EOL] [EOL] def append_rule ( table , chain , * rule ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain , * rule ) [EOL] [EOL] [EOL] def append_unique_rule ( table , chain , * rule ) : [EOL] [docstring] [EOL] if not rule_exists ( table , chain , * rule ) : [EOL] return append_rule ( table , chain , * rule ) [EOL] return True [EOL] [EOL] [EOL] def insert_rule ( table , chain , position , * rule ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , position , chain , * rule ) [EOL] [EOL] [EOL] def insert_unique_rule ( table , chain , position , * rule ) : [EOL] [docstring] [EOL] if not rule_exists ( table , chain , * rule ) : [EOL] return insert_rule ( table , chain , position , * rule ) [EOL] return True [EOL] [EOL] [EOL] def delete_rule ( table , chain , * rule ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain , * rule ) [EOL] [EOL] [EOL] def clear_rule ( table , chain , * rule ) : [EOL] [docstring] [EOL] while rule_exists ( table , chain , * rule ) : [EOL] if not delete_rule ( table , chain , rule ) : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def rule_exists ( table , chain , * rule ) : [EOL] [docstring] [EOL] return run ( [string] , table , [string] , chain , * rule ) [EOL] [EOL] [EOL] def parse_rules ( output ) : [EOL] [docstring] [EOL] rules = [ ] [EOL] [EOL] for line in output . split ( [string] ) : [EOL] if line . startswith ( [string] ) : [EOL] rules . append ( line ) [EOL] [EOL] return rules [EOL] [EOL] [EOL] def run ( * args ) : [EOL] [docstring] [EOL] code , out , err = run_output ( * args ) [EOL] return code == [number] [EOL] [EOL] [EOL] def run_output ( * args ) : [EOL] [docstring] [EOL] if len ( args ) > [number] and args [ [number] ] == [string] : [EOL] return [number] , None , None [EOL] [EOL] [comment] [EOL] return bash . run_output ( [string] , [string] , * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import ipaddress [EOL] import re [EOL] [EOL] from django . core import validators [EOL] [EOL] [EOL] def is_cidr ( value ) : [EOL] [docstring] [EOL] try : [EOL] ipaddress . ip_network ( value , strict = False ) [EOL] return True [EOL] except ValueError : [EOL] return False [EOL] [EOL] [EOL] def is_cidr_network ( value ) : [EOL] [docstring] [EOL] try : [EOL] return ipaddress . ip_network ( value , strict = True ) . prefixlen <= [number] [EOL] except ValueError : [EOL] return False [EOL] [EOL] [EOL] def is_ipv4 ( value ) : [EOL] [docstring] [EOL] try : [EOL] ipaddress . ip_address ( value ) [EOL] return True [EOL] except ValueError : [EOL] return False [EOL] [EOL] [EOL] def is_port ( value ) : [EOL] [docstring] [EOL] if isinstance ( value , str ) and not value . isdigit ( ) : [EOL] return False [EOL] [EOL] return [number] < int ( value ) < [number] [EOL] [EOL] [EOL] def is_email ( value ) : [EOL] [docstring] [EOL] try : [EOL] validators . validate_email ( value ) [EOL] return True [EOL] except validators . ValidationError : [EOL] return False [EOL] [EOL] [EOL] def is_domain ( value ) : [EOL] [docstring] [EOL] return re . match ( [string] , value ) [EOL] [EOL] [EOL] def is_valid_password ( value , length = [number] ) : [EOL] [docstring] [EOL] has_lower = has_upper = has_digit = False [EOL] [EOL] for ch in value : [EOL] if ch . islower ( ) : [EOL] has_lower = True [EOL] elif ch . isupper ( ) : [EOL] has_upper = True [EOL] elif ch . isdigit ( ) : [EOL] has_digit = True [EOL] [EOL] return len ( value ) >= length and has_lower and has_upper and has_digit [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import socket [EOL] [EOL] from django . conf import settings [EOL] from django . template . loader import render_to_string [EOL] from mangle . common import config , pki [EOL] from mangle . common . utils import bash , net , strings [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def create_server_keys ( ) : [EOL] [docstring] [EOL] crt , key = pki . create_server_keypair ( [string] , [number] ) . pem ( ) [EOL] config . set ( [string] , crt ) [EOL] config . set ( [string] , key ) [EOL] config . set ( [string] , pki . create_dh_params ( [number] ) ) [EOL] config . set ( [string] , create_tls_auth_key ( ) ) [EOL] [EOL] [EOL] def start ( ) : [EOL] [docstring] [EOL] return bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def stop ( ) : [EOL] [docstring] [EOL] return bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def restart ( ) : [EOL] [docstring] [EOL] return bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def is_running ( ) : [EOL] [docstring] [EOL] return bash . run ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def create_tls_auth_key ( ) : [EOL] [docstring] [EOL] code , out , err = bash . run_output ( [string] ) [EOL] return out [EOL] [EOL] [EOL] def server_config ( ) : [EOL] [docstring] [EOL] conf = render_to_string ( [string] , { [string] : settings . BASE_DIR , [string] : net . interface_ip ( config . get ( [string] ) ) , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : settings . PKI_CRL_FILE , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : settings . OPENVPN_LOG_FILE , [string] : settings . OPENVPN_MANAGEMENT_SOCKET , [string] : config . get_list ( [string] ) , [string] : config . get ( [string] ) , [string] : config . get_bool ( [string] , False ) , [string] : config . get_list ( [string] ) , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : settings . OPENVPN_STATUS_FILE , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , } ) [EOL] return strings . remove_empty_lines ( conf ) [EOL] [EOL] [EOL] def client_config ( crt , key , os = [string] ) : [EOL] [docstring] [EOL] conf = render_to_string ( [string] , { [string] : config . get ( [string] ) , [string] : crt , [string] : key , [string] : config . get ( [string] ) , [string] : os , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , [string] : config . get ( [string] ) , } ) [EOL] return strings . remove_empty_lines ( conf ) [EOL] [EOL] [EOL] def kill_client ( name ) : [EOL] [docstring] [EOL] with management ( ) as m : [EOL] m . run ( [string] , name ) [EOL] [EOL] [EOL] def management ( ) : [EOL] [docstring] [EOL] return Management ( settings . OPENVPN_MANAGEMENT_SOCKET ) [EOL] [EOL] [EOL] class Management : [EOL] [docstring] [EOL] def __init__ ( self , path ) : [EOL] self . path = path [EOL] self . sock = None [EOL] [EOL] def __enter__ ( self ) : [EOL] [docstring] [EOL] self . connect ( ) [EOL] self . _recv ( ) [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_val , exc_tb ) : [EOL] [docstring] [EOL] self . quit ( ) [EOL] [EOL] def run ( self , * args ) : [EOL] [docstring] [EOL] self . _send ( * args ) [EOL] return self . _recv ( ) [EOL] [EOL] def quit ( self ) : [EOL] [docstring] [EOL] self . _send ( [string] ) [EOL] self . sock . close ( ) [EOL] [EOL] def connect ( self ) : [EOL] [docstring] [EOL] sock = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) [EOL] [EOL] try : [EOL] sock . connect ( self . path ) [EOL] sock . settimeout ( [number] ) [EOL] self . sock = sock [EOL] except socket . error as exc : [EOL] logger . error ( [string] ) [EOL] logger . error ( exc ) [EOL] raise ValueError ( [string] ) [EOL] [EOL] def _recv ( self ) : [EOL] [docstring] [EOL] data = [string] [EOL] while True : [EOL] data += self . sock . recv ( [number] ) . decode ( [string] ) [EOL] if data . endswith ( [string] ) : [EOL] break [EOL] return data [EOL] [EOL] def _send ( self , * args ) : [EOL] [docstring] [EOL] self . sock . sendall ( bytes ( [string] . join ( args ) + [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Loggerlogging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import subprocess [EOL] import subprocess [EOL] [EOL] [EOL] def run ( * args , ** kwargs ) : [EOL] [docstring] [EOL] code , out , err = run_output ( * args , ** kwargs ) [EOL] return code == [number] [EOL] [EOL] [EOL] def run_output ( * args , ** kwargs ) : [EOL] [docstring] [EOL] command = [string] . join ( [ str ( arg ) for arg in args ] ) [EOL] [EOL] proc = subprocess . Popen ( command , executable = [string] , shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE , ** kwargs , ) [EOL] [EOL] [comment] [EOL] stdout , stderr = proc . communicate ( ) [EOL] [EOL] return ( proc . returncode , stdout . decode ( [string] ) . strip ( ) , stderr . decode ( [string] ) . strip ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import random [EOL] import math [EOL] import os [EOL] import random [EOL] import string [EOL] [EOL] [EOL] ALPHANUMERIC = string . ascii_letters + string . digits [EOL] [docstring] [EOL] [EOL] rng = random . SystemRandom ( ) [EOL] [docstring] [EOL] [EOL] [EOL] def random_alphanumeric ( length ) : [EOL] [docstring] [EOL] return [string] . join ( [ rng . choice ( ALPHANUMERIC ) for _ in range ( length ) ] ) [EOL] [EOL] [EOL] def remove_empty_lines ( value ) : [EOL] [docstring] [EOL] return os . linesep . join ( [ s for s in value . splitlines ( ) if s ] ) [EOL] [EOL] [EOL] def secs_to_hhmmss ( value ) : [EOL] [docstring] [EOL] value = int ( value ) [EOL] [EOL] if value < [number] : [EOL] return [string] . format ( value ) [EOL] [EOL] hours = math . floor ( value / [number] ) [EOL] mins = math . floor ( ( value - hours * [number] ) / [number] ) [EOL] secs = value % [number] [EOL] [EOL] if secs < [number] : [EOL] secs = [string] . format ( secs ) [EOL] if mins < [number] : [EOL] mins = [string] . format ( mins ) [EOL] [EOL] if hours > [number] : [EOL] return [string] . format ( hours , mins , secs ) [EOL] [EOL] return [string] . format ( mins , secs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $random.SystemRandom$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.SystemRandom$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import logging [EOL] import ipaddress [EOL] import logging [EOL] import os [EOL] import socket [EOL] import netifaces [EOL] [EOL] from mangle . common . utils import bash [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def ip_addresses ( ) : [EOL] [docstring] [EOL] addrs = [ ] [EOL] for iface in interface_names ( [string] ) : [EOL] addrs . append ( interface_ip ( iface ) ) [EOL] return addrs [EOL] [EOL] [EOL] def interface_names ( * ignore ) : [EOL] [docstring] [EOL] ifaces = [ ] [EOL] [EOL] for iface in netifaces . interfaces ( ) : [EOL] if not ignore or not iface . startswith ( tuple ( ignore ) ) : [EOL] if interface_ip ( iface ) : [EOL] ifaces . append ( iface ) [EOL] [EOL] return ifaces [EOL] [EOL] [EOL] def interface_ip ( iface ) : [EOL] [docstring] [EOL] try : [EOL] return netifaces . ifaddresses ( iface ) [ netifaces . AF_INET ] [ [number] ] [ [string] ] [EOL] except ( IndexError , KeyError ) : [EOL] logger . error ( [string] , iface ) [EOL] return [string] [EOL] [EOL] [EOL] def hostname ( ) : [EOL] [docstring] [EOL] return socket . getfqdn ( ) [EOL] [EOL] [EOL] def nameservers ( ) : [EOL] [docstring] [EOL] values = [ ] [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] for line in f . read ( ) . split ( [string] ) : [EOL] if line . startswith ( [string] ) : [EOL] values . append ( line . split ( ) [ [number] ] ) [EOL] [EOL] return values [EOL] [EOL] [EOL] def expand_cidr ( value ) : [EOL] [docstring] [EOL] try : [EOL] ip = ipaddress . ip_network ( value ) [EOL] return ip . network_address . exploded + [string] + ip . netmask . exploded [EOL] except ValueError : [EOL] logger . error ( [string] , value ) [EOL] return [string] [EOL] [EOL] [EOL] def get_interface_stats ( iface ) : [EOL] [docstring] [EOL] base = [string] . format ( iface ) [EOL] [EOL] try : [EOL] with open ( os . path . join ( base , [string] ) , [string] ) as f : [EOL] rx_bytes = f . read ( ) [EOL] with open ( os . path . join ( base , [string] ) , [string] ) as f : [EOL] tx_bytes = f . read ( ) [EOL] [EOL] return { [string] : int ( rx_bytes ) , [string] : int ( tx_bytes ) , } [EOL] except FileNotFoundError : [EOL] logger . error ( [string] , iface ) [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] import os [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def read_file ( path , offset = [number] , size = - [number] ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as f : [EOL] f . seek ( offset ) [EOL] return f . read ( size ) [EOL] [EOL] [EOL] def append_file ( path , content , perms = None ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] if perms and isinstance ( perms , int ) : [EOL] os . chmod ( path , perms ) [EOL] [EOL] [EOL] def write_file ( path , content , perms = None ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] if perms and isinstance ( perms , int ) : [EOL] os . chmod ( path , perms ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] , [string] : ( [string] , ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0