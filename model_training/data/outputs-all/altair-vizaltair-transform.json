from typing import Any , Match , Optional , List [EOL] import typing [EOL] import io [EOL] import os [EOL] import re [EOL] import shutil [EOL] [EOL] try : [EOL] from setuptools import setup [EOL] except ImportError : [EOL] from distutils . core import setup [EOL] [EOL] [EOL] def read ( path , encoding = [string] ) : [EOL] path = os . path . join ( os . path . dirname ( __file__ ) , path ) [EOL] with io . open ( path , encoding = encoding ) as fp : [EOL] return fp . read ( ) [EOL] [EOL] [EOL] def get_install_requirements ( path ) : [EOL] content = read ( path ) [EOL] return [ req for req in content . split ( [string] ) if req != [string] and not req . startswith ( [string] ) ] [EOL] [EOL] [EOL] def version ( path ) : [EOL] [docstring] [EOL] version_file = read ( path ) [EOL] version_match = re . search ( [string] , version_file , re . M ) [EOL] if version_match : [EOL] return version_match . group ( [number] ) [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] [EOL] HERE = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def find_packages ( top = HERE ) : [EOL] [docstring] [EOL] packages = [ ] [EOL] for d , dirs , _ in os . walk ( top , followlinks = True ) : [EOL] if os . path . exists ( os . path . join ( d , [string] ) ) : [EOL] packages . append ( os . path . relpath ( d , top ) . replace ( os . path . sep , [string] ) ) [EOL] elif d != top : [EOL] [comment] [EOL] [comment] [EOL] dirs [ : ] = [ ] [EOL] return packages [EOL] [EOL] [EOL] README_TEST_PATH = [string] [EOL] try : [EOL] shutil . copyfile ( [string] , README_TEST_PATH ) [EOL] setup ( name = [string] , version = version ( [string] ) , description = [string] , long_description = read ( [string] ) , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , download_url = [string] , license = [string] , packages = find_packages ( ) , include_package_data = True , install_requires = get_install_requirements ( [string] ) , python_requires = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL] finally : [EOL] os . remove ( README_TEST_PATH ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0