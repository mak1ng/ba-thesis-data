[comment] [EOL] [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] [EOL] [EOL] def get_logger ( name ) : [EOL] [docstring] [EOL] log_level = os . environ . get ( [string] , [string] ) [EOL] logging . root . setLevel ( logging . getLevelName ( log_level ) ) [comment] [EOL] _logger = logging . getLogger ( name ) [EOL] return _logger [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] import boto3 [EOL] from boto3 . dynamodb . conditions import Key [EOL] from . errors import ApiAuthSvcBaseError [EOL] from . import logging [EOL] [EOL] _logger = logging . get_logger ( __name__ ) [EOL] [EOL] DDB_TABLE_NAME = os . environ . get ( [string] , [string] ) [EOL] DDB_HASH_KEY = os . environ . get ( [string] , [string] ) [EOL] DDB_RANGE_KEY = os . environ . get ( [string] , [string] ) [EOL] [EOL] class DynamoDBTableBaseError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class DynamoDBTableCheckItemError ( DynamoDBTableBaseError ) : [EOL] [docstring] [EOL] msg = [string] [EOL] def __init__ ( self , message = msg ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class DynamoDBTableGetItemError ( DynamoDBTableBaseError ) : [EOL] [docstring] [EOL] msg = [string] [EOL] def __init__ ( self , message = msg ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class DynamoDBTablePutItemError ( DynamoDBTableBaseError ) : [EOL] [docstring] [EOL] msg = [string] [EOL] def __init__ ( self , message = msg ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class DynamoDBTableQueryItemError ( DynamoDBTableBaseError ) : [EOL] [docstring] [EOL] msg = [string] [EOL] def __init__ ( self , message = msg ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class DynamoDBTable : [EOL] [docstring] [EOL] def __init__ ( self , table_name = DDB_TABLE_NAME , hash_key = DDB_HASH_KEY , range_key = DDB_RANGE_KEY ) : [EOL] self . _table_name = table_name [EOL] self . _hash_key = hash_key [EOL] self . _range_key = range_key [EOL] self . _ddb_resoruce = boto3 . resource ( [string] ) [EOL] self . _ddb_table = self . _ddb_resoruce . Table ( self . _table_name ) [EOL] [EOL] @ property def table_name ( self ) : [EOL] [docstring] [EOL] return self . _table_name [EOL] [EOL] @ property def hash_key ( self ) : [EOL] [docstring] [EOL] return self . _hash_key [EOL] [EOL] @ property def range_key ( self ) : [EOL] [docstring] [EOL] return self . _range_key [EOL] [EOL] def check_item_exists ( self , item_id ) : [EOL] [docstring] [EOL] try : [EOL] resp = self . _ddb_table . query ( Select = [string] , KeyConditionExpression = Key ( self . _hash_key ) . eq ( item_id ) ) [EOL] except Exception as e : [EOL] _logger . exception ( e ) [EOL] raise DynamoDBTableCheckItemError [EOL] [EOL] return resp . get ( [string] ) > [number] [EOL] [EOL] def get_item ( self , item_id , range_value , consistent_read = False ) : [EOL] [docstring] [EOL] _logger . info ( item_id ) [EOL] try : [EOL] items = self . _ddb_table . get_item ( Key = { self . _hash_key : item_id , self . _range_key : range_value } , ConsistentRead = consistent_read ) [EOL] except Exception as e : [EOL] _logger . exception ( e ) [EOL] raise DynamoDBTableGetItemError [EOL] return items . get ( [string] ) [EOL] [EOL] [EOL] def put_item ( self , item ) : [EOL] [docstring] [EOL] try : [EOL] self . _ddb_table . put_item ( Item = item ) [EOL] except Exception as e : [EOL] _logger . exception ( e ) [EOL] raise DynamoDBTablePutItemError [EOL] [EOL] def query_by_item_id ( self , item_id , start_key = { } ) : [EOL] [docstring] [EOL] item_list = [ ] [EOL] [EOL] query_kwargs = { [string] : Key ( self . _hash_key ) . eq ( item_id ) } [EOL] [EOL] if bool ( start_key ) : [EOL] query_kwargs [ [string] ] = start_key [EOL] [EOL] try : [EOL] resp = self . _ddb_table . query ( ** query_kwargs ) [EOL] except Exception as e : [EOL] _logger . exception ( e ) [EOL] raise DynamoDBTableQueryItemError [EOL] [EOL] item_list += resp . get ( [string] ) [EOL] [EOL] if bool ( resp . get ( [string] ) ) : [EOL] item_list += self . query_by_item_id ( item_id , resp . get ( [string] ) ) [EOL] [EOL] return item_list [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [EOL] from typing import Any , Union , Dict [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] from src import logging [EOL] _logger = logging . get_logger ( __name__ ) [EOL] [EOL] [EOL] def apig_responder ( e ) : [EOL] [docstring] [EOL] _logger . exception ( e ) [EOL] if hasattr ( e , [string] ) : [EOL] return e . get_apig_response ( ) [EOL] return ApiAuthSvcRequestError ( [string] , None ) . get_apig_response ( ) [EOL] [EOL] [EOL] class ApiAuthSvcBaseError ( Exception ) : [EOL] [docstring] [EOL] def __init__ ( self , message ) : [EOL] super ( ) . __init__ ( message ) [EOL] self . message = message [EOL] [EOL] def get_dict ( self ) : [EOL] [docstring] [EOL] d = { [string] : self . __class__ . __name__ , [string] : self . message , } [EOL] return d [EOL] [EOL] def get_json ( self ) : [EOL] [docstring] [EOL] d = self . get_dict ( ) [EOL] return json . dumps ( d ) [EOL] [EOL] [EOL] class ApiAuthSvcRequestError ( ApiAuthSvcBaseError ) : [EOL] [docstring] [EOL] def __init__ ( self , message , identity ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] self . identity = identity [EOL] self . error_code = [number] [EOL] [EOL] def get_dict ( self ) : [EOL] [docstring] [EOL] d = super ( ) . get_dict ( ) [EOL] d [ [string] ] = self . identity [EOL] return d [EOL] [EOL] def get_apig_response ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] resp = { [string] : self . error_code , [string] : self . get_dict ( ) } [EOL] return resp [EOL] [EOL] [EOL] class ApiAuthSvcInvalidRequestData ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , None ) [EOL] [EOL] [EOL] class ApiAuthSvcDuplicateApiKeyError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL] class ApiAuthSvcApiKeyDoesNotExistError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL] class ApiAuthSvcCreateApiKeyFailedError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL] class ApiAuthSvcGetApiKeyFailedError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL] class ApiAuthSvcUpdateApiKeyFailedError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL] class ApiAuthSvcDeleteApiKeyFailedError ( ApiAuthSvcRequestError ) : [EOL] [docstring] [EOL] def __init__ ( self , identity = None ) : [EOL] message = [string] [EOL] super ( ) . __init__ ( message , identity ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
from typing import Any , Union , Dict [EOL] import src [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] [EOL] from lambda_decorators import dump_json_body , load_json_body , on_exception [EOL] from src import api_key , ddb , logging [EOL] from src . errors import apig_responder , ApiAuthSvcDeleteApiKeyFailedError [EOL] [EOL] _logger = logging . get_logger ( __name__ ) [EOL] DDT = ddb . DynamoDBTable ( ) [EOL] [EOL] [EOL] def _delete_api_key ( apik_id ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _delete_api_key_by_timestamp ( apik_id , timestamp ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] @ load_json_body @ dump_json_body @ on_exception ( lambda e : apig_responder ( e ) ) def handler ( event , context ) : [EOL] [docstring] [EOL] _logger . info ( [string] . format ( json . dumps ( event ) ) ) [EOL] [EOL] resp = { [string] : [number] , [string] : { [string] : [string] } } [EOL] [EOL] [comment] [EOL] _logger . info ( [string] . format ( json . dumps ( resp ) ) ) [EOL] return resp [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $src.ddb.DynamoDBTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , Dict [EOL] import builtins [EOL] import src [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] [EOL] from lambda_decorators import dump_json_body , load_json_body , on_exception [EOL] from src import api_key , ddb , logging [EOL] from src . errors import apig_responder , ApiAuthSvcUpdateApiKeyFailedError [EOL] [EOL] _logger = logging . get_logger ( __name__ ) [EOL] DDT = ddb . DynamoDBTable ( ) [EOL] [EOL] [EOL] def _get_id_from_event ( event ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _get_timestamp_from_event ( event ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _get_attribute_from_event ( event ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _update_key_ttl ( keyid , ttl ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _update_key_active ( keyid ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def _update_key_inactive ( keyid ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] @ load_json_body @ dump_json_body @ on_exception ( lambda e : apig_responder ( e ) ) def handler ( event , context ) : [EOL] [docstring] [EOL] _logger . info ( [string] . format ( json . dumps ( event ) ) ) [EOL] [EOL] resp = { [string] : [number] , [string] : { [string] : [string] } } [EOL] [EOL] [comment] [EOL] _logger . info ( [string] . format ( json . dumps ( resp ) ) ) [EOL] return resp [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $src.ddb.DynamoDBTable$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0