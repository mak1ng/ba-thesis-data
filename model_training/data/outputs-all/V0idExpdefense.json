	0
from typing import List , Optional , Tuple , Set , Any , Dict [EOL] import typing [EOL] import beer [EOL] import builtins [EOL] import game [EOL] [docstring] [EOL] [EOL] from typing import Dict , Set , Tuple , List , Any , Optional [EOL] import math [EOL] import os [EOL] import pytmx [EOL] import yaml [EOL] from beer . event import KeyCode , get_key_state [EOL] from beer . sprite import Sheet , Sprite [EOL] from beer . texture import Texture [EOL] [EOL] SPRITES = [ ] [EOL] [EOL] KEYS = set ( ) [EOL] [EOL] MAP = None [EOL] [EOL] [EOL] class Mob : [EOL] [EOL] speed = ... [EOL] [EOL] def __init__ ( self , sprite , speed ) : [EOL] self . __sprite = sprite [EOL] self . __dst_x = sprite . x [EOL] self . __dst_y = sprite . y [EOL] self . __time_acc = [number] [EOL] self . speed = speed [EOL] [EOL] @ property def destination ( self ) : [EOL] return ( self . __dst_x , self . __dst_y ) [EOL] [EOL] @ destination . setter def destination ( self , dst ) : [EOL] self . __dst_x , self . __dst_y = dst [EOL] [EOL] @ property def is_moving ( self ) : [EOL] return self . __sprite . x != self . __dst_x or self . __sprite . y != self . __dst_y [EOL] [EOL] def update ( self , dt ) : [EOL] if not self . is_moving : [EOL] self . __time_acc = [number] [EOL] return [EOL] [EOL] self . __time_acc += dt [EOL] t = [number] / self . speed [EOL] [EOL] while self . __time_acc >= t : [EOL] dx = self . __dst_x - self . __sprite . x [EOL] if math . fabs ( dx ) > [number] : [EOL] dx = math . copysign ( [number] , dx ) [EOL] [EOL] dy = self . __dst_y - self . __sprite . y [EOL] if math . fabs ( dy ) > [number] : [EOL] dy = math . copysign ( [number] , dy ) [EOL] [EOL] self . __sprite . x += dx [EOL] self . __sprite . y += dy [EOL] self . __time_acc -= dt [EOL] [EOL] [EOL] CHARACTER = None [EOL] [EOL] [EOL] def load_map ( tiled_map_filename ) : [EOL] global MAP [comment] [EOL] [EOL] tiled_map = pytmx . TiledMap ( tiled_map_filename ) [EOL] [EOL] sheet_tiles = { } [EOL] [EOL] for filename , rect , _ in ( spec for spec in tiled_map . images if spec is not None ) : [EOL] sheet_tiles . setdefault ( filename , [ ] ) . append ( rect ) [EOL] [EOL] sheet_textures = { filename : Texture ( filename ) for filename in sheet_tiles } [EOL] [EOL] sheets = { filename : Sheet ( sheet_textures [ filename ] , sheet_tiles [ filename ] ) for filename in sheet_tiles } [EOL] [EOL] for layer in tiled_map . layers : [EOL] for x , y , ( filename , rect , _ ) in layer . tiles ( ) : [EOL] sprite = Sprite ( sheets [ filename ] ) [EOL] sprite . frame = sheet_tiles [ filename ] . index ( rect ) [EOL] sprite . x = x * tiled_map . tilewidth [EOL] sprite . y = y * tiled_map . tileheight [EOL] sprite . visible = True [EOL] SPRITES . append ( sprite ) [EOL] [EOL] MAP = tiled_map [EOL] [EOL] print ( f' [string] { tiled_map_filename } [string] ' ) [EOL] [EOL] [EOL] def load_character ( character_filename ) : [EOL] global CHARACTER [comment] [EOL] [EOL] with open ( character_filename , [string] ) as file_handle : [EOL] data = yaml . load ( file_handle ) [EOL] spr_info = data [ [string] ] [EOL] texture_filename = os . path . join ( os . path . dirname ( character_filename ) , spr_info [ [string] ] ) [EOL] texture = Texture ( texture_filename ) [EOL] rect = spr_info [ [string] ] , spr_info [ [string] ] , spr_info [ [string] ] , spr_info [ [string] ] [EOL] sheet = Sheet ( texture , [ rect ] ) [EOL] sprite = Sprite ( sheet ) [EOL] sprite . visible = True [EOL] SPRITES . append ( sprite ) [EOL] [EOL] [comment] [EOL] spawn_x , spawn_y = [ int ( coord ) for coord in MAP . properties . get ( [string] , [string] ) . split ( [string] ) ] [EOL] sprite . x = MAP . tilewidth * spawn_x [EOL] sprite . y = MAP . tileheight * spawn_y [EOL] [EOL] CHARACTER = Mob ( sprite , [number] ) [EOL] [EOL] [EOL] def init ( ) : [EOL] load_map ( [string] ) [EOL] load_character ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] def update ( delta_time ) : [EOL] global KEYS , MAP , CHARACTER [comment] [EOL] current_keys = { code for code in KeyCode if get_key_state ( code ) . pressed } [EOL] for pressed in current_keys - KEYS : [EOL] print ( f'{ pressed . name } [string] ' ) [EOL] for released in KEYS - current_keys : [EOL] print ( f'{ released . name } [string] ' ) [EOL] KEYS = current_keys [EOL] [EOL] if CHARACTER : [EOL] if not CHARACTER . is_moving : [EOL] tw = MAP . tilewidth [EOL] th = MAP . tileheight [EOL] dst_x , dst_y = CHARACTER . destination [EOL] [EOL] if KeyCode . W in KEYS : [EOL] dst_y -= th [EOL] elif KeyCode . S in KEYS : [EOL] dst_y += th [EOL] elif KeyCode . A in KEYS : [EOL] dst_x -= tw [EOL] elif KeyCode . D in KEYS : [EOL] dst_x += tw [EOL] [EOL] dst = ( dst_x , dst_y ) [EOL] if CHARACTER . destination != dst : [EOL] CHARACTER . destination = dst [EOL] [EOL] CHARACTER . update ( delta_time ) [EOL] [EOL] def fini ( ) : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $beer.sprite.Sprite$ 0 $builtins.float$ 0 0 0 0 0 0 0 $beer.sprite.Sprite$ 0 0 0 0 0 $beer.sprite.Sprite$ 0 0 0 0 0 0 0 $beer.sprite.Sprite$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 $typing.Any$ 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[beer.event.KeyCode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 $typing.Optional[Mob]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = [string] , license = [string] , keywords = [string] , packages = [ [string] ] , setup_requires = [ [string] ] , install_requires = [ [string] ] , package_data = { [string] : [ [string] ] , } , include_package_data = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from cffi import FFI [EOL] [EOL] [EOL] ffibuilder = FFI ( ) [EOL] [EOL] [EOL] ffibuilder . set_source ( [string] , [string] ) [EOL] [EOL] [EOL] ffibuilder . cdef ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] ffibuilder . emit_c_code ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Sequence , Tuple , Any [EOL] import typing [EOL] import beer [EOL] import builtins [EOL] [docstring] [EOL] from typing import Sequence , Tuple , Any , cast , Optional [EOL] from _beer import lib , ffi [EOL] from beer . texture import Texture [EOL] [EOL] [EOL] class Sheet : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , texture , frames ) : [EOL] self . __frames = ffi . new ( [string] . format ( len ( frames ) ) ) [EOL] for i , frame in enumerate ( frames ) : [EOL] rect = self . __frames [ i ] [EOL] rect . x , rect . y , rect . width , rect . height = frame [EOL] [EOL] self . __ptr = ffi . new ( [string] ) [EOL] self . __ptr . texture = texture . pointer [EOL] self . __ptr . frames = self . __frames [EOL] self . __ptr . frames_len = len ( frames ) [EOL] self . __texture = texture [comment] [EOL] [EOL] @ property def pointer ( self ) : [EOL] return self . __ptr [EOL] [EOL] [EOL] class Sprite : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , sheet ) : [EOL] self . __ptr = ffi . new ( [string] ) [EOL] self . __ptr . x = [number] [EOL] self . __ptr . y = [number] [EOL] self . __ptr . frame = [number] [EOL] self . __ptr . sheet = sheet . pointer [EOL] self . __node = None [EOL] self . __sheet = cast ( Optional [ Sheet ] , sheet ) [EOL] [EOL] def __del__ ( self ) : [EOL] self . visible = False [EOL] self . __ptr . sheet = ffi . NULL [EOL] self . __sheet = None [EOL] [EOL] @ property def x ( self ) : [EOL] return cast ( float , self . __ptr . x ) [EOL] [EOL] @ x . setter def x ( self , value ) : [EOL] self . __ptr . x = value [EOL] [EOL] @ property def y ( self ) : [EOL] return cast ( float , self . __ptr . y ) [EOL] [EOL] @ y . setter def y ( self , value ) : [EOL] self . __ptr . y = value [EOL] [EOL] @ property def frame ( self ) : [EOL] return cast ( int , self . __ptr . frame ) [EOL] [EOL] @ frame . setter def frame ( self , index ) : [EOL] self . __ptr . frame = index [EOL] [EOL] @ property def visible ( self ) : [EOL] return self . __node is not None [EOL] [EOL] @ visible . setter def visible ( self , flag ) : [EOL] if flag and self . __node is None : [EOL] node = ffi . new ( [string] , ffi . NULL ) [EOL] if lib . beer_renderer_add_sprite_node ( self . __ptr , node ) != [number] : [EOL] raise RuntimeError ( [string] ) [EOL] self . __node = node [EOL] elif not flag and self . __node is not None : [EOL] if lib . beer_renderer_remove_node ( self . __node [ [number] ] ) != [number] : [EOL] raise RuntimeError ( [string] ) [EOL] self . __node = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $beer.texture.Texture$ 0 $typing.Sequence[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $beer.texture.Texture$ 0 $beer.texture.Texture$ 0 0 0 0 0 0 0 $typing.Sequence[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 $beer.texture.Texture$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Sheet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Sheet$ 0 $Sheet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Sheet$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from typing import Any , cast [EOL] from enum import IntEnum , unique [EOL] from PIL import Image [EOL] from _beer import ffi , lib [EOL] [EOL] [EOL] @ unique class PixelFormat ( IntEnum ) : [EOL] [EOL] RGBA8888 = lib . BEER_PIXEL_FORMAT_RGBA8888 [EOL] [EOL] [EOL] class Texture : [EOL] [EOL] def __init__ ( self , filename ) : [EOL] self . __tex = ffi . new ( [string] , ffi . NULL ) [EOL] [EOL] img = Image . open ( filename ) . convert ( [string] ) [EOL] [EOL] err = lib . beer_texture_from_buffer ( PixelFormat . RGBA8888 , img . width , img . height , ffi . from_buffer ( img . tobytes ( ) ) , self . __tex ) [EOL] if err : [EOL] raise RuntimeError ( [string] . format ( filename ) ) [EOL] [EOL] def __del__ ( self ) : [EOL] lib . beer_texture_free ( self . pointer ) [EOL] [EOL] @ property def width ( self ) : [EOL] return cast ( int , self . pointer . width ) [EOL] [EOL] @ property def height ( self ) : [EOL] return cast ( int , self . pointer . height ) [EOL] [EOL] @ property def format ( self ) : [EOL] return { item . value : item . name for item in PixelFormat } [ self . pointer . format ] [EOL] [EOL] @ property def pointer ( self ) : [EOL] return self . __tex [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] from enum import IntEnum , unique [EOL] from _beer import ffi , lib [EOL] [EOL] [EOL] @ unique class KeyCode ( IntEnum ) : [EOL] [docstring] [EOL] [EOL] W = lib . BEER_KEY_W [EOL] A = lib . BEER_KEY_A [EOL] S = lib . BEER_KEY_S [EOL] D = lib . BEER_KEY_D [EOL] ESC = lib . BEER_KEY_ESC [EOL] SPACE = lib . BEER_KEY_SPACE [EOL] [EOL] [EOL] class KeyState : [EOL] [docstring] [EOL] [EOL] pressed = ... [EOL] [EOL] def __init__ ( self , pressed ) : [EOL] self . pressed = pressed [EOL] [EOL] [EOL] def get_key_state ( code ) : [EOL] [docstring] [EOL] state = ffi . new ( [string] ) [EOL] if lib . beer_key_get_state ( code , state ) != lib . BEER_OK : [EOL] raise RuntimeError ( f' [string] { code }' ) [EOL] return KeyState ( state . pressed ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $KeyState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0