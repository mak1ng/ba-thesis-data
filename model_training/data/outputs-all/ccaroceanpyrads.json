from typing import List [EOL] import pathlib [EOL] import typing [EOL] import os [EOL] import re [EOL] from pathlib import Path [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] _SETUP = Path ( __file__ ) [EOL] _PROJECT = _SETUP . parent [EOL] [EOL] [EOL] def read_version ( filename ) : [EOL] return re . search ( [string] , read ( filename ) , re . MULTILINE ) . group ( [number] ) [EOL] [EOL] [EOL] def read ( filename ) : [EOL] with open ( _PROJECT / filename ) as infile : [EOL] text = infile . read ( ) [EOL] return text [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] docs_require = [ [string] , [string] , [string] ] [EOL] checks_require = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] tests_require = [ [string] , [string] , [string] ] [EOL] dev_requires = [ [string] , [string] , [string] ] [EOL] [EOL] if os . environ . get ( [string] ) == [string] : [EOL] install_requires = [ [string] , [string] ] [EOL] else : [EOL] install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] setup ( name = [string] , version = read_version ( [string] ) , author = [string] , author_email = [string] , description = [string] , long_description = read ( [string] ) , long_description_content_type = [string] , license = [string] , url = [string] , packages = find_packages ( ) , package_data = { [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } , python_requires = [string] , setup_requires = [ [string] ] , install_requires = install_requires , extras_require = { [string] : [ [string] ] , [string] : checks_require , [string] : tests_require , [string] : docs_require , [string] : dev_requires + checks_require + tests_require + docs_require , } , tests_require = tests_require , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , zip_safe = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import datetime [EOL] import io [EOL] import typing [EOL] import io [EOL] from datetime import datetime [EOL] [EOL] import pytest [comment] [EOL] [EOL] from rads . constants import EPOCH [EOL] from rads . utility import ( contains_sublist , datetime_to_timestamp , delete_sublist , ensure_open , fortran_float , isio , merge_sublist , timestamp_to_datetime , xor , ) [EOL] [EOL] [EOL] def test_ensure_open_closeio_default ( ) : [EOL] file = io . StringIO ( [string] ) [EOL] with ensure_open ( file ) as f : [EOL] assert not f . closed [EOL] assert not f . closed [EOL] [EOL] [EOL] def test_ensure_open_closeio_true ( ) : [EOL] file = io . StringIO ( [string] ) [EOL] with ensure_open ( file , closeio = True ) as f : [EOL] assert not f . closed [EOL] assert f . closed [EOL] [EOL] [EOL] def test_ensure_open_closeio_false ( ) : [EOL] file = io . StringIO ( [string] ) [EOL] with ensure_open ( file , closeio = False ) as f : [EOL] assert not f . closed [EOL] assert not f . closed [EOL] [EOL] [EOL] def test_isio ( mocker ) : [EOL] assert isio ( io . StringIO ( [string] ) ) [EOL] assert not isio ( [string] ) [EOL] m = mocker . Mock ( ) [EOL] m . read . return_value = [string] [EOL] assert not isio ( m ) [EOL] [EOL] [EOL] def test_isio_read ( mocker ) : [EOL] assert isio ( io . StringIO ( [string] ) , read = True ) [EOL] assert not isio ( [string] , read = True ) [EOL] m = mocker . Mock ( spec = [ [string] ] ) [EOL] m . read . return_value = [string] [EOL] assert isio ( m , read = True ) [EOL] m = mocker . Mock ( spec = [ [string] ] ) [EOL] m . write . return_value = [string] [EOL] assert not isio ( m , read = True ) [EOL] [EOL] [EOL] def test_isio_write ( mocker ) : [EOL] assert isio ( io . StringIO ( [string] ) , write = True ) [EOL] assert not isio ( [string] , write = True ) [EOL] m = mocker . Mock ( spec = [ [string] ] ) [EOL] m . read . return_value = [string] [EOL] assert not isio ( m , write = True ) [EOL] m = mocker . Mock ( spec = [ [string] ] ) [EOL] m . write . return_value = [string] [EOL] assert isio ( m , write = True ) [EOL] [EOL] [EOL] def test_xor ( ) : [EOL] assert not xor ( True , True ) [EOL] assert xor ( True , False ) [EOL] assert xor ( False , True ) [EOL] assert not xor ( False , False ) [EOL] [EOL] [EOL] def test_contains_sublist ( ) : [EOL] assert contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ) [EOL] assert not contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert not contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert not contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] [comment] [EOL] assert not contains_sublist ( [ [number] , [number] , [number] , [number] ] , [ ] ) [EOL] [EOL] [EOL] def test_merge_sublist ( ) : [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] assert merge_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_delete_sublist ( ) : [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] assert delete_sublist ( [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) == [ [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_fortran_float ( ) : [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] assert fortran_float ( [string] ) == pytest . approx ( [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] fortran_float ( [string] ) [EOL] [EOL] [EOL] def test_datetime_to_epoch ( ) : [EOL] epoch = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = epoch ) == [number] [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = epoch ) == [number] [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = epoch ) == [number] [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = epoch ) == [number] [EOL] [EOL] [EOL] def test_datetime_to_epoch_with_default_epoch ( ) : [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) == datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = EPOCH ) [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) == datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = EPOCH ) [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) == datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = EPOCH ) [EOL] assert datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) == datetime_to_timestamp ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , epoch = EPOCH ) [EOL] [EOL] [EOL] def test_epoch_to_datetime ( ) : [EOL] epoch = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert timestamp_to_datetime ( [number] , epoch = epoch ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert timestamp_to_datetime ( [number] , epoch = epoch ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert timestamp_to_datetime ( [number] , epoch = epoch ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert timestamp_to_datetime ( [number] , epoch = epoch ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_epoch_to_datetime_with_default_epoch ( ) : [EOL] assert timestamp_to_datetime ( [number] ) == timestamp_to_datetime ( [number] , epoch = EPOCH ) [EOL] assert timestamp_to_datetime ( [number] ) == timestamp_to_datetime ( [number] , epoch = EPOCH ) [EOL] assert timestamp_to_datetime ( [number] ) == timestamp_to_datetime ( [number] , epoch = EPOCH ) [EOL] assert timestamp_to_datetime ( [number] ) == timestamp_to_datetime ( [number] , epoch = EPOCH ) [EOL]	
from typing import Any [EOL] import typing [EOL] from rads . logging import CRITICAL , DEBUG , ERROR , INFO , WARNING , configure_logging , log [EOL] [EOL] [EOL] def log_and_read ( level , tmp_path ) : [EOL] logfile = tmp_path / [string] [EOL] configure_logging ( level , logfile ) [EOL] log . debug ( [string] ) [EOL] log . info ( [string] ) [EOL] log . warning ( [string] ) [EOL] log . error ( [string] ) [EOL] log . critical ( [string] ) [EOL] return [ line [ [number] : ] for line in logfile . read_text ( ) . splitlines ( ) ] [EOL] [EOL] [EOL] def test_logging_to_file_at_level_debug ( tmp_path ) : [EOL] assert log_and_read ( DEBUG , tmp_path ) == [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_logging_to_file_at_level_info ( tmp_path ) : [EOL] assert log_and_read ( INFO , tmp_path ) == [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_logging_to_file_at_level_warning ( tmp_path ) : [EOL] assert log_and_read ( WARNING , tmp_path ) == [ [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_logging_to_file_at_level_error ( tmp_path ) : [EOL] assert log_and_read ( ERROR , tmp_path ) == [ [string] , [string] , ] [EOL] [EOL] [EOL] def test_logging_to_file_at_level_critical ( tmp_path ) : [EOL] assert log_and_read ( CRITICAL , tmp_path ) == [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import rads [EOL] import typing [EOL] import pytest [comment] [EOL] [EOL] from rads import get_dataroot , load_config [EOL] [EOL] if not get_dataroot ( ) : [EOL] pytest . skip ( [string] , allow_module_level = True ) [EOL] [EOL] [EOL] def test_load_config ( ) : [EOL] config = load_config ( ) [EOL] sats = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for sat in sats : [EOL] assert sat in config . satellites [EOL] assert [string] in config . satellites [ sat ] . variables [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import numpy as np [comment] [EOL] [EOL] from rads . datetime64util import ( day , hour , microsecond , minute , month , second , year , ymdhmsus , ) [EOL] [EOL] DATE = np . datetime64 ( [string] ) [EOL] LEAP_YEAR = np . datetime64 ( [string] ) [EOL] NEAR_EPOCH = np . datetime64 ( [string] ) [EOL] LOW = np . datetime64 ( [string] ) [EOL] HIGH = np . datetime64 ( [string] ) [EOL] [EOL] [EOL] def test_year ( ) : [EOL] assert year ( DATE ) == [number] [EOL] assert year ( LEAP_YEAR ) == [number] [EOL] assert year ( NEAR_EPOCH ) == [number] [EOL] assert year ( LOW ) == [number] [EOL] assert year ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_month ( ) : [EOL] assert month ( DATE ) == [number] [EOL] assert month ( LEAP_YEAR ) == [number] [EOL] assert month ( NEAR_EPOCH ) == [number] [EOL] assert month ( LOW ) == [number] [EOL] assert month ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_day ( ) : [EOL] assert day ( DATE ) == [number] [EOL] assert day ( LEAP_YEAR ) == [number] [EOL] assert day ( NEAR_EPOCH ) == [number] [EOL] assert day ( LOW ) == [number] [EOL] assert day ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_hour ( ) : [EOL] assert hour ( DATE ) == [number] [EOL] assert hour ( LEAP_YEAR ) == [number] [EOL] assert hour ( NEAR_EPOCH ) == [number] [EOL] assert hour ( LOW ) == [number] [EOL] assert hour ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_minute ( ) : [EOL] assert minute ( DATE ) == [number] [EOL] assert minute ( LEAP_YEAR ) == [number] [EOL] assert minute ( NEAR_EPOCH ) == [number] [EOL] assert minute ( LOW ) == [number] [EOL] assert minute ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_second ( ) : [EOL] assert second ( DATE ) == [number] [EOL] assert second ( LEAP_YEAR ) == [number] [EOL] assert second ( NEAR_EPOCH ) == [number] [EOL] assert second ( LOW ) == [number] [EOL] assert second ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_microsecond ( ) : [EOL] assert microsecond ( DATE ) == [number] [EOL] assert microsecond ( LEAP_YEAR ) == [number] [EOL] assert microsecond ( NEAR_EPOCH ) == [number] [EOL] assert microsecond ( LOW ) == [number] [EOL] assert microsecond ( HIGH ) == [number] [EOL] [EOL] [EOL] def test_ymdhmsus ( ) : [EOL] assert ymdhmsus ( DATE ) == ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert ymdhmsus ( LEAP_YEAR ) == ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert ymdhmsus ( NEAR_EPOCH ) == ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert ymdhmsus ( LOW ) == ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert ymdhmsus ( HIGH ) == ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , MutableSequence , MutableMapping , Any , Mapping , Optional [EOL] import datetime [EOL] import rads [EOL] import typing [EOL] import builtins [EOL] import math [EOL] import warnings [EOL] from copy import copy , deepcopy [EOL] from datetime import datetime [EOL] from typing import Mapping , MutableMapping , MutableSequence , Optional [EOL] [EOL] import numpy as np [comment] [EOL] import pytest [comment] [EOL] [EOL] from rads . rpn import ( ABS , ACOS , ACOSD , ACOSH , ADD , AND , ASIN , ASIND , ASINH , ATAN , ATAN2 , ATAND , ATANH , AVG , BOXCAR , BTEST , CEIL , CEILING , COS , COSD , COSH , D2R , DIF , DIV , DUP , DXDY , EQ , EXCH , EXP , FLOOR , FMOD , GAUSS , GE , GT , HYPOT , IAND , INRANGE , INV , IOR , ISAN , ISNAN , LE , LOG , LOG10 , LT , MAX , MIN , MUL , NAN , NE , NEG , NINT , OR , PI , POP , POW , R2 , R2D , RINT , SIN , SIND , SINH , SQR , SQRT , SUB , SUM , TAN , TAND , TANH , YMDHMS , CompleteExpression , E , Expression , Literal , StackUnderflowError , Token , Variable , token , ) [EOL] from rads . typing import FloatOrArray [EOL] [EOL] GOLDEN_RATIO = math . log ( ( [number] + math . sqrt ( [number] ) ) / [number] ) [EOL] [EOL] [EOL] class TestLiteral : [EOL] def test_init ( self ) : [EOL] Literal ( [number] ) [EOL] Literal ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Literal ( [string] ) [comment] [EOL] [EOL] def test_pops ( self ) : [EOL] assert Literal ( [number] ) . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert Literal ( [number] ) . puts == [number] [EOL] [EOL] def test_value ( self ) : [EOL] assert Literal ( [number] ) . value == [number] [EOL] assert Literal ( [number] ) . value == [number] [EOL] [EOL] def test_call ( self ) : [EOL] stack = [ ] [EOL] environment = { } [EOL] assert Literal ( [number] ) ( stack , environment ) is None [EOL] assert Literal ( [number] ) ( stack , environment ) is None [EOL] assert stack == [ [number] , [number] ] [EOL] assert environment == { } [EOL] [EOL] def test_eq ( self ) : [EOL] assert Literal ( [number] ) == Literal ( [number] ) [EOL] assert not Literal ( [number] ) == Literal ( [number] ) [EOL] assert not Literal ( [number] ) == [number] [EOL] [EOL] def test_ne ( self ) : [EOL] assert Literal ( [number] ) != Literal ( [number] ) [EOL] assert not Literal ( [number] ) != Literal ( [number] ) [EOL] assert Literal ( [number] ) != [number] [EOL] [EOL] def test_lt ( self ) : [EOL] assert Literal ( [number] ) < Literal ( [number] ) [EOL] assert not Literal ( [number] ) < Literal ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Literal ( [number] ) < [number] [EOL] with pytest . raises ( TypeError ) : [EOL] [number] < Literal ( [number] ) [EOL] [EOL] def test_le ( self ) : [EOL] assert Literal ( [number] ) <= Literal ( [number] ) [EOL] assert Literal ( [number] ) <= Literal ( [number] ) [EOL] assert not Literal ( [number] ) <= Literal ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Literal ( [number] ) <= [number] [EOL] with pytest . raises ( TypeError ) : [EOL] [number] <= Literal ( [number] ) [EOL] [EOL] def test_gt ( self ) : [EOL] assert Literal ( [number] ) > Literal ( [number] ) [EOL] assert not Literal ( [number] ) > Literal ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Literal ( [number] ) > [number] [EOL] with pytest . raises ( TypeError ) : [EOL] [number] > Literal ( [number] ) [EOL] [EOL] def test_ge ( self ) : [EOL] assert Literal ( [number] ) >= Literal ( [number] ) [EOL] assert Literal ( [number] ) >= Literal ( [number] ) [EOL] assert not Literal ( [number] ) >= Literal ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Literal ( [number] ) >= [number] [EOL] with pytest . raises ( TypeError ) : [EOL] [number] >= Literal ( [number] ) [EOL] [EOL] def test_repr ( self ) : [EOL] assert repr ( Literal ( [number] ) ) == [string] [EOL] assert repr ( Literal ( [number] ) ) == [string] [EOL] [EOL] def test_str ( self ) : [EOL] assert str ( Literal ( [number] ) ) == [string] [EOL] assert str ( Literal ( [number] ) ) == [string] [EOL] [EOL] def test_pi ( self ) : [EOL] assert PI . value == pytest . approx ( np . pi ) [EOL] [EOL] def test_e ( self ) : [EOL] assert E . value == pytest . approx ( np . e ) [EOL] [EOL] [EOL] class TestVariable : [EOL] def test_init ( self ) : [EOL] Variable ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] Variable ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] Variable ( [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] Variable ( [number] ) [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] Variable ( [number] ) [comment] [EOL] [EOL] def test_pops ( self ) : [EOL] assert Variable ( [string] ) . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert Variable ( [string] ) . puts == [number] [EOL] [EOL] def test_name ( self ) : [EOL] assert Variable ( [string] ) . name == [string] [EOL] [EOL] def test_call ( self ) : [EOL] stack = [ ] [EOL] environment = { [string] : np . array ( [ [number] , [number] , [number] ] ) , [string] : [number] , [string] : [number] } [EOL] assert Variable ( [string] ) ( stack , environment ) is None [EOL] assert Variable ( [string] ) ( stack , environment ) is None [EOL] assert len ( stack ) == [number] [EOL] assert stack [ [number] ] == [number] [EOL] assert np . all ( stack [ [number] ] == np . array ( [ [number] , [number] , [number] ] ) ) [EOL] assert len ( environment ) == [number] [EOL] assert [string] in environment [EOL] assert [string] in environment [EOL] assert [string] in environment [EOL] assert np . all ( environment [ [string] ] == np . array ( [ [number] , [number] , [number] ] ) ) [EOL] assert environment [ [string] ] == [number] [EOL] assert environment [ [string] ] == [number] [EOL] with pytest . raises ( KeyError ) : [EOL] assert Variable ( [string] ) ( stack , { } ) is None [EOL] assert len ( stack ) == [number] [EOL] assert stack [ [number] ] == [number] [EOL] assert np . all ( stack [ [number] ] == np . array ( [ [number] , [number] , [number] ] ) ) [EOL] [EOL] def test_eq ( self ) : [EOL] assert Variable ( [string] ) == Variable ( [string] ) [EOL] assert not Variable ( [string] ) == Variable ( [string] ) [EOL] assert not Variable ( [string] ) == [string] [EOL] [EOL] def test_ne ( self ) : [EOL] assert Variable ( [string] ) != Variable ( [string] ) [EOL] assert not Variable ( [string] ) != Variable ( [string] ) [EOL] assert Variable ( [string] ) != [string] [EOL] [EOL] def test_repr ( self ) : [EOL] assert repr ( Variable ( [string] ) ) == [string] [EOL] [EOL] def test_str ( self ) : [EOL] assert str ( Variable ( [string] ) ) == [string] [EOL] [EOL] [EOL] def contains_array ( stack ) : [EOL] for item in stack : [EOL] if isinstance ( item , np . ndarray ) : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def contains_nan ( stack ) : [EOL] for item in stack : [EOL] try : [EOL] if math . isnan ( item ) : [EOL] return True [EOL] except TypeError : [EOL] pass [EOL] return False [EOL] [EOL] [EOL] def assert_token ( operator , pre_stack , post_stack , environment = None , * , approx = False , rtol = [number] , atol = [number] , ) : [EOL] [docstring] [EOL] if not environment : [EOL] environment = { [string] : [number] } [EOL] original_environment = deepcopy ( environment ) [EOL] stack = pre_stack [EOL] operator ( stack , environment ) [EOL] [comment] [EOL] assert environment == original_environment [EOL] [comment] [EOL] if approx or contains_nan ( post_stack ) or contains_array ( post_stack ) : [EOL] assert len ( stack ) == len ( post_stack ) [EOL] for a , b in zip ( stack , post_stack ) : [EOL] if isinstance ( a , np . ndarray ) or isinstance ( b , np . ndarray ) : [EOL] if approx : [EOL] np . testing . assert_allclose ( a , b , rtol = rtol , atol = atol , equal_nan = True ) [EOL] else : [EOL] np . testing . assert_equal ( a , b ) [EOL] else : [EOL] if math . isnan ( b ) : [EOL] assert math . isnan ( a ) [EOL] elif approx : [EOL] assert a == pytest . approx ( b , rel = rtol , abs = atol ) [EOL] else : [EOL] assert a == b [EOL] else : [EOL] assert stack == post_stack [EOL] [EOL] [EOL] class TestSUBOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SUB ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SUB . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SUB . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( SUB ) is SUB [EOL] assert deepcopy ( SUB ) is SUB [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SUB , [ [number] , [number] ] , [ - [number] ] ) [EOL] assert_token ( SUB , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ - [number] , [number] ] ) ] ) [EOL] assert_token ( SUB , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , - [number] ] ) ] ) [EOL] assert_token ( SUB , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( SUB , [ [number] , [number] , [number] ] , [ [number] , - [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SUB ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SUB ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestADDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ADD ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ADD . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ADD . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ADD ) is ADD [EOL] assert deepcopy ( ADD ) is ADD [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ADD , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( ADD , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( ADD , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( ADD , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( ADD , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ADD ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ADD ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestMULOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( MUL ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert MUL . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert MUL . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( MUL ) is MUL [EOL] assert deepcopy ( MUL ) is MUL [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( MUL , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( MUL , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MUL , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MUL , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( MUL , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MUL ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MUL ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestPOPOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( POP ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert POP . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert POP . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( POP ) is POP [EOL] assert deepcopy ( POP ) is POP [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( POP , [ [number] ] , [ ] ) [EOL] assert_token ( POP , [ [number] , [number] ] , [ [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] POP ( [ ] , { } ) [EOL] [EOL] [EOL] class TestNEGOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( NEG ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert NEG . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert NEG . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( NEG ) is NEG [EOL] assert deepcopy ( NEG ) is NEG [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( NEG , [ [number] ] , [ - [number] ] ) [EOL] assert_token ( NEG , [ - [number] ] , [ [number] ] ) [EOL] assert_token ( NEG , [ np . array ( [ [number] , - [number] ] ) ] , [ np . array ( [ - [number] , [number] ] ) ] ) [EOL] assert_token ( NEG , [ np . array ( [ - [number] , [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( NEG , [ [number] , [number] ] , [ [number] , - [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NEG ( [ ] , { } ) [EOL] [EOL] [EOL] class TestABSOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ABS ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ABS . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ABS . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ABS ) is ABS [EOL] assert deepcopy ( ABS ) is ABS [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ABS , [ [number] ] , [ [number] ] ) [EOL] assert_token ( ABS , [ - [number] ] , [ [number] ] ) [EOL] assert_token ( ABS , [ np . array ( [ [number] , - [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( ABS , [ np . array ( [ - [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( ABS , [ [number] , - [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ABS ( [ ] , { } ) [EOL] [EOL] [EOL] class TestINVOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( INV ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert INV . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert INV . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( INV ) is INV [EOL] assert deepcopy ( INV ) is INV [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( INV , [ [number] ] , [ [number] ] ) [EOL] assert_token ( INV , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( INV , [ np . array ( [ [number] , - [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) ] ) [EOL] assert_token ( INV , [ np . array ( [ - [number] , [number] ] ) ] , [ np . array ( [ - [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( INV , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] INV ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSQRTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SQRT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SQRT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SQRT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( SQRT ) is SQRT [EOL] assert deepcopy ( SQRT ) is SQRT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SQRT , [ [number] ] , [ [number] ] ) [EOL] assert_token ( SQRT , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( SQRT , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SQRT ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSQROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SQR ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SQR . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SQR . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( EXP ) is EXP [EOL] assert deepcopy ( EXP ) is EXP [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SQR , [ [number] ] , [ [number] ] ) [EOL] assert_token ( SQR , [ - [number] ] , [ [number] ] ) [EOL] assert_token ( SQR , [ np . array ( [ [number] , - [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( SQR , [ np . array ( [ - [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( SQR , [ [number] , - [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SQR ( [ ] , { } ) [EOL] [EOL] [EOL] class TestEXPOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( EXP ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert EXP . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert EXP . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( EXP ) is EXP [EOL] assert deepcopy ( EXP ) is EXP [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( EXP , [ math . log ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( EXP , [ math . log ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( EXP , [ np . array ( [ np . log ( [number] ) , np . log ( [number] ) ] ) ] , [ np . array ( [ [number] , [number] ] ) ] , approx = True ) [EOL] [comment] [EOL] assert_token ( EXP , [ [number] , np . log ( [number] ) ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] EXP ( [ ] , { } ) [EOL] [EOL] [EOL] class TestLOGOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( LOG ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert LOG . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert LOG . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( LOG ) is LOG [EOL] assert deepcopy ( LOG ) is LOG [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( LOG , [ math . e ] , [ [number] ] , approx = True ) [EOL] assert_token ( LOG , [ math . e ** [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( LOG , [ math . e ** - [number] ] , [ - [number] ] , approx = True ) [EOL] assert_token ( LOG , [ np . array ( [ np . e ** [number] , np . e ** - [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) ] , approx = True , ) [EOL] assert_token ( LOG , [ np . array ( [ np . e ** - [number] , np . e ** [number] ] ) ] , [ np . array ( [ - [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( LOG , [ [number] , np . e ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LOG ( [ ] , { } ) [EOL] [EOL] [EOL] class TestLOG10Operator : [EOL] def test_repr ( self ) : [EOL] assert repr ( LOG10 ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert LOG10 . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert LOG10 . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( LOG10 ) is LOG10 [EOL] assert deepcopy ( LOG10 ) is LOG10 [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( LOG10 , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( LOG10 , [ [number] ** [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( LOG10 , [ [number] ** - [number] ] , [ - [number] ] , approx = True ) [EOL] assert_token ( LOG10 , [ np . array ( [ [number] ** [number] , [number] ** - [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) ] , approx = True ) [EOL] assert_token ( LOG10 , [ np . array ( [ [number] ** - [number] , [number] ** [number] ] ) ] , [ np . array ( [ - [number] , [number] ] ) ] , approx = True ) [EOL] [comment] [EOL] assert_token ( LOG10 , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LOG10 ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSINOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SIN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SIN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SIN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( SIN ) is SIN [EOL] assert deepcopy ( SIN ) is SIN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SIN , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( SIN , [ math . pi / [number] ] , [ [number] / [number] ] , approx = True ) [EOL] assert_token ( SIN , [ math . pi / [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( SIN , [ math . pi / [number] ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( SIN , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( SIN , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( SIN , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ - np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( SIN , [ [number] , math . pi / [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SIN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestCOSOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( COS ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert COS . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert COS . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( COS ) is COS [EOL] assert deepcopy ( COS ) is COS [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( COS , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( COS , [ math . pi / [number] ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( COS , [ math . pi / [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( COS , [ math . pi / [number] ] , [ [number] / [number] ] , approx = True ) [EOL] assert_token ( COS , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( COS , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( COS , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( COS , [ [number] , math . pi / [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] COS ( [ ] , { } ) [EOL] [EOL] [EOL] class TestTANOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( TAN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert TAN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert TAN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( TAN ) is TAN [EOL] assert deepcopy ( TAN ) is TAN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( TAN , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( TAN , [ math . pi / [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( TAN , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( TAN , [ math . pi / [number] ] , [ math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( TAN , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] assert_token ( TAN , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ - np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( TAN , [ [number] , math . pi / [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] TAN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSINDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SIND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SIND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SIND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( COSD ) is COSD [EOL] assert deepcopy ( COSD ) is COSD [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SIND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( SIND , [ [number] ] , [ [number] / [number] ] , approx = True ) [EOL] assert_token ( SIND , [ [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( SIND , [ [number] ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( SIND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( SIND , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( SIND , [ - np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ - np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( SIND , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SIND ( [ ] , { } ) [EOL] [EOL] [EOL] class TestCOSDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( COSD ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert COSD . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert COSD . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( COSD ) is COSD [EOL] assert deepcopy ( COSD ) is COSD [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( COSD , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( COSD , [ [number] ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( COSD , [ [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( COSD , [ [number] ] , [ [number] / [number] ] , approx = True ) [EOL] assert_token ( COSD , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( COSD , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( COSD , [ - np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( COSD , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] COSD ( [ ] , { } ) [EOL] [EOL] [EOL] class TestTANDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( TAND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert TAND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert TAND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( TAND ) is TAND [EOL] assert deepcopy ( TAND ) is TAND [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( TAND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( TAND , [ [number] ] , [ [number] / math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( TAND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( TAND , [ [number] ] , [ math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( TAND , [ np . array ( [ [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] assert_token ( TAND , [ - np . array ( [ [number] , [number] , [number] , [number] ] ) ] , [ - np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( TAND , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] TAND ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSINHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SINH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SINH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SINH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( SINH ) is SINH [EOL] assert deepcopy ( SINH ) is SINH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SINH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( SINH , [ GOLDEN_RATIO ] , [ [number] ] , approx = True ) [EOL] assert_token ( SINH , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , [ np . array ( [ [number] , [number] ] ) ] , approx = True ) [EOL] [comment] [EOL] assert_token ( SINH , [ [number] , GOLDEN_RATIO ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SINH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestCOSHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( COSH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert COSH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert COSH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( COSH ) is COSH [EOL] assert deepcopy ( COSH ) is COSH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( COSH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( COSH , [ GOLDEN_RATIO ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( COSH , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( COSH , [ [number] , GOLDEN_RATIO ] , [ [number] , math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] COSH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestTANHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( TANH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert TANH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert TANH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( TANH ) is TANH [EOL] assert deepcopy ( TANH ) is TANH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( TANH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( TANH , [ GOLDEN_RATIO ] , [ math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] assert_token ( TANH , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( TANH , [ [number] , GOLDEN_RATIO ] , [ [number] , math . sqrt ( [number] ) / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] TANH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestASINOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ASIN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ASIN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ASIN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ASIN ) is ASIN [EOL] assert deepcopy ( ASIN ) is ASIN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ASIN , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIN , [ [number] / [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ASIN , [ [number] / math . sqrt ( [number] ) ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ASIN , [ math . sqrt ( [number] ) / [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ASIN , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ASIN , [ np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] assert_token ( ASIN , [ - np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ASIN , [ [number] , [number] ] , [ [number] , math . pi / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ASIN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestACOSOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ACOS ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ACOS . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ACOS . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ACOS ) is ACOS [EOL] assert deepcopy ( ACOS ) is ACOS [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ACOS , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOS , [ math . sqrt ( [number] ) / [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ACOS , [ [number] / math . sqrt ( [number] ) ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ACOS , [ [number] / [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ACOS , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ACOS , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ACOS , [ [number] , [number] ] , [ [number] , math . pi / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ACOS ( [ ] , { } ) [EOL] [EOL] [EOL] class TestATANOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ATAN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ATAN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ATAN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ATAN ) is ATAN [EOL] assert deepcopy ( ATAN ) is ATAN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ATAN , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAN , [ [number] / math . sqrt ( [number] ) ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN , [ math . sqrt ( [number] ) ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN , [ np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] assert_token ( ATAN , [ - np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ATAN , [ [number] , [number] ] , [ [number] , math . pi / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ATAN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestASINDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ASIND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ASIND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ASIND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ASIND ) is ASIND [EOL] assert deepcopy ( ASIND ) is ASIND [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ASIND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIND , [ [number] / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIND , [ [number] / math . sqrt ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIND , [ math . sqrt ( [number] ) / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASIND , [ np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( ASIND , [ - np . array ( [ [number] , [number] / [number] , [number] / np . sqrt ( [number] ) , np . sqrt ( [number] ) / [number] , [number] ] ) ] , [ - np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ASIND , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ASIND ( [ ] , { } ) [EOL] [EOL] [EOL] class TestACOSDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ACOSD ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ACOSD . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ACOSD . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ACOSD ) is ACOSD [EOL] assert deepcopy ( ACOSD ) is ACOSD [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ACOSD , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSD , [ math . sqrt ( [number] ) / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSD , [ [number] / math . sqrt ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSD , [ [number] / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSD , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSD , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] , [number] / np . sqrt ( [number] ) , [number] / [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ACOSD , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ACOSD ( [ ] , { } ) [EOL] [EOL] [EOL] class TestATANDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ATAND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ATAND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ATAND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ATAND ) is ATAND [EOL] assert deepcopy ( ATAND ) is ATAND [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ATAND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAND , [ [number] / math . sqrt ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAND , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAND , [ math . sqrt ( [number] ) ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAND , [ np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , [ np . array ( [ [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( ATAND , [ - np . array ( [ [number] , [number] / np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) ] ) ] , [ - np . array ( [ [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ATAND , [ [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ATAND ( [ ] , { } ) [EOL] [EOL] [EOL] class TestASINHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ASINH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ASINH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ASINH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ASINH ) is ASINH [EOL] assert deepcopy ( ASINH ) is ASINH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ASINH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ASINH , [ [number] ] , [ GOLDEN_RATIO ] , approx = True ) [EOL] assert_token ( ASINH , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , approx = True ) [EOL] [comment] [EOL] assert_token ( ASINH , [ [number] , [number] ] , [ [number] , GOLDEN_RATIO ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ASINH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestACOSHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ACOSH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ACOSH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ACOSH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ACOSH ) is ACOSH [EOL] assert deepcopy ( ACOSH ) is ACOSH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ACOSH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ACOSH , [ math . sqrt ( [number] ) / [number] ] , [ GOLDEN_RATIO ] , approx = True ) [EOL] assert_token ( ACOSH , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] ] ) ] , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ACOSH , [ [number] , math . sqrt ( [number] ) / [number] ] , [ [number] , GOLDEN_RATIO ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ACOSH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestATANHOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ATANH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ATANH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ATANH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ATANH ) is ATANH [EOL] assert deepcopy ( ATANH ) is ATANH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ATANH , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATANH , [ math . sqrt ( [number] ) / [number] ] , [ GOLDEN_RATIO ] , approx = True ) [EOL] assert_token ( ATANH , [ np . array ( [ [number] , np . sqrt ( [number] ) / [number] ] ) ] , [ np . array ( [ [number] , GOLDEN_RATIO ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ATANH , [ [number] , math . sqrt ( [number] ) / [number] ] , [ [number] , GOLDEN_RATIO ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ATANH ( [ ] , { } ) [EOL] [EOL] [EOL] class TestISNANOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ISNAN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ISNAN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ISNAN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ISNAN ) is ISNAN [EOL] assert deepcopy ( ISNAN ) is ISNAN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ISNAN , [ [number] ] , [ False ] ) [EOL] assert_token ( ISNAN , [ float ( [string] ) ] , [ True ] ) [EOL] assert_token ( ISNAN , [ np . array ( [ [number] , np . nan ] ) ] , [ np . array ( [ False , True ] ) ] ) [EOL] assert_token ( ISNAN , [ np . array ( [ np . nan , [number] ] ) ] , [ np . array ( [ True , False ] ) ] ) [EOL] [comment] [EOL] assert_token ( ISNAN , [ [number] , float ( [string] ) ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ISNAN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestISANOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ISAN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ISAN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ISAN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ISAN ) is ISAN [EOL] assert deepcopy ( ISAN ) is ISAN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( ISAN , [ [number] ] , [ True ] ) [EOL] assert_token ( ISAN , [ float ( [string] ) ] , [ False ] ) [EOL] assert_token ( ISAN , [ np . array ( [ [number] , np . nan ] ) ] , [ np . array ( [ True , False ] ) ] ) [EOL] assert_token ( ISAN , [ np . array ( [ np . nan , [number] ] ) ] , [ np . array ( [ False , True ] ) ] ) [EOL] [comment] [EOL] assert_token ( ISAN , [ [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ISAN ( [ ] , { } ) [EOL] [EOL] [EOL] class TestRINTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( RINT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert RINT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert RINT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( RINT ) is RINT [EOL] assert deepcopy ( RINT ) is RINT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( RINT , [ [number] ] , [ [number] ] ) [EOL] assert_token ( RINT , [ [number] ] , [ [number] ] ) [EOL] assert_token ( RINT , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( RINT , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( RINT , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( RINT , [ np . array ( [ - [number] , - [number] ] ) ] , [ np . array ( [ - [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( RINT , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] RINT ( [ ] , { } ) [EOL] [EOL] [EOL] class TestNINTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( NINT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert NINT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert NINT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( NINT ) is NINT [EOL] assert deepcopy ( NINT ) is NINT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( NINT , [ [number] ] , [ [number] ] ) [EOL] assert_token ( NINT , [ [number] ] , [ [number] ] ) [EOL] assert_token ( NINT , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( NINT , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( NINT , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( NINT , [ np . array ( [ - [number] , - [number] ] ) ] , [ np . array ( [ - [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( NINT , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NINT ( [ ] , { } ) [EOL] [EOL] [EOL] class TestCEILOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( CEIL ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert CEIL . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert CEIL . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( CEIL ) is CEIL [EOL] assert deepcopy ( CEIL ) is CEIL [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( CEIL , [ [number] ] , [ [number] ] ) [EOL] assert_token ( CEIL , [ [number] ] , [ [number] ] ) [EOL] assert_token ( CEIL , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( CEIL , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( CEIL , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( CEIL , [ np . array ( [ - [number] , - [number] ] ) ] , [ np . array ( [ - [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( CEIL , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] CEIL ( [ ] , { } ) [EOL] [EOL] [EOL] class TestCEILINGOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( CEILING ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert CEILING . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert CEILING . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( CEILING ) is CEILING [EOL] assert deepcopy ( CEILING ) is CEILING [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( CEILING , [ [number] ] , [ [number] ] ) [EOL] assert_token ( CEILING , [ [number] ] , [ [number] ] ) [EOL] assert_token ( CEILING , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( CEILING , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( CEILING , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( CEILING , [ np . array ( [ - [number] , - [number] ] ) ] , [ np . array ( [ - [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( CEILING , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] CEILING ( [ ] , { } ) [EOL] [EOL] [EOL] class TestFLOOROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( FLOOR ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert FLOOR . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert FLOOR . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( FLOOR ) is FLOOR [EOL] assert deepcopy ( FLOOR ) is FLOOR [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( FLOOR , [ [number] ] , [ [number] ] ) [EOL] assert_token ( FLOOR , [ [number] ] , [ [number] ] ) [EOL] assert_token ( FLOOR , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( FLOOR , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( FLOOR , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( FLOOR , [ np . array ( [ - [number] , - [number] ] ) ] , [ np . array ( [ - [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( FLOOR , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] FLOOR ( [ ] , { } ) [EOL] [EOL] [EOL] class TestD2ROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( D2R ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert D2R . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert D2R . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( D2R ) is D2R [EOL] assert deepcopy ( D2R ) is D2R [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( D2R , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( D2R , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( D2R , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( D2R , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( D2R , [ [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( D2R , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] assert_token ( D2R , [ - np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( D2R , [ [number] , [number] ] , [ [number] , math . pi / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] D2R ( [ ] , { } ) [EOL] [EOL] [EOL] class TestR2DOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( R2D ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert R2D . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert R2D . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( R2D ) is R2D [EOL] assert deepcopy ( R2D ) is R2D [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( R2D , [ [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( R2D , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( R2D , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( R2D , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( R2D , [ math . pi / [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( R2D , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] assert_token ( R2D , [ - np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] ] ) ] , [ - np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( R2D , [ [number] , math . pi / [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] R2D ( [ ] , { } ) [EOL] [EOL] [EOL] class TestYMDHMSOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( YMDHMS ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert YMDHMS . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert YMDHMS . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( YMDHMS ) is YMDHMS [EOL] assert deepcopy ( YMDHMS ) is YMDHMS [EOL] [EOL] def test_call ( self ) : [EOL] epoch = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] date1 = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] date2 = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] seconds1 = ( date1 - epoch ) . total_seconds ( ) [EOL] seconds2 = ( date2 - epoch ) . total_seconds ( ) [EOL] assert_token ( YMDHMS , [ seconds1 ] , [ [number] ] , approx = True ) [EOL] assert_token ( YMDHMS , [ seconds2 ] , [ [number] ] , approx = True ) [EOL] assert_token ( YMDHMS , [ np . array ( [ seconds1 , seconds2 ] ) ] , [ np . array ( [ [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( YMDHMS , [ [number] , seconds1 ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] YMDHMS ( [ ] , { } ) [EOL] [EOL] [EOL] class TestSUMOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( SUM ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert SUM . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert SUM . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( SUM ) is SUM [EOL] assert deepcopy ( SUM ) is SUM [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( SUM , [ [number] ] , [ [number] ] ) [EOL] assert_token ( SUM , [ - [number] ] , [ - [number] ] ) [EOL] assert_token ( SUM , [ float ( [string] ) ] , [ [number] ] ) [EOL] assert_token ( SUM , [ np . array ( [ [number] , - [number] ] ) ] , [ [number] ] ) [EOL] assert_token ( SUM , [ np . array ( [ - [number] , [number] ] ) ] , [ - [number] ] ) [EOL] assert_token ( SUM , [ np . array ( [ [number] , np . nan , [number] ] ) ] , [ [number] ] ) [EOL] assert_token ( SUM , [ np . array ( [ np . nan ] ) ] , [ [number] ] ) [EOL] [comment] [EOL] assert_token ( SUM , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] SUM ( [ ] , { } ) [EOL] [EOL] [EOL] class TestDIFFOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( DIF ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert DIF . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert DIF . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( DIF ) is DIF [EOL] assert deepcopy ( DIF ) is DIF [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( DIF , [ [number] ] , [ np . array ( [ np . nan ] ) ] ) [EOL] assert_token ( DIF , [ np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] ] ) ] ) [EOL] assert_token ( DIF , [ np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] , [number] ] ) ] ) [EOL] assert_token ( DIF , [ np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ np . nan , np . nan , np . nan ] ) ] ) [EOL] [comment] [EOL] assert_token ( DIF , [ [number] , [number] ] , [ [number] , np . array ( [ np . nan ] ) ] ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DIF ( [ ] , { } ) [EOL] [EOL] [EOL] class TestDUPOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( DUP ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert DUP . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert DUP . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( DUP ) is DUP [EOL] assert deepcopy ( DUP ) is DUP [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( DUP , [ [number] ] , [ [number] , [number] ] ) [EOL] assert_token ( DUP , [ np . array ( [ [number] , - [number] ] ) ] , [ np . array ( [ [number] , - [number] ] ) , np . array ( [ [number] , - [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( DUP , [ [number] , [number] ] , [ [number] , [number] , [number] ] ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DUP ( [ ] , { } ) [EOL] [EOL] [EOL] class TestDIVOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( DIV ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert DIV . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert DIV . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( DIV ) is DIV [EOL] assert deepcopy ( DIV ) is DIV [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( DIV , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( DIV , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( DIV , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( DIV , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( DIV , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DIV ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DIV ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestPOWOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( POW ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert POW . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert POW . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( POW ) is POW [EOL] assert deepcopy ( POW ) is POW [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( POW , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( POW , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( POW , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( POW , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( POW , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( POW , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( POW , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] POW ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] POW ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestFMODOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( FMOD ) == [string] [EOL] assert FMOD . pops == [number] [EOL] assert FMOD . puts == [number] [EOL] [EOL] def test_pops ( self ) : [EOL] assert repr ( FMOD ) == [string] [EOL] assert FMOD . pops == [number] [EOL] assert FMOD . puts == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert repr ( FMOD ) == [string] [EOL] assert FMOD . pops == [number] [EOL] assert FMOD . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( FMOD ) is FMOD [EOL] assert deepcopy ( FMOD ) is FMOD [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( FMOD , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( FMOD , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( FMOD , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( FMOD , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( FMOD , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( FMOD , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( FMOD , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] FMOD ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] FMOD ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestMINOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( MIN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert MIN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert MIN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( MIN ) is MIN [EOL] assert deepcopy ( MIN ) is MIN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( MIN , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( MIN , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( MIN , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MIN , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MIN , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( MIN , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MIN ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MIN ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestMAXOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( MAX ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert MAX . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert MAX . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( MAX ) is MAX [EOL] assert deepcopy ( MAX ) is MAX [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( MAX , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( MAX , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( MAX , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MAX , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( MAX , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( MAX , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MAX ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] MAX ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestATAN2Operator : [EOL] def test_repr ( self ) : [EOL] assert repr ( ATAN2 ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert ATAN2 . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert ATAN2 . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( ATAN2 ) is ATAN2 [EOL] assert deepcopy ( ATAN2 ) is ATAN2 [EOL] [EOL] def test_call ( self ) : [EOL] [comment] [EOL] assert_token ( ATAN2 , [ [number] , [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , math . sqrt ( [number] ) ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ math . sqrt ( [number] ) , [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , [number] ] , [ math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ math . sqrt ( [number] ) , - [number] ] , [ math . pi / [number] + math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , - [number] ] , [ math . pi / [number] + math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , - math . sqrt ( [number] ) ] , [ math . pi / [number] + math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ [number] , - [number] ] , [ math . pi / [number] + math . pi / [number] ] , approx = True ) [EOL] assert_token ( ATAN2 , [ np . array ( [ [number] , [number] , [number] , np . sqrt ( [number] ) , [number] , np . sqrt ( [number] ) , [number] , [number] , [number] ] ) , np . array ( [ [number] , np . sqrt ( [number] ) , [number] , [number] , [number] , - [number] , - [number] , - np . sqrt ( [number] ) , - [number] ] ) , ] , [ np . array ( [ [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] , np . pi / [number] + np . pi / [number] , np . pi / [number] + np . pi / [number] , np . pi / [number] + np . pi / [number] , np . pi / [number] + np . pi / [number] , ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( ATAN2 , [ [number] , [number] , [number] ] , [ [number] , math . pi / [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] ATAN2 ( [ ] , { } ) [EOL] [EOL] [EOL] class TestHYPOTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( HYPOT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert HYPOT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert HYPOT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( HYPOT ) is HYPOT [EOL] assert deepcopy ( HYPOT ) is HYPOT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( HYPOT , [ [number] , [number] ] , [ math . sqrt ( [number] ) ] , approx = True ) [EOL] assert_token ( HYPOT , [ math . sqrt ( [number] ) , [number] ] , [ [number] ] , approx = True ) [EOL] assert_token ( HYPOT , [ [number] , np . array ( [ np . sqrt ( [number] ) , [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] assert_token ( HYPOT , [ np . array ( [ np . sqrt ( [number] ) , [number] ] ) , [number] ] , [ np . array ( [ [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] assert_token ( HYPOT , [ np . array ( [ np . sqrt ( [number] ) , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , np . sqrt ( [number] ) ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( HYPOT , [ [number] , math . sqrt ( [number] ) , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] HYPOT ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] HYPOT ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestR2Operator : [EOL] def test_repr ( self ) : [EOL] assert repr ( R2 ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert R2 . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert R2 . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( R2 ) is R2 [EOL] assert deepcopy ( R2 ) is R2 [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( R2 , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( R2 , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( R2 , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( R2 , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( R2 , [ [number] , [number] , [number] ] , [ [number] , [number] ] , approx = True ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] R2 ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] R2 ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestEQOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( EQ ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert EQ . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert EQ . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( EQ ) is EQ [EOL] assert deepcopy ( EQ ) is EQ [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( EQ , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( EQ , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( EQ , [ [number] , np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ False , False , True ] ) ] ) [EOL] assert_token ( EQ , [ np . array ( [ [number] , np . nan , [number] ] ) , [number] ] , [ np . array ( [ False , False , True ] ) ] ) [EOL] assert_token ( EQ , [ np . array ( [ [number] , np . nan , [number] , [number] ] ) , np . array ( [ [number] , np . nan , [number] , [number] ] ) ] , [ np . array ( [ True , False , False , True ] ) ] , ) [EOL] [comment] [EOL] assert_token ( EQ , [ [number] , [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] EQ ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] EQ ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestNEOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( NE ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert NE . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert NE . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( NE ) is NE [EOL] assert deepcopy ( NE ) is NE [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( NE , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( NE , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( NE , [ [number] , np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ True , True , False ] ) ] ) [EOL] assert_token ( NE , [ np . array ( [ [number] , np . nan , [number] ] ) , [number] ] , [ np . array ( [ True , True , False ] ) ] ) [EOL] assert_token ( NE , [ np . array ( [ [number] , np . nan , [number] , [number] ] ) , np . array ( [ [number] , np . nan , [number] , [number] ] ) ] , [ np . array ( [ False , True , True , False ] ) ] , ) [EOL] [comment] [EOL] assert_token ( NE , [ [number] , [number] , [number] ] , [ [number] , False ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NE ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NE ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestLTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( LT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert LT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert LT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( LT ) is LT [EOL] assert deepcopy ( LT ) is LT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( LT , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( LT , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( LT , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( LT , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , False , True ] ) ] ) [EOL] assert_token ( LT , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ True , False , False ] ) ] ) [EOL] assert_token ( LT , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ True , False , False ] ) ] , ) [EOL] [comment] [EOL] assert_token ( LT , [ [number] , [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LT ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LT ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestLEOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( LE ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert LE . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert LE . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( LE ) is LE [EOL] assert deepcopy ( LE ) is LE [EOL] [EOL] def test_le ( self ) : [EOL] assert_token ( LE , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( LE , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( LE , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( LE , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , True , True ] ) ] ) [EOL] assert_token ( LE , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ True , True , False ] ) ] ) [EOL] assert_token ( LE , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ True , True , False ] ) ] , ) [EOL] [comment] [EOL] assert_token ( LE , [ [number] , [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LE ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] LE ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestGTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( GT ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert GT . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert GT . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( GT ) is GT [EOL] assert deepcopy ( GT ) is GT [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( GT , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( GT , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( GT , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( GT , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ True , False , False ] ) ] ) [EOL] assert_token ( GT , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ False , False , True ] ) ] ) [EOL] assert_token ( GT , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , False , True ] ) ] , ) [EOL] [comment] [EOL] assert_token ( GT , [ [number] , [number] , [number] ] , [ [number] , False ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GT ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GT ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestGEOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( GE ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert GE . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert GE . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( GE ) is GE [EOL] assert deepcopy ( GE ) is GE [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( GE , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( GE , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( GE , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( GE , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ True , True , False ] ) ] ) [EOL] assert_token ( GE , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ False , True , True ] ) ] ) [EOL] assert_token ( GE , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , True , True ] ) ] , ) [EOL] [comment] [EOL] assert_token ( GE , [ [number] , [number] , [number] ] , [ [number] , False ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GE ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GE ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestNANOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( NAN ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert NAN . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert NAN . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( NAN ) is NAN [EOL] assert deepcopy ( NAN ) is NAN [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( NAN , [ [number] , [number] ] , [ float ( [string] ) ] ) [EOL] assert_token ( NAN , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( NAN , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] ] ) ] ) [EOL] assert_token ( NAN , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ np . nan , [number] ] ) ] ) [EOL] assert_token ( NAN , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , np . nan , [number] ] ) ] ) [EOL] [comment] [EOL] assert_token ( NAN , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , np . nan , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( NAN , [ [number] , [number] , [number] ] , [ [number] , float ( [string] ) ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NAN ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] NAN ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestANDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( AND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert AND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert AND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( AND ) is AND [EOL] assert deepcopy ( AND ) is AND [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( AND , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( AND , [ float ( [string] ) , [number] ] , [ [number] ] ) [EOL] assert_token ( AND , [ float ( [string] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( AND , [ np . array ( [ np . nan , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( AND , [ np . array ( [ [number] , np . nan , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( AND , [ [number] , float ( [string] ) , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] AND ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] AND ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestOROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( OR ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert OR . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert OR . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( OR ) is OR [EOL] assert deepcopy ( OR ) is OR [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( OR , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( OR , [ [number] , float ( [string] ) ] , [ float ( [string] ) ] ) [EOL] assert_token ( OR , [ [number] , np . array ( [ [number] , np . nan ] ) ] , [ np . array ( [ [number] , np . nan ] ) ] ) [EOL] assert_token ( OR , [ np . array ( [ [number] , [number] ] ) , np . nan ] , [ np . array ( [ np . nan , np . nan ] ) ] ) [EOL] assert_token ( OR , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ [number] , np . nan , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( OR , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ [number] , np . nan , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( OR , [ [number] , [number] , float ( [string] ) ] , [ [number] , float ( [string] ) ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] OR ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] OR ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestIANDOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( IAND ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert IAND . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert IAND . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( IAND ) is IAND [EOL] assert deepcopy ( IAND ) is IAND [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( IAND , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IAND , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IAND , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IAND , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( IAND , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( IAND , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( IAND , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] IAND ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IAND ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IAND ( [ [number] , np . array ( [ [number] , [number] ] ) ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IAND ( [ np . array ( [ [number] , [number] ] ) , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] IAND ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] IAND ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestIOROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( IOR ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert IOR . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert IOR . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( IOR ) is IOR [EOL] assert deepcopy ( IOR ) is IOR [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( IOR , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IOR , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IOR , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( IOR , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( IOR , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( IOR , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( IOR , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] IOR ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IOR ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IOR ( [ [number] , np . array ( [ [number] , [number] ] ) ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] IOR ( [ np . array ( [ [number] , [number] ] ) , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] IOR ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] IOR ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestBTESTOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( BTEST ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert BTEST . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert BTEST . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( BTEST ) is BTEST [EOL] assert deepcopy ( BTEST ) is BTEST [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( BTEST , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( BTEST , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( BTEST , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( BTEST , [ [number] , [number] ] , [ True ] ) [EOL] assert_token ( BTEST , [ [number] , [number] ] , [ False ] ) [EOL] assert_token ( BTEST , [ [number] , np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ True , False , False , True , False ] ) ] , ) [EOL] assert_token ( BTEST , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ False , True , False ] ) ] ) [EOL] assert_token ( BTEST , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , False , True ] ) ] , ) [EOL] [comment] [EOL] assert_token ( BTEST , [ [number] , [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] BTEST ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] BTEST ( [ [number] , [number] ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] BTEST ( [ [number] , np . array ( [ [number] , [number] ] ) ] , { } ) [EOL] with pytest . raises ( TypeError ) : [EOL] BTEST ( [ np . array ( [ [number] , [number] ] ) , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] BTEST ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] BTEST ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestAVGOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( AVG ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert AVG . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert AVG . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( AVG ) is AVG [EOL] assert deepcopy ( AVG ) is AVG [EOL] [EOL] def test_call ( self ) : [EOL] assert repr ( AVG ) == [string] [EOL] assert AVG . pops == [number] [EOL] assert AVG . puts == [number] [EOL] assert_token ( AVG , [ [number] , [number] ] , [ [number] ] ) [EOL] assert_token ( AVG , [ float ( [string] ) , [number] ] , [ [number] ] ) [EOL] assert_token ( AVG , [ [number] , float ( [string] ) ] , [ [number] ] ) [EOL] assert_token ( AVG , [ [number] , np . array ( [ [number] , np . nan , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( AVG , [ np . nan , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( AVG , [ np . array ( [ [number] , np . nan , [number] ] ) , [number] ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( AVG , [ np . array ( [ [number] , [number] , [number] ] ) , np . nan ] , [ np . array ( [ [number] , [number] , [number] ] ) ] ) [EOL] assert_token ( AVG , [ np . array ( [ [number] , np . nan , [number] ] ) , np . array ( [ [number] , [number] , np . nan ] ) ] , [ np . array ( [ [number] , [number] , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( AVG , [ [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] AVG ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] AVG ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestDXDYOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( DXDY ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert DXDY . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert DXDY . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( DXDY ) is DXDY [EOL] assert deepcopy ( DXDY ) is DXDY [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( DXDY , [ [number] , [number] ] , [ float ( [string] ) ] ) [EOL] assert_token ( DXDY , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ np . nan , np . nan ] ) ] ) [EOL] assert_token ( DXDY , [ [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] , np . nan ] ) ] ) [EOL] assert_token ( DXDY , [ [number] , np . array ( [ [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] , [number] , np . nan ] ) ] ) [EOL] with warnings . catch_warnings ( ) : [comment] [EOL] warnings . simplefilter ( [string] ) [EOL] assert_token ( DXDY , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ np . array ( [ np . nan , np . nan ] ) ] ) [EOL] assert_token ( DXDY , [ np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ np . nan , np . inf , np . nan ] ) ] ) [EOL] assert_token ( DXDY , [ np . array ( [ [number] , [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ np . nan , np . inf , np . inf , np . nan ] ) ] , ) [EOL] assert_token ( DXDY , [ np . array ( [ [number] , [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] , [number] ] ) ] , [ np . array ( [ np . nan , [number] , [number] , np . nan ] ) ] , ) [EOL] [comment] [EOL] assert_token ( DXDY , [ [number] , [number] , [number] ] , [ [number] , float ( [string] ) ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DXDY ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] DXDY ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestEXCHOperator : [EOL] def test_rerpr ( self ) : [EOL] assert repr ( EXCH ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert EXCH . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert EXCH . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( EXCH ) is EXCH [EOL] assert deepcopy ( EXCH ) is EXCH [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( EXCH , [ [number] , [number] ] , [ [number] , [number] ] ) [EOL] assert_token ( EXCH , [ [number] , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) , [number] ] ) [EOL] assert_token ( EXCH , [ np . array ( [ [number] , [number] ] ) , [number] ] , [ [number] , np . array ( [ [number] , [number] ] ) ] ) [EOL] assert_token ( EXCH , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , [ np . array ( [ [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) ] , ) [EOL] [comment] [EOL] assert_token ( EXCH , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] EXCH ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] EXCH ( [ [number] ] , { } ) [EOL] [EOL] [EOL] class TestINRANGEOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( INRANGE ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert INRANGE . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert INRANGE . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( INRANGE ) is INRANGE [EOL] assert deepcopy ( INRANGE ) is INRANGE [EOL] [EOL] def test_call ( self ) : [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] ] , [ False ] ) [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] ] , [ True ] ) [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] ] , [ True ] ) [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] ] , [ True ] ) [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] ] , [ False ] ) [EOL] assert_token ( INRANGE , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ False , True , True , True , False ] ) ] , ) [EOL] assert_token ( INRANGE , [ [number] , np . array ( [ [number] , [number] , [number] ] ) , [number] ] , [ np . array ( [ True , True , False ] ) ] ) [EOL] assert_token ( INRANGE , [ [number] , [number] , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ False , True , True ] ) ] ) [EOL] assert_token ( INRANGE , [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] , [number] ] ) ] , [ np . array ( [ True , True , True ] ) ] , ) [EOL] [comment] [EOL] assert_token ( INRANGE , [ [number] , [number] , [number] , [number] ] , [ [number] , True ] ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] INRANGE ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] INRANGE ( [ [number] ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] INRANGE ( [ [number] , [number] ] , { } ) [EOL] [EOL] [EOL] class TestBOXCAROperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( BOXCAR ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert BOXCAR . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert BOXCAR . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( BOXCAR ) is BOXCAR [EOL] assert deepcopy ( BOXCAR ) is BOXCAR [EOL] [EOL] def test_call ( self ) : [EOL] [comment] [EOL] assert_token ( BOXCAR , [ [number] , [number] , [number] ] , [ [number] ] ) [EOL] [comment] [EOL] assert_token ( BOXCAR , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ [number] / [number] , [number] , [number] , [number] , [number] / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( BOXCAR , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( BOXCAR , [ np . array ( [ [number] , np . nan , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ [number] , np . nan , [number] , [number] , [number] / [number] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( BOXCAR , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) , [number] , [number] ] , [ np . array ( [ [ [number] / [number] , [number] , [number] , [number] , [number] / [number] ] , [ [number] / [number] , [number] , [number] , [number] , [number] / [number] ] ] ) ] , approx = True , ) [EOL] assert_token ( BOXCAR , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) , [number] , [number] , ] , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) ] , approx = True , ) [EOL] [comment] [EOL] assert_token ( BOXCAR , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] BOXCAR ( [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] BOXCAR ( [ np . array ( [ [number] , [number] , [number] ] ) , [number] , np . array ( [ [number] , [number] ] ) ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( IndexError ) : [EOL] BOXCAR ( [ np . array ( [ [number] , [number] , [number] ] ) , [number] , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] BOXCAR ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] BOXCAR ( [ [number] ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] BOXCAR ( [ [number] , [number] ] , { } ) [EOL] [EOL] [EOL] class TestGAUSSOperator : [EOL] def test_repr ( self ) : [EOL] assert repr ( GAUSS ) == [string] [EOL] [EOL] def test_pops ( self ) : [EOL] assert GAUSS . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] assert GAUSS . puts == [number] [EOL] [EOL] def test_no_copy ( self ) : [EOL] assert copy ( GAUSS ) is GAUSS [EOL] assert deepcopy ( GAUSS ) is GAUSS [EOL] [EOL] def test_call ( self ) : [EOL] [comment] [EOL] assert_token ( GAUSS , [ [number] , [number] , [number] ] , [ [number] ] ) [EOL] [comment] [EOL] assert_token ( GAUSS , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ] , approx = True , rtol = [number] , atol = [number] , ) [EOL] [comment] [EOL] assert_token ( GAUSS , [ np . array ( [ [number] , np . nan , [number] , [number] , [number] ] ) , [number] , [number] ] , [ np . array ( [ [number] , np . nan , [number] , [number] , [number] ] ) ] , approx = True , rtol = [number] , atol = [number] , ) [EOL] [comment] [EOL] assert_token ( GAUSS , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) , [number] , [number] ] , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] ) ] , approx = True , rtol = [number] , atol = [number] , ) [EOL] assert_token ( GAUSS , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) , [number] , [number] , ] , [ np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] ) ] , approx = True , rtol = [number] , atol = [number] , ) [EOL] [comment] [EOL] assert_token ( GAUSS , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] GAUSS ( [ np . array ( [ [number] , [number] , [number] ] ) , np . array ( [ [number] , [number] ] ) , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] GAUSS ( [ np . array ( [ [number] , [number] , [number] ] ) , [number] , np . array ( [ [number] , [number] ] ) ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( IndexError ) : [EOL] GAUSS ( [ np . array ( [ [number] , [number] , [number] ] ) , [number] , [number] ] , { } ) [EOL] [comment] [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GAUSS ( [ ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GAUSS ( [ [number] ] , { } ) [EOL] with pytest . raises ( StackUnderflowError ) : [EOL] GAUSS ( [ [number] , [number] ] , { } ) [EOL] [EOL] [EOL] def test_token_keywords ( ) : [EOL] assert token ( [string] ) == SUB [EOL] assert token ( [string] ) == ADD [EOL] assert token ( [string] ) == MUL [EOL] assert token ( [string] ) == PI [EOL] assert token ( [string] ) == E [EOL] [EOL] [EOL] def test_token_literals ( ) : [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] assert token ( [string] ) == Literal ( [number] ) [EOL] [EOL] [EOL] def test_token_variables ( ) : [EOL] assert token ( [string] ) == Variable ( [string] ) [EOL] assert token ( [string] ) == Variable ( [string] ) [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] token ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] token ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] def test_token_wrong_type ( ) : [EOL] with pytest . raises ( TypeError ) : [EOL] token ( [number] ) [comment] [EOL] [EOL] [EOL] class TestExpression : [EOL] def test_init_with_token_sequence ( self ) : [EOL] [comment] [EOL] Expression ( [ Literal ( [number] ) ] ) [EOL] Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] Expression ( [ ] ) [EOL] Expression ( [ Literal ( [number] ) , POP ] ) [EOL] Expression ( [ POP , POP ] ) [EOL] Expression ( [ Literal ( [number] ) , ADD ] ) [EOL] Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) [EOL] Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) [EOL] [EOL] def test_init_with_mixed_sequence ( self ) : [EOL] [comment] [EOL] Expression ( [ [number] ] ) [EOL] Expression ( [ [number] , [number] , ADD ] ) [EOL] Expression ( [ [number] , [string] , ADD ] ) [EOL] [comment] [EOL] Expression ( [ ] ) [EOL] Expression ( [ [number] , POP ] ) [EOL] Expression ( [ POP , POP ] ) [EOL] Expression ( [ [number] , ADD ] ) [EOL] Expression ( [ [number] , [number] , DUP ] ) [EOL] Expression ( [ ADD , [number] , MUL , [string] , DUP ] ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [ [number] , [string] , ADD ] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [ [number] , [string] , ADD ] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] def test_init_with_token_string ( self ) : [EOL] [comment] [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] [comment] [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] Expression ( [string] ) [EOL] [comment] [EOL] Expression ( [string] ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_eq_with_token_sequence ( self ) : [EOL] [comment] [EOL] assert Expression ( [ Literal ( [number] ) ] ) == Expression ( [ Literal ( [number] ) ] ) [EOL] assert Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) == Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] assert Expression ( [ ] ) == Expression ( [ ] ) [EOL] assert Expression ( [ Literal ( [number] ) , POP ] ) == Expression ( [ Literal ( [number] ) , POP ] ) [EOL] assert Expression ( [ POP , POP ] ) == Expression ( [ POP , POP ] ) [EOL] assert Expression ( [ Literal ( [number] ) , ADD ] ) == Expression ( [ Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) [EOL] assert Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) == Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) [EOL] [comment] [EOL] assert not Expression ( [ Literal ( [number] ) ] ) == [number] [EOL] assert Expression ( [ [number] ] ) != [number] [EOL] [EOL] def test_eq_with_mixed_sequence ( self ) : [EOL] [comment] [EOL] assert Expression ( [ [number] ] ) == Expression ( [ Literal ( [number] ) ] ) [EOL] assert Expression ( [ [number] , [number] , ADD ] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [ [number] , [string] , ADD ] ) == Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] assert Expression ( [ ] ) == Expression ( [ ] ) [EOL] assert Expression ( [ [number] , POP ] ) == Expression ( [ Literal ( [number] ) , POP ] ) [EOL] assert Expression ( [ POP , POP ] ) == Expression ( [ POP , POP ] ) [EOL] assert Expression ( [ [number] , ADD ] ) == Expression ( [ Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [ [number] , [number] , DUP ] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) [EOL] assert Expression ( [ ADD , [number] , MUL , [string] , DUP ] ) == Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) [EOL] [comment] [EOL] assert not Expression ( [ [number] ] ) == [number] [EOL] assert Expression ( [ [number] ] ) != [number] [EOL] [EOL] def test_eq_with_token_string ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) ] ) [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] assert Expression ( [string] ) == Expression ( [ ] ) [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , POP ] ) [EOL] assert Expression ( [string] ) == Expression ( [ POP , POP ] ) [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , ADD ] ) [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) [EOL] assert Expression ( [string] ) == Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) [EOL] [comment] [EOL] assert Expression ( [string] ) == Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] assert not Expression ( [string] ) == [number] [EOL] [EOL] def test_eq_with_complete_expression ( self ) : [EOL] assert Expression ( [string] ) == CompleteExpression ( [string] ) [EOL] assert Expression ( [string] ) == CompleteExpression ( [string] ) [EOL] assert Expression ( [string] ) == CompleteExpression ( [string] ) [EOL] [EOL] def test_pops ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] [comment] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] assert Expression ( [string] ) . pops == [number] [EOL] [EOL] def test_puts ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] [comment] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] assert Expression ( [string] ) . puts == [number] [EOL] [EOL] def test_variables ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) . variables == set ( ) [EOL] assert Expression ( [string] ) . variables == { [string] } [EOL] assert Expression ( [string] ) . variables == { [string] , [string] } [EOL] [comment] [EOL] assert Expression ( [string] ) . variables == set ( ) [EOL] assert Expression ( [string] ) . variables == { [string] } [EOL] assert Expression ( [string] ) . variables == { [string] , [string] } [EOL] [EOL] def test_complete ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) . complete ( ) == CompleteExpression ( [string] ) [EOL] assert isinstance ( Expression ( [string] ) . complete ( ) , CompleteExpression ) [EOL] assert Expression ( [string] ) . complete ( ) == CompleteExpression ( [string] ) [EOL] assert isinstance ( Expression ( [string] ) . complete ( ) , CompleteExpression ) [EOL] assert Expression ( [string] ) . complete ( ) == CompleteExpression ( [string] ) [EOL] assert isinstance ( Expression ( [string] ) . complete ( ) , CompleteExpression ) [EOL] [comment] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Expression ( [string] ) . complete ( ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] [EOL] def test_is_complete ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) . is_complete ( ) [EOL] assert Expression ( [string] ) . is_complete ( ) [EOL] assert Expression ( [string] ) . is_complete ( ) [EOL] [comment] [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] assert not Expression ( [string] ) . is_complete ( ) [EOL] [EOL] [comment] [EOL] def test_call ( self ) : [EOL] [comment] [EOL] assert_token ( Expression ( [string] ) , [ ] , [ [number] ] ) [EOL] assert_token ( Expression ( [string] ) , [ ] , [ [number] ] ) [EOL] assert_token ( Expression ( [string] ) , [ ] , [ [number] ] , { [string] : [number] } ) [EOL] [comment] [EOL] assert_token ( Expression ( [string] ) , [ ] , [ ] ) [EOL] assert_token ( Expression ( [string] ) , [ ] , [ ] ) [EOL] assert_token ( Expression ( [string] ) , [ [number] , [number] ] , [ ] ) [EOL] assert_token ( Expression ( [string] ) , [ [number] ] , [ [number] ] ) [EOL] assert_token ( Expression ( [string] ) , [ ] , [ [number] , [number] , [number] ] ) [EOL] assert_token ( Expression ( [string] ) , [ [number] , [number] ] , [ [number] , [number] , [number] ] , { [string] : [number] } ) [EOL] [EOL] def test_contains ( self ) : [EOL] [comment] [EOL] assert Literal ( [number] ) in Expression ( [string] ) [EOL] assert Variable ( [string] ) in Expression ( [string] ) [EOL] assert ADD in Expression ( [string] ) [EOL] [comment] [EOL] assert Literal ( [number] ) not in Expression ( [string] ) [EOL] assert Variable ( [string] ) not in Expression ( [string] ) [EOL] assert SUB not in Expression ( [string] ) [EOL] [comment] [EOL] assert [number] not in Expression ( [string] ) [EOL] assert [string] not in Expression ( [string] ) [EOL] [EOL] def test_getitem_int_index ( self ) : [EOL] expression = Expression ( [string] ) [EOL] assert expression [ [number] ] == ADD [EOL] assert expression [ [number] ] == Literal ( [number] ) [EOL] assert expression [ [number] ] == MUL [EOL] assert expression [ [number] ] == Variable ( [string] ) [EOL] assert expression [ [number] ] == DUP [EOL] with pytest . raises ( IndexError ) : [EOL] expression [ [number] ] [EOL] [EOL] def test_getitem_slice_index ( self ) : [EOL] expression = Expression ( [string] ) [EOL] assert expression [ : ] == expression [EOL] assert expression [ [number] : ] == Expression ( [string] ) [EOL] assert expression [ : - [number] ] == Expression ( [string] ) [EOL] assert expression [ : : [number] ] == Expression ( [string] ) [EOL] [EOL] def test_iter ( self ) : [EOL] assert [ t for t in Expression ( [string] ) ] == [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP , ] [EOL] [EOL] def test_len ( self ) : [EOL] [comment] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] [comment] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] assert len ( Expression ( [string] ) ) == [number] [EOL] [EOL] def test_ne ( self ) : [EOL] [comment] [EOL] assert not Expression ( [string] ) != Expression ( [ Literal ( [number] ) ] ) [EOL] assert not Expression ( [string] ) != Expression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] assert not Expression ( [string] ) != Expression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [comment] [EOL] assert not Expression ( [string] ) != Expression ( [ ] ) [EOL] assert not Expression ( [string] ) != Expression ( [ Literal ( [number] ) , POP ] ) [EOL] assert not Expression ( [string] ) != Expression ( [ POP , POP ] ) [EOL] assert not Expression ( [string] ) != Expression ( [ Literal ( [number] ) , ADD ] ) [EOL] assert not ( Expression ( [string] ) != Expression ( [ Literal ( [number] ) , Literal ( [number] ) , DUP ] ) ) [EOL] assert not ( Expression ( [string] ) != Expression ( [ ADD , Literal ( [number] ) , MUL , Variable ( [string] ) , DUP ] ) ) [EOL] [comment] [EOL] assert Expression ( [string] ) != [number] [EOL] [EOL] def test_ne_with_complete_expression ( self ) : [EOL] assert not Expression ( [string] ) != CompleteExpression ( [string] ) [EOL] assert not Expression ( [string] ) != CompleteExpression ( [string] ) [EOL] assert not Expression ( [string] ) != CompleteExpression ( [string] ) [EOL] [EOL] def test_add ( self ) : [EOL] [comment] [EOL] assert Expression ( [string] ) + Expression ( [string] ) == Expression ( [string] ) [EOL] assert isinstance ( Expression ( [string] ) + Expression ( [string] ) , CompleteExpression ) [EOL] assert Expression ( [string] ) + Expression ( [string] ) + Expression ( [string] ) == Expression ( [string] ) [EOL] assert isinstance ( Expression ( [string] ) + Expression ( [string] ) + Expression ( [string] ) , CompleteExpression ) [EOL] [comment] [EOL] assert Expression ( [string] ) + Expression ( [string] ) == Expression ( [string] ) [EOL] assert not isinstance ( Expression ( [string] ) + Expression ( [string] ) , CompleteExpression ) [EOL] [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] Expression ( [string] ) + [number] [EOL] with pytest . raises ( TypeError ) : [EOL] [number] + Expression ( [string] ) [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] Expression ( [string] ) + [string] [EOL] with pytest . raises ( TypeError ) : [EOL] [string] + Expression ( [string] ) [comment] [EOL] [EOL] def test_repr ( self ) : [EOL] [comment] [EOL] assert repr ( Expression ( [string] ) ) == [string] [EOL] assert ( repr ( Expression ( [string] ) ) == [string] ) [EOL] assert ( repr ( Expression ( [string] ) ) == [string] ) [EOL] [comment] [EOL] assert repr ( Expression ( [string] ) ) == [string] [EOL] assert repr ( Expression ( [string] ) ) == [string] [EOL] assert repr ( Expression ( [string] ) ) == [string] [EOL] assert repr ( Expression ( [string] ) ) == [string] [EOL] assert ( repr ( Expression ( [string] ) ) == [string] ) [EOL] assert ( repr ( Expression ( [string] ) ) == [string] ) [EOL] [EOL] def test_str ( self ) : [EOL] [comment] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] [comment] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] assert str ( Expression ( [string] ) ) == [string] [EOL] [EOL] [EOL] class TestCompleteExpression : [EOL] def test_init_with_token_sequence ( self ) : [EOL] CompleteExpression ( [ Literal ( [number] ) ] ) [EOL] CompleteExpression ( [ Literal ( [number] ) , Literal ( [number] ) , ADD ] ) [EOL] CompleteExpression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD ] ) [EOL] [EOL] def test_init_with_mixed_sequence ( self ) : [EOL] CompleteExpression ( [ [number] ] ) [EOL] CompleteExpression ( [ [number] , [number] , ADD ] ) [EOL] CompleteExpression ( [ [number] , [string] , ADD ] ) [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] , ADD ] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] , ADD ] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] def test_init_with_token_string ( self ) : [EOL] CompleteExpression ( [string] ) [EOL] CompleteExpression ( [string] ) [EOL] CompleteExpression ( [string] ) [EOL] [comment] [EOL] CompleteExpression ( [string] ) [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] def test_init_no_results_with_token_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD , POP ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_no_results_with_mixed_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] , ADD , POP ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_no_results_with_token_string ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_too_many_results_with_token_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ Literal ( [number] ) , Variable ( [string] ) ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ Literal ( [number] ) , Variable ( [string] ) , Literal ( [number] ) , ADD , DUP ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_too_many_results_with_mixed_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] , [number] , ADD , DUP ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_too_many_results_with_token_string ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] def test_init_stack_underflow_with_token_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ Literal ( [number] ) , ADD ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ Literal ( [number] ) , Variable ( [string] ) , ADD , POP , MUL ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] [EOL] def test_init_stack_underflow_with_mixed_sequence ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , ADD ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [ [number] , [string] , ADD , POP , MUL ] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] [EOL] def test_init_stack_underflow_with_token_string ( self ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] CompleteExpression ( [string] ) [EOL] assert str ( excinfo . value ) . splitlines ( ) == [ [string] [string] , [string] , [string] , ] [EOL] [EOL] def test_complete ( self ) : [EOL] [comment] [EOL] expression = CompleteExpression ( [string] ) [EOL] assert id ( expression . complete ( ) ) == id ( expression ) [EOL] [EOL] def test_eval ( self ) : [EOL] assert CompleteExpression ( [string] ) . eval ( ) == [number] [EOL] assert CompleteExpression ( [string] ) . eval ( ) == [number] [EOL] assert CompleteExpression ( [string] ) . eval ( { [string] : [number] } ) == [number] [EOL] [comment] [EOL] with pytest . raises ( KeyError ) : [EOL] CompleteExpression ( [string] ) . eval ( ) [EOL] [EOL] def test_eq_with_expresion ( self ) : [EOL] assert CompleteExpression ( [string] ) == Expression ( [string] ) [EOL] assert CompleteExpression ( [string] ) == Expression ( [string] ) [EOL] assert CompleteExpression ( [string] ) == Expression ( [string] ) [EOL] [EOL] def test_ne_with_expresion ( self ) : [EOL] assert not CompleteExpression ( [string] ) != Expression ( [string] ) [EOL] assert not CompleteExpression ( [string] ) != Expression ( [string] ) [EOL] assert not ( CompleteExpression ( [string] ) != Expression ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 $typing.MutableMapping[builtins.str,rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 $typing.MutableMapping[builtins.str,rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 $typing.MutableMapping[builtins.str,rads.typing.FloatOrArray]$ 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 $typing.MutableMapping[builtins.str,rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableSequence[rads.typing.FloatOrArray]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Nonedatetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 $builtins.float$ 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 $rads.rpn.Expression$ 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expression$ 0 0 0 0 0 0 0 0 0 0 0 0 $rads.rpn.Expressionrads.rpn.CompleteExpression$ 0 0 0 0 0 0 0 0 0 $rads.rpn.CompleteExpression$ 0 0 0 0 0 0 0 0 $rads.rpn.CompleteExpression$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import numpy as np [comment] [EOL] import pytest [comment] [EOL] [EOL] from rads . config . tree import MultiBitFlag , SingleBitFlag , SurfaceType [EOL] [EOL] [EOL] class TestSingleBitFlag : [EOL] def test_init ( self ) : [EOL] for bit in range ( [number] , [number] ) : [EOL] SingleBitFlag ( bit ) [EOL] with pytest . raises ( TypeError ) : [EOL] SingleBitFlag ( [number] ) [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] SingleBitFlag ( - [number] ) [EOL] [EOL] def test_bit ( self ) : [EOL] for bit in range ( [number] , [number] ) : [EOL] assert SingleBitFlag ( bit ) . bit == bit [EOL] [EOL] def test_extract_with_value ( self ) : [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] assert not SingleBitFlag ( [number] ) . extract ( [number] ) [EOL] [EOL] def test_extract_with_array ( self ) : [EOL] np . testing . assert_equal ( SingleBitFlag ( [number] ) . extract ( np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ) , np . array ( [ False , True , False , True , False ] ) , ) [EOL] np . testing . assert_equal ( SingleBitFlag ( [number] ) . extract ( np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) ) , np . array ( [ False , False , True , True , False ] ) , ) [EOL] [EOL] [EOL] class TestMutiBitFlag : [EOL] def test_init ( self ) : [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] MultiBitFlag ( bit , length ) [EOL] with pytest . raises ( TypeError ) : [EOL] MultiBitFlag ( [number] , [number] ) [comment] [EOL] with pytest . raises ( TypeError ) : [EOL] MultiBitFlag ( [number] , [number] ) [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] MultiBitFlag ( - [number] , [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] MultiBitFlag ( [number] , [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] MultiBitFlag ( [number] , - [number] ) [EOL] [EOL] def test_bit ( self ) : [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] assert MultiBitFlag ( bit , length ) . bit == bit [EOL] [EOL] def test_length ( self ) : [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] assert MultiBitFlag ( bit , length ) . length == length [EOL] [EOL] def test_extract_with_value ( self ) : [EOL] [comment] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] [comment] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] assert MultiBitFlag ( [number] , [number] ) . extract ( [number] ) == [number] [EOL] [comment] [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] assert MultiBitFlag ( bit , length ) . extract ( [number] ) == [number] [EOL] [comment] [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] assert MultiBitFlag ( bit , length ) . extract ( [number] ** [number] - [number] ) == ( [number] ** [number] - [number] ) >> ( [number] - length ) [EOL] [EOL] def test_extract_with_array ( self ) : [EOL] input = np . array ( [ [number] , [number] ** [number] - [number] ] , dtype = np . uint64 ) [EOL] for bit in range ( [number] , [number] ) : [EOL] for length in range ( [number] , [number] - bit ) : [EOL] result = MultiBitFlag ( bit , length ) . extract ( input ) [EOL] expected = np . array ( [ [number] , ( [number] ** [number] - [number] ) >> ( [number] - length ) ] , dtype = np . uint64 ) [EOL] np . testing . assert_equal ( result , expected ) [EOL] assert isinstance ( result , ( np . generic , np . ndarray ) ) [EOL] if length <= [number] : [EOL] assert result . dtype == np . uint8 [EOL] elif length <= [number] : [EOL] assert result . dtype == np . uint16 [EOL] elif length <= [number] : [EOL] assert result . dtype == np . uint32 [EOL] else : [comment] [EOL] assert result . dtype == np . uint64 [EOL] [EOL] [EOL] class TestSurfaceType : [EOL] def test_init ( self ) : [EOL] SurfaceType ( ) [EOL] [EOL] def test_extract_with_value ( self ) : [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] assert SurfaceType ( ) . extract ( [number] ) == [number] [comment] [EOL] [EOL] def test_extract_with_array ( self ) : [EOL] input = np . array ( [ [number] , [number] , [number] , [number] ] , dtype = np . int64 ) [EOL] np . testing . assert_equal ( SurfaceType ( ) . extract ( input ) , [ [number] , [number] , [number] , [number] ] ) [EOL] [comment] [EOL] input = np . array ( [ [number] , [number] , [number] ] , dtype = np . int64 ) [EOL] np . testing . assert_equal ( SurfaceType ( ) . extract ( input ) , [ [number] , [number] , [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [comment] [EOL] [EOL] from rads . config . ast import append , delete , edit_append , merge , replace [EOL] from rads . config . utility import parse_action [EOL] from rads . config . xml_parsers import TerminalXMLParseError [EOL] [EOL] [EOL] def test_parse_action_replace_is_default ( mocker ) : [EOL] m = mocker . Mock ( attributes = { } ) [EOL] assert parse_action ( m ) == replace [EOL] [EOL] [EOL] def test_parse_action_replace ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] assert parse_action ( m ) == replace [EOL] [EOL] [EOL] def test_parse_action_append ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] assert parse_action ( m ) == append [EOL] [EOL] [EOL] def test_parse_action_delete ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] assert parse_action ( m ) == delete [EOL] [EOL] [EOL] def test_parse_action_merge ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] assert parse_action ( m ) == merge [EOL] [EOL] [EOL] def test_parse_action_invalid ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] with pytest . raises ( TerminalXMLParseError ) : [EOL] parse_action ( m ) [EOL] [EOL] [EOL] def test_parse_action_edit_append ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] assert parse_action ( m ) == edit_append [EOL] [EOL] [EOL] def test_parse_action_invalid_edit ( mocker ) : [EOL] m = mocker . Mock ( attributes = { [string] : [string] } ) [EOL] with pytest . raises ( TerminalXMLParseError ) : [EOL] parse_action ( m ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Mapping , Callable [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import numpy as np [comment] [EOL] import pytest [comment] [EOL] from cf_units import Unit [comment] [EOL] [EOL] from rads . config . text_parsers import ( TerminalTextParseError , TextParseError , compress , cycles , data , lift , list_of , nop , one_of , range_of , ref_pass , repeat , time , unit , ) [EOL] from rads . config . tree import ( Compress , Constant , Cycles , Flags , Grid , MultiBitFlag , NetCDFAttribute , NetCDFVariable , Range , ReferencePass , Repeat , SingleBitFlag , SurfaceType , ) [EOL] from rads . rpn import Expression [EOL] [EOL] [EOL] def test_exceptions ( ) : [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) : [EOL] raise TextParseError [EOL] [EOL] [EOL] def test_lift ( ) : [EOL] assert lift ( str ) ( [string] , { } ) == [string] [EOL] assert lift ( int ) ( [string] , { } ) == [number] [EOL] assert lift ( float ) ( [string] , { } ) == [number] [EOL] with pytest . raises ( TextParseError ) : [EOL] lift ( float ) ( [string] , { } ) [EOL] with pytest . raises ( TerminalTextParseError ) : [EOL] lift ( float , terminal = True ) ( [string] , { } ) [EOL] assert lift ( int ) . _lifted == [string] [comment] [EOL] [EOL] [EOL] def test_list_of ( mocker ) : [EOL] assert list_of ( lift ( int ) ) ( [string] , { } ) == [ [number] , [number] , [number] , [number] , [number] ] [EOL] assert list_of ( lift ( int ) ) ( [string] , { } ) == [ [number] , [number] , [number] , [number] , [number] ] [EOL] assert list_of ( lift ( int ) ) ( [string] , { } ) == [ ] [EOL] m = mocker . Mock ( ) [EOL] m . return_value = [number] [EOL] list_of ( m ) ( [string] , { [string] : [string] } ) [EOL] assert m . call_count == [number] [EOL] m . assert_any_call ( [string] , { [string] : [string] } ) [EOL] m . assert_any_call ( [string] , { [string] : [string] } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] list_of ( lift ( int ) ) ( [string] , { } ) [EOL] with pytest . raises ( TerminalTextParseError ) : [EOL] list_of ( lift ( int ) , terminal = True ) ( [string] , { } ) [EOL] [EOL] [EOL] def test_range_of ( mocker ) : [EOL] assert range_of ( lift ( int ) ) ( [string] , { } ) == Range ( [number] , [number] ) [EOL] assert range_of ( lift ( float ) ) ( [string] , { } ) == Range ( [number] , [number] ) [EOL] assert range_of ( lift ( int ) ) ( [string] , { } ) == Range ( [number] , [number] ) [EOL] m = mocker . Mock ( ) [EOL] range_of ( m ) ( [string] , { [string] : [string] } ) [EOL] assert m . call_count == [number] [EOL] m . assert_any_call ( [string] , { [string] : [string] } ) [EOL] m . assert_any_call ( [string] , { [string] : [string] } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] range_of ( lift ( int ) ) ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] range_of ( lift ( int ) ) ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] range_of ( lift ( int ) ) ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] range_of ( lift ( int ) ) ( [string] , { } ) [EOL] with pytest . raises ( TerminalTextParseError ) : [EOL] range_of ( lift ( int ) , terminal = True ) ( [string] , { } ) [EOL] [EOL] [EOL] def test_one_of ( mocker ) : [EOL] int_float_str = one_of ( ( lift ( int ) , lift ( float ) , lift ( str ) ) ) [EOL] assert int_float_str ( [string] , { } ) == [number] [EOL] assert type ( int_float_str ( [string] , { } ) ) == int [EOL] assert int_float_str ( [string] , { } ) == [number] [EOL] assert type ( int_float_str ( [string] , { } ) ) == float [EOL] assert int_float_str ( [string] , { } ) == [string] [EOL] assert type ( int_float_str ( [string] , { } ) ) == str [EOL] m1 = mocker . Mock ( ) [EOL] m2 = mocker . Mock ( ) [EOL] one_of ( ( m1 , m2 ) ) ( [string] , { [string] : [string] } ) [EOL] m1 . assert_called_once_with ( [string] , { [string] : [string] } ) [EOL] assert m2 . call_count == [number] [EOL] with pytest . raises ( TextParseError ) : [EOL] one_of ( ( lift ( int ) , lift ( float ) ) ) ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] one_of ( ( time , ) ) ( [string] , { } ) [EOL] with pytest . raises ( TerminalTextParseError ) : [EOL] one_of ( ( time , ) , terminal = True ) ( [string] , { } ) [EOL] [EOL] [EOL] def test_compress ( ) : [EOL] assert compress ( [string] , { } ) == Compress ( np . int8 ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int16 ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 ) [EOL] assert compress ( [string] , { } ) == Compress ( np . float32 ) [EOL] assert compress ( [string] , { } ) == Compress ( np . float64 ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] , [number] ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] , [number] ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] , [number] ) [EOL] assert compress ( [string] , { } ) == Compress ( np . int32 , [number] , [number] ) [EOL] with pytest . raises ( TextParseError ) : [EOL] compress ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] compress ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] compress ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] compress ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] compress ( [string] , { } ) [EOL] [EOL] [EOL] def test_cycles ( ) : [EOL] assert cycles ( [string] , { } ) == Cycles ( [number] , [number] ) [EOL] assert cycles ( [string] , { } ) == Cycles ( [number] , [number] ) [EOL] with pytest . raises ( TextParseError ) : [EOL] cycles ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] cycles ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] cycles ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] cycles ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] cycles ( [string] , { } ) [EOL] [EOL] [EOL] def test_data_as_constant ( ) : [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] } ) == Constant ( [number] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Constant ( [number] ) [EOL] [comment] [EOL] assert data ( [string] , { } ) == Constant ( [number] ) [EOL] assert data ( [string] , { } ) == Constant ( [number] ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , Constant ) [EOL] assert not isinstance ( data ( [string] , { } ) , Constant ) [EOL] assert not isinstance ( data ( [string] , { } ) , Constant ) [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [EOL] [EOL] def test_data_as_flags ( ) : [EOL] assert data ( [string] , { [string] : [string] } ) == SingleBitFlag ( [number] ) [EOL] assert data ( [string] , { [string] : [string] } ) == MultiBitFlag ( [number] , [number] ) [EOL] assert data ( [string] , { [string] : [string] } ) == SurfaceType ( ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , Flags ) [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [EOL] [EOL] def test_data_as_grid ( ) : [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] [comment] [EOL] assert data ( [string] , { } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == Grid ( [string] , [string] , [string] , [string] ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , Grid ) [EOL] assert not isinstance ( data ( [string] , { } ) , Grid ) [EOL] assert not isinstance ( data ( [string] , { } ) , Grid ) [EOL] [EOL] [EOL] def test_data_as_math ( ) : [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] } ) == Expression ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Expression ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Expression ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Expression ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == Expression ( [string] ) [EOL] [comment] [EOL] assert data ( [string] , { } ) == Expression ( [string] ) [EOL] assert data ( [string] , { } ) == Expression ( [string] ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , Expression ) [EOL] assert not isinstance ( data ( [string] , { } ) , Expression ) [EOL] assert not isinstance ( data ( [string] , { } ) , Expression ) [EOL] assert not isinstance ( data ( [string] , { } ) , Expression ) [EOL] assert not isinstance ( data ( [string] , { } ) , Expression ) [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [EOL] [EOL] def test_data_as_netcdf ( ) : [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFVariable ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFVariable ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] ) [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFVariable ( [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFVariable ( [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFAttribute ( [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFAttribute ( [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFAttribute ( [string] , branch = [string] ) [EOL] assert data ( [string] , { [string] : [string] , [string] : [string] } ) == NetCDFAttribute ( [string] , branch = [string] ) [EOL] [comment] [EOL] assert data ( [string] , { } ) == NetCDFVariable ( [string] ) [EOL] assert data ( [string] , { } ) == NetCDFAttribute ( [string] , [string] ) [EOL] assert data ( [string] , { } ) == NetCDFAttribute ( [string] ) [EOL] [comment] [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFVariable ( [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] , [string] , [string] ) [EOL] assert data ( [string] , { [string] : [string] } ) == NetCDFAttribute ( [string] , branch = [string] ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFVariable ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFVariable ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFVariable ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFVariable ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFVariable ) [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFAttribute ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFAttribute ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFAttribute ) [EOL] assert not isinstance ( data ( [string] , { } ) , NetCDFAttribute ) [EOL] [comment] [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { [string] : [string] } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [comment] [EOL] assert not isinstance ( data ( [string] , { [string] : [string] } ) , NetCDFVariable ) [EOL] assert not isinstance ( data ( [string] , { [string] : [string] } ) , NetCDFAttribute ) [EOL] [EOL] [EOL] def test_data_with_invalid ( ) : [EOL] with pytest . raises ( TerminalTextParseError ) as exc_info : [EOL] data ( [string] , { } ) [EOL] assert exc_info . type is TerminalTextParseError [EOL] [EOL] [EOL] def test_nop ( ) : [EOL] assert nop ( [string] , { } ) == [string] [EOL] [EOL] [EOL] def test_ref_pass ( ) : [EOL] assert ref_pass ( [string] , { } ) == ReferencePass ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , - [number] , [number] , [number] ) [EOL] assert ref_pass ( [string] , { } ) == ReferencePass ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , - [number] , [number] , [number] , [number] ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] ref_pass ( [string] , { } ) [EOL] [EOL] [EOL] def test_repeat ( ) : [EOL] assert repeat ( [string] , { } ) == Repeat ( [number] , [number] ) [EOL] assert repeat ( [string] , { } ) == Repeat ( [number] , [number] , [number] ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] [comment] [EOL] with pytest . raises ( TextParseError ) : [EOL] repeat ( [string] , { } ) [EOL] [EOL] [EOL] def test_time ( ) : [EOL] assert time ( [string] , { } ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert time ( [string] , { } ) == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert time ( [string] , { } ) == datetime ( [number] , [number] , [number] , [number] ) [EOL] assert time ( [string] , { } ) == datetime ( [number] , [number] , [number] ) [EOL] assert time ( [string] , { } ) == datetime ( [number] , [number] , [number] ) [EOL] with pytest . raises ( TextParseError ) : [EOL] time ( [string] , { } ) [EOL] with pytest . raises ( TextParseError ) : [EOL] time ( [string] , { } ) [EOL] [EOL] [EOL] def test_unit ( ) : [EOL] assert unit ( [string] , { } ) == Unit ( [string] ) [EOL] assert unit ( [string] , { } ) == Unit ( [string] ) [EOL] assert unit ( [string] , { } ) == Unit ( [string] ) [EOL] assert unit ( [string] , { } ) == Unit ( [string] ) [EOL] with pytest . raises ( TextParseError ) : [EOL] unit ( [string] , { } ) [EOL]	
from typing import List , Any [EOL] import rads [EOL] import io [EOL] import typing [EOL] import io [EOL] from textwrap import dedent [EOL] [EOL] import pytest [comment] [EOL] [EOL] from rads . xml import ParseError [EOL] from rads . xml . utility import ( fromstring , fromstringlist , parse , rads_fixer , rootless_fixer , strip_blanklines , strip_comments , strip_processing_instructions , ) [EOL] [EOL] [EOL] def test_strip_comments_single_line_comments ( ) : [EOL] xml = [string] [EOL] assert strip_comments ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_strip_comments_inline_comments ( ) : [EOL] xml = [string] [EOL] assert strip_comments ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] [EOL] def test_strip_comments_multiline_comments ( ) : [EOL] xml = [string] [EOL] assert strip_comments ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] [EOL] def test_strip_processing_instructions ( ) : [EOL] xml = [string] [EOL] assert strip_processing_instructions ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] [EOL] def test_strip_blanklines ( ) : [EOL] xml = [string] [comment] [EOL] assert strip_blanklines ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , ] [EOL] [EOL] [EOL] def test_rads_fixer ( ) : [EOL] xml = [string] [EOL] assert rads_fixer ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_rootless_fixer ( ) : [EOL] xml = [string] [EOL] assert rootless_fixer ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_rootless_fixer_with_empty_file ( ) : [EOL] xml = [string] [EOL] assert rootless_fixer ( dedent ( xml ) ) . splitlines ( ) == [ [string] , [string] , [string] , [string] , ] [EOL] assert rootless_fixer ( dedent ( xml ) , preserve_empty = False ) . splitlines ( ) == [ [string] , [string] , [string] , [string] , ] [EOL] assert ( rootless_fixer ( dedent ( xml ) , preserve_empty = True ) . splitlines ( ) == dedent ( xml ) . splitlines ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_fromstring ( ) : [EOL] xml = [string] [EOL] root = fromstring ( dedent ( xml ) ) [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL] [EOL] [EOL] def test_fromstring_with_file ( ) : [EOL] xml = [string] [EOL] root = fromstring ( dedent ( xml ) , file = [string] ) [EOL] assert root . file == [string] [EOL] [EOL] [EOL] def test_fromstring_with_empty_xml ( ) : [EOL] [comment] [EOL] xml = [string] [EOL] with pytest . raises ( ParseError ) : [EOL] fromstring ( dedent ( xml ) ) [EOL] [EOL] [EOL] def test_fromstring_with_empty_xml_and_file ( ) : [EOL] [comment] [EOL] xml = [string] [EOL] with pytest . raises ( ParseError ) as exc_info : [EOL] fromstring ( dedent ( xml ) , file = [string] ) [EOL] assert exc_info . value . filename == [string] [EOL] [EOL] [EOL] def test_fromstring_with_fixer ( ) : [EOL] xml = [string] [EOL] [EOL] def fixer ( text ) : [EOL] return text . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] root = fromstring ( dedent ( xml ) , fixer = fixer ) [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL] [EOL] [EOL] def test_fromstringlist ( ) : [EOL] xml = [ [string] , [string] , [string] , [string] , ] [EOL] root = fromstringlist ( xml ) [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL] [EOL] [EOL] def test_fromstringlist_with_file ( ) : [EOL] xml = [ [string] ] [EOL] root = fromstringlist ( xml , file = [string] ) [EOL] assert root . file == [string] [EOL] [EOL] [EOL] def test_fromstringlist_with_empty_xml ( ) : [EOL] [comment] [EOL] xml = [ [string] , [string] ] [EOL] with pytest . raises ( ParseError ) : [EOL] fromstringlist ( xml ) [EOL] [EOL] [EOL] def test_fromstringlist_with_empty_xml_and_file ( ) : [EOL] [comment] [EOL] xml = [ [string] , [string] ] [EOL] with pytest . raises ( ParseError ) as exc_info : [EOL] fromstringlist ( xml , file = [string] ) [EOL] assert exc_info . value . filename == [string] [EOL] [EOL] [EOL] def test_fromstringlist_with_fixer ( ) : [EOL] xml = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] def fixer ( text ) : [EOL] return text . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] root = fromstringlist ( xml , fixer = fixer ) [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test_parse ( ) : [EOL] xml = [string] [EOL] file = io . StringIO ( dedent ( xml ) ) [EOL] file . name = [string] [EOL] root = parse ( file ) [EOL] assert root . file == [string] [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL] [EOL] [EOL] def test_parse_with_empty_file ( ) : [EOL] [comment] [EOL] xml = [string] [EOL] file = io . StringIO ( dedent ( xml ) ) [EOL] file . name = [string] [EOL] with pytest . raises ( ParseError ) as exc_info : [EOL] parse ( file ) [EOL] assert exc_info . value . filename == [string] [EOL] [EOL] [EOL] def test_parse_with_fixer ( ) : [EOL] xml = [string] [EOL] [EOL] file = io . StringIO ( dedent ( xml ) ) [EOL] file . name = [string] [EOL] [EOL] def fixer ( text ) : [EOL] return text . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] root = parse ( file , fixer = fixer ) [EOL] assert root . tag == [string] [EOL] assert root . down ( ) . tag == [string] [EOL] assert root . down ( ) . text == [string] [EOL] assert root . down ( ) . next ( ) . tag == [string] [EOL] assert root . down ( ) . next ( ) . text == [string] [EOL]	
	0
from typing import List , Any , Type [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] from typing import IO , TYPE_CHECKING , Any , Union [EOL] [EOL] import numpy as np [comment] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] if TYPE_CHECKING : [EOL] PathLike = Union [ str , os . PathLike [ str ] ] [EOL] PathOrFile = Union [ os . PathLike [ str ] , IO [ Any ] ] [EOL] else : [EOL] PathLike = Union [ str , os . PathLike ] [EOL] PathOrFile = Union [ os . PathLike , IO [ Any ] ] [EOL] [EOL] PathLikeOrFile = Union [ PathLike , IO [ Any ] ] [EOL] [EOL] IntOrArray = Union [ int , np . generic , np . ndarray ] [EOL] FloatOrArray = Union [ float , np . generic , np . ndarray ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from . __version__ import __version__ [EOL] from . config . loader import config_files , get_dataroot , load_config [EOL] from . constants import EPOCH [EOL] from . logging import log [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Optional , List [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import logging [EOL] from logging import CRITICAL , DEBUG , ERROR , INFO , WARNING [EOL] from typing import Optional , Union [EOL] [EOL] from . typing import PathLike [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] log = logging . getLogger ( __name__ . split ( [string] ) [ [number] ] ) [EOL] [docstring] [EOL] [EOL] [EOL] def configure_logging ( level , file = None ) : [EOL] [docstring] [EOL] for handler in log . handlers : [EOL] log . removeHandler ( handler ) [EOL] [EOL] if file : [EOL] handler = logging . FileHandler ( str ( file ) ) [EOL] else : [EOL] handler = logging . StreamHandler ( ) [EOL] formatter = logging . Formatter ( [string] , datefmt = [string] ) [EOL] handler . setFormatter ( formatter ) [EOL] log . addHandler ( handler ) [EOL] log . setLevel ( level ) [EOL] [EOL] [EOL] [comment] [EOL] configure_logging ( WARNING ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Optional , IO [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import datetime [EOL] import io [EOL] import os [EOL] from typing import IO , Any , List , Optional , Union , cast [EOL] [EOL] from wrapt import ObjectProxy [comment] [EOL] [EOL] from . constants import EPOCH [EOL] from . typing import PathLike , PathLikeOrFile [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class _NoCloseIOWrapper ( ObjectProxy ) : [comment] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def close ( self ) : [EOL] pass [EOL] [EOL] [EOL] def ensure_open ( file , mode = [string] , buffering = - [number] , encoding = None , errors = None , newline = None , closefd = True , closeio = False , ) : [EOL] [docstring] [EOL] if hasattr ( file , [string] ) : [EOL] if not closeio : [EOL] return cast ( IO [ Any ] , _NoCloseIOWrapper ( file ) ) [EOL] return cast ( IO [ Any ] , file ) [EOL] return open ( cast ( Union [ PathLike , int ] , file ) , mode , buffering , encoding , errors , newline , closefd , ) [EOL] [EOL] [EOL] def filestring ( file ) : [EOL] [docstring] [EOL] if isinstance ( file , int ) : [EOL] return None [EOL] if hasattr ( file , [string] ) : [EOL] try : [EOL] return cast ( IO [ Any ] , file ) . name [EOL] except AttributeError : [EOL] return None [EOL] if not isinstance ( file , ( str , bytes ) ) : [EOL] file = os . fspath ( cast ( PathLike , file ) ) [EOL] if isinstance ( file , str ) : [EOL] return file [EOL] if isinstance ( file , bytes ) : [EOL] try : [EOL] return cast ( bytes , file ) . decode ( [string] ) [EOL] except UnicodeDecodeError : [EOL] return None [EOL] raise TypeError ( f" [string] { type ( file ) } [string] " ) [EOL] [EOL] [EOL] def isio ( obj , * , read = False , write = False ) : [EOL] [docstring] [EOL] if read or write : [EOL] return ( not read or hasattr ( obj , [string] ) ) and ( not write or hasattr ( obj , [string] ) ) [EOL] return isinstance ( obj , io . IOBase ) [EOL] [EOL] [EOL] def xor ( a , b ) : [EOL] [docstring] [EOL] return ( a and not b ) or ( not a and b ) [EOL] [EOL] [EOL] def contains_sublist ( list_ , sublist ) : [EOL] [docstring] [EOL] [comment] [EOL] if not sublist : [EOL] return False [EOL] for i in range ( len ( list_ ) ) : [EOL] if list_ [ i ] == sublist [ [number] ] and list_ [ i : i + len ( sublist ) ] == sublist : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def merge_sublist ( list_ , sublist ) : [EOL] [docstring] [EOL] if contains_sublist ( list_ , sublist ) : [EOL] return list_ [ : ] [EOL] return list_ + sublist [EOL] [EOL] [EOL] def delete_sublist ( list_ , sublist ) : [EOL] [docstring] [EOL] if not sublist : [EOL] return list_ [ : ] [EOL] for i in range ( len ( list_ ) ) : [EOL] if list_ [ i ] == sublist [ [number] ] and list_ [ i : i + len ( sublist ) ] == sublist : [EOL] return list_ [ : i ] + list_ [ i + len ( sublist ) : ] [EOL] return list_ [ : ] [EOL] [EOL] [EOL] def fortran_float ( string ) : [EOL] [docstring] [EOL] try : [EOL] return float ( string ) [EOL] except ValueError as err : [EOL] try : [EOL] return float ( string . replace ( [string] , [string] ) . replace ( [string] , [string] ) ) [EOL] except ValueError : [EOL] try : [EOL] return float ( string . replace ( [string] , [string] ) . replace ( [string] , [string] ) ) [EOL] except ValueError : [EOL] raise err [EOL] [EOL] [EOL] def datetime_to_timestamp ( time , * , epoch = EPOCH ) : [EOL] [docstring] [EOL] return ( time - epoch ) . total_seconds ( ) [EOL] [EOL] [EOL] def timestamp_to_datetime ( seconds , * , epoch = EPOCH ) : [EOL] [docstring] [EOL] return epoch + datetime . timedelta ( seconds = seconds ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $builtins.object$ 0 0 $builtins.object$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] [EOL] from typing import Tuple [EOL] [EOL] import numpy as np [comment] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def year ( datetime64 ) : [EOL] [docstring] [EOL] [comment] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) + [number] [EOL] [EOL] [EOL] def month ( datetime64 ) : [EOL] [docstring] [EOL] [comment] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) % [number] + [number] [EOL] [EOL] [EOL] def day ( datetime64 ) : [EOL] [docstring] [EOL] [comment] [EOL] return ( datetime64 . astype ( [string] ) - datetime64 . astype ( [string] ) ) . astype ( int ) + [number] [EOL] [EOL] [EOL] def hour ( datetime64 ) : [EOL] [docstring] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] [EOL] [EOL] def minute ( datetime64 ) : [EOL] [docstring] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] [EOL] [EOL] def second ( datetime64 ) : [EOL] [docstring] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] [EOL] [EOL] def microsecond ( datetime64 ) : [EOL] [docstring] [EOL] return datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] [EOL] [EOL] def ymdhmsus ( datetime64 , ) : [EOL] [docstring] [EOL] [comment] [EOL] year = datetime64 . astype ( [string] ) . astype ( int ) + [number] [EOL] month_ = datetime64 . astype ( [string] ) [EOL] month = month_ . astype ( int ) % [number] + [number] [EOL] day = ( datetime64 . astype ( [string] ) - month_ ) . astype ( int ) + [number] [EOL] hour = datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] minute = datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] second = datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] microsecond = datetime64 . astype ( [string] ) . astype ( int ) % [number] [EOL] return year , month , day , hour , minute , second , microsecond [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[numpy.generic,numpy.generic,numpy.generic,numpy.generic,numpy.generic,numpy.generic,numpy.generic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] [EOL] from pathlib import Path [EOL] [EOL] from appdirs import AppDirs , system [comment] [EOL] [EOL] from . typing import PathLike [EOL] [EOL] _APPNAME = [string] [EOL] _APPDIRS = AppDirs ( _APPNAME , appauthor = False , roaming = False ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def rads_xml ( dataroot ) : [EOL] [docstring] [EOL] return Path ( dataroot ) / [string] / [string] [EOL] [EOL] [EOL] def site_config ( ) : [EOL] [docstring] [EOL] if system in ( [string] , [string] ) : [EOL] return Path ( _APPDIRS . site_config_dir ) [EOL] [comment] [EOL] return Path ( [string] ) / _APPNAME / [string] [EOL] [EOL] [EOL] def user_xml ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) . expanduser ( ) [EOL] [EOL] [EOL] def user_config ( ) : [EOL] [docstring] [EOL] return Path ( _APPDIRS . user_config_dir ) / [string] [EOL] [EOL] [EOL] def local_xml ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] def local_config ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Union , Optional , List [EOL] import typing [EOL] import builtins [EOL] import typing_extensions [EOL] [docstring] [EOL] [EOL] from typing import Optional [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class RADSError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ConfigError ( RADSError ) : [EOL] [docstring] [EOL] [EOL] message = ... [EOL] [docstring] [EOL] line = None [EOL] [docstring] [EOL] file = None [EOL] [docstring] [EOL] original_exception = None [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message , line = None , file = None , * , original = None , ) : [EOL] [docstring] [EOL] if line is not None : [EOL] self . line = line [EOL] if file : [EOL] self . file = file [EOL] if original is not None : [EOL] self . original_exception = original [EOL] if file or line : [EOL] file_ = self . file if self . file else [string] [EOL] line_ = self . line if self . line is not None else [string] [EOL] super ( ) . __init__ ( f"{ file_ } [string] { line_ } [string] { message }" ) [EOL] else : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class InvalidDataroot ( RADSError ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.Exception]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Union[typing_extensions.Literal,None,builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from dataclass_builder import dataclass_builder [EOL] [EOL] from . tree import Phase , PreConfig , Satellite , Variable [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] SatelliteBuilder = dataclass_builder ( Satellite ) [EOL] [EOL] PhaseBuilder = dataclass_builder ( Phase ) [EOL] [EOL] VariableBuilder = dataclass_builder ( Variable ) [EOL] [EOL] PreConfigBuilder = dataclass_builder ( PreConfig ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import NoReturn , Tuple , MutableSequence , Union , Any , Optional , Callable , Collection , Sequence , List , Type [EOL] import rads [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import typing [EOL] from abc import ABC , abstractmethod [EOL] from typing import ( Any , Callable , Collection , List , MutableSequence , NoReturn , Optional , Tuple , Union , cast , ) [EOL] [EOL] import yzal [EOL] [EOL] from rads . xml . base import Element [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class TerminalXMLParseError ( Exception ) : [EOL] [docstring] [EOL] [EOL] file = None [EOL] [docstring] [EOL] line = None [EOL] [docstring] [EOL] message = [string] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , file , line , message = None ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ) [EOL] self . file = file [EOL] self . line = line [EOL] if message is not None : [EOL] self . message = message [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] file = self . file if self . file else [string] [EOL] line = str ( self . line ) if self . line else [string] [EOL] return f"{ file } [string] { line } [string] { self . message }" [EOL] [EOL] [EOL] class XMLParseError ( TerminalXMLParseError ) : [EOL] [docstring] [EOL] [EOL] def terminal ( self , message = None ) : [EOL] [docstring] [EOL] if message : [EOL] return TerminalXMLParseError ( self . file , self . line , message ) [EOL] return TerminalXMLParseError ( self . file , self . line , self . message ) [EOL] [EOL] [EOL] @ yzal . lazy def next_element ( pos ) : [EOL] [docstring] [EOL] try : [EOL] return pos . next ( ) [comment] [EOL] except StopIteration : [EOL] raise XMLParseError ( pos . file , pos . closing_line , [string] ) [EOL] [EOL] [EOL] @ yzal . lazy def first_child ( pos ) : [EOL] [docstring] [EOL] try : [EOL] return pos . down ( ) [EOL] except StopIteration : [EOL] raise XMLParseError ( pos . file , pos . opening_line , f" [string] { pos . tag } [string] " ) [EOL] [EOL] [EOL] class Parser ( ABC ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def __call__ ( self , position ) : [EOL] [docstring] [EOL] [EOL] def __add__ ( self , other ) : [EOL] [docstring] [EOL] return Sequence ( self , other ) [EOL] [EOL] def __or__ ( self , other ) : [EOL] [docstring] [EOL] return Alternate ( self , other ) [EOL] [EOL] def __xor__ ( self , func ) : [EOL] [docstring] [EOL] return Apply ( self , func ) [EOL] [EOL] def __invert__ ( self ) : [EOL] [docstring] [EOL] return Not ( self ) [EOL] [EOL] def __lshift__ ( self , message ) : [EOL] [docstring] [EOL] return Must ( self , message ) [EOL] [EOL] [EOL] class Apply ( Parser ) : [EOL] [docstring] [EOL] [EOL] _catch = None [EOL] [EOL] def __init__ ( self , parser , func , catch = None , ) : [EOL] [docstring] [EOL] self . _parser = parser [EOL] self . _function = func [EOL] if catch : [EOL] if isinstance ( catch , type ) : [EOL] self . _catch = cast ( type , catch ) [EOL] else : [EOL] self . _catch = tuple ( catch ) [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] value , position = self . _parser ( position ) [EOL] if not self . _catch : [EOL] return self . _function ( value ) , position [EOL] try : [EOL] return self . _function ( value ) , position [EOL] except Exception as err : [EOL] if not isinstance ( err , self . _catch ) : [EOL] raise [comment] [EOL] raise XMLParseError ( position . file , position . opening_line , str ( err ) ) from err [EOL] [EOL] [EOL] class Lazy ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , parser_func ) : [EOL] [docstring] [EOL] self . _parser_func = parser_func [EOL] self . _parser = None [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] if self . _parser is None : [EOL] self . _parser = self . _parser_func ( ) [EOL] return self . _parser ( position ) [EOL] [EOL] [EOL] class Must ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , parser , message = None ) : [EOL] [docstring] [EOL] self . _parser = parser [EOL] self . _message = message [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] try : [EOL] return self . _parser ( position ) [EOL] except XMLParseError as err : [EOL] raise err . terminal ( self . _message ) [EOL] [EOL] [EOL] class At ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , parser ) : [EOL] [docstring] [EOL] self . _parser = parser [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] value , _ = self . _parser ( position ) [EOL] return value , position [EOL] [EOL] [EOL] class Not ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , parser ) : [EOL] [docstring] [EOL] self . _parser = parser [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] try : [EOL] self . _parser ( position ) [EOL] except XMLParseError : [EOL] return None , position [EOL] raise XMLParseError ( position . file , position . opening_line ) [EOL] [EOL] [EOL] class Repeat ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , parser ) : [EOL] [docstring] [EOL] self . _parser = parser [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] values = [ ] [EOL] try : [EOL] while True : [comment] [EOL] value , position = self . _parser ( position ) [EOL] values . append ( value ) [EOL] except XMLParseError : [EOL] pass [comment] [EOL] return values , position [EOL] [EOL] [EOL] class _MultiParser ( Parser , ABC ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , subtype , * parsers ) : [EOL] [docstring] [EOL] assert issubclass ( subtype , _MultiParser ) [EOL] self . _subtype = subtype [EOL] self . _parsers = [ ] [EOL] for parser in parsers : [EOL] if isinstance ( parser , subtype ) : [EOL] self . _parsers . extend ( parser . _parsers ) [EOL] else : [EOL] self . _parsers . append ( parser ) [EOL] [EOL] def _append ( self , other ) : [EOL] if isinstance ( other , self . _subtype ) : [EOL] self . _parsers . extend ( other . _parsers ) [EOL] else : [EOL] self . _parsers . append ( other ) [EOL] [EOL] [EOL] class Sequence ( _MultiParser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * parsers ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( Sequence , * parsers ) [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] values = [ ] [EOL] for parser in self . _parsers : [EOL] value , position = parser ( position ) [EOL] values . append ( value ) [EOL] return values , position [EOL] [EOL] def __add__ ( self , other ) : [EOL] [docstring] [EOL] return Sequence ( * self . _parsers , other ) [EOL] [EOL] def __iadd__ ( self , other ) : [EOL] [docstring] [EOL] self . _append ( other ) [EOL] return self [EOL] [EOL] [EOL] class Alternate ( _MultiParser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * parsers ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( Alternate , * parsers ) [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] for parser in self . _parsers : [EOL] try : [EOL] return parser ( position ) [EOL] except XMLParseError : [EOL] pass [EOL] raise XMLParseError ( position . file , position . opening_line ) [EOL] [EOL] def __or__ ( self , other ) : [EOL] [docstring] [EOL] return Alternate ( * self . _parsers , other ) [EOL] [EOL] def __ior__ ( self , other ) : [EOL] [docstring] [EOL] self . _append ( other ) [EOL] return self [EOL] [EOL] [EOL] class Success ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] return None , position [EOL] [EOL] [EOL] class Failure ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] raise XMLParseError ( position . file , position . opening_line ) [EOL] [EOL] [EOL] class Start ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] try : [EOL] prev = position . prev ( ) [EOL] raise XMLParseError ( prev . file , prev . opening_line , [string] ) [EOL] except StopIteration : [EOL] return None , position [EOL] [EOL] [EOL] class End ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] yzal . strict ( cast ( yzal . Thunk [ Element ] , position ) ) [EOL] except XMLParseError : [EOL] return None , position [EOL] raise XMLParseError ( position . file , position . closing_line , [string] ) [EOL] [EOL] [EOL] class AnyElement ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] return yzal . strict ( position ) , next_element ( position ) [EOL] [EOL] [EOL] class Tag ( Parser ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name ) : [EOL] [docstring] [EOL] self . _name = name [EOL] [EOL] def __call__ ( self , position ) : [comment] [EOL] if position . tag == self . _name : [EOL] return yzal . strict ( position ) , next_element ( position ) [EOL] raise XMLParseError ( position . file , position . opening_line ) [EOL] [EOL] [EOL] def lazy ( parser_func ) : [EOL] [docstring] [EOL] return Lazy ( parser_func ) [EOL] [EOL] [EOL] def at ( parser ) : [EOL] [docstring] [EOL] return At ( parser ) [EOL] [EOL] [EOL] def not_at ( parser ) : [EOL] [docstring] [EOL] return ~ At ( parser ) [EOL] [EOL] [EOL] def opt ( parser ) : [EOL] [docstring] [EOL] return parser | Success ( ) [EOL] [EOL] [EOL] def plus ( parser ) : [EOL] [docstring] [EOL] return parser + Repeat ( parser ) [EOL] [EOL] [EOL] def seq ( * parsers ) : [EOL] [docstring] [EOL] return Sequence ( * parsers ) [EOL] [EOL] [EOL] def sor ( * parsers ) : [EOL] [docstring] [EOL] return Alternate ( * parsers ) [EOL] [EOL] [EOL] def star ( parser ) : [EOL] [docstring] [EOL] return Repeat ( parser ) [EOL] [EOL] [EOL] def must ( parser ) : [EOL] [docstring] [EOL] return Must ( parser ) [EOL] [EOL] [EOL] def rep ( parser , times ) : [EOL] [docstring] [EOL] return Sequence ( * ( [ parser ] * times ) ) [EOL] [EOL] [EOL] def until ( parser ) : [EOL] [docstring] [EOL] [EOL] def process ( elements ) : [EOL] return elements [ - [number] ] [EOL] [EOL] def process2 ( elements ) : [EOL] start_elements , last_element = elements [EOL] start_elements . append ( last_element ) [EOL] return start_elements [EOL] [EOL] return ( star ( not_at ( parser ) + not_at ( end ( ) ) + any ( ) ^ process ) + at ( parser ) ^ process2 ) [EOL] [EOL] [EOL] def failure ( ) : [EOL] [docstring] [EOL] return Failure ( ) [EOL] [EOL] [EOL] def success ( ) : [EOL] [docstring] [EOL] return Success ( ) [EOL] [EOL] [EOL] def start ( ) : [EOL] [docstring] [EOL] return Start ( ) [EOL] [EOL] [EOL] def end ( ) : [EOL] [docstring] [EOL] return End ( ) [EOL] [EOL] [EOL] def any ( ) : [EOL] [docstring] [EOL] return AnyElement ( ) [EOL] [EOL] [EOL] def tag ( name ) : [EOL] [docstring] [EOL] return Tag ( name ) [EOL]	arser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Parser$ 0 0 0 0 $typing.Tuple[typing.Any,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 $"Alternate"$ 0 0 0 $Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $Parser$ 0 0 0 0 $"Alternate"$ 0 0 0 $Parser$ 0 0 0 0 0 0 0 0 0 $Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[None,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.NoReturn$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[None,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 $rads.xml.base.Element$ 0 $rads.xml.base.Element$ 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[None,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 $rads.xml.base.Element$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[rads.xml.base.Element,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Tuple[rads.xml.base.Element,rads.xml.base.Element]$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 $rads.xml.base.Element$ 0 0 0 $rads.xml.base.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from . tree import ( Compress , Config , Constant , Cycles , Grid , MultiBitFlag , NetCDFAttribute , NetCDFVariable , Phase , Range , ReferencePass , Repeat , Satellite , SingleBitFlag , SubCycles , SurfaceType , Variable , ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , NoReturn , Iterable , Union , Any , Mapping , Optional , TypeVar , Callable , Sequence , List , Pattern , Type [EOL] import tree [EOL] import builtins [EOL] import datetime [EOL] import rpn [EOL] import cf_units [EOL] import typing [EOL] [docstring] [EOL] [EOL] import re [EOL] from datetime import datetime [EOL] from typing import ( TYPE_CHECKING , Any , Callable , Dict , Iterable , List , Mapping , NoReturn , Optional , Sequence , Type , TypeVar , Union , ) [EOL] [EOL] import numpy as np [comment] [EOL] import regex [comment] [EOL] from cf_units import Unit [comment] [EOL] [EOL] from . . rpn import Expression [EOL] from . . utility import fortran_float [EOL] from . tree import ( Compress , Constant , Cycles , Flags , Grid , MultiBitFlag , N , NetCDFAttribute , NetCDFVariable , Range , ReferencePass , Repeat , SingleBitFlag , SurfaceType , ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] _T = TypeVar ( [string] ) [EOL] [EOL] [EOL] class TerminalTextParseError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class TextParseError ( TerminalTextParseError ) : [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if TYPE_CHECKING : [EOL] from typing_extensions import Protocol [EOL] [EOL] class _SupportsFromString ( Protocol ) : [EOL] def __init__ ( self , string ) : [EOL] ... [EOL] [EOL] [EOL] def lift ( string_parser , * , terminal = False , ) : [EOL] [docstring] [EOL] [EOL] def _parser ( string , _ ) : [EOL] try : [EOL] return string_parser ( string ) [comment] [EOL] except ( TypeError , ValueError , KeyError ) as err : [EOL] if terminal : [EOL] raise TerminalTextParseError ( str ( err ) ) from err [EOL] raise TextParseError ( str ( err ) ) from err [EOL] [EOL] _parser . _lifted = string_parser . __qualname__ [comment] [EOL] return _parser [EOL] [EOL] [EOL] def list_of ( parser , * , sep = None , terminal = False , ) : [EOL] [docstring] [EOL] [EOL] def _parser ( string , attr ) : [EOL] return [ parser ( s , attr ) for s in string . split ( sep = sep ) ] [EOL] [EOL] def _terminal_parser ( string , attr ) : [EOL] try : [EOL] return _parser ( string , attr ) [EOL] except TextParseError as err : [EOL] raise TerminalTextParseError ( str ( err ) ) from err [EOL] [EOL] return _terminal_parser if terminal else _parser [EOL] [EOL] [EOL] def range_of ( parser , * , terminal = False ) : [EOL] [docstring] [EOL] [EOL] def _parser ( string , attr ) : [EOL] minmax = [ parser ( s , attr ) for s in string . split ( ) ] [EOL] if not minmax : [EOL] raise TextParseError ( [string] ) [EOL] if len ( minmax ) == [number] : [EOL] raise TextParseError ( [string] ) [EOL] if len ( minmax ) > [number] : [EOL] raise TextParseError ( [string] f" [string] { len ( minmax ) } [string] " ) [EOL] return Range ( * minmax ) [EOL] [EOL] def _terminal_parser ( string , attr ) : [EOL] try : [EOL] return _parser ( string , attr ) [EOL] except TextParseError as err : [EOL] raise TerminalTextParseError ( str ( err ) ) from err [EOL] [EOL] return _terminal_parser if terminal else _parser [EOL] [EOL] [EOL] def one_of ( parsers , * , terminal = False , ) : [EOL] [docstring] [EOL] [EOL] def _parser ( string , attr ) : [EOL] for parser in parsers : [EOL] try : [EOL] return parser ( string , attr ) [EOL] except TextParseError : [EOL] pass [EOL] [EOL] [comment] [EOL] parser_types = [ ] [EOL] for parser in parsers : [EOL] try : [EOL] parser_types . append ( parser . _lifted ) [comment] [EOL] except AttributeError : [EOL] parser_types . append ( parser . __qualname__ ) [EOL] [EOL] err_str = ( f" [string] { string } [string] " f" [string] { [string] . join ( parser_types ) }" ) [EOL] if terminal : [EOL] raise TerminalTextParseError ( err_str ) [EOL] raise TextParseError ( err_str ) [EOL] [EOL] return _parser [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def compress ( string , _ ) : [EOL] [docstring] [EOL] parts = string . split ( ) [EOL] try : [EOL] funcs = ( _rads_type , fortran_float , fortran_float , lambda x : x , ) [EOL] return Compress ( * ( f ( s ) for f , s in zip ( funcs , parts ) ) ) [EOL] except ( KeyError , ValueError ) as err : [EOL] raise TextParseError ( str ( err ) ) from err [EOL] except TypeError : [EOL] if len ( parts ) > [number] : [EOL] raise TextParseError ( [string] [string] ) [EOL] raise TextParseError ( [string] ) [EOL] [EOL] [EOL] def cycles ( string , _ ) : [EOL] [docstring] [EOL] try : [EOL] return Cycles ( * ( int ( s ) for s in string . split ( ) ) ) [EOL] except ValueError as err : [EOL] raise TextParseError ( str ( err ) ) from err [EOL] except TypeError : [EOL] num_values = len ( string . split ( ) ) [EOL] if num_values == [number] : [EOL] raise TextParseError ( [string] ) [EOL] if num_values == [number] : [EOL] raise TextParseError ( [string] ) [EOL] raise TextParseError ( [string] ) [EOL] [EOL] [EOL] def data ( string , attr ) : [EOL] [docstring] [EOL] attr_ = { k : v . strip ( ) for k , v in attr . items ( ) } [EOL] return one_of ( ( _flags , _constant , _grid , _netcdf , _math , _invalid_data ) ) ( string . strip ( ) , attr_ ) [EOL] [EOL] [EOL] def nop ( string , _ ) : [EOL] [docstring] [EOL] return string [EOL] [EOL] [EOL] def ref_pass ( string , _ ) : [EOL] [docstring] [EOL] parts = string . split ( ) [EOL] try : [EOL] funcs = ( _time , fortran_float , int , int , int , lambda x : x , ) [EOL] return ReferencePass ( * ( f ( s ) for f , s in zip ( funcs , parts ) ) ) [EOL] except ValueError as err : [EOL] raise TextParseError ( str ( err ) ) from err [EOL] except TypeError : [EOL] if not parts : [EOL] raise TextParseError ( [string] ) [EOL] if len ( parts ) == [number] : [EOL] raise TextParseError ( [string] ) [EOL] if len ( parts ) == [number] : [EOL] raise TextParseError ( [string] ) [EOL] if len ( parts ) == [number] : [EOL] raise TextParseError ( [string] ) [EOL] [comment] [EOL] raise TextParseError ( [string] [string] [string] ) [EOL] [EOL] [EOL] def repeat ( string , _ ) : [EOL] [docstring] [EOL] parts = string . split ( ) [EOL] try : [EOL] funcs = ( fortran_float , int , fortran_float , lambda x : x , ) [EOL] return Repeat ( * ( f ( s ) for f , s in zip ( funcs , parts ) ) ) [EOL] except ValueError as err : [EOL] raise TextParseError ( str ( err ) ) from err [EOL] except TypeError : [EOL] if not parts : [EOL] raise TextParseError ( [string] ) [EOL] if len ( parts ) == [number] : [EOL] raise TextParseError ( [string] ) [EOL] raise TextParseError ( [string] [string] ) [EOL] [EOL] [EOL] def time ( string , _ ) : [EOL] [docstring] [EOL] try : [EOL] return _time ( string ) [EOL] except ValueError as err : [EOL] raise TextParseError ( str ( err ) ) from err [EOL] [EOL] [EOL] def unit ( string , _ ) : [EOL] [docstring] [EOL] try : [EOL] return Unit ( string ) [EOL] except ValueError : [EOL] string = string . strip ( ) [EOL] [comment] [EOL] [comment] [EOL] if string in ( [string] , [string] ) : [EOL] return Unit ( [string] ) [EOL] if string == [string] : [EOL] return Unit ( [string] ) [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] def _constant ( string , attr ) : [EOL] try : [EOL] if [string] not in attr or attr [ [string] ] == [string] : [EOL] return Constant ( one_of ( ( lift ( int ) , lift ( fortran_float ) ) ) ( string , attr ) ) [EOL] except TextParseError : [EOL] if [string] in attr : [comment] [EOL] raise TerminalTextParseError ( f" [string] { string } [string] " ) [EOL] raise [comment] [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _FLAGS_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] def _flags ( string , attr ) : [EOL] if not attr . get ( [string] ) == [string] : [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] if string == [string] : [EOL] return SurfaceType ( ) [EOL] match = _FLAGS_RE . fullmatch ( string ) [EOL] if match is None : [EOL] raise TerminalTextParseError ( f" [string] { string } [string] " ) [EOL] bit , length = match . groups ( ) [EOL] length = [string] if length is None else length [EOL] [comment] [EOL] try : [EOL] bit_ = int ( bit ) [EOL] length_ = int ( length ) [EOL] except ValueError as err : [EOL] raise TerminalTextParseError ( err ) from err [EOL] if bit_ < [number] : [EOL] raise TerminalTextParseError ( f" [string] { bit_ } [string] " ) [EOL] if length_ == [number] : [EOL] return SingleBitFlag ( bit = bit_ ) [EOL] if length_ >= [number] : [EOL] return MultiBitFlag ( bit = bit_ , length = length_ ) [EOL] raise TerminalTextParseError ( [string] f" [string] { length_ } [string] " ) [EOL] [EOL] [EOL] def _grid ( string , attr ) : [EOL] method = None [EOL] try : [EOL] if attr [ [string] ] in ( [string] , [string] ) : [EOL] method = [string] [EOL] elif attr [ [string] ] in ( [string] , [string] ) : [EOL] method = [string] [EOL] elif attr [ [string] ] in ( [string] , [string] ) : [EOL] method = [string] [EOL] except KeyError : [EOL] if re . fullmatch ( [string] , string ) : [EOL] method = [string] [EOL] if method : [EOL] return Grid ( file = string , x = attr . get ( [string] , [string] ) , y = attr . get ( [string] , [string] ) , method = method ) [EOL] [comment] [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] def _invalid_data ( string , _ ) : [EOL] raise TerminalTextParseError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] _MATH_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] def _math ( string , attr ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] if ( [string] not in attr [EOL] and _MATH_RE . fullmatch ( string ) or attr . get ( [string] ) == [string] ) : [EOL] return Expression ( string ) [EOL] except ValueError as err : [EOL] raise TerminalTextParseError ( str ( err ) ) from err [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] _NETCDF_RE = regex . compile ( [string] [string] ) [EOL] [EOL] [EOL] def _netcdf ( string , attr ) : [EOL] if attr . get ( [string] , [string] ) not in ( [string] , [string] ) : [EOL] raise TextParseError ( f" [string] { string } [string] " ) [EOL] match = _NETCDF_RE . fullmatch ( string ) [EOL] if match is None : [EOL] str_ = f" [string] { string } [string] " [EOL] if attr . get ( [string] ) in ( [string] , [string] ) : [EOL] raise TerminalTextParseError ( str_ ) [EOL] raise TextParseError ( str_ ) [EOL] variable , attribute = match . groups ( ) [EOL] variable = variable if variable else None [EOL] branch = attr . get ( [string] , None ) [EOL] if attribute : [EOL] return NetCDFAttribute ( name = attribute , variable = variable , branch = branch ) [EOL] return NetCDFVariable ( name = variable , branch = branch ) [EOL] [EOL] [EOL] def _rads_type ( string ) : [EOL] switch = { [string] : np . int8 , [string] : np . int16 , [string] : np . int32 , [string] : np . float32 , [string] : np . float64 , } [EOL] try : [EOL] return switch [ string . lower ( ) ] [EOL] except KeyError : [EOL] raise ValueError ( f" [string] { string } [string] " ) [EOL] [EOL] [EOL] def _time ( string ) : [EOL] formats = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] for format_ in formats : [EOL] try : [EOL] return datetime . strptime ( string , format_ ) [EOL] except ValueError : [EOL] pass [EOL] [comment] [EOL] raise ValueError ( f" [string] { string } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
from typing import Tuple , Iterable , Any , Mapping , Optional , Callable , Sequence , List [EOL] import rads [EOL] import xml [EOL] import builtins [EOL] import xml_parsers [EOL] import ast [EOL] import typing [EOL] [docstring] [EOL] from typing import Any , Callable , Iterable , Mapping , Optional , Sequence , Tuple [EOL] [EOL] import fortran_format_converter as ffc [EOL] [EOL] from . . xml . base import Element [EOL] from . ast import ( Alias , Assignment , CompoundStatement , If , NullStatement , Phase , SatelliteID , Satellites , Source , Statement , Variable , ) [EOL] from . text_parsers import ( TextParseError , compress , cycles , data , lift , list_of , nop , one_of , range_of , ref_pass , repeat , time , unit , ) [EOL] from . tree import SubCycles [EOL] from . utility import ( error_at , named_block_processor , parse_action , parse_condition , source_from_element , ) [EOL] from . xml_parsers import ( Parser , TerminalXMLParseError , any , end , lazy , opt , star , start , tag , ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def alias ( ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] try : [EOL] alias = element . attributes [ [string] ] [EOL] except KeyError : [EOL] raise error_at ( element ) ( [string] ) [EOL] variables = element . text . split ( ) if element . text else [ ] [EOL] if not variables : [EOL] raise error_at ( element ) ( [string] ) [EOL] condition = parse_condition ( element . attributes ) [EOL] action = parse_action ( element ) [EOL] source = source_from_element ( element ) [EOL] return Alias ( alias , variables , condition , action , source = source ) [EOL] [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def ignore ( tag_ = None ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] return NullStatement ( source = source_from_element ( element ) ) [EOL] [EOL] if tag_ : [EOL] return tag ( tag_ ) ^ process [EOL] return any ( ) ^ process [EOL] [EOL] [EOL] def value ( parser = nop , tag_ = None , var = None , ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] var_ = var if var else element . tag [EOL] condition = parse_condition ( element . attributes ) [EOL] action = parse_action ( element ) [EOL] text = element . text if element . text else [string] [EOL] source = source_from_element ( element ) [EOL] try : [EOL] value = parser ( text , element . attributes ) [EOL] except TextParseError as err : [EOL] raise error_at ( element ) ( str ( err ) ) from err [EOL] return Assignment ( name = var_ , value = value , condition = condition , action = action , source = source ) [EOL] [EOL] if tag_ : [EOL] return tag ( tag_ ) ^ process [EOL] return any ( ) ^ process [EOL] [EOL] [EOL] def if_statement ( internal ) : [EOL] [docstring] [EOL] [EOL] def process ( statements ) : [EOL] if_element , false_statement = statements [EOL] condition = parse_condition ( if_element . attributes ) [EOL] true_statement = internal ( if_element . down ( ) ) [ [number] ] [EOL] source = source_from_element ( if_element ) [EOL] return If ( condition = condition , true_statement = true_statement , false_statement = false_statement , source = source , ) [EOL] [EOL] return ( tag ( [string] ) + opt ( _elseif_statement ( internal ) | _else_statement ( internal ) ) ^ process ) [EOL] [EOL] [EOL] def _elseif_statement ( internal ) : [EOL] [docstring] [EOL] [EOL] def process ( statements ) : [EOL] elseif_element , false_statement = statements [EOL] condition = parse_condition ( elseif_element . attributes ) [EOL] true_statement = internal ( elseif_element . down ( ) ) [ [number] ] [EOL] source = source_from_element ( elseif_element ) [EOL] return If ( condition , true_statement , false_statement , source = source ) [EOL] [EOL] return ( tag ( [string] ) + opt ( lazy ( lambda : _elseif_statement ( internal ) ) | _else_statement ( internal ) ) ^ process ) [EOL] [EOL] [EOL] def _else_statement ( internal ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] return internal ( element . down ( ) ) [ [number] ] [EOL] [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def satellites ( ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] source = source_from_element ( element ) [EOL] if not element . text : [EOL] return Satellites ( source = source ) [EOL] satellites_ = [ ] [EOL] for num , line in enumerate ( element . text . strip ( ) . splitlines ( ) ) : [EOL] line = line . strip ( ) [EOL] if line : [EOL] line_ = element . opening_line + num + [number] if element . opening_line else None [EOL] id_source = Source ( line = line_ , file = element . file ) [EOL] try : [EOL] id_ , id3 , * names = line . split ( ) [EOL] except ValueError : [EOL] raise TerminalXMLParseError ( id_source . file , id_source . line , f" [string] { id_ } [string] " , ) [EOL] satellites_ . append ( SatelliteID ( id_ , id3 , set ( names ) , source = id_source ) ) [EOL] return Satellites ( * satellites_ , source = source ) [EOL] [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def satellite_ids ( ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] source = source_from_element ( element ) [EOL] if not element . text : [EOL] return Assignment ( name = [string] , value = [ ] , source = source ) [EOL] satellites_ = [ ] [EOL] for num , line in enumerate ( element . text . strip ( ) . splitlines ( ) ) : [EOL] line = line . strip ( ) [EOL] if line : [EOL] line_ = element . opening_line + num + [number] if element . opening_line else None [EOL] id_source = Source ( line = line_ , file = element . file ) [EOL] id_ , * _ = line . split ( ) [EOL] if len ( id_ ) != [number] : [EOL] raise TerminalXMLParseError ( id_source . file , id_source . line , [string] f" [string] { id_ } [string] " , ) [EOL] satellites_ . append ( id_ ) [EOL] return Assignment ( name = [string] , value = satellites_ , source = source ) [EOL] [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def subcycles ( ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] start = ... [EOL] condition = parse_condition ( element . attributes ) [EOL] action = parse_action ( element ) [EOL] try : [EOL] start = int ( element . attributes [ [string] ] ) [EOL] except KeyError : [EOL] start = None [EOL] except ValueError as err : [EOL] raise error_at ( element ) ( str ( err ) ) [EOL] text = element . text if element . text else [string] [EOL] try : [EOL] lengths = [ int ( s ) for s in text . split ( ) ] [EOL] except ValueError as err : [EOL] raise error_at ( element ) ( str ( err ) ) [EOL] source = source_from_element ( element ) [EOL] value = SubCycles ( lengths , start = start ) [EOL] return Assignment ( name = [string] , value = value , condition = condition , action = action , source = source , ) [EOL] [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def block ( parser , error_msg = [string] ) : [EOL] [docstring] [EOL] [EOL] def process ( statements ) : [EOL] [comment] [EOL] if len ( statements ) == [number] : [EOL] return statements [ [number] ] [EOL] return CompoundStatement ( * statements ) [EOL] [EOL] def recursive_parser ( ) : [EOL] return block ( parser , error_msg ) [EOL] [EOL] block_parser = star ( parser | if_statement ( lazy ( recursive_parser ) ) | value ( ) ) [EOL] return ( start ( ) + ( block_parser ^ process ) + end ( ) << error_msg ) ^ ( lambda x : x [ [number] ] ) [EOL] [EOL] [EOL] def phase ( ) : [EOL] [docstring] [EOL] phase_block = block ( value ( lift ( str ) , [string] ) | value ( cycles , [string] ) | value ( repeat , [string] ) | value ( ref_pass , [string] , var = [string] ) | value ( time , [string] ) | value ( time , [string] ) | subcycles ( ) ) [EOL] process = named_block_processor ( phase_block , Phase ) [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def variable ( ) : [EOL] [docstring] [EOL] [comment] [EOL] variable_block = block ( value ( lift ( str ) , [string] , var = [string] ) | value ( lift ( str ) , [string] ) | value ( lift ( str ) , [string] ) | value ( lift ( str ) , [string] ) | value ( unit , [string] ) | value ( list_of ( lift ( str ) ) , [string] ) | value ( list_of ( lift ( str ) ) , [string] ) | value ( range_of ( one_of ( ( lift ( int ) , lift ( float ) ) ) ) , [string] ) | value ( range_of ( one_of ( ( lift ( int ) , lift ( float ) ) ) ) , [string] ) | ignore ( [string] ) | value ( data , [string] ) | value ( list_of ( lift ( str ) ) , [string] ) | value ( lift ( int ) , [string] ) | value ( lift ( ffc . convert ) , [string] ) | value ( compress , [string] ) | value ( one_of ( ( lift ( int ) , lift ( float ) ) ) , [string] ) ) [EOL] process = named_block_processor ( variable_block , Variable ) [EOL] return tag ( [string] ) ^ process [EOL] [EOL] [EOL] def variable_override ( parser , tag_ , field = None , ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] try : [EOL] name = element . attributes [ [string] ] [EOL] except KeyError : [EOL] raise error_at ( element ) ( f" [string] { tag_ } [string] " ) [EOL] var_ = field if field else element . tag [EOL] condition = parse_condition ( element . attributes ) [EOL] action = parse_action ( element ) [EOL] text = element . text if element . text else [string] [EOL] source = source_from_element ( element ) [EOL] try : [EOL] value = parser ( text , element . attributes ) [EOL] except TextParseError as err : [EOL] raise error_at ( element ) ( str ( err ) ) from err [EOL] name_assignment = Assignment ( [string] , name , source = source ) [EOL] assignment = Assignment ( name = var_ , value = value , action = action , source = source ) [EOL] statement = CompoundStatement ( name_assignment , assignment , source = source ) [EOL] return Variable ( statement , condition , source = source ) [EOL] [EOL] return tag ( tag_ ) ^ process [EOL] [EOL] [EOL] def variable_overrides ( ) : [EOL] [docstring] [EOL] overrides = ( variable_override ( lift ( str ) , [string] , field = [string] ) | variable_override ( lift ( str ) , [string] ) | variable_override ( lift ( str ) , [string] ) | variable_override ( lift ( str ) , [string] ) | variable_override ( unit , [string] ) | variable_override ( list_of ( lift ( str ) ) , [string] ) | variable_override ( list_of ( lift ( str ) ) , [string] ) | variable_override ( range_of ( one_of ( ( lift ( int ) , lift ( float ) ) ) ) , [string] ) | variable_override ( range_of ( one_of ( ( lift ( int ) , lift ( float ) ) ) ) , [string] ) | ignore ( [string] ) | variable_override ( data , [string] ) | variable_override ( list_of ( lift ( str ) ) , [string] ) | variable_override ( lift ( int ) , [string] ) | variable_override ( lift ( ffc . convert ) , [string] ) | variable_override ( compress , [string] ) | variable_override ( one_of ( ( lift ( int ) , lift ( float ) ) ) , [string] ) ) [EOL] return overrides [EOL] [EOL] [EOL] def satellite_grammar ( ) : [EOL] [docstring] [EOL] root_block = block ( ignore ( [string] ) | satellites ( ) | value ( lift ( str ) , [string] , var = [string] ) | ignore ( [string] ) | value ( lift ( float ) , [string] ) | value ( lift ( float ) , [string] ) | value ( list_of ( lift ( float ) ) , [string] ) | ignore ( [string] ) | phase ( ) | alias ( ) | variable ( ) | variable_overrides ( ) | ignore ( [string] ) | ignore ( [string] ) ) [EOL] return root_block [EOL] [EOL] [EOL] def pre_config_grammar ( ) : [EOL] [docstring] [EOL] root_block = block ( satellite_ids ( ) | value ( list_of ( lift ( str ) ) , [string] ) | ignore ( ) ) [EOL] return root_block [EOL] [EOL] [EOL] def dataroot_grammar ( ) : [EOL] [docstring] [EOL] root_block = block ( value ( lift ( str ) , [string] ) | ignore ( ) ) [EOL] return root_block [EOL]	xml_parsers.Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml_parsers.Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml_parsers.Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml_parsers.Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml_parsers.Parser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Mapping , Type , Callable [EOL] import rads [EOL] import xml [EOL] import builtins [EOL] import xml_parsers [EOL] import ast [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import Callable , Mapping , Type , cast [EOL] [EOL] from . . xml . base import Element [EOL] from . ast import ( ActionType , Assignment , Block , CompoundStatement , Condition , NullStatement , SatelliteCondition , Source , Statement , TrueCondition , append , delete , edit_append , merge , replace , ) [EOL] from . xml_parsers import Parser , TerminalXMLParseError , XMLParseError [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def error_at ( element ) : [EOL] [docstring] [EOL] [EOL] def error ( message ) : [EOL] return TerminalXMLParseError ( element . file , element . opening_line , message ) [EOL] [EOL] return error [EOL] [EOL] [EOL] def continue_from ( element ) : [EOL] [docstring] [EOL] [EOL] def error ( message ) : [EOL] return XMLParseError ( element . file , element . opening_line , message ) [EOL] [EOL] return error [EOL] [EOL] [EOL] def source_from_element ( element ) : [EOL] [docstring] [EOL] return Source ( line = element . opening_line , file = element . file ) [EOL] [EOL] [EOL] def parse_action ( element ) : [EOL] [docstring] [EOL] [comment] [EOL] if [string] in element . attributes : [EOL] if element . attributes [ [string] ] == [string] : [EOL] return edit_append [EOL] raise error_at ( element ) ( f' [string] { element . attributes [ [string] ] } [string] ' ) [EOL] [comment] [EOL] action = element . attributes . get ( [string] , [string] ) [EOL] if action == [string] : [EOL] return replace [EOL] if action == [string] : [EOL] return append [EOL] if action == [string] : [EOL] return delete [EOL] if action == [string] : [EOL] return merge [EOL] raise error_at ( element ) ( [string] . format ( action ) ) [EOL] [EOL] [EOL] def parse_condition ( attr ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] sat = attr [ [string] ] . strip ( ) [EOL] return SatelliteCondition ( satellites = set ( sat . strip ( [string] ) . split ( ) ) , invert = sat . startswith ( [string] ) ) [EOL] except KeyError : [EOL] return TrueCondition ( ) [EOL] [EOL] [EOL] def named_block_processor ( parser , node ) : [EOL] [docstring] [EOL] [EOL] def process ( element ) : [EOL] try : [EOL] name = element . attributes [ [string] ] [EOL] except KeyError : [EOL] raise error_at ( element ) ( f" [string] { element . tag } [string] " ) [EOL] try : [EOL] statement = cast ( Statement , parser ( element . down ( ) ) [ [number] ] ) [EOL] except StopIteration : [EOL] statement = NullStatement ( ) [EOL] condition = parse_condition ( element . attributes ) [EOL] source = source_from_element ( element ) [EOL] name_assignment = Assignment ( [string] , name , source = source ) [EOL] statement = CompoundStatement ( name_assignment , statement , source = source ) [EOL] return node ( statement , condition , source = source ) [EOL] [EOL] return process [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] try : [EOL] from . lxml import Element , ParseError [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] from . etree import Element , ParseError [comment] [EOL] [EOL] from . utility import fromstring , fromstringlist , parse , rads_fixer , rootless_fixer [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Any , Optional , Callable , Sequence , List [EOL] import xml [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import re [EOL] from itertools import chain , dropwhile , takewhile , tee [EOL] from typing import Any , Callable , Optional , Sequence , cast [EOL] [EOL] from . . typing import PathLike , PathLikeOrFile [EOL] from . . utility import ensure_open , filestring , isio [EOL] [EOL] try : [EOL] from . . xml import lxml as xml [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] from . . xml import etree as xml [comment] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] def _fix_source ( source ) : [EOL] if isio ( source , read = True ) : [EOL] return source [EOL] return os . fspath ( cast ( PathLike , source ) ) [EOL] [EOL] [EOL] def parse ( source , parser = None , fixer = None , ) : [EOL] [docstring] [EOL] filename = filestring ( source ) [EOL] if fixer : [EOL] with ensure_open ( source ) as file : [EOL] return fromstring ( file . read ( ) , parser = parser , fixer = fixer , file = filename ) [EOL] try : [EOL] return xml . Element ( xml . parse ( _fix_source ( source ) , parser ) . getroot ( ) , file = filename ) [EOL] except xml . ParseError as err : [EOL] if filename : [EOL] raise xml . error_with_file ( err , filename ) from err [EOL] raise [EOL] [EOL] [EOL] def fromstring ( text , * , parser = None , fixer = None , file = None , ) : [EOL] [docstring] [EOL] if fixer is not None : [EOL] text = fixer ( text ) [EOL] try : [EOL] return xml . Element ( xml . fromstring ( text , parser ) , file = file ) [EOL] [comment] [EOL] except xml . ParseError as err : [EOL] if file : [EOL] raise xml . error_with_file ( err , file ) from err [EOL] raise [EOL] [EOL] [EOL] def fromstringlist ( sequence , parser = None , fixer = None , file = None , ) : [EOL] [docstring] [EOL] if fixer is not None : [EOL] return fromstring ( [string] . join ( sequence ) , parser = parser , fixer = fixer , file = file ) [EOL] try : [EOL] return xml . Element ( xml . fromstringlist ( sequence , parser ) , file = file ) [EOL] [comment] [EOL] except xml . ParseError as err : [EOL] if file : [EOL] raise xml . error_with_file ( err , file ) from err [EOL] raise [EOL] [EOL] [EOL] def rads_fixer ( text ) : [EOL] [docstring] [EOL] return rootless_fixer ( text , preserve_empty = False ) . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def rootless_fixer ( text , preserve_empty = False ) : [EOL] [docstring] [EOL] if preserve_empty and is_empty ( text ) : [EOL] return text [EOL] [EOL] def is_prolog ( text ) : [EOL] return text . lstrip ( ) . startswith ( [string] ) [EOL] [EOL] it1 , it2 = tee ( text . splitlines ( ) ) [EOL] prolog = takewhile ( is_prolog , it1 ) [EOL] body = dropwhile ( is_prolog , it2 ) [EOL] return [string] . join ( chain ( prolog , [ [string] ] , body , [ [string] ] ) ) [EOL] [EOL] [EOL] def is_empty ( text ) : [EOL] [docstring] [EOL] return ( strip_blanklines ( strip_comments ( strip_processing_instructions ( text ) ) ) . strip ( ) == [string] ) [EOL] [EOL] [EOL] def strip_comments ( text ) : [EOL] [docstring] [EOL] [comment] [EOL] return re . sub ( [string] , [string] , text ) [EOL] [EOL] [EOL] def strip_processing_instructions ( text ) : [EOL] [docstring] [EOL] return re . sub ( [string] , [string] , text ) [EOL] [EOL] [EOL] def strip_blanklines ( text ) : [EOL] [docstring] [EOL] return [string] . join ( line for line in text . splitlines ( ) if line . strip ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Iterator , Any , Mapping , Optional , List [EOL] import rads [EOL] import xml [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import xml . etree . ElementTree as etree [EOL] from typing import Iterator , Mapping , Optional [EOL] from xml . etree . ElementTree import ( ParseError , XMLParser , fromstring , fromstringlist , parse , ) [EOL] [EOL] from . . xml import base [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class Element ( base . Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , element , * , index = None , parent = None , file = None , ) : [EOL] [docstring] [EOL] assert parent is None or isinstance ( parent , Element ) [EOL] self . _element = element [EOL] self . _index = index [EOL] self . _parent = parent [EOL] self . _file = file [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _element ) [EOL] [EOL] def __iter__ ( self ) : [EOL] for i , e in enumerate ( self . _element ) : [EOL] yield Element ( e , index = i , parent = self , file = self . _file ) [EOL] [EOL] def next ( self ) : [comment] [EOL] if self . _parent is None or self . _index is None : [EOL] raise StopIteration ( ) [EOL] siblings = list ( self . _parent . _element ) [EOL] new_index = self . _index + [number] [EOL] if new_index >= len ( siblings ) : [EOL] raise StopIteration ( ) [EOL] return Element ( siblings [ new_index ] , index = new_index , parent = self . _parent , file = self . _file ) [EOL] [EOL] def prev ( self ) : [comment] [EOL] if self . _parent is None or self . _index is None : [EOL] raise StopIteration ( ) [EOL] siblings = list ( self . _parent . _element ) [EOL] new_index = self . _index - [number] [EOL] if new_index < [number] : [EOL] raise StopIteration ( ) [EOL] return Element ( siblings [ new_index ] , index = new_index , parent = self . _parent , file = self . _file ) [EOL] [EOL] def up ( self ) : [comment] [EOL] if self . _parent is None : [EOL] raise StopIteration ( ) [EOL] return self . _parent [EOL] [EOL] def down ( self ) : [comment] [EOL] try : [EOL] element = list ( self . _element ) [ [number] ] [EOL] return Element ( element , index = [number] , parent = self , file = self . file ) [EOL] except IndexError : [EOL] raise StopIteration ( ) [EOL] [EOL] @ property def file ( self ) : [EOL] return self . _file [EOL] [EOL] @ property def tag ( self ) : [EOL] return self . _element . tag [EOL] [EOL] @ property def text ( self ) : [EOL] return self . _element . text [EOL] [EOL] @ property def attributes ( self ) : [EOL] return self . _element . attrib [EOL] [EOL] [EOL] def error_with_file ( error , file ) : [EOL] [docstring] [EOL] error . filename = file [EOL] new_error = type ( error ) ( error . msg , ( file , error . position [ [number] ] , error . position [ [number] ] , error . text ) ) [EOL] new_error . code = error . code [EOL] new_error . position = error . position [EOL] return new_error [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional["Element"]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional["Element"]$ 0 0 0 0 0 $typing.Optional["Element"]$ 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 $xml.etree.ElementTree.Element$ 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[rads.xml.etree.Element]$ 0 $typing.Optional["Element"]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator["Element"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.ParseError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Union , Mapping , Optional , Generator , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from abc import ABC , abstractmethod [EOL] from collections . abc import Sized [EOL] from itertools import chain [EOL] from typing import Iterable , Iterator , Mapping , Optional , Union [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] class Element ( Iterable [ [string] ] , Sized , ABC ) : [EOL] [docstring] [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] attributes = [string] . join ( [string] . format ( k , v ) for k , v in self . attributes . items ( ) ) [EOL] if attributes : [EOL] attributes = [string] + attributes [EOL] return [string] . format ( self . tag , attributes ) [EOL] [EOL] @ abstractmethod def __iter__ ( self ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def __len__ ( self ) : [EOL] [docstring] [EOL] [EOL] def dumps ( self , * , indent = None , _current_indent = [string] ) : [EOL] [docstring] [EOL] attributes = [string] [EOL] text = [string] [EOL] children = [string] [EOL] closing_indent = [string] [EOL] multiline = False [EOL] [EOL] [comment] [EOL] if isinstance ( indent , int ) : [EOL] next_indent = _current_indent + [string] * indent [EOL] elif isinstance ( indent , str ) : [EOL] next_indent = _current_indent + indent [EOL] else : [EOL] next_indent = _current_indent + [string] [EOL] [EOL] if self . attributes : [EOL] attributes = [string] + [string] . join ( [string] . format ( k , v ) for k , v in self . attributes . items ( ) ) [EOL] if self : [comment] [EOL] children_ = ( c . dumps ( indent = indent , _current_indent = next_indent ) for c in self ) [EOL] children = [string] . join ( chain ( [ [string] ] , children_ , [ [string] ] ) ) [EOL] multiline = True [EOL] if self . text and self . text . strip ( ) : [EOL] text = self . text . rstrip ( ) [EOL] if [string] in text : [EOL] multiline = True [EOL] if multiline : [EOL] text = text + [string] [EOL] if multiline : [EOL] closing_indent = _current_indent [EOL] [EOL] format_str = ( [string] [string] ) [EOL] text = format_str . format ( _current_indent = _current_indent , tag = self . tag , attributes = attributes , text = text , children = children , closing_indent = closing_indent , ) [EOL] return text [EOL] [EOL] @ abstractmethod def next ( self ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def prev ( self ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def up ( self ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def down ( self ) : [EOL] [docstring] [EOL] [EOL] @ property def file ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] @ property def opening_line ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] @ property def num_lines ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] @ property def closing_line ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] @ property @ abstractmethod def tag ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def text ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def attributes ( self ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Iterator["Element"]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 $typing.Optional[typing.Union[builtins.int,builtins.str]]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Generator[builtins.str,None,None]$ 0 $typing.Generator[builtins.str,None,None]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Iterator , Any , Mapping , Optional , Sequence , List , Type [EOL] import lxml [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import ( IO , TYPE_CHECKING , Any , Iterator , Mapping , Optional , Sequence , Text , Union , cast , ) [EOL] [EOL] from lxml import etree [comment] [EOL] from lxml . etree import ETCompatXMLParser , ParseError , XMLParser [comment] [EOL] [EOL] from . . xml import base [EOL] [EOL] [comment] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] [comment] [EOL] [comment] [EOL] cached_property = property [EOL] else : [EOL] from cached_property import cached_property [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class Element ( base . Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , element , * , file = None ) : [EOL] [docstring] [EOL] self . _element = element [EOL] self . _file = file [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _element ) [EOL] [EOL] def __iter__ ( self ) : [EOL] for e in self . _element : [EOL] yield Element ( e , file = self . _file ) [EOL] [EOL] def next ( self ) : [comment] [EOL] element = self . _element . getnext ( ) [EOL] if element is None : [EOL] raise StopIteration ( ) [EOL] return Element ( element , file = self . _file ) [EOL] [EOL] def prev ( self ) : [comment] [EOL] element = self . _element . getprevious ( ) [EOL] if element is None : [EOL] raise StopIteration ( ) [EOL] return Element ( element , file = self . _file ) [EOL] [EOL] def up ( self ) : [comment] [EOL] element = self . _element . getparent ( ) [EOL] if element is None : [EOL] raise StopIteration ( ) [EOL] return Element ( element , file = self . _file ) [EOL] [EOL] def down ( self ) : [comment] [EOL] [comment] [EOL] return Element ( next ( self . _element . iterchildren ( ) ) , file = self . _file ) [EOL] [EOL] @ property def file ( self ) : [EOL] if self . _file : [EOL] return self . _file [EOL] return cast ( str , self . _element . base ) [EOL] [EOL] @ property def opening_line ( self ) : [EOL] return cast ( int , self . _element . sourceline ) [EOL] [EOL] @ cached_property def num_lines ( self ) : [EOL] return len ( etree . tostring ( self . _element ) . strip ( ) . split ( [string] ) ) [EOL] [EOL] @ cached_property def closing_line ( self ) : [EOL] return self . opening_line + self . num_lines - [number] [EOL] [EOL] @ property def tag ( self ) : [EOL] return cast ( str , self . _element . tag ) [EOL] [EOL] @ property def text ( self ) : [EOL] return cast ( str , self . _element . text ) [EOL] [EOL] @ property def attributes ( self ) : [EOL] return cast ( Mapping [ str , str ] , self . _element . attrib ) [EOL] [EOL] [EOL] _ParserInputType = Union [ bytes , Text ] [EOL] _FileOrFilename = Union [ str , bytes , int , IO [ Any ] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def parse ( source , parser = None ) : [EOL] [docstring] [EOL] if parser is None : [EOL] parser = ETCompatXMLParser ( ) [EOL] return etree . parse ( source , parser ) [EOL] [EOL] [EOL] def fromstring ( text , parser = None ) : [EOL] [docstring] [EOL] if parser is None : [EOL] parser = ETCompatXMLParser ( ) [EOL] return etree . fromstring ( text , parser ) [EOL] [EOL] [EOL] def fromstringlist ( sequence , parser = None ) : [EOL] [docstring] [EOL] if parser is None : [EOL] parser = ETCompatXMLParser ( ) [EOL] return etree . fromstringlist ( sequence , parser ) [EOL] [EOL] [EOL] def error_with_file ( error , file ) : [EOL] [docstring] [EOL] error . filename = file [EOL] return type ( error ) ( error . msg , error . code , error . position [ [number] ] , error . position [ [number] ] , file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree._Element$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree._Element$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator["Element"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $"Element"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree._ElementTree$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree._Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree._Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lxml.etree.ParseError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0