from typing import Any , List [EOL] import builtins [EOL] import typing [EOL] import enum [EOL] from typing import ( List , Tuple , NamedTuple , ) [EOL] [EOL] [EOL] class Item ( enum . Enum ) : [EOL] chiken_curry = enum . auto ( ) [EOL] beef_curry = enum . auto ( ) [EOL] [EOL] def value ( self ) : [EOL] return { Item . chiken_curry : [number] , Item . beef_curry : [number] , } [ self ] [EOL] [EOL] [EOL] class RecieptItem ( NamedTuple ) : [EOL] item = ... [EOL] amount = ... [comment] [EOL] [EOL] [EOL] class Reciept ( NamedTuple ) : [EOL] items = ... [comment] [EOL] order_sum = ... [comment] [EOL] [EOL] [EOL] class Cacher : [EOL] def times ( self , reciept_item ) : [EOL] return reciept_item . item . value ( ) * reciept_item . amount [EOL] [EOL] def order_sum ( self , orders ) : [EOL] order_list = [ ] [EOL] order_sum = [number] [EOL] [EOL] for order in orders : [EOL] order_list . append ( ( order , self . times ( order ) ) ) [EOL] order_sum += self . times ( order ) [EOL] [EOL] return Reciept ( order_list , order_sum ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Item$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[RecieptItem,builtins.int]]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $RecieptItem$ 0 0 0 0 $RecieptItem$ 0 0 0 0 0 0 0 $RecieptItem$ 0 0 0 0 0 $Reciept$ 0 0 0 $typing.List[RecieptItem]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[RecieptItem]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0
def includeme ( config ) : [EOL] config . add_static_view ( [string] , [string] , cache_max_age = [number] ) [EOL] config . add_route ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import curry_order [EOL] import typing [EOL] from sqlalchemy import ( Column , Index , Integer , Text , ) [EOL] [EOL] from . meta import Base [EOL] [EOL] [EOL] class MyModel ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( Text ) [EOL] value = Column ( Integer ) [EOL] [EOL] [EOL] Index ( [string] , MyModel . name , unique = True , mysql_length = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[curry_order.curry_order.models.mymodel.MyModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[curry_order.curry_order.models.mymodel.MyModel]$ 0 0 0 0 0 0 $typing.Type[curry_order.curry_order.models.mymodel.MyModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from pyramid . view import notfound_view_config [EOL] [EOL] [EOL] @ notfound_view_config ( renderer = [string] ) def notfound_view ( request ) : [EOL] request . response . status = [number] [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] [EOL] from sqlalchemy . exc import DBAPIError [EOL] [EOL] from . . models import MyModel [EOL] [EOL] [EOL] @ view_config ( route_name = [string] , renderer = [string] ) def my_view ( request ) : [EOL] try : [EOL] query = request . dbsession . query ( MyModel ) [EOL] one = query . filter ( MyModel . name == [string] ) . first ( ) [EOL] except DBAPIError : [EOL] return Response ( db_err_msg , content_type = [string] , status = [number] ) [EOL] return { [string] : one , [string] : [string] } [EOL] [EOL] [EOL] db_err_msg = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] import sys [EOL] import transaction [EOL] [EOL] from pyramid . paster import ( get_appsettings , setup_logging , ) [EOL] [EOL] from pyramid . scripts . common import parse_vars [EOL] [EOL] from . . models . meta import Base [EOL] from . . models import ( get_engine , get_session_factory , get_tm_session , ) [EOL] from . . models import MyModel [EOL] [EOL] [EOL] def usage ( argv ) : [EOL] cmd = os . path . basename ( argv [ [number] ] ) [EOL] print ( [string] [string] % ( cmd , cmd ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] if len ( argv ) < [number] : [EOL] usage ( argv ) [EOL] config_uri = argv [ [number] ] [EOL] options = parse_vars ( argv [ [number] : ] ) [EOL] setup_logging ( config_uri ) [EOL] settings = get_appsettings ( config_uri , options = options ) [EOL] [EOL] engine = get_engine ( settings ) [EOL] Base . metadata . create_all ( engine ) [EOL] [EOL] session_factory = get_session_factory ( engine ) [EOL] [EOL] with transaction . manager : [EOL] dbsession = get_tm_session ( session_factory , transaction . manager ) [EOL] [EOL] model = MyModel ( name = [string] , value = [number] ) [EOL] dbsession . add ( model ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Literal , Any , List [EOL] import typing_extensions [EOL] import typing [EOL] from typing import ( Dict , List , Tuple , ) [EOL] [EOL] import pytest [EOL] [EOL] import curry_order . domains [EOL] [EOL] [EOL] def test_order_sum ( ) : [EOL] cacher = curry_order . domains . Cacher ( ) [EOL] chiken_order = curry_order . domains . RecieptItem ( curry_order . domains . Item . chiken_curry , [number] ) [EOL] beef_order = curry_order . domains . RecieptItem ( curry_order . domains . Item . beef_curry , [number] ) [EOL] [EOL] expect = ( [ ( chiken_order , [number] ) , ( beef_order , [number] ) ] , [number] ) [EOL] [EOL] assert cacher . order_sum ( [ chiken_order , beef_order ] ) == expect [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import transaction [EOL] [EOL] from pyramid import testing [EOL] [EOL] [EOL] def dummy_request ( dbsession ) : [EOL] return testing . DummyRequest ( dbsession = dbsession ) [EOL] [EOL] [EOL] class BaseTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . config = testing . setUp ( settings = { [string] : [string] } ) [EOL] self . config . include ( [string] ) [EOL] settings = self . config . get_settings ( ) [EOL] [EOL] from . models import ( get_engine , get_session_factory , get_tm_session , ) [EOL] [EOL] self . engine = get_engine ( settings ) [EOL] session_factory = get_session_factory ( self . engine ) [EOL] [EOL] self . session = get_tm_session ( session_factory , transaction . manager ) [EOL] [EOL] def init_database ( self ) : [EOL] from . models . meta import Base [EOL] Base . metadata . create_all ( self . engine ) [EOL] [EOL] def tearDown ( self ) : [EOL] from . models . meta import Base [EOL] [EOL] testing . tearDown ( ) [EOL] transaction . abort ( ) [EOL] Base . metadata . drop_all ( self . engine ) [EOL] [EOL] [EOL] class TestMyViewSuccessCondition ( BaseTest ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( TestMyViewSuccessCondition , self ) . setUp ( ) [EOL] self . init_database ( ) [EOL] [EOL] from . models import MyModel [EOL] [EOL] model = MyModel ( name = [string] , value = [number] ) [EOL] self . session . add ( model ) [EOL] [EOL] def test_passing_view ( self ) : [EOL] from . views . default import my_view [EOL] info = my_view ( dummy_request ( self . session ) ) [EOL] self . assertEqual ( info [ [string] ] . name , [string] ) [EOL] self . assertEqual ( info [ [string] ] , [string] ) [EOL] [EOL] [EOL] class TestMyViewFailureCondition ( BaseTest ) : [EOL] [EOL] def test_failing_view ( self ) : [EOL] from . views . default import my_view [EOL] info = my_view ( dummy_request ( self . session ) ) [EOL] self . assertEqual ( info . status_int , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0