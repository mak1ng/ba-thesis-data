	0
	0
	0
from typing import Any , Iterator [EOL] import munidash [EOL] import builtins [EOL] import typing [EOL] import itertools [EOL] import pickle [EOL] import time [EOL] from typing import List , Iterator [EOL] [EOL] import redis [EOL] [EOL] from munidash . config import MUNI_METRO_ROUTES , REDIS_URL [EOL] from munidash . vehicle import Vehicle [EOL] [EOL] [EOL] class VehicleCache : [EOL] def __init__ ( self ) : [EOL] self . r = redis . Redis ( host = REDIS_URL . hostname , port = REDIS_URL . port , password = REDIS_URL . password ) [EOL] [EOL] def update_vehicles ( self , list_of_vehicles ) : [EOL] for route_tag in MUNI_METRO_ROUTES : [EOL] if self . r . llen ( route_tag ) > [number] : [EOL] print ( f" [string] { route_tag }" ) [EOL] self . r . delete ( route_tag ) [EOL] [EOL] for vehicle in list_of_vehicles : [EOL] self . r . lpush ( vehicle . route_tag , pickle . dumps ( vehicle ) ) [EOL] [EOL] self . r . set ( [string] , time . time ( ) ) [EOL] [EOL] def get_vehicles_by_route_tag ( self , route_tag ) : [EOL] pickled_vehicles = self . r . lrange ( route_tag , [number] , self . r . llen ( route_tag ) ) [EOL] [EOL] return map ( pickle . loads , pickled_vehicles ) [EOL] [EOL] def get_all_vehicles ( self ) : [EOL] [EOL] return map ( pickle . loads , itertools . chain ( * [ self . r . lrange ( route_tag , [number] , self . r . llen ( route_tag ) ) for route_tag in MUNI_METRO_ROUTES ] ) ) [EOL] [EOL] [EOL] def get_last_updated_time ( self ) : [EOL] return self . r . get ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import munidash [EOL] import flask [EOL] from operator import attrgetter [EOL] [EOL] from flask import Flask , jsonify , render_template [EOL] [EOL] from munidash . vehicle_cache import VehicleCache [EOL] import datetime [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def main ( ) : [EOL] vehicle_cache = VehicleCache ( ) [EOL] [EOL] return render_template ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def get_all_vehicles ( ) : [EOL] vehicle_cache = VehicleCache ( ) [EOL] [EOL] return jsonify ( { [string] : [ vehicle . _asdict ( ) for vehicle in vehicle_cache . get_vehicles_by_route_tag ( [string] ) ] , [string] : datetime . datetime . utcfromtimestamp ( float ( vehicle_cache . get_last_updated_time ( ) ) ) } ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0
	0
from typing import Any , Iterator [EOL] import xml [EOL] import munidash [EOL] import builtins [EOL] import typing [EOL] from typing import List , Any , Iterator [EOL] [EOL] import requests [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] from munidash . vehicle import Vehicle [EOL] from munidash . vehicle_cache import VehicleCache [EOL] from munidash . config import MUNI_METRO_ROUTES [EOL] [EOL] [EOL] def fetch_nextbus_data ( ) : [EOL] return requests . get ( [string] ) . text [EOL] [EOL] [EOL] def filter_nextbus_data ( vehicle ) : [EOL] [comment] [EOL] if all ( [ vehicle . attrib . get ( [string] ) in MUNI_METRO_ROUTES , vehicle . attrib . get ( [string] , None ) is None , ] ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def parse_nextbus_data ( nextbus_data ) : [EOL] vehicles_elements = ET . fromstring ( nextbus_data ) [EOL] muni_metro_elements = filter ( filter_nextbus_data , vehicles_elements ) [EOL] vehicles = map ( Vehicle . from_nextbus_response , muni_metro_elements ) [EOL] return vehicles [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] nextbus_data = fetch_nextbus_data ( ) [EOL] vehicles = parse_nextbus_data ( nextbus_data ) [EOL] [EOL] vehicle_cache = VehicleCache ( ) [EOL] vehicle_cache . update_vehicles ( vehicles ) [EOL] [EOL] print ( next ( vehicle_cache . get_vehicles_by_route_tag ( [string] ) ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator [EOL] import xml [EOL] import munidash [EOL] import builtins [EOL] import typing [EOL] from typing import List , Any , Iterator [EOL] [EOL] import requests [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] import twitter [EOL] [EOL] from munidash . vehicle import Vehicle [EOL] from munidash . vehicle_cache import VehicleCache [EOL] from munidash . config import MUNI_METRO_ROUTES , TWITTER_API_KEY , TWITTER_SECRET_KEY , TWITTER_ACCESS_TOKEN , TWITTER_ACCESS_TOKEN_SECRET [EOL] [EOL] [EOL] def fetch_twitter_data ( ) : [EOL] api = twitter . Api ( consumer_key = TWITTER_API_KEY , consumer_secret = TWITTER_SECRET_KEY , access_token_key = TWITTER_ACCESS_TOKEN , access_token_secret = TWITTER_ACCESS_TOKEN_SECRET ) [EOL] [EOL] return api . GetUserTimeline ( screen_name = [string] ) [EOL] [EOL] [EOL] def filter_nextbus_data ( vehicle ) : [EOL] [comment] [EOL] if all ( [ vehicle . attrib . get ( [string] ) in MUNI_METRO_ROUTES , vehicle . attrib . get ( [string] , None ) is None , ] ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def parse_nextbus_data ( nextbus_data ) : [EOL] vehicles_elements = ET . fromstring ( nextbus_data ) [EOL] muni_metro_elements = filter ( filter_nextbus_data , vehicles_elements ) [EOL] vehicles = map ( Vehicle . from_nextbus_response , muni_metro_elements ) [EOL] return vehicles [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( fetch_twitter_data ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[munidash.vehicle.Vehicle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0