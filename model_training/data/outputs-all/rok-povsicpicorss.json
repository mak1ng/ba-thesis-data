	0
	0
	0
	0
from picorss . src . application . use_cases . adding_rss_page import AddingRssPageUseCase [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import AddingRssPageUseCase [EOL] import picorss [EOL] import builtins [EOL] import typing [EOL] import attr [EOL] import inject [EOL] [EOL] from picorss . src . application import repositories [EOL] from picorss . src . domain import entities [EOL] [EOL] [EOL] class AddingRssPageUseCase : [EOL] [EOL] @ attr . s class InputDTO : [EOL] url = attr . ib ( ) [EOL] [EOL] _rss_page_repo = inject . attr ( repositories . RssPageRepo ) [EOL] [EOL] def execute ( self , input_dto ) : [EOL] self . _rss_page_repo . save ( entities . RssPage ( url = input_dto . url ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[picorss.src.application.use_cases.adding_rss_page.AddingRssPageUseCase]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $AddingRssPageUseCase.InputDTO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $AddingRssPageUseCase.InputDTO$ 0 0 0 0 0 0
from picorss . src . application . repositories . rss_page import RssPageRepo [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
import picorss [EOL] import abc [EOL] [EOL] from picorss . src . domain import entities [EOL] [EOL] [EOL] class RssPageRepo : [EOL] [EOL] @ abc . abstractmethod def save ( self , rss_page ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $picorss.src.domain.entities.RssPage$ 0 0 0 0 0
from picorss . src . application . queries . rss_pages import GettingRssPageQuery [comment] [EOL] from picorss . src . application . queries . rss_pages import GettingRssPagesQuery [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import GettingRssPageQuery [EOL] import builtins [EOL] import GettingRssPagesQuery [EOL] import abc [EOL] [EOL] import attr [EOL] [EOL] [EOL] class GettingRssPageQuery ( metaclass = abc . ABCMeta ) : [EOL] [EOL] @ attr . s class OutputDto : [EOL] id = attr . ib ( ) [EOL] url = attr . ib ( ) [EOL] [EOL] @ abc . abstractmethod def execute ( self , page_id ) : [EOL] pass [EOL] [EOL] [EOL] class GettingRssPagesQuery ( metaclass = abc . ABCMeta ) : [EOL] [EOL] @ attr . s class OutputDto : [EOL] rss_pages = attr . ib ( ) [EOL] [EOL] @ abc . abstractmethod def execute ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $GettingRssPageQuery.OutputDto$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GettingRssPageQuery.OutputDto$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $GettingRssPagesQuery.OutputDto$ 0 0 0 0 0 0 0
	0
from picorss . src . domain . entities . rss_page import RssPage [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import attr [EOL] [EOL] [EOL] @ attr . s class Category : [EOL] name = attr . ib ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
import builtins [EOL] import attr [EOL] [EOL] [EOL] @ attr . s class RssPage : [EOL] url = attr . ib ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
	0
from typing import Any , Callable [EOL] import sqlalchemy [EOL] import inject [EOL] import typing [EOL] import inject [EOL] import typing [EOL] [EOL] from sqlalchemy import orm [EOL] [EOL] from picorss . src . application import queries , repositories [EOL] from picorss . src . infrastructure import ( queries as orm_queries , repositories as orm_repositories , ) [EOL] [EOL] [EOL] def inject_dependencies ( Session ) : [EOL] session = Session ( ) [EOL] [EOL] def inject_config ( binder ) : [EOL] [comment] [EOL] binder . bind ( queries . GettingRssPageQuery , orm_queries . ORMGettingRssPageQuery ( session ) ) [EOL] binder . bind ( queries . GettingRssPagesQuery , orm_queries . ORMGettingRssPagesQuery ( session ) ) [EOL] [EOL] [comment] [EOL] binder . bind ( repositories . RssPageRepo , orm_repositories . RssPageRepo ( session ) ) [EOL] [EOL] inject . configure ( inject_config , bind_in_runtime = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Union [EOL] import flask [EOL] import typing [EOL] import flask [EOL] import sqlalchemy [EOL] from sqlalchemy import orm [EOL] [EOL] from picorss . src . web import global_inject [EOL] from picorss . src . web . views import rss_page_bp [EOL] [EOL] app = flask . Flask ( __name__ ) [EOL] app . debug = True [EOL] app . secret_key = [string] [EOL] [EOL] app . register_blueprint ( rss_page_bp ) [EOL] [EOL] engine = sqlalchemy . create_engine ( f" [string] " , echo = True ) [EOL] [EOL] Session = orm . scoped_session ( orm . sessionmaker ( bind = engine ) ) [EOL] [EOL] [EOL] @ app . teardown_appcontext def teardown_appcontext ( exception ) : [EOL] Session . remove ( ) [EOL] [EOL] [EOL] global_inject . inject_dependencies ( Session ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from picorss . src . web . views . rss_page import bp as rss_page_bp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from picorss . src . infrastructure . queries . rss_pages import ( ORMGettingRssPageQuery , ORMGettingRssPagesQuery ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import sqlalchemy [EOL] import picorss [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy import orm [EOL] [EOL] from picorss . src . application import queries [EOL] from picorss . src . infrastructure import models [EOL] [EOL] import feedparser [EOL] [EOL] [EOL] class ORMGettingRssPageQuery ( queries . GettingRssPageQuery ) : [EOL] def __init__ ( self , session ) : [EOL] self . _session = session [EOL] [EOL] def execute ( self , page_id ) : [EOL] rss_page = self . _session . query ( models . RssPage ) . filter_by ( id = page_id ) . one ( ) [EOL] return _translate_to_dto ( rss_page ) [EOL] [EOL] [EOL] class ORMGettingRssPagesQuery ( queries . GettingRssPagesQuery ) : [EOL] def __init__ ( self , session ) : [EOL] self . _session = session [EOL] [EOL] def execute ( self ) : [EOL] rss_pages = self . _session . query ( models . RssPage ) . all ( ) [EOL] output_dto = [ _translate_to_dto ( rss_page ) for rss_page in rss_pages ] [EOL] return queries . GettingRssPagesQuery . OutputDto ( rss_pages = output_dto ) [EOL] [EOL] [EOL] def _translate_to_dto ( rss_page ) : [EOL] return queries . GettingRssPageQuery . OutputDto ( id = rss_page . id , url = rss_page . url ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 $picorss.src.application.queries.GettingRssPageQuery.OutputDto$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 $picorss.src.application.queries.GettingRssPagesQuery.OutputDto$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[picorss.src.application.queries.rss_pages.GettingRssPageQuery.OutputDto]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[picorss.src.application.queries.rss_pages.GettingRssPageQuery.OutputDto]$ 0 0 0 0 0 $picorss.src.application.queries.GettingRssPageQuery.OutputDto$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from sqlalchemy import schema [EOL] from sqlalchemy . ext import declarative [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] NAMING_CONVENTION = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] metadata = schema . MetaData ( naming_convention = NAMING_CONVENTION ) [EOL] Base = declarative . declarative_base ( metadata = metadata ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0
from picorss . src . infrastructure . models . page import RssPage [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import picorss [EOL] import typing [EOL] import sqlalchemy [EOL] from sqlalchemy . sql import sqltypes [EOL] [EOL] from picorss . src . infrastructure . models import meta [EOL] [EOL] [EOL] class RssPage ( meta . Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = sqlalchemy . Column ( sqltypes . Integer , primary_key = True ) [EOL] url = sqlalchemy . Column ( sqltypes . String , nullable = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[picorss.src.infrastructure.models.page.RssPage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[picorss.src.infrastructure.models.page.RssPage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import sqlalchemy [EOL] import picorss [EOL] import typing [EOL] from sqlalchemy import orm [EOL] [EOL] from picorss . src . application import repositories [EOL] from picorss . src . domain import entities [EOL] from picorss . src . infrastructure import models [EOL] [EOL] [EOL] class RssPageRepo ( repositories . RssPageRepo ) : [EOL] def __init__ ( self , session ) : [EOL] self . _session = session [EOL] [EOL] def save ( self , rss_page ) : [EOL] rss_page_model = models . RssPage ( url = rss_page . url ) [EOL] self . _session . add ( rss_page_model ) [EOL] self . _session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 $None$ 0 0 0 $picorss.src.domain.entities.RssPage$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $picorss.src.domain.entities.RssPage$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from picorss . src . infrastructure . repositories . rss_page import RssPageRepo [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import sqlalchemy [EOL] import picorss [EOL] import builtins [EOL] import typing [EOL] import os [EOL] [EOL] import sqlalchemy [EOL] from sqlalchemy import orm [EOL] [EOL] from picorss . src . domain import entities [EOL] from picorss . src . infrastructure import repositories , models [EOL] from picorss . src . infrastructure . models import meta [EOL] [EOL] [EOL] class IntTestConnection : [EOL] def __init__ ( self , tmp_path ) : [EOL] self . _file_path = f"{ tmp_path } [string] " [EOL] [EOL] engine = sqlalchemy . create_engine ( self . url , echo = True ) [EOL] [EOL] Session = orm . sessionmaker ( bind = engine ) [EOL] self . session = Session ( ) [EOL] [EOL] meta . Base . metadata . create_all ( engine ) [EOL] [EOL] @ property def url ( self ) : [EOL] return f" [string] { self . _file_path }" [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_val , exc_tb ) : [EOL] os . remove ( self . _file_path ) [EOL] [EOL] [EOL] def test_rss_page_should_be_saved ( tmp_path ) : [EOL] with IntTestConnection ( tmp_path ) as conn : [EOL] rss_page_repo = repositories . RssPageRepo ( conn . session ) [EOL] rss_page_repo . save ( entities . RssPage ( url = [string] ) ) [EOL] [EOL] assert conn . session . query ( models . RssPage ) . one ( ) . url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.Session$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $sqlalchemy.orm.Session$ 0 $sqlalchemy.orm.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'IntTestConnection'$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
import picorss [EOL] import pytest [EOL] [EOL] from picorss . src . domain import entities [EOL] [EOL] [EOL] @ pytest . fixture ( ) def rss_page ( ) : [EOL] return entities . RssPage ( url = [string] ) [EOL] [EOL] [EOL] def test_rss_page_has_url ( rss_page ) : [EOL] assert rss_page . url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $picorss.src.domain.entities.RssPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0
	0