import io [EOL] import re [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] def get_version_from_changelog ( ) : [EOL] try : [EOL] with io . open ( [string] , encoding = [string] ) as stream : [EOL] return re . search ( [string] , next ( stream ) ) . group ( [number] ) [EOL] except IOError : [EOL] print ( [string] ) [EOL] return [string] [EOL] [EOL] [EOL] setup ( name = [string] , description = [string] , long_description = io . open ( [string] ) . read ( ) , long_description_content_type = [string] , version = get_version_from_changelog ( ) , include_package_data = True , author = [string] , author_email = [string] , url = [string] , install_requires = io . open ( [string] ) . read ( ) . splitlines ( ) , packages = find_packages ( ) , entry_points = { [string] : [ [string] , ] } , classifiers = ( [string] , [string] , [string] , ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] import datetime [EOL] [EOL] import pytest [EOL] from hamcrest import ( all_of , assert_that , contains_string , greater_than , has_entries , is_ , smaller_than ) [EOL] [EOL] [EOL] class TestExample ( object ) : [EOL] def test_it_should_have_same_value ( self ) : [EOL] first = [string] [EOL] second = [string] [EOL] [EOL] assert_that ( first , is_ ( second ) ) [EOL] [EOL] def test_it_should_contain_personal_details ( self ) : [EOL] data = { [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] [EOL] assert_that ( data , has_entries ( name = contains_string ( [string] ) , age = all_of ( greater_than ( [number] ) , smaller_than ( [number] ) ) ) ) [EOL] [EOL] def test_it_should_validate_dates ( self ) : [EOL] bad_date = [string] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] datetime . datetime . strptime ( bad_date , [string] ) [EOL] [EOL] def test_it_should_create_files ( self , tmpdir ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import os [EOL] import os . path [EOL] [EOL] from . util import exec_command [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] NOT_MOUNTED = [string] [EOL] [EOL] [EOL] class HookedDriver ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] cmd_ret = exec_command ( config , [string] ) [EOL] log . info ( [string] . format ( cmd_ret ) ) [EOL] [EOL] def create ( self , volname , options ) : [EOL] if not volname : [EOL] raise ValueError ( [string] ) [EOL] str_opts = [string] . join ( [ [string] . format ( k , v ) for k , v in options . items ( ) ] ) [EOL] cmd_ret = exec_command ( self . config , [string] , volname , str_opts ) [EOL] log . info ( [string] . format ( volname , options , cmd_ret ) ) [EOL] return [string] [EOL] [EOL] def list ( self ) : [EOL] cmd_ret = exec_command ( self . config , [string] ) [EOL] log . info ( [string] . format ( cmd_ret ) ) [EOL] return cmd_ret . splitlines ( ) [EOL] [EOL] def path ( self , volname ) : [EOL] if not volname : [EOL] raise ValueError ( [string] ) [EOL] cmd_ret = exec_command ( self . config , [string] , volname ) [EOL] log . info ( [string] . format ( volname , cmd_ret ) ) [EOL] return cmd_ret [EOL] [EOL] def remove ( self , volname ) : [EOL] if not volname : [EOL] raise ValueError ( [string] ) [EOL] cmd_ret = exec_command ( self . config , [string] , volname ) [EOL] log . info ( [string] . format ( volname , cmd_ret ) ) [EOL] return cmd_ret [EOL] [EOL] def mount ( self , volname ) : [EOL] if not volname : [EOL] raise ValueError ( [string] ) [EOL] cmd_ret = exec_command ( self . config , [string] , volname ) [EOL] log . info ( [string] . format ( volname , cmd_ret ) ) [EOL] return cmd_ret [EOL] [EOL] def umount ( self , volname ) : [EOL] if not volname : [EOL] raise ValueError ( [string] ) [EOL] cmd_ret = exec_command ( self . config , [string] , volname ) [EOL] log . info ( [string] . format ( volname , cmd_ret ) ) [EOL] return cmd_ret [EOL] [EOL] def cleanup ( self ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def scope ( self ) : [EOL] cmd_ret = exec_command ( self . config , [string] ) [EOL] log . info ( [string] . format ( cmd_ret ) ) [EOL] return cmd_ret [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
from typing import Any , List [EOL] import subprocess [EOL] import typing [EOL] import logging [EOL] import subprocess [EOL] import shlex [EOL] import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def exec_command ( config , name , * args ) : [EOL] if name in config . get ( [string] , { } ) : [EOL] cmd_args = shlex . split ( config [ [string] ] [ name ] ) + list ( args ) [EOL] ret = subprocess . Popen ( args = cmd_args , env = config . get ( [string] , { } ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] stdout , stderr = ret . communicate ( ) [EOL] logger . info ( [string] . format ( name , args , stdout ) ) [EOL] logger . info ( [string] . format ( name , args , stderr ) ) [EOL] if ret . returncode != [number] : [EOL] raise Exception ( [string] . format ( name , ret . returncode , stdout , stderr ) ) [EOL] return stdout . decode ( [string] ) . strip ( ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Any , List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] def cmd ( name ) : [EOL] return [string] . format ( name ) [EOL] [EOL] [EOL] DEFAULTS = { [string] : { [string] : [string] , } , [string] : { } , [string] : { [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , [string] : cmd ( [string] ) , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,typing.Any],typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import click [EOL] import logging [EOL] import pkg_resources [EOL] import sys [EOL] import logging [EOL] [EOL] import click [EOL] import confight [EOL] [EOL] from docker_volume_nest . defaults import DEFAULTS [EOL] from docker_volume_nest . util import exec_command [EOL] from . service import serve_app [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_version ( ) : [EOL] return pkg_resources . get_distribution ( [string] ) . version [EOL] [EOL] [EOL] def cb_load_config ( ctx , param , value ) : [EOL] return confight . load_app ( value ) or DEFAULTS [EOL] [EOL] [EOL] app_name_option = click . option ( [string] , [string] , default = [string] , callback = cb_load_config ) [EOL] [EOL] volname = click . argument ( [string] , nargs = [number] ) [EOL] [EOL] [EOL] @ click . group ( ) def cli ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option def serve ( config ) : [EOL] [docstring] [EOL] serve_app ( config ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option def init ( config ) : [EOL] [docstring] [EOL] exec_command ( config , [string] ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option @ volname def create ( config , volname ) : [EOL] [docstring] [EOL] exec_command ( config , [string] , volname ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option def list ( config ) : [EOL] [docstring] [EOL] exec_command ( config , [string] ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option @ volname def path ( config , volname ) : [EOL] [docstring] [EOL] exec_command ( config , [string] , volname ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option @ volname def remove ( config , volname ) : [EOL] [docstring] [EOL] exec_command ( config , [string] , volname ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option @ volname def mount ( config , volname ) : [EOL] [docstring] [EOL] exec_command ( config , [string] , volname ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option @ volname def unmount ( config , volname ) : [EOL] [docstring] [EOL] exec_command ( config , [string] , volname ) [EOL] [EOL] [EOL] @ cli . command ( ) @ app_name_option def scope ( config ) : [EOL] exec_command ( config , [string] ) [EOL] [EOL] [EOL] @ cli . command ( ) def version ( ) : [EOL] [docstring] [EOL] click . echo ( get_version ( ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] try : [EOL] cli ( auto_envvar_prefix = [string] ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] click . secho ( str ( e ) , color = [string] ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 $click.decorators._IdentityFunction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import docker_volume_nest [EOL] import logging [EOL] import typing [EOL] import flask [EOL] import logging [EOL] from functools import wraps [EOL] [EOL] from flask import Flask [EOL] from flask import jsonify [EOL] from flask import request [EOL] from gunicorn . app . base import BaseApplication [EOL] [EOL] from docker_volume_nest . defaults import DEFAULTS [EOL] from . driver import HookedDriver [EOL] [EOL] app = Flask ( __name__ ) [EOL] DEFAULT_BASE = [string] [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class MountMgr ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , counter , mntpoint ) : [EOL] self . counter = counter [EOL] self . mntpoint = mntpoint [EOL] [EOL] [EOL] class VolumeManager ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . driver = HookedDriver ( config ) [EOL] self . mount_mgr = { } [EOL] [EOL] def cleanup ( self ) : [EOL] [docstring] [EOL] for volume in self . mount_mgr : [EOL] self . mount_mgr [ volume ] . counter = [number] [EOL] self . mount_mgr [ volume ] . mntpoint = None [EOL] self . driver . cleanup ( ) [EOL] [EOL] [EOL] def normalize ( f ) : [EOL] [docstring] [EOL] @ wraps ( f ) def inner_function ( * args , ** kwargs ) : [EOL] data = f ( * args , ** kwargs ) [EOL] print ( data ) [EOL] if [string] in data and data [ [string] ] != [string] : [EOL] code = [number] [EOL] else : [EOL] code = [number] [EOL] resp = jsonify ( data ) [EOL] resp . status_code = code [EOL] return resp [EOL] return inner_function [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def implements ( ) : [EOL] [docstring] [EOL] return { [string] : [ [string] ] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def create_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] options = rdata [ [string] ] [EOL] [EOL] try : [EOL] volm . driver . create ( vol_name , options ) [EOL] except Exception as e : [EOL] return { [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return [string] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def remove_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] try : [EOL] volm . driver . remove ( vol_name ) [EOL] except Exception as e : [EOL] return { [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def mount_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] [comment] [EOL] [EOL] if vol_name in volm . mount_mgr : [EOL] mntpoint = volm . mount_mgr [ vol_name ] . mntpoint [EOL] volm . mount_mgr [ vol_name ] . counter += [number] [EOL] log . info ( [string] . format ( vol_name , volm . mount_mgr [ vol_name ] . counter ) ) [EOL] return { [string] : mntpoint , [string] : [string] } [EOL] [EOL] try : [EOL] mntpoint = volm . driver . mount ( vol_name ) [EOL] volm . mount_mgr [ vol_name ] = MountMgr ( [number] , mntpoint ) [EOL] except Exception as e : [EOL] return { [string] : [string] , [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] return { [string] : mntpoint , [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def path_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] try : [EOL] mntpoint = volm . driver . path ( vol_name ) [EOL] except Exception as e : [EOL] return { [string] : [string] , [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] if not mntpoint : [EOL] return { [string] : [string] , [string] : [string] . format ( vol_name ) } [EOL] return { [string] : mntpoint , [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def unmount_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] [comment] [EOL] [EOL] if vol_name in volm . mount_mgr : [EOL] [comment] [EOL] volm . mount_mgr [ vol_name ] . counter -= [number] [EOL] if volm . mount_mgr [ vol_name ] . counter > [number] : [EOL] log . info ( [string] . format ( volm . mount_mgr [ vol_name ] . counter ) ) [EOL] return { [string] : [string] } [EOL] [EOL] try : [EOL] res = volm . driver . umount ( vol_name ) [EOL] if not res : [EOL] return { [string] : [string] . format ( vol_name ) } [EOL] volm . mount_mgr . pop ( vol_name ) [EOL] except Exception as e : [EOL] return { [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def get_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] rdata = request . get_json ( force = True ) [EOL] vol_name = rdata [ [string] ] . strip ( [string] ) [EOL] try : [EOL] mntpoint = volm . driver . path ( vol_name ) [EOL] except Exception as e : [EOL] return { [string] : [string] . format ( vol_name , str ( e ) ) } [EOL] [EOL] if not mntpoint : [EOL] return { [string] : [string] , [string] : [string] . format ( vol_name ) } [EOL] [EOL] return { [string] : { [string] : vol_name , [string] : mntpoint , [string] : { } , } , [string] : [string] , } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def list_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] mnt_list = [ ] [EOL] try : [EOL] vol_list = volm . driver . list ( ) [EOL] for volume in vol_list : [EOL] mntpoint = volm . driver . path ( volume ) [EOL] if not mntpoint : [EOL] mntpoint = [string] [EOL] mnt_list += [ { [string] : volume , [string] : mntpoint , } ] [EOL] [EOL] except Exception as e : [EOL] return { [string] : [string] . format ( str ( e ) ) } [EOL] [EOL] return { [string] : mnt_list , [string] : [string] } [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ normalize def capabilities_volume ( ) : [EOL] [docstring] [EOL] volm = app . config [ [string] ] [EOL] scope = volm . driver . scope ( ) [EOL] return { [string] : { [string] : scope } } [EOL] [EOL] [EOL] def shutdown_server ( ) : [EOL] [docstring] [EOL] func = request . environ . get ( [string] ) [EOL] if func is None : [EOL] raise RuntimeError ( [string] ) [EOL] func ( ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def shutdown ( ) : [EOL] [docstring] [EOL] shutdown_server ( ) [EOL] return [string] [EOL] [EOL] [EOL] class StandaloneApplication ( BaseApplication ) : [EOL] def __init__ ( self , app , options = None ) : [EOL] self . options = options or { } [EOL] self . application = app [EOL] super ( StandaloneApplication , self ) . __init__ ( ) [EOL] [EOL] def load_config ( self ) : [EOL] config = dict ( [ ( key , value ) for key , value in self . options . items ( ) if key in self . cfg . settings and value is not None ] ) [EOL] for key , value in config . items ( ) : [EOL] self . cfg . set ( key . lower ( ) , value ) [EOL] [EOL] def load ( self ) : [EOL] return self . application [EOL] [EOL] [EOL] def serve_app ( config ) : [EOL] plugin_config = config . get ( [string] ) [EOL] volmer = VolumeManager ( config ) [EOL] app . config [ [string] ] = volmer [EOL] [EOL] try : [EOL] options = plugin_config [EOL] StandaloneApplication ( app , options ) . run ( ) [EOL] finally : [EOL] volmer . cleanup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docker_volume_nest.driver.HookedDriver$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0