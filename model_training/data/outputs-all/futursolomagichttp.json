[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from setuptools import setup , find_packages [EOL] [EOL] import sys [EOL] [EOL] if not sys . version_info [ : [number] ] >= ( [number] , [number] , [number] ) : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] [EOL] setup_requires = [ i for i in open ( [string] ) . read ( ) . split ( [string] ) if i ] [EOL] [EOL] install_requires = [ i for i in open ( [string] ) . read ( ) . split ( [string] ) if i ] [EOL] [EOL] tests_require = [ i for i in open ( [string] ) . read ( ) . split ( [string] ) if i ] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] setup ( name = [string] , use_scm_version = { [string] : lambda v : [string] } , author = [string] , author_email = [string] , python_requires = [string] , url = [string] , license = [string] , description = [string] , long_description = open ( [string] , [string] ) . read ( ) , packages = find_packages ( ) , package_data = { [string] : [ [string] ] } , include_package_data = True , setup_requires = setup_requires , install_requires = install_requires , tests_require = tests_require , extras_require = { [string] : tests_require } , zip_safe = False , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Type [EOL] import typing [EOL] import http [EOL] import enum [EOL] import http [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class HttpVersion ( enum . Enum ) : [EOL] V1_0 = [string] [EOL] V1_1 = [string] [EOL] [EOL] [EOL] class HttpRequestMethod ( enum . Enum ) : [EOL] GET = [string] [EOL] POST = [string] [EOL] PUT = [string] [EOL] DELETE = [string] [EOL] HEAD = [string] [EOL] OPTIONS = [string] [EOL] CONNECT = [string] [EOL] TRACE = [string] [EOL] PATCH = [string] [EOL] [EOL] [EOL] HttpStatusCode = http . HTTPStatus [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Type[http.HTTPStatus]$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Tuple , List [EOL] import asyncio [EOL] import builtins [EOL] import typing [EOL] import magichttp [EOL] from typing import Optional [EOL] [EOL] import abc [EOL] import asyncio [EOL] import typing [EOL] [EOL] if typing . TYPE_CHECKING : [comment] [EOL] from . import initials [comment] [EOL] from . import readers [comment] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class BaseWriteException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class WriteAfterFinishedError ( EOFError , BaseWriteException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class WriteAbortedError ( BaseWriteException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class BaseHttpStreamWriterDelegate ( abc . ABC ) : [comment] [EOL] @ abc . abstractmethod def write_data ( self , data , finished = False ) : [EOL] raise NotImplementedError [EOL] [EOL] @ abc . abstractmethod async def flush_buf ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ abc . abstractmethod def abort ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class BaseHttpStreamWriter ( abc . ABC ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate ) : [EOL] self . _delegate = __delegate [EOL] [EOL] self . _flush_lock = asyncio . Lock ( ) [EOL] [EOL] self . _finished = asyncio . Event ( ) [EOL] self . _exc = None [EOL] [EOL] def write ( self , data ) : [EOL] [docstring] [EOL] if self . finished ( ) : [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] raise WriteAfterFinishedError [EOL] [EOL] if not data : [EOL] return [EOL] [EOL] try : [EOL] self . _delegate . write_data ( data , finished = False ) [EOL] [EOL] except BaseWriteException as e : [EOL] self . _finished . set ( ) [EOL] if self . _exc is None : [EOL] self . _exc = e [EOL] [EOL] raise [EOL] [EOL] async def flush ( self ) : [EOL] [docstring] [EOL] async with self . _flush_lock : [EOL] if self . finished ( ) : [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] return [EOL] [EOL] try : [EOL] await self . _delegate . flush_buf ( ) [EOL] [EOL] except asyncio . CancelledError : [comment] [EOL] raise [EOL] [EOL] except BaseWriteException as e : [EOL] self . _finished . set ( ) [EOL] if self . _exc is None : [EOL] self . _exc = e [EOL] [EOL] raise [EOL] [EOL] def finish ( self , data = [string] ) : [EOL] [docstring] [EOL] if self . finished ( ) : [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] if data : [EOL] raise WriteAfterFinishedError [EOL] [EOL] return [EOL] [EOL] try : [EOL] self . _delegate . write_data ( data , finished = True ) [EOL] [EOL] except BaseWriteException as e : [EOL] if self . _exc is None : [EOL] self . _exc = e [EOL] [EOL] raise [EOL] [EOL] finally : [EOL] self . _finished . set ( ) [EOL] [EOL] def finished ( self ) : [EOL] [docstring] [EOL] return self . _finished . is_set ( ) [EOL] [EOL] async def wait_finished ( self ) : [EOL] [docstring] [EOL] await self . _finished . wait ( ) [EOL] [EOL] def abort ( self ) : [EOL] [docstring] [EOL] self . _delegate . abort ( ) [EOL] [EOL] [EOL] class HttpRequestWriterDelegate ( BaseHttpStreamWriterDelegate ) : [comment] [EOL] @ abc . abstractmethod async def read_response ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class HttpRequestWriter ( BaseHttpStreamWriter ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate , * , initial ) : [EOL] super ( ) . __init__ ( __delegate ) [EOL] self . __delegate = __delegate [EOL] [EOL] self . _initial = initial [EOL] [EOL] self . _reader = None [EOL] [EOL] @ property def initial ( self ) : [EOL] [docstring] [EOL] return self . _initial [EOL] [EOL] @ property def reader ( self ) : [EOL] [docstring] [EOL] if self . _reader is None : [EOL] raise AttributeError ( [string] ) [EOL] [EOL] return self . _reader [EOL] [EOL] async def read_response ( self ) : [EOL] [docstring] [EOL] self . _reader = await self . __delegate . read_response ( ) [EOL] [EOL] return self . _reader [EOL] [EOL] [EOL] class HttpResponseWriterDelegate ( BaseHttpStreamWriterDelegate ) : [EOL] pass [EOL] [EOL] [EOL] class HttpResponseWriter ( BaseHttpStreamWriter ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate , * , initial , reader ) : [EOL] super ( ) . __init__ ( __delegate ) [EOL] [EOL] self . _initial = initial [EOL] [EOL] self . _reader = reader [EOL] [EOL] @ property def initial ( self ) : [EOL] [docstring] [EOL] return self . _initial [EOL] [EOL] @ property def reader ( self ) : [EOL] [docstring] [EOL] if self . _reader is None : [EOL] raise AttributeError ( [string] [string] ) [EOL] [EOL] return self . _reader [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $BaseHttpStreamWriterDelegate$ 0 0 0 0 0 $magichttp.writers.BaseHttpStreamWriterDelegate$ 0 $BaseHttpStreamWriterDelegate$ 0 0 0 0 $asyncio.locks.Lock$ 0 0 0 0 0 0 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 0 0 0 $typing.Optional[BaseWriteException]$ 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 $typing.Optional[magichttp.writers.BaseWriteException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"readers.HttpResponseReader"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $magichttp.writers.HttpRequestWriterDelegate$ 0 0 0 $"initials.HttpRequestInitial"$ 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriterDelegate$ 0 0 0 0 $magichttp.writers.HttpRequestWriterDelegate$ 0 $magichttp.writers.HttpRequestWriterDelegate$ 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 $"initials.HttpRequestInitial"$ 0 0 0 0 $typing.Optional["readers.HttpResponseReader"]$ 0 0 0 0 0 0 0 $"initials.HttpRequestInitial"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"readers.HttpResponseReader"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"readers.HttpResponseReader"$ 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.readers.HttpResponseReader]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.readers.HttpResponseReader]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $HttpResponseWriterDelegate$ 0 0 0 $"initials.HttpResponseInitial"$ 0 $typing.Optional["readers.HttpRequestReader"]$ 0 0 0 0 0 0 0 0 0 $HttpResponseWriterDelegate$ 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 $"initials.HttpResponseInitial"$ 0 0 0 0 $typing.Optional[magichttp.readers.HttpRequestReader]$ 0 $typing.Optional["readers.HttpRequestReader"]$ 0 0 0 0 0 $"initials.HttpResponseInitial"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"readers.HttpRequestReader"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Union , List [EOL] import builtins [EOL] import typing [EOL] import constants [EOL] import magichttp [EOL] from typing import Union , Mapping , Iterable , Tuple , Optional , Any [EOL] [EOL] from . import constants [EOL] [EOL] import abc [EOL] import asyncio [EOL] import typing [EOL] [EOL] if typing . TYPE_CHECKING : [comment] [EOL] from . import initials [comment] [EOL] from . import writers [comment] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] _HeaderType = Union [ Mapping [ str , str ] , Iterable [ Tuple [ str , str ] ] ] [EOL] [EOL] [EOL] class BaseReadException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class EntityTooLargeError ( BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class RequestInitialTooLargeError ( EntityTooLargeError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , __delegate , * args ) : [EOL] super ( ) . __init__ ( * args ) [EOL] [EOL] self . _delegate = __delegate [EOL] [EOL] def write_response ( self , status_code = constants . HttpStatusCode . REQUEST_HEADER_FIELDS_TOO_LARGE , * , headers = None ) : [EOL] [docstring] [EOL] return self . _delegate . write_response ( constants . HttpStatusCode ( status_code ) , headers = headers ) [EOL] [EOL] [EOL] class ReadFinishedError ( EOFError , BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ReadAbortedError ( BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class MaxBufferLengthReachedError ( BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ReadUnsatisfiableError ( BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class SeparatorNotFoundError ( ReadUnsatisfiableError ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ReceivedDataMalformedError ( BaseReadException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class RequestInitialMalformedError ( ReceivedDataMalformedError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , __delegate , * args ) : [EOL] super ( ) . __init__ ( * args ) [EOL] [EOL] self . _delegate = __delegate [EOL] [EOL] def write_response ( self , status_code = constants . HttpStatusCode . BAD_REQUEST , * , headers = None ) : [EOL] [docstring] [EOL] return self . _delegate . write_response ( constants . HttpStatusCode ( status_code ) , headers = headers ) [EOL] [EOL] [EOL] class BaseHttpStreamReaderDelegate ( abc . ABC ) : [comment] [EOL] @ abc . abstractmethod def pause_reading ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ abc . abstractmethod def resume_reading ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ abc . abstractmethod def abort ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class BaseHttpStreamReader ( abc . ABC ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate ) : [EOL] self . _delegate = __delegate [EOL] self . _max_buf_len = [number] * [number] * [number] [comment] [EOL] [EOL] self . _buf = bytearray ( ) [EOL] self . _wait_for_data_fur = None [EOL] [EOL] self . _read_lock = asyncio . Lock ( ) [EOL] [EOL] self . _end_appended = asyncio . Event ( ) [EOL] self . _exc = None [EOL] [EOL] def _append_data ( self , data ) : [EOL] assert not self . _end_appended . is_set ( ) , [string] [EOL] [EOL] if not data : [comment] [EOL] return [EOL] [EOL] self . _buf += data [EOL] [EOL] if len ( self ) >= self . max_buf_len : [EOL] self . _delegate . pause_reading ( ) [EOL] [EOL] if self . _wait_for_data_fur is not None and not self . _wait_for_data_fur . done ( ) : [EOL] self . _wait_for_data_fur . set_result ( None ) [EOL] [EOL] def _append_end ( self , exc ) : [EOL] if self . _end_appended . is_set ( ) : [comment] [EOL] return [EOL] [EOL] if exc : [EOL] self . _exc = exc [EOL] [EOL] self . _end_appended . set ( ) [EOL] [EOL] if self . _wait_for_data_fur is not None and not self . _wait_for_data_fur . done ( ) : [EOL] self . _wait_for_data_fur . set_result ( None ) [EOL] [EOL] def _raise_exc_if_finished ( self ) : [EOL] if not self . finished ( ) : [EOL] return [EOL] [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] raise ReadFinishedError [EOL] [EOL] def _raise_exc_if_end_appended ( self ) : [EOL] if not self . _end_appended . is_set ( ) : [EOL] return [EOL] [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] raise ReadFinishedError [EOL] [EOL] async def _wait_for_data ( self ) : [EOL] self . _raise_exc_if_end_appended ( ) [EOL] [EOL] self . _delegate . resume_reading ( ) [EOL] [EOL] self . _wait_for_data_fur = asyncio . Future ( ) [EOL] try : [EOL] await self . _wait_for_data_fur [EOL] [EOL] self . _raise_exc_if_end_appended ( ) [EOL] [EOL] except asyncio . CancelledError : [comment] [EOL] raise [EOL] [EOL] finally : [EOL] self . _wait_for_data_fur = None [EOL] [EOL] @ property def max_buf_len ( self ) : [EOL] [docstring] [EOL] return self . _max_buf_len [EOL] [EOL] @ max_buf_len . setter def max_buf_len ( self , new_max_buf_len ) : [EOL] [docstring] [EOL] assert not self . busy ( ) , [string] [EOL] [EOL] self . _max_buf_len = new_max_buf_len [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _buf ) [EOL] [EOL] async def read ( self , n = - [number] , exactly = False ) : [EOL] [docstring] [EOL] async with self . _read_lock : [EOL] self . _raise_exc_if_finished ( ) [EOL] [EOL] if n == [number] : [EOL] return [string] [EOL] [EOL] if exactly : [EOL] if n < [number] : [comment] [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] if n > self . max_buf_len : [comment] [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] while len ( self ) < n : [EOL] try : [EOL] await self . _wait_for_data ( ) [EOL] [EOL] except asyncio . CancelledError : [comment] [EOL] raise [EOL] [EOL] except Exception as e : [EOL] raise ReadUnsatisfiableError from e [EOL] [EOL] elif n < [number] : [EOL] while True : [EOL] if len ( self ) > self . max_buf_len : [EOL] raise MaxBufferLengthReachedError [EOL] [EOL] try : [EOL] await self . _wait_for_data ( ) [EOL] [EOL] except asyncio . CancelledError : [comment] [EOL] raise [EOL] [EOL] except Exception : [EOL] data = bytes ( self . _buf ) [EOL] self . _buf . clear ( ) [EOL] [EOL] return data [EOL] [EOL] elif len ( self ) == [number] : [EOL] await self . _wait_for_data ( ) [EOL] [EOL] data = bytes ( self . _buf [ [number] : n ] ) [EOL] del self . _buf [ [number] : n ] [EOL] [EOL] return data [EOL] [EOL] async def read_until ( self , separator = [string] , * , keep_separator = True ) : [EOL] [docstring] [EOL] async with self . _read_lock : [EOL] self . _raise_exc_if_finished ( ) [EOL] [EOL] start_pos = [number] [EOL] [EOL] while True : [EOL] separator_pos = self . _buf . find ( separator , start_pos ) [EOL] [EOL] if separator_pos != - [number] : [EOL] break [EOL] [EOL] if len ( self ) > self . max_buf_len : [EOL] raise MaxBufferLengthReachedError [EOL] [EOL] try : [EOL] await self . _wait_for_data ( ) [EOL] [EOL] except asyncio . CancelledError : [comment] [EOL] raise [EOL] [EOL] except Exception as e : [EOL] if len ( self ) > [number] : [EOL] raise SeparatorNotFoundError from e [EOL] [EOL] else : [EOL] raise [EOL] [EOL] new_start_pos = len ( self ) - len ( separator ) [EOL] [EOL] if new_start_pos > [number] : [EOL] start_pos = new_start_pos [EOL] [EOL] full_pos = separator_pos + len ( separator ) [EOL] [EOL] if keep_separator : [EOL] data_pos = full_pos [EOL] [EOL] else : [EOL] data_pos = separator_pos [EOL] [EOL] data = bytes ( self . _buf [ [number] : data_pos ] ) [EOL] del self . _buf [ [number] : full_pos ] [EOL] [EOL] return data [EOL] [EOL] def busy ( self ) : [EOL] [docstring] [EOL] return self . _read_lock . locked ( ) [EOL] [EOL] async def wait_end ( self ) : [EOL] [docstring] [EOL] await self . _end_appended . wait ( ) [EOL] [EOL] def end_appended ( self ) : [EOL] return self . _end_appended . is_set ( ) [EOL] [EOL] def finished ( self ) : [EOL] [docstring] [EOL] return len ( self ) == [number] and self . _end_appended . is_set ( ) [EOL] [EOL] def abort ( self ) : [EOL] [docstring] [EOL] self . _delegate . abort ( ) [EOL] [EOL] [EOL] class HttpRequestReaderDelegate ( BaseHttpStreamReaderDelegate ) : [comment] [EOL] @ abc . abstractmethod def write_response ( self , status_code , * , headers ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class HttpRequestReader ( BaseHttpStreamReader ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate , * , initial ) : [EOL] super ( ) . __init__ ( __delegate ) [EOL] self . __delegate = __delegate [EOL] [EOL] self . _initial = initial [EOL] [EOL] self . _writer = None [EOL] [EOL] @ property def initial ( self ) : [EOL] [docstring] [EOL] return self . _initial [EOL] [EOL] @ property def writer ( self ) : [EOL] [docstring] [EOL] if self . _writer is None : [EOL] raise AttributeError ( [string] ) [EOL] [EOL] return self . _writer [EOL] [EOL] def write_response ( self , status_code , * , headers = None ) : [EOL] [docstring] [EOL] self . _writer = self . __delegate . write_response ( constants . HttpStatusCode ( status_code ) , headers = headers ) [EOL] [EOL] return self . _writer [EOL] [EOL] [EOL] class HttpResponseReaderDelegate ( BaseHttpStreamReaderDelegate ) : [EOL] pass [EOL] [EOL] [EOL] class HttpResponseReader ( BaseHttpStreamReader ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self , __delegate , * , initial , writer ) : [EOL] super ( ) . __init__ ( __delegate ) [EOL] [EOL] self . _initial = initial [EOL] [EOL] self . _writer = writer [EOL] [EOL] @ property def initial ( self ) : [EOL] [docstring] [EOL] return self . _initial [EOL] [EOL] @ property def writer ( self ) : [EOL] [docstring] [EOL] return self . _writer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $"HttpRequestReaderDelegate"$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReaderDelegate$ 0 $"HttpRequestReaderDelegate"$ 0 0 0 $"writers.HttpResponseWriter"$ 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 $typing.Optional[_HeaderType]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $"HttpRequestReaderDelegate"$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $"HttpRequestReaderDelegate"$ 0 0 0 $"writers.HttpResponseWriter"$ 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 $typing.Optional[_HeaderType]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $BaseHttpStreamReaderDelegate$ 0 0 0 0 0 0 0 $BaseHttpStreamReaderDelegate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional["asyncio.Future[None]"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[BaseReadException]$ 0 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.bytes,builtins.bytearray,builtins.memoryview]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.bytes,builtins.bytearray,builtins.memoryview]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.bytes,builtins.bytearray,builtins.memoryview]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[BaseReadException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[BaseReadException]$ 0 0 0 0 0 0 $typing.Optional[BaseReadException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"writers.HttpResponseWriter"$ 0 0 0 $constants.HttpStatusCode$ 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $"initials.HttpRequestInitial"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"initials.HttpRequestInitial"$ 0 0 0 0 $typing.Optional["writers.HttpResponseWriter"]$ 0 0 0 0 0 0 0 $"initials.HttpRequestInitial"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"writers.HttpResponseWriter"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"writers.HttpResponseWriter"$ 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,constants.HttpStatusCode]$ 0 0 $typing.Optional[_HeaderType]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $HttpResponseReaderDelegate$ 0 0 0 $"initials.HttpResponseInitial"$ 0 $"writers.HttpRequestWriter"$ 0 0 0 0 0 0 0 0 0 $HttpResponseReaderDelegate$ 0 0 0 0 0 0 0 $"initials.HttpResponseInitial"$ 0 0 0 0 0 0 $"writers.HttpRequestWriter"$ 0 0 0 0 0 $"initials.HttpResponseInitial"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"writers.HttpRequestWriter"$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import typing [EOL] [EOL] if typing . TYPE_CHECKING : [comment] [EOL] import importlib . metadata as importlib_metadata [EOL] [EOL] else : [EOL] try : [EOL] import importlib . metadata as importlib_metadata [EOL] [EOL] except ImportError : [EOL] import importlib_metadata [EOL] [EOL] __version__ = importlib_metadata . version ( __name__ . split ( [string] , [number] ) [ [number] ] ) [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from . import h1impl as _h1impl [comment] [EOL] [EOL] from . _version import * [comment] [EOL] from . constants import * [comment] [EOL] from . initials import * [comment] [EOL] from . protocols import * [comment] [EOL] from . readers import * [comment] [EOL] from . writers import * [comment] [EOL] [EOL] from . import _version [EOL] from . import constants [EOL] from . import initials [EOL] from . import protocols [EOL] from . import readers [EOL] from . import writers [EOL] [EOL] __all__ = _version . __all__ + constants . __all__ + initials . __all__ + protocols . __all__ + readers . __all__ + writers . __all__ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Tuple , List [EOL] import builtins [EOL] import typing [EOL] import initials [EOL] import magicdict [EOL] from typing import Optional , List , Tuple [EOL] [EOL] from . . import initials [EOL] from . . import constants [EOL] [EOL] import magicdict [EOL] [EOL] BODY_IS_CHUNKED = - [number] [EOL] BODY_IS_ENDLESS = - [number] [EOL] [EOL] [EOL] class UnparsableHttpMessage ( ValueError ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidHeader ( UnparsableHttpMessage ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidTransferEncoding ( InvalidHeader ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidContentLength ( InvalidHeader ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidChunkLength ( InvalidHeader ) : [EOL] pass [EOL] [EOL] [EOL] def is_chunked_body ( te_header_bytes ) : [EOL] te_header_pieces = [ i . strip ( ) . lower ( ) for i in te_header_bytes . split ( [string] ) if i ] [EOL] [EOL] last_piece = te_header_pieces . pop ( - [number] ) [EOL] [EOL] if ( [string] == last_piece and te_header_pieces ) or [string] in te_header_pieces : [EOL] raise InvalidTransferEncoding ( [string] ) [EOL] [EOL] if [string] in te_header_pieces : [EOL] raise InvalidTransferEncoding ( [string] ) [EOL] [EOL] return last_piece == [string] [EOL] [EOL] [EOL] def _parse_content_length_header ( cl_header_str ) : [EOL] try : [EOL] return int ( cl_header_str , [number] ) [EOL] [EOL] except ValueError as e : [EOL] raise InvalidContentLength ( [string] ) from e [EOL] [EOL] [EOL] def _split_initial_lines ( buf ) : [EOL] pos = buf . find ( [string] ) [EOL] [EOL] if pos == - [number] : [EOL] return None [EOL] [EOL] initial_buf = buf [ : pos ] [EOL] del buf [ : pos + [number] ] [EOL] [EOL] return initial_buf . decode ( [string] ) . split ( [string] ) [EOL] [EOL] [EOL] def _parse_headers ( header_lines ) : [EOL] headers = [ ] [EOL] [EOL] try : [EOL] for line in header_lines : [EOL] name , value = line . split ( [string] , [number] ) [EOL] [EOL] headers . append ( ( name . strip ( ) , value . strip ( ) ) ) [EOL] [EOL] except ValueError as e : [EOL] raise InvalidHeader ( [string] ) from e [EOL] [EOL] return magicdict . FrozenTolerantMagicDict ( headers ) [EOL] [EOL] [EOL] def parse_request_initial ( buf ) : [EOL] initial_lines = _split_initial_lines ( buf ) [EOL] [EOL] if initial_lines is None : [EOL] return None [EOL] [EOL] try : [EOL] method_buf , path_buf , version_buf = initial_lines . pop ( [number] ) . split ( [string] ) [EOL] [EOL] headers = _parse_headers ( initial_lines ) [EOL] [EOL] return initials . HttpRequestInitial ( constants . HttpRequestMethod ( method_buf . upper ( ) . strip ( ) ) , version = constants . HttpVersion ( version_buf . upper ( ) . strip ( ) ) , uri = path_buf , authority = headers . get ( [string] , None ) , scheme = headers . get_first ( [string] , None ) , headers = headers ) [EOL] [EOL] except InvalidHeader : [EOL] raise [EOL] [EOL] except ( IndexError , ValueError ) as e : [EOL] raise UnparsableHttpMessage ( [string] ) from e [EOL] [EOL] [EOL] def parse_response_initial ( buf , req_initial ) : [EOL] initial_lines = _split_initial_lines ( buf ) [EOL] [EOL] if initial_lines is None : [EOL] return None [EOL] [EOL] try : [EOL] version_buf , status_code_buf , * status_text = initial_lines . pop ( [number] ) . split ( [string] ) [EOL] [EOL] status_code = constants . HttpStatusCode ( int ( status_code_buf , [number] ) ) [EOL] [EOL] if status_code == constants . HttpStatusCode . CONTINUE : [EOL] [comment] [EOL] return parse_response_initial ( buf , req_initial ) [EOL] [EOL] return initials . HttpResponseInitial ( status_code , version = constants . HttpVersion ( version_buf ) , headers = _parse_headers ( initial_lines ) ) [EOL] [EOL] except InvalidHeader : [EOL] raise [EOL] [EOL] except ( IndexError , ValueError ) as e : [EOL] raise UnparsableHttpMessage ( [string] ) from e [EOL] [EOL] [EOL] def discover_request_body_length ( initial ) : [EOL] if [string] in initial . headers . keys ( ) : [EOL] return BODY_IS_ENDLESS [EOL] [EOL] if [string] in initial . headers and is_chunked_body ( initial . headers [ [string] ] ) : [EOL] return BODY_IS_CHUNKED [EOL] [EOL] if [string] in initial . headers : [EOL] return _parse_content_length_header ( initial . headers [ [string] ] ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] def discover_response_body_length ( initial , * , req_initial ) : [EOL] if initial . status_code == constants . HttpStatusCode . SWITCHING_PROTOCOLS or req_initial . method == constants . HttpRequestMethod . CONNECT : [EOL] return BODY_IS_ENDLESS [EOL] [EOL] [comment] [EOL] if req_initial . method == constants . HttpRequestMethod . HEAD or initial . status_code in ( constants . HttpStatusCode . NO_CONTENT , constants . HttpStatusCode . NOT_MODIFIED ) : [EOL] return [number] [EOL] [EOL] if [string] in initial . headers : [EOL] if is_chunked_body ( initial . headers [ [string] ] ) : [EOL] return BODY_IS_CHUNKED [EOL] [EOL] if [string] not in initial . headers : [EOL] [comment] [EOL] return BODY_IS_ENDLESS [EOL] [EOL] return _parse_content_length_header ( initial . headers [ [string] ] ) [EOL] [EOL] [EOL] def parse_chunk_length ( buf ) : [EOL] pos = buf . find ( [string] ) [EOL] [EOL] if pos == - [number] : [EOL] return None [EOL] [EOL] len_buf = buf [ : pos ] [EOL] del buf [ : pos + [number] ] [EOL] [EOL] len_buf = len_buf . split ( [string] , [number] ) [ [number] ] . strip ( ) [EOL] [EOL] try : [EOL] return int ( len_buf , [number] ) [EOL] [EOL] except ValueError as e : [EOL] raise InvalidChunkLength ( [string] ) from e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magicdict.FrozenTolerantMagicDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[initials.HttpResponseInitial]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional [EOL] import protocols [EOL] import builtins [EOL] import writers [EOL] import magichttp [EOL] import readers [EOL] import typing [EOL] import asyncio [EOL] import stream_mgrs [EOL] from typing import Optional , Union , Mapping , Iterable , Tuple [EOL] [EOL] from . import stream_mgrs [EOL] [EOL] from . . import protocols [EOL] from . . import readers [EOL] from . . import writers [EOL] [EOL] import abc [EOL] import asyncio [EOL] import typing [EOL] [EOL] if typing . TYPE_CHECKING : [EOL] from . . import constants [comment] [EOL] [EOL] _HeaderType = Union [ Mapping [ str , str ] , Iterable [ Tuple [ str , str ] ] ] [EOL] [EOL] [EOL] class BaseH1Impl ( protocols . BaseHttpProtocolDelegate ) : [EOL] def __init__ ( self , protocol ) : [EOL] self . _protocol = protocol [EOL] self . _transport = protocol . transport [EOL] [EOL] self . _buf = bytearray ( ) [EOL] [EOL] self . _reading_paused = False [EOL] [EOL] def _pause_reading ( self ) : [EOL] if self . _reading_paused : [EOL] return [EOL] [EOL] self . _transport . pause_reading ( ) [EOL] [EOL] self . _reading_paused = True [EOL] [EOL] def _resume_reading ( self ) : [EOL] if not self . _reading_paused : [EOL] return [EOL] [EOL] self . _transport . resume_reading ( ) [EOL] [EOL] self . _reading_paused = False [EOL] [EOL] @ property @ abc . abstractmethod def _stream ( self ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] def data_received ( self , data ) : [EOL] self . _buf += data [EOL] [EOL] self . _stream . _data_appended ( ) [EOL] [EOL] def eof_received ( self ) : [EOL] if not self . _stream . _finished ( ) : [EOL] self . _stream . _eof_received ( ) [EOL] [EOL] else : [EOL] self . _transport . close ( ) [EOL] [EOL] def close ( self ) : [EOL] if not self . _stream . _finished ( ) : [EOL] self . _stream . _mark_as_last_stream ( ) [EOL] [EOL] else : [EOL] self . _transport . close ( ) [EOL] [EOL] @ abc . abstractmethod def _set_abort_error ( self , __cause ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] def abort ( self ) : [EOL] self . _set_abort_error ( None ) [EOL] [EOL] self . _transport . close ( ) [EOL] [EOL] def connection_lost ( self , exc ) : [EOL] if exc : [EOL] self . _set_abort_error ( exc ) [EOL] [EOL] else : [EOL] self . _stream . _connection_lost ( None ) [EOL] [EOL] [EOL] class H1ServerImpl ( BaseH1Impl , protocols . HttpServerProtocolDelegate ) : [EOL] def __init__ ( self , protocol , max_initial_size ) : [EOL] super ( ) . __init__ ( protocol ) [EOL] [EOL] self . _max_initial_size = max_initial_size [EOL] [EOL] self . _exc = None [EOL] [EOL] self . __stream = stream_mgrs . H1ServerStreamManager ( self , self . _buf , max_initial_size ) [EOL] [EOL] self . _read_request_lock = asyncio . Lock ( ) [EOL] self . _request_read = False [EOL] [EOL] @ property def _stream ( self ) : [EOL] return self . __stream [EOL] [EOL] async def read_request ( self ) : [EOL] async with self . _read_request_lock : [EOL] if self . _request_read : [EOL] await self . _stream . _wait_finished ( ) [EOL] [EOL] if self . _transport . is_closing ( ) : [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] raise readers . ReadFinishedError [EOL] [EOL] self . _resume_reading ( ) [EOL] [EOL] self . __stream = stream_mgrs . H1ServerStreamManager ( self , self . _buf , self . _max_initial_size ) [EOL] self . _request_read = False [EOL] [EOL] reader = await self . _stream . _read_request ( ) [EOL] self . _request_read = True [EOL] [EOL] return reader [EOL] [EOL] def _set_abort_error ( self , __cause ) : [EOL] if self . _exc is not None : [EOL] return [EOL] [EOL] if __cause : [EOL] self . _exc = readers . ReadAbortedError ( [string] ) [EOL] self . _exc . __cause__ = __cause [EOL] [EOL] else : [EOL] self . _exc = readers . ReadAbortedError ( [string] ) [EOL] [EOL] self . _stream . _set_abort_error ( __cause ) [EOL] [EOL] [EOL] class H1ClientImpl ( BaseH1Impl , protocols . HttpClientProtocolDelegate ) : [EOL] def __init__ ( self , protocol , max_initial_size , http_version ) : [EOL] super ( ) . __init__ ( protocol ) [EOL] [EOL] self . _http_version = http_version [EOL] self . _max_initial_size = max_initial_size [EOL] [EOL] self . _exc = None [EOL] [EOL] self . __stream = stream_mgrs . H1ClientStreamManager ( self , self . _buf , max_initial_size , http_version ) [EOL] [EOL] self . _write_request_lock = asyncio . Lock ( ) [EOL] self . _request_written = False [EOL] [EOL] @ property def _stream ( self ) : [EOL] return self . __stream [EOL] [EOL] async def write_request ( self , method , * , uri , authority , scheme , headers ) : [EOL] async with self . _write_request_lock : [EOL] if self . _request_written : [EOL] await self . _stream . _wait_finished ( ) [EOL] [EOL] if self . _transport . is_closing ( ) : [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] raise writers . WriteAfterFinishedError [EOL] [EOL] self . __stream = stream_mgrs . H1ClientStreamManager ( self , self . _buf , self . _max_initial_size , self . _http_version ) [EOL] self . _request_written = False [EOL] [EOL] writer = self . _stream . _write_request ( method , uri = uri , authority = authority , scheme = scheme , headers = headers ) [EOL] self . _request_written = True [EOL] [EOL] self . _resume_reading ( ) [EOL] [EOL] return writer [EOL] [EOL] def _set_abort_error ( self , __cause ) : [EOL] if self . _exc is not None : [EOL] return [EOL] [EOL] if __cause : [EOL] self . _exc = writers . WriteAbortedError ( [string] ) [EOL] self . _exc . __cause__ = __cause [EOL] [EOL] else : [EOL] self . _exc = writers . WriteAbortedError ( [string] ) [EOL] [EOL] self . _stream . _set_abort_error ( __cause ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $protocols.BaseHttpProtocol$ 0 0 0 0 0 $magichttp.protocols.BaseHttpProtocol$ 0 $protocols.BaseHttpProtocol$ 0 0 0 0 0 $protocols.BaseHttpProtocol$ 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $stream_mgrs.BaseH1StreamManager$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $protocols.HttpServerProtocol$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $protocols.HttpServerProtocol$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.Optional[readers.ReadAbortedError]$ 0 0 0 0 0 0 $magichttp.h1impl.stream_mgrs.H1ServerStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $asyncio.locks.Lock$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $stream_mgrs.H1ServerStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.h1impl.stream_mgrs.H1ServerStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 $typing.Optional[magichttp.readers.ReadAbortedError]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 $typing.Optional[magichttp.readers.ReadAbortedError]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.readers.ReadAbortedError]$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 $typing.Optional[magichttp.readers.ReadAbortedError]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $protocols.HttpClientProtocol$ 0 $builtins.int$ 0 $"constants.HttpVersion"$ 0 0 0 0 0 0 0 0 0 $protocols.HttpClientProtocol$ 0 0 0 0 0 $magichttp.constants.HttpVersion$ 0 $"constants.HttpVersion"$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.Optional[writers.WriteAbortedError]$ 0 0 0 0 0 0 $magichttp.h1impl.stream_mgrs.H1ClientStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $"constants.HttpVersion"$ 0 0 0 0 0 $asyncio.locks.Lock$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $stream_mgrs.H1ClientStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $writers.HttpRequestWriter$ 0 0 0 $"constants.HttpRequestMethod"$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.h1impl.stream_mgrs.H1ClientStreamManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $"constants.HttpRequestMethod"$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[_HeaderType]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 $typing.Optional[magichttp.writers.WriteAbortedError]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 $typing.Optional[magichttp.writers.WriteAbortedError]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.WriteAbortedError]$ 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 $typing.Optional[magichttp.writers.WriteAbortedError]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , TypeVar [EOL] import builtins [EOL] import writers [EOL] import magichttp [EOL] import readers [EOL] import typing [EOL] import asyncio [EOL] from typing import Generic , TypeVar , Optional , Union , Mapping , Iterable , Tuple [EOL] [EOL] from . import parsers [EOL] from . import composers [EOL] [EOL] from . . import readers [EOL] from . . import writers [EOL] from . . import constants [EOL] [EOL] import asyncio [EOL] import typing [EOL] import abc [EOL] import contextlib [EOL] [EOL] if typing . TYPE_CHECKING : [comment] [EOL] from . import impls [comment] [EOL] [EOL] _T = TypeVar ( [string] ) [EOL] [EOL] _HeaderType = Union [ Mapping [ str , str ] , Iterable [ Tuple [ str , str ] ] ] [EOL] [EOL] _LAST_CHUNK = - [number] [EOL] [EOL] [EOL] if typing . TYPE_CHECKING : [comment] [EOL] class _ReaderFuture ( asyncio . Future [ _T ] , Generic [ _T ] ) : [EOL] def cancel ( self ) : [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] async def safe_await ( self ) : [EOL] return await asyncio . shield ( self ) [EOL] [EOL] else : [EOL] class _ReaderFuture ( asyncio . Future , Generic [ _T ] ) : [EOL] def cancel ( self ) : [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] async def safe_await ( self ) : [EOL] return await asyncio . shield ( self ) [EOL] [EOL] [EOL] class BaseH1StreamManager ( readers . BaseHttpStreamReaderDelegate , writers . BaseHttpStreamWriterDelegate ) : [EOL] def __init__ ( self , __impl , buf , max_initial_size ) : [EOL] self . _impl = __impl [EOL] self . _buf = buf [EOL] self . _protocol = self . _impl . _protocol [EOL] self . _transport = self . _protocol . transport [EOL] [EOL] self . _max_initial_size = max_initial_size [EOL] [EOL] self . _body_len = None [EOL] self . _current_chunk_len = None [EOL] self . _current_chunk_crlf_dropped = True [EOL] self . _read_exc = None [EOL] [EOL] self . _writer_ready = asyncio . Event ( ) [EOL] self . _write_chunked_body = None [EOL] self . _write_finished = False [EOL] self . _write_exc = None [EOL] [EOL] self . _last_stream = None [EOL] [EOL] def pause_reading ( self ) : [EOL] if self . _finished ( ) : [EOL] return [EOL] [EOL] self . _impl . _pause_reading ( ) [EOL] [EOL] def resume_reading ( self ) : [EOL] if self . _finished ( ) : [EOL] return [EOL] [EOL] self . _impl . _resume_reading ( ) [EOL] [EOL] @ property @ abc . abstractmethod def _reader_fur ( self ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] @ property @ abc . abstractmethod def _writer ( self ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] @ abc . abstractmethod def _try_parse_initial ( self ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] def _try_parse_chunked_body ( self ) : [EOL] reader = self . _reader_fur . result ( ) [EOL] [EOL] while True : [EOL] if self . _current_chunk_len is None or self . _current_chunk_len == _LAST_CHUNK : [EOL] if self . _current_chunk_crlf_dropped is False : [EOL] if len ( self . _buf ) < [number] : [EOL] return [EOL] [EOL] del self . _buf [ : [number] ] [EOL] [EOL] self . _current_chunk_crlf_dropped = True [EOL] [EOL] if self . _current_chunk_len == _LAST_CHUNK : [EOL] reader . _append_end ( None ) [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] return [EOL] [EOL] self . _current_chunk_len = parsers . parse_chunk_length ( self . _buf ) [EOL] [EOL] if self . _current_chunk_len is None : [EOL] if len ( self . _buf ) > self . _max_initial_size : [EOL] self . _set_read_exception ( readers . EntityTooLargeError ( [string] [string] ) ) [EOL] [EOL] return [EOL] [EOL] self . _current_chunk_crlf_dropped = False [EOL] [EOL] if self . _current_chunk_len == [number] : [EOL] self . _current_chunk_len = _LAST_CHUNK [EOL] [EOL] continue [EOL] [EOL] data = self . _buf [ : self . _current_chunk_len ] [EOL] del self . _buf [ : self . _current_chunk_len ] [EOL] [EOL] self . _current_chunk_len -= len ( data ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] if self . _current_chunk_len > [number] : [EOL] return [EOL] [EOL] self . _current_chunk_len = None [EOL] [EOL] def _try_parse_body ( self ) : [EOL] assert self . _body_len is not None [EOL] reader = self . _reader_fur . result ( ) [EOL] [EOL] if self . _body_len == parsers . BODY_IS_ENDLESS : [EOL] reader . _append_data ( self . _buf ) [EOL] self . _buf . clear ( ) [EOL] [EOL] return [EOL] [EOL] if self . _body_len == parsers . BODY_IS_CHUNKED : [EOL] self . _try_parse_chunked_body ( ) [EOL] [EOL] return [EOL] [EOL] data = self . _buf [ : self . _body_len ] [EOL] del self . _buf [ : self . _body_len ] [EOL] [EOL] self . _body_len -= len ( data ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] if self . _body_len == [number] : [EOL] reader . _append_end ( None ) [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] def _data_appended ( self ) : [EOL] if self . _read_finished ( ) : [EOL] return [EOL] [EOL] try : [EOL] if not self . _reader_fur . done ( ) : [EOL] self . _try_parse_initial ( ) [EOL] [EOL] if self . _reader_fur . done ( ) and self . _reader_fur . exception ( ) is None : [EOL] self . _try_parse_body ( ) [EOL] [EOL] except parsers . UnparsableHttpMessage as e : [EOL] exc = readers . ReceivedDataMalformedError ( ) [EOL] exc . __cause__ = e [EOL] [EOL] self . _set_read_exception ( exc ) [EOL] [EOL] def _eof_received ( self ) : [EOL] if self . _read_finished ( ) : [EOL] return [EOL] [EOL] if self . _body_len == parsers . BODY_IS_ENDLESS : [EOL] reader = self . _reader_fur . result ( ) [EOL] reader . _append_end ( None ) [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] return [EOL] [EOL] self . _set_read_exception ( readers . ReadAbortedError ( [string] ) ) [EOL] [EOL] def _read_finished ( self ) : [EOL] if not self . _reader_fur . done ( ) : [EOL] return False [EOL] [EOL] if self . _reader_fur . exception ( ) is not None : [EOL] return True [EOL] [EOL] return self . _reader_fur . result ( ) . end_appended ( ) [EOL] [EOL] def _finished ( self ) : [EOL] return self . _read_finished ( ) and self . _write_finished [EOL] [EOL] async def _wait_finished ( self ) : [EOL] with contextlib . suppress ( readers . BaseReadException ) : [EOL] reader = await self . _reader_fur . safe_await ( ) [EOL] await reader . wait_end ( ) [EOL] [EOL] await self . _writer_ready . wait ( ) [EOL] [EOL] if self . _writer : [EOL] await self . _writer . wait_finished ( ) [EOL] [EOL] @ abc . abstractmethod def _is_last_stream ( self ) : [comment] [EOL] raise NotImplementedError [EOL] [EOL] def _mark_as_last_stream ( self ) : [EOL] self . _last_stream = True [EOL] [EOL] def write_data ( self , data , finished = False ) : [EOL] if self . _write_finished : [EOL] if self . _write_exc : [EOL] raise self . _write_exc [EOL] [EOL] raise writers . WriteAfterFinishedError [EOL] [EOL] if self . _write_chunked_body is None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if self . _write_chunked_body : [EOL] data = composers . compose_chunked_body ( data , finished = finished ) [EOL] [EOL] try : [EOL] self . _transport . write ( data ) [EOL] [EOL] except Exception as e : [EOL] exc = writers . WriteAbortedError ( ) [EOL] exc . __cause__ = e [EOL] [EOL] self . _set_write_exception ( exc ) [EOL] [EOL] raise exc [EOL] [EOL] if finished : [EOL] self . _write_finished = True [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] async def flush_buf ( self ) : [EOL] if self . _write_finished : [EOL] if self . _write_exc : [EOL] raise self . _write_exc [EOL] [EOL] return [EOL] [EOL] await self . _protocol . _flush ( ) [EOL] [EOL] def _maybe_cleanup ( self ) : [EOL] if self . _is_last_stream ( ) is True : [EOL] self . _transport . close ( ) [EOL] [EOL] def abort ( self ) : [EOL] if self . _finished ( ) : [EOL] return [EOL] [EOL] self . _impl . abort ( ) [EOL] [EOL] def _set_read_exception ( self , exc ) : [EOL] if self . _read_finished ( ) : [EOL] return [EOL] [EOL] self . _read_exc = exc [EOL] [EOL] if not self . _reader_fur . done ( ) : [EOL] self . _reader_fur . set_exception ( exc ) [EOL] [EOL] else : [EOL] self . _reader_fur . result ( ) . _append_end ( exc ) [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] def _set_write_exception ( self , exc ) : [EOL] if self . _write_finished : [EOL] return [EOL] [EOL] self . _write_exc = exc [EOL] [EOL] self . _writer_ready . set ( ) [EOL] self . _write_finished = True [EOL] [EOL] self . _maybe_cleanup ( ) [EOL] [EOL] def _set_abort_error ( self , __cause ) : [EOL] if self . _finished ( ) : [EOL] return [EOL] [EOL] if __cause : [EOL] read_exc = readers . ReadAbortedError ( [string] ) [EOL] read_exc . __cause__ = __cause [EOL] [EOL] write_exc = writers . WriteAbortedError ( [string] ) [EOL] write_exc . __cause__ = __cause [EOL] [EOL] else : [EOL] read_exc = readers . ReadAbortedError ( [string] ) [EOL] write_exc = writers . WriteAbortedError ( [string] ) [EOL] [EOL] self . _set_read_exception ( read_exc ) [EOL] self . _set_write_exception ( write_exc ) [EOL] [EOL] def _connection_lost ( self , exc ) : [EOL] if self . _finished ( ) : [EOL] return [EOL] [EOL] if exc : [EOL] self . _set_abort_error ( exc ) [EOL] [EOL] return [EOL] [EOL] self . _eof_received ( ) [EOL] self . _set_write_exception ( writers . WriteAbortedError ( [string] ) ) [EOL] [EOL] [EOL] class H1ClientStreamManager ( BaseH1StreamManager , writers . HttpRequestWriterDelegate , readers . HttpResponseReaderDelegate ) : [EOL] def __init__ ( self , __impl , buf , max_initial_size , http_version ) : [EOL] self . _http_version = http_version [EOL] [EOL] self . __reader_fur = _ReaderFuture ( ) [EOL] [EOL] self . __writer = None [EOL] [EOL] super ( ) . __init__ ( __impl , buf , max_initial_size ) [EOL] [EOL] @ property def _reader_fur ( self ) : [EOL] return self . __reader_fur [EOL] [EOL] @ property def _writer ( self ) : [EOL] return self . __writer [EOL] [EOL] def _try_parse_initial ( self ) : [EOL] if self . _writer is None : [EOL] return [EOL] [EOL] initial = parsers . parse_response_initial ( self . _buf , self . _writer . initial ) [EOL] [EOL] if initial is None : [EOL] if len ( self . _buf ) > self . _max_initial_size : [EOL] self . pause_reading ( ) [EOL] [EOL] exc = readers . EntityTooLargeError ( ) [EOL] self . _set_read_exception ( exc ) [EOL] [EOL] return [EOL] [EOL] self . _body_len = parsers . discover_response_body_length ( initial , req_initial = self . _writer . initial ) [EOL] [EOL] reader = readers . HttpResponseReader ( self , initial = initial , writer = self . _writer ) [EOL] self . _reader_fur . set_result ( reader ) [EOL] [EOL] def _write_request ( self , method , * , uri , authority , scheme , headers ) : [EOL] if self . _writer is not None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if self . _write_exc : [EOL] raise self . _write_exc [EOL] [EOL] initial , initial_bytes = composers . compose_request_initial ( method = method , uri = uri , authority = authority , version = self . _http_version , scheme = scheme , headers = headers ) [EOL] [EOL] try : [EOL] if [string] not in initial . headers . keys ( ) : [EOL] self . _write_chunked_body = False [EOL] [EOL] else : [EOL] self . _write_chunked_body = parsers . is_chunked_body ( initial . headers [ [string] ] ) [EOL] [EOL] self . _transport . write ( initial_bytes ) [EOL] [EOL] except Exception as e : [EOL] exc = writers . WriteAbortedError ( ) [EOL] exc . __cause__ = e [EOL] self . _set_write_exception ( exc ) [EOL] [EOL] raise exc [EOL] [EOL] writer = writers . HttpRequestWriter ( self , initial = initial ) [EOL] [EOL] self . __writer = writer [EOL] self . _writer_ready . set ( ) [EOL] [EOL] self . _data_appended ( ) [EOL] [EOL] return writer [EOL] [EOL] async def read_response ( self ) : [EOL] return await self . _reader_fur . safe_await ( ) [EOL] [EOL] def _is_last_stream ( self ) : [EOL] if not self . _finished ( ) : [EOL] return None [EOL] [EOL] if self . _last_stream is None : [EOL] if self . _reader_fur . exception ( ) is not None or self . _read_exc is not None : [EOL] self . _last_stream = True [EOL] [EOL] elif self . _writer is None or self . _write_exc is not None : [EOL] self . _last_stream = True [EOL] [EOL] else : [EOL] reader = self . _reader_fur . result ( ) [EOL] [EOL] if reader . initial . status_code >= [number] : [EOL] self . _last_stream = True [EOL] [EOL] elif self . _body_len == parsers . BODY_IS_ENDLESS : [EOL] self . _last_stream = True [EOL] [EOL] else : [EOL] remote_conn_header = reader . initial . headers . get ( [string] , [string] ) . lower ( ) [EOL] [EOL] local_conn_header = self . _writer . initial . headers . get ( [string] , [string] ) . lower ( ) [EOL] [EOL] if reader . initial . version == constants . HttpVersion . V1_1 : [EOL] if [string] not in ( remote_conn_header , local_conn_header ) : [EOL] self . _last_stream = False [EOL] [EOL] else : [EOL] self . _last_stream = True [EOL] [EOL] else : [EOL] if [string] not in ( remote_conn_header , local_conn_header ) : [EOL] self . _last_stream = False [EOL] [EOL] else : [EOL] self . _last_stream = True [EOL] [EOL] return self . _last_stream [EOL] [EOL] [EOL] class H1ServerStreamManager ( BaseH1StreamManager , readers . HttpRequestReaderDelegate , writers . HttpResponseWriterDelegate ) : [EOL] def __init__ ( self , __impl , buf , max_initial_size ) : [EOL] self . __reader_fur = _ReaderFuture ( ) [EOL] [EOL] self . __writer = None [EOL] [EOL] super ( ) . __init__ ( __impl , buf , max_initial_size ) [EOL] [EOL] self . _data_appended ( ) [EOL] [EOL] @ property def _reader_fur ( self ) : [EOL] return self . __reader_fur [EOL] [EOL] @ property def _writer ( self ) : [EOL] return self . __writer [EOL] [EOL] def _try_parse_initial ( self ) : [EOL] initial = parsers . parse_request_initial ( self . _buf ) [EOL] [EOL] if initial is None : [EOL] if len ( self . _buf ) > self . _max_initial_size : [EOL] self . pause_reading ( ) [EOL] [EOL] self . _set_read_exception ( readers . EntityTooLargeError ( ) ) [EOL] [EOL] return [EOL] [EOL] self . _body_len = parsers . discover_request_body_length ( initial ) [EOL] [EOL] reader = readers . HttpRequestReader ( self , initial = initial ) [EOL] self . _reader_fur . set_result ( reader ) [EOL] [EOL] async def _read_request ( self ) : [EOL] try : [EOL] return await self . _reader_fur . safe_await ( ) [EOL] [EOL] except readers . EntityTooLargeError as e : [EOL] raise readers . RequestInitialTooLargeError ( self ) from e [EOL] [EOL] except readers . ReceivedDataMalformedError as e : [EOL] raise readers . RequestInitialMalformedError ( self ) from e [EOL] [EOL] def write_response ( self , status_code , * , headers ) : [EOL] if self . _writer is not None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if self . _write_exc : [EOL] raise self . _write_exc [EOL] [EOL] maybe_reader = self . _reader_fur . result ( ) \ [EOL] if self . _reader_fur . exception ( ) is None else None [EOL] [EOL] maybe_req_initial = maybe_reader . initial if maybe_reader is not None else None [EOL] [EOL] initial , initial_bytes = composers . compose_response_initial ( status_code = status_code , headers = headers , req_initial = maybe_req_initial ) [EOL] [EOL] try : [EOL] if [string] not in initial . headers . keys ( ) : [EOL] self . _write_chunked_body = False [EOL] [EOL] else : [EOL] self . _write_chunked_body = parsers . is_chunked_body ( initial . headers [ [string] ] ) [EOL] [EOL] self . _transport . write ( initial_bytes ) [EOL] [EOL] except Exception as e : [EOL] exc = writers . WriteAbortedError ( ) [EOL] exc . __cause__ = e [EOL] self . _set_write_exception ( exc ) [EOL] [EOL] raise exc [EOL] [EOL] writer = writers . HttpResponseWriter ( self , initial = initial , reader = maybe_reader ) [EOL] [EOL] self . __writer = writer [EOL] self . _writer_ready . set ( ) [EOL] [EOL] return writer [EOL] [EOL] def _is_last_stream ( self ) : [EOL] if not self . _finished ( ) : [EOL] return None [EOL] [EOL] if self . _last_stream is None : [EOL] if self . _reader_fur . exception ( ) is not None or self . _read_exc is not None : [EOL] self . _last_stream = True [EOL] [EOL] elif self . _writer is None or self . _write_exc is not None : [EOL] self . _last_stream = True [EOL] [EOL] elif self . _writer . initial . status_code >= [number] : [EOL] self . _last_stream = True [EOL] [EOL] else : [EOL] reader = self . _reader_fur . result ( ) [EOL] [EOL] remote_conn_header = reader . initial . headers . get ( [string] , [string] ) . lower ( ) [EOL] [EOL] local_conn_header = self . _writer . initial . headers . get ( [string] , [string] ) . lower ( ) [EOL] [EOL] if [string] not in ( remote_conn_header , local_conn_header ) : [EOL] self . _last_stream = False [EOL] [EOL] else : [EOL] self . _last_stream = True [EOL] [EOL] return self . _last_stream [EOL]	writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_HeaderType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . impls import H1ClientImpl , H1ServerImpl [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , MutableMapping , Mapping , Tuple [EOL] import builtins [EOL] import magichttp [EOL] import constants [EOL] import initials [EOL] import typing [EOL] from typing import Optional , Mapping , Union , Iterable , Tuple , MutableMapping [EOL] [EOL] from . . import initials [EOL] from . . import constants [EOL] from . . import _version [EOL] [EOL] import magicdict [EOL] [EOL] _SELF_IDENTIFIER = f" [string] { _version . __version__ }" [EOL] [EOL] _HeaderType = Union [ Mapping [ str , str ] , Iterable [ Tuple [ str , str ] ] ] [EOL] [EOL] [EOL] def _compose_initial_bytes ( * first_line_args , headers , _prefix = [string] ) : [EOL] parts = [ _prefix , [string] . join ( first_line_args ) , [string] ] [EOL] [EOL] for key , value in headers . items ( ) : [EOL] parts . append ( [string] % ( key . title ( ) , value ) ) [EOL] [EOL] parts . append ( [string] ) [EOL] [EOL] return [string] . join ( parts ) . encode ( [string] ) [EOL] [EOL] [EOL] def compose_request_initial ( method , * , uri , authority , version , scheme , headers ) : [EOL] refined_headers = magicdict . TolerantMagicDict ( headers or { } ) [EOL] [EOL] refined_headers . setdefault ( [string] , _SELF_IDENTIFIER ) [EOL] [EOL] if [string] not in refined_headers . keys ( ) and version == constants . HttpVersion . V1_0 : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] if [string] not in refined_headers . keys ( ) : [EOL] refined_headers . setdefault ( [string] , [string] ) [EOL] [EOL] if authority is not None : [EOL] refined_headers . setdefault ( [string] , authority ) [EOL] [EOL] refined_initial = initials . HttpRequestInitial ( method , version = version , uri = uri , authority = authority , scheme = scheme , headers = magicdict . FrozenTolerantMagicDict ( refined_headers ) ) [EOL] [EOL] return ( refined_initial , _compose_initial_bytes ( method . value , uri , version . value , headers = refined_initial . headers ) ) [EOL] [EOL] [EOL] def compose_response_initial ( status_code , * , headers , req_initial ) : [EOL] if req_initial is None : [EOL] assert status_code >= [number] , ( [string] ) [EOL] [EOL] version = constants . HttpVersion . V1_1 [EOL] prefix = [string] [EOL] [EOL] else : [EOL] version = req_initial . version [EOL] [EOL] if status_code < [number] and req_initial . headers . get ( [string] , [string] ) . lower ( ) == [string] : [EOL] prefix = [string] [EOL] [EOL] else : [EOL] prefix = [string] [EOL] [EOL] refined_headers = magicdict . TolerantMagicDict ( headers or { } ) [EOL] [EOL] refined_headers . setdefault ( [string] , _SELF_IDENTIFIER ) [EOL] [EOL] if [string] not in refined_headers . keys ( ) : [EOL] if status_code >= [number] : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] elif version == constants . HttpVersion . V1_0 : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] elif req_initial and req_initial . headers . get_first ( [string] , [string] ) . lower ( ) == [string] : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] if [string] not in refined_headers . keys ( ) and [string] not in refined_headers . keys ( ) and ( req_initial is None or ( req_initial . method not in ( constants . HttpRequestMethod . HEAD , constants . HttpRequestMethod . CONNECT ) and status_code not in ( constants . HttpStatusCode . NO_CONTENT , constants . HttpStatusCode . NOT_MODIFIED , constants . HttpStatusCode . SWITCHING_PROTOCOLS ) ) ) : [EOL] if version == constants . HttpVersion . V1_1 : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] else : [EOL] refined_headers [ [string] ] = [string] [EOL] [EOL] refined_initial = initials . HttpResponseInitial ( status_code , version = version , headers = magicdict . FrozenTolerantMagicDict ( refined_headers ) ) [EOL] [EOL] return ( refined_initial , _compose_initial_bytes ( version . value , str ( status_code . value ) , status_code . phrase , headers = refined_initial . headers , _prefix = prefix ) ) [EOL] [EOL] [EOL] def compose_chunked_body ( data , finished = False ) : [EOL] if data : [EOL] data_len = f"{ len ( data ) : [string] }" . encode ( [string] ) [EOL] [EOL] if finished : [EOL] return [string] % ( data_len , data ) [EOL] [EOL] else : [EOL] return [string] % ( data_len , data ) [EOL] [EOL] elif finished : [EOL] return [string] [EOL] [EOL] else : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[initials.HttpRequestInitial,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[initials.HttpResponseInitial,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import magichttp [EOL] from magichttp . h1impl . composers import compose_request_initial , compose_response_initial , compose_chunked_body [EOL] from magichttp import HttpRequestMethod , HttpVersion , HttpRequestInitial , HttpStatusCode [EOL] [EOL] from test_helper import TestHelper [EOL] [EOL] import magicdict [EOL] [EOL] helper = TestHelper ( ) [EOL] [EOL] [EOL] class ComposeRequestInitialTestCase : [EOL] def test_simple_request ( self ) : [EOL] req , req_bytes = compose_request_initial ( method = HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , authority = None , scheme = None , headers = None ) [EOL] [EOL] assert req . version == HttpVersion . V1_1 [EOL] assert req . uri == [string] [EOL] assert not hasattr ( req , [string] ) [EOL] assert not hasattr ( req , [string] ) [EOL] assert req . headers == { [string] : helper . get_version_str ( ) , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( req_bytes , [string] , [string] , [string] ) [EOL] [EOL] def test_http_10_request ( self ) : [EOL] req , req_bytes = compose_request_initial ( method = HttpRequestMethod . GET , version = HttpVersion . V1_0 , uri = [string] , authority = [string] , scheme = [string] , headers = None ) [EOL] [EOL] assert req . version == HttpVersion . V1_0 [EOL] assert req . uri == [string] [EOL] assert req . authority == [string] [EOL] assert req . scheme == [string] [EOL] assert req . headers == { [string] : helper . get_version_str ( ) , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( req_bytes , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ComposeResponseInitialTestCase : [EOL] def test_simple_response ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] ) [EOL] [EOL] def test_bad_request ( self ) : [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . BAD_REQUEST , headers = None , req_initial = None ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) , [string] : [string] , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_http_10 ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_0 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] ) [EOL] [EOL] def test_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] ) [EOL] [EOL] def test_http_10_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_0 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( [ ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = { [string] : [string] } , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : [string] , [string] : helper . get_version_str ( ) , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_no_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( [ ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) , [string] : [string] , [string] : [string] } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_204_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . NO_CONTENT , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] ) [EOL] [EOL] def test_304_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . NOT_MODIFIED , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] ) [EOL] [EOL] def test_head_keep_alive ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . HEAD , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . TolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res , res_bytes = compose_response_initial ( HttpStatusCode . OK , headers = None , req_initial = req ) [EOL] [EOL] assert res . status_code == [number] [EOL] assert res . headers == { [string] : helper . get_version_str ( ) } [EOL] [EOL] helper . assert_initial_bytes ( res_bytes , [string] , [string] ) [EOL] [EOL] [EOL] class ComposeChunkedBodyTestCase : [EOL] def test_normal_chunk ( self ) : [EOL] assert compose_chunked_body ( [string] ) == [string] [EOL] [EOL] def test_empty_chunk ( self ) : [EOL] assert compose_chunked_body ( [string] ) == [string] [EOL] [EOL] def test_normal_last_chunk ( self ) : [EOL] assert compose_chunked_body ( [string] , finished = True ) == [string] [EOL] [EOL] def test_empty_last_chunk ( self ) : [EOL] assert compose_chunked_body ( [string] , finished = True ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional [EOL] import typing [EOL] import magichttp [EOL] from magichttp . h1impl . parsers import UnparsableHttpMessage , parse_request_initial , parse_response_initial , discover_request_body_length , BODY_IS_CHUNKED , discover_response_body_length , BODY_IS_ENDLESS , is_chunked_body , InvalidTransferEncoding , InvalidContentLength , parse_chunk_length , InvalidChunkLength [EOL] from magichttp import HttpVersion , HttpRequestMethod , HttpRequestInitial , HttpResponseInitial , HttpStatusCode [EOL] [EOL] import pytest [EOL] import magicdict [EOL] [EOL] [EOL] class H1IsChunkedBodyTestCase : [EOL] def test_chunked ( self ) : [EOL] assert is_chunked_body ( [string] ) is True [EOL] [EOL] def test_identity ( self ) : [EOL] assert is_chunked_body ( [string] ) is False [EOL] [EOL] def test_malformed_transfer_encodings ( self ) : [EOL] with pytest . raises ( InvalidTransferEncoding ) : [EOL] is_chunked_body ( [string] ) [EOL] [EOL] with pytest . raises ( InvalidTransferEncoding ) : [EOL] is_chunked_body ( [string] ) [EOL] [EOL] [EOL] class H1ParseRequestInitialTestCase : [EOL] def test_simple_request ( self ) : [EOL] buf = bytearray ( [string] ) [EOL] [EOL] assert parse_request_initial ( buf ) is None [EOL] [EOL] buf += [string] [EOL] [EOL] assert parse_request_initial ( buf ) is None [EOL] [EOL] buf += [string] [EOL] [EOL] req = parse_request_initial ( buf ) [EOL] [EOL] assert req is not None [EOL] [EOL] assert req . headers == { } [EOL] assert req . version == HttpVersion . V1_1 [EOL] assert req . uri == [string] [EOL] assert req . method == HttpRequestMethod . GET [EOL] assert not hasattr ( req , [string] ) [EOL] assert not hasattr ( req , [string] ) [EOL] [EOL] def test_simple_post_request ( self ) : [EOL] buf = bytearray ( [string] [string] [string] ) [EOL] [EOL] req = parse_request_initial ( buf ) [EOL] [EOL] assert req is not None [EOL] [EOL] assert req . headers [ [string] ] == [string] [EOL] assert req . version == HttpVersion . V1_1 [EOL] assert req . uri == [string] [EOL] assert req . method == HttpRequestMethod . POST [EOL] assert req . authority == [string] [EOL] assert req . scheme . lower ( ) == [string] [EOL] [EOL] def test_malformed_requests ( self ) : [EOL] with pytest . raises ( UnparsableHttpMessage ) : [EOL] parse_request_initial ( bytearray ( [string] ) ) [EOL] [EOL] with pytest . raises ( UnparsableHttpMessage ) : [EOL] parse_request_initial ( bytearray ( [string] ) ) [EOL] [EOL] [EOL] class H1ParseResponseInitialTestCase : [EOL] def test_simple_response ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] buf = bytearray ( [string] ) [EOL] [EOL] assert parse_response_initial ( buf , req_initial = req ) is None [EOL] [EOL] buf += [string] [EOL] [EOL] res = parse_response_initial ( buf , req_initial = req ) [EOL] [EOL] assert res is not None [EOL] [EOL] assert res . headers == { } [EOL] assert res . status_code == HttpStatusCode . OK [EOL] assert res . version == HttpVersion . V1_1 [EOL] [EOL] def test_malformed_responses ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] with pytest . raises ( UnparsableHttpMessage ) : [EOL] parse_response_initial ( bytearray ( [string] ) , req_initial = req ) [EOL] [EOL] with pytest . raises ( UnparsableHttpMessage ) : [EOL] parse_response_initial ( bytearray ( [string] ) , req_initial = req ) [EOL] [EOL] [EOL] class H1DiscoverRequestBodyLengthTestCase : [EOL] def test_upgrade_request ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] assert discover_request_body_length ( req ) == BODY_IS_ENDLESS [EOL] [EOL] def test_request_chunked ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] assert discover_request_body_length ( req ) == BODY_IS_CHUNKED [EOL] [EOL] def test_request_content_length ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] assert discover_request_body_length ( req ) == [number] [EOL] [EOL] def test_request_malformed_content_length ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] with pytest . raises ( InvalidContentLength ) : [EOL] discover_request_body_length ( req ) [EOL] [EOL] def test_request_no_body ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] assert discover_request_body_length ( req ) == [number] [EOL] [EOL] [EOL] class H1DiscoverResponseBodyLengthTestCase : [EOL] def test_upgrade_response ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . SWITCHING_PROTOCOLS , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == BODY_IS_ENDLESS [EOL] [EOL] def test_head_request ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . HEAD , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . OK , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == [number] [EOL] [EOL] def test_no_content ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . NO_CONTENT , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == [number] [EOL] [EOL] def test_response_chunked ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . OK , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == BODY_IS_CHUNKED [EOL] [EOL] def test_response_endless ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = [string] , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . OK , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == BODY_IS_ENDLESS [EOL] [EOL] def test_response_content_length ( self ) : [EOL] req = HttpRequestInitial ( HttpRequestMethod . GET , version = HttpVersion . V1_1 , uri = [string] , scheme = None , headers = magicdict . FrozenTolerantMagicDict ( ) , authority = None ) [EOL] [EOL] res = HttpResponseInitial ( HttpStatusCode . OK , version = HttpVersion . V1_1 , headers = magicdict . FrozenTolerantMagicDict ( [ ( [string] , [string] ) ] ) ) [EOL] [EOL] assert discover_response_body_length ( res , req_initial = req ) == [number] [EOL] [EOL] [EOL] class H1ParseChunkLengthTestCase : [EOL] def test_valid_chunk_length ( self ) : [EOL] buf = bytearray ( [string] ) [EOL] [EOL] assert parse_chunk_length ( buf ) is None [EOL] [EOL] buf += [string] [EOL] [EOL] assert parse_chunk_length ( buf ) == [number] [EOL] assert buf == [string] [EOL] [EOL] def test_valid_last_chunk ( self ) : [EOL] buf = bytearray ( [string] ) [EOL] [EOL] assert parse_chunk_length ( buf ) == [number] [EOL] assert buf == [string] [EOL] [EOL] def test_malformed_chunk_lengths ( self ) : [EOL] buf = bytearray ( [string] ) [EOL] [EOL] with pytest . raises ( InvalidChunkLength ) : [EOL] assert parse_chunk_length ( buf ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 $builtins.bytearray$ 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 $builtins.bytearray$ 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpRequestInitial]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 $typing.Optional[magichttp.initials.HttpResponseInitial]$ 0 0 0 $builtins.bytearray$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 $typing.Optional[magichttp.initials.HttpResponseInitial]$ 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpResponseInitial]$ 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpResponseInitial]$ 0 0 0 0 0 0 0 0 $typing.Optional[magichttp.initials.HttpResponseInitial]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.initials.HttpResponseInitial$ 0 0 0 $magichttp.initials.HttpRequestInitial$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import magichttp [EOL] [EOL] [EOL] class TestHelper : [EOL] def __init__ ( self ) : [EOL] self . loop = asyncio . get_event_loop ( ) [EOL] [EOL] self . loop . set_debug ( True ) [EOL] [EOL] self . _tsks = set ( ) [EOL] [EOL] def run_async_test ( self , coro_fn ) : [EOL] async def test_coro ( _self , * args , ** kwargs ) : [EOL] exc = None [EOL] [EOL] try : [EOL] await asyncio . wait_for ( coro_fn ( _self , * args , ** kwargs ) , timeout = [number] ) [EOL] [EOL] except Exception as e : [EOL] exc = e [EOL] [EOL] self . _tsks , tsks = set ( ) , self . _tsks [EOL] [EOL] for tsk in tsks : [EOL] [EOL] try : [EOL] if not tsk . done ( ) : [EOL] tsk . cancel ( ) [EOL] [EOL] await tsk [EOL] [EOL] except asyncio . CancelledError : [EOL] continue [EOL] [EOL] except Exception as e : [EOL] if not exc : [EOL] exc = e [EOL] [EOL] if exc : [EOL] raise RuntimeError from exc [EOL] [EOL] def wrapper ( _self , * args , ** kwargs ) : [EOL] self . loop . run_until_complete ( test_coro ( _self , * args , ** kwargs ) ) [EOL] [EOL] return wrapper [EOL] [EOL] def create_task ( self , coro ) : [EOL] tsk = self . loop . create_task ( coro ) [EOL] [EOL] self . _tsks . add ( tsk ) [EOL] [EOL] return tsk [EOL] [EOL] def get_version_str ( self ) : [EOL] return f" [string] { magichttp . __version__ }" [EOL] [EOL] def get_version_bytes ( self ) : [EOL] return self . get_version_str ( ) . encode ( ) [EOL] [EOL] def assert_initial_bytes ( self , buf , first_line , * header_lines ) : [EOL] buf_initial = buf . split ( [string] ) [ [number] ] [EOL] buf_parts = buf_initial . split ( [string] ) [EOL] [EOL] assert buf_parts . pop ( [number] ) == first_line [EOL] [EOL] assert len ( buf_parts ) == len ( set ( buf_parts ) ) [EOL] assert len ( buf_parts ) == len ( header_lines ) [EOL] [EOL] for line in header_lines : [EOL] line = line % { [string] : self . get_version_bytes ( ) } [EOL] assert line in buf_parts [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.Exception$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.Exception$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.Exception$ 0 0 $builtins.Exception$ 0 0 0 0 0 $builtins.Exception$ 0 0 0 0 0 $builtins.Exception$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import tests [EOL] import typing [EOL] import magichttp [EOL] from magichttp import HttpClientProtocol , HttpRequestMethod , WriteAfterFinishedError , ReadFinishedError , HttpServerProtocol , EntityTooLargeError , ReceivedDataMalformedError , WriteAbortedError , ReadAbortedError , HttpStatusCode , RequestInitialTooLargeError , RequestInitialMalformedError [EOL] [EOL] from test_helper import TestHelper [EOL] [EOL] import pytest [EOL] import os [EOL] import asyncio [EOL] [EOL] [EOL] helper = TestHelper ( ) [EOL] [EOL] [EOL] class TransportMock : [EOL] def __init__ ( self ) : [EOL] self . _paused = False [EOL] self . _closing = False [EOL] self . _data_chunks = [ ] [EOL] self . _extra_info = { } [EOL] [EOL] def _pop_stored_data ( self ) : [EOL] data = [string] . join ( self . _data_chunks ) [EOL] self . _data_chunks . clear ( ) [EOL] [EOL] return data [EOL] [EOL] def pause_reading ( self ) : [EOL] assert self . _paused is False [EOL] [EOL] self . _paused = True [EOL] [EOL] def resume_reading ( self ) : [EOL] assert self . _paused is True [EOL] [EOL] self . _paused = False [EOL] [EOL] def close ( self ) : [EOL] self . _closing = True [EOL] [EOL] def is_closing ( self ) : [EOL] return self . _closing [EOL] [EOL] def write ( self , data ) : [EOL] self . _data_chunks . append ( data ) [EOL] [EOL] def get_extra_info ( self , name ) : [EOL] return self . _extra_info . get ( name ) [EOL] [EOL] [EOL] class HttpClientProtocolTestCase : [EOL] def test_init ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] transport_mock . _closing = True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_simple_request ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] writer . finish ( ) [EOL] [EOL] assert transport_mock . _pop_stored_data ( ) == [string] [EOL] [EOL] with pytest . raises ( WriteAfterFinishedError ) : [EOL] writer . write ( [string] ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { } [EOL] [EOL] @ helper . run_async_test async def test_keep_alive ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] for _ in range ( [number] , [number] ) : [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] writer . write ( [string] ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] await writer . flush ( ) [EOL] [EOL] assert transport_mock . _pop_stored_data ( ) == [string] [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { } [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( WriteAfterFinishedError ) : [EOL] await protocol . write_request ( HttpRequestMethod . GET ) [EOL] [EOL] @ helper . run_async_test async def test_response_with_body ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] assert await reader . read ( ) == [string] [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { [string] : [string] } [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_response_with_endless_body ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] for _ in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] protocol . data_received ( data ) [EOL] assert await reader . read ( [number] ) == data [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_upgrade ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] , headers = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] for j in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] protocol . data_received ( data ) [EOL] assert await reader . read ( [number] ) == data [EOL] [EOL] for k in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] writer . write ( data ) [EOL] assert [string] . join ( transport_mock . _data_chunks ) == data [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_response_with_chunked_body ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] async def read_data ( ) : [EOL] assert await reader . read ( [number] , exactly = True ) == data [EOL] [EOL] tsk = helper . create_task ( read_data ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert tsk . done ( ) is False [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert tsk . done ( ) is False [EOL] [EOL] protocol . data_received ( [string] + data [ : [number] ] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert tsk . done ( ) is False [EOL] [EOL] protocol . data_received ( data [ [number] : ] + [string] ) [EOL] [EOL] await tsk [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] assert transport_mock . _closing is True [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_flush_pause_and_resume ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] data = os . urandom ( [number] * [number] * [number] ) [comment] [EOL] [EOL] assert transport_mock . _paused is False [EOL] [EOL] protocol . data_received ( data ) [EOL] [EOL] assert transport_mock . _paused is True [EOL] [EOL] assert await reader . read ( [number] * [number] * [number] ) == data [EOL] data = os . urandom ( [number] ) [EOL] [EOL] async def read_data ( ) : [EOL] assert await reader . read ( ) == data [EOL] [EOL] tsk = helper . create_task ( read_data ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert transport_mock . _paused is False [EOL] assert transport_mock . _closing is False [EOL] [EOL] protocol . data_received ( data ) [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] await tsk [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] data = os . urandom ( [number] * [number] ) [comment] [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] writer . write ( data [ : [number] * [number] ] ) [EOL] protocol . pause_writing ( ) [EOL] protocol . pause_writing ( ) [EOL] [EOL] async def flush_data ( ) : [EOL] await writer . flush ( ) [EOL] [EOL] tsk = helper . create_task ( flush_data ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert tsk . done ( ) is False [EOL] [EOL] writer . write ( data [ [number] * [number] : ] ) [EOL] writer . finish ( ) [EOL] assert [string] . join ( transport_mock . _data_chunks ) == data [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert tsk . done ( ) is False [EOL] [EOL] protocol . resume_writing ( ) [EOL] protocol . resume_writing ( ) [EOL] await tsk [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_close_after_finished ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] writer . write ( [string] ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] await writer . flush ( ) [EOL] [EOL] assert [string] . join ( transport_mock . _data_chunks ) == [string] [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { } [EOL] [EOL] protocol . close ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_close_before_finished ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] protocol . close ( ) [EOL] [EOL] async def wait_closed ( ) : [EOL] await protocol . wait_closed ( ) [EOL] [EOL] tsk = helper . create_task ( wait_closed ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert tsk . done ( ) is False [EOL] [EOL] assert transport_mock . _closing is False [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] writer . write ( [string] ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] await writer . flush ( ) [EOL] [EOL] assert [string] . join ( transport_mock . _data_chunks ) == [string] [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { } [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert tsk . done ( ) is False [EOL] protocol . connection_lost ( None ) [EOL] [EOL] await tsk [EOL] [EOL] @ helper . run_async_test async def test_response_initial_too_large ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( os . urandom ( [number] * [number] * [number] ) ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( EntityTooLargeError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_response_initial_malformed ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( ReceivedDataMalformedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_response_chunk_len_too_long ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] protocol . data_received ( [string] * [number] * [number] * [number] ) [EOL] with pytest . raises ( EntityTooLargeError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_response_chunk_len_malformed ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] protocol . data_received ( [string] ) [EOL] with pytest . raises ( ReceivedDataMalformedError ) : [EOL] await reader . read ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_1 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await protocol . write_request ( HttpRequestMethod . GET ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_2 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_3 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_4 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_5 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_1 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] [EOL] writer . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_2 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] [EOL] writer . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_3 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await writer . read_response ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_4 ( self ) : [EOL] [docstring] [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . POST , uri = [string] , headers = { [string] : [string] } ) [EOL] [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] await writer . flush ( ) [EOL] writer . finish ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] writer . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] @ helper . run_async_test async def test_endless_response_cutoff ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] for _ in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] protocol . data_received ( data ) [EOL] assert await reader . read ( [number] ) == data [EOL] [EOL] transport_mock . _closing = True [EOL] [EOL] protocol . connection_lost ( OSError ( ) ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] @ helper . run_async_test async def test_http11_100continue_response ( self ) : [EOL] protocol = HttpClientProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] writer = await protocol . write_request ( HttpRequestMethod . GET , uri = [string] ) [EOL] writer . finish ( ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] assert await reader . read ( ) == [string] [EOL] [EOL] assert reader . initial . status_code == [number] [EOL] assert reader . initial . headers == { [string] : [string] } [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] [EOL] class HttpServerProtocolTestCase : [EOL] def test_init ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] transport_mock . _closing = True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_simple_request ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] writer . finish ( ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_simple_request_10 ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] writer . finish ( ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] @ helper . run_async_test async def test_chunked_request ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] await reader . read ( [number] , exactly = True ) == [string] [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] writer . finish ( ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] [string] [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_simple_response_with_chunked_body ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] writer . finish ( data ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] final_data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( final_data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert final_data . split ( [string] , [number] ) [ [number] ] == [string] + data + [string] [EOL] [EOL] @ helper . run_async_test async def test_simple_response_with_content_length ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK , headers = { [string] : [string] } ) [EOL] writer . finish ( data ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] final_data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( final_data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert final_data . split ( [string] , [number] ) [ [number] ] == data [EOL] [EOL] @ helper . run_async_test async def test_keep_alive ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] [EOL] async for reader in protocol : [EOL] assert reader . initial . uri == [string] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . NO_CONTENT ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] assert [string] . join ( transport_mock . _data_chunks ) == [string] [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] if tsk . done ( ) : [EOL] raise RuntimeError ( tsk . result ( ) ) [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] await tsk [EOL] [EOL] transport_mock . _closing = True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( StopAsyncIteration ) : [EOL] await protocol . __aiter__ ( ) . __anext__ ( ) [EOL] [EOL] @ helper . run_async_test async def test_keep_alive_10 ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] [EOL] async for reader in protocol : [EOL] assert reader . initial . uri == [string] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . NO_CONTENT ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] assert [string] . join ( transport_mock . _data_chunks ) == [string] [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] if tsk . done ( ) : [EOL] raise RuntimeError ( tsk . result ( ) ) [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] await tsk [EOL] [EOL] transport_mock . _closing = True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( StopAsyncIteration ) : [EOL] await protocol . __aiter__ ( ) . __anext__ ( ) [EOL] [EOL] @ helper . run_async_test async def test_response_with_endless_body ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] for _ in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] writer . write ( data ) [EOL] assert [string] . join ( transport_mock . _data_chunks ) == data [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] writer . finish ( ) [EOL] assert [string] . join ( transport_mock . _data_chunks ) == [string] [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] protocol . connection_lost ( None ) [EOL] [EOL] @ helper . run_async_test async def test_upgrade ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] count = [number] [EOL] async for reader in protocol : [EOL] count += [number] [EOL] [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . SWITCHING_PROTOCOLS , headers = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] for j in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] protocol . data_received ( data ) [EOL] assert await reader . read ( [number] ) == data [EOL] [EOL] for k in range ( [number] , [number] ) : [EOL] data = os . urandom ( [number] ) [EOL] writer . write ( data ) [EOL] assert [string] . join ( transport_mock . _data_chunks ) == data [EOL] transport_mock . _data_chunks . clear ( ) [EOL] [EOL] writer . finish ( ) [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] transport_mock . close ( ) [EOL] protocol . connection_lost ( None ) [EOL] [EOL] assert count == [number] [EOL] [EOL] @ helper . run_async_test async def test_close_after_finished ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] count = [number] [EOL] [EOL] async for reader in protocol : [EOL] count += [number] [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . NO_CONTENT , headers = { [string] : [string] } ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] protocol . close ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] assert count == [number] [EOL] [EOL] @ helper . run_async_test async def test_close_before_finished ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async def wait_closed ( ) : [EOL] await protocol . wait_closed ( ) [EOL] [EOL] count = [number] [EOL] [EOL] async for reader in protocol : [EOL] count += [number] [EOL] [EOL] protocol . close ( ) [EOL] [EOL] tsk = helper . create_task ( wait_closed ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert tsk . done ( ) is False [EOL] [EOL] assert transport_mock . _closing is False [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . NO_CONTENT , headers = { [string] : [string] } ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] helper . assert_initial_bytes ( transport_mock . _pop_stored_data ( ) , [string] , [string] , [string] ) [EOL] [EOL] assert count == [number] [EOL] [EOL] assert transport_mock . _closing is True [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert tsk . done ( ) is False [EOL] protocol . connection_lost ( None ) [EOL] [EOL] await tsk [EOL] [EOL] @ helper . run_async_test async def test_request_initial_too_large ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( os . urandom ( [number] * [number] * [number] ) ) [EOL] [EOL] with pytest . raises ( RequestInitialTooLargeError ) as exc_info : [EOL] await protocol . __anext__ ( ) [EOL] [EOL] writer = exc_info . value . write_response ( ) [EOL] writer . finish ( [string] ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_request_initial_malformed ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] with pytest . raises ( RequestInitialMalformedError ) as exc_info : [EOL] await protocol . __anext__ ( ) [EOL] [EOL] writer = exc_info . value . write_response ( ) [EOL] writer . finish ( [string] ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_request_chunk_len_too_long ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] async for reader in protocol : [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] protocol . data_received ( [string] * [number] * [number] * [number] ) [EOL] [EOL] with pytest . raises ( EntityTooLargeError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . REQUEST_ENTITY_TOO_LARGE ) [EOL] writer . finish ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_request_chunk_len_malformed ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] async for reader in protocol : [EOL] assert reader . initial . headers [ [string] ] == [string] [EOL] [EOL] protocol . data_received ( [string] ) [EOL] [EOL] with pytest . raises ( ReceivedDataMalformedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . BAD_REQUEST ) [EOL] writer . finish ( ) [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_1 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( StopAsyncIteration ) : [EOL] await protocol . __anext__ ( ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_2 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] reader . write_response ( HttpStatusCode . BAD_REQUEST ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_3 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] reader . write_response ( HttpStatusCode . BAD_REQUEST ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_4 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] [EOL] writer . write ( [string] ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . write ( [string] ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] @ helper . run_async_test async def test_remote_abort_5 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] [EOL] writer . write ( [string] ) [EOL] await writer . flush ( ) [EOL] [EOL] protocol . connection_lost ( None ) [EOL] assert transport_mock . _closing is True [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_1 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] reader . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] reader . write_response ( HttpStatusCode . BAD_REQUEST ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_2 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] reader . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] reader . write_response ( HttpStatusCode . BAD_REQUEST ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_3 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] [EOL] writer . write ( [string] ) [EOL] [EOL] reader . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . write ( [string] ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] @ helper . run_async_test async def test_local_abort_4 ( self ) : [EOL] [docstring] [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] [EOL] protocol . connection_made ( transport_mock ) [EOL] protocol . data_received ( [string] ) [EOL] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] [EOL] writer . write ( [string] ) [EOL] await writer . flush ( ) [EOL] [EOL] reader . abort ( ) [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] @ helper . run_async_test async def test_http11_100continue_request ( self ) : [EOL] protocol = HttpServerProtocol ( ) [EOL] transport_mock = TransportMock ( ) [EOL] protocol . connection_made ( transport_mock ) [EOL] [EOL] async def aiter_requests ( ) : [EOL] count = [number] [EOL] async for reader in protocol : [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await reader . read ( ) [EOL] [EOL] writer = reader . write_response ( HttpStatusCode . OK ) [EOL] writer . finish ( ) [EOL] [EOL] count += [number] [EOL] [EOL] assert count == [number] [EOL] [EOL] tsk = helper . create_task ( aiter_requests ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert not tsk . done ( ) [EOL] [EOL] protocol . data_received ( [string] [string] ) [EOL] [EOL] await tsk [EOL] [EOL] assert protocol . eof_received ( ) is True [EOL] [EOL] assert transport_mock . _closing is True [EOL] protocol . connection_lost ( None ) [EOL] [EOL] data = transport_mock . _pop_stored_data ( ) [EOL] [EOL] data_continue , data = data . split ( [string] , [number] ) [EOL] [EOL] helper . assert_initial_bytes ( data_continue , [string] ) [EOL] [EOL] helper . assert_initial_bytes ( data , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert data . split ( [string] , [number] ) [ [number] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $tests.test_protocols.TransportMock$ 0 $builtins.bool$ 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 $builtins.bytes$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 $tests.test_protocols.TransportMock$ 0 $builtins.bool$ 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpClientProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $tests.test_protocols.TransportMock$ 0 $builtins.bool$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $tests.test_protocols.TransportMock$ 0 $builtins.bool$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $tests.test_protocols.TransportMock$ 0 $builtins.bool$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 $builtins.bytes$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 $builtins.bytes$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 $builtins.int$ 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 $magichttp.protocols.HttpServerProtocol$ 0 0 0 0 0 0 0 0 0 $tests.test_protocols.TransportMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import tests [EOL] import typing [EOL] import magichttp [EOL] from magichttp . readers import HttpRequestReaderDelegate , HttpResponseReaderDelegate [EOL] from magichttp import HttpRequestReader , HttpResponseReader , ReadFinishedError , ReadUnsatisfiableError , MaxBufferLengthReachedError , SeparatorNotFoundError , ReadAbortedError [EOL] [EOL] from test_helper import TestHelper [EOL] [EOL] import pytest [EOL] import asyncio [EOL] import os [EOL] [EOL] [EOL] helper = TestHelper ( ) [EOL] [EOL] [EOL] class ReaderDelegateMock ( HttpRequestReaderDelegate , HttpResponseReaderDelegate ) : [EOL] def __init__ ( self ) : [EOL] self . paused = False [EOL] self . aborted = False [EOL] self . writer_mock = None [EOL] [EOL] def pause_reading ( self ) : [EOL] self . paused = True [EOL] [EOL] def resume_reading ( self ) : [EOL] self . paused = False [EOL] [EOL] def abort ( self ) : [EOL] self . aborted = True [EOL] [EOL] def write_response ( self , * args , ** kwargs ) : [EOL] self . writer_mock = object ( ) [EOL] return self . writer_mock [EOL] [EOL] [EOL] class HttpRequestReaderTestCase : [EOL] def test_init ( self ) : [EOL] HttpRequestReader ( object ( ) , initial = object ( ) ) [EOL] [EOL] @ helper . run_async_test async def test_read ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] await reader . read ( [number] ) [EOL] [EOL] @ helper . run_async_test async def test_read_wait ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( [number] ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] assert await tsk == data [EOL] [EOL] @ helper . run_async_test async def test_read_end ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( [number] ) ) [EOL] tsk_wait_end = helper . loop . create_task ( reader . wait_end ( ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk_wait_end . result ( ) [EOL] [EOL] reader . _append_end ( None ) [EOL] [EOL] with pytest . raises ( ReadFinishedError ) : [EOL] await tsk [EOL] [EOL] await tsk_wait_end [EOL] [EOL] @ helper . run_async_test async def test_read_end_unsatisfiable ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] reader . _append_data ( os . urandom ( [number] ) ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( [number] , exactly = True ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] reader . _append_end ( None ) [EOL] [EOL] with pytest . raises ( ReadUnsatisfiableError ) : [EOL] await tsk [EOL] [EOL] @ helper . run_async_test async def test_read_less ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] assert await reader . read ( [number] ) == data [EOL] [EOL] @ helper . run_async_test async def test_read_more ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] assert await reader . read ( [number] ) == data [ : [number] ] [EOL] [EOL] @ helper . run_async_test async def test_read_exactly ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( [number] , exactly = True ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] data1 = os . urandom ( [number] ) [EOL] [EOL] reader . _append_data ( data1 ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] data2 = os . urandom ( [number] ) [EOL] [EOL] reader . _append_data ( data2 ) [EOL] [EOL] assert await tsk == data1 + data2 [ : [number] ] [EOL] [EOL] @ helper . run_async_test async def test_read_till_end ( self ) : [EOL] reader = HttpRequestReader ( ReaderDelegateMock ( ) , initial = object ( ) ) [EOL] [EOL] data_chunks = [ ] [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( ) ) [EOL] [EOL] for _ in range ( [number] , [number] ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] data = os . urandom ( [number] ) [EOL] reader . _append_data ( data ) [EOL] data_chunks . append ( data ) [EOL] [EOL] reader . _append_end ( None ) [EOL] [EOL] assert await tsk == [string] . join ( data_chunks ) [EOL] [EOL] @ helper . run_async_test async def test_max_buf_len ( self ) : [EOL] delegate_mock = ReaderDelegateMock ( ) [EOL] [EOL] reader = HttpRequestReader ( delegate_mock , initial = object ( ) ) [EOL] [EOL] reader . max_buf_len = [number] * [number] [comment] [EOL] [EOL] data = bytearray ( ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read ( ) ) [EOL] [EOL] while len ( data ) <= reader . max_buf_len : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] assert delegate_mock . paused is False [EOL] [EOL] chunk = os . urandom ( [number] ) [EOL] [EOL] data += chunk [EOL] [EOL] reader . _append_data ( chunk ) [EOL] [EOL] assert delegate_mock . paused is True [EOL] [EOL] with pytest . raises ( MaxBufferLengthReachedError ) : [EOL] await tsk [EOL] [EOL] reader . max_buf_len = [number] * [number] [comment] [EOL] [EOL] reader . _append_end ( None ) [EOL] [EOL] assert await reader . read ( ) == data [EOL] [EOL] @ helper . run_async_test async def test_read_until ( self ) : [EOL] delegate_mock = ReaderDelegateMock ( ) [EOL] [EOL] reader = HttpRequestReader ( delegate_mock , initial = object ( ) ) [EOL] [EOL] reader . max_buf_len = [number] * [number] [comment] [EOL] [EOL] data = bytearray ( ) [EOL] [EOL] tsk = helper . loop . create_task ( reader . read_until ( ) ) [EOL] [EOL] while len ( data ) <= reader . max_buf_len : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] assert delegate_mock . paused is False [EOL] [EOL] chunk = [string] * [number] [EOL] [EOL] data += chunk [EOL] [EOL] reader . _append_data ( chunk ) [EOL] [EOL] assert delegate_mock . paused is True [EOL] [EOL] with pytest . raises ( MaxBufferLengthReachedError ) : [EOL] await tsk [EOL] [EOL] reader . max_buf_len = [number] * [number] [comment] [EOL] [EOL] data += [string] [EOL] reader . _append_data ( [string] ) [EOL] [EOL] assert await reader . read_until ( ) == data [EOL] [EOL] data = [string] [EOL] [EOL] tsk = helper . loop . create_task ( reader . read_until ( keep_separator = False ) ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] reader . _append_data ( data ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( asyncio . InvalidStateError ) : [EOL] tsk . result ( ) [EOL] [EOL] reader . _append_data ( [string] ) [EOL] [EOL] assert await tsk == data [EOL] [EOL] reader . _append_data ( data ) [EOL] reader . _append_end ( None ) [EOL] [EOL] with pytest . raises ( SeparatorNotFoundError ) : [EOL] await reader . read_until ( ) [EOL] [EOL] @ helper . run_async_test async def test_abort ( self ) : [EOL] mock = ReaderDelegateMock ( ) [EOL] reader = HttpRequestReader ( mock , initial = object ( ) ) [EOL] [EOL] assert mock . aborted is False [EOL] [EOL] reader . abort ( ) [EOL] [EOL] assert mock . aborted is True [EOL] [EOL] reader . _append_end ( ReadAbortedError ( ) ) [EOL] [EOL] with pytest . raises ( ReadAbortedError ) : [EOL] await reader . read ( ) [EOL] [EOL] def test_initial ( self ) : [EOL] initial_mock = object ( ) [EOL] [EOL] reader = HttpRequestReader ( object ( ) , initial = initial_mock ) [EOL] [EOL] assert initial_mock is reader . initial [EOL] [EOL] def test_write_response ( self ) : [EOL] mock = ReaderDelegateMock ( ) [EOL] reader = HttpRequestReader ( mock , initial = object ( ) ) [EOL] [EOL] with pytest . raises ( AttributeError ) : [EOL] reader . writer [EOL] [EOL] writer = reader . write_response ( [number] ) [EOL] [EOL] assert writer is mock . writer_mock [EOL] assert reader . writer is writer [EOL] [EOL] [EOL] class HttpResponseReaderTestCase : [EOL] def test_init ( self ) : [EOL] HttpResponseReader ( object ( ) , initial = object ( ) , writer = object ( ) ) [EOL] [EOL] def test_initial ( self ) : [EOL] initial_mock = object ( ) [EOL] [EOL] reader = HttpResponseReader ( object ( ) , initial = initial_mock , writer = object ( ) ) [EOL] [EOL] assert initial_mock is reader . initial [EOL] [EOL] def test_writer ( self ) : [EOL] writer_mock = object ( ) [EOL] [EOL] reader = HttpResponseReader ( object ( ) , writer = writer_mock , initial = object ( ) ) [EOL] [EOL] assert writer_mock is reader . writer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.bytes$ 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 $builtins.bytes$ 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 $builtins.bytearray$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.bytes$ 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $magichttp.readers.HttpRequestReader$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $builtins.str$ 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 0 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 $magichttp.writers.HttpResponseWriter$ 0 0 $magichttp.writers.HttpResponseWriter$ 0 $magichttp.readers.HttpRequestReader$ 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 $tests.test_readers.ReaderDelegateMock$ 0 0 0 0 $magichttp.readers.HttpRequestReader$ 0 $magichttp.writers.HttpResponseWriter$ 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $magichttp.readers.HttpResponseReader$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import tests [EOL] import typing [EOL] import asyncio [EOL] import magichttp [EOL] from magichttp import HttpRequestWriter , HttpResponseWriter [EOL] from magichttp . writers import HttpRequestWriterDelegate , HttpResponseWriterDelegate [EOL] from magichttp import WriteAfterFinishedError , WriteAbortedError [EOL] [EOL] from test_helper import TestHelper [EOL] [EOL] import asyncio [EOL] import os [EOL] import pytest [EOL] import time [EOL] [EOL] [EOL] helper = TestHelper ( ) [EOL] [EOL] [EOL] class HttpWriterDelegateMock ( HttpRequestWriterDelegate , HttpResponseWriterDelegate ) : [EOL] def __init__ ( self ) : [EOL] self . write_called = False [EOL] self . data_pieces = [ ] [EOL] self . finished = False [EOL] [EOL] self . flush_event = asyncio . Event ( ) [EOL] [EOL] self . aborted = False [EOL] [EOL] self . reader_mock = None [EOL] [EOL] self . _exc = None [EOL] [EOL] def write_data ( self , data , finished ) : [EOL] self . write_called = True [EOL] self . data_pieces . append ( data ) [EOL] self . finished = finished [EOL] [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] async def flush_buf ( self ) : [EOL] await self . flush_event . wait ( ) [EOL] [EOL] if self . _exc : [EOL] raise self . _exc [EOL] [EOL] def abort ( self ) : [EOL] self . aborted = True [EOL] [EOL] async def read_response ( self ) : [EOL] if self . reader_mock is None : [EOL] self . reader_mock = object ( ) [EOL] [EOL] return self . reader_mock [EOL] [EOL] [EOL] class HttpRequestWriterTestCase : [EOL] def test_init ( self ) : [EOL] HttpRequestWriter ( object ( ) , initial = object ( ) ) [EOL] [EOL] def test_write ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] writer . write ( [string] ) [EOL] assert mock . write_called is False [EOL] [EOL] data = os . urandom ( [number] ) [EOL] [EOL] writer . write ( data ) [EOL] assert mock . write_called is True [EOL] assert mock . data_pieces == [ data ] [EOL] [EOL] writer . finish ( ) [EOL] with pytest . raises ( WriteAfterFinishedError ) : [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] [EOL] def test_write_err ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] mock . _exc = WriteAbortedError ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] [EOL] @ helper . run_async_test async def test_flush_err ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] mock . flush_event . set ( ) [EOL] [EOL] mock . _exc = WriteAbortedError ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] await writer . flush ( ) [EOL] [EOL] @ helper . run_async_test async def test_finish ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] assert writer . finished ( ) is False [EOL] [EOL] finish_time = - [number] [EOL] tsk_running = asyncio . Event ( ) [EOL] [EOL] async def _wait_finish_task ( ) : [EOL] nonlocal finish_time [EOL] [EOL] tsk_running . set ( ) [EOL] await writer . wait_finished ( ) [EOL] finish_time = time . time ( ) [EOL] [EOL] tsk = helper . loop . create_task ( _wait_finish_task ( ) ) [EOL] [EOL] await tsk_running . wait ( ) [EOL] [EOL] writer . finish ( ) [EOL] event_time = time . time ( ) [EOL] [EOL] assert mock . write_called is True [EOL] assert mock . finished is True [EOL] assert mock . data_pieces == [ [string] ] [EOL] [EOL] with pytest . raises ( WriteAfterFinishedError ) : [EOL] writer . write ( os . urandom ( [number] ) ) [EOL] [EOL] assert writer . finished ( ) is True [EOL] [EOL] await tsk [EOL] [EOL] await writer . flush ( ) [EOL] [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( WriteAfterFinishedError ) : [EOL] writer . finish ( os . urandom ( [number] ) ) [EOL] [EOL] assert event_time < finish_time [EOL] [EOL] def test_finish_err ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] mock . _exc = WriteAbortedError ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] with pytest . raises ( WriteAbortedError ) : [EOL] writer . finish ( ) [EOL] [EOL] @ helper . run_async_test async def test_flush ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] flush_time = - [number] [EOL] tsk_running = asyncio . Event ( ) [EOL] [EOL] async def _flush_task ( ) : [EOL] nonlocal flush_time [EOL] [EOL] tsk_running . set ( ) [EOL] await writer . flush ( ) [EOL] flush_time = time . time ( ) [EOL] [EOL] tsk = helper . loop . create_task ( _flush_task ( ) ) [EOL] [EOL] await tsk_running . wait ( ) [EOL] [EOL] mock . flush_event . set ( ) [EOL] event_time = time . time ( ) [EOL] [EOL] await tsk [EOL] [EOL] assert event_time < flush_time [EOL] [EOL] def test_abort ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] assert mock . aborted is False [EOL] [EOL] writer . abort ( ) [EOL] [EOL] assert mock . aborted is True [EOL] [EOL] def test_initial ( self ) : [EOL] initial_mock = object ( ) [EOL] [EOL] writer = HttpRequestWriter ( object ( ) , initial = initial_mock ) [EOL] [EOL] assert initial_mock is writer . initial [EOL] [EOL] @ helper . run_async_test async def test_read_response ( self ) : [EOL] mock = HttpWriterDelegateMock ( ) [EOL] writer = HttpRequestWriter ( mock , initial = object ( ) ) [EOL] [EOL] with pytest . raises ( AttributeError ) : [EOL] writer . reader [EOL] [EOL] reader = await writer . read_response ( ) [EOL] [EOL] assert reader is mock . reader_mock [EOL] assert writer . reader is reader [EOL] [EOL] [EOL] class HttpResponseWriterTestCase : [EOL] def test_init ( self ) : [EOL] HttpResponseWriter ( object ( ) , initial = object ( ) , reader = object ( ) ) [EOL] [EOL] def test_initial ( self ) : [EOL] initial_mock = object ( ) [EOL] [EOL] writer = HttpResponseWriter ( object ( ) , initial = initial_mock , reader = object ( ) ) [EOL] [EOL] assert initial_mock is writer . initial [EOL] [EOL] def test_reader ( self ) : [EOL] reader_mock = object ( ) [EOL] [EOL] writer = HttpResponseWriter ( object ( ) , reader = reader_mock , initial = object ( ) ) [EOL] [EOL] assert reader_mock is writer . reader [EOL] [EOL] def test_reader_attr_err ( self ) : [EOL] writer = HttpResponseWriter ( object ( ) , reader = None , initial = object ( ) ) [EOL] [EOL] with pytest . raises ( AttributeError ) : [EOL] writer . reader [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $builtins.bytes$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 $builtins.bytes$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.locks.Event$ 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.readers.HttpResponseReader$ 0 0 $magichttp.writers.HttpRequestWriter$ 0 0 0 0 0 0 0 $magichttp.readers.HttpResponseReader$ 0 $tests.test_writers.HttpWriterDelegateMock$ 0 0 0 0 $magichttp.writers.HttpRequestWriter$ 0 $magichttp.readers.HttpResponseReader$ 0 $magichttp.readers.HttpResponseReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Tuple [EOL] import builtins [EOL] import magichttp [EOL] import urllib [EOL] import typing [EOL] import asyncio [EOL] from typing import Tuple , Optional [EOL] [EOL] import magichttp [EOL] import urllib . parse [EOL] import asyncio [EOL] [EOL] [EOL] class _EchoClientProtocol ( magichttp . HttpClientProtocol ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] self . conn_made_fur = asyncio . Future ( ) [EOL] [EOL] def connection_made ( self , transport ) : [EOL] super ( ) . connection_made ( transport ) [EOL] [EOL] if not self . conn_made_fur . done ( ) : [EOL] self . conn_made_fur . set_result ( None ) [EOL] [EOL] def connection_lost ( self , exc = None ) : [EOL] super ( ) . connection_lost ( exc ) [EOL] [EOL] if not self . conn_made_fur . done ( ) : [EOL] e = ConnectionError ( ) [EOL] if exc : [EOL] e . __cause__ = exc [EOL] self . conn_made_fur . set_exception ( e ) [EOL] [EOL] [EOL] async def get_page ( url ) : [EOL] parsed_url = urllib . parse . urlparse ( url ) [EOL] [EOL] _ , protocol = await asyncio . get_event_loop ( ) . create_connection ( _EchoClientProtocol , host = parsed_url . hostname , port = parsed_url . port or [number] ) [EOL] [EOL] await protocol . conn_made_fur [EOL] [EOL] ip , port , * _ = protocol . transport . get_extra_info ( [string] ) [EOL] [EOL] print ( f" [string] { ip } [string] { port }" ) [EOL] [EOL] writer = await protocol . write_request ( magichttp . HttpRequestMethod . Get , uri = parsed_url . path , authority = parsed_url . netloc , scheme = parsed_url . scheme ) [EOL] [EOL] print ( f" [string] { writer . initial }" ) [EOL] [EOL] writer . finish ( ) [EOL] print ( [string] ) [EOL] [EOL] reader = await writer . read_response ( ) [EOL] print ( f" [string] { reader . initial }" ) [EOL] [EOL] try : [EOL] body = await reader . read ( ) [EOL] [EOL] except magichttp . HttpStreamFinishedError : [EOL] body = [string] [EOL] [EOL] print ( f" [string] { body }" ) [EOL] print ( [string] ) [EOL] [EOL] protocol . close ( ) [EOL] [EOL] await protocol . wait_closed ( ) [EOL] print ( [string] ) [EOL] [EOL] return reader . initial , body [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] loop = asyncio . get_event_loop ( ) [EOL] loop . run_until_complete ( get_page ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Tuple , Set [EOL] import examples [EOL] import builtins [EOL] import magichttp [EOL] import typing [EOL] import asyncio [EOL] from typing import Optional , Set [EOL] [EOL] import asyncio [EOL] import magichttp [EOL] import weakref [EOL] [EOL] import traceback [EOL] [EOL] [EOL] class _EchoServerProtocol ( magichttp . HttpServerProtocol ) : [EOL] __slots__ = ( [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] self . conn_made_fur = asyncio . Future ( ) [EOL] [EOL] def connection_made ( self , transport ) : [EOL] super ( ) . connection_made ( transport ) [EOL] [EOL] if not self . conn_made_fur . done ( ) : [EOL] self . conn_made_fur . set_result ( None ) [EOL] [EOL] def connection_lost ( self , exc = None ) : [EOL] super ( ) . connection_lost ( exc ) [EOL] [EOL] if not self . conn_made_fur . done ( ) : [EOL] e = ConnectionError ( ) [EOL] if exc : [EOL] e . __cause__ = exc [EOL] self . conn_made_fur . set_exception ( e ) [EOL] [EOL] [EOL] class EchoHttpServer : [EOL] def __init__ ( self ) : [EOL] self . _protocols = weakref . WeakSet ( ) [EOL] [EOL] self . _loop = asyncio . get_event_loop ( ) [EOL] [EOL] self . _srv = None [EOL] [EOL] self . _tsks = set ( ) [EOL] [EOL] async def listen ( self , port , * , host = [string] ) : [EOL] assert self . _srv is None [EOL] [EOL] self . _srv = await self . _loop . create_server ( self . _create_protocol , port = port , host = host ) [EOL] [EOL] def _create_protocol ( self ) : [EOL] protocol = _EchoServerProtocol ( ) [EOL] self . _protocols . add ( protocol ) [EOL] [EOL] self . _tsks . add ( self . _loop . create_task ( self . _read_requests ( protocol ) ) ) [EOL] [EOL] return protocol [EOL] [EOL] async def _write_echo ( self , req_reader ) : [EOL] print ( f" [string] { req_reader . initial }" ) [EOL] try : [EOL] body = await req_reader . read ( ) [EOL] [EOL] except magichttp . HttpStreamReadFinishedError : [EOL] body = [string] [EOL] print ( f" [string] { body }" ) [EOL] [EOL] writer = req_reader . write_response ( [number] , headers = { [string] : [string] } ) [EOL] print ( f" [string] { writer . initial }" ) [EOL] [EOL] writer . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] writer . finish ( ) [EOL] print ( [string] ) [EOL] [EOL] async def _read_requests ( self , protocol ) : [EOL] await protocol . conn_made_fur [EOL] [EOL] ip , port , * _ = protocol . transport . get_extra_info ( [string] ) [EOL] print ( f" [string] { ip } [string] { port }" ) [EOL] [EOL] try : [EOL] async for req_reader in protocol : [EOL] await self . _write_echo ( req_reader ) [EOL] [EOL] except asyncio . CancelledError : [EOL] raise [EOL] [EOL] except Exception : [EOL] traceback . print_exc ( ) [EOL] [EOL] protocol . close ( ) [EOL] [EOL] raise [EOL] [EOL] finally : [EOL] await protocol . wait_closed ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] async def close ( self ) : [EOL] if self . _srv is None : [EOL] return [EOL] [EOL] self . _srv . close ( ) [EOL] [EOL] for protocol in self . _protocols : [EOL] protocol . close ( ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] if self . _protocols : [EOL] await asyncio . wait ( [ protocol . wait_closed ( ) for protocol in self . _protocols ] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] if self . _tsks : [EOL] for tsk in self . _tsks : [EOL] if not tsk . done ( ) : [EOL] tsk . cancel ( ) [EOL] [EOL] await asyncio . wait ( list ( self . _tsks ) ) [EOL] [EOL] await self . _srv . wait_closed ( ) [EOL] [EOL] self . _srv = None [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] loop = asyncio . get_event_loop ( ) [EOL] loop . set_debug ( True ) [EOL] [EOL] srv = EchoHttpServer ( ) [EOL] [EOL] loop . run_until_complete ( srv . listen ( [number] ) ) [EOL] [EOL] @ loop . call_soon def _print_welcome_msg ( ) : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] loop . run_forever ( ) [EOL] [EOL] except KeyboardInterrupt : [EOL] loop . run_until_complete ( srv . close ( ) ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $"weakref.WeakSet[_EchoServerProtocol]"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.AbstractServer]$ 0 0 0 0 0 0 $typing.Set[asyncio.Task[None]]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 $examples.echo_server._EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $examples.echo_server._EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examples.echo_server._EchoServerProtocol$ 0 0 0 0 0 0 $examples.echo_server._EchoServerProtocol$ 0 0 0 0 $None$ 0 0 0 $magichttp.HttpRequestReader$ 0 0 0 0 0 0 0 0 $magichttp.HttpRequestReader$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $magichttp.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 $magichttp.HttpRequestReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 $magichttp.writers.HttpResponseWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $_EchoServerProtocol$ 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $_EchoServerProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.AbstractServer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0