	0
from typing import Any , Dict [EOL] import typing [EOL] import time [EOL] [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy . schema import MetaData [EOL] [EOL] from sustainerds . api . core . persistence import BaseModel [EOL] [EOL] [EOL] NAMING_CONVENTION = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] metadata = MetaData ( naming_convention = NAMING_CONVENTION ) [EOL] Base = declarative_base ( cls = BaseModel , metadata = metadata ) [EOL] [EOL] assert [string] == time . strftime ( [string] ) , ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import apispec [EOL] import falcon [EOL] import typing [EOL] import sustainerds [EOL] import falcon [EOL] from apispec import APISpec [EOL] from apispec . ext . marshmallow import MarshmallowPlugin [EOL] [EOL] from sustainerds . api . core . persistence import InMemoryPersistence [EOL] from sustainerds . api . core . resource import ResourceContext , SchemaValidatorComponent [EOL] from sustainerds . api . core . route import add_routes [EOL] from sustainerds . api . entities import user [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def create_app ( sqla_session = None ) : [EOL] [docstring] [EOL] [comment] [EOL] app = falcon . API ( middleware = [ SchemaValidatorComponent ( ) ] ) [EOL] return app [EOL] [EOL] [EOL] def create_openapi_spec ( app ) : [EOL] [docstring] [EOL] spec = APISpec ( title = [string] , version = [string] , openapi_version = [string] , plugins = [ MarshmallowPlugin ( ) ] , ) [EOL] return spec [EOL] [EOL] [EOL] def configure_app ( app , spec , ctx ) : [EOL] add_routes ( app , spec , ctx , user ) [EOL] [EOL] [EOL] def get_app ( ) : [EOL] [docstring] [EOL] app = create_app ( ) [EOL] spec = create_openapi_spec ( app ) [EOL] ctx = ResourceContext ( persistence = InMemoryPersistence ( ) ) [EOL] configure_app ( app , spec , ctx ) [EOL] print ( spec . to_yaml ( ) ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.API$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $apispec.APISpec$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.API$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import sustainerds [EOL] from sustainerds . api . app import configure_app , create_app , create_openapi_spec [EOL] from sustainerds . api . core . persistence import InMemoryPersistence [EOL] from sustainerds . api . core . resource import ResourceContext [EOL] [EOL] [EOL] def print_spec ( ) : [EOL] [docstring] [EOL] app = create_app ( ) [EOL] spec = create_openapi_spec ( app ) [EOL] ctx = ResourceContext ( persistence = InMemoryPersistence ( ) ) [EOL] configure_app ( app , spec , ctx ) [EOL] print ( spec . to_yaml ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import apispec [EOL] import falcon [EOL] import typing [EOL] import sustainerds [EOL] import falcon [EOL] import pytest [EOL] from apispec import APISpec [EOL] from falcon import testing [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from sustainerds . api . app import configure_app , create_app , create_openapi_spec [EOL] from sustainerds . api . core . persistence import InMemoryPersistence [EOL] from sustainerds . api . core . resource import ResourceContext [EOL] [EOL] [EOL] @ pytest . fixture ( ) def resource_ctx ( ) : [EOL] return ResourceContext ( persistence = InMemoryPersistence ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture def plain_test_app ( ) : [EOL] return create_app ( ) [EOL] [EOL] [EOL] @ pytest . fixture def plain_openapi_spec ( plain_test_app ) : [EOL] return create_openapi_spec ( plain_test_app ) [EOL] [EOL] [EOL] @ pytest . fixture def test_app ( plain_test_app , plain_openapi_spec , resource_ctx , ) : [EOL] configure_app ( plain_test_app , plain_openapi_spec , resource_ctx ) [EOL] [EOL] return plain_test_app [EOL] [EOL] [EOL] @ pytest . fixture def test_client ( test_app ) : [EOL] [comment] [EOL] [comment] [EOL] return testing . TestClient ( test_app ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def engine ( ) : [EOL] return create_engine ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def tables ( engine ) : [EOL] SustainerdsBase . metadata . create_all ( engine ) [EOL] yield [EOL] SustainerdsBase . metadata . drop_all ( engine ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def dbsession ( engine , tables ) : [EOL] [docstring] [EOL] connection = engine . connect ( ) [EOL] [comment] [EOL] transaction = connection . begin ( ) [EOL] [comment] [EOL] session = Session ( bind = connection ) [EOL] [EOL] yield session [EOL] [EOL] session . close ( ) [EOL] [comment] [EOL] transaction . rollback ( ) [EOL] [comment] [EOL] connection . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.API$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $apispec.APISpec$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.API$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import apispec [EOL] import typing [EOL] import falcon [EOL] import sustainerds [EOL] import falcon [EOL] from apispec import APISpec [EOL] from marshmallow import Schema , fields [EOL] [EOL] from sustainerds . api . core . openapi import add_openapi_specs [EOL] from sustainerds . api . core . resource import ( BaseResource , RequestSchemaSpec , ResourceSchemaSpec , ResponseSchemaSpec , SchemaSpec , ) [EOL] [EOL] [EOL] class ATestResourceGetResponseSchema ( ResponseSchemaSpec ) : [EOL] class Json ( Schema ) : [EOL] email = fields . Email ( required = True ) [EOL] password = fields . String ( ) [EOL] [EOL] [EOL] class ATestResourcePostRequestSchema ( RequestSchemaSpec ) : [EOL] class Json ( Schema ) : [EOL] id = fields . UUID ( required = True ) [EOL] email = fields . Email ( required = True ) [EOL] password = fields . String ( required = True ) [EOL] [EOL] [EOL] class PathSchema ( Schema ) : [EOL] user_id = fields . UUID ( required = True ) [EOL] [EOL] [EOL] class ATestResource ( BaseResource ) : [EOL] @ property def resource_schema_spec ( self ) : [EOL] [EOL] return ResourceSchemaSpec ( name = [string] , path = PathSchema ( ) , GET = SchemaSpec ( request = RequestSchemaSpec ( ) , response = ATestResourceGetResponseSchema ( ) ) , POST = SchemaSpec ( request = ATestResourcePostRequestSchema ( ) , response = ResponseSchemaSpec ( ) ) , ) [EOL] [EOL] [EOL] def test_openapi_paths ( plain_test_app , plain_openapi_spec ) : [EOL] add_openapi_specs ( plain_openapi_spec , [string] , ATestResource ( plain_test_app , [string] ) , ) [EOL] [EOL] assert len ( plain_openapi_spec . components . _schemas ) == [number] [EOL] assert [string] in plain_openapi_spec . components . _schemas [EOL] assert [string] in plain_openapi_spec . components . _schemas [EOL] assert [string] in plain_openapi_spec . _paths [EOL] assert [string] in plain_openapi_spec . _paths [ [string] ] [ [string] ] [EOL] assert [string] in plain_openapi_spec . _paths [ [string] ] [EOL] assert len ( plain_openapi_spec . _paths [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] assert ( plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [number] ] [ [string] ] == [string] ) [EOL] assert plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] assert ( plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [number] ] [ [string] ] == True ) [EOL] assert ( plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [number] ] [ [string] ] [ [string] ] == [string] ) [EOL] [EOL] assert plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [string] ] [ [string] ] == { [string] : { [string] : { [string] : { [string] : [string] } } } , [string] : [string] , } [EOL] assert [string] in plain_openapi_spec . _paths [ [string] ] [ [string] ] [EOL] assert ( plain_openapi_spec . _paths [ [string] ] [ [string] ] [ [string] ] == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.resource.ResourceSchemaSpec
	0
from typing import Optional , Any , List , Type , Dict , Tuple [EOL] import falcon [EOL] import sustainerds [EOL] import builtins [EOL] import marshmallow [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from typing import Dict , List , Optional , Text , Tuple , Type [EOL] [EOL] import falcon [EOL] import ujson [EOL] from marshmallow . exceptions import ValidationError [EOL] from marshmallow . schema import Schema [EOL] [EOL] from sustainerds . api . core . persistence import PersistenceApi [EOL] [EOL] [EOL] HTTP_2xx = [ falcon . HTTP_200 , falcon . HTTP_201 , falcon . HTTP_202 , falcon . HTTP_203 , falcon . HTTP_204 , falcon . HTTP_205 , falcon . HTTP_206 , falcon . HTTP_207 , falcon . HTTP_208 , ] [EOL] [EOL] [EOL] @ dataclass class ResourceContext : [EOL] [docstring] [EOL] [EOL] persistence = ... [EOL] [EOL] [EOL] @ dataclass class RequestSchemaSpec : [EOL] [docstring] [EOL] [EOL] query = None [EOL] json = None [EOL] headers = None [EOL] cookies = None [EOL] form = None [EOL] [EOL] def __post_init__ ( self ) : [EOL] if hasattr ( self , [string] ) : [EOL] self . query = getattr ( self , [string] ) [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] self . json = getattr ( self , [string] ) [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] self . headers = getattr ( self , [string] ) [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] self . cookies = getattr ( self , [string] ) [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] self . form = getattr ( self , [string] ) [EOL] [EOL] [EOL] @ dataclass class ResponseSchemaSpec : [EOL] [docstring] [EOL] [EOL] json = None [EOL] headers = None [EOL] [EOL] def __post_init__ ( self ) : [EOL] if hasattr ( self , [string] ) : [EOL] self . json = getattr ( self , [string] ) [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] self . headers = getattr ( self , [string] ) [EOL] [EOL] [EOL] @ dataclass class SchemaSpec : [EOL] [docstring] [EOL] [EOL] request = ... [EOL] response = ... [EOL] [EOL] [EOL] @ dataclass class ResourceSchemaSpec : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] path = None [EOL] GET = None [EOL] HEAD = None [EOL] POST = None [EOL] PUT = None [EOL] DELETE = None [EOL] OPTIONS = None [EOL] TRACE = None [EOL] PATCH = None [EOL] CONNECT = None [EOL] [EOL] def get_methods ( self ) : [EOL] [docstring] [EOL] [EOL] def is_valid_method ( m ) : [EOL] if self . __dict__ [ m ] is None : [EOL] return False [EOL] [EOL] return isinstance ( self . __dict__ [ m ] , SchemaSpec ) [EOL] [EOL] return [ ( m , self . __dict__ [ m ] ) for m in self . __dataclass_fields__ if is_valid_method ( m ) ] [EOL] [EOL] [EOL] class BaseResource : [EOL] [docstring] [EOL] [EOL] ctx = ... [EOL] name = ... [EOL] [EOL] @ property def resource_schema_spec ( self ) : [EOL] [docstring] [EOL] return ResourceSchemaSpec ( name = self . name ) [EOL] [EOL] def __init__ ( self , ctx , name ) : [EOL] [docstring] [EOL] self . ctx = ctx [EOL] self . name = name [EOL] [EOL] def _validate_request_schema ( self , req , resp , params ) : [EOL] [docstring] [EOL] if self . resource_schema_spec : [EOL] schema_spec = getattr ( self . resource_schema_spec , req . method ) [EOL] if not schema_spec or not schema_spec . request : [EOL] return [EOL] [EOL] spec = schema_spec . request [EOL] [EOL] if spec . query : [EOL] s = spec . query ( ) [EOL] s . load ( req . params ) [EOL] [EOL] if spec . json : [EOL] s = spec . json ( ) [EOL] req . validated = s . load ( req . media ) [EOL] [EOL] if spec . cookies : [EOL] s = spec . cookies ( ) [EOL] s . load ( req . cookies ) [EOL] [EOL] if spec . headers : [EOL] s = spec . headers ( ) [EOL] s . load ( req . headers ) [EOL] [EOL] def _validate_response_schema ( self , req , resp , params ) : [EOL] [docstring] [EOL] if self . resource_schema_spec : [EOL] schema_spec = getattr ( self . resource_schema_spec , req . method ) [EOL] if not schema_spec or not schema_spec . response : [EOL] return [EOL] [EOL] spec = schema_spec . response [EOL] [EOL] if spec . json : [EOL] s = spec . json ( ) [EOL] s . load ( resp . media ) [EOL] [EOL] if spec . headers : [EOL] s = spec . headers ( ) [EOL] s . load ( resp . headers ) [EOL] [EOL] [EOL] class SchemaValidatorComponent : [EOL] [docstring] [EOL] [EOL] def process_resource ( self , req , resp , resource , params , ) : [EOL] try : [EOL] resource . _validate_request_schema ( req , resp , params ) [EOL] except ValidationError as ex : [EOL] raise falcon . errors . HTTPUnprocessableEntity ( description = ujson . dumps ( ex . messages ) ) [EOL] [EOL] def process_response ( self , req , resp , resource , params , ) : [EOL] try : [EOL] if resp . status in HTTP_2xx : [EOL] resource . _validate_response_schema ( req , resp , params ) [EOL] except ValidationError as ex : [EOL] raise falcon . errors . HTTPUnprocessableEntity ( description = ujson . dumps ( ex . messages ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.persistence.PersistenceApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $RequestSchemaSpec$ 0 0 0 $ResponseSchemaSpec$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Text$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ResourceContext$ 0 0 0 $typing.Text$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.resource.ResourceContext$ 0 $builtins.str$ 0 0 0 0 0 0 0 $sustainerds.api.core.resource.ResourceContext$ 0 $sustainerds.api.core.resource.ResourceContext$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 $SchemaSpec$ 0 0 0 0 0 0 0 $falcon.Request$ 0 0 0 0 0 0 $SchemaSpec$ 0 0 $SchemaSpec$ 0 0 0 0 0 0 0 $RequestSchemaSpec$ 0 $SchemaSpec$ 0 0 0 0 0 $RequestSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $RequestSchemaSpec$ 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Request$ 0 $typing.Dict$ 0 0 0 0 $RequestSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $RequestSchemaSpec$ 0 0 0 0 0 $falcon.Request$ 0 0 0 $typing.Any$ 0 0 0 $falcon.Request$ 0 0 0 0 0 0 $RequestSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $RequestSchemaSpec$ 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Request$ 0 0 0 0 0 0 $RequestSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $RequestSchemaSpec$ 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Request$ 0 0 0 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 $SchemaSpec$ 0 0 0 0 0 0 0 $falcon.Request$ 0 0 0 0 0 0 $SchemaSpec$ 0 0 $SchemaSpec$ 0 0 0 0 0 0 0 $ResponseSchemaSpec$ 0 $SchemaSpec$ 0 0 0 0 0 $ResponseSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $ResponseSchemaSpec$ 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Response$ 0 0 0 0 0 0 $ResponseSchemaSpec$ 0 0 0 0 $typing.Any$ 0 $ResponseSchemaSpec$ 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $BaseResource$ 0 $typing.Dict$ 0 0 0 0 0 0 0 $BaseResource$ 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $BaseResource$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $falcon.Response$ 0 0 0 0 0 0 $BaseResource$ 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Optional [EOL] import apispec [EOL] import falcon [EOL] import types [EOL] import sustainerds [EOL] import builtins [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from types import ModuleType [EOL] from typing import Dict , Optional , Text , Type [EOL] [EOL] import falcon [EOL] from apispec import APISpec [EOL] [EOL] from sustainerds . api . core . openapi import add_openapi_specs [EOL] from sustainerds . api . core . resource import BaseResource , ResourceContext [EOL] [EOL] [EOL] @ dataclass class SustainerdsRoute : [EOL] [docstring] [EOL] [EOL] path = ... [EOL] resource = ... [EOL] name = ... [EOL] kwargs = None [EOL] [EOL] [EOL] def add_routes ( app , openapi_spec , ctx , mod , fname = None , ) : [EOL] [docstring] [EOL] fn = getattr ( mod , fname if fname else [string] ) [EOL] if fn : [EOL] for r in fn ( app ) : [EOL] resource = r . resource ( ctx , r . name ) [EOL] [comment] [EOL] [EOL] if not r . kwargs : [EOL] r . kwargs = { } [EOL] [EOL] app . add_route ( r . path , resource , ** r . kwargs ) [EOL] add_openapi_specs ( openapi_spec , r . path , resource ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[sustainerds.api.core.resource.BaseResource]$ 0 0 0 $typing.Text$ 0 0 0 $typing.Optional[typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import sustainerds [EOL] from sustainerds . api . core . resource import ( RequestSchemaSpec , ResourceSchemaSpec , ResponseSchemaSpec , SchemaSpec , ) [EOL] [EOL] [EOL] def test_resource_schema_spec_get_methods ( ) : [EOL] spec = ResourceSchemaSpec ( name = [string] ) [EOL] assert len ( spec . get_methods ( ) ) == [number] [EOL] [EOL] spec = ResourceSchemaSpec ( name = [string] , GET = SchemaSpec ( request = RequestSchemaSpec ( ) , response = ResponseSchemaSpec ( ) ) , HEAD = SchemaSpec ( request = RequestSchemaSpec ( ) , response = ResponseSchemaSpec ( ) ) , ) [EOL] [EOL] op_names = [ x [ [number] ] for x in spec . get_methods ( ) ] [EOL] assert len ( op_names ) == [number] [EOL] assert [string] in op_names [EOL] assert [string] in op_names [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import apispec [EOL] import falcon [EOL] import typing [EOL] import sustainerds [EOL] from typing import List [EOL] [EOL] import falcon [EOL] from apispec import APISpec [EOL] [EOL] from sustainerds . api . core import test_route as this_mod [EOL] from sustainerds . api . core . resource import BaseResource , ResourceContext [EOL] from sustainerds . api . core . route import SustainerdsRoute , add_routes [EOL] [EOL] [EOL] def include_routes_empty ( app ) : [EOL] return [ ] [EOL] [EOL] [EOL] def include_routes_good ( app ) : [EOL] return [ SustainerdsRoute ( [string] , BaseResource , [string] ) , SustainerdsRoute ( [string] , BaseResource , [string] ) , ] [EOL] [EOL] [EOL] def test_add_routes ( plain_test_app , plain_openapi_spec , resource_ctx , ) : [EOL] add_routes ( plain_test_app , plain_openapi_spec , resource_ctx , this_mod , [string] , ) [EOL] add_routes ( plain_test_app , plain_openapi_spec , resource_ctx , this_mod , [string] , ) [EOL] [EOL] assert len ( plain_openapi_spec . _paths ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[sustainerds.api.core.route.SustainerdsRoute]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[sustainerds.api.core.route.SustainerdsRoute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Dict , Any [EOL] import builtins [EOL] import typing [EOL] import apispec [EOL] import sustainerds [EOL] from typing import Dict [EOL] [EOL] from apispec import APISpec [EOL] [EOL] from sustainerds . api . core . resource import BaseResource [EOL] [EOL] [EOL] def add_openapi_specs ( o , path , resource ) : [EOL] [docstring] [EOL] [EOL] operations = dict ( ) [EOL] [EOL] methods = resource . resource_schema_spec . get_methods ( ) [EOL] parameters = [ ] [EOL] [EOL] if resource . resource_schema_spec . path : [EOL] path_spec = resource . resource_schema_spec . path [EOL] [EOL] for fname , f in path_spec . fields . items ( ) : [EOL] parameters . append ( { [string] : fname , [string] : [string] , [string] : True , [string] : { [string] : [string] } , } ) [EOL] [EOL] for method , spec in methods : [EOL] [EOL] if spec . request : [EOL] if spec . request . json : [EOL] schema_name = f"{ type ( spec . request ) . __name__ }" [EOL] o . components . schema ( schema_name , schema = spec . request . json ) [EOL] [EOL] operations [ method . lower ( ) ] = dict ( summary = [string] , requestBody = f" [string] { schema_name }" ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if spec . response and spec . response . json : [EOL] schema_name = f"{ type ( spec . response ) . __name__ }" [EOL] o . components . schema ( schema_name , schema = spec . response . json ) [EOL] [EOL] operations . setdefault ( method . lower ( ) , dict ( ) ) [EOL] operations [ method . lower ( ) ] = { [string] : { [string] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : f" [string] { schema_name }" } } } , } } } [EOL] [EOL] o . path ( path = path , operations = operations , parameters = parameters ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import falcon [EOL] from falcon . testing import Result , TestClient [EOL] [EOL] from sustainerds . api . entities . user . model import UserDbModel [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_something ( ) : [EOL] d = UserDbModel ( ) [EOL] d . email = [string] [EOL] d . password = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_register_user ( test_client ) : [EOL] doc = { [string] : [string] , [string] : [string] } [EOL] result = test_client . simulate_post ( [string] , json = doc ) [EOL] [EOL] assert result . status_code == [number] [EOL] data = result . json [EOL] [EOL] result2 = test_client . simulate_get ( f" [string] { data [ [string] ] }" ) [EOL] assert result2 . status_code == [number] [EOL] [EOL] assert data == result2 . json [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , Optional [EOL] import uuid [EOL] import builtins [EOL] import typing [EOL] import sustainerds [EOL] import uuid [EOL] from typing import Dict , Optional , Text [EOL] [EOL] from sqlalchemy import Column , String [EOL] [EOL] from sustainerds . api . core . persistence import PersistenceApi , PersistenceError [EOL] from sustainerds . api . persistence import Base [EOL] [EOL] [EOL] class UserDbModel ( Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] email = Column ( String ( [number] ) ) [EOL] password = Column ( String ( [number] ) ) [EOL] [EOL] [EOL] class User : [EOL] [docstring] [EOL] [EOL] __id = None [EOL] email = ... [EOL] password = ... [EOL] __persistence = ... [EOL] __dirty = ... [EOL] [EOL] def __init__ ( self , persistence ) : [EOL] self . __persistence = persistence [EOL] [EOL] @ property def id ( self ) : [EOL] return self . __id [EOL] [EOL] def register ( self , email , password ) : [EOL] self . email = email [EOL] self . password = password [EOL] self . __dirty = True [EOL] [EOL] def save ( self ) : [EOL] data = dict ( email = self . email , password = self . password ) [EOL] res = self . __persistence . store ( [string] , data ) [EOL] [EOL] if res . err : [EOL] raise PersistenceError ( res . err ) [EOL] [EOL] self . __id = res . ok [ [string] ] [EOL] self . __dirty = False [EOL] [EOL] def load ( self , id ) : [EOL] res = self . __persistence . fetch ( [string] , id ) [EOL] [EOL] if res . err : [EOL] raise PersistenceError ( res . err ) [EOL] [EOL] if res . ok : [EOL] d = res . ok [EOL] [EOL] self . __id = d [ [string] ] [EOL] self . email = d [ [string] ] [EOL] self . password = d [ [string] ] [EOL] [EOL] def to_dict ( self ) : [EOL] return dict ( id = str ( self . id ) , email = self . email , password = self . password ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[sustainerds.api.entities.user.model.UserDbModel]$ 0 0 0 0 0 0 0 0 0 $typing.Type[sustainerds.api.entities.user.model.UserDbModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[uuid.UUID]$ 0 0 0 $typing.Text$ 0 0 0 $typing.Text$ 0 0 0 $sustainerds.api.core.persistence.PersistenceApi$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.persistence.PersistenceApi$ 0 0 0 0 0 $sustainerds.api.core.persistence.PersistenceApi$ 0 $sustainerds.api.core.persistence.PersistenceApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 $typing.Optional[uuid.UUID]$ 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 $typing.Dict$ 0 $sustainerds.api.core.persistence.StorageResult$ 0 0 0 0 0 0 $typing.Optional[uuid.UUID]$ 0 $typing.Dict$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import builtins [EOL] import falcon [EOL] import typing [EOL] import sustainerds [EOL] from typing import Dict [EOL] [EOL] from falcon import Request , Response [EOL] from marshmallow import fields [EOL] from marshmallow . schema import Schema [EOL] [EOL] from sustainerds . api . core . resource import ( BaseResource , RequestSchemaSpec , ResourceSchemaSpec , ResponseSchemaSpec , SchemaSpec , ) [EOL] from sustainerds . api . entities . user . model import User [EOL] [EOL] [EOL] class UserGetRequestSchema ( RequestSchemaSpec ) : [EOL] class Query ( Schema ) : [EOL] search = fields . Str ( ) [EOL] [EOL] [EOL] class UserGetResponseSchema ( ResponseSchemaSpec ) : [EOL] class Json ( Schema ) : [EOL] id = fields . UUID ( ) [EOL] email = fields . Email ( ) [EOL] password = fields . Str ( ) [EOL] [EOL] [EOL] class UserCollectionPostRequestSchema ( RequestSchemaSpec ) : [EOL] class Json ( Schema ) : [EOL] email = fields . Email ( required = True ) [EOL] password = fields . Str ( required = True ) [EOL] [EOL] [EOL] class UserCollectionPostResponseSchema ( ResponseSchemaSpec ) : [EOL] class Json ( Schema ) : [EOL] id = fields . UUID ( required = True ) [EOL] email = fields . Email ( required = True ) [EOL] password = fields . Str ( required = True ) [EOL] [EOL] [EOL] class UserCollectionResource ( BaseResource ) : [EOL] [docstring] [EOL] [EOL] @ property def resource_schema_spec ( self ) : [EOL] return ResourceSchemaSpec ( name = [string] , POST = SchemaSpec ( request = UserCollectionPostRequestSchema ( ) , response = UserCollectionPostResponseSchema ( ) , ) , ) [EOL] [EOL] def on_post ( self , req , resp ) : [EOL] d = req . validated [EOL] u = User ( self . ctx . persistence ) [EOL] u . register ( d [ [string] ] , d [ [string] ] ) [EOL] u . save ( ) [EOL] resp . media = u . to_dict ( ) [EOL] [EOL] [EOL] class UserResourcePathSchema ( Schema ) : [EOL] user_id = fields . UUID ( required = True ) [EOL] [EOL] [EOL] class UserResource ( BaseResource ) : [EOL] [docstring] [EOL] [EOL] @ property def resource_schema_spec ( self ) : [EOL] return ResourceSchemaSpec ( name = [string] , path = UserResourcePathSchema ( ) , GET = SchemaSpec ( request = UserGetRequestSchema ( ) , response = UserGetResponseSchema ( ) ) , ) [EOL] [EOL] def on_get ( self , req , resp , user_id ) : [EOL] [docstring] [EOL] u = User ( self . ctx . persistence ) [EOL] u . load ( user_id ) [EOL] resp . media = u . to_dict ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.core.resource.ResourceSchemaSpec$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $builtins.str$ 0 0 0 0 0 $sustainerds.api.entities.user.model.User$ 0 0 0 0 0 0 0 0 0 0 $sustainerds.api.entities.user.model.User$ 0 0 0 $builtins.str$ 0 0 $falcon.Response$ 0 0 0 $sustainerds.api.entities.user.model.User$ 0 0 0 0 0
from sustainerds . api . core . route import SustainerdsRoute [EOL] from sustainerds . api . entities . user . resources import UserCollectionResource , UserResource [EOL] [EOL] [EOL] def include_routes ( app ) : [EOL] return [ SustainerdsRoute ( [string] , UserCollectionResource , [string] ) , SustainerdsRoute ( [string] , UserResource , [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0