from typing import Any [EOL] import typing [EOL] import os [EOL] from slackclient import SlackClient [EOL] [EOL] [EOL] BOT_NAME = [string] [EOL] [EOL] slack_client = SlackClient ( os . environ . get ( [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] api_call = slack_client . api_call ( [string] ) [EOL] if api_call . get ( [string] ) : [EOL] [comment] [EOL] users = api_call . get ( [string] ) [EOL] for user in users : [EOL] if [string] in user and user . get ( [string] ) == BOT_NAME : [EOL] print ( [string] + user [ [string] ] + [string] + user . get ( [string] ) ) [EOL] else : [EOL] print ( [string] + BOT_NAME ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] import os [EOL] import time [EOL] from slackclient import SlackClient [EOL] import pyrebase [EOL] import linkatos . firebase as fb [EOL] import linkatos . activities as activities [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] BOT_ID = os . environ . get ( [string] ) [EOL] SLACK_BOT_TOKEN = os . environ . get ( [string] ) [EOL] [EOL] [comment] [EOL] slack_client = SlackClient ( SLACK_BOT_TOKEN ) [EOL] [EOL] [comment] [EOL] FB_API_KEY = os . environ . get ( [string] ) [EOL] FB_USER = os . environ . get ( [string] ) [EOL] FB_PASS = os . environ . get ( [string] ) [EOL] fb_credentials = { [string] : FB_USER , [string] : FB_PASS } [EOL] [EOL] [comment] [EOL] project_name = [string] [EOL] firebase = fb . initialise ( FB_API_KEY , project_name ) [EOL] [EOL] [comment] [EOL] if slack_client . rtm_connect ( ) : [EOL] cache = [ ] [EOL] [EOL] while True : [EOL] time . sleep ( [number] ) [comment] [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] cache = activities . event_consumer ( cache , slack_client , BOT_ID , fb_credentials , firebase ) [EOL] else : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . import printer [EOL] [EOL] [EOL] def is_empty ( xs ) : [EOL] [docstring] [EOL] return len ( xs ) == [number] [EOL] [EOL] [EOL] def add ( element , cache , slack_client ) : [EOL] [docstring] [EOL] cache . append ( element ) [EOL] printer . ask_confirmation ( element , slack_client ) [EOL] return cache [EOL] [EOL] [EOL] def extract_url_by_id ( cache , reaction_to_id ) : [EOL] [docstring] [EOL] for index in range ( [number] , len ( cache ) ) : [EOL] if cache [ index ] [ [string] ] == reaction_to_id : [EOL] element = cache [ index ] [EOL] cache . pop ( index ) [EOL] return element [EOL] [EOL] [comment] [EOL] return None [EOL] [EOL] [EOL] def extract_url_by_index ( cache , index ) : [EOL] [docstring] [EOL] if ( index > len ( cache ) - [number] ) or ( index < [number] ) : [EOL] return None [EOL] [EOL] element = cache [ index ] [EOL] cache . pop ( index ) [EOL] return element [EOL] [EOL] [EOL] def display ( cache , channel , slack_client ) : [EOL] [docstring] [EOL] printer . bot_says ( channel , printer . compose_list ( cache ) , slack_client ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from . import parser [EOL] from . import printer [EOL] from . import firebase as fb [EOL] from . import reaction as react [EOL] from . import message [EOL] from . import cache as cch [EOL] [EOL] [EOL] def is_empty ( events ) : [EOL] [docstring] [EOL] return ( ( events is None ) or ( len ( events ) == [number] ) ) [EOL] [EOL] [EOL] def is_usable ( element , bot_id ) : [EOL] [docstring] [EOL] return element is not None and is_not_from_bot ( bot_id , element [ [string] ] ) [EOL] [EOL] [EOL] def is_not_from_bot ( bot_id , user_id ) : [EOL] [docstring] [EOL] return not bot_id == user_id [EOL] [EOL] [EOL] def is_unfurled ( event ) : [EOL] [docstring] [EOL] return [string] in event [EOL] [EOL] [EOL] def message_consumer ( event , cache , slack_client , bot_id , fb_credentials , firebase ) : [EOL] [docstring] [EOL] url = parser . parse_url_message ( event ) [EOL] [EOL] if is_usable ( url , bot_id ) : [EOL] return cch . add ( url , cache , slack_client ) [EOL] [EOL] if message . to_bot ( event [ [string] ] , bot_id ) : [EOL] list_request = parser . parse_list_request ( event ) [EOL] purge_request = parser . parse_purge_request ( event ) [EOL] [EOL] if list_request is not None and list_request [ [string] ] == [string] : [EOL] cch . display ( cache , list_request [ [string] ] , slack_client ) [EOL] return cache [EOL] [EOL] if purge_request is not None and purge_request [ [string] ] == [string] and not cch . is_empty ( cache ) : [EOL] cch . extract_url_by_index ( cache , purge_request [ [string] ] - [number] ) [EOL] cch . display ( cache , purge_request [ [string] ] , slack_client ) [EOL] return cache [EOL] [EOL] return cache [EOL] [EOL] return cache [EOL] [EOL] [EOL] def reaction_added_consumer ( event , cache , fb_credentials , firebase ) : [EOL] [docstring] [EOL] reaction = parser . parse_reaction_added ( event ) [EOL] [EOL] if react . is_known ( reaction [ [string] ] ) : [EOL] selected_url = cch . extract_url_by_id ( cache , reaction [ [string] ] ) [EOL] react . handle ( reaction [ [string] ] , selected_url [ [string] ] , fb_credentials , firebase ) [EOL] return cache [EOL] [EOL] return cache [EOL] [EOL] def event_consumer ( cache , slack_client , bot_id , fb_credentials , firebase ) : [EOL] [docstring] [EOL] [comment] [EOL] events = slack_client . rtm_read ( ) [EOL] [EOL] if is_empty ( events ) : [EOL] return cache [EOL] [EOL] for event in events : [EOL] if is_unfurled ( event ) : [EOL] return cache [EOL] [EOL] if event [ [string] ] == [string] and [string] not in event : [EOL] return message_consumer ( event , cache , slack_client , bot_id , fb_credentials , firebase ) [EOL] [EOL] if event [ [string] ] == [string] and len ( cache ) > [number] : [EOL] return reaction_added_consumer ( event , cache , fb_credentials , firebase ) [EOL] return cache [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . import firebase as fb [EOL] [EOL] [EOL] def positive_reaction ( reaction ) : [EOL] [docstring] [EOL] return reaction == [string] [EOL] [EOL] [EOL] def is_known ( reaction ) : [EOL] [docstring] [EOL] return reaction in [ [string] , [string] ] [EOL] [EOL] [EOL] def handle ( reaction , url , fb_credentials , firebase ) : [EOL] [docstring] [EOL] if positive_reaction ( reaction ) : [EOL] fb . connect_and_store_url ( url , fb_credentials , firebase ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] def bot_says ( channel , text , slack_client ) : [EOL] [docstring] [EOL] return slack_client . api_call ( [string] , channel = channel , text = text , as_user = True ) [EOL] [EOL] [EOL] def compose_explanation ( url ) : [EOL] [docstring] [EOL] return [string] . format ( url ) [EOL] [EOL] [EOL] def ask_confirmation ( message , slack_client ) : [EOL] [docstring] [EOL] bot_says ( message [ [string] ] , compose_explanation ( message [ [string] ] ) , slack_client ) [EOL] [EOL] [EOL] def compose_list ( url_list ) : [EOL] [docstring] [EOL] if len ( url_list ) == [number] : [EOL] return [string] [EOL] [EOL] intro = [string] [EOL] options = [ [string] . format ( i + [number] , v [ [string] ] ) for i , v in enumerate ( url_list ) ] [EOL] [EOL] return intro + [string] . join ( options ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from . import message [EOL] [EOL] [EOL] def parse_url_message ( event ) : [EOL] [docstring] [EOL] url = message . extract_url ( event [ [string] ] ) [EOL] [EOL] if url is None : [EOL] return None [EOL] [EOL] url_cache = { [string] : url , [string] : event [ [string] ] , [string] : event [ [string] ] , [string] : [string] , [string] : event [ [string] ] } [EOL] [EOL] return url_cache [EOL] [EOL] [EOL] def parse_reaction_added ( event ) : [EOL] [docstring] [EOL] reaction = { [string] : event [ [string] ] , [string] : event [ [string] ] [ [string] ] , [string] : event [ [string] ] [ [string] ] , [string] : [string] , [string] : event [ [string] ] , [string] : event [ [string] ] } [EOL] [EOL] return reaction [EOL] [EOL] [EOL] def parse_list_request ( event ) : [EOL] [docstring] [EOL] if not message . is_list_request ( event [ [string] ] ) : [EOL] return None [EOL] [EOL] list_request = { [string] : event [ [string] ] , [string] : [string] } [EOL] [EOL] return list_request [EOL] [EOL] [EOL] def parse_purge_request ( event ) : [EOL] [docstring] [EOL] index = message . purge_request ( event [ [string] ] ) [EOL] if index is None : [EOL] return None [EOL] [EOL] purge_request = { [string] : index , [string] : [string] , [string] : event [ [string] ] } [EOL] [EOL] return purge_request [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import pyrebase [EOL] [EOL] [EOL] def initialise ( api_key , project_name ) : [EOL] [docstring] [EOL] config = { [string] : api_key , [string] : [string] . format ( project_name ) , [string] : [string] . format ( project_name ) , [string] : [string] . format ( project_name ) , } [EOL] [EOL] return pyrebase . initialize_app ( config ) [EOL] [EOL] [EOL] def authenticate ( credentials , auth ) : [EOL] [docstring] [EOL] user = auth . sign_in_with_email_and_password ( credentials [ [string] ] , credentials [ [string] ] ) [EOL] return user [EOL] [EOL] [EOL] def get_token ( credentials , firebase ) : [EOL] [docstring] [EOL] user = authenticate ( credentials , firebase . auth ( ) ) [EOL] return user [ [string] ] [EOL] [EOL] [EOL] def to_data ( url ) : [EOL] [docstring] [EOL] return { [string] : url } [EOL] [EOL] [EOL] def store_url ( url , db , token ) : [EOL] [docstring] [EOL] return db . push ( to_data ( url ) , token ) [EOL] [EOL] [EOL] def urls_db ( firebase ) : [EOL] [docstring] [EOL] return firebase . database ( ) . child ( [string] ) [EOL] [EOL] [EOL] def connect_and_store_url ( url , credentials , firebase ) : [EOL] [docstring] [EOL] [comment] [EOL] token = get_token ( credentials , firebase ) [EOL] db = urls_db ( firebase ) [EOL] store_url ( url , db , token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Match [EOL] import typing [EOL] import re [EOL] [EOL] [EOL] def extract_url ( message ) : [EOL] [docstring] [EOL] [comment] [EOL] url_re = [string] [EOL] captures = re . search ( url_re , message ) [EOL] [EOL] if captures is not None : [EOL] captures = captures . group ( [number] ) . strip ( ) [EOL] [EOL] return captures [EOL] [EOL] [EOL] def to_bot ( message , bot_id ) : [EOL] [docstring] [EOL] bot_re = [string] + bot_id + [string] [EOL] bot_found = re . search ( bot_re , message ) [EOL] [EOL] return bot_found is not None [EOL] [EOL] [EOL] def is_list_request ( message ) : [EOL] [docstring] [EOL] list_found = re . search ( [string] , message ) [EOL] [EOL] return list_found is not None [EOL] [EOL] [EOL] def purge_request ( message ) : [EOL] [docstring] [EOL] index_found = re . search ( [string] , message ) [EOL] [EOL] if index_found is None : [EOL] return None [EOL] [EOL] return int ( index_found . group ( [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List [EOL] import typing [EOL] import pytest [EOL] from linkatos import cache as cch [EOL] [EOL] [EOL] def test_equal_ids ( ) : [EOL] cache = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] id_two = [string] [EOL] extracted = { [string] : [string] } [EOL] assert cch . extract_url_by_id ( cache , id_two ) == extracted [EOL] [EOL] [EOL] def test_different_ids ( ) : [EOL] url_cache_list = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] id_two = [string] [EOL] assert cch . extract_url_by_id ( url_cache_list , id_two ) is None [EOL] [EOL] [EOL] def test_found_index ( ) : [EOL] cache = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] index = [number] - [number] [EOL] extracted = { [string] : [string] } [EOL] assert cch . extract_url_by_index ( cache , index ) == extracted [EOL] [EOL] [EOL] def test_out_of_bounds_index ( ) : [EOL] cache = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] index = [number] [EOL] assert cch . extract_url_by_index ( cache , index - [number] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] import pytest [EOL] from linkatos import parser [EOL] [EOL] [EOL] def test_parse_reaction_added ( ) : [EOL] event = { [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [number] } , [string] : [string] , [string] : [string] } [EOL] reaction = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] assert parser . parse_reaction_added ( event ) == reaction [EOL] [EOL] [EOL] def test_parse_url ( ) : [EOL] event = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] parsed_url = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } [EOL] assert parser . parse_url_message ( event ) == parsed_url [EOL] [EOL] [EOL] def test_empty_message ( ) : [EOL] event = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] assert parser . parse_url_message ( event ) is None [EOL] [EOL] [EOL] def test_parse_list_request ( ) : [EOL] event = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] parsed_list_request = { [string] : [string] , [string] : [string] , } [EOL] assert parser . parse_list_request ( event ) == parsed_list_request [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] from linkatos import activities [EOL] [EOL] [EOL] def test_none_event ( ) : [EOL] event = None [EOL] assert activities . is_empty ( event ) is True [EOL] [EOL] [EOL] def test_len_zero_event ( ) : [EOL] event = [ ] [EOL] assert activities . is_empty ( event ) is True [EOL] [EOL] [EOL] def test_unusable_element ( ) : [EOL] element = None [EOL] bot_id = [string] [EOL] assert activities . is_usable ( element , bot_id ) is False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from linkatos import reaction as react [EOL] [EOL] [EOL] def test_positive_reaction ( ) : [EOL] reaction = [string] [EOL] assert react . positive_reaction ( reaction ) is True [EOL] [EOL] [EOL] def test_not_positive_reaction ( ) : [EOL] reaction = [string] [EOL] assert react . positive_reaction ( reaction ) is False [EOL] [EOL] [EOL] def test_known_reaction_neg ( ) : [EOL] reaction = [string] [EOL] assert react . is_known ( reaction ) is True [EOL] [EOL] [EOL] def test_known_reaction_pos ( ) : [EOL] reaction = [string] [EOL] assert react . is_known ( reaction ) is True [EOL] [EOL] [EOL] def test_unknown_reaction ( ) : [EOL] reaction = [string] [EOL] assert react . is_known ( reaction ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from linkatos import message as mess [EOL] [EOL] [EOL] [comment] [EOL] def test_basic_url_detection_of_https ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_hash_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_plus_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_equal_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_qmark_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_and_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_hyphen_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_underscore_in_url ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_detection_of_http_in_the_middle ( ) : [EOL] expected = [string] [EOL] text = [string] [EOL] assert mess . extract_url ( text ) == expected [EOL] [EOL] [EOL] def test_message_does_not_have_a_url ( ) : [EOL] text = [string] [EOL] assert mess . extract_url ( text ) is None [EOL] [EOL] [EOL] def test_to_bot ( ) : [EOL] text = [string] [EOL] bot_id = [string] [EOL] assert mess . to_bot ( text , bot_id ) is True [EOL] [EOL] [EOL] def test_not_to_bot ( ) : [EOL] text = [string] [EOL] bot_id = [string] [EOL] assert mess . to_bot ( text , bot_id ) is False [EOL] [EOL] [EOL] def test_is_list ( ) : [EOL] text = [string] [EOL] assert mess . is_list_request ( text ) is True [EOL] [EOL] [EOL] def test_is_not_list ( ) : [EOL] text = [string] [EOL] assert mess . is_list_request ( text ) is False [EOL] [EOL] [EOL] def test_is_purge_request ( ) : [EOL] message = [string] [EOL] assert mess . purge_request ( message ) == [number] [EOL] [EOL] [EOL] def test_is_not_purge_request ( ) : [EOL] message = [string] [EOL] assert mess . purge_request ( message ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import pytest [EOL] from linkatos import firebase as fb [EOL] [EOL] [EOL] def test_to_data ( ) : [EOL] url = [string] [EOL] data = { [string] : [string] } [EOL] assert fb . to_data ( url ) == data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0