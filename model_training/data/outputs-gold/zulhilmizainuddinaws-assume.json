import os [EOL] import sys [EOL] [EOL] from awsassume import __version__ [EOL] from setuptools import setup [EOL] [EOL] [EOL] sys . path . append ( f'{ os . getcwd ( ) } [string] ' ) [EOL] sys . path . append ( f'{ os . getcwd ( ) } [string] ' ) [EOL] [EOL] readme = None [EOL] with open ( [string] , [string] ) as file : [EOL] readme = file . read ( ) [EOL] [EOL] setup ( name = [string] , version = __version__ , description = [string] , long_description = readme , url = [string] , author = [string] , author_email = [string] , license = [string] , packages = [ [string] ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , python_requires = [string] , install_requires = [ [string] , [string] , [string] ] , tests_require = [ [string] ] , setup_requires = [ [string] ] , entry_points = { [string] : [ [string] ] } , test_suite = [string] , zip_safe = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import awsassume [EOL] import builtins [EOL] import typing [EOL] import os [EOL] [EOL] from typing import Dict [EOL] [EOL] from awsassume . data_models import Credentials [EOL] [EOL] [EOL] class EnvironmentVariable ( object ) : [EOL] [EOL] ACCESS_KEY_ID_KEY = [string] [EOL] SECRET_ACCESS_KEY_KEY = [string] [EOL] SESSION_TOKEN_KEY = [string] [EOL] DEFAULT_REGION_KEY = [string] [EOL] [EOL] @ staticmethod def display_credentials_to_be_exported ( credentials , region_name = None ) : [EOL] [EOL] print ( f' [string] { EnvironmentVariable . ACCESS_KEY_ID_KEY } [string] { credentials . access_key_id }' ) [EOL] print ( f' [string] { EnvironmentVariable . SECRET_ACCESS_KEY_KEY } [string] { credentials . secret_access_key }' ) [EOL] print ( f' [string] { EnvironmentVariable . SESSION_TOKEN_KEY } [string] { credentials . session_token }' ) [EOL] [EOL] if region_name is not None : [EOL] print ( f' [string] { EnvironmentVariable . DEFAULT_REGION_KEY } [string] { region_name }' ) [EOL] [EOL] @ staticmethod def generate_command_to_export_credentials ( credentials , region_name = None ) : [EOL] [EOL] export_access_key_id = f' [string] { EnvironmentVariable . ACCESS_KEY_ID_KEY } [string] { credentials . access_key_id } [string] ' [EOL] export_secret_access_key = f' [string] { EnvironmentVariable . SECRET_ACCESS_KEY_KEY } [string] { credentials . secret_access_key } [string] ' [EOL] export_session_token = f' [string] { EnvironmentVariable . SESSION_TOKEN_KEY } [string] { credentials . session_token } [string] ' [EOL] [EOL] command = f'{ export_access_key_id } [string] { export_secret_access_key } [string] { export_session_token }' [EOL] [EOL] if region_name is not None : [EOL] export_default_region = f' [string] { EnvironmentVariable . DEFAULT_REGION_KEY } [string] { region_name } [string] ' [EOL] [EOL] command = f'{ command } [string] { export_default_region }' [EOL] [EOL] return command [EOL] [EOL] @ staticmethod def get_env_var_with_credentials ( credentials , region_name = None ) : [EOL] env_var_copy = os . environ . copy ( ) [EOL] [EOL] env_var_copy [ EnvironmentVariable . ACCESS_KEY_ID_KEY ] = credentials . access_key_id [EOL] env_var_copy [ EnvironmentVariable . SECRET_ACCESS_KEY_KEY ] = credentials . secret_access_key [EOL] env_var_copy [ EnvironmentVariable . SESSION_TOKEN_KEY ] = credentials . session_token [EOL] [EOL] if region_name is not None : [EOL] env_var_copy [ EnvironmentVariable . DEFAULT_REGION_KEY ] = region_name [EOL] [EOL] return env_var_copy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 $awsassume.data_models.Credentials$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $awsassume.data_models.Credentials$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $awsassume.data_models.Credentials$ 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0
import awsassume [EOL] from awsassume . assume_role import AssumeRole [EOL] from awsassume . assume_role_cache_executor import AssumeRoleCacheExecutor [EOL] from awsassume . assume_role_executor import AssumeRoleExecutor [EOL] from awsassume . assume_role_no_cache_executor import AssumeRoleNoCacheExecutor [EOL] from awsassume . data_models import AssumeRoleArgs , AssumeRoleType , CliArgs , ResponseCacheArgs [EOL] from awsassume . response_cache_adapter import ResponseCacheAdapter [EOL] from awsassume . security_token_service import SecurityTokenService [EOL] [EOL] [EOL] class AssumeRoleExecutorFactory ( object ) : [EOL] [EOL] @ staticmethod def get_executor ( cli_args ) : [EOL] [EOL] assume_role_args = AssumeRoleArgs ( role_arn = cli_args . role_arn , role_session_name = cli_args . role_session_name , region_name = cli_args . region_name ) [EOL] security_token_service = AssumeRole ( assume_role_args ) [EOL] [EOL] assume_role_executor = None [EOL] if cli_args . no_cache is True : [EOL] assume_role_executor = AssumeRoleNoCacheExecutor ( security_token_service ) [EOL] else : [EOL] response_cache_args = ResponseCacheArgs ( role_arn = cli_args . role_arn , role_session_name = cli_args . role_session_name , region_name = cli_args . region_name , assume_role_type = AssumeRoleType . DEFAULT ) [EOL] [EOL] response_cache_adapter = ResponseCacheAdapter ( response_cache_args ) [EOL] assume_role_executor = AssumeRoleCacheExecutor ( security_token_service , response_cache_adapter ) [EOL] [EOL] return assume_role_executor [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from awsassume . main import main [EOL] [EOL] [EOL] def console_entry ( ) : [EOL] main ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import datetime [EOL] import awsassume [EOL] import typing [EOL] from datetime import datetime , timezone [EOL] [EOL] from awsassume . assume_role_executor import AssumeRoleExecutor [EOL] from awsassume . response_cache_adapter import ResponseCacheAdapter [EOL] from awsassume . data_models import AssumedRoleResponse , AssumedRoleResponseCredentials , Credentials [EOL] from awsassume . security_token_service import SecurityTokenService [EOL] [EOL] [EOL] class AssumeRoleCacheExecutor ( AssumeRoleExecutor ) : [EOL] [EOL] def __init__ ( self , security_token_service , response_cache_adapter ) : [EOL] [EOL] self . security_token_service = security_token_service [EOL] self . response_cache_adapter = response_cache_adapter [EOL] [EOL] def execute ( self ) : [EOL] credentials = None [EOL] [EOL] assumed_role_response = self . response_cache_adapter . get_response_from_cache ( ) [EOL] if assumed_role_response is not None : [EOL] [EOL] expiration = assumed_role_response [ [string] ] [ [string] ] [EOL] if expiration is not None and datetime . now ( timezone . utc ) < expiration : [EOL] credentials = self . compose_credentials ( assumed_role_response ) [EOL] else : [EOL] assumed_role_response = self . newly_request_and_cache_assume_role ( ) [EOL] credentials = self . compose_credentials ( assumed_role_response ) [EOL] else : [EOL] assumed_role_response = self . newly_request_and_cache_assume_role ( ) [EOL] credentials = self . compose_credentials ( assumed_role_response ) [EOL] [EOL] return credentials [EOL] [EOL] def newly_request_and_cache_assume_role ( self ) : [EOL] assumed_role_response = self . security_token_service . assume_role ( ) [EOL] [EOL] self . response_cache_adapter . set_response_to_cache ( assumed_role_response ) [EOL] [EOL] return assumed_role_response [EOL] [EOL] def compose_credentials ( self , assumed_role_response ) : [EOL] response_credentials = assumed_role_response [ [string] ] [EOL] [EOL] credentials = Credentials ( access_key_id = response_credentials [ [string] ] , secret_access_key = response_credentials [ [string] ] , session_token = response_credentials [ [string] ] , expiration = response_credentials [ [string] ] ) [EOL] [EOL] return credentials [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0
import awsassume [EOL] from abc import ABC , abstractmethod [EOL] [EOL] from awsassume . data_models import Credentials [EOL] [EOL] [EOL] class AssumeRoleExecutor ( ABC ) : [EOL] [EOL] @ abstractmethod def execute ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0
from typing import Any [EOL] import awsassume [EOL] import argparse [EOL] import typing [EOL] import argparse [EOL] [EOL] from typing import Any [EOL] [EOL] from awsassume . data_models import CliArgs [EOL] [EOL] [EOL] class CommandLineArgs ( object ) : [EOL] def __init__ ( self ) : [EOL] self . parser = argparse . ArgumentParser ( description = [string] ) [EOL] [EOL] required_args = self . parser . add_argument_group ( [string] ) [EOL] required_args . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] required_args . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] [EOL] self . parser . add_argument ( [string] , required = False , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , [string] , required = False , help = [string] ) [EOL] self . parser . add_argument ( [string] , [string] , required = False , nargs = argparse . REMAINDER , help = [string] ) [EOL] [EOL] def get_cli_args ( self ) : [EOL] [EOL] parsed_cli_args = self . parser . parse_args ( ) [EOL] [EOL] cli_args = CliArgs ( role_arn = parsed_cli_args . role_arn , role_session_name = parsed_cli_args . role_session_name , command = parsed_cli_args . command , region_name = parsed_cli_args . region , no_cache = parsed_cli_args . no_cache ) [EOL] [EOL] return cli_args [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.CliArgs$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.CliArgs$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $awsassume.data_models.CliArgs$ 0
from typing import Dict , List [EOL] import builtins [EOL] import typing [EOL] import subprocess [EOL] [EOL] from typing import Dict , List [EOL] [EOL] [EOL] class CommandExecutor ( object ) : [EOL] [EOL] @ staticmethod def execute ( command , env_var ) : [EOL] subprocess . Popen ( command , env = env_var ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.List[builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0
import builtins [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
import awsassume [EOL] from awsassume . assume_role_executor import AssumeRoleExecutor [EOL] from awsassume . data_models import AssumedRoleResponse , AssumedRoleResponseCredentials , Credentials [EOL] from awsassume . security_token_service import SecurityTokenService [EOL] [EOL] [EOL] class AssumeRoleNoCacheExecutor ( AssumeRoleExecutor ) : [EOL] [EOL] def __init__ ( self , security_token_service ) : [EOL] self . security_token_service = security_token_service [EOL] [EOL] def execute ( self ) : [EOL] response = self . security_token_service . assume_role ( ) [EOL] [EOL] response_credentials = response [ [string] ] [EOL] credentials = Credentials ( access_key_id = response_credentials [ [string] ] , secret_access_key = response_credentials [ [string] ] , session_token = response_credentials [ [string] ] , expiration = response_credentials [ [string] ] ) [EOL] [EOL] return credentials [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.Credentials$ 0
from typing import Dict , Optional , Match , Any [EOL] import awsassume [EOL] import builtins [EOL] import typing [EOL] import errno [EOL] import os [EOL] import pickle [EOL] import re [EOL] [EOL] from awsassume . data_models import AssumedRoleResponse , ResponseCacheArgs [EOL] [EOL] [EOL] class ResponseCache ( object ) : [EOL] cache_directory = f'{ os . path . expanduser ( [string] ) } [string] ' [EOL] [EOL] def __init__ ( self ) : [EOL] try : [EOL] os . makedirs ( ResponseCache . cache_directory ) [EOL] except OSError as ex : [EOL] if ex . errno != errno . EEXIST : [EOL] raise [EOL] [EOL] def set_response_to_cache ( self , response_cache_args , assumed_role_response ) : [EOL] try : [EOL] with open ( self . get_cache_full_path ( response_cache_args ) , [string] ) as file : [EOL] pickle . dump ( assumed_role_response , file ) [EOL] except OSError : [EOL] raise [EOL] [EOL] def get_response_from_cache ( self , response_cache_args ) : [EOL] assumed_role_response = None [EOL] [EOL] try : [EOL] with open ( self . get_cache_full_path ( response_cache_args ) , [string] ) as file : [EOL] assumed_role_response = pickle . load ( file ) [EOL] except FileNotFoundError : [EOL] pass [EOL] except OSError : [EOL] raise [EOL] [EOL] return assumed_role_response [EOL] [EOL] def delete_cache_file ( self , response_cache_args ) : [EOL] try : [EOL] os . remove ( self . get_cache_full_path ( response_cache_args ) ) [EOL] except OSError : [EOL] raise [EOL] [EOL] def get_cache_full_path ( self , response_cache_args ) : [EOL] full_path = f'{ ResponseCache . cache_directory } [string] { self . get_cache_name ( response_cache_args ) }' [EOL] [EOL] return full_path [EOL] [EOL] def get_cache_name ( self , response_cache_args ) : [EOL] cache_name = None [EOL] [EOL] matched_arn = re . match ( [string] , response_cache_args . role_arn ) [EOL] if matched_arn : [EOL] role_session_name_section = response_cache_args . role_session_name [EOL] role_arn_section = f'{ matched_arn . group ( [number] ) } [string] { matched_arn . group ( [number] ) }' [EOL] [EOL] region_name_section = [string] [EOL] if response_cache_args . region_name is not None : [EOL] region_name_section = response_cache_args . region_name [EOL] [EOL] cache_name = f'{ role_session_name_section } [string] { role_arn_section } [string] { region_name_section } [string] { response_cache_args . assume_role_type . name }' [EOL] [EOL] return cache_name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import awsassume [EOL] import typing [EOL] import sys [EOL] [EOL] from awsassume . assume_role_executor import AssumeRoleExecutor [EOL] from awsassume . assume_role_executor_factory import AssumeRoleExecutorFactory [EOL] from awsassume . command_executor import CommandExecutor [EOL] from awsassume . command_line_args import CommandLineArgs [EOL] from awsassume . data_models import CliArgs , Credentials [EOL] from awsassume . environment_variable import EnvironmentVariable [EOL] [EOL] [EOL] def main ( ) : [EOL] try : [EOL] cli_args = CommandLineArgs ( ) . get_cli_args ( ) [EOL] [EOL] assume_role_executor = AssumeRoleExecutorFactory . get_executor ( cli_args ) [EOL] [EOL] credentials = assume_role_executor . execute ( ) [EOL] [EOL] if not cli_args . command : [EOL] print ( [string] ) [EOL] EnvironmentVariable . display_credentials_to_be_exported ( credentials , cli_args . region_name ) [EOL] [EOL] print ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] command_to_eval = EnvironmentVariable . generate_command_to_export_credentials ( credentials , cli_args . region_name ) [EOL] print ( command_to_eval ) [EOL] else : [EOL] env_var_with_credentials = EnvironmentVariable . get_env_var_with_credentials ( credentials , cli_args . region_name ) [EOL] [EOL] CommandExecutor . execute ( cli_args . command , env_var_with_credentials ) [EOL] except Exception as ex : [EOL] sys . exit ( ex ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] import datetime [EOL] import os [EOL] import pytest [EOL] [EOL] from dateutil . tz import tzutc [EOL] [EOL] from awsassume . data_models import Credentials [EOL] from awsassume . environment_variable import EnvironmentVariable [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def credentials ( ) : [EOL] return Credentials ( access_key_id = [string] , secret_access_key = [string] , session_token = [string] , expiration = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tzutc ( ) ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = [ None , [string] ] ) def region_name ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_display_credentials_to_be_exported ( credentials , region_name , capsys ) : [EOL] EnvironmentVariable . display_credentials_to_be_exported ( credentials , region_name ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] print_access_key_id = [string] [EOL] print_secret_access_key = [string] [EOL] print_session_token = [string] [EOL] [EOL] if region_name is not None : [EOL] print_default_region = f' [string] { region_name }' [EOL] [EOL] assert out == f'{ print_access_key_id } [string] { print_secret_access_key } [string] { print_session_token } [string] { print_default_region } [string] ' [EOL] else : [EOL] assert out == f'{ print_access_key_id } [string] { print_secret_access_key } [string] { print_session_token } [string] ' [EOL] [EOL] [EOL] def test_generate_command_to_export_credentials ( credentials , region_name ) : [EOL] exported_credentials = EnvironmentVariable . generate_command_to_export_credentials ( credentials , region_name ) [EOL] [EOL] export_access_key_id = f' [string] ' [EOL] export_secret_access_key = f' [string] ' [EOL] export_session_token = f' [string] ' [EOL] [EOL] if region_name is not None : [EOL] export_default_region = f' [string] { region_name } [string] ' [EOL] [EOL] assert exported_credentials == f'{ export_access_key_id } [string] { export_secret_access_key } [string] { export_session_token } [string] { export_default_region }' [EOL] else : [EOL] assert exported_credentials == f'{ export_access_key_id } [string] { export_secret_access_key } [string] { export_session_token }' [EOL] [EOL] [EOL] def test_get_env_var_with_credentials ( credentials , region_name ) : [EOL] env_var_with_credentials = EnvironmentVariable . get_env_var_with_credentials ( credentials , region_name ) [EOL] [EOL] env_var_copy = os . environ . copy ( ) [EOL] [EOL] env_var_copy [ [string] ] = [string] [EOL] env_var_copy [ [string] ] = [string] [EOL] env_var_copy [ [string] ] = [string] [EOL] [EOL] if region_name is not None : [EOL] env_var_copy [ [string] ] = region_name [EOL] [EOL] assert env_var_with_credentials == env_var_copy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import awsassume [EOL] import datetime [EOL] import pytest [EOL] [EOL] from dateutil . tz import tzutc [EOL] from unittest . mock import MagicMock [EOL] [EOL] from awsassume . assume_role import AssumeRole [EOL] from awsassume . assume_role_cache_executor import AssumeRoleCacheExecutor [EOL] from awsassume . data_models import AssumeRoleArgs , AssumeRoleType , Credentials , ResponseCacheArgs [EOL] from awsassume . response_cache_adapter import ResponseCacheAdapter [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assume_role ( ) : [EOL] assume_role_args = AssumeRoleArgs ( role_arn = [string] , role_session_name = [string] ) [EOL] [EOL] return AssumeRole ( assume_role_args ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def response_cache_args ( ) : [EOL] return ResponseCacheArgs ( [string] , [string] , [string] , AssumeRoleType . DEFAULT ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def response_cache_adapter ( response_cache_args ) : [EOL] return ResponseCacheAdapter ( response_cache_args ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assume_role_cache_executor ( assume_role , response_cache_adapter ) : [EOL] return AssumeRoleCacheExecutor ( assume_role , response_cache_adapter ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assumed_role_response ( ) : [EOL] from fixture . assumed_role_response import assumed_role_response [EOL] [EOL] return assumed_role_response [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = [ None , assumed_role_response ( ) ] ) def cached_response ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def credentials ( ) : [EOL] return Credentials ( access_key_id = [string] , secret_access_key = [string] , session_token = [string] , expiration = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tzutc ( ) ) ) [EOL] [EOL] [EOL] def test_execute ( assume_role_cache_executor , assumed_role_response , cached_response , credentials ) : [EOL] assume_role_cache_executor . security_token_service . assume_role = MagicMock ( return_value = assumed_role_response ) [EOL] assume_role_cache_executor . response_cache_adapter . set_response_to_cache = MagicMock ( return_value = None ) [EOL] assume_role_cache_executor . response_cache_adapter . get_response_from_cache = MagicMock ( return_value = cached_response ) [EOL] [EOL] assert assume_role_cache_executor . execute ( ) == credentials [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import awsassume [EOL] import pytest [EOL] [EOL] from awsassume . assume_role_cache_executor import AssumeRoleCacheExecutor [EOL] from awsassume . assume_role_executor_factory import AssumeRoleExecutorFactory [EOL] from awsassume . assume_role_no_cache_executor import AssumeRoleNoCacheExecutor [EOL] from awsassume . data_models import CliArgs [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = [ True , False ] ) def cli_args ( request ) : [EOL] return CliArgs ( role_arn = [string] , role_session_name = [string] , command = [string] , region_name = [string] , no_cache = request . param ) [EOL] [EOL] [EOL] def test_get_executor ( cli_args ) : [EOL] assume_role_executor = AssumeRoleExecutorFactory . get_executor ( cli_args ) [EOL] [EOL] if cli_args . no_cache is True : [EOL] assert isinstance ( assume_role_executor , AssumeRoleNoCacheExecutor ) is True [EOL] else : [EOL] assert isinstance ( assume_role_executor , AssumeRoleCacheExecutor ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import awsassume [EOL] import datetime [EOL] import pytest [EOL] [EOL] from dateutil . tz import tzutc [EOL] from unittest . mock import MagicMock [EOL] [EOL] from awsassume . assume_role import AssumeRole [EOL] from awsassume . assume_role_no_cache_executor import AssumeRoleNoCacheExecutor [EOL] from awsassume . data_models import AssumeRoleArgs , Credentials [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assume_role ( ) : [EOL] assume_role_args = AssumeRoleArgs ( role_arn = [string] , role_session_name = [string] ) [EOL] [EOL] return AssumeRole ( assume_role_args ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assume_role_no_cache_executor ( assume_role ) : [EOL] return AssumeRoleNoCacheExecutor ( assume_role ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assumed_role_response ( ) : [EOL] from fixture . assumed_role_response import assumed_role_response [EOL] [EOL] return assumed_role_response [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def credentials ( ) : [EOL] return Credentials ( access_key_id = [string] , secret_access_key = [string] , session_token = [string] , expiration = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tzutc ( ) ) ) [EOL] [EOL] [EOL] def test_execute ( assume_role_no_cache_executor , assumed_role_response , credentials ) : [EOL] assume_role_no_cache_executor . security_token_service . assume_role = MagicMock ( return_value = assumed_role_response ) [EOL] [EOL] assert assume_role_no_cache_executor . execute ( ) == credentials [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import argparse [EOL] import argparse [EOL] import pytest [EOL] [EOL] from unittest . mock import MagicMock [EOL] [EOL] from awsassume . command_line_args import CommandLineArgs [EOL] from awsassume . data_models import CliArgs [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def command_line_args ( ) : [EOL] return CommandLineArgs ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def argparse_cli_args ( ) : [EOL] cli_args = argparse . Namespace ( ) [EOL] cli_args . role_arn = [string] [EOL] cli_args . role_session_name = [string] [EOL] cli_args . command = [string] [EOL] cli_args . region = [string] [EOL] cli_args . no_cache = False [EOL] [EOL] return cli_args [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def cli_args ( ) : [EOL] return CliArgs ( role_arn = [string] , role_session_name = [string] , command = [string] , region_name = [string] , no_cache = False ) [EOL] [EOL] [EOL] def test_get_cli_args ( command_line_args , argparse_cli_args , cli_args ) : [EOL] command_line_args . parser . parse_args = MagicMock ( return_value = argparse_cli_args ) [EOL] [EOL] assert command_line_args . get_cli_args ( ) == cli_args [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import awsassume [EOL] import pytest [EOL] [EOL] from unittest . mock import MagicMock [EOL] [EOL] from awsassume . assume_role import AssumeRole [EOL] from awsassume . data_models import AssumeRoleArgs [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assume_role ( ) : [EOL] assume_role_args = AssumeRoleArgs ( role_arn = [string] , role_session_name = [string] ) [EOL] [EOL] return AssumeRole ( assume_role_args ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assumed_role_response ( ) : [EOL] from fixture . assumed_role_response import assumed_role_response [EOL] [EOL] return assumed_role_response [EOL] [EOL] [EOL] def test_assume_role ( assume_role , assumed_role_response ) : [EOL] assume_role . client . assume_role = MagicMock ( return_value = assumed_role_response ) [EOL] [EOL] assert assume_role . assume_role ( ) == assumed_role_response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] [EOL] from awsassume . data_models import AssumeRoleType , ResponseCacheArgs [EOL] from awsassume . response_cache import ResponseCache [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def response_cache ( ) : [EOL] return ResponseCache ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def response_cache_args ( ) : [EOL] return ResponseCacheArgs ( [string] , [string] , [string] , AssumeRoleType . DEFAULT ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def cache_directory ( ) : [EOL] return f'{ os . path . expanduser ( [string] ) } [string] ' [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def assumed_role_response ( ) : [EOL] from fixture . assumed_role_response import assumed_role_response [EOL] [EOL] return assumed_role_response [EOL] [EOL] [EOL] def test_cache_directory_name ( cache_directory ) : [EOL] assert cache_directory == f'{ os . path . expanduser ( [string] ) } [string] ' [EOL] [EOL] [EOL] def test_cache_directory_exist ( cache_directory ) : [EOL] assert os . path . exists ( cache_directory ) is True [EOL] [EOL] [EOL] def test_get_cache_name ( response_cache , response_cache_args ) : [EOL] cache_name = response_cache . get_cache_name ( response_cache_args ) [EOL] [EOL] assert cache_name == [string] [EOL] [EOL] [EOL] def test_get_cache_full_path ( response_cache , response_cache_args , cache_directory ) : [EOL] cache_full_path = response_cache . get_cache_full_path ( response_cache_args ) [EOL] [EOL] assert cache_full_path == f'{ cache_directory } [string] ' [EOL] [EOL] [EOL] def test_set_get_delete_response ( response_cache , response_cache_args , cache_directory , assumed_role_response ) : [EOL] response_cache . set_response_to_cache ( response_cache_args , assumed_role_response ) [EOL] assert os . path . isfile ( f'{ cache_directory } [string] ' ) is True [EOL] [EOL] cached_assumed_role_response = response_cache . get_response_from_cache ( response_cache_args ) [EOL] assert cached_assumed_role_response == assumed_role_response [EOL] [EOL] response_cache . delete_cache_file ( response_cache_args ) [EOL] assert os . path . isfile ( f'{ cache_directory } [string] ' ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Union [EOL] import datetime [EOL] import typing [EOL] import datetime [EOL] [EOL] from dateutil . tz import tzutc [EOL] [EOL] [EOL] assumed_role_response = { [string] : { [string] : [number] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [number] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tzutc ( ) ) , [string] : [string] , [string] : [string] } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import awsassume [EOL] from botocore . exceptions import ClientError [EOL] [EOL] from awsassume . data_models import AssumeRoleArgs [EOL] from awsassume . security_token_service import SecurityTokenService [EOL] from awsassume . data_models import AssumedRoleResponse [EOL] [EOL] [EOL] class AssumeRole ( SecurityTokenService ) : [EOL] [EOL] def __init__ ( self , assume_role_args ) : [EOL] super ( ) . __init__ ( assume_role_args . region_name ) [EOL] [EOL] self . assume_role_args = assume_role_args [EOL] [EOL] def assume_role ( self ) : [EOL] try : [EOL] response = self . client . assume_role ( RoleArn = self . assume_role_args . role_arn , RoleSessionName = self . assume_role_args . role_session_name ) [EOL] except ClientError : [EOL] raise [EOL] else : [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0
import awsassume [EOL] import builtins [EOL] import boto3 [EOL] [EOL] from abc import ABC , abstractmethod [EOL] [EOL] from awsassume . data_models import AssumedRoleResponse [EOL] [EOL] [EOL] class SecurityTokenService ( ABC ) : [EOL] [EOL] def __init__ ( self , region_name = None ) : [EOL] self . client = boto3 . client ( [string] , region_name = region_name ) [EOL] [EOL] @ abstractmethod def assume_role ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 0 0 0
import awsassume [EOL] from awsassume . data_models import AssumedRoleResponse , ResponseCacheArgs [EOL] from awsassume . response_cache import ResponseCache [EOL] [EOL] [EOL] class ResponseCacheAdapter ( object ) : [EOL] [EOL] def __init__ ( self , response_cache_args ) : [EOL] self . response_cache_args = response_cache_args [EOL] [EOL] self . response_cache = ResponseCache ( ) [EOL] [EOL] def set_response_to_cache ( self , assumed_role_response ) : [EOL] self . response_cache . set_response_to_cache ( self . response_cache_args , assumed_role_response ) [EOL] [EOL] def get_response_from_cache ( self ) : [EOL] return self . response_cache . get_response_from_cache ( self . response_cache_args ) [EOL] [EOL] def delete_cache_file ( self ) : [EOL] self . response_cache . delete_cache_file ( self . response_cache_args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.response_cache.ResponseCache$ 0 0 0 0 0 0 0 $None$ 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 $awsassume.data_models.AssumedRoleResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0