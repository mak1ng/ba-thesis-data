[comment] [EOL] [comment] [EOL] from typing import Dict , List , Any [EOL] import typing [EOL] import yaml [EOL] [EOL] COMMENTS_YAML = [string] [EOL] COLUMN_COMMENTS_YAML = [string] [EOL] LINT_RESULT = [string] [EOL] [EOL] [EOL] def get_completion_target ( ) : [EOL] [docstring] [EOL] table_column_list = [ ] [EOL] with open ( LINT_RESULT , [string] ) as f : [EOL] for row in f : [EOL] lint_result = row . split ( [string] ) [EOL] if len ( lint_result ) > [number] and lint_result [ [number] ] == [string] : [EOL] table , column_with_colon = lint_result [ [number] ] . split ( [string] ) [EOL] table_column = { [string] : table , [string] : column_with_colon [ [number] : - [number] ] } [EOL] table_column_list . append ( table_column ) [EOL] return table_column_list [EOL] [EOL] [EOL] def add_column_comment ( table_column_list ) : [EOL] [docstring] [EOL] table_column_comment_list = [ ] [EOL] with open ( COLUMN_COMMENTS_YAML , [string] ) as f : [EOL] column_comments = yaml . safe_load ( f ) [EOL] for table_column in table_column_list : [EOL] comment = column_comments . get ( table_column [ [string] ] , [string] ) [EOL] if [string] in comment : [EOL] table_column [ [string] ] = comment . split ( [string] ) [ [number] ] [EOL] else : [EOL] table_column [ [string] ] = comment [EOL] table_column_comment_list . append ( table_column ) [EOL] return table_column_comment_list [EOL] [EOL] [EOL] def update_comment_yaml ( table_column_comment_list ) : [EOL] [docstring] [EOL] with open ( COMMENTS_YAML , [string] ) as f : [EOL] comments_yaml = yaml . safe_load ( f ) [EOL] for row in comments_yaml [ [string] ] : [EOL] for target in table_column_comment_list : [EOL] if row [ [string] ] == target [ [string] ] : [EOL] if [string] in row : [EOL] row [ [string] ] [ target [ [string] ] ] = target [ [string] ] [EOL] else : [EOL] row [ [string] ] = { target [ [string] ] : target [ [string] ] } [EOL] with open ( COMMENTS_YAML , [string] ) as out : [EOL] out . write ( yaml . dump ( comments_yaml , default_flow_style = False , allow_unicode = True , indent = [number] ) ) [EOL] [EOL] [EOL] def get_completion_table_target ( ) : [EOL] [docstring] [EOL] table_list = [ ] [EOL] with open ( LINT_RESULT , [string] ) as f : [EOL] for row in f : [EOL] lint_result = row . split ( [string] ) [EOL] if len ( lint_result ) > [number] and lint_result [ [number] ] == [string] : [EOL] table = lint_result [ [number] ] . split ( [string] ) [ [number] ] [EOL] table_list . append ( table ) [EOL] return table_list [EOL] [EOL] [EOL] def update_comment_yaml_for_table_comment ( table_list ) : [EOL] [docstring] [EOL] with open ( COMMENTS_YAML , [string] ) as f : [EOL] comments_yaml = yaml . safe_load ( f ) [EOL] for table in table_list : [EOL] comments_yaml [ [string] ] . append ( { [string] : table , [string] : [string] } ) [EOL] with open ( COMMENTS_YAML , [string] ) as out : [EOL] out . write ( yaml . dump ( comments_yaml , default_flow_style = False , allow_unicode = True , indent = [number] ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( [string] ) [EOL] table_column_list = get_completion_target ( ) [EOL] table_column_comment_list = add_column_comment ( table_column_list ) [EOL] table_list = get_completion_table_target ( ) [EOL] update_comment_yaml_for_table_comment ( table_list ) [EOL] update_comment_yaml ( table_column_comment_list ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import yaml [EOL] [EOL] COMMENTS_YAML = [string] [EOL] COLUMN_COMMENTS_YAML = [string] [EOL] DUPLICATE_COLUMN_COMMENTS_YAML = [string] [EOL] [EOL] [EOL] def get_all_comments ( ) : [EOL] [docstring] [EOL] with open ( COMMENTS_YAML , [string] ) as f : [EOL] comments_yaml = yaml . safe_load ( f ) [EOL] tables = comments_yaml [ [string] ] [EOL] comments_list = { } [EOL] for table in tables : [EOL] column_comments = table [ [string] ] [EOL] for column , comment in list ( column_comments . items ( ) ) : [EOL] comments_list . setdefault ( column , set ( [ ] ) ) . add ( comment ) [EOL] return comments_list [EOL] [EOL] [EOL] def write_all_comments_and_duplicate_comments ( comments_list ) : [EOL] [docstring] [EOL] comments_yaml = { } [EOL] duplicates_yaml = { } [EOL] for column , comment in list ( comments_list . items ( ) ) : [EOL] print ( column ) [EOL] print ( comment ) [EOL] comments_yaml [ column ] = [string] . join ( comment ) [EOL] if len ( comment ) > [number] : [EOL] duplicates_yaml [ column ] = comments_yaml [ column ] [EOL] with open ( DUPLICATE_COLUMN_COMMENTS_YAML , [string] ) as out : [EOL] out . write ( yaml . dump ( duplicates_yaml , default_flow_style = False , allow_unicode = True , indent = [number] ) ) [EOL] with open ( COLUMN_COMMENTS_YAML , [string] ) as out : [EOL] out . write ( yaml . dump ( comments_yaml , default_flow_style = False , allow_unicode = True , indent = [number] ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( [string] ) [EOL] comments_list = get_all_comments ( ) [EOL] print ( comments_list ) [EOL] write_all_comments_and_duplicate_comments ( comments_list ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0