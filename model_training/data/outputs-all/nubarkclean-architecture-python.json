	0
	0
from typing import Dict , Any , List , Tuple [EOL] import typing [EOL] import click [EOL] [EOL] [EOL] @ click . group ( ) @ click . pass_obj def admin ( obj ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ admin . group ( ) @ click . pass_obj def new ( obj ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ new . command ( name = [string] ) @ click . pass_obj def new_project ( obj ) : [EOL] name = click . prompt ( [string] , type = str ) [EOL] project_dict = { [string] : name } [EOL] obj . admin_coordinator . create_project ( project_dict ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ admin . group ( ) @ click . pass_obj def update ( obj ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ update . command ( name = [string] ) @ click . pass_obj def update_project ( obj ) : [EOL] uid = click . prompt ( [string] , default = [string] ) [EOL] name = click . prompt ( [string] , default = [string] ) [EOL] comments = click . prompt ( [string] , default = [string] ) [EOL] [EOL] params = [ ( [string] , uid ) , ( [string] , name ) , ( [string] , comments ) ] [EOL] [comment] [EOL] project_dict = dict ( pair for pair in params if pair [ [number] ] ) [EOL] [EOL] obj . admin_coordinator . update_project ( project_dict ) [EOL] [EOL] [EOL] @ update . command ( name = [string] ) @ click . pass_obj def update_task ( obj ) : [EOL] uid = click . prompt ( [string] , default = [string] ) [EOL] name = click . prompt ( [string] , default = [string] ) [EOL] due_date = click . prompt ( [string] , default = [string] ) [EOL] priority = click . prompt ( [string] , default = [string] ) [EOL] stage = click . prompt ( [string] , default = [string] ) [EOL] comments = click . prompt ( [string] , default = [string] ) [EOL] [EOL] params = [ ( [string] , uid ) , ( [string] , name ) , ( [string] , due_date ) , ( [string] , priority ) , ( [string] , stage ) , ( [string] , comments ) ] [EOL] [comment] [EOL] task_dict = dict ( pair for pair in params if pair [ [number] ] ) [EOL] [EOL] obj . admin_coordinator . update_task ( task_dict ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ admin . group ( ) @ click . pass_obj def delete ( obj ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ delete . command ( name = [string] ) @ click . pass_obj def delete_project ( obj ) : [EOL] uid = click . prompt ( [string] , default = [string] ) [EOL] obj . admin_coordinator . delete_project ( uid ) [EOL] [EOL] [EOL] @ delete . command ( name = [string] ) @ click . pass_obj def delete_task ( obj ) : [EOL] uid = click . prompt ( [string] , default = [string] ) [EOL] obj . admin_coordinator . delete_task ( uid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import click [EOL] [EOL] [EOL] @ click . group ( ) @ click . pass_obj def agenda ( obj ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ agenda . command ( ) @ click . pass_obj def new ( obj ) : [EOL] name = click . prompt ( [string] , type = str ) [EOL] project_id = click . prompt ( [string] , type = str ) [EOL] task_dict = { [string] : name , [string] : project_id } [EOL] obj . agenda_coordinator . create_task ( task_dict ) [EOL] [EOL] [EOL] @ agenda . command ( ) @ click . pass_obj def start ( obj ) : [EOL] uid = click . prompt ( [string] , type = str ) [EOL] obj . agenda_coordinator . start_task ( uid ) [EOL] [EOL] [EOL] @ agenda . command ( ) @ click . pass_obj def complete ( obj ) : [EOL] uid = click . prompt ( [string] , type = str ) [EOL] obj . agenda_coordinator . complete_task ( uid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import click [EOL] from tabulate import tabulate [EOL] [EOL] [EOL] @ click . group ( ) @ click . pass_obj def report ( obj ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ report . command ( ) @ click . option ( [string] , default = [string] ) @ click . option ( [string] , default = [string] ) @ click . pass_obj def tasks ( obj , project_id , stage ) : [EOL] if project_id : [EOL] result = obj . state_reporter . list_tasks_in_project ( project_id ) [EOL] elif stage : [EOL] result = obj . state_reporter . list_tasks_in_stage ( stage ) [EOL] else : [EOL] result = obj . state_reporter . list_tasks ( ) [EOL] click . echo ( tabulate ( result , headers = [string] ) ) [EOL] [EOL] [EOL] @ report . command ( ) @ click . pass_obj def projects ( obj ) : [EOL] result = obj . state_reporter . list_projects ( ) [EOL] click . echo ( tabulate ( result , headers = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from typing import Any [EOL] from datetime import datetime , date [EOL] [EOL] [EOL] def json_serialize ( obj ) : [EOL] [docstring] [EOL] if isinstance ( obj , ( datetime , date ) ) : [EOL] return obj . isoformat ( ) [EOL] raise TypeError ( [string] . format ( type ( obj ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , List [EOL] import builtins [EOL] import typing [EOL] import json [EOL] from typing import List , Dict [EOL] from taskit . application . reporters . state_reporter import StateReporter [EOL] [EOL] [EOL] class JsonStateReporter ( StateReporter ) : [EOL] def __init__ ( self , filename ) : [EOL] self . filename = filename [EOL] [EOL] def list_tasks ( self , offset = [number] , limit = [number] ) : [EOL] with open ( self . filename ) as f : [EOL] data = json . load ( f ) [EOL] tasks = data [ [string] ] [EOL] result = sorted ( list ( tasks . values ( ) ) , key = lambda x : x [ [string] ] ) [EOL] return result [ offset : limit ] [EOL] [EOL] def list_tasks_in_project ( self , project_id ) : [EOL] with open ( self . filename ) as f : [EOL] data = json . load ( f ) [EOL] tasks = data [ [string] ] [EOL] result = [ task for task in tasks . values ( ) if task [ [string] ] == project_id ] [EOL] return result [EOL] [EOL] def list_tasks_in_stage ( self , stage ) : [EOL] with open ( self . filename ) as f : [EOL] data = json . load ( f ) [EOL] tasks = data [ [string] ] [EOL] result = [ task for task in tasks . values ( ) if task [ [string] ] == stage ] [EOL] return result [EOL] [EOL] def list_projects ( self , offset = [number] , limit = [number] ) : [EOL] with open ( self . filename ) as f : [EOL] data = json . load ( f ) [EOL] projects = data [ [string] ] [EOL] result = sorted ( list ( projects . values ( ) ) , key = lambda x : x [ [string] ] ) [EOL] return result [ offset : limit ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0
	0
	0
	0
import builtins [EOL] from typing import List [EOL] [EOL] [EOL] class Project : [EOL] def __init__ ( self , name , ** kwargs ) : [EOL] self . name = name [EOL] self . uid = [string] [EOL] self . comments = [string] [EOL] self . __dict__ . update ( kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from datetime import datetime [EOL] [EOL] [EOL] class Task : [EOL] def __init__ ( self , name , ** kwargs ) : [EOL] self . name = name [EOL] self . uid = [string] [EOL] self . due_date = datetime . now ( ) [EOL] self . priority = [number] [EOL] self . project_id = [string] [EOL] self . stage = [string] [EOL] self . comments = [string] [EOL] self . __dict__ . update ( kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List [EOL] import builtins [EOL] import typing [EOL] from abc import ABC , abstractmethod [EOL] from typing import List , Dict [EOL] [EOL] [EOL] class StateReporter ( ABC ) : [EOL] [EOL] @ abstractmethod def list_tasks ( self , offset = [number] , limit = [number] ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def list_tasks_in_project ( self , project_id ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def list_tasks_in_stage ( self , stage ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def list_projects ( self , offset = [number] , limit = [number] ) : [EOL] [docstring] [EOL] [EOL] [EOL] class MemoryStateReporter ( StateReporter ) : [EOL] [EOL] def list_tasks ( self , offset = [number] , limit = [number] ) : [EOL] [docstring] [EOL] [EOL] def list_tasks_in_project ( self , project_id ) : [EOL] [docstring] [EOL] [EOL] def list_tasks_in_stage ( self , stage ) : [EOL] [docstring] [EOL] [EOL] def list_projects ( self , offset = [number] , limit = [number] ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
class EntityNotFoundError ( Exception ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0
	0
	0
import click [EOL] import unittest [EOL] from unittest . mock import Mock , ANY [EOL] from click . testing import CliRunner [EOL] from taskit . infrastructure . cli . taskit import cli [EOL] [EOL] [EOL] def test_cli_report_tasks ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] ] , obj = mock_state ) [EOL] mock_state . state_reporter . list_tasks . assert_called_with ( ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_report_tasks_in_project ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state ) [EOL] mock_state . state_reporter . list_tasks_in_project . assert_called_with ( ANY ) [EOL] assert result . exit_code != [number] [EOL] [EOL] [EOL] def test_cli_report_tasks_in_stage ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state ) [EOL] mock_state . state_reporter . list_tasks_in_stage . assert_called_with ( ANY ) [EOL] assert result . exit_code != [number] [EOL] [EOL] [EOL] def test_cli_report_projects ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] ] , obj = mock_state ) [EOL] mock_state . state_reporter . list_projects . assert_called_with ( ) [EOL] assert result . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import click [EOL] import unittest [EOL] import typing [EOL] from unittest . mock import Mock , ANY [EOL] from click . testing import CliRunner [EOL] from taskit . infrastructure . cli . taskit import cli , State [EOL] [EOL] [EOL] def test_cli_agenda_new ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] task_dict = { [string] : [string] , [string] : [string] } [EOL] mock_state . agenda_coordinator . create_task . assert_called_with ( task_dict ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_agenda_start ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] mock_state . agenda_coordinator . start_task . assert_called_with ( [string] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_agenda_complete ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] mock_state . agenda_coordinator . complete_task . assert_called_with ( [string] ) [EOL] assert result . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import click [EOL] import unittest [EOL] import typing [EOL] from unittest . mock import Mock , ANY [EOL] from click . testing import CliRunner [EOL] from taskit . infrastructure . cli . taskit import cli [EOL] [EOL] [EOL] def test_cli_admin_new_project ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] project_dict = { [string] : [string] } [EOL] mock_state . admin_coordinator . create_project . assert_called_with ( project_dict ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_admin_update_project ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] project_dict = { [string] : [string] , [string] : [string] } [EOL] mock_state . admin_coordinator . update_project . assert_called_with ( project_dict ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_admin_update_task ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] project_dict = { [string] : [string] , [string] : [string] } [EOL] mock_state . admin_coordinator . update_task . assert_called_with ( project_dict ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_admin_delete_project ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] mock_state . admin_coordinator . delete_project . assert_called_with ( [string] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] def test_cli_admin_delete_task ( mock_state ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] , obj = mock_state , input = [string] ) [EOL] mock_state . admin_coordinator . delete_task . assert_called_with ( [string] ) [EOL] assert result . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import click [EOL] from unittest . mock import Mock , ANY [EOL] from click . testing import CliRunner [EOL] from taskit . infrastructure . cli . taskit import cli , State [EOL] [EOL] [EOL] def test_cli_state ( state ) : [EOL] assert isinstance ( state , State ) [EOL] [EOL] [EOL] def test_cli ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ ] ) [EOL] assert result . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] import taskit [EOL] import pytest [EOL] from unittest . mock import Mock [EOL] from taskit . application . repositories . project_repository import ( MemoryProjectRepository ) [EOL] from taskit . application . repositories . task_repository import ( MemoryTaskRepository ) [EOL] from taskit . application . coordinators . admin_coordinator import ( AdminCoordinator ) [EOL] from taskit . application . coordinators . agenda_coordinator import ( AgendaCoordinator ) [EOL] from taskit . application . reporters . state_reporter import ( StateReporter , MemoryStateReporter ) [EOL] from taskit . infrastructure . cli . taskit import State [EOL] [EOL] [EOL] @ pytest . fixture def mock_state ( ) : [EOL] mock_state = Mock ( ) [EOL] mock_state . state_reporter . list_tasks . return_value = [ { [string] : [string] } ] [EOL] mock_state . state_reporter . list_projects . return_value = [ { [string] : [string] } ] [EOL] return mock_state [EOL] [EOL] [EOL] @ pytest . fixture def state ( ) : [EOL] project_repository = MemoryProjectRepository ( ) [EOL] task_repository = MemoryTaskRepository ( ) [EOL] agenda_coordinator = AgendaCoordinator ( project_repository , task_repository ) [EOL] admin_coordinator = AgendaCoordinator ( project_repository , task_repository ) [EOL] state_reporter = MemoryStateReporter ( ) [EOL] state = State ( admin_coordinator , agenda_coordinator , state_reporter ) [EOL] return state [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $taskit.infrastructure.cli.taskit.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any , Union [EOL] import typing [EOL] import json [EOL] from datetime import date , datetime [EOL] from pytest import fixture [EOL] from taskit . application . models . project import Project [EOL] from taskit . application . models . task import Task [EOL] from taskit . infrastructure . data . json import json_serialize [EOL] [EOL] [EOL] @ fixture def json_file ( tmpdir_factory ) : [EOL] file_name = tmpdir_factory . mktemp ( [string] ) . join ( [string] ) [EOL] test_dictionary = { [string] : { [string] : vars ( Project ( [string] , uid = [string] ) ) , [string] : vars ( Project ( [string] , uid = [string] ) ) , [string] : vars ( Project ( [string] , uid = [string] ) ) } , [string] : { [string] : vars ( Task ( [string] , uid = [string] , project_id = [string] , stage = [string] ) ) , [string] : vars ( Task ( [string] , uid = [string] , project_id = [string] , stage = [string] ) ) , [string] : vars ( Task ( [string] , uid = [string] , project_id = [string] , stage = [string] ) ) } , [string] : { [string] : [number] , [string] : [number] } } [EOL] with open ( str ( file_name ) , [string] ) as f : [EOL] json . dump ( test_dictionary , f , default = json_serialize ) [EOL] return str ( file_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import taskit [EOL] import typing [EOL] from pytest import fixture [EOL] from taskit . application . reporters . state_reporter import StateReporter [EOL] from taskit . infrastructure . data . json . reporters . state_reporter import ( JsonStateReporter ) [EOL] [EOL] [EOL] @ fixture def json_state_reporter ( json_file ) : [EOL] json_state_reporter = JsonStateReporter ( json_file ) [EOL] return json_state_reporter [EOL] [EOL] [EOL] def test_json_state_reporter_creation ( json_state_reporter ) : [EOL] assert isinstance ( json_state_reporter , StateReporter ) [EOL] [EOL] [EOL] def test_json_state_reporter_list_tasks ( json_state_reporter ) : [EOL] result = json_state_reporter . list_tasks ( ) [EOL] assert len ( result ) == [number] [EOL] for task_dict in result : [EOL] assert task_dict . get ( [string] ) [EOL] assert task_dict . get ( [string] ) [EOL] [EOL] def test_json_state_reporter_list_tasks_in_project ( json_state_reporter ) : [EOL] result = json_state_reporter . list_tasks_in_project ( [string] ) [EOL] assert len ( result ) == [number] [EOL] uid_list = [ task_dict [ [string] ] for task_dict in result ] [EOL] assert [string] in uid_list [EOL] assert [string] in uid_list [EOL] [EOL] def test_json_state_reporter_list_tasks_in_stage ( json_state_reporter ) : [EOL] result = json_state_reporter . list_tasks_in_stage ( [string] ) [EOL] assert len ( result ) == [number] [EOL] uid_list = [ task_dict [ [string] ] for task_dict in result ] [EOL] assert [string] in uid_list [EOL] [EOL] def test_json_state_reporter_list_projects ( json_state_reporter ) : [EOL] result = json_state_reporter . list_projects ( ) [EOL] assert len ( result ) == [number] [EOL] for task_dict in result : [EOL] assert task_dict . get ( [string] ) [EOL] assert task_dict . get ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $taskit.infrastructure.data.json.reporters.state_reporter.JsonStateReporter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import Dict , Union [EOL] import datetime [EOL] import taskit [EOL] import typing [EOL] from datetime import datetime [EOL] from pytest import fixture [EOL] from taskit . application . models . task import Task [EOL] [EOL] [EOL] @ fixture def task ( ) : [EOL] name = [string] [EOL] return Task ( name = name ) [EOL] [EOL] [EOL] def test_task_creation ( task ) : [EOL] assert task . name == [string] [EOL] [EOL] [EOL] def test_task_default_attributes ( task ) : [EOL] assert task . uid == [string] [EOL] assert isinstance ( task . due_date , datetime ) [EOL] assert task . priority == [number] [EOL] assert task . project_id == [string] [EOL] assert task . stage == [string] [EOL] assert task . comments == [string] [EOL] [EOL] [EOL] def test_task_initilization_from_dict ( ) : [EOL] now = datetime . now ( ) [EOL] task_dict = { [string] : [string] , [string] : [string] , [string] : now , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] task = Task ( ** task_dict ) [EOL] assert task . name == [string] [EOL] assert task . uid == [string] [EOL] assert task . due_date == now [EOL] assert task . priority == [number] [EOL] assert task . project_id == [string] [EOL] assert task . stage == [string] [EOL] assert task . comments == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from pytest import raises [EOL] from taskit . application . repositories . errors import EntityNotFoundError [EOL] [EOL] [EOL] def test_entity_not_found_error ( ) : [EOL] with raises ( EntityNotFoundError ) : [EOL] raise EntityNotFoundError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import taskit [EOL] import typing [EOL] from pytest import fixture , raises [EOL] from taskit . application . models . project import Project [EOL] from taskit . application . repositories . errors import EntityNotFoundError [EOL] from taskit . application . repositories . project_repository import ( ProjectRepository , MemoryProjectRepository ) [EOL] [EOL] [EOL] def test_project_repository_methods ( ) : [EOL] abstract_methods = ProjectRepository . __abstractmethods__ [comment] [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] [EOL] [EOL] def test_project_repository_memory_implementation ( ) : [EOL] assert issubclass ( MemoryProjectRepository , ProjectRepository ) [EOL] [EOL] [EOL] def test_memory_project_repository_load ( ) : [EOL] memory_project_repository = MemoryProjectRepository ( ) [EOL] projects_dict = { [string] : Project ( [string] ) } [EOL] memory_project_repository . load ( projects_dict ) [EOL] assert memory_project_repository . projects == projects_dict [EOL] [EOL] [EOL] @ fixture def memory_project_repository ( ) : [EOL] memory_project_repository = MemoryProjectRepository ( ) [EOL] projects_dict = { [string] : Project ( [string] ) , [string] : Project ( [string] ) , [string] : Project ( [string] ) } [EOL] memory_project_repository . sequence = [number] [EOL] memory_project_repository . load ( projects_dict ) [EOL] return memory_project_repository [EOL] [EOL] [EOL] def test_memory_project_repository_get ( memory_project_repository ) : [EOL] project = memory_project_repository . get ( [string] ) [EOL] assert project . name == [string] [EOL] [EOL] [EOL] def test_memory_project_repository_get_not_found ( memory_project_repository ) : [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_project_repository . get ( [string] ) [EOL] [EOL] [EOL] def test_memory_project_repository_add ( memory_project_repository ) : [EOL] project = Project ( [string] ) [EOL] memory_project_repository . add ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL] assert memory_project_repository . projects [ [string] ] == project [EOL] assert memory_project_repository . sequence == [number] [EOL] [EOL] [EOL] def test_memory_project_repository_add_with_uid ( memory_project_repository ) : [EOL] project = Project ( [string] ) [EOL] project . uid = [string] [EOL] memory_project_repository . add ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL] assert memory_project_repository . projects [ [string] ] == project [EOL] assert memory_project_repository . sequence == [number] [EOL] [EOL] [EOL] def test_memory_project_repository_update ( memory_project_repository ) : [EOL] project = Project ( [string] ) [EOL] project . uid = [string] [EOL] assert memory_project_repository . projects [ [string] ] . name == [string] [EOL] memory_project_repository . update ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL] assert memory_project_repository . projects [ [string] ] . name == ( [string] ) [EOL] [EOL] [EOL] def test_memory_project_repository_update_not_found ( memory_project_repository ) : [EOL] project = Project ( [string] ) [EOL] project . uid = [string] [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_project_repository . update ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL] [EOL] [EOL] def test_memory_project_repository_delete ( memory_project_repository ) : [EOL] project = memory_project_repository . projects [ [string] ] [EOL] project . uid = [string] [EOL] memory_project_repository . delete ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL] assert memory_project_repository . projects . get ( [string] ) is None [EOL] [EOL] [EOL] def test_memory_project_repository_delete_not_found ( memory_project_repository ) : [EOL] project = Project ( [string] ) [EOL] project . uid = [string] [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_project_repository . delete ( project ) [EOL] assert len ( memory_project_repository . projects ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import taskit [EOL] import typing [EOL] from pytest import fixture , raises [EOL] from taskit . application . models . task import Task [EOL] from taskit . application . repositories . errors import EntityNotFoundError [EOL] from taskit . application . repositories . task_repository import ( TaskRepository , MemoryTaskRepository ) [EOL] [EOL] [EOL] def test_task_repository_methods ( ) : [EOL] abstract_methods = TaskRepository . __abstractmethods__ [comment] [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] [EOL] [EOL] def test_task_repository_memory_implementation ( ) : [EOL] assert issubclass ( MemoryTaskRepository , TaskRepository ) [EOL] [EOL] [EOL] def test_memory_task_repository_load ( ) : [EOL] memory_task_repository = MemoryTaskRepository ( ) [EOL] tasks_dict = { [string] : Task ( [string] ) } [EOL] memory_task_repository . load ( tasks_dict ) [EOL] assert memory_task_repository . tasks == tasks_dict [EOL] [EOL] [EOL] @ fixture def memory_task_repository ( ) : [EOL] memory_task_repository = MemoryTaskRepository ( ) [EOL] tasks_dict = { [string] : Task ( [string] ) , [string] : Task ( [string] ) , [string] : Task ( [string] ) } [EOL] memory_task_repository . sequence = [number] [EOL] memory_task_repository . load ( tasks_dict ) [EOL] return memory_task_repository [EOL] [EOL] [EOL] def test_memory_task_repository_get ( memory_task_repository ) : [EOL] task = memory_task_repository . get ( [string] ) [EOL] assert task . name == [string] [EOL] [EOL] [EOL] def test_memory_task_repository_get_not_found ( memory_task_repository ) : [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_task_repository . get ( [string] ) [EOL] [EOL] [EOL] def test_memory_task_repository_add ( memory_task_repository ) : [EOL] task = Task ( [string] ) [EOL] memory_task_repository . add ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL] assert memory_task_repository . tasks [ [string] ] == task [EOL] assert memory_task_repository . sequence == [number] [EOL] [EOL] [EOL] def test_memory_task_repository_add_with_uid ( memory_task_repository ) : [EOL] task = Task ( [string] ) [EOL] task . uid = [string] [EOL] memory_task_repository . add ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL] assert memory_task_repository . tasks [ [string] ] == task [EOL] assert memory_task_repository . sequence == [number] [EOL] [EOL] [EOL] def test_memory_task_repository_update ( memory_task_repository ) : [EOL] task = Task ( [string] ) [EOL] task . uid = [string] [EOL] assert memory_task_repository . tasks [ [string] ] . name == [string] [EOL] memory_task_repository . update ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL] assert memory_task_repository . tasks [ [string] ] . name == ( [string] ) [EOL] [EOL] [EOL] def test_memory_task_repository_update_not_found ( memory_task_repository ) : [EOL] task = Task ( [string] ) [EOL] task . uid = [string] [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_task_repository . update ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL] [EOL] [EOL] def test_memory_task_repository_delete ( memory_task_repository ) : [EOL] task = memory_task_repository . tasks [ [string] ] [EOL] task . uid = [string] [EOL] memory_task_repository . delete ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL] assert memory_task_repository . tasks . get ( [string] ) is None [EOL] [EOL] [EOL] def test_memory_task_repository_delete_not_found ( memory_task_repository ) : [EOL] task = Task ( [string] ) [EOL] task . uid = [string] [EOL] with raises ( EntityNotFoundError ) : [EOL] memory_task_repository . delete ( task ) [EOL] assert len ( memory_task_repository . tasks ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import datetime [EOL] import typing [EOL] from pytest import raises [EOL] from datetime import datetime , date [EOL] from taskit . infrastructure . data . json import json_serialize [EOL] [EOL] [EOL] def test_json_serialize ( ) : [EOL] sample_date = datetime . strptime ( [string] , [string] ) [EOL] result = json_serialize ( sample_date ) [EOL] assert result == [string] [EOL] [EOL] [EOL] def test_json_serialize_unserializable ( ) : [EOL] class SampleClass : [EOL] pass [EOL] with raises ( TypeError ) : [EOL] json_serialize ( SampleClass ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from taskit . application . reporters . state_reporter import StateReporter [EOL] [EOL] [EOL] def test_state_reporter_methods ( ) : [EOL] abstract_methods = StateReporter . __abstractmethods__ [comment] [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL] assert [string] in abstract_methods [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0