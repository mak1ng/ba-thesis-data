[comment] [EOL] from typing import List [EOL] import typing [EOL] from distutils . core import setup [EOL] [EOL] INSTALL_REQUIRES = [ [string] , [string] ] [EOL] [EOL] PYTHON_REQUIRES = [string] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , packages = [ [string] ] , install_requires = INSTALL_REQUIRES , python_requires = PYTHON_REQUIRES , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List , Dict [EOL] import requests [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from typing import Dict [EOL] import json [EOL] import time [EOL] import random [EOL] import requests [EOL] from bs4 import BeautifulSoup [EOL] [EOL] CALORIZATOR_URL = [string] [EOL] [EOL] [EOL] class CalorizatorApiError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] def get_main_content ( response ) : [EOL] [docstring] [EOL] soup = BeautifulSoup ( response . content ) [EOL] [EOL] return soup . find ( [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] def get_calorizator_pages_amount ( ) : [EOL] [docstring] [EOL] response = requests . get ( CALORIZATOR_URL ) [EOL] [EOL] if response . status_code != [number] : [EOL] raise CalorizatorApiError ( [string] . format ( response . status_code ) ) [EOL] [EOL] main_content = get_main_content ( response ) [EOL] [EOL] pager_last = main_content . find ( [string] , { [string] : [string] } ) [EOL] [EOL] return int ( pager_last . string ) [EOL] [EOL] [EOL] def get_calorizator_page ( page_idx ) : [EOL] [docstring] [EOL] response = requests . get ( CALORIZATOR_URL , { [string] : page_idx } ) [EOL] [EOL] if response . status_code != [number] : [EOL] raise CalorizatorApiError ( [string] . format ( page_idx , response . status_code ) ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def parse_float ( data ) : [EOL] [docstring] [EOL] try : [EOL] return float ( data . strip ( ) ) [EOL] except ValueError : [EOL] return [number] [EOL] [EOL] [EOL] def parse_calorizator_page ( page ) : [EOL] [docstring] [EOL] main_content = get_main_content ( page ) [EOL] [EOL] main_table = None [EOL] [EOL] for table in main_content . find_all ( [string] ) : [EOL] try : [EOL] [comment] [EOL] entries = table . thead . find ( [string] ) . find_all ( [string] ) [ [number] : ] [EOL] [comment] [EOL] entries_names = list ( map ( lambda x : x . a . string , entries ) ) [EOL] [EOL] [comment] [EOL] expected = [ [string] , [string] , [string] , [string] ] [EOL] if entries_names == expected : [EOL] [comment] [EOL] main_table = table [EOL] break [EOL] except AttributeError : [EOL] [comment] [EOL] pass [EOL] [EOL] if not main_table : [EOL] raise CalorizatorApiError ( [string] . format ( page ) ) [EOL] [EOL] result = { } [EOL] for entry in main_table . find ( [string] ) . find_all ( [string] ) : [EOL] columns = entry . find_all ( [string] ) [EOL] [EOL] name = columns [ [number] ] . a . string . strip ( ) [EOL] parsed_entry = { [string] : parse_float ( columns [ [number] ] . string ) , [string] : parse_float ( columns [ [number] ] . string ) , [string] : parse_float ( columns [ [number] ] . string ) , [string] : parse_float ( columns [ [number] ] . string ) , } [EOL] [EOL] result [ name ] = parsed_entry [EOL] [EOL] return result [EOL] [EOL] [EOL] def get_wait_interval ( start , stop ) : [EOL] [docstring] [EOL] interval = stop - start [EOL] [EOL] random_shift = random . random ( ) * interval [EOL] [EOL] return start + random_shift [EOL] [EOL] [EOL] def wait ( ) : [EOL] [docstring] [EOL] wait_interval = get_wait_interval ( [number] , [number] ) [EOL] [EOL] time . sleep ( wait_interval ) [EOL] [EOL] [EOL] def main ( args ) : [EOL] [docstring] [EOL] page_num = get_calorizator_pages_amount ( ) [EOL] [EOL] result_entries = { } [EOL] for page_idx in range ( page_num ) : [EOL] page = get_calorizator_page ( page_idx ) [EOL] page_data = parse_calorizator_page ( page ) [EOL] result_entries . update ( page_data ) [EOL] [EOL] wait ( ) [EOL] [EOL] with open ( args . output , [string] ) as file : [EOL] file . write ( json . dumps ( result_entries ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0