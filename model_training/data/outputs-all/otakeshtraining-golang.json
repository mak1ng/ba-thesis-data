import builtins [EOL] from typing import Type , Tuple , Union , List [EOL] import logging [EOL] import sharedbuild [EOL] import typing [EOL] import ctypes [EOL] from ctypes import POINTER , c_longlong , c_double , c_int , c_void_p , c_char_p , cdll , Structure , CFUNCTYPE , POINTER , sizeof , CDLL [EOL] import logging [EOL] log = logging . getLogger ( __name__ ) [EOL] lib = cdll . LoadLibrary ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] lib . Add . argtypes = [ c_longlong , c_longlong ] [EOL] print ( f" [string] { lib . Add ( [number] , [number] ) }" ) [EOL] [EOL] lib . Cosine . argtypes = [ c_double ] [EOL] lib . Cosine . restype = c_double [EOL] print ( f" [string] { lib . Cosine ( [number] ) }" ) [EOL] [EOL] [EOL] [comment] [EOL] class GoSlice ( Structure ) : [EOL] _fields_ = [ ( [string] , POINTER ( c_void_p ) ) , ( [string] , c_longlong ) , ( [string] , c_longlong ) ] [EOL] [EOL] [EOL] nums = GoSlice ( ( c_void_p * [number] ) ( [number] , [number] , [number] , [number] , [number] ) , [number] , [number] ) [EOL] print ( [ nums . data [ i ] for i in range ( nums . len ) ] ) [EOL] lib . Sort . argtypes = [ GoSlice ] [EOL] lib . Sort . restype = None [EOL] lib . Sort ( nums ) [EOL] print ( [ nums . data [ i ] for i in range ( nums . len ) ] ) [EOL] [EOL] [EOL] class GoString ( Structure ) : [EOL] _fields_ = [ ( [string] , c_char_p ) , ( [string] , c_longlong ) ] [EOL] [EOL] [EOL] lib . Log . argtypes = [ GoString ] [EOL] msg = GoString ( [string] , [number] ) [EOL] print ( lib . Log ( msg ) ) [EOL] msg = GoString ( [string] , [number] ) [EOL] print ( lib . Log ( msg ) ) [EOL] msg = GoString ( [string] , [number] ) [EOL] print ( lib . Log ( msg ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[typing.Union[ctypes.c_char_p,ctypes.c_longlong]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Callable , Union , Any [EOL] import logging [EOL] import typing [EOL] import ctypes [EOL] import logging [EOL] import platform [EOL] from ctypes import POINTER , c_longlong , c_double , c_int , c_void_p , c_char_p , cdll , Structure , CFUNCTYPE , POINTER , sizeof , CDLL [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] _pf = platform . system ( ) [EOL] if _pf == [string] : [EOL] libc = cdll . LoadLibrary ( [string] ) [EOL] elif _pf == [string] : [EOL] libc = cdll . LoadLibrary ( [string] ) [EOL] [comment] [EOL] [EOL] [EOL] @ CFUNCTYPE ( c_int , POINTER ( c_int ) , POINTER ( c_int ) ) def py_cmp_func ( a , b ) : [EOL] print ( [string] , a [ [number] ] , b [ [number] ] ) [EOL] print ( [ a [ i ] for i in range ( [number] ) ] ) [EOL] print ( [ b [ i ] for i in range ( [number] ) ] ) [EOL] return a [ [number] ] - b [ [number] ] [EOL] [EOL] [EOL] IntArray5 = c_int * [number] [EOL] ia = IntArray5 ( [number] , [number] , [number] , [number] , [number] ) [EOL] print ( ia [ : ] , ia ) [EOL] qsort = libc . qsort [EOL] qsort . restype = None [EOL] qsort ( ia , len ( ia ) , sizeof ( c_int ) , py_cmp_func ) [EOL] print ( ia [ : ] , ia ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import ctypes [EOL] from ctypes import POINTER , c_longlong , c_double , c_int , c_void_p , c_char_p , cdll , Structure , CFUNCTYPE , POINTER , sizeof , CDLL [EOL] import logging [EOL] log = logging . getLogger ( __name__ ) [EOL] lib = cdll . LoadLibrary ( [string] ) [EOL] [EOL] lib . Exmain ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $ctypes.CDLL$ 0 0 0 0 0 0 0 0 0 $ctypes.CDLL$ 0 0 0 0 0
from typing import Type [EOL] import sharedbuild [EOL] import typing [EOL] import ctypes [EOL] import ctypes [EOL] from ctypes import POINTER , c_longlong , c_double , c_int , c_void_p , c_char_p , cdll , Structure , CFUNCTYPE , POINTER , c_char [EOL] lib = cdll . LoadLibrary ( [string] ) [EOL] [EOL] [EOL] class GoSlice ( Structure ) : [EOL] _fields_ = [ ( [string] , POINTER ( c_void_p ) ) , ( [string] , c_longlong ) , ( [string] , c_longlong ) ] [EOL] [EOL] [EOL] class ByteArray ( Structure ) : [EOL] _fields_ = [ ( [string] , POINTER ( c_char ) ) , ( [string] , c_longlong ) ] [EOL] [EOL] [EOL] @ CFUNCTYPE ( c_int , ByteArray , ByteArray , ByteArray ) def bytes2int ( ba0 , ba1 , ba2 ) : [EOL] print ( [string] ) [EOL] total = [number] [EOL] for ba in ( ba0 , ba1 , ba2 ) : [EOL] print ( ba . data [ : ba . len ] ) [EOL] total += ba . len [EOL] return [number] + total [EOL] [EOL] [EOL] lib . CallbackBytesFunc . argtypes = [ type ( bytes2int ) ] [EOL] [comment] [EOL] print ( lib . CallbackBytesFunc ( bytes2int ) ) [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0