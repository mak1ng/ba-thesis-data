from distutils . version import LooseVersion [EOL] [EOL] [EOL] def filter_sort_versions ( value ) : [EOL] return sorted ( value , key = LooseVersion ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] filter_sort = { [string] : filter_sort_versions , } [EOL] [EOL] def filters ( self ) : [EOL] return self . filter_sort [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import subprocess [EOL] import io [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import print_function [EOL] [EOL] import json [EOL] import os [EOL] import signal [EOL] import subprocess [EOL] import sys [EOL] import traceback [EOL] [EOL] [EOL] BASH = [string] [EOL] [EOL] FISH_READONLY = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] IGNORED = [ [string] , [string] ] [EOL] [EOL] def ignored ( name ) : [EOL] if name == [string] : [comment] [EOL] return False [EOL] [comment] [EOL] if name in FISH_READONLY : [EOL] return True [EOL] if name in IGNORED or name . startswith ( [string] ) : [EOL] return True [EOL] return False [EOL] [EOL] def escape ( string ) : [EOL] [comment] [EOL] return json . dumps ( string ) . replace ( [string] , [string] ) [EOL] [EOL] def comment ( string ) : [EOL] return [string] . join ( [ [string] + line for line in string . split ( [string] ) ] ) [EOL] [EOL] def gen_script ( ) : [EOL] [comment] [EOL] [comment] [EOL] env_reader = [string] % ( sys . executable ) [EOL] args = [ BASH , [string] , env_reader ] [EOL] output = subprocess . check_output ( args , universal_newlines = True ) [EOL] old_env = output . strip ( ) [EOL] [EOL] pipe_r , pipe_w = os . pipe ( ) [EOL] if sys . version_info >= ( [number] , [number] ) : [EOL] os . set_inheritable ( pipe_w , True ) [EOL] command = [string] . format ( env_reader , pipe_w ) [EOL] args = [ BASH , [string] , command , [string] , [string] . join ( sys . argv [ [number] : ] ) ] [EOL] p = subprocess . Popen ( args , universal_newlines = True , close_fds = False ) [EOL] os . close ( pipe_w ) [EOL] with os . fdopen ( pipe_r ) as f : [EOL] new_env = f . readline ( ) [EOL] alias = f . read ( ) [EOL] if p . wait ( ) != [number] : [EOL] raise subprocess . CalledProcessError ( returncode = p . returncode , cmd = [string] . join ( sys . argv [ [number] : ] ) , output = new_env + alias ) [EOL] new_env = new_env . strip ( ) [EOL] [EOL] old_env = json . loads ( old_env ) [EOL] new_env = json . loads ( new_env ) [EOL] [EOL] script_lines = [ ] [EOL] [EOL] for k , v in new_env . items ( ) : [EOL] if ignored ( k ) : [EOL] continue [EOL] v1 = old_env . get ( k ) [EOL] if not v1 : [EOL] script_lines . append ( comment ( [string] % ( k , v ) ) ) [EOL] elif v1 != v : [EOL] script_lines . append ( comment ( [string] % ( k , v1 , v ) ) ) [EOL] [comment] [EOL] if k == [string] : [EOL] script_lines . append ( [string] % escape ( v ) ) [EOL] continue [EOL] else : [EOL] continue [EOL] if k == [string] : [EOL] value = [string] . join ( [ escape ( directory ) for directory in v . split ( [string] ) ] ) [EOL] else : [EOL] value = escape ( v ) [EOL] script_lines . append ( [string] % ( k , value ) ) [EOL] [EOL] for var in set ( old_env . keys ( ) ) - set ( new_env . keys ( ) ) : [EOL] script_lines . append ( comment ( [string] % var ) ) [EOL] script_lines . append ( [string] % var ) [EOL] [EOL] script = [string] . join ( script_lines ) [EOL] [EOL] return script + [string] + alias [EOL] [EOL] script_file = os . fdopen ( [number] , [string] ) [EOL] [EOL] if not sys . argv [ [number] : ] : [EOL] print ( [string] , file = script_file , end = [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] try : [EOL] script = gen_script ( ) [EOL] except subprocess . CalledProcessError as e : [EOL] sys . exit ( e . returncode ) [EOL] except Exception : [EOL] print ( [string] , file = sys . stderr ) [EOL] raise [comment] [EOL] except KeyboardInterrupt : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] os . kill ( os . getpid ( ) , signal . SIGINT ) [EOL] else : [EOL] script_file . write ( script ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 $typing.Any$ 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from ranger . gui . colorscheme import ColorScheme [EOL] import ranger . gui . color as style [EOL] import ranger . gui . context [EOL] import ranger . gui . widgets . browsercolumn [EOL] from os import getenv [EOL] from subprocess import check_output , CalledProcessError [EOL] [EOL] [EOL] class ls_colors ( ColorScheme ) : [EOL] def __init__ ( self ) : [EOL] super ( ColorScheme , self ) . __init__ ( ) [EOL] try : [EOL] self . ls_colors = getenv ( [string] , self . get_default_lscolors ( ) ) . split ( [string] ) [EOL] except ( CalledProcessError , FileNotFoundError ) : [EOL] self . ls_colors = [ ] [EOL] [EOL] [comment] [EOL] self . ls_colors_extensions = [ k . split ( [string] ) [ [number] ] for k in self . ls_colors if k != [string] ] [EOL] self . ls_colors_extensions = [ [string] + k . split ( [string] ) [ [number] ] for k in self . ls_colors_extensions if [string] in k ] [EOL] [EOL] [comment] [EOL] for key in self . ls_colors_extensions : [EOL] ranger . gui . context . CONTEXT_KEYS . append ( key ) [EOL] setattr ( ranger . gui . context . Context , key , False ) [EOL] [EOL] self . OLD_HOOK_BEFORE_DRAWING = ranger . gui . widgets . browsercolumn . hook_before_drawing [EOL] [EOL] ranger . gui . widgets . browsercolumn . hook_before_drawing = self . new_hook_before_drawing [EOL] [EOL] self . ls_colors_keys = [ k . split ( [string] ) for k in self . ls_colors if k != [string] ] [EOL] self . tup_ls_colors = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for key in [ k for k in self . ls_colors_keys if [string] not in k ] : [EOL] if key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] [EOL] [comment] [EOL] self . tup_ls_colors += [ ( [string] + k [ [number] ] . split ( [string] ) [ [number] ] , k [ [number] ] ) for k in self . ls_colors_keys if [string] in k [ [number] ] ] [EOL] [EOL] for key in [ k for k in self . ls_colors_keys if [string] not in k ] : [EOL] if key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] elif key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] elif key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] elif key [ [number] ] == [string] or key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] elif key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] elif key [ [number] ] == [string] : [EOL] self . tup_ls_colors += [ ( [string] , key [ [number] ] ) ] [EOL] [EOL] self . progress_bar_color = [number] [EOL] [EOL] def new_hook_before_drawing ( self , fsobject , color_list ) : [EOL] for key in self . ls_colors_extensions : [EOL] if fsobject . basename . endswith ( key ) : [EOL] color_list . append ( key ) [EOL] [EOL] return self . OLD_HOOK_BEFORE_DRAWING ( fsobject , color_list ) [EOL] [EOL] def get_default_lscolors ( self ) : [EOL] [docstring] [EOL] ls_colors = check_output ( [string] ) [EOL] ls_colors = ls_colors . splitlines ( ) [ [number] ] . decode ( [string] ) . split ( [string] ) [ [number] ] [EOL] return ls_colors [EOL] [EOL] def get_attr_from_lscolors ( self , attribute_list ) : [EOL] return_attr = [number] [EOL] to_del = [ ] [EOL] [EOL] for i , attr in enumerate ( attribute_list ) : [EOL] attr = int ( attr ) [EOL] to_del . append ( i ) [EOL] if attr == [number] : [EOL] return_attr |= style . bold [EOL] elif attr == [number] : [EOL] return_attr |= style . underline [EOL] elif attr == [number] : [EOL] return_attr |= style . blink [EOL] elif attr == [number] : [EOL] return_attr |= style . reverse [EOL] elif attr == [number] : [EOL] return_attr |= style . invisible [EOL] else : [EOL] to_del . pop ( - [number] ) [EOL] [EOL] return return_attr [EOL] [EOL] def get_256_background_color_if_exists ( self , attribute_list ) : [EOL] colour256 = False [EOL] for i , key in enumerate ( attribute_list ) : [EOL] if key == [string] and attribute_list [ i + [number] ] == [string] : [EOL] colour256 = True [EOL] break [EOL] if colour256 and len ( attribute_list ) >= i + [number] : [EOL] return_colour = int ( attribute_list [ i + [number] ] ) [EOL] del attribute_list [ i : i + [number] ] [EOL] return return_colour [EOL] else : [EOL] return None [EOL] [EOL] def get_256_foreground_color_if_exists ( self , attribute_list ) : [EOL] colour256 = False [EOL] for i , key in enumerate ( attribute_list ) : [EOL] if key == [string] and attribute_list [ i + [number] ] == [string] : [EOL] colour256 = True [EOL] break [EOL] if colour256 and len ( attribute_list ) >= i + [number] : [EOL] return_colour = int ( attribute_list [ i + [number] ] ) [EOL] del attribute_list [ i : i + [number] ] [EOL] return return_colour [EOL] else : [EOL] return None [EOL] [EOL] def use ( self , context ) : [EOL] fg , bg , attr = style . default_colors [EOL] [EOL] [comment] [EOL] [comment] [EOL] for key , t_attributes in self . tup_ls_colors : [EOL] if getattr ( context , key ) : [EOL] if key == [string] and ( context . directory or context . link ) : [EOL] continue [EOL] t_attributes = t_attributes . split ( [string] ) [EOL] colour256_fg = self . get_256_foreground_color_if_exists ( t_attributes ) [EOL] colour256_bg = self . get_256_background_color_if_exists ( t_attributes ) [EOL] new_attr = self . get_attr_from_lscolors ( t_attributes ) [EOL] if new_attr is not None : [EOL] attr |= new_attr [EOL] [EOL] [comment] [EOL] [comment] [EOL] colour16_fg , colour16_bg = None , None [EOL] for colour_val in t_attributes : [EOL] colour_val = int ( colour_val ) [EOL] [comment] [EOL] if ( colour_val >= [number] and colour_val <= [number] ) : [EOL] colour16_fg = colour_val - [number] [EOL] [comment] [EOL] elif ( colour_val >= [number] and colour_val <= [number] ) : [EOL] colour16_fg = colour_val - [number] [EOL] [EOL] [comment] [EOL] elif ( colour_val >= [number] and colour_val <= [number] ) : [EOL] colour16_bg = colour_val [EOL] [comment] [EOL] elif ( colour_val >= [number] and colour_val <= [number] ) : [EOL] colour16_bg = colour_val [EOL] [EOL] if colour256_fg is not None : [EOL] fg = colour256_fg [EOL] elif colour16_fg is not None : [EOL] fg = colour16_fg [EOL] [EOL] if colour256_bg is not None : [EOL] bg = colour256_bg [EOL] elif colour16_bg is not None : [EOL] bg = colour16_bg [EOL] [EOL] if context . reset : [EOL] return style . default_colors [EOL] elif context . in_browser : [EOL] if context . selected : [EOL] attr = style . reverse [EOL] if context . tag_marker and not context . selected : [EOL] attr |= style . bold [EOL] if fg in ( style . red , style . magenta ) : [EOL] fg = style . white [EOL] else : [EOL] fg = style . red [EOL] fg += style . BRIGHT [EOL] if not context . selected and ( context . cut or context . copied ) : [EOL] attr |= style . bold [EOL] fg = style . black [EOL] fg += style . BRIGHT [EOL] [comment] [EOL] [comment] [EOL] if style . BRIGHT == [number] : [EOL] attr |= style . dim [EOL] fg = style . white [EOL] if context . main_column : [EOL] [comment] [EOL] [comment] [EOL] if context . selected : [EOL] attr |= style . bold [EOL] if context . marked : [EOL] attr |= style . bold [EOL] fg = style . yellow [EOL] [EOL] return fg , bg , attr [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
from typing import Tuple , Dict [EOL] import typing [EOL] [docstring] [EOL] from __future__ import unicode_literals [EOL] [EOL] from prompt_toolkit . filters import ViInsertMode [EOL] from prompt_toolkit . key_binding . key_processor import KeyPress [EOL] from prompt_toolkit . keys import Keys [EOL] from ptpython . layout import CompletionVisualisation [EOL] from pygments . token import Token [EOL] [EOL] __all__ = ( [string] , ) [EOL] [EOL] [EOL] def configure ( repl ) : [EOL] [docstring] [EOL] repl . show_signature = False [comment] [EOL] repl . show_docstring = True [EOL] repl . show_meta_enter_message = True [EOL] repl . completion_visualisation = ( CompletionVisualisation . MULTI_COLUMN ) [comment] [EOL] repl . completion_menu_scroll_offset = [number] [EOL] repl . show_line_numbers = False [EOL] repl . show_status_bar = True [EOL] repl . show_sidebar_help = True [EOL] repl . highlight_matching_parenthesis = True [EOL] repl . wrap_lines = True [EOL] repl . enable_mouse_support = False [EOL] repl . complete_while_typing = True [EOL] repl . vi_mode = True [EOL] repl . paste_mode = False [EOL] repl . prompt_style = [string] [comment] [EOL] repl . insert_blank_line_after_output = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] repl . enable_history_search = False [EOL] repl . enable_auto_suggest = True [EOL] repl . enable_open_in_editor = True [comment] [EOL] repl . enable_system_bindings = True [comment] [EOL] repl . confirm_exit = True [EOL] repl . enable_input_validation = True [comment] [EOL] repl . use_code_colorscheme ( [string] ) [EOL] repl . color_depth = [string] [comment] [EOL] repl . enable_syntax_highlighting = True [EOL] [EOL] @ repl . add_key_binding ( [string] , [string] , filter = ViInsertMode ( ) ) def _ ( event ) : [EOL] [docstring] [EOL] event . cli . key_processor . feed ( KeyPress ( Keys . Escape ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _custom_ui_colorscheme = { Token . Layout . Prompt : [string] , Token . Toolbar . Status : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0