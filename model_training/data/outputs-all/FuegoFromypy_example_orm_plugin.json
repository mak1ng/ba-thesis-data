	0
from typing import Optional , Any , Callable , Type [EOL] import typing [EOL] import mypy [EOL] import builtins [EOL] from typing import Optional , Callable [EOL] from typing import Type as TypingType [EOL] [EOL] from mypy . nodes import TypeInfo , TypeAlias [EOL] from mypy . plugin import Plugin , AttributeContext [EOL] from mypy . types import Type as MypyType , FunctionLike [EOL] [EOL] _BASE_MODEL_FULLNAME = [string] [EOL] _BASE_FIELD_FULLNAME = [string] [EOL] _INSTANCE_TYPE_ATTR_NAME = [string] [EOL] [EOL] [EOL] class ModelPlugin ( Plugin ) : [EOL] def get_attribute_hook ( self , fullname ) : [EOL] attr_info = self . lookup_fully_qualified ( fullname ) [EOL] if attr_info is None : [EOL] return None [EOL] [EOL] field_class_name = repr ( attr_info . type ) [EOL] containing_class_name = [string] . join ( fullname . split ( [string] ) [ : - [number] ] ) [EOL] [EOL] is_model_class = self . _class_has_base ( containing_class_name , _BASE_MODEL_FULLNAME ) [EOL] is_model_field = self . _class_has_base ( field_class_name , _BASE_FIELD_FULLNAME ) [EOL] [EOL] if is_model_class and is_model_field : [EOL] instance_type_info = self . lookup_fully_qualified ( f"{ field_class_name } [string] { _INSTANCE_TYPE_ATTR_NAME }" ) [EOL] if instance_type_info is None : [EOL] return None [EOL] [EOL] if instance_type_info . type is not None : [EOL] instance_type = instance_type_info . type [EOL] if isinstance ( instance_type , FunctionLike ) and instance_type . is_type_obj ( ) : [EOL] instance_type = instance_type . items ( ) [ [number] ] . ret_type [EOL] elif isinstance ( instance_type_info . node , TypeAlias ) : [EOL] instance_type = instance_type_info . node . target [EOL] [EOL] def resolve ( _ ) : [EOL] return instance_type [EOL] [EOL] return resolve [EOL] [EOL] return None [EOL] [EOL] def _class_has_base ( self , class_fullname , base_fullname ) : [EOL] class_info = self . lookup_fully_qualified ( class_fullname ) [EOL] return ( class_info is not None and isinstance ( class_info . node , TypeInfo ) and class_info . node . has_base ( base_fullname ) ) [EOL] [EOL] [EOL] def plugin ( _mypy_info ) : [EOL] return ModelPlugin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Callable[[mypy.plugin.AttributeContext],mypy.types.Type]]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $mypy.types.Type$ 0 $mypy.plugin.AttributeContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[mypy.plugin.Plugin]$ 0 0 0 0 0 0 0 0
	0