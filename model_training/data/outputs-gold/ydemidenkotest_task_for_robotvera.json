from django . apps import AppConfig [EOL] [EOL] [EOL] class CrecheConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Type [EOL] import creche [EOL] import typing [EOL] from rest_framework import generics [EOL] [EOL] from creche . models import JournalEntry [EOL] from creche . serializers import ( ChildSerializer , JournalEntryCreateSerializer , JournalEntryListSerializer , JournalEntryUpdateSerializer , ) [EOL] [EOL] [EOL] class ChildCreateView ( generics . CreateAPIView ) : [EOL] [docstring] [EOL] [EOL] serializer_class = ChildSerializer [EOL] [EOL] [EOL] class JournalEntryList ( generics . ListCreateAPIView ) : [EOL] [docstring] [EOL] [EOL] queryset = JournalEntry . objects . filter ( child__is_pupil = True ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] [docstring] [EOL] if hasattr ( self . request , [string] ) : [EOL] if self . request . method == [string] : [EOL] return JournalEntryListSerializer [EOL] if self . request . method == [string] : [EOL] return JournalEntryCreateSerializer [EOL] [EOL] [EOL] class JournalEntryDetailUpdate ( generics . UpdateAPIView ) : [EOL] [docstring] [EOL] [EOL] queryset = JournalEntry . objects . all ( ) [EOL] serializer_class = JournalEntryUpdateSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.ChildSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.views.JournalEntryList]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.views.JournalEntryDetailUpdate]$ 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryUpdateSerializer]$ 0 0 0
from django . contrib import admin [EOL] [EOL] from creche . models import Child , JournalEntry [EOL] [EOL] [EOL] class ChildAdmin ( admin . ModelAdmin ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class JournalEntryAdmin ( admin . ModelAdmin ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] admin . site . register ( Child , ChildAdmin ) [EOL] admin . site . register ( JournalEntry , JournalEntryAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import ChildCreateView , JournalEntryDetailUpdate , JournalEntryList [EOL] [EOL] urlpatterns = [ path ( [string] , ChildCreateView . as_view ( ) ) , path ( [string] , JournalEntryList . as_view ( ) ) , path ( [string] , JournalEntryDetailUpdate . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import creche [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] from rest_framework import serializers [EOL] [EOL] from creche . models import Child , JournalEntry [EOL] [EOL] [EOL] def get_now_time ( ) : [EOL] [docstring] [EOL] return datetime . now ( ) . time ( ) [EOL] [EOL] [EOL] def get_now_date ( ) : [EOL] [docstring] [EOL] return datetime . now ( ) . date ( ) [EOL] [EOL] [EOL] class ChildSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Child [EOL] fields = [string] [EOL] [EOL] [EOL] class JournalEntryListSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = JournalEntry [EOL] fields = [string] [EOL] [EOL] [EOL] class JournalEntryCreateSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] timestamp_come = serializers . HiddenField ( default = serializers . CreateOnlyDefault ( get_now_time ) ) [EOL] datestamp = serializers . HiddenField ( default = serializers . CreateOnlyDefault ( get_now_date ) ) [EOL] [EOL] class Meta : [EOL] model = JournalEntry [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class JournalEntryUpdateSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] timestamp_away = serializers . HiddenField ( default = get_now_time ) [EOL] datestamp = serializers . DateField ( read_only = True ) [EOL] child = serializers . PrimaryKeyRelatedField ( read_only = True ) [EOL] people_away = serializers . ChoiceField ( required = True , choices = JournalEntry . PEOPLES . CHOICES ) [EOL] [EOL] class Meta : [EOL] model = JournalEntry [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.serializers.JournalEntryUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import creche [EOL] import typing [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] [EOL] [EOL] class Child ( models . Model ) : [EOL] [docstring] [EOL] [EOL] class GENDERS : [EOL] BOY = [string] [EOL] GIRL = [string] [EOL] [EOL] CHOICES = ( ( BOY , [string] ) , ( GIRL , [string] ) , ) [EOL] [EOL] photo = models . ImageField ( [string] , upload_to = [string] , null = True , blank = True ) [EOL] name = models . CharField ( [string] , max_length = [number] ) [EOL] gender = models . CharField ( [string] , choices = GENDERS . CHOICES , max_length = [number] ) [EOL] birthdate = models . DateField ( [string] ) [EOL] classroom = models . SmallIntegerField ( [string] , null = True , blank = True ) [EOL] is_pupil = models . BooleanField ( [string] , default = False , db_index = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return f'{ self . _meta . verbose_name } [string] { self . name }' [EOL] [EOL] [EOL] class JournalEntry ( models . Model ) : [EOL] [docstring] [EOL] [EOL] class PEOPLES : [EOL] DAD = [string] [EOL] MOM = [string] [EOL] [EOL] CHOICES = ( ( DAD , [string] ) , ( MOM , [string] ) , ) [EOL] [EOL] child = models . ForeignKey ( Child , verbose_name = Child . _meta . verbose_name , on_delete = models . CASCADE ) [EOL] timestamp_come = models . TimeField ( [string] , db_index = True ) [EOL] timestamp_away = models . TimeField ( [string] , null = True , blank = True , db_index = True ) [EOL] people_come = models . CharField ( [string] , max_length = [number] , choices = PEOPLES . CHOICES ) [EOL] people_away = models . CharField ( [string] , max_length = [number] , choices = PEOPLES . CHOICES , blank = True ) [EOL] datestamp = models . DateField ( [string] , db_index = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return f'{ self . _meta . verbose_name } [string] { self . datestamp }' [EOL] [EOL] def clean_fields ( self , exclude = None ) : [EOL] [docstring] [EOL] super ( ) . clean_fields ( exclude = exclude ) [EOL] one_of_fields_filled = self . timestamp_away or self . people_away [EOL] both_fields_filled = self . timestamp_away and self . people_away [EOL] if one_of_fields_filled and not both_fields_filled : [EOL] timestamp_away_verbose_name = self . _meta . get_field ( [string] ) . verbose_name [EOL] people_away_verbose_name = self . _meta . get_field ( [string] ) . verbose_name [EOL] raise ValidationError ( f' [string] { timestamp_away_verbose_name } [string] { people_away_verbose_name }' , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[creche.models.JournalEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import datetime [EOL] import creche [EOL] import typing [EOL] from datetime import date , time [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from creche . models import Child , JournalEntry [EOL] from creche . serializers import ( ChildSerializer , JournalEntryCreateSerializer , JournalEntryListSerializer , JournalEntryUpdateSerializer , ) [EOL] [EOL] [EOL] class ChildSerializerTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_create_child ( self ) : [EOL] [docstring] [EOL] child = ChildSerializer ( data = { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertEqual ( child . is_valid ( ) , True ) [EOL] child . save ( ) [EOL] [EOL] self . assertEqual ( Child . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] [EOL] class JourneyListSerializerTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] child = Child . objects . create ( name = [string] , gender = Child . GENDERS . BOY , birthdate = date ( [number] , [number] , [number] ) ) [EOL] pupil = Child . objects . create ( name = [string] , gender = Child . GENDERS . GIRL , birthdate = date ( [number] , [number] , [number] ) , is_pupil = True , classroom = [number] , ) [EOL] [EOL] JournalEntry . objects . create ( child = child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] JournalEntry . objects . create ( child = pupil , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] def test_correct_queryset ( self ) : [EOL] [docstring] [EOL] serializer = JournalEntryListSerializer ( JournalEntry . objects . all ( ) , many = True ) [EOL] self . assertEqual ( len ( serializer . data ) , [number] ) [EOL] [EOL] def test_correct_fields_count ( self ) : [EOL] [docstring] [EOL] serializer = JournalEntryListSerializer ( JournalEntry . objects . first ( ) ) [EOL] self . assertEqual ( len ( serializer . data ) , [number] ) [EOL] self . assertEqual ( sorted ( serializer . data . keys ( ) ) , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , ) [EOL] [EOL] [EOL] class JourneyCreateSerializerTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . child = Child . objects . create ( name = [string] , gender = Child . GENDERS . BOY , birthdate = date ( [number] , [number] , [number] ) ) [EOL] self . serializer_class = JournalEntryCreateSerializer [EOL] [EOL] def test_correct_create ( self ) : [EOL] [docstring] [EOL] entry = self . serializer_class ( data = { [string] : self . child . id , [string] : JournalEntry . PEOPLES . DAD } ) [EOL] self . assertEqual ( entry . is_valid ( ) , True ) [EOL] entry . save ( ) [EOL] [EOL] self . assertEqual ( JournalEntry . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] def test_dont_save_datestamp_in_create ( self ) : [EOL] [docstring] [EOL] datestamp = date ( [number] , [number] , [number] ) [EOL] [EOL] entry = self . serializer_class ( data = { [string] : self . child . id , [string] : JournalEntry . PEOPLES . DAD , [string] : datestamp . strftime ( [string] ) , } ) [EOL] self . assertEqual ( entry . is_valid ( ) , True ) [EOL] [comment] [EOL] entry_object = entry . save ( ) [EOL] self . assertNotEqual ( entry_object . datestamp , datestamp ) [EOL] [EOL] def test_not_valid_duplicate_create ( self ) : [EOL] [docstring] [EOL] entry = self . serializer_class ( data = { [string] : self . child . id , [string] : JournalEntry . PEOPLES . DAD } ) [EOL] self . assertEqual ( entry . is_valid ( ) , True ) [EOL] entry . save ( ) [EOL] entry_not_valid = self . serializer_class ( data = { [string] : self . child . id , [string] : JournalEntry . PEOPLES . DAD } ) [EOL] self . assertEqual ( entry_not_valid . is_valid ( ) , False ) [EOL] self . assertEqual ( entry_not_valid . errors [ [string] ] [ [number] ] . code , [string] ) [EOL] [EOL] [EOL] class JourneyUpdateSerializerTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] child = Child . objects . create ( name = [string] , gender = Child . GENDERS . BOY , birthdate = date ( [number] , [number] , [number] ) ) [EOL] [EOL] self . journal_entry = JournalEntry . objects . create ( child = child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] self . serializer_class = JournalEntryUpdateSerializer [EOL] [EOL] def test_correct_update ( self ) : [EOL] [docstring] [EOL] entry = self . serializer_class ( self . journal_entry , data = { [string] : JournalEntry . PEOPLES . DAD } ) [EOL] self . assertEqual ( entry . is_valid ( ) , True ) [EOL] entry . save ( ) [EOL] [EOL] self . assertEqual ( JournalEntry . objects . all ( ) . count ( ) , [number] ) [EOL] self . assertEqual ( JournalEntry . objects . first ( ) . people_away , JournalEntry . PEOPLES . DAD ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.ChildSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.ChildSerializer$ 0 0 0 0 0 0 0 0 $creche.serializers.ChildSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.JournalEntryListSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.JournalEntryListSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.JournalEntryListSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.JournalEntryListSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.serializers.JournalEntryListSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] from creche . views import ( ChildCreateView , JournalEntryDetailUpdate , JournalEntryList , ) [EOL] [EOL] [EOL] class ViewsTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def get_allowed_methods ( view_class ) : [EOL] [docstring] [EOL] return sorted ( view_class . _allowed_methods ( view_class ( ) ) ) [EOL] [EOL] def test_journal_list_create_view_methods ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( self . get_allowed_methods ( JournalEntryList ) , sorted ( [ [string] , [string] , [string] ] ) ) [EOL] [EOL] def test_journal_update_view_methods ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( self . get_allowed_methods ( JournalEntryDetailUpdate ) , sorted ( [ [string] , [string] , [string] ] ) ) [EOL] [EOL] def test_child_create_view_methods ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( self . get_allowed_methods ( ChildCreateView ) , sorted ( [ [string] , [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import creche [EOL] from datetime import date , time [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import IntegrityError [EOL] from django . test import TestCase [EOL] [EOL] from creche . models import Child , JournalEntry [EOL] [EOL] [EOL] class ChildTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_create_child ( self ) : [EOL] [docstring] [EOL] Child . objects . create ( name = [string] , gender = Child . GENDERS . BOY , birthdate = date ( [number] , [number] , [number] ) ) [EOL] [EOL] self . assertEqual ( Child . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] [EOL] class JournalEntryTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . child = Child . objects . create ( name = [string] , gender = Child . GENDERS . BOY , birthdate = date ( [number] , [number] , [number] ) ) [EOL] [EOL] def test_create_journal_entry ( self ) : [EOL] [docstring] [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] self . assertEqual ( JournalEntry . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] def test_create_journal_entry_with_away ( self ) : [EOL] [docstring] [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , timestamp_away = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , people_away = JournalEntry . PEOPLES . MOM , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] self . assertEqual ( JournalEntry . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] def test_create_journal_entry_with_duplicate_child ( self ) : [EOL] [docstring] [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , timestamp_away = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , people_away = JournalEntry . PEOPLES . MOM , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] self . assertEqual ( JournalEntry . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] def test_fail_create_journal_entry_with_duplicate_child_and_datestamp ( self ) : [EOL] [docstring] [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] with self . assertRaises ( IntegrityError ) : [EOL] JournalEntry . objects . create ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , timestamp_away = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , people_away = JournalEntry . PEOPLES . MOM , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] def test_fail_create_journal_entry_with_incomplete_away_data ( self ) : [EOL] [docstring] [EOL] entry_with_people_away = JournalEntry ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , people_away = JournalEntry . PEOPLES . MOM , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] entry_with_timestamp_away = JournalEntry ( child = self . child , timestamp_come = time ( [number] , [number] , [number] ) , timestamp_away = time ( [number] , [number] , [number] ) , people_come = JournalEntry . PEOPLES . DAD , datestamp = date ( [number] , [number] , [number] ) , ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] entry_with_people_away . full_clean ( ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] entry_with_timestamp_away . full_clean ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.models.JournalEntry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.models.JournalEntry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.models.JournalEntry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $creche.models.JournalEntry$ 0 0 0 0 0
	0
	0
	0
from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0