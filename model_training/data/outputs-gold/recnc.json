from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] NAME = [string] [EOL] OWNER = [string] [EOL] [EOL] VERSION_FILE = os . path . join ( os . path . dirname ( __file__ ) , NAME , [string] ) [EOL] VERSION = open ( VERSION_FILE ) . read ( ) . strip ( ) [EOL] [EOL] URL = [string] . format ( ** locals ( ) ) [EOL] DOWNLOAD_URL = [string] . format ( ** locals ( ) ) [EOL] [EOL] INSTALL_REQUIRES = open ( [string] ) . read ( ) . splitlines ( ) [EOL] TESTS_REQUIRE = open ( [string] ) . read ( ) . splitlines ( ) [EOL] [EOL] CLASSIFIERS = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] if __name__ == [string] : [EOL] import setuptools [EOL] [EOL] setuptools . setup ( name = NAME , version = VERSION , description = [string] , long_description = open ( [string] ) . read ( ) , author = [string] , author_email = [string] , url = URL , download_url = DOWNLOAD_URL , license = [string] , packages = [ [string] ] , classifiers = CLASSIFIERS , tests_require = TESTS_REQUIRE , install_requires = INSTALL_REQUIRES , include_package_data = True , scripts = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] PREFIX = [string] [EOL] SUFFIX = [string] [EOL] [EOL] [EOL] def extract_color ( line ) : [EOL] if not ( line . endswith ( SUFFIX ) and line . startswith ( PREFIX ) ) : [EOL] return None [EOL] [EOL] line = line [ len ( PREFIX ) : - len ( SUFFIX ) ] [EOL] [EOL] result = { } [EOL] while line : [EOL] name , line = line . split ( [string] , [number] ) [EOL] value = [string] [EOL] while True : [EOL] try : [EOL] a , b = line . split ( [string] , [number] ) [EOL] except ValueError : [EOL] value += line [EOL] line = [string] [EOL] break [EOL] [EOL] try : [EOL] c , d = line . split ( [string] , [number] ) [EOL] except ValueError : [EOL] c = None [EOL] [EOL] if c is None or len ( a ) < len ( c ) : [EOL] value += a [EOL] line = b [EOL] break [EOL] [EOL] [comment] [EOL] e , line = d . split ( [string] , [number] ) [EOL] value += [string] % ( c , e ) [EOL] [EOL] result [ name ] = value [EOL] [EOL] return result [EOL] [EOL] [EOL] TEST_DATA = [string] [EOL] [EOL] TEST_DATA2 = [string] [EOL] [EOL] [EOL] def run_test ( ) : [EOL] print ( extract_color ( TEST_DATA ) ) [EOL] print ( extract_color ( TEST_DATA2 ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] run_test ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Any , Type [EOL] import typing [EOL] import nc [EOL] import collections [EOL] import math [EOL] import numbers [EOL] [EOL] COLOR_TUPLE = collections . namedtuple ( [string] , [string] ) [EOL] [EOL] [EOL] class Color ( COLOR_TUPLE ) : [EOL] [docstring] [EOL] [EOL] COLORS = None [EOL] [EOL] def __new__ ( cls , * args ) : [EOL] return super ( ) . __new__ ( cls , * _make ( cls , args ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . COLORS . _rgb_to_name . get ( self ) or [string] . format ( * self ) [EOL] [EOL] def __repr__ ( self ) : [EOL] name = str ( self ) [EOL] if not name . startswith ( [string] ) : [EOL] return [string] % name [EOL] return [string] + name [EOL] [EOL] def closest ( self ) : [EOL] [docstring] [EOL] return self . COLORS . closest ( self ) [EOL] [EOL] def distance2 ( self , other ) : [EOL] [docstring] [EOL] d = ( i - j for i , j in zip ( self , other ) ) [EOL] return sum ( i * i for i in d ) [EOL] [EOL] def distance ( self , other ) : [EOL] return math . sqrt ( self . distance2 ( other ) ) [EOL] [EOL] @ property def rgb ( self ) : [EOL] return self . r * [number] + self . g * [number] + self . b [EOL] [EOL] [EOL] def _make ( cls , args ) : [EOL] if not args : [EOL] return cls . COLORS . _default [EOL] [EOL] a = args [ [number] ] if len ( args ) == [number] else args [EOL] if isinstance ( a , numbers . Number ) : [EOL] return _int_to_tuple ( a ) [EOL] [EOL] if not isinstance ( a , str ) : [EOL] if len ( a ) == [number] : [EOL] return tuple ( int ( i ) for i in a ) [EOL] raise ValueError ( _COLOR_ERROR ) [EOL] [EOL] try : [EOL] return cls . COLORS [ a ] [EOL] except KeyError : [EOL] pass [EOL] [EOL] if [string] not in a : [EOL] return _int_to_tuple ( _string_to_int ( a ) ) [EOL] [EOL] if a . startswith ( [string] ) and a . endswith ( [string] ) : [EOL] a = a [ [number] : - [number] ] [EOL] if a . startswith ( [string] ) and a . endswith ( [string] ) : [EOL] a = a [ [number] : - [number] ] [EOL] [EOL] return tuple ( _string_to_int ( i ) for i in a . split ( [string] ) ) [EOL] [EOL] [EOL] def _int_to_tuple ( color ) : [EOL] rg , b = color // [number] , color % [number] [EOL] r , g = rg // [number] , rg % [number] [EOL] return r , g , b [EOL] [EOL] [EOL] def _string_to_int ( s ) : [EOL] s = s . strip ( ) [EOL] [EOL] for prefix in [string] , [string] : [EOL] if s . startswith ( prefix ) : [EOL] p = s [ len ( prefix ) : ] . lstrip ( [string] ) [EOL] return int ( p or [string] , [number] ) [EOL] [EOL] return int ( s ) [EOL] [EOL] [EOL] _COLOR_ERROR = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from . import terminal [EOL] import subprocess [EOL] import sys [EOL] import time [EOL] [EOL] DEFAULT_COLUMNS = [number] [EOL] DEMO_CHAR = [string] [EOL] [EOL] [EOL] class Demo : [EOL] def __init__ ( self , terminal_colors , reverse , steps = [number] ) : [EOL] self . context = terminal . Context ( terminal_colors ) [EOL] self . reverse = reverse [EOL] self . steps = steps [EOL] [EOL] def demo ( self , is_long ) : [EOL] if not self . context : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] return - [number] [EOL] [EOL] return self . long ( ) if is_long else self . short ( ) [EOL] [EOL] def long ( self ) : [EOL] self . _run ( self . _one_long , True ) [EOL] [EOL] def short ( self ) : [EOL] cmd = [ [string] , [string] ] [EOL] try : [EOL] out = subprocess . check_output ( cmd , stderr = subprocess . DEVNULL ) [EOL] except Exception : [EOL] columns = DEFAULT_COLUMNS [EOL] else : [EOL] _ , columns = out . split ( ) [EOL] columns = int ( columns ) [EOL] [EOL] self . chars = len ( self . context ) [EOL] while self . chars > columns : [EOL] self . chars //= [number] [EOL] [EOL] self . _run ( self . _one_short , False ) [EOL] [EOL] def _one_long ( self , fg , bg ) : [EOL] print ( ) [EOL] print ( fg , bg , sep = [string] , end = [string] ) [EOL] sleep_time = [number] [EOL] sleep_time and time . sleep ( sleep_time ) [EOL] [EOL] def _one_short ( self , fg , bg ) : [EOL] print ( DEMO_CHAR , end = [string] ) [EOL] if ( self . count + [number] ) % self . chars : [EOL] sys . stdout . flush ( ) [EOL] else : [EOL] self . context . print_codes ( print = print ) [EOL] print ( ) [EOL] sleep_time = [number] [EOL] sleep_time and time . sleep ( sleep_time ) [EOL] [EOL] def _run ( self , demo , use_none ) : [EOL] colors = list ( self . context . colors . values ( ) ) [EOL] if use_none : [EOL] colors . insert ( [number] , None ) [EOL] [EOL] self . count = [number] [EOL] for c1 in colors : [EOL] for c2 in colors : [EOL] fg , bg = ( c1 , c2 ) if self . reverse else ( c2 , c1 ) [EOL] with self . context ( fg , bg , print ) : [EOL] demo ( fg , bg ) [EOL] self . count += [number] [EOL] if self . steps and self . steps <= self . count : [EOL] return [EOL] [EOL] [EOL] def demo ( terminal_colors , reverse , long , steps = [number] ) : [EOL] return Demo ( terminal_colors , reverse , steps ) . demo ( long ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal , Tuple [EOL] import typing [EOL] import functools [EOL] import typing_extensions [EOL] from . colors import Colors [EOL] import contextlib [EOL] import functools [EOL] import subprocess [EOL] [EOL] TERMINAL_ENVIRONMENT_VAR = [string] [EOL] SIZES = [number] , [number] , [number] [EOL] [EOL] [EOL] def context ( fg = None , bg = None , print = print , count = None ) : [EOL] return Context ( count ) ( fg , bg , print ) [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def color_count ( ) : [EOL] cmd = [string] , [string] [EOL] try : [EOL] count = int ( subprocess . check_output ( cmd , stderr = subprocess . STDOUT ) ) [EOL] except subprocess . CalledProcessError : [comment] [EOL] return [number] [EOL] [EOL] return next ( ( s for s in SIZES if count >= s ) , [number] ) [EOL] [EOL] [EOL] class _Context : [EOL] def __init__ ( self , count = None ) : [EOL] count = color_count ( ) if count is None else count [EOL] if count : [EOL] self . colors = Colors ( [string] % count ) [EOL] palette = self . colors . _palettes [ [number] ] [EOL] codes = palette [ [string] ] [EOL] self . CODES = { self . colors [ k ] : v for k , v in codes . items ( ) } [EOL] self . fg = palette [ [string] ] [EOL] self . bg = palette [ [string] ] [EOL] else : [EOL] self . colors = None [EOL] [EOL] def __bool__ ( self ) : [EOL] return bool ( self . colors ) [EOL] [EOL] def __len__ ( self ) : [EOL] return self . colors and len ( self . colors ) or [number] [EOL] [EOL] def print_codes ( self , * codes , print = print ) : [EOL] result = [string] % [string] . join ( str ( c ) for c in codes ) [EOL] print ( result , end = [string] ) [EOL] [EOL] @ contextlib . contextmanager def __call__ ( self , fg = None , bg = None , print = print ) : [EOL] def color_codes ( color , coder ) : [EOL] if not color : [EOL] return ( ) [EOL] closest = self . colors . closest ( color ) [EOL] return coder ( self . CODES [ closest ] ) [EOL] [EOL] if self and ( fg or bg ) : [EOL] codes = color_codes ( fg , self . fg ) + color_codes ( bg , self . bg ) [EOL] self . print_codes ( * codes , print = print ) [EOL] try : [EOL] yield [EOL] finally : [EOL] self . print_codes ( print = print ) [EOL] [EOL] else : [EOL] yield [EOL] [EOL] [EOL] Context = functools . lru_cache ( ) ( _Context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools._lru_cache_wrapper[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools._lru_cache_wrapper[typing.Any]$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] COLORS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Set [EOL] import typing [EOL] COLORS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] PRIMARY_NAMES = { [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] COLORS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] PRESERVE_CAPITALIZATION = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.intbuiltins.bool$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] from . import _terminal256 [EOL] [EOL] [EOL] def fg ( code ) : [EOL] return [number] , [number] , code [EOL] [EOL] [EOL] def bg ( code ) : [EOL] return [number] , [number] , code [EOL] [EOL] [EOL] _COLORS = ( ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ) + _terminal256 . COLORS [EOL] [EOL] assert len ( _COLORS ) == [number] [EOL] [EOL] COLORS = { k : v for k , v in _COLORS } [EOL] CODES = { k : i for i , ( k , v ) in enumerate ( _COLORS ) } [EOL] PRESERVE_CAPITALIZATION = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] COLORS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Set [EOL] import typing [EOL] [docstring] [EOL] [EOL] COLORS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] PRIMARY_NAMES = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] [EOL] [docstring] [EOL] SECONDARY_NAMES = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.inttyping.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] COLORS = ( ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ( [string] , ( [number] , [number] , [number] ) ) , ) [EOL] [EOL] PRESERVE_CAPITALIZATION = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]],typing.Tuple[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.intbuiltins.bool$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] from . windows_console import COLORS [comment] [EOL] [EOL] [EOL] def fg ( code ) : [EOL] return ( code , ) [EOL] [EOL] [EOL] def bg ( code ) : [EOL] return ( code + [number] , ) [EOL] [EOL] [EOL] CODES = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Optional , Tuple [EOL] import typing [EOL] COLORS = { [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : None , [string] : None , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : None , [string] : ( [number] , [number] , [number] ) , [string] : None , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import impall [EOL] [EOL] [EOL] class ImpAllTest ( impall . ImpAllTest ) : [EOL] WARNINGS_ACTION = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from . print_mocker import print_mocker [EOL] from nc . __main__ import main [EOL] from unittest import mock , TestCase [EOL] [EOL] [EOL] class TestMain ( TestCase ) : [EOL] def _run ( self , * args , ** kwds ) : [EOL] with print_mocker ( ) as results : [EOL] return main ( list ( args ) , ** kwds ) , results [EOL] [EOL] def main ( self , expected , * args , color_count = [number] , ** kwds ) : [EOL] returncode , results = self . _run ( * args , color_count = color_count , ** kwds ) [EOL] actual = results [ : [number] ] [EOL] if expected != actual : [EOL] print ( * map ( repr , actual ) , sep = [string] ) [EOL] assert actual == expected [EOL] return returncode [EOL] [EOL] def test_color ( self ) : [EOL] expected = [ [string] , [string] ] [EOL] self . main ( expected , [string] , [string] , [string] , color_count = [number] ) [EOL] [EOL] def test_all_unique ( self ) : [EOL] _ , results = self . _run ( [string] ) [EOL] assert len ( results ) > [number] [EOL] assert len ( results ) == len ( set ( results ) ) [EOL] [EOL] def test_dupes_in_all ( self ) : [EOL] _ , results = self . _run ( [string] ) [EOL] assert len ( results ) > [number] [EOL] [EOL] @ mock . patch ( [string] , return_value = None ) def test_all8 ( self , sleep ) : [EOL] expected = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] self . main ( expected , color_count = [number] ) [EOL] [EOL] maxDiff = [number] [EOL] [EOL] @ mock . patch ( [string] , return_value = None ) def test_terminal ( self , sleep ) : [EOL] expected = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] self . main ( expected , [string] , [string] , [string] ) [EOL] [EOL] def test_errors ( self ) : [EOL] expected = [ [string] , [string] , ] [EOL] result = self . main ( expected , [string] , [string] , [string] ) [EOL] assert result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List , Any [EOL] import io [EOL] import typing [EOL] from unittest import mock [EOL] import contextlib [EOL] import io [EOL] [EOL] [EOL] @ contextlib . contextmanager def print_mocker ( ) : [EOL] results = [ ] [EOL] [EOL] with mock . patch ( [string] ) as mp : [EOL] yield results [EOL] [EOL] sio = io . StringIO ( ) [EOL] for args , kwargs in mp . call_args_list : [EOL] kwargs . pop ( [string] , None ) [EOL] print ( * args , ** kwargs , file = sio ) [EOL] [EOL] results [ : ] = sio . getvalue ( ) . splitlines ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import functools [EOL] from nc import terminal [EOL] from unittest import mock , TestCase [EOL] import functools [EOL] import nc [EOL] [EOL] [EOL] @ mock . patch ( [string] , return_value = None ) class TerminalTest ( TestCase ) : [EOL] def test_context256 ( self , sleep ) : [EOL] context = terminal . Context ( [number] ) [EOL] assert context [EOL] [EOL] def test_color_context ( self , sleep ) : [EOL] actual = [ ] [EOL] [EOL] def pr ( * args , ** kwds ) : [EOL] actual . extend ( args ) [EOL] [EOL] context = functools . partial ( terminal . context , count = [number] , print = pr ) [EOL] [EOL] with context ( ) : [EOL] pr ( [string] ) [EOL] with context ( fg = nc . red ) : [EOL] pr ( [string] ) [EOL] with context ( bg = nc . yellow , print = pr , count = [number] ) : [EOL] pr ( [string] ) [EOL] with context ( fg = nc . cyan , bg = nc . green ) : [EOL] pr ( [string] ) [EOL] [EOL] expected = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] self . assertEqual ( [string] . join ( expected ) , [string] . join ( actual ) ) [EOL] [EOL] def test_color_context_256 ( self , sleep ) : [EOL] context = terminal . Context ( [number] ) [EOL] assert len ( context ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
import nc [EOL] import unittest [EOL] [EOL] [EOL] class ModuleTest ( unittest . TestCase ) : [EOL] def test_basics ( self ) : [EOL] assert nc ( [string] ) == nc . red [EOL] assert nc [ [string] ] == nc . red [EOL] assert [string] in nc [EOL] assert len ( nc ) == [number] [EOL] [EOL] for i in nc : [EOL] assert i == [string] [EOL] break [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0