from typing import Type [EOL] import typing [EOL] import app [EOL] from django . conf import settings [EOL] from storages . backends . s3boto3 import S3Boto3Storage [EOL] [EOL] [EOL] class StaticStorage ( S3Boto3Storage ) : [EOL] location = settings . STATICFILES_LOCATION [EOL] [EOL] [EOL] class MediaStorage ( S3Boto3Storage ) : [EOL] location = settings . MEDIAFILES_LOCATION [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.custom_storages.StaticStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.custom_storages.MediaStorage]$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from api import views [EOL] [EOL] app_name = [string] [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , views . CompaniesViewSet , basename = [string] ) [EOL] router . register ( [string] , views . FinanceViewSet , basename = [string] ) [EOL] router . register ( [string] , views . ITViewSet , basename = [string] ) [EOL] router . register ( [string] , views . EducationViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , views . FinanceInsightsViewSet . as_view ( ) , name = [string] ) , path ( [string] , views . ITInsightsViewSet . as_view ( ) , name = [string] ) , path ( [string] , views . EducationInsightsViewSet . as_view ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Tuple , Type , Any [EOL] import typing [EOL] import io [EOL] import app [EOL] import json [EOL] import os [EOL] [EOL] from django . conf import settings [EOL] from rest_framework import viewsets , status , filters [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from api import serializers [EOL] from core . models import Company [EOL] from core . permissions import IsAdminOrReadOnly [EOL] [EOL] finance_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] it_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] education_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] [EOL] [EOL] [EOL] class CompaniesViewSet ( viewsets . ModelViewSet ) : [EOL] permission_classes = ( IsAdminOrReadOnly , ) [EOL] serializer_class = serializers . CompanySerializer [EOL] filter_backends = ( filters . SearchFilter , filters . OrderingFilter ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering_fields = [string] [EOL] queryset = Company . objects . all ( ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . queryset [EOL] return queryset . order_by ( [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class FinanceViewSet ( viewsets . ModelViewSet ) : [EOL] permission_classes = ( IsAdminOrReadOnly , ) [EOL] serializer_class = serializers . CompanySerializer [EOL] filter_backends = ( filters . SearchFilter , filters . OrderingFilter ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering_fields = [string] [EOL] queryset = Company . objects . filter ( group = [string] ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . queryset [EOL] return queryset . order_by ( [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class ITViewSet ( viewsets . ModelViewSet ) : [EOL] permission_classes = ( IsAdminOrReadOnly , ) [EOL] serializer_class = serializers . CompanySerializer [EOL] filter_backends = ( filters . SearchFilter , filters . OrderingFilter ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering_fields = [string] [EOL] queryset = Company . objects . filter ( group = [string] ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . queryset [EOL] return queryset . order_by ( [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class EducationViewSet ( viewsets . ModelViewSet ) : [EOL] permission_classes = ( IsAdminOrReadOnly , ) [EOL] serializer_class = serializers . CompanySerializer [EOL] filter_backends = ( filters . SearchFilter , filters . OrderingFilter ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering_fields = [string] [EOL] queryset = Company . objects . filter ( group = [string] ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . queryset [EOL] return queryset . order_by ( [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class FinanceInsightsViewSet ( APIView ) : [EOL] [EOL] def get ( self , request ) : [EOL] sector_file = open ( finance_sector ) [EOL] sector_str = sector_file . read ( ) [EOL] sector_data = json . loads ( sector_str ) [EOL] return Response ( sector_data ) [EOL] [EOL] [EOL] class ITInsightsViewSet ( APIView ) : [EOL] [EOL] def get ( self , request ) : [EOL] sector_file = open ( it_sector ) [EOL] sector_str = sector_file . read ( ) [EOL] sector_data = json . loads ( sector_str ) [EOL] return Response ( sector_data ) [EOL] [EOL] [EOL] class EducationInsightsViewSet ( APIView ) : [EOL] [EOL] def get ( self , request ) : [EOL] sector_file = open ( education_sector ) [EOL] sector_str = sector_file . read ( ) [EOL] sector_data = json . loads ( sector_str ) [EOL] return Response ( sector_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.api.views.EducationViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import app [EOL] from rest_framework import serializers [EOL] [EOL] from core . models import Company [EOL] [EOL] [EOL] class CompanySerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Company [EOL] fields = [string] [EOL] read_only_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.api.serializers.CompanySerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient [EOL] [EOL] from api . serializers import CompanySerializer [EOL] from core . models import Company [EOL] [EOL] COMPANIES_URL = reverse ( [string] ) [EOL] FINANCE_URL = reverse ( [string] ) [EOL] IT_URL = reverse ( [string] ) [EOL] EDUCATION_URL = reverse ( [string] ) [EOL] FINANCIAL_INSIGHTS_URL = reverse ( [string] ) [EOL] IT_INSIGHTS_URL = reverse ( [string] ) [EOL] EDUCATION_INSIGHTS_URL = reverse ( [string] ) [EOL] [EOL] [EOL] [EOL] class CompaniesApiTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_retrieve_companies_list ( self ) : [EOL] [docstring] [EOL] Company . objects . create ( ) [EOL] Company . objects . create ( name = [string] , companyType = [string] , employeeCountRange = [string] , foundedYear = [string] , industries = [string] , numFollowers = [string] , specialities = [string] , squareLogoUrl = [string] , websiteUrl = [string] , group = [string] , ) [EOL] [EOL] companies = Company . objects . all ( ) [EOL] serializer = CompanySerializer ( companies , many = True ) [EOL] response = self . client . get ( COMPANIES_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data [ [string] ] , [number] ) [EOL] [EOL] def test_create_company_successful ( self ) : [EOL] [docstring] [EOL] self . superuser = get_user_model ( ) . objects . create_superuser ( [string] , [string] ) [EOL] self . client . force_authenticate ( self . superuser ) [EOL] payload = { [string] : [string] } [EOL] self . client . post ( COMPANIES_URL , payload ) [EOL] [EOL] exist = Company . objects . filter ( name = payload [ [string] ] , ) . exists ( ) [EOL] self . assertTrue ( exist ) [EOL] [EOL] [EOL] class FinanceViewTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_finance_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( FINANCE_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_create_financial_company_successful ( self ) : [EOL] [docstring] [EOL] [EOL] self . superuser = get_user_model ( ) . objects . create_superuser ( [string] , [string] ) [EOL] self . client . force_authenticate ( self . superuser ) [EOL] payload = { [string] : [string] } [EOL] self . client . post ( FINANCE_URL , payload ) [EOL] [EOL] exist = Company . objects . filter ( name = payload [ [string] ] , ) . exists ( ) [EOL] self . assertTrue ( exist ) [EOL] [EOL] [EOL] class ITViewTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_it_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( IT_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_create_it_company_successful ( self ) : [EOL] [docstring] [EOL] [EOL] self . superuser = get_user_model ( ) . objects . create_superuser ( [string] , [string] ) [EOL] self . client . force_authenticate ( self . superuser ) [EOL] payload = { [string] : [string] } [EOL] self . client . post ( IT_URL , payload ) [EOL] [EOL] exist = Company . objects . filter ( name = payload [ [string] ] , ) . exists ( ) [EOL] self . assertTrue ( exist ) [EOL] [EOL] [EOL] class EducationViewTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_it_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( EDUCATION_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_create_education_company_successful ( self ) : [EOL] [docstring] [EOL] [EOL] self . superuser = get_user_model ( ) . objects . create_superuser ( [string] , [string] ) [EOL] self . client . force_authenticate ( self . superuser ) [EOL] payload = { [string] : [string] } [EOL] self . client . post ( EDUCATION_URL , payload ) [EOL] [EOL] exist = Company . objects . filter ( name = payload [ [string] ] , ) . exists ( ) [EOL] self . assertTrue ( exist ) [EOL] [EOL] [EOL] class FinancialInsightsView ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_financial_insights_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( FINANCIAL_INSIGHTS_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data [ [string] ] , [ [string] , [string] ] ) [EOL] [EOL] [EOL] class ITInsightsView ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_it_insights_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( IT_INSIGHTS_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data [ [string] ] , [ [string] , [string] ] ) [EOL] [EOL] [EOL] class EducationInsightsView ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_accessing_education_insights_view ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( EDUCATION_INSIGHTS_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data [ [string] ] , [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] from api . apps import ApiConfig [EOL] [EOL] [EOL] class ApiAppTests ( TestCase ) : [EOL] [EOL] def test_app_name ( self ) : [EOL] [EOL] self . assertEqual ( ApiConfig . name , [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
default_app_config = [string]	$builtins.str$ 0 0
from typing import Type , Any [EOL] import typing [EOL] import app [EOL] from django . contrib . auth . models import AbstractBaseUser , BaseUserManager , PermissionsMixin [EOL] from django . db import models [EOL] [EOL] from core . utils import content_file_name [EOL] [EOL] [EOL] [comment] [EOL] class UserManager ( BaseUserManager ) : [EOL] [EOL] def create_user ( self , email , password = None , ** extra_fields ) : [EOL] [docstring] [EOL] if not email : [EOL] raise ValueError ( [string] ) [EOL] if len ( str ( password ) ) < [number] : [EOL] raise ValueError ( [string] ) [EOL] user = self . model ( email = self . normalize_email ( email ) , ** extra_fields ) [EOL] user . set_password ( password ) [EOL] user . save ( using = self . _db ) [EOL] return user [EOL] [EOL] def create_superuser ( self , email , password ) : [EOL] user = self . create_user ( email , password ) [EOL] user . name = [string] [EOL] user . is_staff = True [EOL] user . is_superuser = True [EOL] user . save ( using = self . _db ) [EOL] [EOL] return user [EOL] [EOL] [EOL] [comment] [EOL] class User ( AbstractBaseUser , PermissionsMixin ) : [EOL] [docstring] [EOL] email = models . EmailField ( max_length = [number] , unique = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] is_active = models . BooleanField ( default = True ) [EOL] is_staff = models . BooleanField ( default = False ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( User , self ) . save ( * args , ** kwargs ) [EOL] MyProfile . objects . get_or_create ( owner = self ) [EOL] [EOL] [EOL] class MyProfile ( models . Model ) : [EOL] [docstring] [EOL] position = models . CharField ( max_length = [number] , default = [string] , blank = True ) [EOL] image = models . ImageField ( upload_to = content_file_name , default = [string] ) [EOL] owner = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] [EOL] objects = models . Manager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . owner ) + [string] [EOL] [EOL] [EOL] class Company ( models . Model ) : [EOL] [docstring] [EOL] name = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] companyType = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] employeeCountRange = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] foundedYear = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] industries = models . TextField ( max_length = [number] , default = [string] , null = True ) [EOL] numFollowers = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] specialities = models . TextField ( max_length = [number] , default = [string] , null = True ) [EOL] squareLogoUrl = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] websiteUrl = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] group = models . CharField ( max_length = [number] , default = [string] , null = True ) [EOL] [EOL] objects = models . Manager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $app.core.models.UserManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.MyProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.MyProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.MyProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.MyProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . permissions import BasePermission , SAFE_METHODS [EOL] [EOL] [EOL] class IsAdminOrReadOnly ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] if request . method in SAFE_METHODS : [EOL] return True [EOL] [EOL] return request . user and request . user . is_superuser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . views . generic . base import TemplateView [EOL] from django . conf import settings [EOL] [EOL] class IndexTemplateView ( TemplateView ) : [EOL] def get_template_names ( self ) : [EOL] if settings . DEBUG : [EOL] template_name = [string] [EOL] else : [EOL] template_name = [string] [EOL] return template_name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] def content_file_name ( instance , filename ) : [EOL] ext = filename . split ( [string] ) [ - [number] ] [EOL] filename = [string] % ( instance . owner . id , [string] , ext ) [EOL] return os . path . join ( [string] , filename )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient [EOL] [EOL] from core . permissions import IsAdminOrReadOnly [EOL] [EOL] COMPANIES_URL = reverse ( [string] ) [EOL] [EOL] [EOL] class TestIsAdminOrReadOnly ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . user_superuser = get_user_model ( ) . objects . create_superuser ( email = [string] , password = [string] , ) [EOL] self . permission = IsAdminOrReadOnly ( ) [EOL] [EOL] def test_superuser_has_no_admin_or_read_only_permission ( self ) : [EOL] admin_permission = self . user_superuser . has_perm ( IsAdminOrReadOnly ) [EOL] self . assertTrue ( admin_permission ) [EOL] [EOL] def test_user_has_no_admin_or_read_only_permission ( self ) : [EOL] admin_permission = self . user . has_perm ( IsAdminOrReadOnly ) [EOL] self . assertFalse ( admin_permission ) [EOL] [EOL] def test_user_cant_access_unsafe_methods ( self ) : [EOL] payload = { } [EOL] self . client = APIClient ( ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] response = self . client . post ( COMPANIES_URL , payload ) [EOL] self . assertEqual ( response . status_code , status . HTTP_403_FORBIDDEN ) [EOL] [EOL] def test_user_can_access_safe_methods ( self ) : [EOL] payload = { } [EOL] self . client = APIClient ( ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] response = self . client . get ( COMPANIES_URL , payload ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_superuser_can_access_unsafe_methods ( self ) : [EOL] payload = { } [EOL] self . client = APIClient ( ) [EOL] self . client . force_authenticate ( user = self . user_superuser ) [EOL] response = self . client . post ( COMPANIES_URL , payload ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase , Client [EOL] from django . test . utils import override_settings [EOL] from core . views import IndexTemplateView [EOL] [EOL] class IndexViewTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] [EOL] @ override_settings ( DEBUG = True ) def test_indexdev_template_user ( self ) : [EOL] [docstring] [EOL] [EOL] response = IndexTemplateView . get_template_names ( self ) [EOL] self . assertEqual ( response , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase , Client [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class AdminSiteTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . client = Client ( ) [EOL] self . admin_user = get_user_model ( ) . objects . create_superuser ( email = [string] , password = [string] ) [EOL] self . client . force_login ( self . admin_user ) [comment] [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . admin_user . delete ( ) [EOL] self . user . delete ( ) [EOL] [EOL] def test_users_listed ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [comment] [EOL] response = self . client . get ( url ) [EOL] [EOL] self . assertContains ( response , self . user . name ) [EOL] self . assertContains ( response , self . user . email ) [EOL] [EOL] def test_user_change_page ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] , args = [ self . user . id ] ) [comment] [EOL] response = self . client . get ( url ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_create_user_page ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] [EOL] from core . models import MyProfile [EOL] from core . utils import content_file_name [EOL] [EOL] [EOL] class ContentFileTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . my_profile = MyProfile . objects . filter ( owner__email = [string] ) . first ( ) [EOL] self . filename = content_file_name ( self . my_profile , [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] self . my_profile . delete ( ) [EOL] [EOL] def test_content_file_name ( self ) : [EOL] self . assertEqual ( str ( self . filename ) [ [number] : ] , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] from core . apps import CoreConfig [EOL] [EOL] [EOL] class CoreConfigAppTests ( TestCase ) : [EOL] [EOL] def test_app_name ( self ) : [EOL] self . assertEqual ( CoreConfig . name , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] [EOL] from core . models import MyProfile , Company [EOL] [EOL] [EOL] class UserModelTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] self . user_1 = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . user_superuser = get_user_model ( ) . objects . create_superuser ( email = [string] , password = [string] , ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] self . user_1 . delete ( ) [EOL] self . user_superuser . delete ( ) [EOL] [EOL] def test_email ( self ) : [EOL] self . assertEqual ( self . user . email , [string] ) [EOL] [EOL] def test_new_user_email_normalized ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( self . user_1 . email , [string] ) [EOL] [EOL] def test_new_user_empty_email ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( ValueError ) : [EOL] get_user_model ( ) . objects . create_user ( None , [string] ) [EOL] [EOL] def test_name ( self ) : [EOL] self . assertEqual ( self . user . name , [string] ) [EOL] [EOL] def test_get_username ( self ) : [EOL] self . assertEqual ( self . user . get_username ( ) , [string] ) [EOL] [EOL] def test_superuser_name ( self ) : [EOL] self . assertEqual ( self . user_superuser . name , [string] ) [EOL] [EOL] def test_password ( self ) : [EOL] self . assertTrue ( self . user . check_password ( [string] ) ) [EOL] [EOL] def test_new_user_invalid_password ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( ValueError ) : [EOL] get_user_model ( ) . objects . create_user ( None , [string] ) [EOL] [EOL] def test_new_user_empty_password ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( ValueError ) : [EOL] get_user_model ( ) . objects . create_user ( [string] , [string] ) [EOL] [EOL] def test_new_user_has_usable_password ( self ) : [EOL] self . assertTrue ( self . user . has_usable_password ( ) ) [EOL] [EOL] def test_last_login_default ( self ) : [EOL] self . assertIsNone ( self . user . last_login ) [EOL] [EOL] def test_is_active ( self ) : [EOL] self . assertTrue ( self . user . is_active ) [EOL] [EOL] def test_str ( self ) : [EOL] self . assertEqual ( str ( self . user ) , [string] ) [EOL] [EOL] def test_id ( self ) : [EOL] self . assertEqual ( self . user . id , [number] ) [EOL] [EOL] def test_is_staff ( self ) : [EOL] self . assertFalse ( self . user . is_staff ) [EOL] [EOL] def test_superuser_is_staff ( self ) : [EOL] self . assertTrue ( self . user_superuser . is_staff ) [EOL] [EOL] def test_is_superuser ( self ) : [EOL] self . assertFalse ( self . user . is_superuser ) [EOL] [EOL] def test_superuser_is_superuser ( self ) : [EOL] self . assertTrue ( self . user_superuser . is_superuser ) [EOL] [EOL] def test_is_anonymous ( self ) : [EOL] self . assertFalse ( self . user . is_anonymous ) [EOL] [EOL] def test_hash ( self ) : [EOL] self . assertEqual ( hash ( self . user ) , hash ( self . user . id ) ) [EOL] [EOL] def test_user_permissions ( self ) : [EOL] self . assertFalse ( self . user . user_permissions . exists ( ) ) [EOL] [EOL] def test_get_group_permissions ( self ) : [EOL] self . assertEqual ( len ( self . user . get_group_permissions ( ) ) , [number] ) [EOL] [EOL] def test_get_all_permissions ( self ) : [EOL] self . assertEqual ( len ( self . user . get_all_permissions ( ) ) , [number] ) [EOL] [EOL] def test_has_perm ( self ) : [EOL] self . assertFalse ( self . user . has_perm ( [string] ) ) [EOL] [EOL] def test_has_perms ( self ) : [EOL] self . assertFalse ( self . user . has_perms ( [ [string] ] ) ) [EOL] [EOL] def test_has_module_perms ( self ) : [EOL] self . assertFalse ( self . user . has_module_perms ( [string] ) ) [EOL] [EOL] [EOL] class MyProfileModelTest ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] self . user_1 = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] self . my_profile = MyProfile . objects . filter ( owner__email = [string] ) . first ( ) [EOL] self . my_profile_1 = MyProfile . objects . filter ( owner__email = [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] self . user_1 . delete ( ) [EOL] self . my_profile . delete ( ) [EOL] self . my_profile_1 . delete ( ) [EOL] [EOL] def test_my_profile_str ( self ) : [EOL] self . assertEqual ( str ( self . my_profile ) , [string] ) [EOL] [EOL] def test_my_profile_created ( self ) : [EOL] self . assertTrue ( self . my_profile_1 . exists ( ) ) [EOL] [EOL] def test_single_profile_created ( self ) : [EOL] self . assertEqual ( len ( MyProfile . objects . filter ( owner__email = [string] ) ) , [number] ) [EOL] [EOL] def test_my_profile_position ( self ) : [EOL] self . assertEqual ( self . my_profile . position , [string] ) [EOL] [EOL] def test_my_profile_image ( self ) : [EOL] self . assertEqual ( str ( self . my_profile . image ) [ [number] : ] , [string] ) [EOL] [EOL] def test_my_profile_owner ( self ) : [EOL] self . assertEqual ( str ( self . my_profile . owner ) , [string] ) [EOL] [EOL] def test_my_profile_verbose_name ( self ) : [EOL] self . assertEqual ( self . my_profile . _meta . verbose_name , [string] ) [EOL] [EOL] def test_my_profile_verbose_name_plural ( self ) : [EOL] self . assertEqual ( self . my_profile . _meta . verbose_name_plural , [string] ) [EOL] [EOL] [EOL] class CompanyModelTest ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . company = Company . objects . create ( name = [string] , companyType = [string] , employeeCountRange = [string] , foundedYear = [string] , industries = [string] , numFollowers = [string] , specialities = [string] , squareLogoUrl = [string] , websiteUrl = [string] , group = [string] , ) [EOL] self . empty_company = Company . objects . create ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . company . delete ( ) [EOL] [EOL] def test_creating_company ( self ) : [EOL] self . assertTrue ( self . company ) [EOL] [EOL] def test_creating_empty_company ( self ) : [EOL] self . assertTrue ( self . empty_company ) [EOL] [EOL] def test_company_str ( self ) : [EOL] self . assertEqual ( str ( self . company ) , [string] ) [EOL] [EOL] def test_empty_company_str ( self ) : [EOL] self . assertEqual ( str ( self . empty_company ) , [string] ) [EOL] [EOL] def test_my_profile_verbose_name ( self ) : [EOL] self . assertEqual ( self . company . _meta . verbose_name_plural , [string] ) [EOL]	
	0
	0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import connections [EOL] from django . db . utils import OperationalError [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [docstring] [EOL] [EOL] def handle ( self , * args , ** kwargs ) : [EOL] self . stdout . write ( [string] ) [comment] [EOL] db_conn = None [EOL] while not db_conn : [EOL] try : [EOL] db_conn = connections [ [string] ] [EOL] except OperationalError : [EOL] self . stdout . write ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , List , Any [EOL] import typing [EOL] import app [EOL] from django import forms [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . contrib . auth . models import User [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from core . models import User , MyProfile [EOL] [EOL] [EOL] class UserLoginForm ( forms . Form ) : [EOL] [docstring] [EOL] email = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] [EOL] class UserRegistrationForm ( UserCreationForm ) : [EOL] password1 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] password2 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def clean_email ( self ) : [EOL] email = self . cleaned_data . get ( [string] ) [EOL] if User . objects . filter ( email = email ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return email [EOL] [EOL] def clean_password2 ( self ) : [EOL] password1 = self . cleaned_data . get ( [string] ) [EOL] password2 = self . cleaned_data . get ( [string] ) [EOL] [EOL] if password1 != password2 : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] return password2 [EOL] [EOL] [EOL] class MyProfileForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = MyProfile [EOL] fields = [ [string] , [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.forms.UserLoginForm]$ 0 0 0 0 0 0 0 $typing.Type[app.user.forms.UserLoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.forms.UserRegistrationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.forms.UserRegistrationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.forms.MyProfileForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.forms.MyProfileForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import app [EOL] from django . contrib import messages , auth [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . urls import reverse [EOL] [EOL] from core import models [EOL] from . forms import UserLoginForm , UserRegistrationForm , MyProfileForm [EOL] [EOL] [EOL] def login ( request ) : [EOL] [docstring] [EOL] if request . method == [string] : [EOL] login_form = UserLoginForm ( request . POST ) [EOL] if login_form . is_valid ( ) : [EOL] user = auth . authenticate ( email = request . POST [ [string] ] , password = request . POST [ [string] ] ) [EOL] [EOL] if user : [EOL] auth . login ( request , user ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] else : [EOL] login_form = UserLoginForm ( ) [EOL] [EOL] args = { [string] : login_form , [string] : request . GET . get ( [string] , [string] ) } [EOL] return render ( request , [string] , args ) [EOL] [EOL] [EOL] def register ( request ) : [EOL] [docstring] [EOL] if request . method == [string] : [EOL] user_form = UserRegistrationForm ( request . POST ) [EOL] if user_form . is_valid ( ) : [EOL] user_form . save ( ) [EOL] user = auth . authenticate ( email = request . POST . get ( [string] ) , password = request . POST . get ( [string] ) ) [EOL] [EOL] if user : [EOL] auth . login ( request , user ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] ) [EOL] [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] else : [EOL] user_form = UserRegistrationForm ( ) [EOL] [EOL] args = { [string] : user_form } [EOL] return render ( request , [string] , args ) [EOL] [EOL] [EOL] @ login_required def logout ( request ) : [EOL] auth . logout ( request ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ login_required def profile ( request ) : [EOL] my_profile = get_object_or_404 ( models . MyProfile , owner = request . user ) [EOL] [EOL] context = { [string] : request . user , [string] : my_profile } [EOL] [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] @ login_required def edit_profile ( request ) : [EOL] my_profile = get_object_or_404 ( models . MyProfile , owner = request . user ) [EOL] my_details_form = MyProfileForm ( request . POST , request . FILES , instance = my_profile ) [EOL] if request . method == [string] : [EOL] if my_details_form . is_valid ( ) : [EOL] my_profile . save ( ) [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] return render ( request , [string] , { [string] : my_profile , [string] : my_details_form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . contrib . auth . views import PasswordResetView , PasswordResetDoneView , PasswordResetConfirmView , PasswordResetCompleteView [EOL] from django . urls import path , reverse_lazy [EOL] [EOL] from user import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . login , name = [string] ) , path ( [string] , views . logout , name = [string] ) , path ( [string] , views . register , name = [string] ) , path ( [string] , views . profile , name = [string] ) , path ( [string] , views . edit_profile , name = [string] ) , path ( [string] , PasswordResetView . as_view ( success_url = reverse_lazy ( [string] ) ) , name = [string] ) , path ( [string] , PasswordResetDoneView . as_view ( ) , name = [string] ) , path ( [string] , PasswordResetConfirmView . as_view ( ) , name = [string] ) , path ( [string] , PasswordResetCompleteView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Dict , Type , Any [EOL] import typing [EOL] import app [EOL] from django . contrib . auth import get_user_model , authenticate [EOL] [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = get_user_model ( ) [EOL] fields = ( [string] , [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : True , [string] : [number] } } [EOL] [EOL] def create ( self , validated_data ) : [EOL] [docstring] [EOL] return get_user_model ( ) . objects . create_user ( ** validated_data ) [EOL] [EOL] [comment] [EOL] def update ( self , instance , validated_data ) : [EOL] [docstring] [EOL] [comment] [EOL] password = validated_data . pop ( [string] , None ) [EOL] user = super ( ) . update ( instance , validated_data ) [comment] [EOL] [EOL] if password : [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] [EOL] class AuthTokenSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] email = serializers . CharField ( ) [EOL] password = serializers . CharField ( style = { [string] : [string] } , trim_whitespace = False ) [EOL] [EOL] [comment] [EOL] def validate ( self , attrs ) : [EOL] [docstring] [EOL] email = attrs . get ( [string] ) [EOL] password = attrs . get ( [string] ) [EOL] [EOL] [comment] [EOL] user = authenticate ( request = self . context . get ( [string] ) , username = email , password = password ) [EOL] if not user : [EOL] message = [string] [EOL] raise serializers . ValidationError ( message , code = [string] ) [EOL] [EOL] attrs [ [string] ] = user [EOL] return attrs [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.api.serializers.UserSerializer.Meta]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.user.api.serializers.AuthTokenSerializer]$ 0 0 0 0 0 0 0 $typing.Type[app.user.api.serializers.AuthTokenSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import app [EOL] from rest_framework import generics , authentication , permissions , views [EOL] from rest_framework . authtoken . views import ObtainAuthToken [EOL] from rest_framework . response import Response [EOL] from rest_framework . settings import api_settings [EOL] from user . api . serializers import UserSerializer , AuthTokenSerializer [EOL] [EOL] from user . api . serializers import UserSerializer [EOL] [EOL] [EOL] class CreateUserView ( generics . CreateAPIView ) : [EOL] [docstring] [EOL] permission_classes = ( permissions . AllowAny , ) [EOL] serializer_class = UserSerializer [comment] [EOL] [EOL] [EOL] class CreateTokenView ( ObtainAuthToken ) : [EOL] [docstring] [EOL] serializer_class = AuthTokenSerializer [EOL] renderer_classes = api_settings . DEFAULT_RENDERER_CLASSES [EOL] [EOL] [EOL] class ManageUserView ( generics . RetrieveUpdateAPIView ) : [EOL] [docstring] [EOL] serializer_class = UserSerializer [EOL] authentication_classes = ( authentication . TokenAuthentication , authentication . SessionAuthentication ) [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] def get_object ( self ) : [EOL] [docstring] [EOL] return self . request . user [EOL] [EOL] [EOL] class CurrentUserApiView ( views . APIView ) : [EOL] [docstring] [EOL] authentication_classes = ( authentication . TokenAuthentication , authentication . SessionAuthentication ) [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] def get ( self , request ) : [EOL] serializer = UserSerializer ( request . user ) [EOL] return Response ( serializer . data )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] [EOL] from user . forms import UserLoginForm , UserRegistrationForm , MyProfileForm [EOL] [EOL] [EOL] class UserLoginFormTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] [EOL] def test_valid_form ( self ) : [EOL] [docstring] [EOL] form = UserLoginForm ( { [string] : [string] , [string] : [string] } ) [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] def test_email_missing ( self ) : [EOL] [docstring] [EOL] form = UserLoginForm ( { [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] def test_password_missing ( self ) : [EOL] [docstring] [EOL] form = UserLoginForm ( { [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] [EOL] class UserRegistrationFormTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] [EOL] def test_valid_form ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] def test_email_missing ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] def test_name_missing ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] def test_password1_missing ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] def test_password_mismatch ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] def test_unique_email ( self ) : [EOL] [docstring] [EOL] form = UserRegistrationForm ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ [string] ] ) [EOL] [EOL] [EOL] class MyProfileFormTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = get_user_model ( ) . objects . create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . user . delete ( ) [EOL] [EOL] def test_valid_form ( self ) : [EOL] [docstring] [EOL] form = MyProfileForm ( { [string] : [string] , [string] : [string] } ) [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] [EOL] def test_empty_fields_form ( self ) : [EOL] [docstring] [EOL] form = MyProfileForm ( { [string] : [string] , [string] : [string] } ) [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient [EOL] [EOL] from user . api . views import ManageUserView [EOL] [EOL] CREATE_USER_URL = reverse ( [string] ) [EOL] TOKEN_URL = reverse ( [string] ) [EOL] MY_PROFILE_URL = reverse ( [string] ) [EOL] CURRENT_USER_URL = reverse ( [string] ) [EOL] [EOL] [EOL] def create_user ( ** params ) : [EOL] return get_user_model ( ) . objects . create_user ( ** params ) [EOL] [EOL] [EOL] class PublicUserApiTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_create_valid_user_success ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] response = self . client . post ( CREATE_USER_URL , payload ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] user = get_user_model ( ) . objects . get ( ** response . data ) [EOL] self . assertTrue ( user . check_password ( payload [ [string] ] ) ) [EOL] self . assertNotIn ( [string] , response . data ) [EOL] [EOL] def test_user_exists ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] create_user ( ** payload ) [EOL] [EOL] response = self . client . post ( CREATE_USER_URL , payload ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_password_too_short ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] response = self . client . post ( CREATE_USER_URL , payload ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] user_exists = get_user_model ( ) . objects . filter ( email = payload [ [string] ] ) . exists ( ) [EOL] self . assertFalse ( user_exists ) [EOL] [EOL] def test_create_token_for_user ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] create_user ( ** payload ) [EOL] response = self . client . post ( TOKEN_URL , payload ) [EOL] self . assertIn ( [string] , response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_create_token_invalid_credentials ( self ) : [EOL] [docstring] [EOL] create_user ( email = [string] , password = [string] ) [EOL] payload = { [string] : [string] , [string] : [string] } [EOL] response = self . client . post ( TOKEN_URL , payload ) [EOL] [EOL] self . assertNotIn ( [string] , response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_create_token_no_user ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] response = self . client . post ( TOKEN_URL , payload ) [EOL] [EOL] self . assertNotIn ( [string] , response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_create_token_missing_field ( self ) : [EOL] [docstring] [EOL] response = self . client . post ( TOKEN_URL , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] self . assertNotIn ( [string] , response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_retrieve_user_unauthorized ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( MY_PROFILE_URL ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_401_UNAUTHORIZED ) [EOL] [EOL] [EOL] class PrivateUserApiTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = create_user ( email = [string] , password = [string] , name = [string] ) [EOL] self . client = APIClient ( ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] [EOL] def test_retrieve_profile_success ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( MY_PROFILE_URL ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data , { [string] : self . user . name , [string] : self . user . email } ) [EOL] [EOL] def test_get_object ( self ) : [EOL] [docstring] [EOL] view = ManageUserView ( ) [EOL] request = self . client . get ( MY_PROFILE_URL ) [EOL] request . user = self . user [EOL] view . request = request [EOL] [EOL] self . assertEqual ( view . get_object ( ) , self . user ) [EOL] [EOL] def test_post_my_profile_not_allowed ( self ) : [EOL] [docstring] [EOL] response = self . client . post ( MY_PROFILE_URL , { } ) [EOL] [EOL] self . assertEqual ( response . status_code , status . HTTP_405_METHOD_NOT_ALLOWED ) [EOL] [EOL] def test_update_user_profile ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] response = self . client . patch ( MY_PROFILE_URL , payload ) [EOL] [EOL] self . user . refresh_from_db ( ) [EOL] self . assertEqual ( self . user . name , payload [ [string] ] ) [EOL] self . assertTrue ( self . user . check_password ( payload [ [string] ] ) ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] [EOL] class CurrentUserViewTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = create_user ( email = [string] , password = [string] , name = [string] ) [EOL] self . client = APIClient ( ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] [EOL] def test_retrieve_current_user_success ( self ) : [EOL] [docstring] [EOL] [EOL] response = self . client . get ( CURRENT_USER_URL ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] from user . apps import UserConfig [EOL] [EOL] [EOL] class UserConfigAppTests ( TestCase ) : [EOL] [EOL] def test_app_name ( self ) : [EOL] [EOL] self . assertEqual ( UserConfig . name , [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . messages import get_messages [EOL] from django . test import Client [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] from core . models import MyProfile [EOL] [EOL] CREATE_USER_URL = reverse ( [string] ) [EOL] LOGIN_USER_URL = reverse ( [string] ) [EOL] LOGOUT_USER_URL = reverse ( [string] ) [EOL] MY_PROFILE_URL = reverse ( [string] ) [EOL] EDIT_PROFILE_URL = reverse ( [string] ) [EOL] [EOL] [EOL] def create_user ( ** params ) : [EOL] return get_user_model ( ) . objects . create_user ( ** params ) [EOL] [EOL] [EOL] class RegisterUserTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] [EOL] def test_get_register_page ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( CREATE_USER_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_create_valid_user_success ( self ) : [EOL] [docstring] [EOL] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] response = self . client . post ( CREATE_USER_URL , payload ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] user_exists = get_user_model ( ) . objects . filter ( email = payload [ [string] ] ) . exists ( ) [EOL] self . assertTrue ( user_exists ) [EOL] user_profile_exists = MyProfile . objects . filter ( owner__email = [string] ) . exists ( ) [EOL] self . assertTrue ( user_profile_exists ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] messages = list ( get_messages ( response . wsgi_request ) ) [EOL] self . assertEqual ( str ( messages [ [number] ] ) , [string] ) [EOL] [EOL] [EOL] class LoginUserTests ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] [EOL] def test_get_login_page ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( LOGIN_USER_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_login_valid_user_success ( self ) : [EOL] [docstring] [EOL] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] create_user ( ** payload ) [EOL] [EOL] response = self . client . post ( LOGIN_USER_URL , payload ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] messages = list ( get_messages ( response . wsgi_request ) ) [EOL] self . assertEqual ( str ( messages [ [number] ] ) , [string] ) [EOL] [EOL] def test_login_invalid_credentials_user ( self ) : [EOL] [docstring] [EOL] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] payload_invalid = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] create_user ( ** payload ) [EOL] response = self . client . post ( LOGIN_USER_URL , payload_invalid ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] messages = list ( get_messages ( response . wsgi_request ) ) [EOL] self . assertEqual ( str ( messages [ [number] ] ) , [string] ) [EOL] [EOL] def test_user_can_login ( self ) : [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] auth_user = create_user ( ** payload ) [EOL] self . client . login ( email = payload [ [string] ] , password = payload [ [string] ] ) [EOL] response = self . client . get ( [string] ) [EOL] [EOL] [EOL] class LogoutUserTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . client = Client ( ) [EOL] self . client . force_login ( self . user ) [EOL] [EOL] def test_logout_redirects ( self ) : [EOL] response = self . client . get ( LOGOUT_USER_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] messages = list ( get_messages ( response . wsgi_request ) ) [EOL] self . assertEqual ( str ( messages [ [number] ] ) , [string] ) [EOL] [EOL] [EOL] class UserProfileTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . client = Client ( ) [EOL] [EOL] def test_retrieve_user_profile ( self ) : [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( MY_PROFILE_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_retrieve_profile_unauthorized ( self ) : [EOL] response = self . client . get ( MY_PROFILE_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] [EOL] [EOL] class EditUserProfileTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = create_user ( email = [string] , password = [string] , name = [string] ) [EOL] [EOL] self . client = Client ( ) [EOL] self . my_profile = MyProfile . objects . filter ( owner__email = [string] ) [EOL] [EOL] def test_retrieving_edit_profile_page ( self ) : [EOL] [docstring] [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( EDIT_PROFILE_URL ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_edit_user_profile ( self ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , } [EOL] [EOL] self . assertTrue ( self . my_profile . exists ( ) ) [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . post ( EDIT_PROFILE_URL , payload ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from db_manager import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . db_upload , name = [string] ) , path ( [string] , views . sector_upload , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , List , Any [EOL] import typing [EOL] import _csv [EOL] import csv [EOL] import json [EOL] import os . path [EOL] import re [EOL] [EOL] import pandas as pd [EOL] from django . conf import settings [EOL] from sklearn . preprocessing import MultiLabelBinarizer [EOL] [EOL] from core . models import Company [EOL] [EOL] [comment] [EOL] [EOL] [EOL] companies_path = os . path . join ( settings . BASE_DIR , [string] ) [EOL] finance_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] it_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] education_sector = os . path . join ( settings . BASE_DIR , [string] ) [EOL] [EOL] [EOL] def database_upload ( ) : [EOL] [docstring] [EOL] companies = Company . objects . all ( ) [EOL] companies . delete ( ) [EOL] [EOL] if companies_path : [EOL] with open ( companies_path , encoding = [string] ) as f : [EOL] reader = csv . reader ( f ) [comment] [EOL] next ( reader , None ) [EOL] for row in reader : [EOL] try : [EOL] _ , created = Company . objects . get_or_create ( name = row [ [number] ] , companyType = row [ [number] ] , employeeCountRange = row [ [number] ] , foundedYear = row [ [number] ] , industries = row [ [number] ] , numFollowers = row [ [number] ] , specialities = row [ [number] ] , squareLogoUrl = row [ [number] ] , websiteUrl = row [ [number] ] , group = row [ [number] ] ) [EOL] except : [EOL] pass [EOL] else : [EOL] pass [EOL] [EOL] [EOL] def sector_insights ( sector ) : [EOL] [docstring] [EOL] [EOL] if sector == [string] : [EOL] sector_strings = [ [string] , [string] ] [EOL] [EOL] elif sector == [string] : [EOL] sector_strings = [ [string] , [string] ] [EOL] else : [EOL] sector_strings = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] [EOL] dataset = pd . DataFrame ( list ( Company . objects . filter ( group = sector ) . values ( ) ) ) [EOL] [EOL] [comment] [EOL] [EOL] count = len ( dataset ) [EOL] [EOL] [comment] [EOL] [EOL] oldest_10 = dataset . iloc [ : , [ [number] , [number] ] ] . sort_values ( by = [ [string] ] ) [ : [number] ] [EOL] oldest_10_dict = oldest_10 . to_dict ( orient = [string] ) [EOL] [EOL] [comment] [EOL] [EOL] clean_specialities = [ ] [EOL] for element in dataset [ [string] ] : [EOL] element = element . replace ( [string] , [string] ) [EOL] element = element . replace ( [string] , [string] ) [EOL] element = element . replace ( [string] , [string] ) [EOL] element = element . strip ( ) [EOL] clean_specialities . append ( element ) [EOL] [EOL] df_spec = pd . DataFrame ( ) [EOL] df_spec [ [string] ] = clean_specialities [EOL] [EOL] spec_list = [ ] [EOL] for element in df_spec [ [string] ] : [EOL] specs = element . split ( [string] ) [EOL] spec_list . append ( specs ) [EOL] [EOL] specs_area = pd . DataFrame ( ) [EOL] specs_area [ [string] ] = spec_list [EOL] [EOL] [comment] [EOL] [EOL] mlb = MultiLabelBinarizer ( ) [EOL] [EOL] new_array = mlb . fit_transform ( specs_area [ [string] ] ) [EOL] spec_classes = list ( mlb . classes_ ) [EOL] df_specs_transformed = pd . DataFrame ( data = new_array , columns = spec_classes ) [EOL] [EOL] spec_total = df_specs_transformed . sum ( axis = [number] ) . sort_values ( ascending = False ) [ [number] : [number] ] [comment] [EOL] spec_dict = spec_total . to_dict ( ) [EOL] [EOL] [comment] [EOL] [EOL] type_values = dataset [ [string] ] . value_counts ( ) [ : [number] ] [EOL] type_dict = type_values . to_dict ( ) [EOL] [EOL] [comment] [EOL] [EOL] e_count_values = dataset [ [string] ] . value_counts ( ) [EOL] e_count_dict = e_count_values . to_dict ( ) [EOL] [EOL] [comment] [EOL] [EOL] followers_values = dataset [ [string] ] . value_counts ( ) [EOL] followers_dict = followers_values . to_dict ( ) [EOL] [EOL] sector_dict = { [string] : count , [string] : oldest_10_dict , [string] : sector_strings , [string] : spec_dict , [string] : type_dict , [string] : e_count_dict , [string] : followers_dict } [EOL] [EOL] with open ( f' [string] { sector } [string] ' , [string] ) as file : [EOL] json . dump ( sector_dict , file ) [EOL] [EOL] [EOL] def sector_listing ( sector ) : [EOL] [docstring] [EOL] [EOL] if sector == [string] : [EOL] sector = [string] [EOL] sector_strings = [ [string] , [string] ] [EOL] elif sector == [string] : [EOL] sector = [string] [EOL] sector_strings = [ [string] , [string] ] [EOL] else : [EOL] sector = [string] [EOL] sector_strings = [ [string] , [string] ] [EOL] [EOL] sector_companies = Company . objects . filter ( group = sector ) . values ( ) [EOL] [EOL] [comment] [EOL] for element in sector_companies : [EOL] for key , val in element . items ( ) : [EOL] if key == [string] : [EOL] element [ key ] = re . sub ( [string] , [string] , val ) [EOL] if key == [string] : [EOL] element [ key ] = re . sub ( [string] , [string] , val ) [EOL] [EOL] sector_companies = sorted ( sector_companies , key = lambda k : k [ [string] ] ) [EOL] [EOL] count = len ( sector_companies ) [EOL] [EOL] companies_dict = { [string] : sector_companies , [string] : count , [string] : sector_strings } [EOL] [EOL] return companies_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DbManagerConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import redirect [EOL] [EOL] from db_manager . utils import database_upload , sector_insights [EOL] [EOL] [EOL] def db_upload ( request ) : [EOL] [docstring] [EOL] database_upload ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def sector_upload ( request ) : [EOL] [docstring] [EOL] sector_insights ( [string] ) [EOL] sector_insights ( [string] ) [EOL] sector_insights ( [string] ) [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] from core . models import Company [EOL] from db_manager . utils import database_upload [EOL] [EOL] [EOL] class DatabaseUploadTests ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . company = Company . objects . create ( name = [string] , companyType = [string] , employeeCountRange = [string] , foundedYear = [string] , industries = [string] , numFollowers = [string] , specialities = [string] , squareLogoUrl = [string] , websiteUrl = [string] , group = [string] , ) [EOL] self . empty_company = Company . objects . create ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . company . delete ( ) [EOL] self . empty_company . delete ( ) [EOL] [EOL] def test_function_deletes_previous_companies ( self ) : [EOL] [docstring] [EOL] database_upload ( ) [EOL] self . assertEqual ( len ( Company . objects . filter ( name = [string] ) ) , [number] ) [EOL] self . assertEqual ( len ( Company . objects . filter ( name = [string] ) ) , [number] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] from db_manager . apps import DbManagerConfig [EOL] [EOL] [EOL] class CoreConfigAppTests ( TestCase ) : [EOL] [EOL] def test_app_name ( self ) : [EOL] [EOL] self . assertEqual ( DbManagerConfig . name , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0