[docstring] [EOL] [EOL] [comment] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] def _read ( fn ) : [EOL] path = os . path . join ( os . path . dirname ( __file__ ) , fn ) [EOL] [EOL] return open ( path ) . read ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] if sys . version_info [ : [number] ] < ( [number] , [number] ) : [EOL] sys . exit ( [string] ) [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , platforms = [string] , long_description = _read ( [string] ) , package_dir = { [string] : [string] } , packages = [ [string] , [string] ] , include_package_data = True , install_requires = [ [string] , [string] , [string] , [string] , [string] , ] , entry_points = { [string] : [ [string] ] } , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] import sys [EOL] [EOL] [EOL] def pytest_configure ( config ) : [EOL] os . environ [ [string] ] = [string] . join ( sys . path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import click [EOL] import typing [EOL] import logging [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] import yaml [EOL] from click . testing import CliRunner [EOL] [EOL] from dothebackup import ui [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : { [string] : [number] } , [string] : { [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } , None , logging . NOTSET , { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } ) , ( { [string] : { [string] : [number] } , [string] : { [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } , [ [string] , [string] ] , logging . INFO , { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } ) , ( { [string] : { [string] : [number] } , [string] : { [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } , [ [string] , [string] ] , logging . DEBUG , { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } ) , ] ) @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] ) def test_main ( mock_run_commands , mock_check_if_already_running , mock_pidfile , config , args , expected_log_level , expected_cmds , tmpdir ) : [EOL] mock_check_if_already_running . return_value = True [EOL] [EOL] [comment] [EOL] config [ [string] ] [ [string] ] = tmpdir . mkdir ( [string] ) . strpath [EOL] [EOL] [comment] [EOL] config_file = tmpdir . join ( [string] ) [EOL] config_file . write ( yaml . dump ( config , default_flow_style = False ) ) [EOL] [EOL] runner = CliRunner ( ) [EOL] extras_list = [ config_file . strpath ] [EOL] if args : [EOL] extras_list = args + extras_list [EOL] print ( extras_list ) [EOL] result = runner . invoke ( ui . main , extras_list ) [EOL] [EOL] assert result . exit_code == [number] [EOL] assert mock_run_commands . call_count == [number] [EOL] [EOL] with open ( config_file . strpath , [string] ) as f : [EOL] loaded_conf = yaml . load ( f ) [EOL] log_dir = loaded_conf [ [string] ] [ [string] ] [EOL] log_keep = loaded_conf [ [string] ] [ [string] ] [EOL] [EOL] mock_run_commands . assert_called_with ( expected_cmds , log_dir = log_dir , log_keep = log_keep , test = False ) [EOL] [EOL] assert logging . getLogger ( ) . getEffectiveLevel ( ) == expected_log_level [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import os [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] def inode_list ( filelist ) : [EOL] [docstring] [EOL] inodes = [ ] [EOL] for f in filelist : [EOL] fd = os . open ( f , os . O_RDONLY ) [EOL] info = os . fstat ( fd ) [EOL] inodes . append ( info . st_ino ) [EOL] [EOL] return inodes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] import json [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from dothebackup . plugs import github [EOL] [EOL] [EOL] @ pytest . fixture def get_repos ( monkeypatch ) : [EOL] with open ( [string] ) as f : [EOL] repos = json . loads ( f . read ( ) ) [EOL] [EOL] monkeypatch . setattr ( [string] , lambda x : repos ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def git_executable ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] def test_main_not_cloned_yet ( plugins , get_repos ) : [EOL] config = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] expected = [ [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] assert plugins [ [string] ] ( config ) == expected [EOL] [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_get_repos ( mock_requests ) : [EOL] github . get_repos ( [string] ) [EOL] [EOL] mock_requests . get . assert_called_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Union , Dict [EOL] import typing [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from dothebackup import runner [EOL] [EOL] [EOL] def test_check_config_keys_abort ( capsys ) : [EOL] config = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } [EOL] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] runner . check_config_keys ( config , [ [string] , [string] ] ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] def test_check_plugin_abort ( capsys ) : [EOL] with pytest . raises ( SystemExit ) : [EOL] runner . check_plugin ( [string] ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) def test_check_if_already_running ( path_mock , sys_mock ) : [EOL] path_mock . return_value . exists . return_value = False [EOL] [EOL] assert runner . check_if_already_running ( ) is None [EOL] [EOL] sys_mock . assert_not_called ( ) [EOL] [EOL] [EOL] @ patch ( [string] ) def test_check_if_already_running_abort ( path_mock , capsys ) : [EOL] path_mock . return_value . exists . return_value = True [EOL] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] runner . check_if_already_running ( ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } , [string] ) ] ) def test_run_commands_test ( input , expected , capsys ) : [EOL] runner . run_commands ( input , test = True , log_dir = [string] , log_keep = [number] ) [EOL] [EOL] out , err = capsys . readouterr ( ) [EOL] [EOL] assert out == expected [EOL] [EOL] [EOL] def test_enabled_missing_in_builder ( capsys ) : [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] runner . builder ( { [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } , name = None ) [EOL] [EOL] out , err = capsys . readouterr ( ) [EOL] [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] @ patch ( [string] ) def test_enabled_missing_in_builder_exit_code ( mock_sys ) : [EOL] mock_sys . side_effect = SystemExit [EOL] [EOL] with pytest . raises ( SystemExit ) : [EOL] [EOL] runner . builder ( { [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } } , name = None ) [EOL] [EOL] mock_sys . assert_called_with ( [number] ) [EOL] [EOL] [EOL] def test_builder_name ( ) : [EOL] config = { [string] : { [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [string] : { [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [string] } } } [EOL] [EOL] expected = { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } [EOL] [EOL] assert runner . builder ( config , name = [string] ) == expected [EOL] [EOL] [EOL] def test_builder_name_name_not_found ( capsys ) : [EOL] config = { [string] : { [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [string] : { [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [string] } } } [EOL] [EOL] with pytest . raises ( SystemExit ) : [EOL] runner . builder ( config , name = [string] ) [EOL] [EOL] out , err = capsys . readouterr ( ) [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : { [string] : { [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [string] } } } , { } ) , ( { [string] : { [string] : { [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [string] } } } , { [string] : [ [ [string] , [string] , [string] , [string] , [string] ] ] } ) ] ) def test_builder_date ( input , expected , today_is_00 ) : [EOL] assert runner . builder ( input , name = None ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : { [string] : { [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [string] } } } , { } ) ] ) def test_builder_date_skipping ( input , expected , capsys , today_is_00 ) : [EOL] [docstring] [EOL] assert runner . builder ( input , name = None ) == expected [EOL] [EOL] [EOL] @ patch ( [string] ) def test_builder_not_enabled ( mock_log ) : [EOL] runner . builder ( { [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : False , [string] : [string] , [string] : [string] } } } , name = None ) [EOL] [EOL] mock_log . assert_called_with ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] from __future__ import absolute_import [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def mysqldump_executable ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def git_executable ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ] ) ] ) def test_main_nothing_there_yet ( input , expected , nothing_to_commit , plugins ) : [EOL] assert plugins [ [string] ] ( input ) == expected [EOL] [EOL] [EOL] def test_main_git_already_cloned_new_dump ( tmpdir , something_to_commit , plugins ) : [EOL] tmpdir . mkdir ( [string] ) [EOL] [EOL] input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : str ( tmpdir ) } [EOL] [EOL] expected = [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( str ( tmpdir ) ) ] , [ [string] , str ( tmpdir ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] assert plugins [ [string] ] ( input ) == expected [EOL] [EOL] [EOL] def test_main_git_already_cloned_nothing_new ( tmpdir , nothing_to_commit , plugins ) : [EOL] tmpdir . mkdir ( [string] ) [EOL] [EOL] input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : str ( tmpdir ) } [EOL] [EOL] expected = [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( str ( tmpdir ) ) ] , ] [EOL] [EOL] assert plugins [ [string] ] ( input ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from pathlib import Path [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from dothebackup import utils [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_absolutenormpath ( input , expected ) : [EOL] assert utils . absolutenormpath ( input ) == expected [EOL] [EOL] [EOL] def test_git_cloned_yet ( tmpdir ) : [EOL] assert utils . git_cloned_yet ( str ( tmpdir ) ) is False [EOL] [EOL] [comment] [EOL] tmpdir . mkdir ( [string] ) [EOL] [EOL] assert utils . git_cloned_yet ( str ( tmpdir ) ) is True [EOL] [EOL] [EOL] def test_git_something_to_commit ( something_to_commit ) : [EOL] assert utils . git_something_to_commit ( [string] ) is True [EOL] [EOL] [EOL] def test_git_nothing_to_commit ( nothing_to_commit ) : [EOL] assert utils . git_something_to_commit ( [string] ) is False [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ [number] , [number] , [number] ] , [number] ) , ( [ [number] , [number] , [number] , [number] , [number] ] , [number] ) ] ) def test_return_code ( input , expected ) : [EOL] assert utils . return_code ( input ) == expected [EOL] [EOL] [EOL] @ patch ( [string] ) def test_pidfile ( mock_path , tmpdir ) : [EOL] pidfile = tmpdir . join ( [string] ) [EOL] mock_path . return_value = Path ( pidfile . strpath ) [EOL] [EOL] with utils . pidfile ( ) : [EOL] assert pidfile . exists ( ) is True [EOL] [EOL] assert pidfile . exists ( ) is False [EOL] [EOL] [EOL] @ patch ( [string] ) def test_pidfile_finally ( mock_path , tmpdir ) : [EOL] pidfile = tmpdir . join ( [string] ) [EOL] mock_path . return_value = Path ( pidfile . strpath ) [EOL] [EOL] with pytest . raises ( SystemExit ) : [EOL] with utils . pidfile ( ) : [EOL] raise SystemExit [EOL] [EOL] assert pidfile . exists ( ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from dothebackup . plugins import load_plugins [EOL] [EOL] [EOL] @ pytest . fixture def plugins ( ) : [EOL] return load_plugins ( ) [EOL] [EOL] [EOL] @ pytest . fixture def rsync_found ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def rsync_not_found ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : None ) [EOL] [EOL] [EOL] @ pytest . yield_fixture def fake_data ( tmpdir ) : [EOL] source_dir = tmpdir . mkdir ( [string] ) [EOL] for i in range ( [number] ) : [EOL] p = source_dir . join ( [string] . format ( i ) ) [EOL] p . write ( [string] ) [EOL] [EOL] tmpdir . mkdir ( [string] ) [EOL] [EOL] yield tmpdir [EOL] [EOL] [EOL] @ pytest . fixture def today_is_00 ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda : [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def something_to_commit ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda path , shell : [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def nothing_to_commit ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda path , shell : [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def dot_git_exists ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : True ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def git_executable ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_main_not_cloned_yet ( source , plugins ) : [EOL] config = { [string] : [string] , [string] : source , [string] : [string] } [EOL] [EOL] assert plugins [ [string] ] ( config ) == [ [ [string] , [string] , source , [string] ] , [ [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_main_cloned ( source , dot_git_exists , plugins ) : [EOL] config = { [string] : [string] , [string] : source , [string] : [string] } [EOL] [EOL] assert plugins [ [string] ] ( config ) == [ [ [string] , [string] , [string] , [string] , [string] ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from dothebackup . logger import Logger [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] ] ) ] ) def test__old_logs ( logfiles , expected , tmpdir ) : [EOL] [comment] [EOL] for logfile in logfiles : [EOL] tmpdir . join ( logfile ) . write ( [string] ) [EOL] [EOL] logger = Logger ( str ( tmpdir . realpath ( ) ) , [string] , [number] ) [EOL] [EOL] assert logger . _old_logs ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ ] , [ ] ) , ( [ [string] ] , [ [string] ] ) , ( [ [string] , [string] , [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) , ( [ [string] ] , [ ] ) ] ) def test_rotate ( logfiles , expected , tmpdir ) : [EOL] for logfile in logfiles : [EOL] tmpdir . join ( logfile ) . write ( [string] ) [EOL] [EOL] logger = Logger ( str ( tmpdir . realpath ( ) ) , [string] , [number] ) [EOL] [EOL] logger . rotate ( ) [EOL] [EOL] logs = list ( reversed ( sorted ( os . listdir ( str ( tmpdir . realpath ( ) ) ) ) ) ) [EOL] [EOL] assert logs == expected [EOL] [EOL] [EOL] def test_logfile ( tmpdir ) : [EOL] log_dir = str ( tmpdir . join ( [string] ) . realpath ( ) ) [EOL] [EOL] logger = Logger ( log_dir , [string] , [number] ) [EOL] logger . create_log_dir ( ) [EOL] [EOL] with logger . logfile ( ) as logfile : [EOL] logfile . write ( [string] ) [EOL] [EOL] with open ( os . path . join ( log_dir , [string] ) ) as f : [EOL] [EOL] assert f . read ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from dothebackup . plugins import load_plugins [EOL] [EOL] once_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] once_missing_mode = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( once_missing_mode , [string] ) ] ) def test_required_keys ( input , expected , capsys , rsync_found , plugins ) : [EOL] with pytest . raises ( SystemExit ) : [EOL] plugins [ [string] ] ( input ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] assert out == expected [EOL] [EOL] [EOL] def test_required_executables ( rsync_not_found , capsys , plugins ) : [EOL] with pytest . raises ( SystemExit ) : [EOL] plugins [ [string] ] ( once_input ) [EOL] [EOL] out , _ = capsys . readouterr ( ) [EOL] [EOL] assert out == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] ) def test_load_plugins ( input ) : [EOL] assert input in load_plugins ( ) . keys ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Union , Dict [EOL] import typing [EOL] import os [EOL] import shutil [EOL] from unittest . mock import patch [EOL] [EOL] import pendulum [EOL] import pytest [EOL] import yaml [EOL] [EOL] import helper [EOL] from dothebackup import runner [EOL] [EOL] [comment] [EOL] [comment] [EOL] now = pendulum . utcnow ( ) [EOL] [EOL] today_day_of_month = now . format ( [string] ) [EOL] yesterday_day_of_month = now . yesterday ( ) . format ( [string] ) [EOL] [EOL] today_day_of_week = now . format ( [string] ) [EOL] yesterday_day_of_week = now . yesterday ( ) . format ( [string] ) [EOL] [EOL] once_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] once_expected = [ [ [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] once_include_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ [string] , [string] ] } [EOL] [EOL] once_include_expected = [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] once_exclude_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] } [EOL] [EOL] once_exclude_expected = [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] once_missing_mode = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] week_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] week_expected = [ [ [string] , [string] , [string] , [string] . format ( yesterday_day_of_week ) , [string] , [string] . format ( today_day_of_week ) ] ] [EOL] [EOL] month_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] month_expected = [ [ [string] , [string] , [string] , [string] . format ( yesterday_day_of_month ) , [string] , [string] . format ( today_day_of_month ) ] ] [EOL] [EOL] once_ssh_input = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] once_ssh_expected = [ [ [string] , [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def config_once ( temp_dir ) : [EOL] return { [string] : { [string] : os . path . join ( temp_dir , [string] ) , [string] : [number] , } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : os . path . join ( temp_dir , [string] ) , [string] : os . path . join ( temp_dir , [string] ) } } } [EOL] [EOL] [EOL] def config_link_dest ( temp_dir ) : [EOL] return { [string] : { [string] : os . path . join ( temp_dir , [string] ) , [string] : [number] , } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : os . path . join ( temp_dir , [string] ) , [string] : os . path . join ( temp_dir , [string] ) } } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) def test_mode_once ( check_if_already_running_mock , pidfile_mock , fake_data ) : [EOL] check_if_already_running_mock . return_value = False [EOL] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] [EOL] [comment] [EOL] fake_data . join ( [string] ) . write ( yaml . dump ( config_once ( str ( fake_data ) ) ) ) [EOL] [EOL] [comment] [EOL] with open ( str ( fake_data . join ( [string] ) ) , [string] ) as f : [EOL] runner . get_started ( f , name = None , test = False ) [EOL] [EOL] [comment] [EOL] source_filelist = os . listdir ( os . path . join ( str ( fake_data ) , [string] ) ) [EOL] destination_filelist = os . listdir ( os . path . join ( str ( fake_data ) , [string] ) ) [EOL] [EOL] assert source_filelist == destination_filelist [EOL] [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) def test_mode_month ( check_if_already_running_mock , pidfile_mock , fake_data ) : [EOL] check_if_already_running_mock . return_value = False [EOL] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] [EOL] [comment] [EOL] fake_data . join ( [string] ) . write ( yaml . dump ( config_link_dest ( str ( fake_data ) ) ) ) [EOL] [EOL] with open ( str ( fake_data . join ( [string] ) ) , [string] ) as f : [EOL] [comment] [EOL] runner . get_started ( f , name = None , test = False ) [EOL] [EOL] [comment] [EOL] shutil . move ( str ( fake_data . join ( [string] , today_day_of_month ) ) , str ( fake_data . join ( [string] , yesterday_day_of_month ) ) ) [EOL] [EOL] with open ( str ( fake_data . join ( [string] ) ) , [string] ) as f : [EOL] [comment] [EOL] runner . get_started ( f , name = None , test = False ) [EOL] [EOL] [comment] [EOL] today_dir = str ( fake_data . join ( [string] , today_day_of_month ) ) [EOL] today_filelist = [ os . path . join ( today_dir , i ) for i in os . listdir ( today_dir ) ] [EOL] today_inodes = helper . inode_list ( today_filelist ) [EOL] [EOL] [comment] [EOL] yesterday_dir = str ( fake_data . join ( [string] , yesterday_day_of_month ) ) [EOL] [EOL] yesterday_filelist = [ os . path . join ( yesterday_dir , i ) for i in os . listdir ( yesterday_dir ) ] [EOL] [EOL] yesterday_inodes = helper . inode_list ( yesterday_filelist ) [EOL] [EOL] assert today_inodes == yesterday_inodes [EOL] [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( once_input , once_expected ) , ( week_input , week_expected ) , ( month_input , month_expected ) , ( once_include_input , once_include_expected ) , ( once_exclude_input , once_exclude_expected ) , ( once_ssh_input , once_ssh_expected ) ] ) def test_main ( input , expected , rsync_found , plugins ) : [EOL] assert plugins [ [string] ] ( input ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def tar_found ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] , [string] ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] ] ] ) ] ) def test_main ( input , expected , tar_found , plugins ) : [EOL] [docstring] [EOL] assert plugins [ [string] ] ( input ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import pendulum [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def borg_found ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [ [string] , [string] , ] , [string] : [string] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( [string] , pendulum . now ( ) . format ( [string] ) ) , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : [ [string] ] } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( [string] , pendulum . now ( ) . format ( [string] ) ) , [string] , [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] } } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( [string] , pendulum . now ( ) . format ( [string] ) ) , [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ] ) , ( { [string] : [string] , [string] : [ [string] , ] , [string] : [string] , [string] : [ [string] ] , [string] : True , } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( [string] , pendulum . now ( ) . format ( [string] ) ) , [string] , [string] ] , [ [string] , [string] , [string] ] ] ) , ( { [string] : [string] , [string] : [ [string] , ] , [string] : [string] , [string] : [ [string] ] , [string] : False , } , [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( [string] , pendulum . now ( ) . format ( [string] ) ) , [string] , [string] ] , ] ) ] ) def test_main ( config , expected , borg_found , plugins ) : [EOL] [comment] [EOL] assert plugins [ [string] ] ( config ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] PIDFILE = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Iterator [EOL] import logging [EOL] import pathlib [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] import subprocess [EOL] from contextlib import contextmanager [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] from typing import Iterator , List [EOL] [EOL] from dothebackup . constants import PIDFILE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def absolutenormpath ( path ) : [EOL] [docstring] [EOL] abspath = os . path . abspath ( os . path . normpath ( path ) ) [EOL] LOG . debug ( [string] , abspath ) [EOL] [EOL] return abspath [EOL] [EOL] [EOL] def today ( ) : [EOL] [docstring] [EOL] return datetime . utcnow ( ) . strftime ( [string] ) [EOL] [EOL] [EOL] def git_cloned_yet ( path ) : [EOL] [docstring] [EOL] is_dir = os . path . isdir ( os . path . join ( path , [string] ) ) [EOL] LOG . debug ( [string] , is_dir ) [EOL] [EOL] return is_dir [EOL] [EOL] [EOL] def git_something_to_commit ( path ) : [EOL] [docstring] [EOL] command = [ [string] , path , [string] , [string] , [string] , [string] ] [EOL] stdout = subprocess . check_output ( [string] . join ( command ) , shell = True ) [EOL] [EOL] something_to_commit = bool ( stdout ) [EOL] [EOL] LOG . debug ( [string] , something_to_commit ) [EOL] [EOL] return something_to_commit [EOL] [EOL] [EOL] def return_code ( exitcodes ) : [EOL] [docstring] [EOL] code = [number] [EOL] for exitcode in exitcodes : [EOL] if exitcode != [number] : [EOL] code = [number] [EOL] [EOL] return code [EOL] [EOL] [EOL] @ contextmanager def pidfile ( ) : [EOL] [docstring] [EOL] pid = Path ( PIDFILE ) [EOL] try : [EOL] with pid . open ( mode = [string] ) as pid_file : [EOL] pid_file . write ( str ( os . getpid ( ) ) ) [EOL] yield [EOL] finally : [EOL] pid . unlink ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Any , List , Callable [EOL] import builtins [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] import sys [EOL] from distutils import spawn [comment] [EOL] from functools import wraps [EOL] from typing import Callable , Dict , List , Union [EOL] [EOL] from dothebackup . types import CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def load_plugins ( ) : [EOL] [docstring] [EOL] plugins = { } [EOL] path = os . path . dirname ( os . path . realpath ( __file__ ) ) + [string] [EOL] [EOL] [comment] [EOL] sys . path . insert ( [number] , path ) [EOL] [EOL] for file in os . listdir ( path ) : [EOL] fname , ext = os . path . splitext ( file ) [EOL] if ext == [string] : [EOL] mod = __import__ ( fname ) [EOL] plugins [ fname ] = mod . main [EOL] LOG . debug ( [string] , fname ) [EOL] [EOL] [comment] [EOL] sys . path . pop ( [number] ) [EOL] [EOL] return plugins [EOL] [EOL] [EOL] def required_keys ( key_list ) : [EOL] [docstring] [EOL] [comment] [EOL] def decorated_function ( func ) : [EOL] [EOL] @ wraps ( func ) def func_wrapper ( config ) : [EOL] for key in key_list : [EOL] if key not in config . keys ( ) : [EOL] print ( [string] . format ( key ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] return func ( config ) [EOL] [EOL] return func_wrapper [EOL] [EOL] return decorated_function [EOL] [EOL] [EOL] def required_executables ( dep_list ) : [EOL] [docstring] [EOL] [comment] [EOL] def decorated_function ( func ) : [EOL] [EOL] @ wraps ( func ) def func_wrapper ( config ) : [EOL] for dep in dep_list : [EOL] if not spawn . find_executable ( dep ) : [EOL] print ( [string] . format ( dep ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] return func ( config ) [EOL] [EOL] return func_wrapper [EOL] [EOL] return decorated_function [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Callable,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Callable,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Union , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import Dict , List , Union [EOL] [EOL] CONFIGTYPE = Dict [ str , Union [ str , List [ str ] , bool ] ] [EOL] [EOL] COMMANDLISTTYPE = List [ List [ str ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.List[builtins.str]]]$ 0 0 0 0 0 0 0 0 0
from typing import List , Any , Union , Dict [EOL] import dothebackup [EOL] import requests [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] from typing import Dict , List , Union [EOL] [EOL] import requests [EOL] [EOL] from dothebackup import plugins , utils [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_repos ( username ) : [EOL] [docstring] [EOL] [comment] [EOL] r = requests . get ( [string] . format ( username ) ) [EOL] [EOL] LOG . info ( [string] ) [EOL] [EOL] [comment] [EOL] return r . json ( ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] ] ) @ plugins . required_keys ( [ [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] commands = [ ] [EOL] [EOL] [comment] [EOL] for repo in get_repos ( config [ [string] ] ) : [EOL] [EOL] destination = os . path . join ( config [ [string] ] , repo [ [string] ] ) [EOL] [EOL] [comment] [EOL] if not utils . git_cloned_yet ( destination ) : [EOL] commands . append ( [ [string] , [string] , repo [ [string] ] , destination ] ) [EOL] [EOL] [comment] [EOL] commands . append ( [ [string] , destination , [string] , [string] , [string] ] ) [EOL] [EOL] return commands [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] [EOL] from dothebackup import plugins , utils [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] ] ) @ plugins . required_keys ( [ [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] commands = [ ] [EOL] [EOL] [comment] [EOL] if not utils . git_cloned_yet ( config [ [string] ] ) : [EOL] commands . append ( [ [string] , [string] , config [ [string] ] , config [ [string] ] ] ) [EOL] [EOL] commands . append ( [ [string] , config [ [string] ] , [string] , [string] , [string] ] ) [EOL] [EOL] return commands [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] [EOL] import pendulum [EOL] [EOL] from dothebackup import plugins [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def normalize_path ( path ) : [EOL] [docstring] [EOL] if [string] in path : [EOL] split_path = path . split ( [string] ) [EOL] split_path [ [number] ] = os . path . normpath ( split_path [ [number] ] ) [EOL] [EOL] return [string] . join ( split_path ) [EOL] [EOL] return os . path . normpath ( path ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] ] ) @ plugins . required_keys ( [ [string] , [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] [comment] [EOL] now = pendulum . utcnow ( ) [EOL] [EOL] today_day_of_month = now . format ( [string] ) [EOL] yesterday_day_of_month = now . yesterday ( ) . format ( [string] ) [EOL] [EOL] today_day_of_week = now . format ( [string] ) [EOL] yesterday_day_of_week = now . yesterday ( ) . format ( [string] ) [EOL] [EOL] [comment] [EOL] command = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] source = normalize_path ( config [ [string] ] ) + [string] [EOL] destination = normalize_path ( config [ [string] ] ) [EOL] [EOL] [comment] [EOL] if [string] in destination : [EOL] command . append ( [string] ) [EOL] [EOL] [comment] [EOL] if [string] in config . keys ( ) : [EOL] for item in config [ [string] ] : [EOL] command . append ( [string] . format ( item ) ) [EOL] [EOL] if [string] in config . keys ( ) : [EOL] for item in config [ [string] ] : [EOL] command . append ( [string] . format ( item ) ) [EOL] [EOL] [comment] [EOL] if config [ [string] ] == [string] : [EOL] [comment] [EOL] command . append ( [string] . format ( yesterday_day_of_month ) ) [EOL] destination = os . path . join ( destination , today_day_of_month ) [EOL] [EOL] elif config [ [string] ] == [string] : [EOL] [comment] [EOL] command . append ( [string] . format ( yesterday_day_of_week ) ) [EOL] destination = os . path . join ( destination , today_day_of_week ) [EOL] [EOL] elif config [ [string] ] == [string] : [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] command . append ( source ) [EOL] command . append ( destination ) [EOL] [EOL] return [ command ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] from os import path [EOL] [EOL] from dothebackup import plugins , utils [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] , [string] ] ) @ plugins . required_keys ( [ [string] , [string] , [string] , [string] , [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] commands = [ ] [EOL] [EOL] destination = config [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if config [ [string] ] == [string] : [EOL] cloned_yet = utils . git_cloned_yet ( destination ) [EOL] if not cloned_yet : [EOL] commands . append ( [ [string] , destination , [string] , [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] commands . append ( [ [string] , [string] , [string] , [string] . format ( config [ [string] ] ) , [string] . format ( config [ [string] ] ) , [string] . format ( config [ [string] ] ) , config [ [string] ] , [string] , path . join ( utils . absolutenormpath ( destination ) , [string] . format ( config [ [string] ] ) ) ] ) [EOL] [EOL] [comment] [EOL] if config [ [string] ] == [string] : [EOL] [EOL] [comment] [EOL] if not cloned_yet or utils . git_something_to_commit ( destination ) : [EOL] [EOL] commands . append ( [ [string] , destination , [string] , [string] , [string] , [string] . format ( config [ [string] ] ) , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] return commands [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] import os [EOL] [EOL] from dothebackup import plugins [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] from dothebackup . utils import absolutenormpath [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] ] ) @ plugins . required_keys ( [ [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] command = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] extension = os . path . splitext ( config [ [string] ] ) [ [number] ] [EOL] [EOL] if extension == [string] : [EOL] command . append ( [string] ) [EOL] [EOL] elif extension == [string] : [EOL] command . append ( [string] ) [EOL] [EOL] elif extension == [string] : [EOL] command . append ( [string] ) [EOL] [EOL] else : [EOL] pass [EOL] [EOL] [comment] [EOL] command . append ( [string] ) [EOL] [EOL] [comment] [EOL] command . append ( absolutenormpath ( config [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] for i in config [ [string] ] : [EOL] command . append ( absolutenormpath ( i ) ) [EOL] [EOL] return [ command ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import dothebackup [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] from os . path import join [EOL] [EOL] from dothebackup import plugins , utils [EOL] from dothebackup . types import COMMANDLISTTYPE , CONFIGTYPE [EOL] [EOL] LOG = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ plugins . required_executables ( [ [string] ] ) @ plugins . required_keys ( [ [string] , [string] ] ) def main ( config ) : [EOL] [docstring] [EOL] commands = [ ] [EOL] [EOL] destination = config [ [string] ] [EOL] [EOL] [comment] [EOL] if config [ [string] ] == [string] : [EOL] cloned_yet = utils . git_cloned_yet ( destination ) [EOL] if not cloned_yet : [EOL] commands . append ( [ [string] , destination , [string] , [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] commands . append ( [ [string] , [string] , join ( utils . absolutenormpath ( destination ) , [string] ) ] ) [EOL] [EOL] [comment] [EOL] if config [ [string] ] == [string] : [EOL] if not cloned_yet or utils . git_something_to_commit ( destination ) : [EOL] commands . append ( [ [string] , destination , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] return commands [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dothebackup.types.COMMANDLISTTYPE$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0