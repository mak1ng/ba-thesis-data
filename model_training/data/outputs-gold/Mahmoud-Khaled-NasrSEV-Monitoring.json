[comment] [EOL] import GUI [EOL] import input [EOL] import dispatcher [EOL] import database . database [EOL] from dispatcher import Dispatcher [EOL] from GUI . GUI_interface import GUIInterface [EOL] from input . serial_reader import SerialReader [EOL] from input . wifi_reader import WiFiReader [EOL] [EOL] COM_PORT = [string] [EOL] BAUD_RATE = [number] [EOL] [EOL] broadcase_IP = [string] [EOL] broadcase_port = [number] [EOL] server_IP = [string] [EOL] server_port = [number] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] gui_interface = GUIInterface ( ) [EOL] serial_reader = SerialReader ( COM_PORT , BAUD_RATE ) [EOL] wifi_reader = WiFiReader ( broadcase_IP , broadcase_port , server_IP , server_port ) [EOL] dispatcher = Dispatcher ( gui_interface = gui_interface , serial_reader = serial_reader , wifi_reader = wifi_reader ) [EOL] gui_interface . start_gui ( ) [EOL]	0 0 0 0 0 0 0 0 0 $dispatcher.Dispatcher$ 0 0 0 0 0 0 0 $dispatcher.Dispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $input.serial_reader.SerialReader$ 0 0 0 0 0 0 $builtins.input$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $GUI.GUI_interface.GUIInterface$ 0 0 0 0 0 $input.serial_reader.SerialReader$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.input$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 $dispatcher.Dispatcher$ 0 0 0 $GUI.GUI_interface.GUIInterface$ 0 $GUI.GUI_interface.GUIInterface$ 0 $input.serial_reader.SerialReader$ 0 $input.serial_reader.SerialReader$ 0 $builtins.input$ 0 $builtins.input$ 0 0 $GUI.GUI_interface.GUIInterface$ 0 0 0 0 0
import builtins [EOL] import input [EOL] import definitions [EOL] import GUI [EOL] import models [EOL] from PyQt5 . QtCore import QObject , pyqtSlot [EOL] [EOL] from GUI . GUI_interface import GUIInterface [EOL] from input . serial_reader import SerialReader [EOL] from input . wifi_reader import WiFiReader [EOL] from models . data_frames . data_frame import DataFrame [EOL] from models . laps . lap import Lap [EOL] from definitions import ConnectionTypes [EOL] [EOL] from actions . start_action import StartAction [EOL] from actions . receive_new_data_frame_action import ReceiveNewDataFrameAction [EOL] from actions . stop_action import StopAction [EOL] [EOL] [EOL] class Dispatcher ( QObject ) : [EOL] [EOL] def __init__ ( self , gui_interface , serial_reader , wifi_reader ) : [EOL] super ( Dispatcher , self ) . __init__ ( ) [EOL] self . gui_interface = gui_interface [EOL] self . __connect_gui_signals ( ) [EOL] self . serial_reader = serial_reader [EOL] self . wifi_reader = wifi_reader [EOL] self . __connect_serial_reader_signals ( ) [EOL] self . current_lap = None [EOL] [EOL] [comment] [EOL] def __connect_gui_signals ( self ) : [EOL] self . gui_interface . connect_start_signal ( self . start_handler ) [EOL] self . gui_interface . connect_stop_signal ( self . stop_handler ) [EOL] [EOL] [comment] [EOL] def __connect_serial_reader_signals ( self ) : [EOL] self . serial_reader . connect_receive_data_signal ( self . receive_serial_data_handler ) [EOL] self . wifi_reader . connect_receive_data_signal ( self . receive_serial_data_handler ) [EOL] [EOL] @ pyqtSlot ( DataFrame ) def receive_serial_data_handler ( self , data_frame ) : [EOL] ReceiveNewDataFrameAction ( self , data_frame ) . execute ( ) [EOL] [EOL] @ pyqtSlot ( ConnectionTypes , str ) def start_handler ( self , connection_type , lap_name ) : [EOL] StartAction ( self , connection_type , lap_name ) . execute ( ) [EOL] [EOL] @ pyqtSlot ( ) def stop_handler ( self ) : [EOL] StopAction ( self ) . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $definitions.ConnectionTypes$ 0 $builtins.str$ 0 0 0 0 0 0 0 $definitions.ConnectionTypes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Tuple , List [EOL] import typing [EOL] from enum import Enum [EOL] [EOL] [EOL] [comment] [EOL] class CurrentsBaseValues : [EOL] MASTER_MOTOR_CURRENT = [number] [EOL] SLAVE_MOTOR_CURRENT = [number] [EOL] [EOL] [EOL] [comment] [EOL] class ConnectionTypes ( Enum ) : [EOL] USB = [number] [EOL] WIFI = [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Ranges : [EOL] BATTERY_CURRENT = ( [number] , [number] ) [EOL] MOTORS_CURRENT = ( [number] , [number] ) [EOL] SOLAR_PANELS_CURRENT = ( [number] , [number] ) [EOL] [EOL] CHARGE_RATE = ( [number] , [number] ) [EOL] DC_BUS_VOLT = ( [number] , [number] ) [EOL] [EOL] SOLAR_PANELS_TEMPERATURE = ( [number] , [number] ) [EOL] [EOL] MIN_BATTERY_VOLT = ( [number] , [number] ) [EOL] MAX_BATTERY_VOLT = ( [number] , [number] ) [EOL] MAX_BATTERY_TEMPERATURE = ( [number] , [number] ) [EOL] [EOL] MASTER_MOTOR_CURRENT = ( [number] , [number] ) [EOL] MASTER_MOTOR_SPEED = ( [number] , [number] ) [EOL] [EOL] SLAVE_MOTOR_CURRENT = ( [number] , [number] ) [EOL] SLAVE_MOTOR_SPEED = ( [number] , [number] ) [EOL] [EOL] BATTERY_MODULE_VOLT = ( [number] , [number] ) [EOL] BATTERY_MODULE_TEMPERATURE = ( [number] , [number] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Tolerances : [EOL] BATTERY_CURRENT = [number] [EOL] MOTORS_CURRENT = [number] [EOL] SOLAR_PANELS_CURRENT = [number] [EOL] [EOL] CHARGE_RATE = [number] [EOL] DC_BUS_VOLT = [number] [EOL] [EOL] SOLAR_PANELS_TEMPERATURE = [number] [EOL] [EOL] MIN_BATTERY_VOLT = [number] [EOL] MAX_BATTERY_VOLT = [number] [EOL] MAX_BATTERY_TEMPERATURE = [number] [EOL] [EOL] MASTER_MOTOR_CURRENT = [number] [EOL] MASTER_MOTOR_SPEED = [number] [EOL] [EOL] SLAVE_MOTOR_CURRENT = [number] [EOL] SLAVE_MOTOR_SPEED = [number] [EOL] [EOL] BATTERY_MODULE_VOLT = [number] [EOL] BATTERY_MODULE_TEMPERATURE = [number] [EOL] [EOL] [EOL] [comment] [EOL] class DataFramesIDs : [EOL] CURRENTS_FRAME_ID = [number] [EOL] BUS_VOLTAGES_FRAME_ID = [number] [EOL] TEMPERATURES_FRAME_ID = [number] [EOL] MODULES_FRAME_IDS = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] LIGHTS_FRAME_ID = [number] [EOL] SWITCHES_FRAME_ID = [number] [EOL] DRIVER_MASTER_MC_FRAME_ID = [number] [EOL] DRIVER_SLAVE_MC_FRAME_ID = [number] [EOL] [EOL] [EOL] [comment] [EOL] class DatabaseTablesNames : [EOL] DATA_FRAME_TABLE = [string] [EOL] CURRENT_TABLE = [string] [EOL] BUS_VOLTAGE_TABLE = [string] [EOL] TEMPERATURE_TABLE = [string] [EOL] BATTERY_TABLE = [string] [EOL] LIGHT_TABLE = [string] [EOL] SWITCH_TABLE = [string] [EOL] DRIVER_MASTER_MC_TABLE = [string] [EOL] DRIVER_SLAVE_MC_TABLE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Type [EOL] import definitions [EOL] import GUI [EOL] import builtins [EOL] import typing [EOL] from GUI . GUI_main_window import Ui_MainWindow [EOL] from GUI . GUI_updater import GUIUpdater [EOL] from enum import Enum [EOL] from PyQt5 . QtCore import pyqtSignal , QObject , Qt [EOL] from PyQt5 . QtWidgets import QMessageBox , QPushButton , QDialog , QLineEdit , QHBoxLayout , QLabel [EOL] from PyQt5 . QtGui import QFont , QIcon [EOL] from definitions import ConnectionTypes [EOL] [EOL] [EOL] class ButtonModes ( Enum ) : [EOL] START = [number] [EOL] STOP = [number] [EOL] PAUSE = [number] [EOL] CONTINUE = [number] [EOL] [EOL] [EOL] class GUIActions ( QObject ) : [EOL] [comment] [EOL] signal_start = pyqtSignal ( ConnectionTypes , str ) [EOL] signal_stop = pyqtSignal ( ) [EOL] [EOL] [comment] [EOL] def __init__ ( self , gui_app , gui_updater ) : [EOL] super ( GUIActions , self ) . __init__ ( ) [EOL] [comment] [EOL] self . gui_app = gui_app [EOL] self . gui_updater = gui_updater [EOL] self . start_stop_button_mode = ButtonModes . START [EOL] self . pause_continue_button_mode = ButtonModes . PAUSE [EOL] [comment] [EOL] self . __set_button_signals_connections ( ) [EOL] [EOL] [comment] [EOL] def start_stop_button_clicked ( self ) : [EOL] if self . start_stop_button_mode is ButtonModes . START : [comment] [EOL] [comment] [EOL] connection_type = self . __get_connection_type ( ) [EOL] [comment] [EOL] lap_name = self . __get_lap_name ( ) [EOL] [comment] [EOL] self . start_stop_button_mode = ButtonModes . STOP [EOL] self . gui_app . start_stop_button . setText ( [string] ) [EOL] [comment] [EOL] self . signal_start . emit ( connection_type , lap_name ) [EOL] else : [comment] [EOL] [comment] [EOL] self . start_stop_button_mode = ButtonModes . START [EOL] self . gui_app . start_stop_button . setText ( [string] ) [EOL] [comment] [EOL] self . signal_stop . emit ( ) [EOL] [EOL] [comment] [EOL] def pause_continue_button_clicked ( self ) : [EOL] if self . pause_continue_button_mode is ButtonModes . PAUSE : [comment] [EOL] [comment] [EOL] self . pause_continue_button_mode = ButtonModes . CONTINUE [EOL] self . gui_app . pause_continue_button . setText ( [string] ) [EOL] [comment] [EOL] self . gui_updater . set_paused ( True ) [EOL] else : [comment] [EOL] [comment] [EOL] self . pause_continue_button_mode = ButtonModes . PAUSE [EOL] self . gui_app . pause_continue_button . setText ( [string] ) [EOL] [comment] [EOL] self . gui_updater . set_paused ( False ) [EOL] [EOL] [comment] [EOL] def __set_button_signals_connections ( self ) : [EOL] self . gui_app . start_stop_button . clicked . connect ( self . start_stop_button_clicked ) [EOL] self . gui_app . pause_continue_button . clicked . connect ( self . pause_continue_button_clicked ) [EOL] [EOL] [comment] [EOL] def __get_connection_type ( self ) : [EOL] [comment] [EOL] msg_box = QMessageBox ( ) [EOL] [comment] [EOL] msg_box . setWindowFlags ( Qt . CustomizeWindowHint | Qt . WindowTitleHint ) [EOL] [comment] [EOL] msg_box . setWindowTitle ( [string] ) [EOL] msg_box . setText ( [string] ) [EOL] msg_box . setIcon ( QMessageBox . Question ) [EOL] msg_box . setWindowIcon ( QIcon ( [string] ) ) [EOL] font = QFont ( ) [EOL] font . setFamily ( [string] ) [EOL] font . setPointSize ( [number] ) [EOL] msg_box . setFont ( font ) [EOL] [comment] [EOL] usb_button = QPushButton ( [string] ) [EOL] wireless_button = QPushButton ( [string] ) [EOL] msg_box . addButton ( usb_button , QMessageBox . YesRole ) [EOL] msg_box . addButton ( wireless_button , QMessageBox . NoRole ) [EOL] msg_box . exec_ ( ) [EOL] [comment] [EOL] if msg_box . clickedButton ( ) is usb_button : [EOL] return ConnectionTypes . USB [EOL] elif msg_box . clickedButton ( ) is wireless_button : [EOL] return ConnectionTypes . WIFI [EOL] [EOL] [comment] [EOL] def __get_lap_name ( self ) : [EOL] [comment] [EOL] input_dialog = QDialog ( self . gui_app . main_window ) [EOL] [comment] [EOL] font = QFont ( ) [EOL] font . setFamily ( [string] ) [EOL] font . setPointSize ( [number] ) [EOL] input_dialog . setFont ( font ) [EOL] input_dialog . setWindowTitle ( [string] ) [EOL] input_dialog . setWindowIcon ( QIcon ( [string] ) ) [EOL] [comment] [EOL] input_dialog . setWindowFlags ( Qt . Window | Qt . CustomizeWindowHint | Qt . WindowTitleHint ) [EOL] [comment] [EOL] layout = QHBoxLayout ( ) [EOL] [comment] [EOL] label = QLabel ( [string] ) [EOL] label . setFont ( font ) [EOL] layout . addWidget ( label ) [EOL] [comment] [EOL] line_edit = QLineEdit ( ) [EOL] line_edit . setFont ( font ) [EOL] layout . addWidget ( line_edit ) [EOL] [comment] [EOL] button = QPushButton ( [string] ) [EOL] button . setFont ( font ) [EOL] layout . addWidget ( button ) [EOL] [EOL] layout . setSpacing ( [number] ) [EOL] input_dialog . setLayout ( layout ) [EOL] [EOL] self . lap_name = [string] [EOL] [EOL] [comment] [EOL] def ok_button_slot ( ) : [EOL] self . lap_name = line_edit . text ( ) [EOL] input_dialog . close ( ) [EOL] [EOL] button . clicked . connect ( ok_button_slot ) [EOL] [EOL] input_dialog . exec_ ( ) [EOL] [EOL] return self . lap_name [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , List [EOL] import GUI [EOL] import builtins [EOL] import typing [EOL] from GUI . GUI_main_window import MainWindow [EOL] from GUI . GUI_actions import GUIActions , GUIUpdater [EOL] from typing import List , Callable [EOL] import sys [EOL] [EOL] [EOL] class GUIInterface : [EOL] [EOL] [comment] [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] self . gui_app = MainWindow ( ) [EOL] self . gui_updater = GUIUpdater ( self . gui_app ) [EOL] self . gui_actions = GUIActions ( self . gui_app , self . gui_updater ) [EOL] [EOL] [comment] [EOL] self . update_currents ( [number] , [number] , [number] ) [EOL] self . update_currents ( [number] , [number] , [number] ) [EOL] self . update_currents ( [number] , [number] , [number] ) [EOL] self . update_lights ( [ True , False , True ] ) [EOL] self . update_switches ( [ False , True , False , True , True , False ] ) [EOL] [EOL] def start_gui ( self ) : [EOL] [comment] [EOL] sys . exit ( self . gui_app . app . exec_ ( ) ) [EOL] [EOL] [comment] [EOL] def update_currents ( self , battery_current , motors_current , solar_panels_current ) : [EOL] [comment] [EOL] self . gui_updater . update_label ( self . gui_app . batteryCurrent , battery_current ) [EOL] self . gui_updater . update_label ( self . gui_app . motorsCurrent , motors_current ) [EOL] self . gui_updater . update_label ( self . gui_app . spanelsCurrent , solar_panels_current ) [EOL] [EOL] [comment] [EOL] def update_volts ( self , dc_bus_volt , charge_rate ) : [EOL] [comment] [EOL] self . gui_updater . update_label ( self . gui_app . dcBusVolt , dc_bus_volt ) [EOL] self . gui_updater . update_label ( self . gui_app . chargeRate , charge_rate ) [EOL] [EOL] [comment] [EOL] def update_temperatures ( self , solar_panels_temperature ) : [EOL] [comment] [EOL] self . gui_updater . update_label ( self . gui_app . spanelsTemp , solar_panels_temperature ) [EOL] [EOL] [comment] [EOL] def update_master_motor ( self , master_motor_current , master_motor_speed ) : [EOL] [comment] [EOL] self . gui_updater . update_label ( self . gui_app . masterCurrent , master_motor_current ) [EOL] self . gui_updater . update_label ( self . gui_app . masterSpeed , master_motor_speed ) [EOL] [EOL] [comment] [EOL] def update_slave_motor ( self , slave_motor_current , slave_motor_speed ) : [EOL] [comment] [EOL] self . gui_updater . update_label ( self . gui_app . slaveCurrent , slave_motor_current ) [EOL] self . gui_updater . update_label ( self . gui_app . slaveSpeed , slave_motor_speed ) [EOL] [EOL] [comment] [EOL] def update_battery ( self , module_number , battery_volt , battery_temperature ) : [EOL] self . gui_updater . update_battery ( module_number , battery_volt , battery_temperature ) [EOL] [EOL] [comment] [EOL] def update_lights ( self , lights_status ) : [EOL] self . gui_updater . update_lights ( lights_status ) [EOL] [EOL] [comment] [EOL] def update_switches ( self , switches_status ) : [EOL] self . gui_updater . update_switches ( switches_status ) [EOL] [EOL] [comment] [EOL] def connect_start_signal ( self , start_slot ) : [EOL] self . gui_actions . signal_start . connect ( start_slot ) [EOL] [EOL] [comment] [EOL] def connect_stop_signal ( self , stop_slot ) : [EOL] self . gui_actions . signal_stop . connect ( stop_slot )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GUI.GUI_main_window.MainWindow$ 0 0 0 0 0 0 0 $GUI.GUI_updater.GUIUpdater$ 0 0 0 0 0 $GUI.GUI_main_window.MainWindow$ 0 0 0 0 $GUI.GUI_actions.GUIActions$ 0 0 0 0 0 $GUI.GUI_main_window.MainWindow$ 0 0 0 $GUI.GUI_updater.GUIUpdater$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0
from typing import Any , List [EOL] import PyQt5 [EOL] import GUI [EOL] import builtins [EOL] import typing [EOL] from definitions import Ranges , Tolerances [EOL] from PyQt5 . QtWidgets import QLabel [EOL] from GUI . GUI_main_window import Ui_MainWindow [EOL] from typing import List [EOL] [EOL] [EOL] class GUIUpdater : [EOL] def __init__ ( self , gui_app ) : [EOL] self . gui_app = gui_app [EOL] [comment] [EOL] self . paused = False [EOL] [comment] [EOL] self . ranges = { } [EOL] self . tolerances = { } [EOL] self . current_values = { } [EOL] self . batteries_volts = { } [EOL] self . batteries_temperatures = { } [EOL] [comment] [EOL] self . __init_ranges_dict ( ) [EOL] self . __init_tolerances_dict ( ) [EOL] [EOL] [comment] [EOL] def __init_ranges_dict ( self ) : [EOL] [comment] [EOL] self . ranges [ self . gui_app . batteryCurrent ] = Ranges . BATTERY_CURRENT [EOL] self . ranges [ self . gui_app . motorsCurrent ] = Ranges . MOTORS_CURRENT [EOL] self . ranges [ self . gui_app . spanelsCurrent ] = Ranges . SOLAR_PANELS_CURRENT [EOL] [comment] [EOL] self . ranges [ self . gui_app . spanelsTemp ] = Ranges . SOLAR_PANELS_TEMPERATURE [EOL] [comment] [EOL] self . ranges [ self . gui_app . minBatteryVolt ] = Ranges . MIN_BATTERY_VOLT [EOL] self . ranges [ self . gui_app . maxBatteryVolt ] = Ranges . MAX_BATTERY_VOLT [EOL] self . ranges [ self . gui_app . maxBatteryTemp ] = Ranges . MAX_BATTERY_TEMPERATURE [EOL] [comment] [EOL] self . ranges [ self . gui_app . chargeRate ] = Ranges . CHARGE_RATE [EOL] self . ranges [ self . gui_app . dcBusVolt ] = Ranges . DC_BUS_VOLT [EOL] [comment] [EOL] self . ranges [ self . gui_app . masterCurrent ] = Ranges . MASTER_MOTOR_CURRENT [EOL] self . ranges [ self . gui_app . masterSpeed ] = Ranges . MASTER_MOTOR_SPEED [EOL] [comment] [EOL] self . ranges [ self . gui_app . slaveCurrent ] = Ranges . SLAVE_MOTOR_CURRENT [EOL] self . ranges [ self . gui_app . slaveSpeed ] = Ranges . SLAVE_MOTOR_SPEED [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] self . ranges [ eval ( [string] + str ( i ) ) ] = Ranges . BATTERY_MODULE_VOLT [EOL] self . ranges [ eval ( [string] + str ( i ) ) ] = Ranges . BATTERY_MODULE_TEMPERATURE [EOL] [EOL] [comment] [EOL] def __init_tolerances_dict ( self ) : [EOL] [comment] [EOL] self . tolerances [ self . gui_app . batteryCurrent ] = Tolerances . BATTERY_CURRENT [EOL] self . tolerances [ self . gui_app . motorsCurrent ] = Tolerances . MOTORS_CURRENT [EOL] self . tolerances [ self . gui_app . spanelsCurrent ] = Tolerances . SOLAR_PANELS_CURRENT [EOL] [comment] [EOL] self . tolerances [ self . gui_app . spanelsTemp ] = Tolerances . SOLAR_PANELS_TEMPERATURE [EOL] [comment] [EOL] self . tolerances [ self . gui_app . minBatteryVolt ] = Tolerances . MIN_BATTERY_VOLT [EOL] self . tolerances [ self . gui_app . maxBatteryVolt ] = Tolerances . MAX_BATTERY_VOLT [EOL] self . tolerances [ self . gui_app . maxBatteryTemp ] = Tolerances . MAX_BATTERY_TEMPERATURE [EOL] [comment] [EOL] self . tolerances [ self . gui_app . chargeRate ] = Tolerances . CHARGE_RATE [EOL] self . tolerances [ self . gui_app . dcBusVolt ] = Tolerances . DC_BUS_VOLT [EOL] [comment] [EOL] self . tolerances [ self . gui_app . masterCurrent ] = Tolerances . MASTER_MOTOR_CURRENT [EOL] self . tolerances [ self . gui_app . masterSpeed ] = Tolerances . MASTER_MOTOR_SPEED [EOL] [comment] [EOL] self . tolerances [ self . gui_app . slaveCurrent ] = Tolerances . SLAVE_MOTOR_CURRENT [EOL] self . tolerances [ self . gui_app . slaveSpeed ] = Tolerances . SLAVE_MOTOR_SPEED [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] self . tolerances [ eval ( [string] + str ( i ) ) ] = Tolerances . BATTERY_MODULE_VOLT [EOL] self . tolerances [ eval ( [string] + str ( i ) ) ] = Tolerances . BATTERY_MODULE_TEMPERATURE [EOL] [EOL] [comment] [EOL] def __is_in_range ( self , data_label , value ) : [EOL] ( minimum , maximum ) = self . ranges [ data_label ] [EOL] if minimum <= value <= maximum : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [comment] [EOL] def __is_tolerable ( self , data_label , value ) : [EOL] [comment] [EOL] if data_label not in self . current_values : [EOL] return False [EOL] [comment] [EOL] elif abs ( value - self . current_values [ data_label ] ) < self . tolerances [ data_label ] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [comment] [EOL] def update_label ( self , data_label , value ) : [EOL] if not self . paused : [EOL] [comment] [EOL] if not self . __is_tolerable ( data_label , value ) : [EOL] [comment] [EOL] self . current_values [ data_label ] = value [EOL] [comment] [EOL] [comment] [EOL] data_label . setText ( [string] . format ( value ) ) [EOL] [comment] [EOL] stylesheet = [string] [EOL] parent_frame = data_label . parent ( ) . objectName ( ) [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] if not self . __is_in_range ( data_label , value ) : [EOL] [comment] [EOL] stylesheet = [string] [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] data_label . setStyleSheet ( stylesheet ) [EOL] data_label . parent ( ) . setStyleSheet ( frame_stylesheet ) [EOL] [EOL] [comment] [EOL] def update_switches ( self , switches_status ) : [EOL] if not self . paused : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for index , switch_status in enumerate ( switches_status , [number] ) : [EOL] [comment] [EOL] switch_label = eval ( [string] + str ( index ) ) [EOL] [comment] [EOL] switch_frame = switch_label . parent ( ) [EOL] [EOL] if switch_status is True : [comment] [EOL] [comment] [EOL] switch_label . setStyleSheet ( [string] ) [EOL] [comment] [EOL] switch_frame . setStyleSheet ( [string] ) [EOL] [EOL] else : [comment] [EOL] [comment] [EOL] switch_label . setStyleSheet ( [string] ) [EOL] [comment] [EOL] switch_frame . setStyleSheet ( [string] ) [EOL] [EOL] [comment] [EOL] def update_lights ( self , lights_status ) : [EOL] if not self . paused : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for index , light_status in enumerate ( lights_status , [number] ) : [EOL] [comment] [EOL] light_label = eval ( [string] + str ( index ) ) [EOL] [comment] [EOL] light_frame = light_label . parent ( ) [EOL] [EOL] if light_status is True : [comment] [EOL] [comment] [EOL] light_label . setStyleSheet ( [string] ) [EOL] [comment] [EOL] light_frame . setStyleSheet ( [string] ) [EOL] [EOL] else : [comment] [EOL] [comment] [EOL] light_label . setStyleSheet ( [string] ) [EOL] [comment] [EOL] light_frame . setStyleSheet ( [string] ) [EOL] [EOL] [comment] [EOL] def update_battery ( self , module_number , battery_volt , battery_temp ) : [EOL] if not self . paused : [EOL] [comment] [EOL] volt_label = eval ( [string] + str ( module_number ) ) [EOL] [comment] [EOL] temp_label = eval ( [string] + str ( module_number ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not self . __is_tolerable ( volt_label , battery_volt ) : [EOL] [comment] [EOL] self . current_values [ volt_label ] = battery_volt [EOL] self . batteries_volts [ volt_label ] = battery_volt [EOL] [comment] [EOL] [comment] [EOL] volt_label . setText ( [string] . format ( battery_volt ) ) [EOL] [comment] [EOL] stylesheet = [string] [EOL] parent_frame = volt_label . parent ( ) . objectName ( ) [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] if not self . __is_in_range ( volt_label , battery_volt ) : [EOL] [comment] [EOL] stylesheet = [string] [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] volt_label . setStyleSheet ( stylesheet ) [EOL] volt_label . parent ( ) . setStyleSheet ( frame_stylesheet ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not self . __is_tolerable ( temp_label , battery_temp ) : [EOL] [comment] [EOL] self . current_values [ temp_label ] = battery_temp [EOL] self . batteries_volts [ temp_label ] = battery_temp [EOL] [comment] [EOL] [comment] [EOL] temp_label . setText ( [string] . format ( battery_temp ) ) [EOL] [comment] [EOL] stylesheet = [string] [EOL] parent_frame = temp_label . parent ( ) . objectName ( ) [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] if not self . __is_in_range ( temp_label , battery_temp ) : [EOL] [comment] [EOL] stylesheet = [string] [EOL] frame_stylesheet = [string] + parent_frame + [string] [EOL] [comment] [EOL] temp_label . setStyleSheet ( stylesheet ) [EOL] temp_label . parent ( ) . setStyleSheet ( frame_stylesheet ) [EOL] [EOL] [comment] [EOL] if not self . batteries_volts : [comment] [EOL] max_volt = battery_volt [EOL] min_volt = battery_volt [EOL] else : [EOL] max_volt = max ( list ( self . batteries_volts . values ( ) ) ) [EOL] min_volt = min ( list ( self . batteries_volts . values ( ) ) ) [EOL] [EOL] if not self . batteries_temperatures : [comment] [EOL] max_temp = battery_temp [EOL] else : [EOL] max_temp = max ( list ( self . batteries_temperatures . values ( ) ) ) [EOL] [EOL] [comment] [EOL] self . update_label ( self . gui_app . minBatteryVolt , min_volt ) [EOL] self . update_label ( self . gui_app . maxBatteryVolt , max_volt ) [EOL] self . update_label ( self . gui_app . maxBatteryTemp , max_temp ) [EOL] [EOL] [comment] [EOL] def set_paused ( self , is_paused ) : [EOL] self . paused = is_paused	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GUI.GUI_main_window.Ui_MainWindow$ 0 0 0 0 0 $GUI.GUI_main_window.Ui_MainWindow$ 0 $GUI.GUI_main_window.Ui_MainWindow$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 $builtins.float$ 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 $builtins.float$ 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 $builtins.str$ 0 0 $PyQt5.QtWidgets.QLabel$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$
	0
	0
from typing import Type , List [EOL] import models [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] [EOL] from sqlalchemy import ForeignKey , Column , Integer , Boolean [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] from definitions import DatabaseTablesNames [EOL] [EOL] [EOL] class LightsDataFrame ( DataFrame ) : [EOL] [EOL] __tablename__ = DatabaseTablesNames . LIGHT_TABLE [EOL] __mapper_args__ = { [string] : DatabaseTablesNames . LIGHT_TABLE } [EOL] [EOL] id = Column ( Integer , ForeignKey ( DatabaseTablesNames . DATA_FRAME_TABLE + [string] ) , primary_key = True ) [EOL] head_lights = Column ( Boolean , nullable = False ) [EOL] tail_lights = Column ( Boolean , nullable = False ) [EOL] left_indicator = Column ( Boolean , nullable = False ) [EOL] right_indicator = Column ( Boolean , nullable = False ) [EOL] high_beam = Column ( Boolean , nullable = False ) [EOL] brake_light = Column ( Boolean , nullable = False ) [EOL] backing_light = Column ( Boolean , nullable = False ) [EOL] daytime_light = Column ( Boolean , nullable = False ) [EOL] [EOL] def __init__ ( self , frame_id , frame_value , headlights , tail_lights , left_indicator , right_indicator , high_beam , brake_light , backing_light , daytime_light ) : [EOL] [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] [EOL] self . head_lights = headlights [EOL] self . tail_lights = tail_lights [EOL] self . left_indicator = left_indicator [EOL] self . right_indicator = right_indicator [EOL] self . high_beam = high_beam [EOL] self . brake_light = brake_light [EOL] self . backing_light = backing_light [EOL] self . daytime_light = daytime_light [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] [string] % ( self . frame_id , self . frame_value , self . head_lights , self . tail_lights , self . left_indicator , self . right_indicator , self . high_beam , self . brake_light , self . backing_light , self . daytime_light ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] lights_status = [ self . head_lights , self . tail_lights , self . left_indicator , self . right_indicator , self . high_beam , self . brake_light , self . backing_light , self . daytime_light ] [EOL] gui_interface . update_lights ( lights_status = lights_status ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $typing.List[builtins.bool]$ 0 $typing.List[builtins.bool]$ 0 0
from typing import Type , List [EOL] import models [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] [EOL] from sqlalchemy import ForeignKey , Column , Integer , Boolean [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] from definitions import DatabaseTablesNames [EOL] [EOL] [EOL] class SwitchesDataFrame ( DataFrame ) : [EOL] [EOL] __tablename__ = DatabaseTablesNames . SWITCH_TABLE [EOL] __mapper_args__ = { [string] : DatabaseTablesNames . SWITCH_TABLE } [EOL] [EOL] id = Column ( Integer , ForeignKey ( DatabaseTablesNames . DATA_FRAME_TABLE + [string] ) , primary_key = True ) [EOL] motor_on = Column ( Boolean , nullable = False ) [EOL] forward = Column ( Boolean , nullable = False ) [EOL] reverse = Column ( Boolean , nullable = False ) [EOL] light_on = Column ( Boolean , nullable = False ) [EOL] warning = Column ( Boolean , nullable = False ) [EOL] daytime = Column ( Boolean , nullable = False ) [EOL] [EOL] def __init__ ( self , frame_id , frame_value , motor_on , forward , reverse , light_on , warning , daytime ) : [EOL] [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] [EOL] self . motor_on = motor_on [EOL] self . forward = forward [EOL] self . reverse = reverse [EOL] self . light_on = light_on [EOL] self . warning = warning [EOL] self . daytime = daytime [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] % ( self . frame_id , self . frame_value , self . motor_on , self . forward , self . reverse , self . light_on , self . warning , self . daytime ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] switches_status = [ self . motor_on , self . forward , self . reverse , self . light_on , self . warning , self . daytime ] [EOL] gui_interface . update_switches ( switches_status = switches_status ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $typing.List[builtins.bool]$ 0 $typing.List[builtins.bool]$ 0 0
from typing import Type [EOL] import models [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy import ForeignKey , Column , Integer [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] from definitions import DatabaseTablesNames [EOL] [EOL] [EOL] class CurrentsDataFrame ( DataFrame ) : [EOL] [EOL] __tablename__ = DatabaseTablesNames . CURRENT_TABLE [EOL] __mapper_args__ = { [string] : DatabaseTablesNames . CURRENT_TABLE , } [EOL] [EOL] id = Column ( Integer , ForeignKey ( DatabaseTablesNames . DATA_FRAME_TABLE + [string] ) , primary_key = True ) [EOL] battery_current = Column ( Integer , nullable = False ) [EOL] motors_current = Column ( Integer , nullable = False ) [EOL] solar_panels_current = Column ( Integer , nullable = False ) [EOL] [EOL] def __init__ ( self , frame_id , frame_value , battery_current , motors_current , solar_panels_current ) : [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] self . battery_current = battery_current [EOL] self . motors_current = motors_current [EOL] self . solar_panels_current = solar_panels_current [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] % ( self . frame_id , self . frame_value , self . battery_current , self . motors_current , self . solar_panels_current ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] gui_interface . update_currents ( battery_current = self . battery_current , motors_current = self . motors_current , solar_panels_current = self . solar_panels_current )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import models [EOL] import builtins [EOL] from struct import unpack [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] [EOL] [EOL] [comment] [EOL] class DriverMasterMCDataFrame ( DataFrame ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _parse_string = [string] [EOL] [EOL] def __init__ ( self , frame_id , frame_value ) : [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] [comment] [EOL] [comment] [EOL] ( self . master_motor_current , self . master_motor_speed ) = unpack ( self . _parse_string , self . frame_value [ [number] : [number] ] ) [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] % ( self . frame_id , self . frame_value , self . master_motor_current , self . master_motor_speed ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] gui_interface . update_master_motor ( master_motor_current = self . master_motor_current , master_motor_speed = self . master_motor_speed ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import models [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy import ForeignKey , Column , Integer [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] from definitions import DatabaseTablesNames [EOL] [EOL] [EOL] class BusVoltagesDataFrame ( DataFrame ) : [EOL] [EOL] __tablename__ = DatabaseTablesNames . BUS_VOLTAGE_TABLE [EOL] __mapper_args__ = { [string] : DatabaseTablesNames . BUS_VOLTAGE_TABLE } [EOL] [EOL] id = Column ( Integer , ForeignKey ( DatabaseTablesNames . DATA_FRAME_TABLE + [string] ) , primary_key = True ) [EOL] DC_bus_voltage = Column ( Integer , nullable = False ) [EOL] charge_rate = Column ( Integer , nullable = False ) [EOL] [EOL] def __init__ ( self , frame_id , frame_value , DC_bus_voltage , charge_rate ) : [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] self . DC_bus_voltage = DC_bus_voltage [EOL] self . charge_rate = charge_rate [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . frame_id , self . frame_value , self . dc_bus_volt , self . charge_rate ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] gui_interface . update_volts ( dc_bus_volt = self . dc_bus_volt , charge_rate = self . charge_rate )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import models [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy import ForeignKey , Column , Integer [EOL] [EOL] from models . data_frames . data_frame import DataFrame , GUIInterface [EOL] from definitions import DatabaseTablesNames [EOL] [EOL] [EOL] class TemperaturesDataFrame ( DataFrame ) : [EOL] [EOL] __tablename__ = DatabaseTablesNames . TEMPERATURE_TABLE [EOL] __mapper_args__ = { [string] : DatabaseTablesNames . TEMPERATURE_TABLE , } [EOL] [EOL] id = Column ( Integer , ForeignKey ( DatabaseTablesNames . DATA_FRAME_TABLE + [string] ) , primary_key = True ) [EOL] solar_panels_temperature = Column ( Integer , nullable = False ) [EOL] [EOL] def __init__ ( self , frame_id , frame_value , solar_panels_temperature ) : [EOL] super ( ) . __init__ ( frame_id , frame_value ) [EOL] self . solar_panels_temperature = solar_panels_temperature [EOL] [EOL] [comment] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] % ( self . frame_id , self . frame_value , self . solar_panels_temperature ) [EOL] [EOL] [comment] [EOL] def update_gui ( self , gui_interface ) : [EOL] gui_interface . update_temperatures ( solar_panels_temperature = self . solar_panels_temperature ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 $models.data_frames.data_frame.GUIInterface$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import models [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] [EOL] from sqlalchemy import Column , Integer , String , DateTime [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from database . database import DatabaseBaseClass [EOL] [EOL] [EOL] class Lap ( DatabaseBaseClass ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , autoincrement = True ) [EOL] start_time = Column ( DateTime , default = datetime . datetime . utcnow ( ) ) [EOL] finish_time = Column ( DateTime , nullable = True ) [EOL] name = Column ( String , nullable = False ) [EOL] comments = Column ( String , nullable = True ) [EOL] [EOL] data_frames = relationship ( [string] ) [EOL] [EOL] def __init__ ( self , name , comments = None ) : [EOL] self . name = name [EOL] if comments is None : [EOL] self . comments = [string] [EOL] else : [EOL] self . comments = comments [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . id , self . start_time , self . finish_time , self . name , self . comments ) [EOL] [EOL] def finish_lap ( self ) : [EOL] self . finish_time = datetime . datetime . utcnow ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.laps.lap.Lap]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from actions . action import Action [EOL] from database . database import Session [EOL] from database . database import insert_data_frames [EOL] [EOL] [EOL] class StopAction ( Action ) : [EOL] [EOL] def __init__ ( self , dispatcher ) : [EOL] super ( ) . __init__ ( dispatcher ) [EOL] [EOL] def execute ( self ) : [EOL] [comment] [EOL] self . dispatcher . serial_reader . stop ( ) [EOL] [comment] [EOL] insert_data_frames . stop ( ) [EOL] insert_data_frames . wait ( ) [EOL] self . dispatcher . current_lap . finish_lap ( ) [EOL] database_session = Session ( ) [EOL] database_session . add ( self . dispatcher . current_lap ) [EOL] database_session . commit ( ) [EOL] database_session . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import definitions [EOL] import builtins [EOL] import typing [EOL] from actions . action import Action [EOL] from database . database import Session [EOL] from database . database import insert_data_frames [EOL] from models . laps . lap import Lap [EOL] from definitions import ConnectionTypes [EOL] [EOL] [EOL] class StartAction ( Action ) : [EOL] [EOL] def __init__ ( self , dispatcher , connection_type , lap_name ) : [EOL] super ( ) . __init__ ( dispatcher ) [EOL] self . connection_type = connection_type [EOL] self . lap_name = lap_name [EOL] [EOL] def execute ( self ) : [EOL] [comment] [EOL] self . dispatcher . current_lap = Lap ( self . lap_name ) [EOL] database_session = Session ( ) [EOL] database_session . add ( self . dispatcher . current_lap ) [EOL] database_session . commit ( ) [EOL] database_session . close ( ) [EOL] [comment] [EOL] insert_data_frames . start ( ) [EOL] [comment] [EOL] if self . connection_type == ConnectionTypes . USB : [EOL] self . dispatcher . serial_reader . start ( ) [EOL] elif self . connection_type == ConnectionTypes . WIFI : [EOL] self . dispatcher . wifi_reader . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $definitions.ConnectionTypes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $definitions.ConnectionTypes$ 0 $definitions.ConnectionTypes$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import models [EOL] from actions . action import Action [EOL] from database . database import insert_data_frames [EOL] from models . data_frames . data_frame import DataFrame [EOL] [EOL] [EOL] class ReceiveNewDataFrameAction ( Action ) : [EOL] [EOL] def __init__ ( self , dispatcher , data_frame ) : [EOL] super ( ReceiveNewDataFrameAction , self ) . __init__ ( dispatcher ) [EOL] self . data_frame = data_frame [EOL] [EOL] def execute ( self ) : [EOL] [comment] [EOL] [comment] [EOL] self . data_frame . lap = self . dispatcher . current_lap [EOL] insert_data_frames . add_new_frame ( self . data_frame ) [EOL] [comment] [EOL] self . data_frame . update_gui ( gui_interface = self . dispatcher . gui_interface ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import models [EOL] import database [EOL] import builtins [EOL] import typing [EOL] from queue import Queue [EOL] [EOL] from PyQt5 . QtCore import QThread [EOL] [EOL] from database . database import Session [EOL] from models . data_frames . data_frame import DataFrame [EOL] [EOL] [EOL] class InsertDataFrames ( QThread ) : [EOL] [EOL] data_frames = Queue ( ) [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . database_session = Session ( ) [EOL] self . operate = True [EOL] [EOL] def add_new_frame ( self , frame ) : [EOL] self . data_frames . put_nowait ( frame ) [EOL] [EOL] def run ( self ) : [EOL] self . operate = True [EOL] time_out = [number] [EOL] while self . operate : [EOL] print ( [string] ) [EOL] frame = self . data_frames . get ( timeout = time_out ) [EOL] if frame is None : [EOL] continue [EOL] self . database_session . add ( frame ) [EOL] self . database_session . commit ( ) [EOL] [EOL] [comment] [EOL] while self . data_frames . qsize ( ) != [number] : [EOL] frame = self . data_frames . get_nowait ( ) [EOL] self . database_session . add ( frame ) [EOL] [EOL] self . database_session . commit ( ) [EOL] self . database_session . close ( ) [EOL] [EOL] def stop ( self ) : [EOL] self . operate = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
from typing import Any [EOL] import database [EOL] import typing [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] [EOL] DatabaseBaseClass = declarative_base ( ) [EOL] database_engine = create_engine ( [string] , echo = True ) [EOL] [EOL] [comment] [EOL] from models . data_frames . data_frame import DataFrame [EOL] from models . data_frames . currents_data_frame import CurrentsDataFrame [EOL] from models . data_frames . bus_voltages_data_frame import BusVoltagesDataFrame [EOL] from models . data_frames . tempratures_data_frame import TemperaturesDataFrame [EOL] from models . data_frames . battery_data_frame import BatteryDataFrame [EOL] from models . data_frames . lights_status_data_frame import LightsDataFrame [EOL] from models . data_frames . switches_status_data_frame import SwitchesDataFrame [EOL] from models . laps . lap import Lap [EOL] [EOL] [comment] [EOL] DatabaseBaseClass . metadata . create_all ( database_engine ) [EOL] print ( database_engine ) [EOL] [EOL] Session = sessionmaker ( bind = database_engine ) [EOL] [EOL] from database . insert_data_frame import InsertDataFrames [EOL] [EOL] insert_data_frames = InsertDataFrames ( ) [EOL] [EOL] from database . database_seed import seed_database [EOL] [EOL] seed_database ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $database.insert_data_frame.InsertDataFrames$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import models [EOL] import database [EOL] import builtins [EOL] import os [EOL] from random import random , randint , getrandbits [EOL] [EOL] from database . database import Session [EOL] from models . data_frames . currents_data_frame import CurrentsDataFrame [EOL] from models . data_frames . bus_voltages_data_frame import BusVoltagesDataFrame [EOL] from models . data_frames . tempratures_data_frame import TemperaturesDataFrame [EOL] from models . data_frames . battery_data_frame import BatteryDataFrame [EOL] from models . data_frames . lights_status_data_frame import LightsDataFrame [EOL] from models . data_frames . switches_status_data_frame import SwitchesDataFrame [EOL] from models . laps . lap import Lap [EOL] from definitions import DataFramesIDs as df_ids [EOL] from definitions import Ranges as ranges [EOL] [EOL] [EOL] def seed_database ( ) : [EOL] [comment] [EOL] database_session = Session ( ) [EOL] if database_session . query ( Lap ) . count ( ) != [number] : [EOL] database_session . close ( ) [EOL] return [EOL] [EOL] LAPS_NUMBER = [number] [EOL] FRAMES_NUMBER_PER_FRAME_TYPE = [number] [EOL] LAP_NAME = [string] [EOL] [EOL] for i in range ( [number] , LAPS_NUMBER ) : [EOL] lap = Lap ( LAP_NAME + str ( i ) ) [EOL] database_session . add ( lap ) [EOL] for j in range ( [number] , FRAMES_NUMBER_PER_FRAME_TYPE ) : [EOL] df1 = CurrentsDataFrame ( df_ids . CURRENTS_FRAME_ID , os . urandom ( [number] ) , randint ( ranges . BATTERY_CURRENT [ [number] ] , ranges . BATTERY_CURRENT [ [number] ] ) , randint ( ranges . MOTORS_CURRENT [ [number] ] , ranges . MOTORS_CURRENT [ [number] ] ) , randint ( ranges . SOLAR_PANELS_CURRENT [ [number] ] , ranges . SOLAR_PANELS_CURRENT [ [number] ] ) ) [EOL] df2 = BusVoltagesDataFrame ( df_ids . BUS_VOLTAGES_FRAME_ID , os . urandom ( [number] ) , [number] , randint ( ranges . CHARGE_RATE [ [number] ] , ranges . CHARGE_RATE [ [number] ] ) ) [EOL] df3 = TemperaturesDataFrame ( df_ids . TEMPERATURES_FRAME_ID , os . urandom ( [number] ) , randint ( ranges . SOLAR_PANELS_TEMPERATURE [ [number] ] , ranges . SOLAR_PANELS_TEMPERATURE [ [number] ] ) ) [EOL] [comment] [EOL] df5 = LightsDataFrame ( df_ids . LIGHTS_FRAME_ID , os . urandom ( [number] ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) ) [EOL] df6 = SwitchesDataFrame ( df_ids . SWITCHES_FRAME_ID , os . urandom ( [number] ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) , bool ( getrandbits ( [number] ) ) ) [EOL] lap . finish_lap ( ) [EOL] df1 . lap = lap [EOL] df2 . lap = lap [EOL] df3 . lap = lap [EOL] df5 . lap = lap [EOL] df6 . lap = lap [EOL] database_session . add ( df1 ) [EOL] database_session . add ( df2 ) [EOL] database_session . add ( df3 ) [EOL] database_session . add ( df5 ) [EOL] database_session . add ( df6 ) [EOL] [EOL] database_session . commit ( ) [EOL] database_session . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Callable [EOL] import builtins [EOL] import typing [EOL] import input [EOL] import serial [EOL] import models [EOL] import time [EOL] [EOL] from PyQt5 . QtCore import QThread , pyqtSignal [EOL] from serial import Serial , SerialException [EOL] from typing import Callable [EOL] [EOL] from input . data_frames_factory import get_data_frame_size , create_data_frame_object , unpack_raw_id , STARTING_SEQUENCE , TERMINATING_SEQUENCE , FRAME_ID_SIZE [EOL] from models . data_frames . data_frame import DataFrame [EOL] [EOL] [EOL] class SerialReader ( QThread ) : [EOL] [EOL] signal_receive_serial_data = pyqtSignal ( DataFrame ) [EOL] [EOL] def __init__ ( self , com_port , baud_rate ) : [EOL] super ( SerialReader , self ) . __init__ ( ) [EOL] self . COM = com_port [EOL] self . baud_rate = baud_rate [EOL] self . serial = None [EOL] [comment] [EOL] self . operate = True [EOL] [EOL] def run ( self ) : [EOL] self . operate = True [EOL] try : [EOL] print ( [string] ) [comment] [EOL] self . serial = Serial ( port = self . COM , baudrate = self . baud_rate ) [EOL] self . serial . reset_input_buffer ( ) [EOL] self . serial . reset_output_buffer ( ) [EOL] if self . serial . is_open : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] self . serial . write ( STARTING_SEQUENCE ) [EOL] [comment] [EOL] while self . operate : [EOL] [comment] [EOL] raw_id = self . __get_frame_id ( ) [EOL] frame_id = unpack_raw_id ( raw_id ) [EOL] print ( frame_id ) [EOL] [comment] [EOL] frame_size = get_data_frame_size ( frame_id ) [EOL] [comment] [EOL] frame_data = self . __get_frame_data ( frame_size ) [EOL] [comment] [EOL] frame_object = create_data_frame_object ( frame_id , frame_data ) [EOL] [comment] [EOL] self . signal_receive_serial_data . emit ( frame_object ) [EOL] [EOL] [comment] [EOL] if self . serial : [EOL] [comment] [EOL] self . serial . write ( TERMINATING_SEQUENCE ) [EOL] [comment] [EOL] self . serial . close ( ) [EOL] print ( [string] ) [comment] [EOL] [EOL] except SerialException : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] [EOL] def __get_frame_id ( self ) : [EOL] [comment] [EOL] raw_id = self . serial . read ( FRAME_ID_SIZE ) [EOL] [comment] [EOL] return raw_id [EOL] [EOL] def __get_frame_data ( self , frame_size ) : [EOL] return self . serial . read ( frame_size ) [EOL] [EOL] def stop ( self ) : [EOL] self . operate = False [EOL] [EOL] def connect_receive_data_signal ( self , receive_data_slot ) : [EOL] self . signal_receive_serial_data . connect ( receive_data_slot ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[input.serial_reader.SerialReader]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $serial.Serial$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $models.data_frames.data_frame.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0
from typing import Callable , List [EOL] import builtins [EOL] import typing [EOL] import PyQt5 [EOL] import socket [EOL] import models [EOL] from socket import socket , SOCK_DGRAM , AF_INET [EOL] from typing import Callable , List [EOL] [EOL] from PyQt5 . QtCore import QThread , pyqtSignal [EOL] [EOL] from input . data_frames_factory import get_data_frame_size , create_data_frame_object , unpack_raw_id , STARTING_SEQUENCE , TERMINATING_SEQUENCE , FRAME_ID_SIZE [EOL] from models . data_frames . data_frame import DataFrame [EOL] [EOL] [EOL] class WiFiReader ( QThread ) : [EOL] [EOL] signal_receive_wifi_data = pyqtSignal ( DataFrame ) [EOL] [EOL] [comment] [EOL] BROADCAST_BUFFER_SIZE = [number] [EOL] [EOL] def __init__ ( self , broadcase_IP , broadcast_port , server_IP , server_port ) : [EOL] super ( WiFiReader , self ) . __init__ ( ) [EOL] [EOL] self . broadcase_IP = broadcase_IP [EOL] self . broadcast_port = broadcast_port [EOL] self . server_IP = server_IP [EOL] self . server_port = server_port [EOL] [EOL] self . operate = True [EOL] [EOL] self . input_data_buffer = [string] [EOL] [EOL] [comment] [EOL] self . server_socket = socket ( AF_INET , SOCK_DGRAM ) [EOL] self . server_socket . settimeout ( None ) [EOL] [EOL] [comment] [EOL] self . broadcast_socket = socket ( AF_INET , SOCK_DGRAM ) [EOL] self . broadcast_socket . setblocking ( True ) [EOL] [EOL] def run ( self ) : [EOL] self . __open_broadcast_socket ( ) [EOL] self . __open_client_socket ( ) [EOL] self . __start_communication ( ) [EOL] while self . operate : [EOL] packet = self . broadcast_socket . recv ( self . BROADCAST_BUFFER_SIZE ) [EOL] print ( packet ) [EOL] data_frames_list = self . __parse_packet ( packet ) [EOL] for data_frame in data_frames_list : [EOL] self . signal_receive_wifi_data . emit ( data_frame ) [EOL] [EOL] self . __end_communication ( ) [EOL] self . server_socket . close ( ) [EOL] self . broadcast_socket . close ( ) [EOL] [EOL] def stop ( self ) : [EOL] self . operate = False [EOL] [EOL] def connect_receive_data_signal ( self , receive_data_slot ) : [EOL] self . signal_receive_wifi_data . connect ( receive_data_slot ) [EOL] [EOL] def __open_broadcast_socket ( self ) : [EOL] self . broadcast_socket . bind ( ( self . server_IP , self . broadcast_port ) ) [EOL] [EOL] def __open_client_socket ( self ) : [EOL] self . server_socket . connect ( ( self . server_IP , self . server_port ) ) [EOL] [EOL] def __start_communication ( self ) : [EOL] self . server_socket . send ( STARTING_SEQUENCE ) [EOL] m = self . server_socket . recv ( [number] ) [EOL] print ( m ) [EOL] [EOL] def __end_communication ( self ) : [EOL] self . server_socket . send ( TERMINATING_SEQUENCE ) [EOL] m = self . server_socket . recv ( [number] ) [EOL] print ( m ) [EOL] [EOL] def __parse_packet ( self , packet ) : [EOL] packet_size = len ( self . input_data_buffer ) [EOL] index = [number] [EOL] data_frames_list = [ ] [EOL] [comment] [EOL] while index < packet_size : [EOL] frame_id = unpack_raw_id ( packet [ index : index + FRAME_ID_SIZE ] ) [EOL] index += FRAME_ID_SIZE [EOL] frame_size = get_data_frame_size ( frame_id ) [EOL] frame_raw_data = packet [ index : index + frame_size ] [EOL] index += frame_size [EOL] frame_object = create_data_frame_object ( frame_id , frame_raw_data ) [EOL] data_frames_list . append ( frame_object ) [EOL] [comment] [EOL] print ( frame_id ) [EOL] print ( frame_raw_data ) [EOL] [EOL] return data_frames_list [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0