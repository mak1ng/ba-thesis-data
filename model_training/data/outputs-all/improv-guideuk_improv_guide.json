	0
from typing import List [EOL] import typing [EOL] def test_version ( ) : [EOL] from uk_improv_guide import __version__ as v [EOL] [EOL] parts = [ int ( a ) for a in v . split ( [string] ) ] [EOL] for p in parts : [EOL] assert p >= [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [docstring] [EOL] from uk_improv_guide . manage import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
import pkg_resources [EOL] [EOL] __version__ = pkg_resources . get_distribution ( [string] ) . version [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] from typing import Type [EOL] [EOL] from django . contrib import admin [EOL] from django . contrib . auth . decorators import login_required [EOL] from reversion . admin import VersionAdmin [EOL] from uk_improv_guide . models import get_all_models [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] admin . site . login = login_required ( admin . site . login ) [EOL] [EOL] [EOL] def get_standard_admin_class ( m ) : [EOL] admin_name = f"{ m . __name__ } [string] " [EOL] [comment] [EOL] ac = type ( admin_name , ( VersionAdmin , ) , { [string] : True } ) [EOL] globals ( ) [ admin_name ] = ac [EOL] return ac [EOL] [EOL] [EOL] def get_admin_class_for_model ( m ) : [EOL] try : [EOL] ac = m . model_admin ( ) [EOL] [comment] [EOL] except AttributeError : [EOL] [comment] [EOL] ac = get_standard_admin_class ( m ) [EOL] [EOL] return ac [EOL] [EOL] [EOL] for m in get_all_models ( ) : [EOL] [comment] [EOL] [EOL] admin . register ( m ) ( get_admin_class_for_model ( m ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . contrib . auth import views as auth_views [EOL] from django . urls import include , path [EOL] from uk_improv_guide import settings [EOL] from uk_improv_guide . models import Performer [EOL] from uk_improv_guide . views . cities import cities [EOL] from uk_improv_guide . views . city import city [EOL] from uk_improv_guide . views . course import course [EOL] from uk_improv_guide . views . courses import courses [EOL] from uk_improv_guide . views . event import event [EOL] from uk_improv_guide . views . events import events [EOL] from uk_improv_guide . views . festival import festival [EOL] from uk_improv_guide . views . festivals import festivals [EOL] from uk_improv_guide . views . home import home [EOL] from uk_improv_guide . views . misc import privacy , terms [EOL] from uk_improv_guide . views . performer import performer [EOL] from uk_improv_guide . views . performers import performers [EOL] from uk_improv_guide . views . register import register [EOL] from uk_improv_guide . views . resource import resource [EOL] from uk_improv_guide . views . resources import resources [EOL] from uk_improv_guide . views . school import school [EOL] from uk_improv_guide . views . schools import schools [EOL] from uk_improv_guide . views . sitemap import robots_txt , sitemap [EOL] from uk_improv_guide . views . teachers import teachers [EOL] from uk_improv_guide . views . team import team [EOL] from uk_improv_guide . views . team_event_calendar import team_event_calendar [EOL] from uk_improv_guide . views . teams import teams [EOL] from uk_improv_guide . views . venue import venue [EOL] from uk_improv_guide . views . venues import venues [EOL] [EOL] info_dict = { [string] : Performer . objects . all ( ) , [string] : [string] } [EOL] [EOL] urlpatterns = [ path ( [string] , home , name = [string] ) , path ( [string] , sitemap , name = [string] ) , path ( [string] , events , name = [string] ) , path ( [string] , event , name = [string] ) , path ( [string] , festivals , name = [string] ) , path ( [string] , festival , name = [string] ) , path ( [string] , venues , name = [string] ) , path ( [string] , venue , name = [string] ) , path ( [string] , cities , name = [string] ) , path ( [string] , city , name = [string] ) , path ( [string] , teams , name = [string] ) , path ( [string] , team , name = [string] ) , path ( [string] , team_event_calendar , name = [string] ) , path ( [string] , performers , name = [string] ) , path ( [string] , performer , name = [string] ) , path ( [string] , teachers , name = [string] ) , path ( [string] , performer , name = [string] ) , path ( [string] , courses , name = [string] ) , path ( [string] , course , name = [string] ) , path ( [string] , schools , name = [string] ) , path ( [string] , school , name = [string] ) , path ( [string] , privacy , name = [string] ) , path ( [string] , terms , name = [string] ) , path ( [string] , robots_txt , name = [string] ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , register , name = [string] ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , auth_views . LogoutView . as_view ( ) , name = [string] ) , path ( [string] , resources , name = [string] ) , path ( [string] , resource , name = [string] ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT , show_indexes = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def start ( ) : [EOL] log . info ( [string] ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] execute_from_command_line ( sys . argv ) [EOL] [EOL] [EOL] def main ( ) : [EOL] logging . basicConfig ( ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . INFO ) [EOL] start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import django [EOL] import logging [EOL] [EOL] from django . contrib . auth . models import Group , User [EOL] from django . db . models . signals import post_save [EOL] from django . dispatch import receiver [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = User ) def create_user_profile ( sender , instance , created , default_group_name = [string] , ** kwargs ) : [EOL] instance . is_staff = True [EOL] log . warning ( f" [string] { default_group_name }" ) [EOL] [EOL] try : [EOL] group = Group . objects . get ( name = default_group_name ) [EOL] except Group . DoesNotExist : [EOL] log . warning ( f" [string] { default_group_name }" ) [EOL] group = Group ( name = default_group_name ) [EOL] group . save ( ) [EOL] [EOL] if group not in instance . groups . all ( ) : [EOL] log . info ( f" [string] { group } [string] { instance }" ) [EOL] instance . groups . add ( group ) [EOL] instance . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Sequence [EOL] import typing [EOL] import builtins [EOL] import src [EOL] from typing import List , Sequence [EOL] [EOL] import reversion [EOL] from django . db import models [EOL] from django_countries . fields import CountryField [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . site_mappable import SiteMapThing [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] from uk_improv_guide . models . city import City [EOL] from uk_improv_guide . models . fields . fields import TWITTER_HANDLE [EOL] from uk_improv_guide . models . school import School [EOL] [EOL] [EOL] @ reversion . register class Venue ( SlackNotificationMixin , SiteMapThing , AdminableObject , models . Model ) : [EOL] url_base = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] facebook_link = models . CharField ( max_length = [number] , blank = True ) [EOL] website_link = models . CharField ( max_length = [number] , blank = True ) [EOL] twitter_handle = TWITTER_HANDLE [EOL] google_maps_link = models . CharField ( max_length = [number] , blank = True ) [EOL] address = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] city = models . CharField ( max_length = [number] , default = [string] , editable = False ) [EOL] postcode = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] email_address = models . CharField ( max_length = [number] , verbose_name = [string] , blank = True ) [EOL] country = CountryField ( blank_label = [string] , default = [string] , editable = False ) [EOL] [EOL] city_obj = models . ForeignKey ( City , on_delete = models . SET_DEFAULT , blank = True , null = True , default = None , verbose_name = [string] , ) [EOL] [EOL] school = models . ForeignKey ( School , on_delete = models . SET_DEFAULT , blank = True , null = True , default = None , verbose_name = [string] , ) [EOL] image = models . ImageField ( upload_to = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . city_obj or [string] }" [EOL] [EOL] [EOL] def get_all_venues ( ) : [EOL] return Venue . objects . all ( ) [EOL] [EOL] [EOL] def get_venue_by_id ( id ) : [EOL] return Venue . objects . get ( id = id ) [EOL] [EOL] [EOL] def get_venues_for_city ( city_id ) : [EOL] return Venue . objects . filter ( city_obj__id = city_id ) . order_by ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.venue.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Venue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import src [EOL] import uuid [EOL] [EOL] import reversion [EOL] from django . db import models [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] [EOL] [EOL] @ reversion . register class EventSeries ( SlackNotificationMixin , AdminableObject , models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.event_series.EventSeries]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.event_series.EventSeries]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.event_series.EventSeries]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import builtins [EOL] import src [EOL] import uuid [EOL] from typing import List [EOL] [EOL] import reversion [EOL] from django . db import models [EOL] from django_countries . fields import CountryField [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . site_mappable import SiteMapThing [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] from uk_improv_guide . models . fields . fields import ( EMAIL_ADDRESS , FACEBOOK_LINK , INSTAGRAM_LINK , TWITTER_HANDLE , WEBSITE_LINK , ) [EOL] [EOL] [EOL] @ reversion . register class School ( SlackNotificationMixin , SiteMapThing , AdminableObject , models . Model ) : [EOL] url_base = [string] [EOL] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] facebook_link = FACEBOOK_LINK [EOL] instagram_link = INSTAGRAM_LINK [EOL] twitter_handle = TWITTER_HANDLE [EOL] contact_email_address = EMAIL_ADDRESS [EOL] website_link = WEBSITE_LINK [EOL] country = CountryField ( blank_label = [string] , default = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] def get_school_by_id ( id ) : [EOL] return School . objects . get ( id = id ) [EOL] [EOL] [EOL] def get_all_schools ( ) : [EOL] return School . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.school.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $School$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Sequence [EOL] import src [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] import reversion [EOL] from django . contrib . admin . widgets import FilteredSelectMultiple [EOL] from django . db import models [EOL] from django . forms import ModelForm [EOL] from reversion . admin import VersionAdmin [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . site_mappable import SiteMapThing [EOL] from uk_improv_guide . lib . sitemaps import register_model_for_site_map [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] from uk_improv_guide . models . fields . fields import ( DESCRIPTION , EVENTBRITE_LINK , FACEBOOK_LINK , WEBSITE_LINK , ) [EOL] from uk_improv_guide . models . performer import Performer [EOL] from uk_improv_guide . models . school import School [EOL] from uk_improv_guide . models . team import Team [EOL] from uk_improv_guide . models . utils import link_model_form_and_admin [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ reversion . register @ register_model_for_site_map class Festival ( SlackNotificationMixin , SiteMapThing , AdminableObject , models . Model ) : [EOL] url_base = [string] [EOL] [EOL] FESTIVAL_TYPES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] long_description = ( DESCRIPTION , ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] festival_type = models . CharField ( max_length = [number] , choices = FESTIVAL_TYPES ) [EOL] start_time = models . DateTimeField ( verbose_name = [string] ) [EOL] end_time = models . DateTimeField ( verbose_name = [string] ) [EOL] facebook_link = FACEBOOK_LINK [EOL] eventbrite_link = EVENTBRITE_LINK [EOL] website_link = WEBSITE_LINK [EOL] venues = models . ManyToManyField ( Venue , blank = True ) [EOL] teams = models . ManyToManyField ( Team , verbose_name = [string] , blank = True ) [EOL] teachers = models . ManyToManyField ( Performer , verbose_name = [string] , blank = True ) [EOL] school = models . ForeignKey ( School , on_delete = models . SET_NULL , blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . start_time }" [EOL] [EOL] [EOL] class FestivalAdminForm ( ModelForm ) : [EOL] excludes = [ ] [EOL] [EOL] class Meta : [EOL] fields = [string] [EOL] widgets = { [string] : FilteredSelectMultiple ( [string] , False ) , [string] : FilteredSelectMultiple ( [string] , False ) , [string] : FilteredSelectMultiple ( [string] , False ) , } [EOL] [EOL] [EOL] class FestivalAdmin ( VersionAdmin ) : [EOL] save_as = True [EOL] search_fields = [ [string] ] [EOL] view_on_site = True [EOL] [EOL] def formfield_for_foreignkey ( self , db_field , request , ** kwargs ) : [EOL] if db_field . name == [string] : [EOL] log . warning ( [string] ) [EOL] kwargs [ [string] ] = Performer . objects . exclude ( teaches_for = None ) [EOL] return super ( ) . formfield_for_foreignkey ( db_field , request , ** kwargs ) [EOL] [EOL] [EOL] def get_festivals_after_datetime ( dt ) : [EOL] return Festival . objects . filter ( start_time__gte = dt ) . order_by ( [string] ) [EOL] [EOL] [EOL] def get_all_festivals ( ) : [EOL] return Festival . objects . all ( ) [EOL] [EOL] [EOL] def get_festival_by_id ( id ) : [EOL] f = Festival . objects . get ( id = id ) [EOL] return f [EOL] [EOL] [EOL] link_model_form_and_admin ( model = Festival , form = FestivalAdminForm , admin = FestivalAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def link_model_form_and_admin ( model , form , admin ) : [EOL] admin . form = form [EOL] form . Meta . model = model [EOL] [EOL] def model_admin ( ) : [EOL] return admin [EOL] [EOL] model . model_admin = model_admin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import builtins [EOL] import src [EOL] from typing import List [EOL] [EOL] import reversion [EOL] from django . db import models [EOL] from django_countries . fields import CountryField [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . site_mappable import SiteMapThing [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] [EOL] [EOL] @ reversion . register class City ( SlackNotificationMixin , SiteMapThing , AdminableObject , models . Model ) : [EOL] url_base = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] country = CountryField ( blank_label = [string] , default = [string] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] , [string] ] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . country . name }" [EOL] [EOL] [EOL] def get_all_cities ( ) : [EOL] return City . objects . all ( ) [EOL] [EOL] [EOL] def get_city_by_id ( city_id ) : [EOL] return City . objects . get ( id = city_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.city.City]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.city.City]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.city.City]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[City]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $City$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Tuple , Sequence [EOL] import typing [EOL] import builtins [EOL] import src [EOL] import datetime [EOL] import datetime [EOL] from typing import Sequence [EOL] [EOL] import reversion [EOL] from django . db import models [EOL] from reversion . admin import VersionAdmin [EOL] from uk_improv_guide . lib . adminable import AdminableObject [EOL] from uk_improv_guide . lib . site_mappable import SiteMapThing [EOL] from uk_improv_guide . lib . sitemaps import register_model_for_site_map [EOL] from uk_improv_guide . lib . slack_notification_mixin import SlackNotificationMixin [EOL] from uk_improv_guide . models . performer import Performer [EOL] from uk_improv_guide . models . school import School [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] [EOL] class CourseAdmin ( VersionAdmin ) : [EOL] save_as = True [EOL] [EOL] search_fields = [ [string] ] [EOL] view_on_site = True [EOL] [EOL] fields = ( ( [string] , [string] ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def formfield_for_foreignkey ( self , db_field , request , ** kwargs ) : [EOL] if db_field . name == [string] : [EOL] kwargs [ [string] ] = Performer . objects . exclude ( teaches_for = None ) [EOL] return super ( ) . formfield_for_foreignkey ( db_field , request , ** kwargs ) [EOL] [EOL] [EOL] @ reversion . register @ register_model_for_site_map class Course ( SlackNotificationMixin , SiteMapThing , AdminableObject , models . Model ) : [EOL] url_base = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] , help_text = [string] , ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] venue = models . ForeignKey ( Venue , on_delete = models . SET_NULL , null = True , help_text = [string] , ) [EOL] school = models . ForeignKey ( School , on_delete = models . SET_NULL , null = True , help_text = [string] , related_name = [string] , ) [EOL] teacher = models . ForeignKey ( Performer , on_delete = models . SET_NULL , blank = True , null = True , help_text = [string] , related_name = [string] , ) [EOL] start_time = models . DateTimeField ( verbose_name = [string] ) [EOL] lesson_duration = models . FloatField ( verbose_name = [string] , help_text = [string] , ) [EOL] number_of_lessons = models . IntegerField ( verbose_name = [string] , help_text = [string] , ) [EOL] class_show = models . BooleanField ( verbose_name = [string] ) [EOL] course_link = models . URLField ( max_length = [number] , blank = True , verbose_name = [string] , help_text = [string] , ) [EOL] [EOL] @ staticmethod def model_admin ( ) : [EOL] return CourseAdmin [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . school } [string] { self . name } [string] { self . start_time }" [EOL] [EOL] [EOL] def get_courses_after_datetime ( dt ) : [EOL] return Course . objects . filter ( start_time__gte = dt ) . order_by ( [string] ) [EOL] [EOL] [EOL] def get_courses_for_teacher ( dt , performer_id ) : [EOL] return Course . objects . filter ( start_time__gte = dt , teacher__id = performer_id ) . order_by ( [string] ) [EOL] [EOL] [EOL] def get_courses_for_school ( id ) : [EOL] return Course . objects . filter ( ) [EOL] [EOL] [EOL] def get_all_courses ( ) : [EOL] return Course . objects . all ( ) [EOL] [EOL] [EOL] def get_course_by_id ( id ) : [EOL] return Course . objects . get ( id = id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Course$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set [EOL] import typing [EOL] import django [EOL] from typing import Set [EOL] [EOL] from django . db import models [EOL] from uk_improv_guide . models . city import City [EOL] from uk_improv_guide . models . course import Course [EOL] from uk_improv_guide . models . event import Event [EOL] from uk_improv_guide . models . event_series import EventSeries [EOL] from uk_improv_guide . models . festival import Festival [EOL] from uk_improv_guide . models . performer import Performer [EOL] from uk_improv_guide . models . resource import Resource [EOL] from uk_improv_guide . models . school import School [EOL] from uk_improv_guide . models . signals import create_user_profile [EOL] from uk_improv_guide . models . team import Team [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] [EOL] def get_all_models ( ) : [EOL] return { Event , Performer , Team , Venue , EventSeries , School , Course , Festival , Resource , City , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import re [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] [EOL] [EOL] def validate_twitter_handle ( value ) : [EOL] if not re . match ( [string] , value ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] TWITTER_HANDLE = models . CharField ( max_length = [number] , blank = True , default = [string] , verbose_name = [string] , validators = [ validate_twitter_handle ] , ) [EOL] [EOL] FACEBOOK_LINK = models . URLField ( max_length = [number] , blank = True ) [EOL] WEBSITE_LINK = models . URLField ( max_length = [number] , blank = True ) [EOL] RSS_FEED_LINK = models . URLField ( max_length = [number] , blank = True ) [EOL] GOOGLE_MAPS_LINK = models . URLField ( max_length = [number] , blank = True ) [EOL] EMAIL_ADDRESS = models . EmailField ( max_length = [number] , verbose_name = [string] , blank = True ) [EOL] EVENTBRITE_LINK = models . URLField ( max_length = [number] , blank = True ) [EOL] INSTAGRAM_LINK = models . URLField ( max_length = [number] , blank = True , default = [string] , verbose_name = [string] ) [EOL] IMDB_LINK = models . URLField ( max_length = [number] , blank = True , default = [string] , verbose_name = [string] ) [EOL] [EOL] DESCRIPTION = models . CharField ( max_length = [number] , blank = True , default = [string] , verbose_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [EOL] class TestSettings ( TestCase ) : [EOL] def testOne ( self ) : [EOL] from uk_improv_guide import settings [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [EOL] class TestSettings ( TestCase ) : [EOL] def testVersion ( self ) : [EOL] from uk_improv_guide import __version__ [EOL] [EOL] a , b , c = [ int ( x ) for x in __version__ . split ( [string] ) ] [EOL] self . assertTrue ( any ( x > [number] for x in [ a , b , c ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . test_settings import * [EOL]	0 0 0 0 0 0
from uk_improv_guide . templatetags . improv_guide_extras import urlencodedurl [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] [EOL] class TestSitemap ( TestCase ) : [EOL] def test_sitemap_can_be_loaded ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] [EOL] class YourTestClass ( TestCase ) : [EOL] def setUp ( self ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def tearDown ( self ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def test_sitemap_can_be_loaded ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import django . db . models . deletion [EOL] import django_countries . fields [EOL] import uk_improv_guide . lib . adminable [EOL] import uk_improv_guide . lib . site_mappable [EOL] import uk_improv_guide . lib . slack_notification_mixin [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , django_countries . fields . CountryField ( default = [string] , max_length = [number] ) , ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ] , options = { [string] : [string] , [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( blank = True , default = None , null = True , on_delete = django . db . models . deletion . SET_DEFAULT , to = [string] , verbose_name = [string] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import uuid [EOL] [EOL] import django . db . models . deletion [EOL] import django_countries . fields [EOL] import uk_improv_guide . lib . adminable [EOL] import uk_improv_guide . lib . site_mappable [EOL] import uk_improv_guide . lib . slack_notification_mixin [EOL] import uk_improv_guide . models . fields . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False , primary_key = True , serialize = False , ) , ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , validators = [ uk_improv_guide . models . fields . fields . validate_twitter_handle ] , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] , verbose_name = [string] ) , ) , ( [string] , models . URLField ( blank = True , default = [string] , max_length = [number] , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( default = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] ) , ) , ( [string] , models . CharField ( default = [string] , max_length = [number] ) ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , verbose_name = [string] ) , ) , ] , options = { [string] : [ [string] , [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , validators = [ uk_improv_guide . models . fields . fields . validate_twitter_handle ] , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] , verbose_name = [string] ) , ) , ( [string] , models . URLField ( blank = True , default = [string] , max_length = [number] , verbose_name = [string] , ) , ) , ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False , primary_key = True , serialize = False , ) , ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , django_countries . fields . CountryField ( default = [string] , max_length = [number] ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , validators = [ uk_improv_guide . models . fields . fields . validate_twitter_handle ] , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) , ) , ( [string] , models . CharField ( default = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) , ) , ( [string] , models . CharField ( blank = True , max_length = [number] , verbose_name = [string] ) , ) , ( [string] , django_countries . fields . CountryField ( default = [string] , max_length = [number] ) , ) , ( [string] , models . ImageField ( upload_to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , default = None , null = True , on_delete = django . db . models . deletion . SET_DEFAULT , to = [string] , verbose_name = [string] , ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( blank = True , default = [string] , max_length = [number] , validators = [ uk_improv_guide . models . fields . fields . validate_twitter_handle ] , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] , verbose_name = [string] ) , ) , ( [string] , models . URLField ( blank = True , default = [string] , max_length = [number] , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . ManyToManyField ( blank = True , related_name = [string] , to = [string] , verbose_name = [string] , ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , max_length = [number] , ) , ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . ManyToManyField ( blank = True , related_name = [string] , to = [string] , verbose_name = [string] , ) , ) , ] , options = { [string] : [string] , [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( blank = True , related_name = [string] , to = [string] , verbose_name = [string] , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] , max_length = [number] ) , ) , ( [string] , models . DateTimeField ( verbose_name = [string] ) , ) , ( [string] , models . DateTimeField ( verbose_name = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , ) , ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] , verbose_name = [string] , ) , ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] , verbose_name = [string] , ) , ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . URLField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , max_length = [number] , ) , ) , ( [string] , models . DateTimeField ( verbose_name = [string] ) ) , ( [string] , models . FloatField ( default = [number] , help_text = [string] , verbose_name = [string] , ) , ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , ) , ) , ( [string] , models . ManyToManyField ( blank = True , related_name = [string] , to = [string] , ) , ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] , verbose_name = [string] , ) , ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , ) , ) , ( [string] , models . ImageField ( blank = True , upload_to = [string] ) ) , ( [string] , models . DateTimeField ( verbose_name = [string] ) , ) , ( [string] , models . FloatField ( help_text = [string] , verbose_name = [string] , ) , ) , ( [string] , models . IntegerField ( help_text = [string] , verbose_name = [string] , ) , ) , ( [string] , models . BooleanField ( verbose_name = [string] ) , ) , ( [string] , models . URLField ( blank = True , help_text = [string] , max_length = [number] , verbose_name = [string] , ) , ) , ( [string] , models . ForeignKey ( help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] , ) , ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] , ) , ) , ( [string] , models . ForeignKey ( help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , ) , ) , ] , options = { [string] : [ [string] ] , } , bases = ( uk_improv_guide . lib . slack_notification_mixin . SlackNotificationMixin , uk_improv_guide . lib . site_mappable . SiteMapThing , uk_improv_guide . lib . adminable . AdminableObject , models . Model , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] , [string] ] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] , [string] ] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . simple_tag def urlencodedurl ( * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] import logging [EOL] import datetime [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] import uk_improv_guide [EOL] from django . shortcuts import render [EOL] from uk_improv_guide import settings [EOL] from uk_improv_guide . models . event import Event , get_events_after_datetime [EOL] from uk_improv_guide . models . performer import get_featured_performers [EOL] from uk_improv_guide . models . team import get_featured_teams [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def home ( request , event_days = [number] ) : [EOL] events = get_events_after_datetime ( dt = datetime . datetime . now ( ) ) [ : [number] ] [EOL] return render ( request , [string] , { [string] : [string] , [string] : event_days , [string] : events , [string] : get_featured_teams ( ) , [string] : get_featured_performers ( teachers = True ) , [string] : uk_improv_guide . __version__ , [string] : settings . ENIRONMENT_NAME , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . performer import Performer , get_all_performers [EOL] [EOL] [EOL] def teachers ( request ) : [EOL] all_performers = get_all_performers ( teachers_only = True ) [EOL] title = [string] [EOL] return render ( request , [string] , { [string] : title , [string] : all_performers } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import datetime [EOL] [EOL] import pytz [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . team import Team , get_team_by_id [EOL] [EOL] [EOL] def team ( request , id ) : [EOL] now = pytz . utc . localize ( datetime . datetime . now ( ) ) [EOL] this_team = get_team_by_id ( id ) [EOL] title = f" [string] { this_team . name }" [EOL] events = this_team . event_set . all ( ) . order_by ( [string] ) [EOL] players = this_team . players . all ( ) [EOL] [EOL] future_events = [ e for e in events if e . start_time > now ] [EOL] past_events = [ e for e in events if e . start_time <= now ] [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_team , [string] : future_events , [string] : past_events , [string] : players , [string] : this_team , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import uk_improv_guide [EOL] import builtins [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . festival import ( Festival , get_festival_by_id , get_festivals_after_datetime , ) [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] [EOL] def festival ( request , id ) : [EOL] this_festival = get_festival_by_id ( id ) [EOL] title = f"{ this_festival . name }" [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_festival , [string] : this_festival . teachers . all ( ) , [string] : this_festival . teams . all ( ) , [string] : this_festival . teachers . all ( ) , [string] : this_festival , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import datetime [EOL] from typing import Optional [EOL] [EOL] from django . shortcuts import render [EOL] from pytz import timezone [EOL] from uk_improv_guide . models . course import Course , get_course_by_id [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] [EOL] def days_until_start ( course , now = None ) : [EOL] now = now or datetime . datetime . now ( tz = timezone ( [string] ) ) [EOL] td = course . start_time - now [EOL] return td . days [EOL] [EOL] [EOL] def course ( request , id ) : [EOL] this_course = get_course_by_id ( id ) [EOL] title = f"{ this_course . school . name } [string] { this_course . name }" [EOL] venue = this_course . venue [EOL] [EOL] _days_until_start = days_until_start ( this_course ) [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_course , [string] : _days_until_start < [number] , [string] : _days_until_start , [string] : venue , [string] : this_course , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import itertools [EOL] import itertools [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . city import get_all_cities [EOL] from uk_improv_guide . models . course import get_all_courses [EOL] from uk_improv_guide . models . event import get_all_events [EOL] from uk_improv_guide . models . festival import get_all_festivals [EOL] from uk_improv_guide . models . performer import get_all_performers [EOL] from uk_improv_guide . models . resource import get_all_resources [EOL] from uk_improv_guide . models . school import get_all_schools [EOL] from uk_improv_guide . models . team import get_all_teams [EOL] [EOL] [EOL] def robots_txt ( request ) : [EOL] return render ( request , [string] , content_type = [string] ) [EOL] [EOL] [EOL] def sitemap ( request ) : [EOL] everything = itertools . chain ( get_all_schools ( ) , get_all_teams ( ) , get_all_events ( ) , get_all_performers ( ) , get_all_teams ( ) , get_all_courses ( ) , get_all_festivals ( ) , get_all_resources ( ) , get_all_cities ( ) , ) [EOL] [EOL] objects = [ o . sitemap_url_data ( request ) for o in everything ] [EOL] [EOL] return render ( request , [string] , { [string] : objects } , content_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models import City , Venue [EOL] from uk_improv_guide . models . city import get_city_by_id [EOL] from uk_improv_guide . models . event import Event , get_events_for_city [EOL] from uk_improv_guide . models . venue import get_venues_for_city [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def city ( request , city_id ) : [EOL] this_city = get_city_by_id ( city_id ) [EOL] title = this_city . name [EOL] events = get_events_for_city ( city_id = city_id ) [EOL] venues = get_venues_for_city ( city_id = city_id ) [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_city , [string] : this_city , [string] : events , [string] : venues , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models import City [EOL] from uk_improv_guide . models . city import get_all_cities [EOL] [EOL] [EOL] def cities ( request ) : [EOL] cities = get_all_cities ( ) [EOL] return render ( request , [string] , { [string] : [string] , [string] : cities } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . school import School , get_all_schools [EOL] [EOL] [EOL] def schools ( request ) : [EOL] schools = get_all_schools ( ) [EOL] [EOL] schools_with_image = [ s for s in schools if s . image ] [EOL] schools_without_image = [ s for s in schools if not s . image ] [EOL] [EOL] return render ( request , [string] , { [string] : [string] , [string] : schools_with_image , [string] : schools_without_image , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Sequence [EOL] import ics [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] from django . http import HttpResponse [EOL] from django . urls import reverse [EOL] from ics import Calendar [EOL] from ics import Event as ICSEvent [EOL] from uk_improv_guide . models . event import Event [EOL] from uk_improv_guide . models . team import Team , get_team_by_id [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def team_event_calendar ( request , id ) : [EOL] team = get_team_by_id ( id ) [EOL] title = f" [string] { team . name }" [EOL] [EOL] events = list ( team . event_set . all ( ) ) [EOL] [EOL] log . warning ( f" [string] { events }" ) [EOL] [EOL] c = Calendar ( ) [EOL] [EOL] for event in events : [EOL] duration = datetime . timedelta ( seconds = event . duration * [number] * [number] ) [EOL] [EOL] location = f"{ event . venue . name } [string] { event . venue . address } [string] { event . venue . city } [string] { event . venue . postcode } [string] { event . venue . country . name }" [EOL] url = request . build_absolute_uri ( reverse ( [string] , kwargs = { [string] : event . id } ) ) [EOL] description = f"{ team . name } [string] { event . name } [string] { event . venue . name }" [EOL] [EOL] e = ICSEvent ( name = event . name , duration = duration , description = description , location = location , url = url , transparent = False , ) [EOL] [EOL] c . events . add ( e ) [EOL] c . events [EOL] [EOL] content = [string] . join ( c ) [EOL] response = HttpResponse ( content , [string] , [number] ) [EOL] [EOL] response [ [string] ] = f" [string] { team . id } [string] " [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . resource import Resource , get_all_resources [EOL] [EOL] [EOL] def resources ( request ) : [EOL] all_podcasts = get_all_resources ( ) . filter ( resource_type = [string] ) [EOL] title = [string] [EOL] return render ( request , [string] , { [string] : title , [string] : all_podcasts } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [EOL] def contribute ( request ) : [EOL] return render ( request , [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] def contribute_item ( request , model ) : [EOL] return render ( request , [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] def privacy ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def terms ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import uk_improv_guide [EOL] import builtins [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . event import ( Event , get_event_by_id , get_events_after_datetime , ) [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] [EOL] def event ( request , id ) : [EOL] this_event = get_event_by_id ( id ) [EOL] title = f"{ this_event . name }" [EOL] venue = this_event . venue [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_event , [string] : venue , [string] : this_event . teams . all ( ) , [string] : this_event , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import uk_improv_guide [EOL] import builtins [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models . resource import Resource , get_podcast_by_id [EOL] [EOL] [EOL] def resource ( request , id ) : [EOL] this_resource = get_podcast_by_id ( id ) [EOL] title = f" [string] { this_resource . name }" [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_resource , [string] : this_resource } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from pytz import timezone [EOL] from uk_improv_guide . models . course import Course [EOL] from uk_improv_guide . models . performer import Performer [EOL] from uk_improv_guide . models . school import School , get_school_by_id [EOL] from uk_improv_guide . models . venue import Venue [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def school ( request , id ) : [EOL] now = datetime . datetime . now ( tz = timezone ( [string] ) ) [EOL] this_school = get_school_by_id ( id ) [EOL] title = this_school . name [EOL] [EOL] teachers = this_school . teachers . order_by ( [string] , [string] ) [EOL] [EOL] courses = this_school . courses . filter ( start_time__gt = now ) [EOL] log . warning ( f" [string] { courses }" ) [EOL] venues = this_school . venue_set . order_by ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_school , [string] : teachers , [string] : venues , [string] : courses , [string] : this_school , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import src [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . urls import reverse_lazy [EOL] from django . views import generic [EOL] [EOL] [EOL] class SignUp ( generic . CreateView ) : [EOL] form_class = UserCreationForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] template_name = [string] [EOL] [EOL] [EOL] register = SignUp . as_view ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.views.register.SignUp]$ 0 0 0 $typing.Type[src.uk_improv_guide.uk_improv_guide.views.register.SignUp]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import datetime [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from pytz import timezone [EOL] from uk_improv_guide . models . festival import Festival , get_festivals_after_datetime [EOL] [EOL] [EOL] def festivals ( request ) : [EOL] now = datetime . datetime . now ( tz = timezone ( [string] ) ) [EOL] festivals = get_festivals_after_datetime ( now ) [EOL] title = [string] [EOL] return render ( request , [string] , { [string] : [string] , [string] : festivals } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models import Course , Event , Team [EOL] from uk_improv_guide . models . event import get_events_after_datetime_for_performer_id [EOL] from uk_improv_guide . models . performer import Performer , get_performer_by_id [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def performer ( request , id ) : [EOL] now = datetime . datetime . now ( ) [EOL] this_performer = get_performer_by_id ( id ) [EOL] courses = this_performer . courses . all [EOL] teams = this_performer . plays_for . all [EOL] [EOL] events = get_events_after_datetime_for_performer_id ( now , this_performer . id ) [EOL] [EOL] title = f"{ this_performer . full_name ( ) }" [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_performer , [string] : teams , [string] : events , [string] : courses , [string] : this_performer , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from uk_improv_guide . models import Event [EOL] from uk_improv_guide . models . venue import Venue , get_venue_by_id [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def venue ( request , id ) : [EOL] this_venue = get_venue_by_id ( id ) [EOL] title = this_venue . name [EOL] [EOL] events = this_venue . event_set . order_by ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : title , [string] : this_venue , [string] : events , [string] : this_venue , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence [EOL] import typing [EOL] import uk_improv_guide [EOL] import builtins [EOL] import datetime [EOL] import datetime [EOL] from typing import Sequence [EOL] [EOL] from django . shortcuts import render [EOL] from pytz import timezone [EOL] from uk_improv_guide . models . event import Event , get_events_after_datetime [EOL] [EOL] [EOL] def events ( request ) : [EOL] now = datetime . datetime . now ( tz = timezone ( [string] ) ) [EOL] events = get_events_after_datetime ( now ) [EOL] title = [string] [EOL] return render ( request , [string] , { [string] : [string] , [string] : events } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class AdminInfo : [EOL] app_label = ... [EOL] model_name = ... [EOL] obj_id = ... [EOL] [EOL] def admin_change_url ( self ) : [EOL] return f" [string] { self . app_label . lower ( ) } [string] { self . model_name . lower ( ) } [string] { self . obj_id } [string] " [EOL] [EOL] def admin_history_url ( self ) : [EOL] return f" [string] { self . app_label . lower ( ) } [string] { self . model_name . lower ( ) } [string] { self . obj_id } [string] " [EOL] [EOL] [EOL] class AdminableObject : [EOL] def get_admin_info ( self ) : [EOL] return AdminInfo ( self . _meta . app_label , self . _meta . object_name , self . id ) [EOL] [EOL] def is_adminable ( self ) : [EOL] return True [EOL] [EOL] def get_absolute_url ( self ) : [EOL] from django . urls import reverse [EOL] [EOL] return reverse ( self . url_base , args = [ str ( self . id ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , MutableMapping [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from typing import MutableMapping , Type [EOL] [EOL] from django . contrib . sitemaps import Sitemap [EOL] from django . db import models [EOL] [EOL] GLOBAL_SITEMAPS = { } [EOL] [EOL] [EOL] class BaseSiteMap ( Sitemap ) : [EOL] def items ( self ) : [EOL] return self . model . objects . filter ( is_draft = False ) [EOL] [EOL] def lastmod ( self , obj ) : [EOL] return obj . pub_date [EOL] [EOL] [EOL] def make_sitemap_for_model ( model , changefreq = [string] , priority = [number] ) : [EOL] sitemap_name = f"{ model . __name__ }" [EOL] class_args = { [string] : model , [string] : changefreq , [string] : priority } [EOL] sitemap_type = type ( sitemap_name , ( BaseSiteMap , ) , class_args ) [EOL] return sitemap_type [EOL] [EOL] [EOL] def sitemap_for_model ( model , ** kwargs ) : [EOL] return GLOBAL_SITEMAPS . setdefault ( model . __name__ , make_sitemap_for_model ( model , ** kwargs ) ) [EOL] [EOL] [EOL] def register_model_for_site_map ( m ) : [EOL] sitemap_for_model ( m ) [EOL] return m [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django.contrib.sitemaps.Sitemap]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django.contrib.sitemaps.Sitemap]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [EOL] import requests [EOL] from uk_improv_guide import settings [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class SlackNotificationMixin : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import django [EOL] import builtins [EOL] from dataclasses import dataclass [EOL] from typing import Optional [EOL] [EOL] from django . db import models [EOL] from django . http import HttpRequest [EOL] [EOL] [EOL] @ dataclass class SiteMapInfo : [EOL] loc = ... [EOL] lastmod = ... [EOL] changefreq = [string] [EOL] priority = [number] [EOL] [EOL] [EOL] class SiteMapThing : [EOL] def sitemap_url_data ( self , request , changefreq = [string] , priority = [number] ) : [EOL] return SiteMapInfo ( loc = request . build_absolute_uri ( f" [string] { self . url_base } [string] { self . id }" ) , lastmod = None , changefreq = changefreq , priority = priority , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from uk_improv_guide . models import Performer [EOL] [EOL] sal = Performer ( first_name = [string] , family_name = [string] , facebook_link = [string] , contact_email_address = [string] , ) . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0