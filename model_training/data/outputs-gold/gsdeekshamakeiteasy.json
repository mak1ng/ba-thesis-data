from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from django . shortcuts import render [EOL] from django . contrib . auth . decorators import login_required [EOL] [EOL] [EOL] @ login_required def home ( request ) : [EOL] return render ( request , [string] , { } )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import woid [EOL] from django . shortcuts import render , redirect [EOL] [EOL] from django . contrib . auth import ( authenticate , get_user_model , login , logout ) [EOL] [EOL] from . forms import UserLoginForm , UserRegisterForm [EOL] [EOL] [EOL] def login_view ( request ) : [EOL] next = request . GET . get ( [string] ) [EOL] form = UserLoginForm ( request . POST or None ) [EOL] if form . is_valid ( ) : [EOL] username = form . cleaned_data . get ( [string] ) [EOL] password = form . cleaned_data . get ( [string] ) [EOL] user = authenticate ( username = username , password = password ) [EOL] login ( request , user ) [EOL] if next : [EOL] return redirect ( next ) [EOL] return redirect ( [string] ) [EOL] [EOL] context = { [string] : form , } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def register_view ( request ) : [EOL] next = request . GET . get ( [string] ) [EOL] form = UserRegisterForm ( request . POST or None ) [EOL] if form . is_valid ( ) : [EOL] user = form . save ( commit = False ) [EOL] password = form . cleaned_data . get ( [string] ) [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] new_user = authenticate ( username = user . username , password = password ) [EOL] login ( request , new_user ) [EOL] if next : [EOL] return redirect ( next ) [EOL] return redirect ( [string] ) [EOL] [EOL] context = { [string] : form , } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def logout_view ( request ) : [EOL] logout ( request ) [EOL] return redirect ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Type [EOL] import typing [EOL] import woid [EOL] from django import forms [EOL] from django . contrib . auth import ( authenticate , get_user_model ) [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserLoginForm ( forms . Form ) : [EOL] username = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] username = self . cleaned_data . get ( [string] ) [EOL] password = self . cleaned_data . get ( [string] ) [EOL] [EOL] if username and password : [EOL] user = authenticate ( username = username , password = password ) [EOL] if not user : [EOL] raise forms . ValidationError ( [string] ) [EOL] if not user . check_password ( password ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] if not user . is_active : [EOL] raise forms . ValidationError ( [string] ) [EOL] return super ( UserLoginForm , self ) . clean ( * args , ** kwargs ) [EOL] [EOL] [EOL] class UserRegisterForm ( forms . ModelForm ) : [EOL] email = forms . EmailField ( label = [string] ) [EOL] email2 = forms . EmailField ( label = [string] ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] email = self . cleaned_data . get ( [string] ) [EOL] email2 = self . cleaned_data . get ( [string] ) [EOL] if email != email2 : [EOL] raise forms . ValidationError ( [string] ) [EOL] email_qs = User . objects . filter ( email = email ) [EOL] if email_qs . exists ( ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return super ( UserRegisterForm , self ) . clean ( * args , ** kwargs )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserLoginForm]$ 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserLoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.accounts.forms.UserRegisterForm.Meta]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
[comment] [EOL] import builtins [EOL] from typing import Any , Tuple , List , Type [EOL] import typing [EOL] import woid [EOL] from django . db import models [EOL] class Service ( models . Model ) : [EOL] GOOD = [string] [EOL] ERROR = [string] [EOL] CRAWLING = [string] [EOL] CURRENT_STATUS = ( ( GOOD , [string] ) , ( ERROR , [string] ) , ( CRAWLING , [string] ) ) [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( max_length = [number] , unique = True ) [EOL] url = models . URLField ( ) [EOL] story_url = models . URLField ( ) [EOL] last_run = models . DateTimeField ( null = True , blank = True ) [EOL] status = models . CharField ( max_length = [number] , default = GOOD , choices = CURRENT_STATUS ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : self . name , [string] : self . slug , [string] : self . url } [EOL] [EOL] def get_story_template ( self ) : [EOL] template = [string] . format ( self . slug ) [EOL] return template [EOL] [EOL] [EOL] class Story ( models . Model ) : [EOL] TEXT = [string] [EOL] URL = [string] [EOL] IMAGE = [string] [EOL] CONTENT_TYPES = ( ( TEXT , [string] ) , ( URL , [string] ) , ( IMAGE , [string] ) , ) [EOL] [EOL] NEW = [string] [EOL] OK = [string] [EOL] ERROR = [string] [EOL] STATUS = ( ( NEW , [string] ) , ( OK , [string] ) , ( ERROR , [string] ) , ) [EOL] [EOL] service = models . ForeignKey ( Service , related_name = [string] , on_delete = models . CASCADE ) [EOL] code = models . CharField ( max_length = [number] ) [EOL] title = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] url = models . URLField ( max_length = [number] , null = True , blank = True ) [EOL] content = models . TextField ( null = True , blank = True ) [EOL] content_type = models . CharField ( max_length = [number] , choices = CONTENT_TYPES , null = True , blank = True ) [EOL] start_comments = models . IntegerField ( default = [number] ) [EOL] comments = models . IntegerField ( default = [number] ) [EOL] start_score = models . IntegerField ( default = [number] ) [EOL] score = models . IntegerField ( default = [number] ) [EOL] date = models . DateField ( auto_now_add = True , db_index = True ) [EOL] status = models . CharField ( max_length = [number] , default = NEW , choices = STATUS ) [EOL] top_ten = models . BooleanField ( default = False ) [EOL] nsfw = models . BooleanField ( default = False ) [EOL] description = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] unique_together = ( ( [string] , [string] , [string] ) , ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . code [EOL] [EOL] def build_url ( self ) : [EOL] self . url = [string] . format ( self . service . story_url , self . code ) [EOL] return self . url [EOL] [EOL] def get_template ( self ) : [EOL] return self . service . get_story_template ( ) [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : self . code , [string] : self . title , [string] : self . url , [string] : self . comments , [string] : self . score , [string] : self . description } [EOL] [EOL] [EOL] class StoryUpdate ( models . Model ) : [EOL] story = models . ForeignKey ( Story , related_name = [string] , on_delete = models . CASCADE ) [EOL] comments_changes = models . IntegerField ( default = [number] ) [EOL] score_changes = models . IntegerField ( default = [number] ) [EOL] updated_at = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . story . code [EOL] [comment] [EOL] [EOL] [EOL] class Tweet ( models . Model ) : [EOL] tweet_id = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] twwet_text = models . TextField ( ) [EOL] published_date = models . DateTimeField ( blank = True , null = True ) [EOL] is_active = models . BooleanField ( default = True ) [EOL] def __str__ ( self ) : [EOL] return self . tweet_text [EOL] [EOL] from django import forms [EOL] from django . contrib . auth import ( authenticate , get_user_model ) [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserLoginForm ( forms . Form ) : [EOL] username = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] username = self . cleaned_data . get ( [string] ) [EOL] password = self . cleaned_data . get ( [string] ) [EOL] [EOL] if username and password : [EOL] user = authenticate ( username = username , password = password ) [EOL] if not user : [EOL] raise forms . ValidationError ( [string] ) [EOL] if not user . check_password ( password ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] if not user . is_active : [EOL] raise forms . ValidationError ( [string] ) [EOL] return super ( UserLoginForm , self ) . clean ( * args , ** kwargs ) [EOL] [EOL] [EOL] class UserRegisterForm ( forms . ModelForm ) : [EOL] email = forms . EmailField ( label = [string] ) [EOL] email2 = forms . EmailField ( label = [string] ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] email = self . cleaned_data . get ( [string] ) [EOL] email2 = self . cleaned_data . get ( [string] ) [EOL] if email != email2 : [EOL] raise forms . ValidationError ( [string] ) [EOL] email_qs = User . objects . filter ( email = email ) [EOL] if email_qs . exists ( ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return super ( UserRegisterForm , self ) . clean ( * args , ** kwargs )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Story]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.StoryUpdate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.StoryUpdate]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.StoryUpdate]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.StoryUpdate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Tweet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Tweet]$ 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Tweet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.Tweet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserLoginForm]$ 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserLoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[woid.apps.services.models.UserRegisterForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . models import Service [EOL] [EOL] [EOL] def services ( request ) : [EOL] return { [string] : Service . objects . values_list ( [string] , flat = True ) . order_by ( [string] ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
[comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import models , migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] from woid . apps . services . models import Service [EOL] [EOL] [EOL] def status ( request ) : [EOL] services = Service . objects . all ( ) [EOL] return render ( request , [string] , { [string] : services } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter ( [string] ) def startswith ( text , starts ) : [EOL] starts = [string] % starts [EOL] if isinstance ( text , str ) : [EOL] return text . startswith ( starts ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import tweepy [EOL] from tweepy . auth import OAuthHandler [EOL] from . models import Tweet [EOL] [EOL] [EOL] def user_tweets ( ) : [EOL] auth = OAuthHandler ( [string] , [string] ) [EOL] auth . set_access_token ( [string] , [string] ) [EOL] api = tweepy . API ( auth ) [EOL] user_tweets = api . user_timeline ( count = [number] ) [EOL] return user_tweets [EOL] [EOL] def save_to_db ( ) : [EOL] original_tweets = user_tweets ( ) [EOL] for original_tweet in original_tweets : [EOL] if not original_tweet . retweeted : [EOL] if not Tweet . objects . filter ( tweet_id = original_tweet . id ) : [EOL] new_tweet = Tweet ( tweet_id = original_tweet . id , tweet_text = original_tweet . text , published_date = original_tweet . created_at , is_active = True ) [EOL] new_tweet . save ( ) [EOL] [EOL] def set_inactive ( pk ) : [EOL] Tweet . objects . filter ( tweet_id = pk ) . update ( is_active = False ) [EOL] [EOL] def set_active ( pk ) : [EOL] Tweet . objects . filter ( tweet_id = pk ) . update ( is_active = True ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0