from setuptools import find_packages , setup [EOL] [EOL] setup ( name = [string] , version = [string] , packages = find_packages ( ) , include_package_data = True , zip_safe = False , install_requires = [ ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sqlite3 [EOL] [EOL] import click [EOL] from flask import g , current_app [EOL] from flask . cli import with_appcontext [EOL] [EOL] [EOL] def get_db ( ) : [EOL] if [string] not in g : [EOL] g . db = sqlite3 . connect ( current_app . config [ [string] ] , detect_types = sqlite3 . PARSE_DECLTYPES ) [EOL] g . db . row_factory = sqlite3 . Row [EOL] [EOL] return g . db [EOL] [EOL] [EOL] def close_db ( error = None ) : [EOL] database = g . pop ( [string] , None ) [EOL] [EOL] if error is not None : [EOL] print ( error ) [EOL] [EOL] if database is not None : [EOL] database . close ( ) [EOL] [EOL] [EOL] def init_db ( ) : [EOL] database = get_db ( ) [EOL] [EOL] with current_app . open_resource ( [string] ) as schema_file : [EOL] sql_script = schema_file . read ( ) . decode ( [string] ) [EOL] print ( sql_script ) [EOL] database . executescript ( sql_script ) [EOL] [EOL] [EOL] @ click . command ( [string] ) @ with_appcontext def init_db_command ( ) : [EOL] init_db ( ) [EOL] click . echo ( [string] ) [EOL] [EOL] [EOL] def init_app ( app ) : [EOL] app . teardown_appcontext ( close_db ) [EOL] app . cli . add_command ( init_db_command ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import ( Blueprint , render_template , request , flash , g , redirect , url_for , abort , current_app ) [EOL] [EOL] from flaskr . auth import login_required [EOL] from flaskr . db import get_db [EOL] [EOL] BLOG_BP = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ BLOG_BP . route ( [string] ) def index ( ) : [EOL] database = get_db ( ) [EOL] posts = database . execute ( [string] ) . fetchall ( ) [EOL] [EOL] flaskr_image_name = current_app . config [ [string] ] [EOL] [EOL] return render_template ( [string] , posts = posts , flaskr_image_name = flaskr_image_name ) [EOL] [EOL] [EOL] @ BLOG_BP . route ( [string] , methods = ( [string] , [string] ) ) @ login_required def create ( ) : [EOL] if request . method == [string] : [EOL] title = request . form [ [string] ] [EOL] body = request . form [ [string] ] [EOL] error = None [EOL] [EOL] if not title : [EOL] error = [string] [EOL] [EOL] if error is not None : [EOL] flash ( error ) [EOL] else : [EOL] database = get_db ( ) [EOL] database . execute ( [string] [string] , ( title , body , g . user [ [string] ] ) , ) [EOL] database . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] def get_post ( id , check_author = True ) : [comment] [EOL] post = ( get_db ( ) . execute ( [string] , id , ) . fetchone ( ) ) [EOL] [EOL] if post is None : [EOL] abort ( [number] , [string] . format ( id ) ) [EOL] [EOL] if check_author and post [ [string] ] != g . user [ [string] ] : [EOL] abort ( [number] ) [EOL] [EOL] return post [EOL] [EOL] [EOL] @ BLOG_BP . route ( [string] , methods = ( [string] , [string] ) ) @ login_required def update ( id ) : [comment] [EOL] post = get_post ( id ) [EOL] [EOL] if request . method == [string] : [EOL] title = request . form [ [string] ] [EOL] body = request . form [ [string] ] [EOL] error = None [EOL] [EOL] if not title : [EOL] error = [string] [EOL] [EOL] if error is not None : [EOL] flash ( error ) [EOL] else : [EOL] db = get_db ( ) [EOL] db . execute ( [string] [string] , ( title , body , id ) ) [EOL] db . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] , post = post ) [EOL] [EOL] [EOL] @ BLOG_BP . route ( [string] , methods = [ [string] ] ) @ login_required def delete ( id ) : [comment] [EOL] get_post ( id ) [EOL] db = get_db ( ) [EOL] db . execute ( [string] , id ) [EOL] db . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import flask [EOL] from os import getenv , makedirs [EOL] [EOL] from flask import Flask [EOL] [EOL] from flaskr import db , auth , blog [EOL] from flaskr . config import get_config [EOL] [EOL] [EOL] def create_app ( test_config = None ) : [EOL] app = Flask ( __name__ ) [EOL] [EOL] try : [EOL] if test_config is not None : [EOL] environment = [string] [EOL] else : [EOL] environment = getenv ( [string] ) [EOL] app . config . from_object ( get_config ( environment ) ) [EOL] except ValueError as error : [EOL] print ( error ) [EOL] exit ( [number] ) [EOL] [EOL] @ app . route ( [string] ) def health_check ( ) : [comment] [EOL] return [string] [EOL] [EOL] db . init_app ( app ) [EOL] [EOL] app . register_blueprint ( auth . AUTH_BP ) [EOL] app . register_blueprint ( blog . BLOG_BP ) [EOL] [EOL] app . add_url_rule ( [string] , endpoint = [string] ) [EOL] [EOL] print ( app . config ) [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import functools [EOL] [EOL] from flask import ( Blueprint , request , render_template , session , redirect , url_for , flash , g , ) [EOL] from werkzeug . security import check_password_hash , generate_password_hash [EOL] [EOL] from flaskr . db import get_db [EOL] [EOL] AUTH_BP = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ AUTH_BP . route ( [string] , methods = ( [string] , [string] ) ) def register ( ) : [EOL] if request . method == [string] : [EOL] username = request . form [ [string] ] [EOL] password = request . form [ [string] ] [EOL] database = get_db ( ) [EOL] error = None [EOL] [EOL] if not username : [EOL] error = [string] [EOL] elif not password : [EOL] error = [string] [EOL] elif ( database . execute ( [string] , ( username , ) ) . fetchone ( ) is not None ) : [EOL] error = [string] . format ( username ) [EOL] [EOL] if error is None : [EOL] database . execute ( [string] , ( username , generate_password_hash ( password ) ) , ) [EOL] database . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] flash ( error ) [EOL] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ AUTH_BP . route ( [string] , methods = ( [string] , [string] ) ) def login ( ) : [EOL] if request . method == [string] : [EOL] username = request . form [ [string] ] [EOL] password = request . form [ [string] ] [EOL] database = get_db ( ) [EOL] error = None [EOL] user = database . execute ( [string] , ( username , ) ) . fetchone ( ) [EOL] [EOL] if user is None : [EOL] error = [string] [EOL] elif not check_password_hash ( user [ [string] ] , password ) : [EOL] error = [string] [EOL] [EOL] if error is None : [EOL] session . clear ( ) [EOL] session [ [string] ] = user [ [string] ] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] flash ( error ) [EOL] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ AUTH_BP . before_app_request def load_logged_in_user ( ) : [EOL] user_id = session . get ( [string] ) [EOL] [EOL] if user_id is None : [EOL] g . user = None [EOL] else : [EOL] g . user = ( get_db ( ) . execute ( [string] , ( user_id , ) ) . fetchone ( ) ) [EOL] [EOL] [EOL] @ AUTH_BP . route ( [string] ) def logout ( ) : [EOL] session . clear ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def login_required ( view ) : [EOL] @ functools . wraps ( view ) def wrapped_view ( ** kwargs ) : [EOL] if g . user is None : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return view ( ** kwargs ) [EOL] [EOL] return wrapped_view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , Callable , Union , Optional [EOL] import typing [EOL] import flaskr [EOL] from os import getenv [EOL] [EOL] [EOL] class Config : [EOL] DEBUG = False [EOL] TESTING = False [EOL] SECRET_KEY = [string] [EOL] DATABASE_URI = [string] [EOL] FLASKR_IMAGE_NAME = getenv ( [string] ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . PORT = getenv ( [string] , [string] ) [EOL] [EOL] [EOL] class DevelopmentConfig ( Config ) : [EOL] DEBUG = True [EOL] DATABASE_URI = [string] [EOL] [EOL] [EOL] class RunningTestConfig ( Config ) : [EOL] TESTING = True [EOL] [EOL] [EOL] class ProductionConfig ( Config ) : [EOL] DATABASE_URI = getenv ( [string] , [string] ) [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] secret_key = getenv ( [string] ) [EOL] if secret_key is None : [EOL] raise ValueError ( [string] ) [EOL] self . SECRET_KEY = secret_key [EOL] [EOL] [EOL] def get_config ( environment ) : [EOL] config_map = { [string] : lambda : RunningTestConfig ( ) , [string] : lambda : DevelopmentConfig ( ) , [string] : lambda : ProductionConfig ( ) , } [EOL] [EOL] config = config_map . get ( environment ) [EOL] if config is None : [EOL] raise ValueError ( f" [string] { environment }" ) [EOL] return config ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from flaskr import create_app [EOL] [EOL] [EOL] @ pytest . fixture def app ( ) : [EOL] test_app = create_app ( { [string] : True } ) [EOL] yield test_app [EOL] [EOL] [EOL] @ pytest . fixture def client ( app ) : [EOL] return app . test_client ( ) [EOL] [EOL] [EOL] def test_health_check ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flaskr [EOL] import pytest [EOL] [EOL] from flaskr . config import get_config , Config , DevelopmentConfig , RunningTestConfig [EOL] [EOL] [EOL] def test_get_config_with_invalid_environment ( ) : [EOL] with pytest . raises ( ValueError ) as raised_exception : [EOL] get_config ( [string] ) [EOL] assert [string] in str ( raised_exception . value ) [EOL] [EOL] with pytest . raises ( ValueError ) as raised_exception : [EOL] get_config ( [string] ) [EOL] assert [string] in str ( raised_exception . value ) [EOL] [EOL] with pytest . raises ( ValueError ) as raised_exception : [EOL] get_config ( [string] ) [EOL] assert [string] in str ( raised_exception . value ) [EOL] [EOL] [EOL] def test_defaults ( ) : [EOL] config = Config ( ) [EOL] assert config . DEBUG is False [EOL] assert config . TESTING is False [EOL] assert config . SECRET_KEY == [string] [EOL] assert config . DATABASE_URI == [string] [EOL] assert config . PORT == [string] [EOL] [EOL] [EOL] def test_port ( monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = DevelopmentConfig ( ) [EOL] assert config . PORT == [string] [EOL] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] production_config = get_config ( [string] ) [EOL] assert production_config . PORT == [string] [EOL] [EOL] [EOL] def test_development_config ( ) : [EOL] config = get_config ( [string] ) [EOL] assert config . DEBUG is True [EOL] assert config . TESTING is False [EOL] assert config . SECRET_KEY == [string] [EOL] [EOL] [EOL] def test_test_config ( ) : [EOL] config = RunningTestConfig ( ) [EOL] assert config . TESTING is True [EOL] assert config . PORT == [string] [EOL] [EOL] [EOL] def test_secret_key ( monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = get_config ( [string] ) [EOL] assert config . SECRET_KEY == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0