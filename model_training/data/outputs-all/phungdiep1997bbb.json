from setuptools import setup [EOL] [EOL] setup ( name = [string] , packages = [ [string] ] , include_package_data = True , install_requires = [ ] , setup_requires = [ ] , tests_require = [ ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import subprocess [EOL] import typing [EOL] import subprocess as spr [EOL] import itertools [EOL] [EOL] [EOL] def files_changed ( sha = [string] , prefix = [string] ) : [EOL] cmd = [ [string] , [string] , [string] , [string] . format ( sha ) ] [EOL] process = spr . run ( cmd , stdout = spr . PIPE ) [EOL] diff = process . stdout . decode ( [string] ) . splitlines ( ) [EOL] print ( [string] , [string] . join ( diff ) ) [EOL] return [ fn for fn in diff if fn . startswith ( prefix ) and fn . endswith ( [string] ) ] [EOL] [EOL] [EOL] def ex_identifier ( path ) : [EOL] [comment] [EOL] return path . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] [EOL] [EOL] [EOL] def exercise_groups ( changed_files ) : [EOL] return dict ( itertools . groupby ( changed_files , ex_identifier , ) ) . keys ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] groups = exercise_groups ( files_changed ( ) ) [EOL] print ( [string] , [string] . join ( groups ) ) [EOL] results = [ ] [EOL] for group in groups : [EOL] cmd = [ [string] , [string] , [string] , [string] . format ( group ) , [string] ] [EOL] p = spr . run ( cmd , stdout = spr . PIPE , stderr = spr . PIPE ) [EOL] print ( [string] . format ( group ) ) [EOL] print ( p . stderr . decode ( [string] ) ) [EOL] print ( p . stdout . decode ( [string] ) ) [EOL] print ( [string] * [number] ) [EOL] results . append ( p . returncode ) [EOL] [EOL] if all ( map ( lambda x : x == [number] , results ) ) is True : [EOL] exit ( [number] ) [EOL] else : [EOL] exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] [EOL] [EOL] class TestExercise ( unittest . TestCase ) : [EOL] MESSAGE_FMT = [string] [EOL] [EOL] def _test_all ( self , func , cases ) : [EOL] for input_ , expect in cases : [EOL] output = func ( input_ ) [EOL] msg = self . MESSAGE_FMT . format ( input_ , expect , output ) [EOL] self . assertEqual ( output , expect , msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0
def test_truth ( ) : [EOL] assert [number] + [number] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] LAT_PER_100M = [number] / [number] [EOL] LONG_PER_100M = [number] / [number] [EOL] [EOL] [EOL] def lat_from_met ( met ) : [EOL] return LAT_PER_100M * met / [number] [EOL] [EOL] [EOL] def long_from_met ( met ) : [EOL] return LONG_PER_100M * met / [number] [EOL] [EOL] [EOL] def generate_coordinate ( center_point_lat , center_point_lng , radius = [number] , scan_radius = [number] ) : [EOL] [EOL] top = center_point_lat + lat_from_met ( radius ) [EOL] left = center_point_lng - long_from_met ( radius ) [EOL] [EOL] bottom = center_point_lat - lat_from_met ( radius ) [EOL] right = center_point_lng + long_from_met ( radius ) [EOL] [EOL] scan_radius_step = ( lat_from_met ( scan_radius ) , long_from_met ( scan_radius ) ) [EOL] lat = top [EOL] lng = left [EOL] while lat > bottom : [EOL] while lng < right : [EOL] yield ( lat , lng ) [EOL] lng += scan_radius_step [ [number] ] [EOL] lng = left [EOL] lat -= scan_radius_step [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] data = [string] [EOL] [comment] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] print ( solve ( data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] __doc__ = [string] [comment] [EOL] [EOL] [EOL] import json [comment] [EOL] import os [comment] [EOL] import pickle [comment] [EOL] import yaml [comment] [EOL] [EOL] [EOL] def your_function ( ) : [EOL] [docstring] [EOL] [comment] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] result = your_function ( ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] for i in solve ( ) : [EOL] print ( i ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] data = [number] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] result = [number] [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( * args ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] data = [number] [EOL] [EOL] [EOL] def squared ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( squared ( data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] __doc__ = [string] [comment] [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( __doc__ ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] data = [string] [EOL] print ( solve ( data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] data = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( text ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] for i in solve ( ) : [EOL] print ( i ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( numbers ) : [EOL] [docstring] [EOL] assert isinstance ( numbers , list ) [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [ - [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[comment] [EOL] [EOL] [EOL] def solve ( N ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( ip ) : [EOL] [docstring] [EOL] result = None [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] [EOL] ip = input ( [string] ) [EOL] print ( solve ( ip ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( octal ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] __doc__ = [string] [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( __doc__ ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] input_data = range ( [number] , [number] ) [EOL] print ( solve ( input_data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( text ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] ss = [string] [EOL] print ( solve ( ss ) ) [EOL] assert solve ( ss ) == [ [number] , [number] ] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( numbers ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( range ( [number] ) ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import Dict , Any , List , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] data = [ { [string] : [string] , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] } , ] [EOL] [EOL] [EOL] def solve ( last_year_data ) : [EOL] [docstring] [EOL] result = [ ] [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] students = data [EOL] [comment] [EOL] [EOL] result = solve ( students ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( numbers ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( range ( [number] , [number] ) ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] __doc__ = [string] [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( __doc__ ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] [docstring] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( year ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( [string] . format ( * solve ( [number] ) ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( numbers ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( range ( [number] ) ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Dict , Any , List [EOL] import typing [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def solve ( colors ) : [EOL] [docstring] [EOL] result = [ ] [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] colors = data [EOL] print ( solve ( colors ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def solve ( ) : [EOL] [docstring] [EOL] [EOL] result = None [EOL] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def solve ( input_data ) : [EOL] result = None [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( solve ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0