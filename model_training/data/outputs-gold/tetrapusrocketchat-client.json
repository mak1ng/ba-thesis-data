	0
import rocketchat [EOL] [docstring] [EOL] [EOL] import sys [EOL] [EOL] from . import Client [EOL] [EOL] try : [EOL] ws = Client ( sys . argv [ [number] ] , username = sys . argv [ [number] ] , password = sys . argv [ [number] ] ) [EOL] ws . run ( ) [EOL] except KeyboardInterrupt : [EOL] ws . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Client$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Client$ 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Client$ 0 0 0 0 0
from typing import Callable , Any , Union , List , Dict , Generator , Optional , Type [EOL] import builtins [EOL] import rocketchat [EOL] import logging [EOL] import ws4py [EOL] import typing [EOL] [docstring] [EOL] [EOL] import hashlib [EOL] import json [EOL] import logging [EOL] import uuid [EOL] [EOL] from abc import ABC , abstractmethod [EOL] from typing import ( Any , Callable , Dict , Generator , List , Optional , Union , ) [EOL] [EOL] from ws4py . client . threadedclient import WebSocketClient [EOL] from ws4py . messaging import TextMessage [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class HandlerSignal : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] DONE = HandlerSignal ( ) [EOL] [EOL] [EOL] class Message ( dict ) : [EOL] [docstring] [EOL] @ classmethod def decoder ( cls , obj ) : [EOL] [docstring] [EOL] return cls ( ** obj ) [EOL] [EOL] def __getattr__ ( self , attr ) : [EOL] [docstring] [EOL] return self [ attr ] [EOL] [EOL] [EOL] def generate_id ( ) : [EOL] [docstring] [EOL] return uuid . uuid4 ( ) . hex [EOL] [EOL] [EOL] Handler = Callable [ [ Message ] , Optional [ HandlerSignal ] ] [EOL] Task = Generator [ [string] , Message , None ] [EOL] TaskFactory = Callable [ [ Message ] , Task ] [EOL] Listener = Union [ Handler , TaskFactory ] [EOL] [EOL] [EOL] def get_handles ( funct ) : [EOL] [docstring] [EOL] return funct . __annotations__ . get ( [string] , [ ] ) [EOL] [EOL] [EOL] def add_handle ( funct , handle ) : [EOL] funct . __annotations__ . setdefault ( [string] , [ ] ) . append ( handle ) [EOL] [EOL] [EOL] def handles ( ** kwargs ) : [EOL] [docstring] [EOL] def decorator ( funct ) : [EOL] [docstring] [EOL] add_handle ( funct , kwargs ) [EOL] return funct [EOL] return decorator [EOL] [EOL] [EOL] class Client : [EOL] [docstring] [EOL] [comment] [EOL] handlers = ... [EOL] [EOL] user_id = None [EOL] [EOL] def __init__ ( self , domain , username = None , password = None ) : [EOL] [EOL] self . username = username [EOL] self . password = password [EOL] [EOL] self . ws = WebsocketWrapper ( self , f' [string] { domain } [string] ' , protocols = [ [string] , [string] ] ) [EOL] [EOL] self . handlers = [ ] [EOL] for method_name in dir ( self ) : [EOL] method = getattr ( self , method_name ) [EOL] if [string] in getattr ( method , [string] , [ ] ) : [EOL] self . register_handler ( method ) [EOL] [EOL] self . ws . connect ( ) [EOL] [EOL] def run ( self ) : [EOL] return self . ws . run_forever ( ) [EOL] [EOL] [comment] [EOL] def opened ( self ) : [EOL] [docstring] [EOL] self . send_message ( msg = [string] , version = [string] , support = [ [string] ] ) [EOL] [EOL] def received_message ( self , message ) : [EOL] [docstring] [EOL] event = json . loads ( message . data , object_hook = Message . decoder ) [EOL] [EOL] [comment] [EOL] handlers = [ handler for handler in self . handlers if any ( self . _trigger_matches ( trigger , event ) for trigger in get_handles ( handler ) ) ] [EOL] [EOL] for handler in handlers : [EOL] [comment] [EOL] result = handler ( event ) [EOL] if result is DONE : [EOL] self . handlers . remove ( handler ) [EOL] [EOL] def closed ( self , code , reason = None ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] self . ws . close ( ) [EOL] [EOL] [comment] [EOL] @ handles ( msg = [string] ) def on_ping ( self , _ ) : [EOL] [docstring] [EOL] self . send_message ( msg = [string] ) [EOL] [EOL] @ handles ( msg = [string] ) def on_connected ( self , msg ) : [EOL] [docstring] [EOL] print ( [number] ) [EOL] msg = yield Call ( [string] , { [string] : { [string] : self . username } , [string] : self . _hash_password ( self . password ) , } ) [EOL] [EOL] if [string] in msg : [EOL] logging . error ( [string] , msg . error . errorType , msg . error . message ) [EOL] self . close ( ) [EOL] [EOL] self . user_id = msg . result . id [EOL] [EOL] msg = yield Call ( [string] , { [string] : [number] } ) [EOL] [EOL] def on_join ( message ) : [EOL] [docstring] [EOL] event , room = message . fields . args [EOL] if event == [string] : [EOL] self . subscribe ( [string] , room [ [string] ] ) [EOL] [EOL] self . subscribe ( [string] , self . user_id + [string] , listener = on_join ) [EOL] [EOL] rooms = msg . result [ [string] ] [EOL] for room in rooms : [EOL] if room [ [string] ] != [string] : [EOL] self . subscribe ( [string] , room [ [string] ] ) [EOL] [EOL] [comment] [EOL] def send_message ( self , ** args ) : [EOL] [docstring] [EOL] data = json . dumps ( args ) [EOL] return self . ws . send ( data ) [EOL] [EOL] def call ( self , * args , callback = None , ** kwargs ) : [EOL] [docstring] [EOL] message = Call ( * args , ** kwargs ) [EOL] [EOL] if callback is not None : [EOL] self . register_handler ( callback , id = message . id ) [EOL] [EOL] return self . send_message ( ** message ) [EOL] [EOL] def subscribe ( self , name , event , listener = None ) : [EOL] [docstring] [EOL] if listener : [EOL] self . register_handler ( listener , collection = name , fields = { [string] : event } ) [EOL] [EOL] return self . send_message ( id = generate_id ( ) , msg = [string] , name = name , params = [ event , False ] ) [EOL] [EOL] @ staticmethod def _hash_password ( password ) : [EOL] [docstring] [EOL] return { [string] : hashlib . sha256 ( password . encode ( [string] ) ) . hexdigest ( ) , [string] : [string] } [EOL] [EOL] @ classmethod def _trigger_matches ( cls , trigger , event ) : [EOL] if isinstance ( trigger , dict ) : [EOL] for key , value in trigger . items ( ) : [EOL] try : [EOL] if not cls . _trigger_matches ( value , event [ key ] ) : [EOL] return False [EOL] except ( KeyError , IndexError ) : [EOL] return False [EOL] return True [EOL] elif isinstance ( trigger , list ) : [EOL] for value in trigger : [EOL] if not cls . _trigger_matches ( value , event [ key ] ) : [EOL] return False [EOL] return True [EOL] [EOL] return trigger == event [EOL] [EOL] def create_handler ( self , listener ) : [EOL] def handler ( message ) : [EOL] [comment] [EOL] generator = listener ( message ) [EOL] [EOL] [comment] [EOL] if generator is None : [EOL] return None [EOL] elif isinstance ( generator , HandlerSignal ) : [EOL] return generator [EOL] [EOL] try : [EOL] [comment] [EOL] result = next ( generator ) [EOL] except StopIteration : [EOL] pass [EOL] else : [EOL] if result : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] result . run ( self , generator ) [EOL] return DONE [EOL] for handle in get_handles ( listener ) : [EOL] add_handle ( handler , handle ) [EOL] return handler [EOL] [EOL] def register_handler ( self , callable , ** handles ) : [EOL] if handles : [EOL] add_handle ( callable , handles ) [EOL] self . handlers . append ( self . create_handler ( callable ) ) [EOL] [EOL] [EOL] class WebsocketWrapper ( WebSocketClient ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , client , * args , ** kwargs ) : [EOL] self . client = client [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def opened ( self ) : [EOL] return self . client . opened ( ) [EOL] [EOL] def received_message ( self , message ) : [EOL] return self . client . received_message ( message ) [EOL] [EOL] def closed ( self , code , reason = None ) : [EOL] return self . client . closed ( code , reason ) [EOL] [EOL] [EOL] class Runnable ( ABC ) : [EOL] @ abstractmethod def run ( self , client , task ) : ... [EOL] [EOL] [EOL] class Call ( Message , Runnable ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , method , * params , ** args ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** args , msg = [string] , method = method , id = generate_id ( ) , params = params , ) [EOL] [EOL] def run ( self , client , task ) : [EOL] [docstring] [EOL] def resume_task ( message ) : [EOL] [docstring] [EOL] try : [EOL] result = task . send ( message ) [EOL] except StopIteration : [EOL] pass [EOL] else : [EOL] if result : [EOL] result . run ( client , task ) [EOL] return DONE [EOL] [EOL] add_handle ( resume_task , { [string] : self . id } ) [EOL] client . register_handler ( resume_task ) [EOL] client . send_message ( ** self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Handler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 $Listener$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $rocketchat.realtime.Call$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $Listener$ 0 0 0 0 0 0 0 0 0 $Listener$ 0 0 0 $rocketchat.realtime.Call$ 0 0 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Call$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $Listener$ 0 0 0 0 0 0 0 0 $Listener$ 0 0 0 0 0 0 $Listener$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $Handler$ 0 0 0 $Listener$ 0 0 0 0 $typing.Optional[HandlerSignal]$ 0 $Message$ 0 0 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 $Message$ 0 0 0 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 0 0 0 0 $rocketchat.realtime.Runnable$ 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Runnable$ 0 0 0 0 0 0 0 0 $rocketchat.realtime.Runnable$ 0 0 0 0 0 $typing.Union[None,typing.Generator[rocketchat.realtime.Runnable,rocketchat.realtime.Message,None],rocketchat.realtime.HandlerSignal]$ 0 0 0 0 0 0 0 0 0 0 $Listener$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Listener$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $Listener$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $Listener$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $rocketchat.realtime.Client$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $rocketchat.realtime.Client$ 0 $rocketchat.realtime.Client$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $ws4py.messaging.TextMessage$ 0 0 0 0 0 0 0 0 0 0 $ws4py.messaging.TextMessage$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Client$ 0 $Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Client$ 0 $Task$ 0 0 0 0 0 0 $HandlerSignal$ 0 $Message$ 0 0 0 0 0 0 0 0 $rocketchat.realtime.Runnable$ 0 0 0 0 0 $Message$ 0 0 0 0 0 0 0 0 0 0 0 0 $rocketchat.realtime.Runnable$ 0 0 $rocketchat.realtime.Runnable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Client$ 0 0 0 0 0 0 $Client$ 0 0 0 0 0 0 0