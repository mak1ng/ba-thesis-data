[comment] [EOL] from setuptools import setup [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Union , Tuple [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def cohensutherland ( xmin , ymax , xmax , ymin , x1 , y1 , x2 , y2 ) : [EOL] [docstring] [EOL] INSIDE , LEFT , RIGHT , LOWER , UPPER = [number] , [number] , [number] , [number] , [number] [EOL] [EOL] def _getclip ( xa , ya ) : [EOL] [comment] [EOL] p = INSIDE [comment] [EOL] [EOL] [comment] [EOL] if xa < xmin : [EOL] p |= LEFT [EOL] elif xa > xmax : [EOL] p |= RIGHT [EOL] [EOL] [comment] [EOL] if ya < ymin : [EOL] p |= LOWER [comment] [EOL] elif ya > ymax : [EOL] p |= UPPER [comment] [EOL] return p [EOL] [EOL] [comment] [EOL] k1 = _getclip ( x1 , y1 ) [EOL] k2 = _getclip ( x2 , y2 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] while ( k1 | k2 ) != [number] : [comment] [EOL] [EOL] [comment] [EOL] if ( k1 & k2 ) != [number] : [comment] [EOL] [comment] [EOL] [comment] [EOL] return None , None , None , None [EOL] [EOL] [comment] [EOL] [comment] [EOL] opt = k1 or k2 [comment] [EOL] if opt & UPPER : [comment] [EOL] x = x1 + ( x2 - x1 ) * ( ymax - y1 ) / ( y2 - y1 ) [EOL] y = ymax [EOL] elif opt & LOWER : [EOL] x = x1 + ( x2 - x1 ) * ( ymin - y1 ) / ( y2 - y1 ) [EOL] y = ymin [EOL] elif opt & RIGHT : [EOL] y = y1 + ( y2 - y1 ) * ( xmax - x1 ) / ( x2 - x1 ) [EOL] x = xmax [EOL] elif opt & LEFT : [EOL] y = y1 + ( y2 - y1 ) * ( xmin - x1 ) / ( x2 - x1 ) [EOL] x = xmin [EOL] else : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if opt == k1 : [EOL] x1 , y1 = x , y [EOL] k1 = _getclip ( x1 , y1 ) [EOL] [comment] [EOL] elif opt == k2 : [EOL] [comment] [EOL] x2 , y2 = x , y [EOL] k2 = _getclip ( x2 , y2 ) [EOL] [EOL] return x1 , y1 , x2 , y2 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pytest [EOL] from pytest import approx [EOL] import pylineclip as plc [EOL] [EOL] [EOL] def test_lineclip ( ) : [EOL] [docstring] [EOL] [comment] [EOL] x1 , y1 , x2 , y2 = plc . cohensutherland ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] assert [ x1 , y1 , x2 , y2 ] == approx ( [ [number] , [number] , [number] , [number] ] ) [EOL] [comment] [EOL] x1 , y1 , x2 , y2 = plc . cohensutherland ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] assert x1 is None and y1 is None and x2 is None and y2 is None [EOL] [comment] [EOL] x1 , y1 , x2 , y2 = plc . cohensutherland ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] assert [ x1 , y1 , x2 , y2 ] == [ [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] pytest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0