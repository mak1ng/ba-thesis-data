from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = [string] , licence = [string] , packages = [ [string] ] , url = [string] , install_requires = [ [string] , [string] ] , entry_points = [string] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , List , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import boto3 [EOL] import boto3 [EOL] import botocore [EOL] import click [EOL] [EOL] [EOL] def get_session ( profile ) : [EOL] [docstring] [EOL] if profile : [EOL] return boto3 . Session ( profile_name = profile ) [EOL] else : [EOL] return boto3 . Session ( ) [EOL] [EOL] [EOL] def get_ec2_client ( profile ) : [EOL] [docstring] [EOL] return get_session ( profile ) . resource ( [string] ) [EOL] [EOL] [EOL] def get_ec2_instances ( project , ec2 ) : [EOL] [docstring] [EOL] if project : [EOL] filters = [ { [string] : [string] , [string] : [ project ] } ] [EOL] return ec2 . instances . filter ( Filters = filters ) [EOL] else : [EOL] return ec2 . instances . all ( ) [EOL] [EOL] [EOL] def has_pending_snapshot ( volume ) : [EOL] [docstring] [EOL] xs = list ( volume . snapshots . all ( ) ) [EOL] return bool ( xs and xs [ [number] ] . state == [string] ) [EOL] [EOL] [EOL] @ click . group ( ) def cli ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ cli . group ( [string] ) def volumes ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ cli . group ( [string] ) def snapshots ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ volumes . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def list_volumes ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] [EOL] for i in xs : [EOL] for v in i . volumes . all ( ) : [EOL] print ( [string] . join ( ( v . id , i . id , v . state , str ( v . size ) + [string] , v . encrypted and [string] or [string] ) ) ) [EOL] return [EOL] [EOL] [EOL] @ cli . group ( [string] ) def instances ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def list_instances ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] [EOL] for i in xs : [EOL] tags = { k [ [string] ] : k [ [string] ] for k in i . tags or [ ] } [EOL] info = [string] . join ( ( i . id , i . instance_type , i . placement [ [string] ] , i . state [ [string] ] , i . public_dns_name , tags . get ( [string] , [string] ) ) ) [EOL] print ( info ) [EOL] return [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def stop_instances ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for i in xs : [EOL] print ( f" [string] { i . id } [string] " ) [EOL] try : [EOL] i . stop ( ) [EOL] except botocore . exceptions . ClientError as e : [EOL] print ( f" [string] { i . id } [string] { e }" ) [EOL] return [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def wait_until_stopped_instances ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for i in xs : [EOL] print ( f" [string] { i . id } [string] " ) [EOL] i . wait_until_stopped ( ) [EOL] return [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def start_instances ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for i in xs : [EOL] print ( f" [string] { i . id } [string] " ) [EOL] try : [EOL] i . start ( ) [EOL] except botocore . exceptions . ClientError as e : [EOL] print ( f" [string] { i . id } [string] { e }" ) [EOL] return [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def wait_until_running ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for i in xs : [EOL] print ( f" [string] { i . id } [string] " ) [EOL] i . wait_until_running ( ) [EOL] return [EOL] [EOL] [EOL] @ instances . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) def create_snapshots ( profile , project ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for x in xs : [EOL] print ( f" [string] { x . id }" ) [EOL] [EOL] x . stop ( ) [EOL] x . wait_until_stopped ( ) [EOL] [EOL] for v in x . volumes . all ( ) : [EOL] if has_pending_snapshot ( v ) : [EOL] print ( f" [string] { v . id } [string] " ) [EOL] continue [EOL] [EOL] print ( f" [string] { v . id }" ) [EOL] v . create_snapshot ( Description = [string] ) [EOL] [EOL] print ( f" [string] { x . id }" ) [EOL] [EOL] x . start ( ) [EOL] x . wait_until_running ( ) [EOL] [EOL] print ( [string] ) [EOL] return [EOL] [EOL] [EOL] @ snapshots . command ( [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , default = None , help = [string] ) @ click . option ( [string] , [string] , default = False , is_flag = True , help = [string] ) def list_snapshots ( profile , project , list_all ) : [EOL] [docstring] [EOL] xs = get_ec2_instances ( project , get_ec2_client ( profile ) ) [EOL] for i in xs : [EOL] for v in i . volumes . all ( ) : [EOL] for s in v . snapshots . all ( ) : [EOL] print ( [string] . join ( ( s . id , v . id , i . id , s . state , s . progress , s . start_time . strftime ( [string] ) ) ) ) [EOL] [EOL] if s . state == [string] and not list_all : [EOL] break [EOL] return [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $boto3.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0