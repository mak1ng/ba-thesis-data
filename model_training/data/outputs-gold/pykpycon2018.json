from typing import Any [EOL] import typing [EOL] import flask [EOL] from typing import Any [EOL] [EOL] from flask import Flask [EOL] from flask import request [EOL] from flask import jsonify [EOL] [EOL] import torch [EOL] [EOL] from model import IrisClassifier [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [comment] [EOL] model = IrisClassifier ( ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return [string] [EOL] [EOL] [EOL] @ app . route ( [string] ) def predict ( ) : [EOL] sepal_length = int ( request . args . get ( [string] , [number] ) ) [EOL] sepal_width = int ( request . args . get ( [string] , [number] ) ) [EOL] petal_length = int ( request . args . get ( [string] , [number] ) ) [EOL] petal_width = int ( request . args . get ( [string] , [number] ) ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] x = torch . Tensor ( [ sepal_length , sepal_width , petal_length , petal_width ] ) [EOL] prediction = model . predict ( x ) [EOL] [EOL] return jsonify ( { [string] : prediction [ [number] ] , [string] : prediction [ [number] ] , [string] : prediction [ [number] ] , } ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] model_path = [string] [EOL] model . load_state_dict ( torch . load ( model_path ) ) [EOL] [EOL] app . run ( port = [number] , debug = True ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import torch [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] import torch [EOL] from torch import nn [EOL] [EOL] [EOL] class IrisClassifier ( nn . Module ) : [comment] [EOL] def __init__ ( self ) : [EOL] super ( IrisClassifier , self ) . __init__ ( ) [EOL] [comment] [EOL] self . learning_rate = [number] [EOL] [EOL] [comment] [EOL] self . h1_layer = nn . Linear ( [number] , [number] ) [EOL] self . softmax = nn . Softmax ( dim = [number] ) [EOL] [EOL] [comment] [EOL] self . loss = nn . BCELoss ( ) [EOL] [EOL] [comment] [EOL] self . optimizer = torch . optim . SGD ( params = self . parameters ( ) , lr = self . learning_rate ) [EOL] [EOL] def forward ( self , x ) : [EOL] h = self . h1_layer ( x ) [EOL] y_hat = self . softmax ( h ) [EOL] return y_hat [EOL] [EOL] def backward ( self , y_hat , y ) : [EOL] self . optimizer . zero_grad ( ) [EOL] [EOL] [comment] [EOL] loss = self . loss ( y_hat , y ) [EOL] [EOL] [comment] [EOL] loss . backward ( ) [EOL] [EOL] [comment] [EOL] self . optimizer . step ( ) [EOL] return float ( loss . data . item ( ) ) [EOL] [EOL] def predict ( self , x ) : [EOL] y_hat = self . forward ( x ) [EOL] prediction = y_hat . tolist ( ) [EOL] return prediction [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $torch.Tensor$ 0 0 0 $torch.Tensor$ 0 0 0 $typing.Any$ 0 0 0 0 0 $torch.Tensor$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 $torch.Tensor$ 0 $torch.Tensor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $torch.Tensor$ 0 $torch.Tensor$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 $torch.Tensor$ 0 0 0 0 0 0 0 0 0 $torch.Tensor$ 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0