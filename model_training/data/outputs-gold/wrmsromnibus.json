from typing import Any , Dict , List [EOL] import typing [EOL] import fnmatch [EOL] import glob [EOL] import os [EOL] import sys [EOL] [EOL] import setuptools . command . build_ext [EOL] [EOL] [EOL] APPLE = sys . platform == [string] [EOL] [EOL] [EOL] BASE_DIR = os . path . dirname ( __file__ ) [EOL] ABOUT = { } [EOL] [EOL] [EOL] def _read_about ( ) : [EOL] with open ( os . path . join ( BASE_DIR , [string] , [string] ) , [string] ) as f : [EOL] src = f . read ( ) [EOL] if sys . version_info [ [number] ] > [number] : [EOL] src = src . decode ( [string] ) [EOL] exec ( src , ABOUT ) [EOL] [EOL] [EOL] _read_about ( ) [EOL] [EOL] [EOL] EXCLUDED_STATIC_FILE_PATHS = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def _get_static_files ( path ) : [EOL] return [ filepath for ( dirpath , dirnames , filenames ) in os . walk ( path , followlinks = True ) for filename in filenames for filepath in [ os . path . join ( dirpath , filename ) ] if not any ( fnmatch . fnmatch ( filepath , pat ) for pat in EXCLUDED_STATIC_FILE_PATHS ) ] [EOL] [EOL] [EOL] PACKAGE_DATA = [ [string] , ] + _get_static_files ( [string] ) [EOL] [EOL] [EOL] INSTALL_REQUIRES = [ [string] , ] [EOL] [EOL] EXTRAS_REQUIRE = { [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } [EOL] [EOL] [EOL] DEBUG = [string] in os . environ [EOL] [EOL] [EOL] EXT_MODULES = [ ] [EOL] [EOL] try : [EOL] import Cython [EOL] [EOL] except ImportError : [EOL] pass [EOL] [EOL] else : [EOL] import Cython . Build [EOL] import Cython . Compiler . Options [EOL] [EOL] EXT_MODULES . extend ( [ * [ setuptools . Extension ( [string] + os . path . basename ( fpath ) . rpartition ( [string] ) [ [number] ] , sources = [ fpath ] ) for fpath in glob . glob ( [string] ) ] , * Cython . Build . cythonize ( [ setuptools . Extension ( [string] + os . path . basename ( fpath ) . rpartition ( [string] ) [ [number] ] , sources = [ fpath ] , language = [string] , ) for fpath in glob . glob ( [string] , recursive = True ) ] , language_level = [number] , gdb_debug = DEBUG , compiler_directives = { ** Cython . Compiler . Options . get_directive_defaults ( ) , [string] : True , [string] : True , } , ) , ] ) [EOL] [EOL] if APPLE : [EOL] EXT_MODULES . extend ( [ setuptools . Extension ( [string] + os . path . basename ( fpath ) . rpartition ( [string] ) [ [number] ] , sources = [ fpath ] , extra_link_args = [ [string] , [string] , [string] , [string] , ] ) for fpath in glob . glob ( [string] ) ] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] setuptools . setup ( name = ABOUT [ [string] ] , version = ABOUT [ [string] ] , description = ABOUT [ [string] ] , author = ABOUT [ [string] ] , url = ABOUT [ [string] ] , python_requires = [string] , classifiers = [ [string] , [string] , [string] + [string] . join ( map ( str , sys . version_info [ : [number] ] ) ) , [string] , [string] , ] , setup_requires = [ [string] ] , packages = setuptools . find_packages ( include = [ [string] , [string] ] , exclude = [ [string] , [string] , [string] ] , ) , py_modules = [ [string] ] , package_data = { [string] : PACKAGE_DATA } , include_package_data = True , entry_points = { } , install_requires = INSTALL_REQUIRES , extras_require = EXTRAS_REQUIRE , ext_modules = EXT_MODULES , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0