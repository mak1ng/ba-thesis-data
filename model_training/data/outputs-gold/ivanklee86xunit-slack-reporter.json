APP_VERSION = [string] [EOL] [EOL] [EOL] [comment] [EOL] XUNIT_PATH_ENV_VAR = [string] [EOL] SLACK_TOKEN_ENV_VAR = [string] [EOL] SLACK_CHANNEL_ENV_VAR = [string] [EOL] [EOL] PASS_COLOR = [string] [EOL] FAIL_COLOR = [string] [EOL]	$builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Union , List , Optional , Any , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] import pathlib [EOL] import app . constants as constants [EOL] import app . utils . xunit_utils as xunit_utils [EOL] import app . utils . slack_utils as slack_utils [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] if constants . XUNIT_PATH_ENV_VAR not in os . environ : [EOL] raise Exception ( f" [string] { constants . XUNIT_PATH_ENV_VAR } [string] " ) [EOL] [EOL] if constants . SLACK_CHANNEL_ENV_VAR not in os . environ : [EOL] raise Exception ( f" [string] { constants . SLACK_CHANNEL_ENV_VAR } [string] " ) [EOL] [EOL] if constants . SLACK_TOKEN_ENV_VAR not in os . environ : [EOL] raise Exception ( f" [string] { constants . SLACK_TOKEN_ENV_VAR } [string] " ) [EOL] [EOL] [comment] [EOL] try : [EOL] xunit_path = os . getenv ( constants . XUNIT_PATH_ENV_VAR ) [EOL] xunit_report = xunit_utils . read_xunit ( pathlib . Path ( xunit_path ) ) [EOL] except Exception as excep : [EOL] raise Exception ( f" [string] { excep }" ) [EOL] [EOL] [comment] [EOL] slack_attachment = { [string] : constants . PASS_COLOR , [string] : [string] , [string] : [string] , [string] : f" [string] { os . getenv ( [string] ) } [string] { os . getenv ( [string] ) }" , [string] : [ ] } [EOL] [EOL] if xunit_report . errors or xunit_report . failures : [EOL] slack_attachment [ [string] ] = constants . FAIL_COLOR [EOL] [EOL] slack_attachment [ [string] ] . append ( { [string] : [string] , [string] : f"{ xunit_report . tests }" , [string] : True } ) [EOL] [EOL] slack_attachment [ [string] ] . append ( { [string] : [string] , [string] : f"{ xunit_report . tests - xunit_report . errors - xunit_report . failures }" , [string] : True } ) [EOL] [EOL] slack_attachment [ [string] ] . append ( { [string] : [string] , [string] : f"{ xunit_report . errors }" , [string] : True } ) [EOL] [EOL] slack_attachment [ [string] ] . append ( { [string] : [string] , [string] : f"{ xunit_report . failures }" , [string] : True } ) [EOL] [EOL] slack_attachment [ [string] ] . append ( { [string] : [string] , [string] : f"{ xunit_report . time } [string] " , [string] : True } ) [EOL] [EOL] slack_utils . send_slack_msg ( os . getenv ( constants . SLACK_CHANNEL_ENV_VAR ) , attachments = [ slack_attachment ] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) : [EOL] if xunit_report . errors or xunit_report . failures : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from slack import WebClient [EOL] from app import constants [EOL] [EOL] [EOL] def send_slack_msg ( slack_channel , message = [string] , attachments = None ) : [EOL] [docstring] [EOL] client = WebClient ( os . getenv ( constants . SLACK_TOKEN_ENV_VAR , [string] ) ) [EOL] [EOL] client . chat_postMessage ( channel = slack_channel , text = message , attachments = attachments , as_user = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] from pathlib import Path [EOL] from junitparser import JUnitXml [EOL] [EOL] [EOL] def read_xunit ( xunit_report_path ) : [EOL] return JUnitXml . fromfile ( xunit_report_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from tests . utils . fixtures import test_provisioning [comment] [EOL] from app . utils . slack_utils import send_slack_msg [EOL] [EOL] [EOL] def test_sendslackmsg ( test_provisioning ) : [comment] [EOL] send_slack_msg ( slack_channel = [string] , message = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from app import script , constants [EOL] from tests . utils import xunit_files [EOL] from tests . utils . fixtures import test_provisioning [comment] [EOL] [EOL] [EOL] def test_main_pytestsuccess ( monkeypatch , test_provisioning , mocker ) : [comment] [EOL] monkeypatch . setenv ( [string] , xunit_files . PYTEST_SUCCESS_FILE ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] slack_mock = mocker . patch ( [string] ) [EOL] [EOL] script . main ( ) [EOL] [EOL] assert slack_mock . called [EOL] assert slack_mock . call_count == [number] [EOL] assert slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] == constants . PASS_COLOR [EOL] assert len ( slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_main_pytestfailure ( monkeypatch , test_provisioning , mocker ) : [comment] [EOL] monkeypatch . setenv ( [string] , xunit_files . PYTEST_FAILURE_FILE ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] slack_mock = mocker . patch ( [string] ) [EOL] [EOL] script . main ( ) [EOL] [EOL] assert slack_mock . called [EOL] assert slack_mock . call_count == [number] [EOL] assert slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] == constants . FAIL_COLOR [EOL] assert len ( slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_main_mochasuccess ( monkeypatch , test_provisioning , mocker ) : [comment] [EOL] monkeypatch . setenv ( [string] , xunit_files . MOCHA_SUCCESS_FILE ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] slack_mock = mocker . patch ( [string] ) [EOL] [EOL] script . main ( ) [EOL] [EOL] assert slack_mock . called [EOL] assert slack_mock . call_count == [number] [EOL] assert slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] == constants . PASS_COLOR [EOL] assert len ( slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_main_systemexit_failure ( monkeypatch , test_provisioning , mocker ) : [comment] [EOL] monkeypatch . setenv ( [string] , xunit_files . PYTEST_FAILURE_FILE ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] slack_mock = mocker . patch ( [string] ) [EOL] [EOL] with pytest . raises ( SystemExit ) as pytest_wrapped_e : [EOL] script . main ( ) [EOL] [EOL] assert slack_mock . called [EOL] assert slack_mock . call_count == [number] [EOL] assert slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] == constants . FAIL_COLOR [EOL] assert len ( slack_mock . call_args [ [number] ] [ [string] ] [ [number] ] [ [string] ] ) == [number] [EOL] assert pytest_wrapped_e . type == SystemExit [EOL] assert pytest_wrapped_e . value . code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from tests . utils . fixtures import xunit_file [comment] [EOL] import app . utils . xunit_utils as xunit_utils [EOL] [EOL] [EOL] def test_xunit_parsing ( xunit_file ) : [comment] [EOL] parsed_data = xunit_utils . read_xunit ( xunit_file ) [EOL] [EOL] assert parsed_data . tests > [number] [EOL] assert parsed_data . time > [number] [EOL] [EOL] if parsed_data . errors : [EOL] assert parsed_data . errors > [number] [EOL] [EOL] if parsed_data . failures : [EOL] assert parsed_data . failures > [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from dotenv import load_dotenv [EOL] from tests . utils . xunit_files import PYTEST_SUCCESS_PATH , PYTEST_FAILURE_PATH , MOCHA_SUCCESS_PATH [EOL] [EOL] [EOL] @ pytest . fixture ( ) def test_provisioning ( ) : [EOL] load_dotenv ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PYTEST_FAILURE_PATH , PYTEST_SUCCESS_PATH , MOCHA_SUCCESS_PATH ] ) def xunit_file ( request ) : [EOL] yield request . param [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pathlib [EOL] import os [EOL] from pathlib import Path [EOL] [EOL] local_dir = Path ( __file__ ) . parent . absolute ( ) [EOL] [EOL] PYTEST_SUCCESS_FILE = os . path . join ( local_dir , [string] , [string] ) [EOL] PYTEST_FAILURE_FILE = os . path . join ( local_dir , [string] , [string] ) [EOL] MOCHA_SUCCESS_FILE = os . path . join ( local_dir , [string] , [string] ) [EOL] [EOL] PYTEST_SUCCESS_PATH = Path ( PYTEST_SUCCESS_FILE ) [EOL] PYTEST_FAILURE_PATH = Path ( PYTEST_FAILURE_FILE ) [EOL] MOCHA_SUCCESS_PATH = Path ( MOCHA_SUCCESS_FILE )	0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0