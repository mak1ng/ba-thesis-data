from typing import Any , DefaultDict , List [EOL] import typing [EOL] import pkgutil [EOL] import site [EOL] import os [EOL] [EOL] from collections import defaultdict [EOL] [EOL] SITE_PACKAGES = site . getsitepackages ( ) [ [number] ] [EOL] [EOL] def get_submodules ( ) : [EOL] path = SITE_PACKAGES + [string] [EOL] [EOL] [EOL] pkg_list = [ ] [EOL] for root , dirs , files in os . walk ( path ) : [EOL] for f in files : [EOL] if f . endswith ( [string] ) : [EOL] mod_root = root . replace ( SITE_PACKAGES + [string] , [string] ) . replace ( [string] , [string] ) [EOL] if mod_root : [EOL] modname = mod_root + [string] + f . split ( [string] ) [ [number] ] [EOL] else : [EOL] modname = f . split ( [string] ) [ [number] ] [EOL] pkg_list . append ( modname ) [EOL] return pkg_list [EOL] [EOL] [EOL] [EOL] def to_directive_string ( submodules ) : [EOL] directive = [string] [EOL] dir_string = [ directive . format ( s ) for s in submodules ] [EOL] [EOL] return [string] . join ( dir_string ) [EOL] [EOL] [EOL] def to_index_file ( dir_string ) : [EOL] return [string] . format ( dir_string ) [EOL] [EOL] [EOL] def write_submodules_to_files ( submodules ) : [EOL] directories = defaultdict ( list ) [EOL] for s in submodules : [EOL] directories [ s . split ( [string] ) [ [number] ] ] . append ( s ) [EOL] for k , v in directories . items ( ) : [EOL] with open ( [string] . format ( k ) , [string] ) as f : [EOL] f . write ( to_index_file ( to_directive_string ( v ) ) ) [EOL] [EOL] if __name__ == [string] : [EOL] submodules = get_submodules ( ) [EOL] write_submodules_to_files ( submodules ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import typing [EOL] from yaml import load , dump [EOL] import os [EOL] [EOL] def count_yamls ( ) : [EOL] files = os . listdir ( [string] ) [EOL] [EOL] arg_count = [number] [EOL] func_count = [number] [EOL] [EOL] for f in files : [EOL] if f . endswith ( [string] ) : [EOL] with open ( [string] + f , [string] ) as g : [EOL] data = load ( g ) [EOL] [EOL] for k , v in data . items ( ) : [EOL] func_count += [number] [EOL] arg_count += len ( v [ [string] ] ) [EOL] print ( [string] . format ( func_count , arg_count ) ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] count_yamls ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0