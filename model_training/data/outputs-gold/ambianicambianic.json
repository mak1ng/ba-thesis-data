from typing import Dict , Any , List [EOL] import typing [EOL] import logging [EOL] import tests [EOL] [docstring] [EOL] import logging [EOL] import logging . handlers [EOL] import os [EOL] from time import sleep [EOL] import ambianic [EOL] from ambianic . server import AmbianicServer [EOL] from ambianic . config_mgm import fileutils [EOL] from ambianic import server , config_manager , logger [EOL] import yaml [EOL] import pytest [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Watch : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . changed = False [EOL] self . config = None [EOL] [EOL] def on_change ( self , config ) : [EOL] log . info ( [string] , config ) [EOL] self . changed = True [EOL] self . config = config [EOL] [EOL] [EOL] def setup_module ( module ) : [EOL] [docstring] [EOL] config_manager . stop ( ) [EOL] [EOL] [EOL] def teardown_module ( module ) : [EOL] [docstring] [EOL] config_manager . stop ( ) [EOL] [EOL] [EOL] def test_get_workdir_env ( ) : [EOL] os . environ [ [string] ] = [string] [EOL] assert ambianic . get_work_dir ( ) == [string] [EOL] os . environ [ [string] ] = [string] [EOL] assert ambianic . get_work_dir ( ) == ambianic . DEFAULT_WORK_DIR [EOL] [EOL] [EOL] def test_no_config ( ) : [EOL] conf = server . _configure ( [string] ) [EOL] assert not conf [EOL] [EOL] [EOL] def test_log_config_with_file ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] log_path = os . path . join ( _dir , [string] ) [EOL] log_config = { [string] : log_path , } [EOL] logger . configure ( config = log_config ) [EOL] handlers = logging . getLogger ( ) . handlers [EOL] log_fn = None [EOL] for h in handlers : [EOL] if isinstance ( h , logging . handlers . RotatingFileHandler ) : [EOL] log_fn = h . baseFilename [EOL] assert log_fn == log_config [ [string] ] [EOL] [comment] [EOL] assert log_fn [EOL] [EOL] [EOL] def test_log_config_without_file ( ) : [EOL] log_config = { } [EOL] logger . configure ( config = log_config ) [EOL] handlers = logging . getLogger ( ) . handlers [EOL] for h in handlers : [EOL] assert not isinstance ( h , logging . handlers . RotatingFileHandler ) [EOL] [EOL] [EOL] def test_log_config_with_debug_level ( ) : [EOL] log_config = { [string] : [string] } [EOL] logger . configure ( config = log_config ) [EOL] root_logger = logging . getLogger ( ) [EOL] effective_level = root_logger . getEffectiveLevel ( ) [EOL] lname = logging . getLevelName ( effective_level ) [EOL] assert lname == log_config [ [string] ] [EOL] [EOL] [EOL] def test_log_config_with_warning_level ( ) : [EOL] log_config = { [string] : [string] } [EOL] logger . configure ( config = log_config ) [EOL] root_logger = logging . getLogger ( ) [EOL] effective_level = root_logger . getEffectiveLevel ( ) [EOL] lname = logging . getLevelName ( effective_level ) [EOL] assert lname == log_config [ [string] ] [EOL] [EOL] [EOL] def test_log_config_without_level ( ) : [EOL] log_config = { } [EOL] logger . configure ( config = log_config ) [EOL] root_logger = logging . getLogger ( ) [EOL] effective_level = root_logger . getEffectiveLevel ( ) [EOL] assert effective_level == logger . DEFAULT_FILE_LOG_LEVEL [EOL] [EOL] [EOL] def test_log_config_bad_level1 ( ) : [EOL] log_config = { [string] : [string] } [EOL] logger . configure ( config = log_config ) [EOL] root_logger = logging . getLogger ( ) [EOL] effective_level = root_logger . getEffectiveLevel ( ) [EOL] assert effective_level == logger . DEFAULT_FILE_LOG_LEVEL [EOL] [EOL] [EOL] def test_log_config_bad_level2 ( ) : [EOL] log_config = { [string] : [number] } [EOL] logger . configure ( config = log_config ) [EOL] root_logger = logging . getLogger ( ) [EOL] effective_level = root_logger . getEffectiveLevel ( ) [EOL] assert effective_level == logger . DEFAULT_FILE_LOG_LEVEL [EOL] [EOL] [EOL] def test_config_with_secrets ( ) : [EOL] config_manager . SECRETS_FILE = [string] [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] conf = server . _configure ( _dir ) [EOL] assert conf is not None [EOL] assert conf [ [string] ] [ [string] ] == [string] [EOL] assert conf [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_config_without_secrets_failed_ref ( ) : [EOL] config_manager . SECRETS_FILE = [string] [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] conf = server . _configure ( _dir ) [EOL] assert not conf [EOL] [EOL] [EOL] def test_config_without_secrets_no_ref ( ) : [EOL] config_manager . SECRETS_FILE = [string] [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] conf = server . _configure ( _dir ) [EOL] assert conf is not None [EOL] assert conf [ [string] ] [ [string] ] == [string] [EOL] assert conf [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_no_pipelines ( ) : [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] conf = server . _configure ( _dir ) [EOL] assert not conf [EOL] [EOL] [EOL] def test_reload ( ) : [EOL] [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] config1 = { [string] : { [string] : [string] } } [EOL] config_file = os . path . join ( _dir , config_manager . CONFIG_FILE ) [EOL] [EOL] [comment] [EOL] fileutils . save ( config_file , config1 ) [EOL] [EOL] loaded_config = config_manager . load ( _dir ) [EOL] [EOL] assert config1 [ [string] ] [ [string] ] == loaded_config [ [string] ] [ [string] ] [EOL] [EOL] watcher = Watch ( ) [EOL] [EOL] config_manager . register_handler ( watcher . on_change ) [EOL] [EOL] [comment] [EOL] config2 = { [string] : { [string] : [string] } } [EOL] fileutils . save ( config_file , config2 ) [EOL] [EOL] [comment] [EOL] wait = [number] [EOL] while not watcher . changed : [EOL] sleep ( [number] ) [EOL] wait -= [number] [EOL] if wait == [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] assert loaded_config [ [string] ] [ [string] ] == watcher . config [ [string] ] [ [string] ] [EOL] assert loaded_config [ [string] ] [ [string] ] == config2 [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def test_callback ( ) : [EOL] [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] config1 = { [string] : True } [EOL] config_file = os . path . join ( _dir , config_manager . CONFIG_FILE ) [EOL] [EOL] fileutils . save ( config_file , config1 ) [EOL] config_manager . load ( _dir ) [EOL] [EOL] watcher = Watch ( ) [EOL] [EOL] config_manager . register_handler ( watcher . on_change ) [EOL] fileutils . save ( config_file , config1 ) [EOL] [EOL] [comment] [EOL] wait = [number] [EOL] while not watcher . changed : [EOL] sleep ( [number] ) [EOL] wait -= [number] [EOL] if wait == [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] assert watcher . changed [EOL] [EOL] [EOL] def test_config_getters ( ) : [EOL] [EOL] config_manager . stop ( ) [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] config_manager . load ( _dir ) [EOL] [EOL] assert config_manager . get_ai_models ( ) is not None [EOL] assert config_manager . get_ai_model ( [string] ) is not None [EOL] [EOL] assert config_manager . get_sources ( ) is not None [EOL] assert config_manager . get_source ( [string] ) is not None [EOL] [EOL] assert config_manager . get_data_dir ( ) is not None [EOL] [EOL] [EOL] def test_handlers_mgm ( ) : [EOL] [EOL] def test1 ( config ) : [EOL] pass [EOL] [EOL] [comment] [EOL] config_manager . stop ( ) [EOL] assert len ( config_manager . handlers ) == [number] [EOL] [EOL] config_manager . register_handler ( test1 ) [EOL] assert len ( config_manager . handlers ) == [number] [EOL] [EOL] config_manager . unregister_handler ( test1 ) [EOL] assert len ( config_manager . handlers ) == [number] [EOL] [EOL] [EOL] def test_clean_stop ( ) : [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] config_manager . load ( _dir ) [EOL] config_manager . stop ( ) [EOL] assert config_manager . watch_thread is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool
from typing import Any [EOL] import tests [EOL] import typing [EOL] import pytest [EOL] from ambianic . util import ServiceExit , ManagedService , ThreadedJob [EOL] [EOL] [EOL] class MockManagedService ( ManagedService ) : [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . _healthcheck_called = False [EOL] self . _heal_called = False [EOL] [EOL] def healthcheck ( self ) : [EOL] super ( ) . healthcheck ( ) [EOL] self . _healthcheck_called = True [EOL] [EOL] def heal ( self ) : [EOL] super ( ) . heal ( ) [EOL] self . _heal_called = True [EOL] [EOL] [EOL] def test_threaded_job_init_no_job ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] tj = ThreadedJob ( job = None ) [EOL] [EOL] [EOL] def test_threaded_job_init_no_ms ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] tj = ThreadedJob ( job = [ ] ) [EOL] [EOL] [EOL] def test_threaded_job_init_ms ( ) : [EOL] ms = MockManagedService ( ) [EOL] tj = ThreadedJob ( job = ms ) [EOL] assert tj . job == ms [EOL] [EOL] [EOL] def test_healthcheck ( ) : [EOL] ms = MockManagedService ( ) [EOL] tj = ThreadedJob ( job = ms ) [EOL] tj . healthcheck ( ) [EOL] assert ms . _healthcheck_called [EOL] [EOL] [EOL] def test_heal ( ) : [EOL] ms = MockManagedService ( ) [EOL] tj = ThreadedJob ( job = ms ) [EOL] tj . heal ( ) [EOL] assert ms . _heal_called [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import tests [EOL] import typing [EOL] import threading [EOL] import pytest [EOL] import ambianic [EOL] from ambianic import __main__ [EOL] from ambianic . server import AmbianicServer [EOL] from ambianic . util import ServiceExit , ManagedService [EOL] from ambianic . pipeline . interpreter import PipelineServer [EOL] import os [EOL] import threading [EOL] import signal [EOL] import time [EOL] [EOL] [EOL] def test_no_work_dir ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] srv = AmbianicServer ( work_dir = None ) [EOL] [EOL] [EOL] def test_bad_work_dir ( ) : [EOL] srv = AmbianicServer ( work_dir = [string] ) [EOL] with pytest . raises ( AssertionError ) : [EOL] srv . start ( ) [EOL] [EOL] [EOL] class MockAmbianicServer ( AmbianicServer ) : [EOL] [EOL] def __init__ ( self , work_dir = None , heartbeat_flag = None ) : [EOL] super ( ) . __init__ ( work_dir ) [EOL] self . _heartbeat_flag = heartbeat_flag [EOL] self . _main_heartbeat_logged = False [EOL] [EOL] def _heartbeat ( self ) : [EOL] super ( ) . _heartbeat ( ) [EOL] if self . _heartbeat_flag : [EOL] self . _heartbeat_flag . set ( ) [EOL] [EOL] def _log_heartbeat ( self ) : [EOL] super ( ) . _log_heartbeat ( ) [EOL] self . _main_heartbeat_logged = True [EOL] [EOL] [EOL] def _start_mock_server ( ** kwargs ) : [EOL] srv = MockAmbianicServer ( ** kwargs ) [EOL] t = threading . Thread ( target = srv . start , daemon = True ) [EOL] t . start ( ) [EOL] return ( srv , t ) [EOL] [EOL] [EOL] def _stop_mock_server ( server = None , thread = None ) : [EOL] assert server [EOL] assert thread [EOL] server . stop ( ) [EOL] thread . join ( timeout = [number] ) [EOL] assert not thread . is_alive ( ) [EOL] [EOL] [EOL] def test_no_pipelines ( ) : [EOL] ambianic . server . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] hb_flag = threading . Event ( ) [EOL] srv , t = _start_mock_server ( work_dir = _dir , heartbeat_flag = hb_flag ) [EOL] hb_flag . wait ( timeout = [number] ) [EOL] assert hb_flag . is_set ( ) [EOL] pps = srv . _servers [ [string] ] [EOL] assert isinstance ( pps , ambianic . pipeline . interpreter . PipelineServer ) [EOL] assert not pps . pipeline_server_job . job . _pipelines [EOL] _stop_mock_server ( server = srv , thread = t ) [EOL] [EOL] [EOL] def test_main ( ) : [EOL] ambianic . server . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] os . environ [ [string] ] = _dir [EOL] t = threading . Thread ( target = __main__ . main , daemon = True ) [EOL] t . start ( ) [EOL] t . join ( timeout = [number] ) [EOL] __main__ . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_system_shutdown_signal ( ) : [EOL] with pytest . raises ( ServiceExit ) : [EOL] __main__ . _service_shutdown ( signum = signal . SIGINT , frame = None ) [EOL] [EOL] [EOL] class _BadPipelineServer ( ManagedService ) : [EOL] [EOL] def __init__ ( self , config = None , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . _heal_called = False [EOL] [EOL] def healthcheck ( self ) : [EOL] super ( ) . healthcheck ( ) [EOL] [comment] [EOL] latest_heartbeat = time . monotonic ( ) - ambianic . server . MANAGED_SERVICE_HEARTBEAT_THRESHOLD - [number] [EOL] print ( [string] . format ( latest_heartbeat ) ) [EOL] return latest_heartbeat , [string] [EOL] [EOL] def heal ( self ) : [EOL] super ( ) . heal ( ) [EOL] self . _heal_called = True [EOL] [EOL] [EOL] def test_heartbeat_threshold ( ) : [EOL] ambianic . server . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [comment] [EOL] [comment] [EOL] ambianic . server . ROOT_SERVERS . clear ( ) [EOL] ambianic . server . ROOT_SERVERS [ [string] ] = _BadPipelineServer [EOL] srv , t = _start_mock_server ( work_dir = _dir ) [EOL] t . join ( timeout = [number] ) [EOL] pps = srv . _servers [ [string] ] [EOL] assert isinstance ( pps , _BadPipelineServer ) [EOL] assert pps . _heal_called [EOL] _stop_mock_server ( server = srv , thread = t ) [EOL] [EOL] [EOL] def test_main_heartbeat_log ( ) : [EOL] ambianic . server . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [comment] [EOL] ambianic . server . ROOT_SERVERS . clear ( ) [EOL] [comment] [EOL] [comment] [EOL] ambianic . server . MAIN_HEARTBEAT_LOG_INTERVAL = [number] [EOL] srv , t = _start_mock_server ( work_dir = _dir ) [EOL] t . join ( timeout = [number] ) [EOL] assert srv . _main_heartbeat_logged [EOL] _stop_mock_server ( server = srv , thread = t ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , List , Union [EOL] import logging [EOL] import typing [EOL] import pytest [EOL] import os [EOL] from ambianic . webapp . server import samples [EOL] import logging [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] sample_id = [string] [EOL] sample = { [string] : [string] , [string] : sample_id , [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [number] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } } ] } [EOL] [EOL] [EOL] def test_get_timeline_overflow ( ) : [EOL] data_dir = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] res = samples . get_timeline ( before_datetime = None , page = [number] , data_dir = data_dir ) [EOL] assert len ( res ) == [number] [EOL] [EOL] [EOL] def test_get_timelines_no_dir ( ) : [EOL] data_dir = [string] [EOL] res = samples . get_timeline ( before_datetime = None , page = [number] , data_dir = data_dir ) [EOL] assert len ( res ) == [number] [EOL] [EOL] [EOL] def test_empty_list ( ) : [EOL] data_dir = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] res = samples . get_timeline ( before_datetime = None , page = [number] , data_dir = data_dir ) [EOL] assert len ( res ) == [number] [EOL] [EOL] [EOL] def test_get_timelines_before_datetime ( ) : [EOL] data_dir = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] res = samples . get_timeline ( before_datetime = [string] , page = [number] , data_dir = data_dir ) [EOL] assert len ( res ) == [number] [EOL] [EOL] [EOL] def test_get_timelines ( ) : [EOL] data_dir = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] for page in range ( [number] , [number] ) : [EOL] res = samples . get_timeline ( before_datetime = None , page = page , data_dir = data_dir ) [EOL] assert len ( res ) > [number] [EOL] assert res [ [number] ] [ [string] ] == [string] % page [EOL] [EOL] [EOL] def test_add_sample ( ) : [EOL] assert not samples . add_sample ( sample ) [EOL] [EOL] [EOL] def test_update_sample ( ) : [EOL] samples . add_sample ( sample ) [EOL] assert samples . update_sample ( sample ) [EOL] [EOL] [EOL] def test_update_sample_not_found ( ) : [EOL] samples . add_sample ( sample ) [EOL] assert not samples . update_sample ( { [string] : [string] } ) [EOL] [EOL] [EOL] def test_delete_sample ( ) : [EOL] samples . add_sample ( sample ) [EOL] assert samples . delete_sample ( sample [ [string] ] ) [EOL] [EOL] [EOL] def test_delete_sample_not_avail ( ) : [EOL] samples . add_sample ( sample ) [EOL] assert not samples . delete_sample ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.float],builtins.float,builtins.str]]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import os [EOL] import json [EOL] import tempfile [EOL] import pytest [EOL] from ambianic . webapp import flaskr [EOL] from ambianic import config_manager [EOL] import logging [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def reset_config ( ) : [EOL] config_manager . stop ( ) [EOL] config_manager . set ( { [string] : [string] , [string] : { } } ) [EOL] [EOL] [EOL] def setup_module ( module ) : [EOL] [docstring] [EOL] reset_config ( ) [EOL] [EOL] [EOL] def teardown_module ( module ) : [EOL] [docstring] [EOL] reset_config ( ) [EOL] [EOL] [EOL] @ pytest . fixture def client ( ) : [EOL] [EOL] app = flaskr . create_app ( ) [EOL] [EOL] app . config [ [string] ] = True [EOL] [EOL] with app . test_client ( ) as fclient : [EOL] [comment] [EOL] [comment] [EOL] yield fclient [EOL] [EOL] [EOL] def test_hello ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert [string] in rv . data [EOL] [EOL] [EOL] def test_health_check ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert [string] in rv . data [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_status ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert json . loads ( rv . data ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_timeline ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert json . loads ( rv . data ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_samples ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert json . loads ( rv . data ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_add_samples ( client ) : [EOL] rv = client . post ( [string] , json = { [string] : None , [string] : None , [string] : None , } ) [EOL] data = json . loads ( rv . data ) [EOL] assert data [ [string] ] == [string] [EOL] [EOL] [EOL] def test_update_samples ( client ) : [EOL] rv = client . post ( [string] , json = { [string] : None , [string] : None , [string] : None , } ) [EOL] log . debug ( [string] , json . loads ( rv . data ) ) [EOL] sample_id = json . loads ( rv . data ) [ [string] ] [EOL] rv = client . put ( [string] + sample_id , json = { [string] : None , [string] : None , [string] : None , } ) [EOL] assert json . loads ( rv . data ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_delete_samples ( client ) : [EOL] rv = client . post ( [string] , json = { [string] : None , [string] : None , [string] : None , } ) [EOL] log . debug ( [string] , json . loads ( rv . data ) ) [EOL] sample_id = json . loads ( rv . data ) [ [string] ] [EOL] rv = client . delete ( [string] + sample_id ) [EOL] assert json . loads ( rv . data ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_config ( client ) : [EOL] rv = client . get ( [string] ) [EOL] data = json . loads ( rv . data ) [EOL] assert data is not None [EOL] [EOL] [EOL] def test_save_source ( client ) : [EOL] rv = client . put ( [string] , json = { [string] : [string] , [string] : [string] , [string] : True } ) [EOL] data = json . loads ( rv . data ) [EOL] assert data [EOL] assert data [ [string] ] == [string] [EOL] [EOL] [EOL] def test_delete_source ( client ) : [EOL] rv = client . put ( [string] , json = { [string] : [string] , [string] : [string] , [string] : True } ) [EOL] data = json . loads ( rv . data ) [EOL] assert data [ [string] ] == [string] [EOL] rv = client . delete ( [string] ) [EOL] data = json . loads ( rv . data ) [EOL] assert data [ [string] ] == [string] [EOL] [EOL] [EOL] def test_ping ( client ) : [EOL] rv = client . get ( [string] ) [EOL] assert [string] in rv . data [EOL] [EOL] [EOL] def test_static ( client ) : [EOL] rv = client . get ( [string] ) [EOL] log . debug ( [string] , rv . data ) [EOL] assert rv . data is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List , Union [EOL] import ambianic [EOL] import tests [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from time import sleep [EOL] from ambianic . config_mgm import config_diff [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class CallbackWatcher : [EOL] def __init__ ( self ) : [EOL] self . event = None [EOL] [EOL] def on_callback ( self , event ) : [EOL] self . event = event [EOL] [EOL] [EOL] def test_accessors ( ) : [EOL] [EOL] test1 = { [string] : [string] , [string] : { [string] : [string] } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [number] , [string] : [number] } } , [string] : { [string] : [ { [string] : [string] } ] } } [EOL] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert cfg . get ( [string] ) == test1 [ [string] ] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] [ [string] ] == test1 [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] assert len ( cfg [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] version1 = [string] [EOL] cfg . set ( [string] , version1 ) [EOL] assert cfg . get ( [string] ) == version1 [EOL] assert cfg . get ( [string] , [string] ) == [string] [EOL] [EOL] [EOL] def test_callbacks ( ) : [EOL] [EOL] test1 = { [string] : [string] , [string] : { [string] : [string] , [string] : [ [string] , [string] , [string] ] } } [EOL] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert cfg . get ( [string] ) == test1 [ [string] ] [EOL] assert cfg [ [string] ] [ [string] ] == test1 [ [string] ] [ [string] ] [EOL] [EOL] def test1_cb ( event ) : [EOL] [comment] [EOL] if event . get_name ( ) == [string] : [EOL] assert event . new_value == [string] or event . new_value == [string] [EOL] cfg . add_callback ( test1_cb ) [EOL] [EOL] test1 [ [string] ] [ [string] ] = [string] [EOL] cfg . update ( test1 ) [EOL] cfg [ [string] ] [ [string] ] = [string] [EOL] [EOL] def test2_cb ( event ) : [EOL] assert len ( cfg [ [string] ] [ [string] ] ) >= [number] [EOL] cfg . add_callback ( test2_cb ) [EOL] [EOL] test1 [ [string] ] [ [string] ] . append ( [string] ) [EOL] cfg . update ( test1 ) [EOL] [EOL] cfg [ [string] ] [ [string] ] [ [number] ] = [string] [EOL] [EOL] assert cfg [ [string] ] [ [string] ] [ [number] ] == [string] [EOL] [EOL] def test3_cb ( event ) : [EOL] raise Exception ( [string] ) [EOL] cfg . add_callback ( test3_cb ) [EOL] [EOL] cfg [ [string] ] [ [string] ] . append ( [string] ) [EOL] [EOL] assert len ( cfg [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_list_eq ( ) : [EOL] [EOL] test1 = [ { [string] : [ [string] , [string] ] } , { [string] : [ [string] , [string] ] } , ] [EOL] test2 = [ { [string] : [ [string] , [string] ] } , ] [EOL] test3 = [ { [string] : [ [string] , [string] ] } , { [string] : [ [string] , [string] ] } , ] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert isinstance ( cfg , config_diff . ConfigList ) [EOL] assert cfg [ [number] ] == test1 [ [number] ] [EOL] assert cfg == test1 [EOL] assert cfg != test2 [EOL] assert cfg != test3 [EOL] [EOL] [EOL] def test_list_ops ( ) : [EOL] [EOL] test1 = [ { [string] : [ [string] , [string] ] } , { [string] : [ [string] , [string] ] } , ] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert isinstance ( cfg , config_diff . ConfigList ) [EOL] assert cfg [ [number] ] == test1 [ [number] ] [EOL] [EOL] cfg . append ( { [string] : [ [string] , [string] ] } ) [EOL] [EOL] assert cfg [ [number] ] [ [string] ] [ [number] ] == [string] [EOL] [EOL] def test_dict_ops ( ) : [EOL] [EOL] test1 = { [string] : { } , [string] : [number] } [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert isinstance ( cfg , config_diff . ConfigDict ) [EOL] assert cfg == test1 [EOL] [EOL] cfg [ [string] ] [ [string] ] = True [EOL] cfg [ [string] ] [ [string] ] = False [EOL] del cfg [ [string] ] [ [string] ] [EOL] del cfg [ [string] ] [ [string] ] [EOL] [EOL] cfg [ [string] ] += [number] [EOL] cfg [ [string] ] -= [number] [EOL] [EOL] assert cfg == test1 [EOL] [EOL] def test_embed_list_diff ( ) : [EOL] [EOL] test1 = { [string] : [ { [string] : [ [string] , [string] ] } , { [string] : [ [string] , [string] ] } , ] } [EOL] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert isinstance ( cfg [ [string] ] [ [number] ] [ [string] ] , config_diff . ConfigList ) [EOL] assert cfg [ [string] ] [ [number] ] == test1 [ [string] ] [ [number] ] [EOL] [EOL] test1 [ [string] ] . clear ( ) [EOL] cfg . sync ( test1 ) [EOL] [EOL] assert len ( test1 [ [string] ] ) == [number] [EOL] [EOL] cfg [ [string] ] . insert ( [number] , { [string] : [ [string] , [string] ] } ) [EOL] assert len ( cfg [ [string] ] ) == [number] [EOL] [EOL] cfg [ [string] ] += [ { [string] : [ [string] , [string] ] } ] [EOL] assert len ( cfg [ [string] ] ) == [number] [EOL] [EOL] cfg [ [string] ] . extend ( [ { [string] : [ [string] , [string] ] } ] ) [EOL] assert len ( cfg [ [string] ] ) == [number] [EOL] [EOL] cfg [ [string] ] [ [number] ] = { [string] : [ ] } [EOL] assert len ( cfg [ [string] ] ) == [number] [EOL] assert len ( cfg [ [string] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_list_diff ( ) : [EOL] [EOL] el3 = { [string] : [string] } [EOL] [EOL] test1 = { [string] : { [string] : [ { [string] : [string] } , { [string] : [string] } , el3 ] } } [EOL] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] assert len ( cfg [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] watcher = CallbackWatcher ( ) [EOL] cfg . add_callback ( watcher . on_callback ) [EOL] [EOL] [comment] [EOL] assert cfg [ [string] ] [ [string] ] == test1 [ [string] ] [ [string] ] [EOL] [EOL] del cfg [ [string] ] [ [string] ] [ [number] ] [EOL] cfg [ [string] ] [ [string] ] . remove ( el3 ) [EOL] assert len ( cfg [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] log . info ( [string] , cfg ) [EOL] [EOL] tries = [number] [EOL] while watcher . event is None : [EOL] sleep ( [number] ) [EOL] tries -= [number] [EOL] if tries == [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] cfg [ [string] ] [ [string] ] [ [number] ] [ [string] ] = [string] [EOL] [EOL] assert len ( watcher . event . get_paths ( ) ) == [number] [EOL] assert watcher . event . get_root ( ) is not None [EOL] [EOL] [EOL] def test_to_values ( ) : [EOL] [EOL] val = { [string] : [string] } [EOL] cfg = config_diff . Config ( val ) [EOL] [EOL] assert val == cfg . to_values ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.ConfigChangedEventlogging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict , Union , List [EOL] import typing [EOL] import os [EOL] from ambianic . webapp . server import config_sources [EOL] from ambianic import config_manager [EOL] from werkzeug . exceptions import NotFound , BadRequest [EOL] [EOL] [EOL] def get_test_config ( ) : [EOL] config_manager . stop ( ) [EOL] config_manager . CONFIG_FILE = [string] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] config = config_manager . load ( _dir ) [EOL] assert config is not None [EOL] return config [EOL] [EOL] [EOL] def teardown_module ( module ) : [EOL] [docstring] [EOL] config_manager . stop ( ) [EOL] [EOL] [EOL] def test_save ( ) : [EOL] [EOL] config = get_test_config ( ) [EOL] [EOL] source_id = [string] [EOL] result = config_sources . save ( source_id , { [string] : source_id , [string] : [string] , [string] : True , } ) [EOL] [EOL] assert result [ [string] ] == source_id [EOL] source1 = config_manager . get ( ) [ [string] ] [ source_id ] [EOL] assert config_manager . get ( ) [ [string] ] [ source_id ] [EOL] assert source1 [ [string] ] == source_id [EOL] [EOL] [EOL] def test_save_bad_args ( ) : [EOL] [EOL] args = [ { [string] : { } , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : None } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : True } , ] [EOL] for arg in args : [EOL] try : [EOL] if [string] not in arg . keys ( ) : [EOL] arg [ [string] ] = [string] [EOL] config_sources . save ( arg [ [string] ] , arg ) [EOL] assert False [EOL] except BadRequest : [EOL] pass [EOL] [EOL] [EOL] def test_remove_bad_id ( ) : [EOL] for arg in [ None , { } , [number] ] : [EOL] try : [EOL] config_sources . remove ( arg ) [EOL] assert False [EOL] except BadRequest : [EOL] pass [EOL] [EOL] [EOL] def test_remove ( ) : [EOL] [EOL] config = get_test_config ( ) [EOL] [EOL] config . sync ( { [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } } } ) [EOL] [EOL] config_sources . remove ( [string] ) [EOL] [EOL] assert [string] not in list ( config [ [string] ] . keys ( ) ) [EOL] assert len ( config [ [string] ] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import ambianic [EOL] import tests [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from time import sleep [EOL] from ambianic . config_mgm import config_diff [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class CallbackWatcher : [EOL] def __init__ ( self ) : [EOL] self . event = None [EOL] [EOL] def reset ( self ) : [EOL] self . event = None [EOL] [EOL] def on_callback ( self , event ) : [EOL] [EOL] assert event . get_name ( ) [EOL] assert event . get_operation ( ) [EOL] assert event . get_value ( ) [EOL] assert isinstance ( event . get_tree ( ) , list ) [EOL] [EOL] self . event = event [EOL] [EOL] [EOL] def test_callbacks ( ) : [EOL] [EOL] watcher = CallbackWatcher ( ) [EOL] [EOL] test1 = { [string] : [string] } [EOL] [EOL] cfg = config_diff . Config ( test1 ) [EOL] [EOL] cfg . add_callback ( watcher . on_callback ) [EOL] [EOL] cfg . set ( [string] , [string] ) [EOL] [EOL] assert cfg . get ( [string] ) == [string] [EOL] assert watcher . event is not None [EOL] [EOL] cfg . remove_callback ( watcher . on_callback ) [EOL] [EOL] def cb1 ( ev ) : [EOL] pass [EOL] cfg . remove_callback ( cb1 ) [EOL] [EOL] assert len ( cfg . get_callbacks ( ) ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] from ambianic import pipeline [EOL] [EOL] [EOL] def test_init ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] assert pe . state == pipeline . PIPE_STATE_STOPPED [EOL] [EOL] [EOL] def test_start ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] pe . start ( ) [EOL] assert pe . state == pipeline . PIPE_STATE_RUNNING [EOL] [EOL] [EOL] def test_stop ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] pe . stop ( ) [EOL] assert pe . state == pipeline . PIPE_STATE_STOPPED [EOL] [EOL] [EOL] def test_connect_to_next_element ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] pe_next = pipeline . PipeElement ( ) [EOL] pe . connect_to_next_element ( next_element = pe_next ) [EOL] assert pe . _next_element == pe_next [EOL] [EOL] [EOL] def test_connect_to_bad_next_element ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] [comment] [EOL] pe_next = [ ] [EOL] with pytest . raises ( AssertionError ) : [EOL] pe . connect_to_next_element ( next_element = pe_next ) [EOL] [EOL] [EOL] def test_healthcheck ( ) : [EOL] pe = pipeline . PipeElement ( ) [EOL] hb = pe . _latest_heartbeat [EOL] hb1 , status = pe . healthcheck ( ) [EOL] assert hb == hb1 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import tests [EOL] import logging [EOL] import typing [EOL] import threading [EOL] [docstring] [EOL] from ambianic import pipeline [EOL] from ambianic . config_mgm import Config [EOL] from ambianic . pipeline import interpreter [EOL] from ambianic . pipeline . avsource . av_element import AVSourceElement [EOL] from ambianic . pipeline . interpreter import PipelineServer , Pipeline , HealingThread , PipelineServerJob [EOL] import logging [EOL] import time [EOL] import threading [EOL] [EOL] [EOL] log = logging . getLogger ( ) [EOL] log . setLevel ( logging . DEBUG ) [EOL] [EOL] [EOL] def setup_module ( module ) : [EOL] [docstring] [EOL] [comment] [EOL] interpreter . PIPELINE_CLASS = None [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] [EOL] [EOL] def teardown_module ( module ) : [EOL] [docstring] [EOL] [comment] [EOL] interpreter . PIPELINE_CLASS = None [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] [EOL] [EOL] class _TestSourceElement ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . config = element_config [EOL] self . start_called = False [EOL] self . stop_called = False [EOL] [EOL] def start ( self ) : [EOL] self . start_called = True [EOL] super ( ) . start ( ) [EOL] [comment] [EOL] self . receive_next_sample ( sample = [ [number] , [number] , [number] ] ) [EOL] [EOL] def stop ( self ) : [EOL] self . stop_called = True [EOL] super ( ) . stop ( ) [EOL] [EOL] [EOL] def _get_config ( source_class = None ) : [EOL] [comment] [EOL] Pipeline . PIPELINE_OPS [ [string] ] = source_class [EOL] server_config = Config ( { [string] : { [string] : [ { [string] : { [string] : [string] } } ] } , } ) [EOL] return server_config [EOL] [EOL] [EOL] def test_pipeline_server_init ( ) : [EOL] conf = _get_config ( _TestSourceElement ) [EOL] server = PipelineServerJob ( conf ) [EOL] assert len ( server . _pipelines ) == [number] [EOL] assert len ( server . _threaded_jobs ) == [number] [EOL] [EOL] [EOL] def _get_config_invalid_element ( source_class = None ) : [EOL] [comment] [EOL] Pipeline . PIPELINE_OPS [ [string] ] = source_class [EOL] pipeline_config = Config ( [ { [string] : { [string] : [string] } } , { [string] : { [string] : [string] } } , ] ) [EOL] return pipeline_config [EOL] [EOL] [EOL] class _TestPipeline ( Pipeline ) : [EOL] [EOL] def __init__ ( self , pname = None , pconfig = None ) : [EOL] self . _test_on_unknown_pipe_element_called = False [EOL] self . _test_on_healing_already_in_progress_called = False [EOL] self . _test_on_start_no_elements_called = False [EOL] super ( ) . __init__ ( pname = pname , pconfig = pconfig ) [EOL] [EOL] def _on_unknown_pipe_element ( self , name = None ) : [EOL] self . _test_on_unknown_pipe_element_called = True [EOL] log . debug ( [string] ) [EOL] super ( ) . _on_unknown_pipe_element ( name = name ) [EOL] [EOL] def _on_healing_already_in_progress ( self ) : [EOL] self . _test_on_healing_already_in_progress_called = True [EOL] super ( ) . _on_healing_already_in_progress ( ) [EOL] [EOL] def _on_start_no_elements ( self ) : [EOL] self . _test_on_start_no_elements_called = True [EOL] super ( ) . _on_start_no_elements ( ) [EOL] [EOL] [EOL] def test_pipeline_init_invalid_element ( ) : [EOL] conf = _get_config_invalid_element ( _TestSourceElement ) [EOL] pipeline = _TestPipeline ( pname = [string] , pconfig = conf ) [EOL] assert pipeline . _test_on_unknown_pipe_element_called [EOL] assert len ( pipeline . _pipe_elements ) == [number] [EOL] assert isinstance ( pipeline . _pipe_elements [ [number] ] , _TestSourceElement ) [EOL] [EOL] [EOL] class _TestSourceElement2 ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . config = element_config [EOL] self . _test_element_started = threading . Event ( ) [EOL] [EOL] def start ( self ) : [EOL] super ( ) . start ( ) [EOL] self . _test_element_started . set ( ) [EOL] [comment] [EOL] while self . state == pipeline . PIPE_STATE_RUNNING : [EOL] self . receive_next_sample ( sample = [ [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_pipeline_server_start_stop ( ) : [EOL] conf = _get_config ( _TestSourceElement2 ) [EOL] server = PipelineServerJob ( conf ) [EOL] assert len ( server . _pipelines ) == [number] [EOL] assert len ( server . _threaded_jobs ) == [number] [EOL] source_pe = server . _pipelines [ [number] ] . _pipe_elements [ [number] ] [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] server . start ( ) [EOL] source_pe . _test_element_started . wait ( timeout = [number] ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_RUNNING [EOL] assert server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] server . stop ( ) [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] [EOL] [EOL] def test_pipeline_server_config_change ( ) : [EOL] conf = _get_config ( _TestSourceElement2 ) [EOL] PipelineServer ( conf ) [EOL] [EOL] del conf [ [string] ] [ [string] ] [ [number] ] [EOL] [EOL] [EOL] class _TestSourceElement3 ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . _test_heal_called = threading . Event ( ) [EOL] self . _test_sample_released = threading . Event ( ) [EOL] log . debug ( [string] ) [EOL] [EOL] def heal ( self ) : [EOL] self . _test_heal_called . set ( ) [EOL] log . debug ( [string] ) [EOL] [EOL] def start ( self ) : [EOL] super ( ) . start ( ) [EOL] [comment] [EOL] while self . state == pipeline . PIPE_STATE_RUNNING : [EOL] self . receive_next_sample ( sample = [ [number] , [number] , [number] ] ) [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] time . sleep ( [number] ) [EOL] self . _test_sample_released . set ( ) [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] def test_pipeline_server_heal ( ) : [EOL] conf = _get_config ( _TestSourceElement3 ) [EOL] server = PipelineServerJob ( conf ) [EOL] assert len ( server . _pipelines ) == [number] [EOL] assert len ( server . _threaded_jobs ) == [number] [EOL] source_pe = server . _pipelines [ [number] ] . _pipe_elements [ [number] ] [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] server . MAX_HEARTBEAT_INTERVAL = [number] [EOL] server . start ( ) [EOL] source_pe . _test_sample_released . wait ( timeout = [number] ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_RUNNING [EOL] assert server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] server . healthcheck ( ) [EOL] assert source_pe . _test_heal_called . wait ( timeout = [number] ) [EOL] server . stop ( ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] [EOL] [EOL] class _TestPipelineServer2 ( PipelineServerJob ) : [EOL] [EOL] def __init__ ( self , config = None ) : [EOL] super ( ) . __init__ ( config = config ) [EOL] self . _test_on_terminal_health_called = threading . Event ( ) [EOL] [EOL] def _on_terminal_pipeline_health ( self , pipeline = None , lapse = None ) : [EOL] log . debug ( [string] ) [EOL] super ( ) . _on_terminal_pipeline_health ( pipeline , lapse ) [EOL] self . _test_on_terminal_health_called . set ( ) [EOL] [EOL] [EOL] def test_pipeline_terminal_health ( ) : [EOL] conf = _get_config ( _TestSourceElement3 ) [EOL] server = _TestPipelineServer2 ( conf ) [EOL] assert len ( server . _pipelines ) == [number] [EOL] assert len ( server . _threaded_jobs ) == [number] [EOL] source_pe = server . _pipelines [ [number] ] . _pipe_elements [ [number] ] [EOL] server . TERMINAL_HEALTH_INTERVAL = [number] [EOL] server . start ( ) [EOL] source_pe . _test_sample_released . wait ( timeout = [number] ) [EOL] server . healthcheck ( ) [EOL] assert server . _test_on_terminal_health_called . wait ( timeout = [number] ) [EOL] server . stop ( ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] [EOL] [EOL] class _TestDummyElement ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . _config = element_config [EOL] self . _test_heal_called = False [EOL] [EOL] _sample_processed = False [EOL] [EOL] def process_sample ( self , sample = None ) : [EOL] assert sample == [ [number] , [number] , [number] ] [EOL] self . _sample_processed = True [EOL] yield { [string] : sample } [EOL] [EOL] [EOL] def _get_pipeline_config_2_elements ( ) : [EOL] [comment] [EOL] Pipeline . PIPELINE_OPS [ [string] ] = _TestSourceElement [EOL] Pipeline . PIPELINE_OPS [ [string] ] = _TestDummyElement [EOL] pipeline_config = [ { [string] : { [string] : [string] } } , { [string] : { [string] : [string] } } ] [EOL] return pipeline_config [EOL] [EOL] [EOL] def test_pipeline_start2 ( ) : [EOL] conf = _get_pipeline_config_2_elements ( ) [EOL] pipeline = _TestPipeline ( pname = [string] , pconfig = conf ) [EOL] assert len ( pipeline . _pipe_elements ) == [number] [EOL] assert isinstance ( pipeline . _pipe_elements [ [number] ] , _TestSourceElement ) [EOL] assert isinstance ( pipeline . _pipe_elements [ [number] ] , _TestDummyElement ) [EOL] pipeline . start ( ) [EOL] dummy = pipeline . _pipe_elements [ [number] ] [EOL] assert dummy . _sample_processed [EOL] pipeline . stop ( ) [EOL] [EOL] [EOL] class _TestSourceElement4 ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . config = element_config [EOL] [EOL] def start ( self ) : [EOL] super ( ) . start ( ) [EOL] self . receive_next_sample ( sample = [ [number] , [number] , [number] ] ) [EOL] [EOL] def heal ( self ) : [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] def test_pipeline_heal2 ( ) : [EOL] Pipeline . PIPELINE_OPS [ [string] ] = _TestSourceElement4 [EOL] pipeline_config = [ { [string] : { [string] : [string] } } , ] [EOL] pipeline = _TestPipeline ( pname = [string] , pconfig = pipeline_config ) [EOL] assert len ( pipeline . _pipe_elements ) == [number] [EOL] assert isinstance ( pipeline . _pipe_elements [ [number] ] , _TestSourceElement4 ) [EOL] pipeline . start ( ) [EOL] pipeline . heal ( ) [EOL] assert not pipeline . _test_on_healing_already_in_progress_called [EOL] pipeline . heal ( ) [EOL] assert pipeline . _test_on_healing_already_in_progress_called [EOL] pipeline . stop ( ) [EOL] [EOL] [EOL] def test_pipeline_start_no_elements ( ) : [EOL] Pipeline . PIPELINE_OPS [ [string] ] = _TestSourceElement4 [EOL] pipeline_config = [ { [string] : [string] } , ] [EOL] pipeline = _TestPipeline ( pname = [string] , pconfig = pipeline_config ) [EOL] assert len ( pipeline . _pipe_elements ) == [number] [EOL] pipeline . start ( ) [EOL] assert pipeline . _test_on_start_no_elements_called [EOL] [EOL] [EOL] def test_healing_thread ( ) : [EOL] _target_called = False [EOL] [EOL] def target ( ) : [EOL] nonlocal _target_called [EOL] _target_called = True [EOL] raise RuntimeError ( ) [EOL] [EOL] _on_finished_called = False [EOL] [EOL] def on_finished ( ) : [EOL] nonlocal _on_finished_called [EOL] _on_finished_called = True [EOL] raise RuntimeError ( ) [EOL] [EOL] healer = HealingThread ( target = target , on_finished = on_finished ) [EOL] healer . run ( ) [EOL] assert _target_called [EOL] assert _on_finished_called [EOL] [EOL] [EOL] class _TestPipelineServer5 ( PipelineServerJob ) : [EOL] [EOL] _test_on_threaded_job_ended_called = False [EOL] [EOL] def _on_pipeline_job_ended ( self , threaded_job = None ) : [EOL] self . _test_on_threaded_job_ended_called = True [EOL] super ( ) . _on_pipeline_job_ended ( threaded_job = threaded_job ) [EOL] [EOL] [EOL] class _TestSourceElement5 ( pipeline . PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . config = element_config [EOL] [EOL] def start ( self ) : [EOL] super ( ) . start ( ) [EOL] [comment] [EOL] self . receive_next_sample ( sample = [ [number] , [number] , [number] ] ) [EOL] super ( ) . stop ( ) [EOL] [EOL] [EOL] def test_on_pipeline_job_ended ( ) : [EOL] conf = _get_config ( _TestSourceElement5 ) [EOL] server = _TestPipelineServer5 ( conf ) [EOL] assert len ( server . _pipelines ) == [number] [EOL] assert len ( server . _threaded_jobs ) == [number] [EOL] source_pe = server . _pipelines [ [number] ] . _pipe_elements [ [number] ] [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [ [number] ] . is_alive ( ) [EOL] server . start ( ) [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] server . healthcheck ( ) [EOL] assert source_pe . state == pipeline . PIPE_STATE_STOPPED [EOL] assert not server . _threaded_jobs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import tests [EOL] import logging [EOL] import os [EOL] from ambianic import pipeline , config_manager [EOL] from ambianic . pipeline import interpreter [EOL] from ambianic . pipeline . avsource . av_element import AVSourceElement [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def setup_module ( module ) : [EOL] [docstring] [EOL] [comment] [EOL] interpreter . PIPELINE_CLASS = None [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] _TestPipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] config_manager . stop ( ) [EOL] [EOL] [EOL] def teardown_module ( module ) : [EOL] [docstring] [EOL] [comment] [EOL] interpreter . PIPELINE_CLASS = None [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] _TestPipeline . PIPELINE_OPS [ [string] ] = AVSourceElement [EOL] config_manager . stop ( ) [EOL] [EOL] [EOL] class _TestPipeline ( interpreter . Pipeline ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , pname = None , pconfig = None , data_dir = None ) : [EOL] super ( ) . __init__ ( pname , pconfig , data_dir ) [EOL] self . on_change_called = False [EOL] self . restart_called = False [EOL] log . debug ( [string] ) [EOL] [EOL] def on_config_change ( self , event ) : [EOL] super ( ) . on_config_change ( event ) [EOL] self . on_change_called = True [EOL] log . debug ( [string] ) [EOL] [EOL] def restart ( self ) : [EOL] super ( ) . restart ( ) [EOL] self . restart_called = True [EOL] log . debug ( [string] ) [EOL] [EOL] [EOL] class _TestSourceElement ( pipeline . PipeElement ) : [EOL] [EOL] def __init__ ( self , ** element_config ) : [EOL] super ( ) . __init__ ( ) [EOL] self . config = element_config [EOL] self . start_called = False [EOL] self . stop_called = False [EOL] self . on_config_change_called = False [EOL] log . debug ( [string] ) [EOL] [EOL] def start ( self ) : [EOL] super ( ) . start ( ) [EOL] self . start_called = True [EOL] [comment] [EOL] self . receive_next_sample ( [ [number] , [number] , [number] ] ) [EOL] log . debug ( [string] ) [EOL] [EOL] def heal ( self ) : [EOL] [docstring] [EOL] [EOL] def stop ( self ) : [EOL] super ( ) . stop ( ) [EOL] self . stop_called = True [EOL] [EOL] def receive_next_sample ( self , * sample ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _get_pipelines_config ( ) : [EOL] return { [string] : [ { [string] : { [string] : [string] } } ] } [EOL] [EOL] [EOL] def _one_pipeline_setup ( pipelines_config = None , set_source_el = True ) : [EOL] if pipelines_config is None : [EOL] pipelines_config = _get_pipelines_config ( ) [EOL] [comment] [EOL] if set_source_el : [EOL] log . info ( [string] ) [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = _TestSourceElement [EOL] return interpreter . get_pipelines ( pipelines_config = pipelines_config ) [EOL] [EOL] [EOL] def test_get_pipelines_none ( ) : [EOL] p = interpreter . get_pipelines ( pipelines_config = [ ] ) [EOL] assert not p [EOL] [EOL] [EOL] def test_derived_pipe_element ( ) : [EOL] derived_element = _TestSourceElement ( element_config = [string] ) [EOL] assert derived_element . state == pipeline . PIPE_STATE_STOPPED [EOL] [EOL] [EOL] def test_get_pipelines_one ( ) : [EOL] p = _one_pipeline_setup ( ) [EOL] print ( [string] . format ( p0 = p [ [number] ] ) ) [EOL] assert isinstance ( p [ [number] ] , interpreter . Pipeline ) [EOL] assert p [ [number] ] . name == [string] [EOL] assert isinstance ( p [ [number] ] . _pipe_elements [ [number] ] , _TestSourceElement ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . config [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_pipelines_two ( ) : [EOL] [comment] [EOL] interpreter . Pipeline . PIPELINE_OPS [ [string] ] = _TestSourceElement [EOL] p = interpreter . get_pipelines ( pipelines_config = config_manager . Config ( { [string] : [ { [string] : { [string] : [string] } } ] , [string] : [ { [string] : { [string] : [string] } } ] } ) ) [EOL] assert isinstance ( p [ [number] ] , interpreter . Pipeline ) [EOL] assert p [ [number] ] . name == [string] [EOL] assert isinstance ( p [ [number] ] . _pipe_elements [ [number] ] , _TestSourceElement ) [EOL] assert isinstance ( p [ [number] ] , interpreter . Pipeline ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . config [ [string] ] == [string] [EOL] assert p [ [number] ] . name == [string] [EOL] assert isinstance ( p [ [number] ] . _pipe_elements [ [number] ] , _TestSourceElement ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . config [ [string] ] == [string] [EOL] [EOL] [EOL] def test_pipeline_start ( ) : [EOL] p = _one_pipeline_setup ( ) [EOL] p [ [number] ] . load_elements ( ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . state == pipeline . PIPE_STATE_STOPPED [EOL] pe = p [ [number] ] . _pipe_elements [ [number] ] [EOL] assert isinstance ( pe , _TestSourceElement ) [EOL] assert not pe . start_called [EOL] p [ [number] ] . start ( ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . state == pipeline . PIPE_STATE_RUNNING [EOL] assert pe . start_called [EOL] [EOL] [EOL] def test_pipeline_stop ( ) : [EOL] p = _one_pipeline_setup ( ) [EOL] p [ [number] ] . start ( ) [EOL] pe = p [ [number] ] . _pipe_elements [ [number] ] [EOL] assert pe . state == pipeline . PIPE_STATE_RUNNING [EOL] assert pe . start_called [EOL] assert not pe . stop_called [EOL] p [ [number] ] . stop ( ) [EOL] [comment] [EOL] pe = p [ [number] ] . _pipe_elements [ [number] ] [EOL] assert isinstance ( pe , _TestSourceElement ) [EOL] assert pe . state == pipeline . PIPE_STATE_STOPPED [EOL] [EOL] [EOL] [EOL] def test_pipeline_source_config ( ) : [EOL] [docstring] [EOL] config_manager . set ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : False } } , [string] : { [string] : [ { [string] : [string] } ] } } ) [EOL] p = _one_pipeline_setup ( config_manager . get_pipelines ( ) ) [EOL] p [ [number] ] . load_elements ( ) [EOL] [EOL] log . debug ( p [ [number] ] . _pipe_elements [ [number] ] ) [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . config [ [string] ] == [string] [EOL] [EOL] [EOL] def test_pipeline_ai_model_config ( ) : [EOL] [docstring] [EOL] [EOL] config_manager . stop ( ) [EOL] [EOL] config_manager . set ( { [string] : { [string] : { [string] : [string] , [string] : { [string] : [string] , } } } , [string] : { [string] : [ { [string] : { [string] : [string] } } , { [string] : { [string] : [string] , [string] : [number] } } ] } } ) [EOL] p = _one_pipeline_setup ( config_manager . get_pipelines ( ) ) [EOL] p [ [number] ] . load_elements ( ) [EOL] [EOL] log . debug ( p [ [number] ] . _pipe_elements [ [number] ] ) [EOL] assert len ( p [ [number] ] . _pipe_elements ) == [number] [EOL] assert p [ [number] ] . _pipe_elements [ [number] ] . _tfengine . _confidence_threshold == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Loggerlogging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import ambianic [EOL] import tests [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] from ambianic import pipeline [EOL] from ambianic . config_mgm import Config , ConfigChangedEvent [EOL] from ambianic import config_manager [EOL] from ambianic . pipeline import interpreter [EOL] from ambianic . pipeline . avsource . av_element import AVSourceElement [EOL] from ambianic . pipeline . interpreter import PipelineServer , Pipeline , HealingThread , PipelineServerJob [EOL] import logging [EOL] import time [EOL] import threading [EOL] import os [EOL] [EOL] [EOL] log = logging . getLogger ( ) [EOL] log . setLevel ( logging . DEBUG ) [EOL] [EOL] def test_pipeline_server_start_stop ( ) : [EOL] [EOL] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] config_manager . set ( Config ( { [string] : { [string] : { [string] : os . path . join ( _dir , [string] ) } } , [string] : { [string] : [ { [string] : [string] } ] } } ) ) [EOL] [EOL] srv = PipelineServer ( config_manager . get_pipelines ( ) ) [EOL] srv . start ( ) [EOL] srv . stop ( ) [EOL] [EOL] [EOL] class PipelineServerEv ( PipelineServer ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] super ( ) . __init__ ( config ) [EOL] self . triggered = False [EOL] [EOL] def trigger_event ( self , event ) : [EOL] log . debug ( [string] ) [EOL] super ( ) . trigger_event ( event ) [EOL] self . triggered = True [EOL] [EOL] [EOL] def test_pipeline_server_config_change ( ) : [EOL] [EOL] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] source_cfg = { [string] : os . path . join ( _dir , [string] ) } [EOL] [EOL] config_manager . set ( Config ( { [string] : { [string] : [ { [string] : [string] } ] } } ) ) [EOL] [EOL] srv = PipelineServerEv ( config_manager . get_pipelines ( ) ) [EOL] srv . start ( ) [EOL] [EOL] config_manager . get ( ) . add_callback ( srv . trigger_event ) [EOL] config_manager . get_sources ( ) . set ( [string] , source_cfg ) [EOL] [comment] [EOL] assert srv . triggered [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.Config.ChangedEvent$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.Config.ChangedEvent$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from ambianic import pipeline [EOL] [EOL] [EOL] def test_init ( ) : [EOL] def hc_callback ( ) : [EOL] pass [EOL] hc = pipeline . HealthChecker ( health_status_callback = hc_callback ) [EOL] assert hc . _health_status_callback == hc_callback [EOL] [EOL] [EOL] def test_receive_next_sample ( ) : [EOL] called = False [EOL] [EOL] def hc_callback ( ) : [EOL] nonlocal called [EOL] called = True [EOL] hc = pipeline . HealthChecker ( health_status_callback = hc_callback ) [EOL] hc . receive_next_sample ( ) [EOL] assert called [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import typing [EOL] import logging [EOL] import tests [EOL] import threading [EOL] [docstring] [EOL] import pytest [EOL] from ambianic . pipeline . avsource . av_element import AVSourceElement , MIN_HEALING_INTERVAL [EOL] import threading [EOL] import os [EOL] import pathlib [EOL] import time [EOL] from ambianic . pipeline import PipeElement [EOL] from ambianic . pipeline . ai . object_detect import ObjectDetector [EOL] from ambianic . pipeline . avsource . gst_process import GstService [EOL] import logging [EOL] [EOL] log = logging . getLogger ( ) [EOL] log . setLevel ( logging . DEBUG ) [EOL] [EOL] [EOL] def test_no_config ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] AVSourceElement ( ) [EOL] [EOL] [EOL] class _TestAVSourceElement ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _run_gst_service_called = False [EOL] self . _stop_gst_service_called = False [EOL] [EOL] def _run_gst_service ( self ) : [EOL] self . _run_gst_service_called = True [EOL] [EOL] def _stop_gst_service ( self ) : [EOL] self . _stop_gst_service_called = True [EOL] [EOL] [EOL] class _OutPipeElement ( PipeElement ) : [EOL] [EOL] def __init__ ( self , sample_callback = None ) : [EOL] super ( ) . __init__ ( ) [EOL] assert sample_callback [EOL] self . _sample_callback = sample_callback [EOL] [EOL] def receive_next_sample ( self , ** sample ) : [EOL] self . _sample_callback ( ** sample ) [EOL] [EOL] [EOL] def test_no_config ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] AVSourceElement ( ) [EOL] [EOL] [EOL] def test_start_stop_dummy_source ( ) : [EOL] avsource = _TestAVSourceElement ( uri = [string] , type = [string] ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert avsource . _run_gst_service_called [EOL] assert t . is_alive ( ) [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert avsource . _stop_gst_service_called [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_start_stop_file_source_image_size ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = AVSourceElement ( uri = video_uri , type = [string] ) [EOL] sample_received = threading . Event ( ) [EOL] sample_image = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal sample_received [EOL] sample_image = image [EOL] sample_received . set ( ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] avsource . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] sample_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert t . is_alive ( ) [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def _object_detect_config ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] _good_tflite_model = os . path . join ( _dir , [string] ) [EOL] _good_edgetpu_model = os . path . join ( _dir , [string] ) [EOL] _good_labels = os . path . join ( _dir , [string] ) [EOL] config = { [string] : { [string] : _good_tflite_model , [string] : _good_edgetpu_model , } , [string] : _good_labels , [string] : [number] , [string] : [number] , } [EOL] return config [EOL] [EOL] [EOL] def test_start_stop_file_source_person_detect ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = AVSourceElement ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_stop_on_video_EOS ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = AVSourceElement ( uri = video_uri , type = [string] ) [EOL] sample_received = threading . Event ( ) [EOL] sample_image = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal sample_received [EOL] sample_image = image [EOL] sample_received . set ( ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] avsource . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] sample_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert t . is_alive ( ) [EOL] avsource . _gst_process_eos_reached . wait ( timeout = [number] ) [EOL] if not avsource . _gst_process_eos_reached . is_set ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_still_image_input_detect_person_exit_eos ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = AVSourceElement ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] t . join ( timeout = [number] ) [EOL] assert avsource . _gst_process_eos_reached . is_set ( ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_still_image_input_detect_person_exit_stop_signal ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = AVSourceElement ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_heal ( ) : [EOL] avsource = _TestAVSourceElement ( uri = [string] , type = [string] ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] t . join ( timeout = [number] ) [EOL] [comment] [EOL] avsource . _latest_healing = avsource . _latest_healing - [number] * MIN_HEALING_INTERVAL [EOL] avsource . heal ( ) [EOL] [comment] [EOL] assert avsource . _stop_gst_service_called [EOL] latest = avsource . _latest_healing [EOL] avsource . heal ( ) [EOL] [comment] [EOL] [comment] [EOL] assert latest == avsource . _latest_healing [EOL] [comment] [EOL] avsource . _latest_healing = avsource . _latest_healing - [number] * MIN_HEALING_INTERVAL [EOL] avsource . heal ( ) [EOL] [comment] [EOL] [comment] [EOL] assert latest < avsource . _latest_healing [EOL] assert t . is_alive ( ) [EOL] [comment] [EOL] [comment] [EOL] avsource . _stop_gst_service_called = False [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert avsource . _stop_gst_service_called [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] class _TestAVSourceElement2 ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _bad_sample_processed_re = False [EOL] self . _bad_sample_processed_ae = False [EOL] [EOL] def _get_sample_queue ( self ) : [EOL] q = super ( ) . _get_sample_queue ( ) [EOL] [comment] [EOL] q . put ( [string] ) [EOL] q . put ( [string] ) [EOL] return q [EOL] [EOL] def _on_new_sample ( self , sample = None ) : [EOL] if not self . _bad_sample_processed_re : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] self . _bad_sample_processed_re = True [EOL] raise RuntimeError ( [string] ) [EOL] if not self . _bad_sample_processed_ae : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] self . _bad_sample_processed_ae = True [EOL] raise AssertionError ( [string] ) [EOL] super ( ) . _on_new_sample ( sample ) [EOL] [EOL] [EOL] def test_exception_on_new_sample ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = _TestAVSourceElement2 ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . _gst_process_eos_reached . wait ( timeout = [number] ) [EOL] assert avsource . _gst_process_eos_reached . is_set ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def _test_start_gst_service3 ( source_conf = None , out_queue = None , stop_signal = None , eos_reached = None ) : [EOL] print ( [string] ) [EOL] svc = _TestGstService3 ( source_conf = source_conf , out_queue = out_queue , stop_signal = stop_signal , eos_reached = eos_reached ) [EOL] svc . run ( ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] class _TestGstService3 ( GstService ) : [EOL] [EOL] def _stop_handler ( self ) : [EOL] self . _stop_signal . wait ( ) [EOL] print ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _on_bus_message_eos ( self , message ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] class _TestAVSourceElement3 ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _clean_kill = False [EOL] [EOL] def _get_gst_service_starter ( self ) : [EOL] print ( [string] [string] ) [EOL] return _test_start_gst_service3 [EOL] [EOL] def _process_good_kill ( self , proc = None ) : [EOL] print ( [string] % proc . pid ) [EOL] self . _clean_kill = super ( ) . _process_good_kill ( proc ) [EOL] print ( [string] % self . _clean_kill ) [EOL] return self . _clean_kill [EOL] [EOL] [EOL] def test_gst_process_kill ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = _TestAVSourceElement3 ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] assert avsource . _clean_kill [EOL] [EOL] [EOL] class _TestGstService4 ( GstService ) : [EOL] [EOL] _terminate_called = False [EOL] [EOL] def _service_terminate ( self , signum , frame ) : [EOL] print ( [string] % signum ) [EOL] self . _terminate_called = True [EOL] super ( ) . _service_terminate ( signum , frame ) [EOL] [EOL] def _stop_handler ( self ) : [EOL] print ( [string] ) [EOL] while not self . _terminate_called : [EOL] time . sleep ( [number] ) [EOL] [comment] [EOL] super ( ) . _stop_handler ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _on_bus_message_eos ( self , message ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def _test_start_gst_service4 ( source_conf = None , out_queue = None , stop_signal = None , eos_reached = None ) : [EOL] print ( [string] ) [EOL] svc = _TestGstService4 ( source_conf = source_conf , out_queue = out_queue , stop_signal = stop_signal , eos_reached = eos_reached ) [EOL] svc . run ( ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] class _TestAVSourceElement4 ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _terminate_requested = False [EOL] self . _clean_terminate = True [EOL] [EOL] def _get_gst_service_starter ( self ) : [EOL] print ( [string] [string] ) [EOL] return _test_start_gst_service4 [EOL] [EOL] def _process_terminate ( self , proc = None ) : [EOL] self . _terminate_requested = True [EOL] super ( ) . _process_terminate ( proc ) [EOL] [EOL] def _process_good_kill ( self , proc = None ) : [EOL] [comment] [EOL] self . _clean_terminate = False [EOL] print ( [string] [string] ) [EOL] clean_kill = super ( ) . _process_good_kill ( proc ) [EOL] return clean_kill [EOL] [EOL] [EOL] def test_gst_process_terminate ( ) : [EOL] [docstring] [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] video_file = os . path . join ( _dir , [string] ) [EOL] abs_path = os . path . abspath ( video_file ) [EOL] video_uri = pathlib . Path ( abs_path ) . as_uri ( ) [EOL] avsource = _TestAVSourceElement4 ( uri = video_uri , type = [string] ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] assert avsource . _terminate_requested [EOL] assert avsource . _clean_terminate [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.boolbuiltins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import tests [EOL] import logging [EOL] import typing [EOL] import threading [EOL] [docstring] [EOL] import pytest [EOL] from ambianic . pipeline . avsource . av_element import AVSourceElement , MIN_HEALING_INTERVAL [EOL] import threading [EOL] import os [EOL] import pathlib [EOL] import time [EOL] from ambianic . pipeline import PipeElement [EOL] from ambianic . pipeline . ai . object_detect import ObjectDetector [EOL] import logging [EOL] [EOL] log = logging . getLogger ( ) [EOL] log . setLevel ( logging . DEBUG ) [EOL] [EOL] [EOL] def _object_detect_config ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] _good_tflite_model = os . path . join ( _dir , [string] ) [EOL] _good_edgetpu_model = os . path . join ( _dir , [string] ) [EOL] _good_labels = os . path . join ( _dir , [string] ) [EOL] config = { [string] : { [string] : _good_tflite_model , [string] : _good_edgetpu_model , } , [string] : _good_labels , [string] : [number] , [string] : [number] , } [EOL] return config [EOL] [EOL] [EOL] class _TestAVSourceElement ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _run_http_fetch_called = False [EOL] [EOL] def _run_http_fetch ( self , url = None , continuous = False ) : [EOL] self . _run_http_fetch_called = True [EOL] super ( ) . _run_http_fetch ( url = url , continuous = continuous ) [EOL] [EOL] class _OutPipeElement ( PipeElement ) : [EOL] [EOL] def __init__ ( self , sample_callback = None ) : [EOL] super ( ) . __init__ ( ) [EOL] assert sample_callback [EOL] self . _sample_callback = sample_callback [EOL] [EOL] def receive_next_sample ( self , ** sample ) : [EOL] self . _sample_callback ( ** sample ) [EOL] [EOL] [EOL] def test_http_still_image_input_detect_person_exit ( ) : [EOL] [docstring] [EOL] source_uri = [string] [EOL] avsource = _TestAVSourceElement ( uri = source_uri , type = [string] , live = False ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert avsource . _run_http_fetch_called [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] def test_http_still_image_input_detect_person_exit_stop_signal ( ) : [EOL] [docstring] [EOL] source_uri = [string] [EOL] avsource = AVSourceElement ( uri = source_uri , type = [string] , live = True ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] avsource . stop ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] class _TestAVSourceElement2 ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _bad_sample_processed_re = False [EOL] self . _bad_sample_processed_ae = False [EOL] [EOL] def _get_sample_queue ( self ) : [EOL] q = super ( ) . _get_sample_queue ( ) [EOL] [comment] [EOL] q . put ( [string] ) [EOL] q . put ( [string] ) [EOL] return q [EOL] [EOL] def _on_new_sample ( self , sample = None ) : [EOL] if not self . _bad_sample_processed_re : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] self . _bad_sample_processed_re = True [EOL] raise RuntimeError ( [string] ) [EOL] if not self . _bad_sample_processed_ae : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] self . _bad_sample_processed_ae = True [EOL] raise AssertionError ( [string] ) [EOL] super ( ) . _on_new_sample ( sample ) [EOL] [EOL] [EOL] def test_exception_on_new_sample ( ) : [EOL] [docstring] [EOL] source_uri = [string] [EOL] avsource = _TestAVSourceElement2 ( uri = source_uri , type = [string] , live = False ) [EOL] object_config = _object_detect_config ( ) [EOL] detection_received = threading . Event ( ) [EOL] sample_image = None [EOL] detections = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal sample_image [EOL] nonlocal detection_received [EOL] sample_image = image [EOL] nonlocal detections [EOL] detections = inference_result [EOL] print ( [string] . format ( det = detections ) ) [EOL] print ( [string] . format ( len = len ( detections ) ) ) [EOL] if detections : [EOL] label , confidence , _ = detections [ [number] ] [EOL] if label == [string] and confidence > [number] : [EOL] [comment] [EOL] [comment] [EOL] detection_received . set ( ) [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] avsource . connect_to_next_element ( object_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] detection_received . wait ( timeout = [number] ) [EOL] assert sample_image [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert sample_image . size [ [number] ] == [number] [EOL] assert detections [EOL] assert len ( detections ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = detections [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] [EOL] [EOL] class _TestAVSourceElement3 ( AVSourceElement ) : [EOL] [EOL] def __init__ ( self , ** source_conf ) : [EOL] super ( ) . __init__ ( ** source_conf ) [EOL] self . _run_http_fetch_called = False [EOL] self . _on_fetch_img_exception_called = False [EOL] self . _fetch_img_exception_recovery_called = threading . Event ( ) [EOL] [EOL] def _run_http_fetch ( self , url = None , continuous = False ) : [EOL] self . _run_http_fetch_called = True [EOL] super ( ) . _run_http_fetch ( url = url , continuous = continuous ) [EOL] [EOL] def _on_fetch_img_exception ( self , _exception = None ) : [EOL] self . _on_fetch_img_exception_called = True [EOL] super ( ) . _on_fetch_img_exception ( _exception = _exception ) [EOL] [EOL] def _fetch_img_exception_recovery ( self ) : [EOL] self . _fetch_img_exception_recovery_called . set ( ) [EOL] super ( ) . _fetch_img_exception_recovery ( ) [EOL] [EOL] [EOL] def test_exception_on_http_fetch_single_snapshot ( ) : [EOL] [docstring] [EOL] source_uri = [string] [EOL] avsource = _TestAVSourceElement3 ( uri = source_uri , type = [string] , live = False ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] assert avsource . _run_http_fetch_called [EOL] assert avsource . _on_fetch_img_exception_called [EOL] assert not avsource . _fetch_img_exception_recovery_called . isSet ( ) [EOL] [EOL] [EOL] def test_exception_on_http_fetch_continuous ( ) : [EOL] [docstring] [EOL] source_uri = [string] [EOL] avsource = _TestAVSourceElement3 ( uri = source_uri , type = [string] , live = True ) [EOL] t = threading . Thread ( name = [string] , target = avsource . start , daemon = True ) [EOL] t . start ( ) [EOL] avsource . stop ( ) [EOL] avsource . _fetch_img_exception_recovery_called . wait ( timeout = [number] ) [EOL] t . join ( timeout = [number] ) [EOL] assert not t . is_alive ( ) [EOL] assert avsource . _run_http_fetch_called [EOL] assert avsource . _on_fetch_img_exception_called [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.boolbuiltins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union [EOL] import tests [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] from ambianic . pipeline . ai . object_detect import ObjectDetector [EOL] from ambianic . pipeline . ai . face_detect import FaceDetector [EOL] from ambianic . pipeline import PipeElement [EOL] from PIL import Image [EOL] [EOL] [EOL] def _object_detect_config ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] _good_tflite_model = os . path . join ( _dir , [string] ) [EOL] _good_edgetpu_model = os . path . join ( _dir , [string] ) [EOL] _good_labels = os . path . join ( _dir , [string] ) [EOL] config = { [string] : { [string] : _good_tflite_model , [string] : _good_edgetpu_model , } , [string] : _good_labels , [string] : [number] , [string] : [number] , } [EOL] return config [EOL] [EOL] [EOL] def _face_detect_config ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] _good_tflite_model = os . path . join ( _dir , [string] ) [EOL] _good_edgetpu_model = os . path . join ( _dir , [string] ) [EOL] _good_labels = os . path . join ( _dir , [string] ) [EOL] config = { [string] : { [string] : _good_tflite_model , [string] : _good_edgetpu_model , } , [string] : _good_labels , [string] : [number] , [string] : [number] , } [EOL] return config [EOL] [EOL] [EOL] def _get_image ( file_name = None ) : [EOL] assert file_name [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] image_file = os . path . join ( _dir , file_name ) [EOL] img = Image . open ( image_file ) [EOL] return img [EOL] [EOL] [EOL] class _OutPipeElement ( PipeElement ) : [EOL] [EOL] def __init__ ( self , sample_callback = None ) : [EOL] super ( ) . __init__ ( ) [EOL] assert sample_callback [EOL] self . _sample_callback = sample_callback [EOL] [EOL] def receive_next_sample ( self , ** sample ) : [EOL] self . _sample_callback ( ** sample ) [EOL] [EOL] [EOL] def test_model_inputs ( ) : [EOL] [docstring] [EOL] config = _face_detect_config ( ) [EOL] face_detector = FaceDetector ( ** config ) [EOL] tfe = face_detector . _tfengine [EOL] samples = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert samples == [number] [EOL] height = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert height == [number] [EOL] width = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert width == [number] [EOL] colors = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert colors == [number] [EOL] [EOL] [EOL] def test_model_outputs ( ) : [EOL] [docstring] [EOL] config = _face_detect_config ( ) [EOL] face_detector = FaceDetector ( ** config ) [EOL] tfe = face_detector . _tfengine [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] scores = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert scores == [number] [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] boxes = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert boxes == [number] [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] labels = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert labels == [number] [EOL] num = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert num == [number] [EOL] [EOL] [EOL] def test_no_sample ( ) : [EOL] [docstring] [EOL] config = _object_detect_config ( ) [EOL] result = [string] [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = image is None and inference_result is None [EOL] face_detector = FaceDetector ( ** config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] face_detector . receive_next_sample ( ) [EOL] assert result is True [EOL] [EOL] [EOL] def test_bad_sample_good_sample ( ) : [EOL] [docstring] [EOL] config = _face_detect_config ( ) [EOL] result = [string] [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = inference_result [EOL] face_detector = FaceDetector ( ** config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] [comment] [EOL] face_detector . receive_next_sample ( image = None , inference_result = [ ( [string] , [number] , [ - [number] , - [number] , - [number] , - [number] ] ) , ] ) [EOL] [comment] [EOL] img = _get_image ( file_name = [string] ) [EOL] face_detector . receive_next_sample ( image = img , inference_result = [ ( [string] , [number] , [ [number] , [number] , [number] , [number] ] ) , ] ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [EOL] def test_background_image_no_person ( ) : [EOL] [docstring] [EOL] config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = not image and not inference_result [EOL] face_detector = FaceDetector ( ** config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] face_detector . receive_next_sample ( image = img ) [EOL] assert result is True [EOL] [EOL] [EOL] def test_one_person_high_confidence_face_low_confidence_two_stage_pipe ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = inference_result [EOL] [comment] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [comment] [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert not result [EOL] [EOL] [EOL] def test_thermal_one_person_face_two_stage_pipe ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = inference_result [EOL] [comment] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > - [number] and y0 < y1 [EOL] [EOL] [comment] [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [EOL] def test_thermal_one_person_miss_face_two_stage_pipe ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = inference_result [EOL] [comment] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [comment] [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert not result [EOL] [EOL] [EOL] def test2_one_person_high_confidence_face_low_confidence_two_stage_pipe ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] [EOL] result = inference_result [EOL] [comment] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [comment] [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert not result [EOL] [EOL] [EOL] def test_one_person_two_stage_pipe_high_face_confidence ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] [EOL] result = inference_result [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [EOL] def test_two_person_high_confidence_one_face_high_confidence_two_stage_pipe ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] [EOL] result = inference_result [EOL] [comment] [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] object_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [comment] [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [EOL] def test_two_person_with_faces_no_confidence_one_stage_pipe ( ) : [EOL] [docstring] [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] result = inference_result [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] face_detector . receive_next_sample ( image = img , inference_result = [ ( [string] , [number] , [ [number] , [number] , [number] , [number] ] ) , ] ) [EOL] assert not result [EOL] [EOL] [EOL] def test_one_person_face_high_confidence_one_stage_pipe ( ) : [EOL] [docstring] [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] [EOL] result = inference_result [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] face_detector . receive_next_sample ( image = img , inference_result = [ ( [string] , [number] , [ [number] , [number] , [number] , [number] ] ) , ] ) [EOL] assert result [EOL] assert len ( result ) == [number] [EOL] label , confidence , ( x0 , y0 , x1 , y1 ) = result [ [number] ] [EOL] assert label == [string] [EOL] assert confidence > [number] [EOL] assert x0 > [number] and x0 < x1 [EOL] assert y0 > [number] and y0 < y1 [EOL] [EOL] [EOL] def test_one_person_no_face_two_stage ( ) : [EOL] [docstring] [EOL] object_config = _object_detect_config ( ) [EOL] face_config = _face_detect_config ( ) [EOL] result = None [EOL] [EOL] def sample_callback ( image = None , inference_result = None , ** kwargs ) : [EOL] nonlocal result [EOL] [EOL] result = inference_result [EOL] object_detector = ObjectDetector ( ** object_config ) [EOL] face_detector = FaceDetector ( ** face_config ) [EOL] object_detector . connect_to_next_element ( face_detector ) [EOL] output = _OutPipeElement ( sample_callback = sample_callback ) [EOL] face_detector . connect_to_next_element ( output ) [EOL] img = _get_image ( file_name = [string] ) [EOL] object_detector . receive_next_sample ( image = img ) [EOL] assert not result [EOL]	
from typing import Tuple , Any , Dict , Union , Literal [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] import pytest [EOL] import os [EOL] from PIL import Image [EOL] [EOL] from ambianic . pipeline . ai . image_detection import TFImageDetection [EOL] [EOL] [EOL] def test_inference_init_no_config ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] TFImageDetection ( ) [EOL] [EOL] [EOL] def test_inference_init_bad_config ( ) : [EOL] config = { [string] : { [string] : [string] , } , [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] with pytest . raises ( AssertionError ) : [EOL] TFImageDetection ( ** config ) [EOL] [EOL] [EOL] def _good_config ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] _good_tflite_model = os . path . join ( _dir , [string] ) [EOL] _good_edgetpu_model = os . path . join ( _dir , [string] ) [EOL] _good_labels = os . path . join ( _dir , [string] ) [EOL] config = { [string] : { [string] : _good_tflite_model , [string] : _good_edgetpu_model , } , [string] : _good_labels , [string] : [number] , [string] : [number] , } [EOL] return config [EOL] [EOL] [EOL] def test_inference_init_good_config ( ) : [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] assert img_detect [EOL] assert img_detect . _tfengine [EOL] assert img_detect . _tfengine . _model_tflite_path . endswith ( [string] ) [EOL] assert img_detect . _tfengine . _model_edgetpu_path . endswith ( [string] ) [EOL] assert img_detect . _tfengine . confidence_threshold == [number] [EOL] assert img_detect . _tfengine . top_k == [number] [EOL] assert img_detect . _tfengine . is_quantized [EOL] assert img_detect . _tfengine . _model_labels_path . endswith ( [string] ) [EOL] [EOL] [EOL] def test_model_inputs ( ) : [EOL] [docstring] [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] tfe = img_detect . _tfengine [EOL] samples = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert samples == [number] [EOL] height = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert height == [number] [EOL] width = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert width == [number] [EOL] colors = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert colors == [number] [EOL] [EOL] [EOL] def test_model_outputs ( ) : [EOL] [docstring] [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] tfe = img_detect . _tfengine [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] scores = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert scores == [number] [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] boxes = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert boxes == [number] [EOL] assert tfe . output_details [ [number] ] [ [string] ] [ [number] ] == [number] [EOL] labels = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert labels == [number] [EOL] num = tfe . output_details [ [number] ] [ [string] ] [ [number] ] [EOL] assert num == [number] [EOL] [EOL] [EOL] def test_resize ( ) : [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] img_path = os . path . join ( _dir , [string] ) [EOL] image = Image . open ( img_path ) [EOL] orig_width = image . size [ [number] ] [EOL] assert orig_width == [number] [EOL] orig_height = image . size [ [number] ] [EOL] assert orig_height == [number] [EOL] new_size = ( [number] , [number] ) [EOL] new_image = img_detect . resize ( image = image , desired_size = new_size ) [EOL] new_width = new_image . size [ [number] ] [EOL] assert new_width == new_size [ [number] ] [EOL] new_height = new_image . size [ [number] ] [EOL] assert new_height == new_size [ [number] ] [EOL] [EOL] [EOL] def test_receive_next_sample ( ) : [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] [comment] [EOL] img_detect . receive_next_sample ( image = None ) [EOL] [EOL] [EOL] def test_load_labels ( ) : [EOL] config = _good_config ( ) [EOL] img_detect = TFImageDetection ( ** config ) [EOL] labels = img_detect . _labels [EOL] assert labels [ [number] ] == [string] [EOL] assert labels [ [number] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import pytest [EOL] import os [EOL] [EOL] from ambianic . pipeline . ai . inference import TFInferenceEngine [EOL] [EOL] [EOL] def test_inference_init_no_params ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] TFInferenceEngine ( ) [EOL] [EOL] [EOL] def test_inference_init_no_model_yes_labels ( ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] TFInferenceEngine ( model = None , labels = [string] ) [EOL] [EOL] [EOL] def test_inference_init_no_tflite_model_yes_edgemodel ( ) : [EOL] model = { [string] : [string] } [EOL] with pytest . raises ( KeyError ) : [EOL] TFInferenceEngine ( model = model , labels = [string] ) [EOL] [EOL] [EOL] def _good_labels ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] path = os . path . join ( _dir , [string] ) [EOL] return path [EOL] [EOL] [EOL] def _good_tflite_model ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] path = os . path . join ( _dir , [string] ) [EOL] return path [EOL] [EOL] [EOL] def _good_edgetpu_model ( ) : [EOL] _dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] path = os . path . join ( _dir , [string] ) [EOL] return path [EOL] [EOL] [EOL] def test_inference_init_yes_tflite_model_no_edgemodel ( ) : [EOL] model = { [string] : _good_tflite_model ( ) , } [EOL] tf_engine = TFInferenceEngine ( model = model , labels = _good_labels ( ) ) [EOL] assert tf_engine [EOL] assert tf_engine . _tf_interpreter [EOL] [EOL] [EOL] def test_inference_init_yes_models_yes_labels ( ) : [EOL] model = { [string] : _good_tflite_model ( ) , [string] : _good_edgetpu_model ( ) , } [EOL] tf_engine = TFInferenceEngine ( model = model , labels = _good_labels ( ) ) [EOL] assert tf_engine [EOL] assert tf_engine . _model_tflite_path == _good_tflite_model ( ) [EOL] assert tf_engine . _model_edgetpu_path == _good_edgetpu_model ( ) [EOL] [EOL] [EOL] def test_inference_init_other_params ( ) : [EOL] model = { [string] : _good_tflite_model ( ) , [string] : _good_edgetpu_model ( ) , } [EOL] tf_engine = TFInferenceEngine ( model = model , labels = _good_labels ( ) , confidence_threshold = [number] , top_k = [number] , ) [EOL] assert tf_engine [EOL] assert tf_engine . _model_tflite_path == _good_tflite_model ( ) [EOL] assert tf_engine . _model_edgetpu_path == _good_edgetpu_model ( ) [EOL] assert tf_engine . confidence_threshold == [number] [EOL] assert tf_engine . top_k == [number] [EOL] assert tf_engine . is_quantized [EOL] assert tf_engine . _model_labels_path == _good_labels ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0
	0
[EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] from ambianic . config_mgm import ConfigurationManager [EOL] [EOL] DEFAULT_WORK_DIR = [string] [EOL] [EOL] config_manager = ConfigurationManager ( config = { } ) [EOL] server_instance = None [EOL] [EOL] [EOL] def get_work_dir ( ) : [EOL] [docstring] [EOL] env_work_dir = os . environ . get ( [string] , os . getcwd ( ) ) [EOL] if not env_work_dir : [EOL] env_work_dir = DEFAULT_WORK_DIR [EOL] return env_work_dir [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
from typing import Dict , Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import logging . handlers [EOL] import os [EOL] import pathlib [EOL] import time [EOL] [EOL] DEFAULT_FILE_LOG_LEVEL = logging . INFO [EOL] DEFAULT_CONSOLE_LOG_LEVEL = logging . WARN [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def _get_log_level ( log_level , default_log_level ) : [EOL] numeric_level = default_log_level [EOL] if log_level : [EOL] try : [EOL] numeric_level = getattr ( logging , log_level . upper ( ) , default_log_level ) [EOL] except AttributeError as e : [EOL] log . warning ( [string] , log_level , e ) [EOL] log . warning ( [string] , default_log_level ) [EOL] fmt = None [EOL] if numeric_level <= logging . INFO : [EOL] format_cfg = [string] [string] [EOL] datefmt_cfg = [string] [EOL] fmt = logging . Formatter ( fmt = format_cfg , datefmt = datefmt_cfg , style = [string] ) [EOL] else : [EOL] fmt = logging . Formatter ( ) [EOL] [EOL] return numeric_level , fmt [EOL] [EOL] [EOL] def configure ( config = None ) : [EOL] if config is None : [EOL] config = { } [EOL] [EOL] log_level = config . get ( [string] , None ) [EOL] [EOL] file_log_level = config . get ( [string] , log_level ) [EOL] console_log_level = config . get ( [string] , log_level ) [EOL] [EOL] numeric_level , fmt = _get_log_level ( file_log_level , default_log_level = DEFAULT_FILE_LOG_LEVEL ) [EOL] [EOL] root_logger = logging . getLogger ( ) [EOL] [comment] [EOL] [comment] [EOL] root_logger . handlers = [ ] [EOL] [comment] [EOL] ch = logging . StreamHandler ( ) [EOL] [EOL] console_numeric_level , console_fmt = _get_log_level ( console_log_level , default_log_level = DEFAULT_CONSOLE_LOG_LEVEL ) [EOL] ch . setLevel ( console_numeric_level ) [EOL] [comment] [EOL] ch . setFormatter ( console_fmt ) [EOL] [comment] [EOL] root_logger . addHandler ( ch ) [EOL] [comment] [EOL] log_filename = config . get ( [string] , None ) [EOL] if log_filename : [EOL] log_directory = os . path . dirname ( log_filename ) [EOL] with pathlib . Path ( log_directory ) as log_dir : [EOL] log_dir . mkdir ( parents = True , exist_ok = True ) [EOL] print ( [string] . format ( log_filename ) ) [EOL] handler = logging . handlers . RotatingFileHandler ( log_filename , maxBytes = [number] * [number] * [number] , backupCount = [number] ) [EOL] handler . setFormatter ( fmt ) [EOL] root_logger . addHandler ( handler ) [EOL] root_logger . setLevel ( numeric_level ) [EOL] effective_level = log . getEffectiveLevel ( ) [EOL] assert numeric_level == effective_level [EOL] log . info ( [string] , logging . getLevelName ( effective_level ) ) [EOL] if effective_level <= logging . DEBUG : [EOL] log . debug ( [string] ) [EOL] log . debug ( config )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0
import builtins [EOL] from typing import Dict , Any [EOL] import ambianic [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import logging . handlers [EOL] import os [EOL] import pathlib [EOL] import time [EOL] [EOL] from ambianic . pipeline import timeline [EOL] from ambianic . pipeline . interpreter import PipelineServer [EOL] from ambianic . util import ServiceExit [EOL] from ambianic . config_mgm import ConfigChangedEvent [EOL] from ambianic import config_manager , logger [EOL] from ambianic . webapp . flaskr import FlaskServer [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] AI_MODELS_DIR = [string] [EOL] MANAGED_SERVICE_HEARTBEAT_THRESHOLD = [number] [comment] [EOL] MAIN_HEARTBEAT_LOG_INTERVAL = [number] [EOL] ROOT_SERVERS = { [string] : PipelineServer , [string] : FlaskServer , } [EOL] [EOL] def _configure ( env_work_dir = None ) : [EOL] [docstring] [EOL] assert env_work_dir , [string] [EOL] assert os . path . exists ( env_work_dir ) , [string] . format ( env_work_dir ) [EOL] [EOL] config_manager . stop ( ) [EOL] [EOL] config = config_manager . load ( env_work_dir ) [EOL] if config is None : [EOL] return None [EOL] [EOL] def logging_config_handler ( event ) : [EOL] [comment] [EOL] log . info ( [string] ) [EOL] logger . configure ( config . get ( [string] ) ) [EOL] [EOL] def timeline_config_handler ( event ) : [EOL] [comment] [EOL] log . info ( [string] ) [EOL] timeline . configure_timeline ( config . get ( [string] ) ) [EOL] [EOL] [comment] [EOL] if config . get ( [string] , None ) is not None : [EOL] config . get ( [string] ) . add_callback ( logging_config_handler ) [EOL] [EOL] if config . get ( [string] , None ) is not None : [EOL] config . get ( [string] ) . add_callback ( timeline_config_handler ) [EOL] [EOL] [comment] [EOL] logging_config_handler ( None ) [EOL] timeline_config_handler ( None ) [EOL] [EOL] return config [EOL] [EOL] [EOL] class AmbianicServer : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , work_dir = None ) : [EOL] [docstring] [EOL] assert work_dir [EOL] self . _env_work_dir = work_dir [EOL] [comment] [EOL] self . _servers = { } [EOL] self . _service_exit_requested = False [EOL] self . _latest_heartbeat = time . monotonic ( ) [EOL] [EOL] def _stop_servers ( self , servers ) : [EOL] log . debug ( [string] ) [EOL] for srv in servers . values ( ) : [EOL] srv . stop ( ) [EOL] config_manager . stop ( ) [EOL] [EOL] def _healthcheck ( self , servers ) : [EOL] [docstring] [EOL] for s in servers . values ( ) : [EOL] latest_heartbeat , status = s . healthcheck ( ) [EOL] now = time . monotonic ( ) [EOL] lapse = now - latest_heartbeat [EOL] if lapse > [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] log . debug ( [string] , s . __class__ . __name__ , lapse ) [EOL] if lapse > MANAGED_SERVICE_HEARTBEAT_THRESHOLD : [EOL] log . warning ( [string] [string] [string] , s . __class__ . __name__ , lapse ) [EOL] s . heal ( ) [EOL] [EOL] def _log_heartbeat ( self ) : [EOL] log . info ( [string] ) [EOL] [EOL] def _heartbeat ( self ) : [EOL] new_time = time . monotonic ( ) [EOL] [comment] [EOL] if new_time - self . _latest_heartbeat > MAIN_HEARTBEAT_LOG_INTERVAL : [EOL] self . _log_heartbeat ( ) [EOL] [comment] [EOL] [comment] [EOL] self . _latest_heartbeat = new_time [EOL] if self . _service_exit_requested : [EOL] raise ServiceExit [EOL] [EOL] def on_config_change ( self , event ) : [EOL] [EOL] root = event . get_root ( ) [EOL] [EOL] [comment] [EOL] if len ( event . get_paths ( ) ) == [number] and ( event . get_paths ( ) [ [number] ] in [ [string] , [string] , [string] ] ) : [EOL] log . info ( [string] , event . get_paths ( ) [ [number] ] ) [EOL] self . _servers [ [string] ] . trigger_event ( event ) [EOL] [EOL] if not root or not root . get_context ( ) : [EOL] return [EOL] [EOL] log . info ( [string] , event ) [EOL] [EOL] section_name = root . get_context ( ) . get_name ( ) [EOL] [EOL] if section_name in [ [string] ] : [EOL] self . stop ( ) [EOL] self . start ( ) [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] config = _configure ( self . _env_work_dir ) [EOL] if not config : [EOL] log . info ( [string] [string] ) [EOL] else : [EOL] config . add_callback ( self . on_config_change ) [EOL] [EOL] log . info ( [string] ) [EOL] [EOL] [comment] [EOL] servers = { } [EOL] [comment] [EOL] try : [EOL] for s_name , s_class in ROOT_SERVERS . items ( ) : [EOL] srv = s_class ( config = config ) [EOL] srv . start ( ) [EOL] servers [ s_name ] = srv [EOL] [EOL] self . _latest_heartbeat = time . monotonic ( ) [EOL] [EOL] self . _servers = servers [EOL] [comment] [EOL] while True : [EOL] time . sleep ( [number] ) [EOL] self . _healthcheck ( servers ) [EOL] self . _heartbeat ( ) [EOL] [EOL] except ServiceExit : [EOL] log . info ( [string] ) [EOL] log . debug ( [string] ) [EOL] self . _stop_servers ( servers ) [EOL] [EOL] log . info ( [string] ) [EOL] return True [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] log . info ( [string] ) [EOL] self . _service_exit_requested = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 $typing.Any$ 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.ConfigChangedEvent$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import ambianic [EOL] import ambianic . server [EOL] import signal [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] env_work_dir = ambianic . get_work_dir ( ) [EOL] ambianic . server_instance = ambianic . server . AmbianicServer ( work_dir = env_work_dir ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] os . nice ( [number] ) [EOL] [comment] [EOL] ambianic . server_instance . start ( ) [EOL] [EOL] [EOL] def stop ( ) : [EOL] [docstring] [EOL] ambianic . server_instance . stop ( ) [EOL] [EOL] [EOL] def _service_shutdown ( signum = None , frame = None ) : [EOL] [docstring] [EOL] print ( [string] [string] , signum ) [EOL] raise ambianic . util . ServiceExit [EOL] [EOL] [EOL] def _register_sys_handlers ( ) : [comment] [EOL] [docstring] [EOL] signal . signal ( signal . SIGTERM , _service_shutdown ) [EOL] signal . signal ( signal . SIGINT , _service_shutdown ) [EOL] [EOL] [EOL] if __name__ == [string] : [comment] [EOL] _register_sys_handlers ( ) [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from . config_diff import ConfigChangedEvent , Config , ConfigList , ConfigDict [EOL] from . configuration_manager import ConfigurationManager [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , Any , Union , Dict , Type , List [EOL] import src [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] from __future__ import annotations [EOL] from collections . abc import MutableMapping [EOL] from typing import Callable , Any , Union [EOL] import logging [EOL] import copy [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class EventContext : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , instance = None ) : [EOL] self . __name = name [EOL] self . __instance = instance [EOL] [EOL] def get_instance ( self ) : [EOL] [docstring] [EOL] return self . __instance [EOL] [EOL] def get_name ( self ) : [EOL] [docstring] [EOL] return self . __name [EOL] [EOL] [EOL] class ConfigChangedEvent : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , op , context , value , config_tree ) : [EOL] self . __name = name [EOL] self . __op = op [EOL] self . __context = context [EOL] self . value = value [EOL] [comment] [EOL] self . tree = list ( config_tree ) if config_tree else [ ] [EOL] self . tree . reverse ( ) [EOL] [EOL] def get_name ( self ) : [EOL] [docstring] [EOL] return self . __name [EOL] [EOL] def get_operation ( self ) : [EOL] [docstring] [EOL] return self . __op [EOL] [EOL] def get_value ( self ) : [EOL] [docstring] [EOL] return self . value [EOL] [EOL] def get_tree ( self ) : [EOL] [docstring] [EOL] return self . tree [EOL] [EOL] def get_paths ( self ) : [EOL] [docstring] [EOL] paths = [ ] [EOL] for element in self . get_tree ( ) : [EOL] if element . get_context ( ) : [EOL] paths . append ( str ( element . get_context ( ) . get_name ( ) ) ) [EOL] return paths [EOL] [EOL] def get_root ( self ) : [EOL] [docstring] [EOL] tree = self . get_tree ( ) [EOL] if tree is None or len ( tree ) == [number] : [EOL] return None [EOL] return tree [ [number] ] [EOL] [EOL] def get_context ( self ) : [EOL] [docstring] [EOL] return self . __context [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( [string] % ( [string] . join ( self . get_paths ( ) ) , self . get_name ( ) , self . get_operation ( ) , self . get_value ( ) , ) ) [EOL] [EOL] [EOL] EventCallback = Callable [ [ ConfigChangedEvent ] , Any ] [EOL] [EOL] [EOL] class EventHandler : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . __context = None [EOL] self . __on_change = [ ] [EOL] self . __initializing = False [EOL] [EOL] def get_callbacks ( self ) : [EOL] return self . __on_change [EOL] [EOL] def add_callback ( self , on_change ) : [EOL] [docstring] [EOL] self . __on_change . append ( on_change ) [EOL] [EOL] def remove_callback ( self , on_change ) : [EOL] [docstring] [EOL] if self . __on_change . __contains__ ( on_change ) : [EOL] self . __on_change . remove ( on_change ) [EOL] else : [EOL] log . warning ( [string] ) [EOL] [EOL] def get_context ( self ) : [EOL] [docstring] [EOL] return self . __context [EOL] [EOL] def set_context ( self , context ) : [EOL] [docstring] [EOL] self . __context = context [EOL] [EOL] def changed ( self , key , operation , new_value , config_tree = None ) : [EOL] [docstring] [EOL] [EOL] if self . __initializing : [EOL] return [EOL] [EOL] event_label = [string] [EOL] if self . get_context ( ) is not None and self . get_context ( ) . get_name ( ) : [EOL] event_label += str ( self . get_context ( ) . get_name ( ) ) [EOL] [EOL] if key is not None : [EOL] if event_label != [string] : [EOL] event_label += [string] [EOL] [EOL] event_label += str ( key ) [EOL] [EOL] for callback in self . __on_change : [EOL] changed_event = ConfigChangedEvent ( key , operation , self . get_context ( ) , new_value , config_tree ) [EOL] [EOL] [comment] [EOL] if not self . get_context ( ) : [EOL] log . debug ( [string] , changed_event ) [EOL] [EOL] try : [EOL] callback ( changed_event ) [EOL] except Exception as exc : [EOL] log . error ( [string] , event_label ) [EOL] log . exception ( exc , exc_info = True ) [EOL] [EOL] section = self [EOL] if config_tree is None : [EOL] config_tree = [ self ] [EOL] while section . get_context ( ) and section . get_context ( ) . get_instance ( ) : [EOL] if not section . get_context ( ) . get_instance ( ) in config_tree : [EOL] config_tree . append ( section . get_context ( ) . get_instance ( ) ) [EOL] section . get_context ( ) . get_instance ( ) . changed ( key , operation , new_value , config_tree ) [EOL] section = section . get_context ( ) . get_instance ( ) [EOL] [EOL] [EOL] class ConfigList ( EventHandler , list ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , items , context = None ) : [EOL] super ( ) . __init__ ( ) [EOL] self . set_context ( context ) [EOL] self . __initializing = True [EOL] self . sync ( items ) [EOL] self . __initializing = False [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , ( ConfigList , list ) ) : [EOL] if len ( self ) != len ( other ) : [EOL] return False [EOL] for i , val in enumerate ( self ) : [EOL] if val != other [ i ] : [EOL] return False [EOL] return True [EOL] return False [EOL] [EOL] def __wrap_item ( self , item , i = None ) : [EOL] [EOL] if is_value_type ( item ) : [EOL] return item [EOL] [EOL] type_of = type ( item ) [EOL] if type_of == list : [EOL] cfglist = ConfigList ( item , EventContext ( str ( i ) , self ) ) [EOL] return cfglist [EOL] [EOL] if type_of == ConfigDict : [EOL] return item [EOL] [EOL] return ConfigDict ( item , context = EventContext ( str ( i ) , self ) ) [EOL] [EOL] def sync ( self , items ) : [EOL] [docstring] [EOL] [EOL] if len ( self ) > [number] and len ( items ) < len ( self ) : [EOL] self . clear ( ) [EOL] self . changed ( None , [string] , None ) [EOL] [EOL] for i , item in enumerate ( items ) : [EOL] [EOL] element = self . __wrap_item ( item , i ) [EOL] [EOL] [comment] [EOL] if i >= len ( self ) : [EOL] self . append ( element ) [EOL] continue [EOL] [EOL] if is_value_type ( self [ i ] ) : [EOL] self [ i ] = element [EOL] continue [EOL] [EOL] self [ i ] . sync ( element ) [EOL] [EOL] def remove ( self , v ) : [EOL] item = self . __wrap_item ( v ) [EOL] res = super ( ) . remove ( item ) [EOL] self . changed ( None , [string] , None ) [EOL] return res [EOL] [EOL] def insert ( self , i , v ) : [EOL] item = self . __wrap_item ( v ) [EOL] res = super ( ) . insert ( i , item ) [EOL] self . changed ( None , [string] , item ) [EOL] return res [EOL] [EOL] def append ( self , v ) : [EOL] item = self . __wrap_item ( v ) [EOL] res = super ( ) . append ( item ) [EOL] self . changed ( None , [string] , item ) [EOL] return res [EOL] [EOL] def extend ( self , t ) : [EOL] res = super ( ) . extend ( [ self . __wrap_item ( v ) for v in t ] ) [EOL] self . changed ( None , [string] , None ) [EOL] return res [EOL] [EOL] def __add__ ( self , t ) : [EOL] res = super ( ) . __add__ ( [ self . __wrap_item ( v ) for v in t ] ) [EOL] self . changed ( None , [string] , None ) [EOL] return res [EOL] [EOL] def __iadd__ ( self , t ) : [EOL] res = super ( ) . __iadd__ ( [ self . __wrap_item ( v ) for v in t ] ) [EOL] self . changed ( None , [string] , None ) [EOL] return res [EOL] [EOL] def __setitem__ ( self , index , value ) : [EOL] has_changed = str ( self [ index ] ) != str ( value ) [EOL] res = super ( ) . __setitem__ ( index , value ) [EOL] if has_changed : [EOL] self . changed ( str ( index ) , [string] , value ) [EOL] return res [EOL] [EOL] def __delitem__ ( self , i ) : [EOL] res = super ( ) . __delitem__ ( i ) [EOL] self . changed ( str ( i ) , [string] , None ) [EOL] return res [EOL] [EOL] def to_values ( self ) : [EOL] [docstring] [EOL] values = [ ] [EOL] for key , val in enumerate ( self ) : [EOL] val = self [ key ] [EOL] if isinstance ( val , ( ConfigDict , ConfigList ) ) : [EOL] values [ key ] = val . to_values ( ) [EOL] elif isinstance ( val , ( list , dict ) ) : [EOL] values [ key ] = copy . deepcopy ( val ) [EOL] else : [EOL] values [ key ] = val [EOL] return values [EOL] [EOL] [EOL] class ConfigDict ( MutableMapping , EventHandler ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config , context = None ) : [EOL] super ( ) . __init__ ( ) [EOL] self . set_context ( context ) [EOL] self . __data = { } [EOL] self . __initializing = True [EOL] self . sync ( config ) [EOL] self . __initializing = False [EOL] [EOL] def sync ( self , src_config ) : [EOL] [docstring] [EOL] if src_config is None : [EOL] return [EOL] [EOL] for key , value in src_config . items ( ) : [EOL] [EOL] [comment] [EOL] if is_value_type ( value ) : [EOL] self . set ( key , value ) [EOL] continue [EOL] [EOL] [comment] [EOL] if isinstance ( value , list ) : [EOL] cfglist = self . get ( key , None ) [EOL] if cfglist is None : [EOL] self . set ( key , ConfigList ( value , EventContext ( key , self ) ) ) [EOL] else : [EOL] cfglist . sync ( value ) [EOL] continue [EOL] [EOL] [comment] [EOL] prev_val = self . get ( key , None ) [EOL] if prev_val is None : [EOL] self . set ( key , ConfigDict ( value , context = EventContext ( key , self ) ) ) [EOL] else : [EOL] prev_val . sync ( value ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return str ( self ) == str ( other ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self . __data ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . __data ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . get ( key ) [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] self . set ( key , value ) [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] del self . __data [ key ] [EOL] self . changed ( key , [string] , None ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . __data ) [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . __data ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] self . set ( obj , value ) [EOL] [EOL] def __get__ ( self , obj , objtype ) : [EOL] return self . get ( obj ) [EOL] [EOL] def get ( self , key , default_value = None ) : [EOL] [docstring] [EOL] return self . __data . get ( key , default_value ) [EOL] [EOL] def set ( self , key , value = None ) : [EOL] [docstring] [EOL] [EOL] has_changed = False [EOL] if key in self . __data . keys ( ) : [EOL] if str ( self . __data [ key ] ) != str ( value ) : [EOL] has_changed = True [EOL] else : [EOL] [comment] [EOL] self . changed ( key , [string] , value ) [EOL] [EOL] if not is_value_type ( value ) : [EOL] value = Config ( value , context = EventContext ( key , self ) ) [EOL] [EOL] self . __data [ key ] = value [EOL] [EOL] if has_changed : [EOL] self . changed ( key , [string] , value ) [EOL] [EOL] def to_values ( self ) : [EOL] [docstring] [EOL] values = { } [EOL] for key in self . __data : [EOL] val = self . __data [ key ] [EOL] if isinstance ( val , ( ConfigDict , ConfigList ) ) : [EOL] values [ key ] = val . to_values ( ) [EOL] elif isinstance ( val , ( list , dict ) ) : [EOL] values [ key ] = copy . deepcopy ( val ) [EOL] else : [EOL] values [ key ] = val [EOL] return values [EOL] [EOL] [EOL] def Config ( values , context = None ) : [EOL] if isinstance ( values , ( ConfigList , list ) ) : [EOL] return ConfigList ( values , context ) [EOL] return ConfigDict ( values , context ) [EOL] [EOL] [EOL] def is_value_type ( value ) : [EOL] [docstring] [EOL] return type ( value ) in ( int , float , bool , str ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.ConfigChangedEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 $src.ambianic.config_mgm.config_diff.EventHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 $EventContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EventContext$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Type[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 $src.ambianic.config_mgm.config_diff.ConfigList$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $src.ambianic.config_mgm.config_diff.ConfigList$ 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $EventContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EventContext$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import ambianic [EOL] import typing [EOL] import threading [EOL] import logging [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import logging [EOL] import threading [EOL] import yaml [EOL] from inotify_simple import INotify , flags [EOL] from ambianic . config_mgm . config_diff import Config [EOL] from ambianic . config_mgm import fileutils [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class ConfigurationManager : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , work_dir = None , config = None ) : [EOL] [EOL] self . Config = Config [EOL] self . CONFIG_FILE = [string] [EOL] self . SECRETS_FILE = [string] [EOL] [EOL] self . lock = threading . RLock ( ) [EOL] self . __config = None [EOL] self . watch_thread = None [EOL] self . watch_event = threading . Event ( ) [EOL] self . handlers = [ ] [EOL] [EOL] if config is not None : [EOL] self . set ( config ) [EOL] [EOL] if work_dir is not None : [EOL] self . load ( work_dir ) [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] self . handlers = [ ] [EOL] with self . lock : [EOL] self . __config = None [EOL] self . watch_stop ( ) [EOL] if self . watch_thread is not None : [EOL] self . watch_thread . join ( ) [EOL] self . watch_thread = None [EOL] [EOL] def register_handler ( self , callback ) : [EOL] [docstring] [EOL] self . handlers . append ( callback ) [EOL] [EOL] def unregister_handler ( self , callback ) : [EOL] [docstring] [EOL] self . handlers . remove ( callback ) [EOL] [EOL] def __watcher ( self ) : [EOL] [docstring] [EOL] inotify = INotify ( ) [EOL] wd = inotify . add_watch ( self . work_dir , flags . MODIFY ) [EOL] while not self . watch_event . is_set ( ) : [EOL] for event in inotify . read ( timeout = [number] , read_delay = [number] ) : [EOL] for filename in [ self . CONFIG_FILE , self . SECRETS_FILE ] : [EOL] if event . name == filename : [EOL] log . info ( [string] , filename ) [EOL] self . load ( self . work_dir ) [EOL] break [EOL] [comment] [EOL] inotify . rm_watch ( wd ) [EOL] [EOL] def watch_start ( self ) : [EOL] [docstring] [EOL] if self . watch_thread is None : [EOL] self . watch_event . clear ( ) [EOL] self . watch_thread = threading . Thread ( target = self . __watcher ) [EOL] self . watch_thread . start ( ) [EOL] [EOL] def watch_stop ( self ) : [EOL] [docstring] [EOL] self . watch_event . set ( ) [EOL] [EOL] def save ( self ) : [EOL] [docstring] [EOL] if self . get ( ) is None : [EOL] return [EOL] [EOL] fileutils . save ( self . get_config_file ( ) , self . get ( ) ) [EOL] [EOL] def get_config_file ( self ) : [EOL] [docstring] [EOL] return os . path . join ( self . work_dir , self . CONFIG_FILE ) [EOL] [EOL] def get_secrets_file ( self ) : [EOL] [docstring] [EOL] return os . path . join ( self . work_dir , self . SECRETS_FILE ) [EOL] [EOL] def load ( self , work_dir ) : [EOL] [docstring] [EOL] [EOL] assert os . path . exists ( work_dir ) , [string] . format ( work_dir ) [EOL] [EOL] self . work_dir = work_dir [EOL] self . watch_start ( ) [EOL] [EOL] secrets_file = self . get_secrets_file ( ) [EOL] config_file = self . get_config_file ( ) [EOL] [EOL] try : [EOL] if os . path . isfile ( secrets_file ) : [EOL] with open ( secrets_file ) as sf : [EOL] secrets_config = sf . read ( ) [EOL] else : [EOL] secrets_config = [string] [EOL] log . warning ( [string] [string] , secrets_file ) [EOL] with open ( config_file ) as cf : [EOL] base_config = cf . read ( ) [EOL] all_config = secrets_config + [string] + base_config [EOL] config = yaml . safe_load ( all_config ) [EOL] [EOL] log . debug ( [string] , self . CONFIG_FILE , config ) [EOL] [EOL] return self . set ( config ) [EOL] [EOL] except FileNotFoundError : [EOL] log . warning ( [string] , config_file ) [EOL] log . warning ( [string] ) [EOL] except Exception as e : [EOL] log . exception ( [string] , exc_info = True ) [EOL] [EOL] return None [EOL] [EOL] def get_sources ( self ) : [EOL] [docstring] [EOL] config = self . get ( ) [EOL] if config is None : [EOL] return None [EOL] if config . get ( [string] , None ) is None : [EOL] config . set ( [string] , { } ) [EOL] return config . get ( [string] , None ) [EOL] [EOL] def get_source ( self , source ) : [EOL] [docstring] [EOL] sources = self . get_sources ( ) [EOL] if sources is None : [EOL] return None [EOL] return sources . get ( source , None ) [EOL] [EOL] def get_ai_models ( self ) : [EOL] [docstring] [EOL] config = self . get ( ) [EOL] if config is None : [EOL] return None [EOL] if config . get ( [string] , None ) is None : [EOL] config . set ( [string] , { } ) [EOL] return config . get ( [string] , None ) [EOL] [EOL] def get_ai_model ( self , ai_model ) : [EOL] [docstring] [EOL] ai_models = self . get_ai_models ( ) [EOL] if ai_models is None : [EOL] return None [EOL] return ai_models . get ( ai_model , None ) [EOL] [EOL] def get_pipelines ( self ) : [EOL] [docstring] [EOL] config = self . get ( ) [EOL] return config . get ( [string] , None ) [EOL] [EOL] def get_pipeline ( self , name ) : [EOL] [docstring] [EOL] pipelines = self . get_pipelines ( ) [EOL] return pipelines . get ( name , None ) [EOL] [EOL] def get_data_dir ( self ) : [EOL] [docstring] [EOL] config = self . get ( ) [EOL] return config . get ( [string] , None ) [EOL] [EOL] def get ( self ) : [EOL] [docstring] [EOL] with self . lock : [EOL] return self . __config [EOL] [EOL] def set ( self , new_config ) : [EOL] [docstring] [EOL] with self . lock : [EOL] if self . __config is None : [EOL] self . __config = Config ( new_config ) [EOL] else : [EOL] self . __config . sync ( new_config ) [EOL] [EOL] for handler in self . handlers : [EOL] handler ( self . get ( ) ) [EOL] [EOL] return self . get ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $threading._RLock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ambianic.config_mgm.config_diff.Config$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import config_diff [EOL] import builtins [EOL] from . config_diff import Config [EOL] import yaml [EOL] [EOL] [EOL] def save ( filename , config ) : [EOL] [docstring] [EOL] with open ( filename , [string] ) as fh : [EOL] yaml . dump ( config , fh , default_flow_style = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import src [EOL] [docstring] [EOL] [EOL] from concurrent_log_handler import ConcurrentRotatingFileHandler [EOL] import logging [EOL] import yaml [EOL] import uuid [EOL] import os [EOL] import pathlib [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] TIMELINE_EVENT_LOGGER_NAME = __name__ + [string] [EOL] PIPELINE_CONTEXT_KEY = [string] [EOL] [EOL] [EOL] class PipelineEvent : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = None , ** kwargs ) : [EOL] [docstring] [EOL] self . message = message [EOL] self . kwargs = kwargs [EOL] self . args = { } [EOL] self . args [ [string] ] = self . message [EOL] self . args [ [string] ] = self . kwargs [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] s = yaml . dump ( self . kwargs ) [EOL] return s [EOL] [EOL] [EOL] class PipelineContext : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , unique_pipeline_name = None ) : [EOL] [docstring] [EOL] self . _unique_pipeline_name = unique_pipeline_name [EOL] self . _element_stack = [ ] [EOL] self . _data_dir = None [EOL] [EOL] @ property def unique_pipeline_name ( self ) : [EOL] [docstring] [EOL] return self . _unique_pipeline_name [EOL] [EOL] @ property def data_dir ( self ) : [EOL] [docstring] [EOL] return self . _data_dir [EOL] [EOL] @ data_dir . setter def data_dir ( self , dd = None ) : [EOL] [docstring] [EOL] self . _data_dir = dd [EOL] [EOL] def push_element_context ( self , element_context = None ) : [EOL] [docstring] [EOL] self . _element_stack . append ( element_context ) [EOL] [EOL] def pop_element_context ( self ) : [EOL] [docstring] [EOL] return self . _element_stack . pop ( ) [EOL] [EOL] [EOL] class PipelineEventFormatter ( logging . Formatter ) : [EOL] [docstring] [EOL] [EOL] def format ( self , record = None ) : [EOL] [docstring] [EOL] [comment] [EOL] s = None [EOL] e = { } [EOL] e [ [string] ] = uuid . uuid4 ( ) . hex [EOL] e [ [string] ] = record . getMessage ( ) [EOL] [comment] [EOL] [comment] [EOL] e [ [string] ] = record . created [EOL] e [ [string] ] = record . levelname [EOL] e [ [string] ] = record . args [EOL] e [ [string] ] = { } [EOL] e [ [string] ] [ [string] ] = record . pathname [EOL] e [ [string] ] [ [string] ] = record . funcName [EOL] e [ [string] ] [ [string] ] = record . lineno [EOL] ctx = record . args . get ( PIPELINE_CONTEXT_KEY , None ) [EOL] if ctx : [EOL] e [ PIPELINE_CONTEXT_KEY ] = ctx . toDict ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] a = [ e ] [EOL] s = yaml . dump ( a ) [EOL] return s [EOL] [EOL] [EOL] def configure_timeline ( config = None ) : [EOL] [docstring] [EOL] if config is None : [EOL] config = { } [EOL] log_filename = config . get ( [string] , None ) [EOL] if not log_filename : [EOL] log_filename = [string] [EOL] log_directory = os . path . dirname ( log_filename ) [EOL] with pathlib . Path ( log_directory ) as log_dir : [EOL] log_dir . mkdir ( parents = True , exist_ok = True ) [EOL] log . debug ( [string] . format ( log_filename ) ) [EOL] event_log = logging . getLogger ( TIMELINE_EVENT_LOGGER_NAME ) [EOL] event_log . setLevel ( logging . INFO ) [EOL] [comment] [EOL] handler = ConcurrentRotatingFileHandler ( log_filename , maxBytes = [number] * [number] , backupCount = [number] ) [EOL] fmt = PipelineEventFormatter ( ) [EOL] handler . setFormatter ( fmt ) [EOL] [comment] [EOL] [comment] [EOL] event_log . handlers = [ ] [EOL] [comment] [EOL] event_log . addHandler ( handler ) [EOL] [EOL] [EOL] def get_event_log ( pipeline_context = None ) : [EOL] [docstring] [EOL] pipeline_event_log = logging . getLogger ( TIMELINE_EVENT_LOGGER_NAME ) [EOL] [comment] [EOL] [comment] [EOL] pipeline_event_log = logging . LoggerAdapter ( pipeline_event_log , { PIPELINE_CONTEXT_KEY : pipeline_context } ) [EOL] return pipeline_event_log [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Type , List [EOL] import src [EOL] import ambianic [EOL] import typing [EOL] import threading [EOL] import logging [EOL] import builtins [EOL] [docstring] [EOL] import logging [EOL] from . avsource . av_element import AVSourceElement [EOL] import time [EOL] import threading [EOL] import copy [EOL] [EOL] from ambianic . pipeline . ai . object_detect import ObjectDetector [EOL] from ambianic . pipeline . ai . face_detect import FaceDetector [EOL] from ambianic . pipeline . store import SaveDetectionSamples [EOL] from ambianic . pipeline import PipeElement , HealthChecker [EOL] from ambianic . pipeline import timeline [EOL] from ambianic import config_mgm , config_manager [EOL] from ambianic . util import ThreadedJob , ManagedService , stacktrace [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] PIPELINE_CLASS = None [EOL] [EOL] [EOL] def get_pipelines ( pipelines_config , data_dir = None ) : [EOL] [docstring] [EOL] pipelines = [ ] [EOL] if pipelines_config : [EOL] for pname , pdef in pipelines_config . items ( ) : [EOL] log . info ( [string] , pname ) [EOL] pipeline_class = Pipeline if PIPELINE_CLASS is None else PIPELINE_CLASS [EOL] pipe = pipeline_class ( pname = pname , pconfig = pdef , data_dir = data_dir ) [EOL] pipelines . append ( pipe ) [EOL] else : [EOL] log . warning ( [string] ) [EOL] return pipelines [EOL] [EOL] [EOL] class PipelineServer ( ManagedService ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . pipeline_server_job = None [EOL] self . _restarting = threading . Event ( ) [EOL] [EOL] def trigger_event ( self , event ) : [EOL] [docstring] [EOL] if self . pipeline_server_job is None : [EOL] return [EOL] [EOL] if self . _restarting . is_set ( ) : [EOL] return [EOL] [EOL] self . _restarting . set ( ) [EOL] self . stop ( ) [EOL] self . start ( ) [EOL] self . _restarting . clear ( ) [EOL] [EOL] def start ( self , ** kwargs ) : [EOL] log . info ( [string] ) [EOL] f = PipelineServerJob ( self . config ) [EOL] self . pipeline_server_job = ThreadedJob ( f ) [EOL] self . pipeline_server_job . start ( ) [EOL] log . info ( [string] ) [EOL] [EOL] def healthcheck ( self ) : [EOL] return time . monotonic ( ) , True [EOL] [EOL] def heal ( self ) : [EOL] [docstring] [EOL] [EOL] def stop ( self ) : [EOL] if self . pipeline_server_job : [EOL] log . info ( [string] ) [EOL] self . pipeline_server_job . stop ( ) [EOL] self . pipeline_server_job . join ( ) [EOL] self . pipeline_server_job = None [EOL] log . info ( [string] ) [EOL] [EOL] [EOL] class PipelineServerJob ( ManagedService ) : [EOL] [docstring] [EOL] [EOL] MAX_HEARTBEAT_INTERVAL = [number] [EOL] TERMINAL_HEALTH_INTERVAL = MAX_HEARTBEAT_INTERVAL * [number] [EOL] [EOL] def __init__ ( self , config = None ) : [EOL] [docstring] [EOL] self . _threaded_jobs = [ ] [EOL] self . _pipelines = [ ] [EOL] self . _config = None [EOL] self . reset ( config ) [EOL] [EOL] def reset ( self , config = None ) : [EOL] self . _threaded_jobs = [ ] [EOL] self . _pipelines = [ ] [EOL] if config is not None : [EOL] self . _config = config [EOL] if self . _config : [EOL] pipelines_config = self . _config . get ( [string] , None ) [EOL] if pipelines_config : [EOL] [comment] [EOL] [comment] [EOL] data_dir = self . _config . get ( [string] , None ) [EOL] if not data_dir : [EOL] data_dir = [string] [EOL] self . _pipelines = get_pipelines ( pipelines_config , data_dir = data_dir ) [EOL] for pp in self . _pipelines : [EOL] pj = ThreadedJob ( pp ) [EOL] self . _threaded_jobs . append ( pj ) [EOL] [EOL] def _on_terminal_pipeline_health ( self , pipeline = None , lapse = None ) : [EOL] log . error ( [string] [string] [string] , pipeline . name , lapse ) [EOL] [EOL] def _on_pipeline_job_ended ( self , threaded_job = None ) : [EOL] p = threaded_job . job [EOL] log . debug ( [string] [string] , p . name ) [EOL] self . _threaded_jobs . remove ( threaded_job ) [EOL] [EOL] def healthcheck ( self ) : [EOL] [docstring] [EOL] oldest_heartbeat = time . monotonic ( ) [EOL] [comment] [EOL] [comment] [EOL] for j in list ( self . _threaded_jobs ) : [EOL] [comment] [EOL] p = j . job [EOL] if j . is_alive ( ) : [EOL] latest_heartbeat , status = p . healthcheck ( ) [EOL] now = time . monotonic ( ) [EOL] lapse = now - latest_heartbeat [EOL] if lapse > self . TERMINAL_HEALTH_INTERVAL : [EOL] self . _on_terminal_pipeline_health ( p , lapse ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] elif lapse > self . MAX_HEARTBEAT_INTERVAL : [EOL] log . warning ( [string] [string] [string] , p . name , lapse ) [EOL] self . heal_pipeline_job ( j ) [EOL] if oldest_heartbeat > latest_heartbeat : [EOL] oldest_heartbeat = latest_heartbeat [EOL] else : [EOL] self . _on_pipeline_job_ended ( threaded_job = j ) [EOL] status = True [comment] [EOL] return oldest_heartbeat , status [EOL] [EOL] def heal ( self ) : [EOL] [docstring] [EOL] [EOL] def heal_pipeline_job ( self , threaded_job = None ) : [EOL] assert threaded_job [EOL] pipeline = threaded_job . job [EOL] log . debug ( [string] , pipeline . name ) [EOL] threaded_job . heal ( ) [EOL] log . debug ( [string] , pipeline . name ) [EOL] [EOL] def start ( self ) : [EOL] [comment] [EOL] log . info ( [string] ) [EOL] for tj in self . _threaded_jobs : [EOL] tj . start ( ) [EOL] log . info ( [string] ) [EOL] [EOL] def stop ( self ) : [EOL] log . info ( [string] ) [EOL] [comment] [EOL] for tj in self . _threaded_jobs : [EOL] tj . stop ( ) [EOL] [comment] [EOL] for tj in self . _threaded_jobs : [EOL] tj . join ( ) [EOL] log . info ( [string] ) [EOL] [EOL] [EOL] class HealingThread ( threading . Thread ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , target = None , on_finished = None ) : [EOL] assert target , [string] [EOL] assert on_finished , [string] [EOL] threading . Thread . __init__ ( self , daemon = True ) [EOL] self . _target = target [EOL] self . _on_finished = on_finished [EOL] [EOL] def run ( self ) : [EOL] log . debug ( [string] , self . _target ) [EOL] try : [EOL] self . _target ( ) [EOL] except Exception as e : [EOL] log . warning ( [string] , e , self . _target ) [EOL] log . warning ( stacktrace ( ) ) [EOL] log . debug ( [string] , self . _on_finished ) [EOL] try : [EOL] self . _on_finished ( ) [EOL] except Exception as e : [EOL] log . warning ( [string] , e , self . _on_finished ) [EOL] log . warning ( stacktrace ( ) ) [EOL] [EOL] [EOL] class Pipeline ( ManagedService ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] PIPELINE_OPS = { [string] : AVSourceElement , [string] : ObjectDetector , [string] : SaveDetectionSamples , [string] : FaceDetector , } [EOL] [EOL] def _on_unknown_pipe_element ( self , name = None ) : [EOL] log . warning ( [string] [string] [string] , name ) [EOL] [EOL] def __init__ ( self , pname = None , pconfig = None , data_dir = None ) : [EOL] [docstring] [EOL] assert pname , [string] [EOL] self . name = pname [EOL] assert pconfig , [string] [EOL] self . config = pconfig [EOL] self . data_dir = data_dir [EOL] self . _pipe_elements = [ ] [EOL] self . _latest_heartbeat_time = time . monotonic ( ) [EOL] [comment] [EOL] self . _latest_health_status = True [EOL] self . _healing_thread = None [EOL] self . _context = timeline . PipelineContext ( unique_pipeline_name = self . name ) [EOL] self . _context . data_dir = self . data_dir [EOL] self . _event_log = timeline . get_event_log ( pipeline_context = self . _context ) [EOL] self . load_elements ( ) [EOL] [EOL] def load_elements ( self ) : [EOL] [docstring] [EOL] self . _pipe_elements = [ ] [EOL] [EOL] log . debug ( [string] , self . config [ [number] ] ) [EOL] source_element_key = [ * self . config [ [number] ] ] [ [number] ] [EOL] assert source_element_key == [string] , [string] . format ( source_element_key ) [EOL] [EOL] for _element_config in self . config : [EOL] [EOL] [comment] [EOL] if isinstance ( _element_config , ( config_mgm . ConfigList , config_mgm . ConfigDict ) ) : [EOL] element_def = _element_config . to_values ( ) [EOL] else : [EOL] [comment] [EOL] element_def = copy . deepcopy ( _element_config ) [EOL] [EOL] log . info ( [string] , self . name , element_def ) [EOL] [EOL] is_valid = self . parse_source_config ( element_def ) [EOL] if not is_valid : [EOL] self . _pipe_elements = [ ] [EOL] break [EOL] [EOL] is_valid = self . parse_ai_model_config ( element_def ) [EOL] if not is_valid : [EOL] self . _pipe_elements = [ ] [EOL] break [EOL] [EOL] element_name = [ * element_def ] [ [number] ] [EOL] assert element_name [EOL] element_config = element_def [ element_name ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if isinstance ( element_config , str ) : [EOL] element_config = { element_name : element_config } [EOL] [EOL] element_class = self . PIPELINE_OPS . get ( element_name , None ) [EOL] [EOL] if element_class : [EOL] log . info ( [string] [string] , self . name , element_name , element_class , element_config ) [EOL] element = element_class ( ** element_config , element_name = element_name , context = self . _context , event_log = self . _event_log ) [EOL] self . _pipe_elements . append ( element ) [EOL] else : [EOL] self . _on_unknown_pipe_element ( name = element_name ) [EOL] [EOL] def parse_ai_model_config ( self , element_def ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] ai_element = None [EOL] for element_name in element_def : [EOL] [comment] [EOL] if [string] in element_def [ element_name ] : [EOL] ai_element = element_def [ element_name ] [EOL] break [EOL] [EOL] if ai_element is None : [EOL] return True [EOL] [EOL] ai_model_id = None [EOL] if isinstance ( ai_element [ [string] ] , str ) : [EOL] ai_model_id = ai_element [ [string] ] [EOL] [EOL] if ai_element [ [string] ] is not None and [string] in ai_element [ [string] ] : [EOL] ai_model_id = ai_element [ [string] ] [ [string] ] [EOL] [EOL] if ai_model_id is None : [EOL] return True [EOL] [EOL] ai_model = config_manager . get_ai_model ( ai_model_id ) [EOL] if ai_model is None : [EOL] log . warning ( [string] , ai_model_id , self . name , ) [EOL] return False [EOL] [EOL] [comment] [EOL] for key , val in ai_model . to_values ( ) . items ( ) : [EOL] if key not in ai_element : [EOL] ai_element [ key ] = val [EOL] [EOL] [comment] [EOL] ai_element [ [string] ] = ai_model_id [EOL] [EOL] return True [EOL] [EOL] def parse_source_config ( self , element_def ) : [EOL] [docstring] [EOL] [comment] [EOL] if [string] not in element_def : [EOL] return True [EOL] [EOL] source_id = None [EOL] if isinstance ( element_def [ [string] ] , str ) : [EOL] source_id = element_def [ [string] ] [EOL] if [string] in element_def [ [string] ] : [EOL] source_id = element_def [ [string] ] [ [string] ] [EOL] [EOL] if source_id is None : [EOL] return True [EOL] [EOL] [comment] [EOL] source = config_manager . get_source ( source_id ) [EOL] if source is None : [EOL] log . warning ( [string] , source_id , self . name , ) [EOL] return False [EOL] [EOL] element_def [ [string] ] = source . to_values ( ) [EOL] element_def [ [string] ] [ [string] ] = source_id [EOL] [EOL] return True [EOL] [EOL] def restart ( self ) : [EOL] [docstring] [EOL] self . stop ( ) [EOL] self . reset ( ) [EOL] self . start ( ) [EOL] log . info ( [string] ) [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] self . _pipe_elements = [ ] [EOL] [EOL] def _heartbeat ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , self . name ) [EOL] now = time . monotonic ( ) [EOL] lapse = now - self . _latest_heartbeat_time [EOL] log . debug ( [string] , self . name , lapse ) [EOL] self . _latest_heartbeat_time = now [EOL] [EOL] def _on_start_no_elements ( self ) : [EOL] return [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] if len ( self . _pipe_elements ) == [number] : [EOL] self . load_elements ( ) [EOL] [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] if not self . _pipe_elements : [EOL] return self . _on_start_no_elements ( ) [EOL] [EOL] self . _heartbeat ( ) [EOL] [comment] [EOL] for i in range ( [number] , len ( self . _pipe_elements ) ) : [EOL] e = self . _pipe_elements [ i - [number] ] [EOL] assert isinstance ( e , PipeElement ) [EOL] e_next = self . _pipe_elements [ i ] [EOL] e . connect_to_next_element ( e_next ) [EOL] last_element = self . _pipe_elements [ len ( self . _pipe_elements ) - [number] ] [EOL] hc = HealthChecker ( health_status_callback = self . _heartbeat , element_name = [string] ) [EOL] last_element . connect_to_next_element ( hc ) [EOL] self . _pipe_elements [ [number] ] . start ( ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] [EOL] def healthcheck ( self ) : [EOL] [docstring] [EOL] return self . _latest_heartbeat_time , self . _latest_health_status [EOL] [EOL] def _on_healing_already_in_progress ( self ) : [EOL] log . debug ( [string] [string] [string] , self . name , self . _healing_thread . ident ) [EOL] [EOL] def heal ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] self . _heartbeat ( ) [EOL] if self . _healing_thread : [EOL] self . _on_healing_already_in_progress ( ) [EOL] else : [EOL] log . debug ( [string] , self . name ) [EOL] heal_target = self . _pipe_elements [ [number] ] . heal [EOL] [EOL] def healing_finished ( ) : [EOL] log . debug ( [string] , self . name , self . _healing_thread . ident ) [EOL] self . _healing_thread = None [EOL] [comment] [EOL] self . _heartbeat ( ) [EOL] [EOL] [comment] [EOL] self . _healing_thread = HealingThread ( target = heal_target , on_finished = healing_finished ) [EOL] self . _healing_thread . start ( ) [EOL] log . debug ( [string] , self . name ) [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] if len ( self . _pipe_elements ) > [number] : [EOL] self . _pipe_elements [ [number] ] . stop ( ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL]	builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 0 0 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Iterable , List [EOL] import ambianic [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import logging [EOL] import abc [EOL] import time [EOL] from typing import Iterable [EOL] from ambianic . util import ManagedService [EOL] from ambianic . pipeline . timeline import PipelineContext [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] PIPE_STATE_STOPPED = [number] [EOL] PIPE_STATE_RUNNING = [number] [EOL] PIPE_STATES = [ PIPE_STATE_RUNNING , PIPE_STATE_STOPPED ] [EOL] [EOL] [EOL] class PipeElement ( ManagedService ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , element_name = None , context = None , event_log = None , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ) [EOL] self . _name = element_name [EOL] self . _state = PIPE_STATE_STOPPED [EOL] self . _next_element = None [EOL] self . _latest_heartbeat = time . monotonic ( ) [EOL] self . _context = context [EOL] self . _timeline_event_log = event_log [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ property def context ( self ) : [EOL] [docstring] [EOL] return self . _context [EOL] [EOL] def push_context ( self , element_context = None ) : [EOL] [docstring] [EOL] if element_context is None : [EOL] element_context = { } [EOL] element_context [ [string] ] = self . __class__ . __name__ [EOL] self . _context . push_element_context ( element_context ) [EOL] [EOL] def pop_context ( self ) : [EOL] [docstring] [EOL] return self . _context . pop_element_context ( ) [EOL] [EOL] @ property def event_log ( self ) : [EOL] [docstring] [EOL] return self . _timeline_event_log [EOL] [EOL] @ property def state ( self ) : [EOL] [docstring] [EOL] return self . _state [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] self . _state = PIPE_STATE_RUNNING [EOL] [EOL] def heal ( self ) : [comment] [EOL] [docstring] [EOL] pass [EOL] [EOL] def healthcheck ( self ) : [EOL] [docstring] [EOL] status = [string] [comment] [EOL] return self . _latest_heartbeat , status [EOL] [EOL] def heartbeat ( self ) : [EOL] [docstring] [EOL] now = time . monotonic ( ) [EOL] self . _latest_heartbeat = now [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] self . _state = PIPE_STATE_STOPPED [EOL] [EOL] def connect_to_next_element ( self , next_element = None ) : [EOL] [docstring] [EOL] assert next_element [EOL] assert isinstance ( next_element , PipeElement ) [EOL] self . _next_element = next_element [EOL] [EOL] def receive_next_sample ( self , ** sample ) : [EOL] [docstring] [EOL] self . heartbeat ( ) [EOL] for processed_sample in self . process_sample ( ** sample ) : [EOL] if self . _next_element : [EOL] if (processed_sample) : [EOL] self . _next_element . receive_next_sample ( ** processed_sample ) [EOL] else : [EOL] self . _next_element . receive_next_sample ( ) [EOL] self . heartbeat ( ) [EOL] [EOL] def process_sample ( self , ** sample ) : [EOL] [docstring] [EOL] yield sample [EOL] [EOL] [EOL] class HealthChecker ( PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , health_status_callback = None , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] assert health_status_callback [EOL] self . _health_status_callback = health_status_callback [EOL] [EOL] def process_sample ( self , ** sample ) : [EOL] [docstring] [EOL] log . debug ( [string] [string] , self . __class__ . __name__ ) [EOL] self . _health_status_callback ( ) [EOL] yield sample [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import requests [EOL] import typing [EOL] import threading [EOL] import PIL [EOL] import multiprocessing [EOL] import logging [EOL] [docstring] [EOL] [EOL] import logging [EOL] import time [EOL] import threading [EOL] import multiprocessing [EOL] import queue [EOL] from PIL import Image [EOL] from io import BytesIO [EOL] import requests [EOL] from ambianic . util import stacktrace [EOL] from ambianic . pipeline import PipeElement [EOL] from ambianic . pipeline . avsource import gst_process [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] MIN_HEALING_INTERVAL = [number] [EOL] [EOL] [EOL] class AVSourceElement ( PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , uri = None , type = None , live = False , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] assert uri [EOL] [EOL] element_conf = dict ( kwargs ) [EOL] element_conf [ [string] ] = uri [EOL] element_conf [ [string] ] = type [EOL] element_conf [ [string] ] = live [EOL] [EOL] [comment] [EOL] self . _source_conf = element_conf [EOL] self . _is_live = live [EOL] self . _gst_process = None [EOL] self . _gst_out_queue = None [EOL] self . _gst_process_stop_signal = None [EOL] self . _gst_process_eos_reached = None [EOL] [comment] [EOL] [comment] [EOL] self . _healing_in_progress = threading . RLock ( ) [EOL] [comment] [EOL] self . _latest_healing = time . monotonic ( ) [EOL] [EOL] def _on_new_sample ( self , sample = None ) : [EOL] log . debug ( [string] ) [EOL] assert sample [EOL] sample_type = sample [ [string] ] [EOL] [comment] [EOL] assert sample_type == [string] [EOL] [comment] [EOL] sample_format = sample [ [string] ] [EOL] assert sample_format == [string] [EOL] width = sample [ [string] ] [EOL] height = sample [ [string] ] [EOL] sample_bytes = sample [ [string] ] [EOL] img = Image . frombytes ( sample_format , ( width , height ) , sample_bytes , [string] ) [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] self . receive_next_sample ( image = img ) [EOL] [EOL] def _get_gst_service_starter ( self ) : [EOL] return gst_process . start_gst_service [EOL] [EOL] def _get_sample_queue ( self ) : [EOL] q = multiprocessing . Queue ( [number] ) [EOL] return q [EOL] [EOL] def fetch_img ( self , session = None , url = None ) : [EOL] assert url [EOL] r = requests . get ( url ) [EOL] r . raise_for_status ( ) [EOL] img = Image . open ( BytesIO ( r . content ) ) [EOL] return img [EOL] [EOL] def _on_fetch_img_exception ( self , _exception = None ) : [EOL] pass [EOL] [EOL] def _fetch_img_exception_recovery ( self ) : [EOL] log . debug ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] def _run_http_fetch ( self , url = None , continuous = False ) : [EOL] log . debug ( [string] , url ) [EOL] assert url [EOL] while not self . _stop_requested : [EOL] img = None [EOL] try : [EOL] img = self . fetch_img ( url = url ) [EOL] log . debug ( [string] , img , url ) [EOL] log . debug ( [string] ) [EOL] self . receive_next_sample ( image = img ) [EOL] except Exception as e : [EOL] self . _on_fetch_img_exception ( _exception = e ) [EOL] log . exception ( [string] , url ) [EOL] if continuous : [EOL] log . warning ( [string] ) [EOL] self . _fetch_img_exception_recovery ( ) [EOL] finally : [EOL] if not continuous : [EOL] [comment] [EOL] [comment] [EOL] log . debug ( [string] , url ) [EOL] break [EOL] [EOL] [EOL] [EOL] def _run_gst_service ( self ) : [EOL] log . debug ( [string] ) [EOL] self . _gst_out_queue = self . _get_sample_queue ( ) [EOL] self . _gst_process_stop_signal = multiprocessing . Event ( ) [EOL] self . _gst_process_eos_reached = multiprocessing . Event ( ) [EOL] gst_service = self . _get_gst_service_starter ( ) [EOL] self . _gst_process = multiprocessing . Process ( target = gst_service , name = [string] , daemon = True , kwargs = { [string] : self . _source_conf , [string] : self . _gst_out_queue , [string] : self . _gst_process_stop_signal , [string] : self . _gst_process_eos_reached , } ) [EOL] self . _gst_process . daemon = True [EOL] self . _gst_process . start ( ) [EOL] gst_proc = self . _gst_process [EOL] while not self . _stop_requested and gst_proc . is_alive ( ) : [EOL] [comment] [EOL] try : [EOL] next_sample = self . _gst_out_queue . get ( timeout = [number] ) [EOL] [comment] [EOL] self . _on_new_sample ( sample = next_sample ) [EOL] except queue . Empty : [EOL] log . debug ( [string] ) [EOL] except Exception as e : [EOL] log . warning ( [string] , str ( e ) ) [EOL] log . warning ( stacktrace ( ) ) [EOL] [comment] [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] [EOL] def _clear_gst_out_queue ( self ) : [EOL] log . debug ( [string] ) [EOL] while not self . _gst_out_queue . empty ( ) : [EOL] try : [EOL] self . _gst_out_queue . get_nowait ( ) [EOL] except queue . Empty : [EOL] log . debug ( [string] ) [EOL] log . debug ( [string] ) [EOL] [EOL] def _process_terminate ( self , proc = None ) : [EOL] proc . terminate ( ) [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] self . _clear_gst_out_queue ( ) [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] if not proc . is_alive ( ) : [EOL] break [EOL] [EOL] def _process_good_kill ( self , proc = None ) : [EOL] [comment] [EOL] proc . kill ( ) [EOL] return True [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _stop_gst_service ( self ) : [EOL] log . debug ( [string] ) [EOL] gst_proc = self . _gst_process [EOL] stop_signal = self . _gst_process_stop_signal [EOL] if gst_proc and gst_proc . is_alive ( ) : [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] stop_signal . set ( ) [EOL] log . debug ( [string] ) [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] [comment] [EOL] [comment] [EOL] self . _clear_gst_out_queue ( ) [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] if not gst_proc . is_alive ( ) : [EOL] break [EOL] [comment] [EOL] if gst_proc . is_alive ( ) : [EOL] log . debug ( [string] ) [EOL] self . _process_terminate ( gst_proc ) [EOL] if gst_proc . is_alive ( ) : [EOL] [comment] [EOL] log . debug ( [string] [string] ) [EOL] clean_kill = self . _process_good_kill ( gst_proc ) [EOL] log . debug ( [string] , clean_kill ) [EOL] else : [EOL] log . debug ( [string] ) [EOL] else : [EOL] log . debug ( [string] ) [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] super ( ) . start ( ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] self . _stop_requested = False [EOL] if self . _source_conf [ [string] ] . startswith ( [string] ) and self . _source_conf [ [string] ] == [string] : [EOL] log . debug ( [string] , self . _source_conf [ [string] ] ) [EOL] [comment] [EOL] self . _run_http_fetch ( url = self . _source_conf [ [string] ] , continuous = self . _is_live ) [EOL] else : [EOL] log . debug ( [string] , self . _source_conf [ [string] ] ) [EOL] [comment] [EOL] while not self . _stop_requested : [EOL] self . _run_gst_service ( ) [EOL] if ( self . _gst_process_eos_reached and not self . _is_live ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] log . debug ( [string] , self . _source_conf [ [string] ] ) [EOL] break [EOL] self . _stop_gst_service ( ) [EOL] super ( ) . stop ( ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] [EOL] def heal ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , self . __class__ . __name__ ) [EOL] log . debug ( [string] ) [EOL] self . _healing_in_progress . acquire ( ) [EOL] try : [EOL] logging . debug ( [string] ) [EOL] now = time . monotonic ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] log . warning ( [string] , self . _latest_healing , now - MIN_HEALING_INTERVAL ) [EOL] if self . _latest_healing < now - MIN_HEALING_INTERVAL : [EOL] [comment] [EOL] self . _latest_healing = now [EOL] self . _stop_gst_service ( ) [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] log . debug ( [string] ) [EOL] else : [EOL] log . debug ( [string] [string] ) [EOL] finally : [EOL] logging . debug ( [string] ) [EOL] self . _healing_in_progress . release ( ) [EOL] log . debug ( [string] , self . __class__ . __name__ ) [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] self . _stop_requested = True [EOL] super ( ) . stop ( ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading._RLock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $multiprocessing.queues.Queue[typing.Any]$ 0 0 0 0 0 0 0 0 0 $multiprocessing.queues.Queue[typing.Any]$ 0 0 0 $PIL.Image$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import src [EOL] import logging [EOL] import typing [EOL] import threading [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import threading [EOL] import signal [EOL] import logging [EOL] import traceback [EOL] from ambianic . util import stacktrace [EOL] import gi [EOL] [EOL] [comment] [EOL] if [string] in sys . modules : [EOL] gi . require_version ( [string] , [string] ) [EOL] gi . require_version ( [string] , [string] ) [EOL] from gi . repository import Gst , GLib [comment] [EOL] [EOL] [EOL] Gst . init ( None ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class GstService : [EOL] [docstring] [EOL] [EOL] class ImageShape : [EOL] width = height = None [EOL] [EOL] class PipelineSource : [EOL] [EOL] def __init__ ( self , source_conf = None ) : [EOL] assert source_conf , [string] [EOL] assert source_conf [ [string] ] , [string] [EOL] [comment] [EOL] self . uri = source_conf [ [string] ] [EOL] [comment] [EOL] self . type = source_conf . get ( [string] , [string] ) [EOL] self . is_live = source_conf . get ( [string] , False ) [EOL] self . format = source_conf . get ( [string] , None ) [EOL] [EOL] def __init__ ( self , source_conf = None , out_queue = None , stop_signal = None , eos_reached = None ) : [EOL] assert source_conf [EOL] assert out_queue [EOL] assert stop_signal [EOL] assert eos_reached [EOL] [comment] [EOL] log . debug ( [string] , source_conf ) [EOL] self . _out_queue = out_queue [EOL] self . _stop_signal = stop_signal [EOL] self . _eos_reached = eos_reached [EOL] self . source = self . PipelineSource ( source_conf = source_conf ) [EOL] [comment] [EOL] self . mainloop = None [EOL] [comment] [EOL] [comment] [EOL] self . gst_pipeline = None [EOL] self . gst_video_source = None [EOL] self . _gst_video_source_connect_id = None [EOL] [comment] [EOL] self . _source_shape = self . ImageShape ( ) [EOL] self . gst_queue0 = None [EOL] self . gst_vconvert = None [EOL] self . gst_vconvert_connect_id = None [EOL] self . gst_queue1 = None [EOL] [comment] [EOL] [comment] [EOL] self . gst_appsink = None [EOL] self . _gst_appsink_connect_id = None [EOL] [comment] [EOL] self . _stop_requested = False [EOL] self . gst_bus = None [EOL] [EOL] def on_autoplug_continue ( self , src_bin , src_pad , src_caps ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] struct = src_caps . get_structure ( [number] ) [EOL] [comment] [EOL] self . _source_shape . width = struct [ [string] ] [EOL] self . _source_shape . height = struct [ [string] ] [EOL] if self . _source_shape . width : [EOL] log . info ( [string] , self . _source_shape . width , self . _source_shape . height ) [EOL] return True [EOL] [EOL] def _on_bus_message_eos ( self , message ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not self . source . is_live : [EOL] log . debug ( [string] [string] ) [EOL] self . _eos_reached . set ( ) [EOL] self . _gst_cleanup ( ) [EOL] [EOL] def _on_bus_message_warning ( self , message ) : [EOL] err , debug = message . parse_warning ( ) [EOL] log . warning ( [string] , err , debug ) [EOL] [EOL] def _on_bus_message_error ( self , message ) : [EOL] err , debug = message . parse_error ( ) [EOL] log . warning ( [string] , err , debug ) [EOL] self . _gst_cleanup ( ) [EOL] [EOL] def _on_bus_message ( self , bus , message , loop ) : [EOL] t = message . type [EOL] [comment] [EOL] [comment] [EOL] if t == Gst . MessageType . EOS : [EOL] self . _on_bus_message_eos ( message ) [EOL] elif t == Gst . MessageType . WARNING : [EOL] self . _on_bus_message_warning ( message ) [EOL] elif t == Gst . MessageType . ERROR : [EOL] self . _on_bus_message_error ( message ) [EOL] else : [EOL] [comment] [EOL] log . debug ( [string] , message . type . get_name ( message . type ) , message ) [EOL] return True [EOL] [EOL] def _on_new_sample_out_queue_full ( self , sink ) : [EOL] log . debug ( [string] ) [EOL] [comment] [EOL] sink . emit ( [string] ) [EOL] return Gst . FlowReturn . OK [EOL] [EOL] def _on_new_sample ( self , sink ) : [EOL] log . debug ( [string] ) [EOL] if self . _out_queue . full ( ) : [EOL] return self . _on_new_sample_out_queue_full ( sink ) [EOL] sample = sink . emit ( [string] ) [EOL] buf = sample . get_buffer ( ) [EOL] caps = sample . get_caps ( ) [EOL] struct = caps . get_structure ( [number] ) [EOL] [comment] [EOL] app_width = struct [ [string] ] [EOL] app_height = struct [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] result , mapinfo = buf . map ( Gst . MapFlags . READ ) [EOL] if result : [EOL] sample = { [string] : [string] , [string] : [string] , [string] : app_width , [string] : app_height , [string] : mapinfo . data , } [EOL] log . info ( [string] ) [EOL] self . _out_queue . put ( sample ) [EOL] buf . unmap ( mapinfo ) [EOL] return Gst . FlowReturn . OK [EOL] [EOL] def _get_pipeline_args ( self ) : [EOL] log . debug ( [string] ) [EOL] [EOL] videosrc = self . source . uri [EOL] videofmt = self . source . format [EOL] [EOL] if videofmt == [string] : [EOL] SRC_CAPS = [string] [EOL] elif videofmt == [string] : [EOL] SRC_CAPS = [string] [EOL] else : [EOL] SRC_CAPS = [string] [EOL] [EOL] PIPELINE_SRC = [string] % videosrc [EOL] [EOL] if videosrc . startswith ( [string] ) or videosrc . startswith ( [string] ) : [EOL] PIPELINE_SRC = [string] % ( videosrc , SRC_CAPS ) [EOL] [EOL] PIPELINE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] SINK_CAPS = [string] [EOL] [EOL] LEAKY_Q_ = [string] [EOL] LEAKY_Q0 = LEAKY_Q_ + [string] [EOL] LEAKY_Q1 = LEAKY_Q_ + [string] [EOL] [EOL] SINK_ELEMENT = [string] [EOL] pipeline_args = PIPELINE . format ( leaky_q0 = LEAKY_Q0 , leaky_q1 = LEAKY_Q1 , sink_caps = SINK_CAPS , sink_element = SINK_ELEMENT , pipeline_src = PIPELINE_SRC ) [EOL] log . debug ( [string] , pipeline_args ) [EOL] [EOL] print ( [string] , pipeline_args ) [EOL] [EOL] return pipeline_args [EOL] [EOL] def _set_gst_debug_level ( self ) : [EOL] if log . getEffectiveLevel ( ) <= logging . INFO : [EOL] [comment] [EOL] Gst . debug_set_active ( True ) [EOL] Gst . debug_set_default_threshold ( [number] ) [EOL] [EOL] def _build_gst_pipeline ( self ) : [EOL] log . debug ( [string] ) [EOL] pipeline_args = self . _get_pipeline_args ( ) [EOL] log . debug ( [string] ) [EOL] self . gst_pipeline = Gst . parse_launch ( pipeline_args ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . gst_queue0 = self . gst_pipeline . get_by_name ( [string] ) [EOL] self . gst_vconvert = self . gst_pipeline . get_by_name ( [string] ) [EOL] self . gst_queue1 = self . gst_pipeline . get_by_name ( [string] ) [EOL] self . gst_appsink = self . gst_pipeline . get_by_name ( [string] ) [EOL] log . debug ( [string] , str ( self . gst_appsink ) ) [EOL] log . debug ( [string] , self . gst_appsink . props . emit_signals ) [EOL] [comment] [EOL] self . _gst_appsink_connect_id = self . gst_appsink . connect ( [string] , self . _on_new_sample ) [EOL] self . mainloop = GLib . MainLoop ( ) [EOL] [EOL] self . _set_gst_debug_level ( ) [EOL] [EOL] [comment] [EOL] self . gst_bus = self . gst_pipeline . get_bus ( ) [EOL] self . gst_bus . add_signal_watch ( ) [EOL] self . gst_bus . connect ( [string] , self . _on_bus_message , self . mainloop ) [EOL] [EOL] def _gst_mainloop_run ( self ) : [EOL] log . debug ( [string] ) [EOL] self . mainloop . run ( ) [EOL] log . debug ( [string] ) [EOL] [EOL] def _gst_pipeline_play ( self ) : [EOL] return self . gst_pipeline . set_state ( Gst . State . PLAYING ) [EOL] [EOL] def _gst_loop ( self ) : [EOL] [comment] [EOL] self . _build_gst_pipeline ( ) [EOL] [comment] [EOL] [comment] [EOL] ret = self . _gst_pipeline_play ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if ( ret == Gst . StateChangeReturn . FAILURE ) : [EOL] raise RuntimeError ( [string] , self . source . uri ) [EOL] elif ( ret == Gst . StateChangeReturn . NO_PREROLL ) : [EOL] self . source . is_live = True [EOL] log . info ( [string] , self . source . uri ) [EOL] else : [EOL] log . debug ( [string] , ret ) [EOL] self . _gst_mainloop_run ( ) [EOL] [EOL] def _gst_cleanup ( self ) : [EOL] log . debug ( [string] ) [EOL] try : [EOL] if self . mainloop and self . mainloop . is_running ( ) and self . gst_pipeline and self . gst_pipeline . get_state ( timeout = [number] ) [ [number] ] != Gst . State . NULL : [EOL] log . debug ( [string] ) [EOL] self . gst_pipeline . set_state ( Gst . State . PAUSED ) [EOL] log . debug ( [string] ) [EOL] self . gst_pipeline . set_state ( Gst . State . READY ) [EOL] log . debug ( [string] ) [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] if self . gst_bus : [EOL] self . gst_bus . remove_signal_watch ( ) [EOL] self . gst_bus = None [EOL] log . debug ( [string] ) [EOL] if self . gst_appsink : [EOL] self . gst_appsink . set_state ( Gst . State . NULL ) [EOL] [comment] [EOL] self . gst_appsink = None [EOL] log . debug ( [string] ) [EOL] if self . gst_queue1 : [EOL] self . gst_queue1 . set_state ( Gst . State . NULL ) [EOL] [comment] [EOL] self . gst_queue1 = None [EOL] log . debug ( [string] ) [EOL] if self . gst_vconvert : [EOL] self . gst_vconvert . set_state ( Gst . State . NULL ) [EOL] [comment] [EOL] self . gst_vconvert = None [EOL] log . debug ( [string] ) [EOL] if self . gst_queue0 : [EOL] self . gst_queue0 . set_state ( Gst . State . NULL ) [EOL] [comment] [EOL] self . gst_queue0 = None [EOL] log . debug ( [string] ) [EOL] if self . gst_video_source : [EOL] self . gst_video_source . set_state ( Gst . State . NULL ) [EOL] [comment] [EOL] self . gst_video_source = None [EOL] log . debug ( [string] ) [EOL] self . gst_pipeline . set_state ( Gst . State . NULL ) [EOL] self . gst_pipeline = None [EOL] log . debug ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] log . debug ( [string] , self . gst_pipeline ) [EOL] if self . mainloop : [EOL] log . debug ( [string] ) [EOL] self . mainloop . quit ( ) [EOL] self . mainloop = None [EOL] else : [EOL] log . debug ( [string] ) [EOL] except Exception as e : [EOL] log . warning ( [string] , str ( e ) ) [EOL] formatted_lines = traceback . format_exc ( ) . splitlines ( ) [EOL] log . warning ( [string] , [string] . join ( formatted_lines ) ) [EOL] log . debug ( [string] ) [EOL] [EOL] def _service_terminate ( self , signum , frame ) : [EOL] log . info ( [string] , signum ) [EOL] if not self . _stop_signal . is_set ( ) : [EOL] self . _stop_signal . set ( ) [EOL] [EOL] def _stop_handler ( self ) : [EOL] self . _stop_signal . wait ( ) [EOL] log . info ( [string] ) [EOL] self . _gst_cleanup ( ) [EOL] [EOL] def _register_stop_handler ( self ) : [EOL] stop_watch_thread = threading . Thread ( name = [string] , daemon = True , target = self . _stop_handler ) [EOL] stop_watch_thread . start ( ) [EOL] [EOL] def _register_sys_signal_handler ( self ) : [EOL] [comment] [EOL] signal . signal ( signal . SIGTERM , self . _service_terminate ) [EOL] signal . signal ( signal . SIGINT , self . _service_terminate ) [EOL] [EOL] def run ( self ) : [EOL] [docstring] [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] self . _register_sys_signal_handler ( ) [EOL] self . _register_stop_handler ( ) [EOL] try : [EOL] self . _gst_loop ( ) [EOL] except Exception as e : [EOL] log . warning ( [string] , str ( e ) ) [EOL] log . warning ( stacktrace ( ) ) [EOL] finally : [EOL] log . debug ( [string] ) [EOL] self . _gst_cleanup ( ) [EOL] [comment] [EOL] log . debug ( [string] ) [EOL] log . info ( [string] , self . __class__ . __name__ ) [EOL] [EOL] [EOL] def start_gst_service ( source_conf = None , out_queue = None , stop_signal = None , eos_reached = None ) : [EOL] svc = GstService ( source_conf = source_conf , out_queue = out_queue , stop_signal = stop_signal , eos_reached = eos_reached ) [EOL] [comment] [EOL] [comment] [EOL] os . nice ( [number] ) [EOL] svc . run ( ) [EOL] log . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
from typing import Tuple , Any , List , Pattern , Generator , Literal [EOL] import src [EOL] import logging [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] import logging [EOL] import time [EOL] import re [EOL] import numpy as np [EOL] [comment] [EOL] from PIL import ImageOps [EOL] from . inference import TFInferenceEngine [EOL] from ambianic . pipeline import PipeElement [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class TFImageDetection ( PipeElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , model = None , labels = None , confidence_threshold = [number] , top_k = [number] , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] self . _tfengine = TFInferenceEngine ( model = model , labels = labels , confidence_threshold = confidence_threshold , top_k = top_k ) [EOL] self . _labels = self . load_labels ( self . _tfengine . labels_path ) [EOL] self . last_time = time . monotonic ( ) [EOL] [EOL] def load_labels ( self , label_path = None ) : [EOL] [docstring] [EOL] assert label_path [EOL] p = re . compile ( [string] ) [EOL] with open ( label_path , [string] , encoding = [string] ) as f : [EOL] lines = ( p . match ( line ) . groups ( ) for line in f . readlines ( ) ) [EOL] return { int ( num ) : text . strip ( ) for num , text in lines } [EOL] [EOL] def thumbnail ( self , image = None , desired_size = None ) : [EOL] [docstring] [EOL] assert image [EOL] assert desired_size [EOL] log . debug ( [string] , image . size ) [EOL] thumb = image . copy ( ) [EOL] w , h = desired_size [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] if isinstance ( w , np . generic ) : [EOL] w = w . item ( ) [EOL] w = int ( w ) [EOL] h = h . item ( ) [EOL] h = int ( h ) [EOL] thumb . thumbnail ( ( w , h ) ) [EOL] except Exception as e : [EOL] msg = ( f" [string] " f" [string] { desired_size } [string] " f" [string] { type ( w ) } [string] { type ( h ) }" f" [string] { e }" ) [EOL] log . exception ( msg ) [EOL] raise RuntimeError ( msg ) [EOL] log . debug ( [string] , thumb . size ) [EOL] return thumb [EOL] [EOL] def resize ( self , image = None , desired_size = None ) : [EOL] [docstring] [EOL] assert image [EOL] assert desired_size [EOL] log . debug ( [string] , image . size ) [EOL] thumb = image . copy ( ) [EOL] delta_w = desired_size [ [number] ] - thumb . size [ [number] ] [EOL] delta_h = desired_size [ [number] ] - thumb . size [ [number] ] [EOL] padding = ( [number] , [number] , delta_w , delta_h ) [EOL] new_im = ImageOps . expand ( thumb , padding ) [EOL] log . debug ( [string] , new_im . size ) [EOL] assert new_im . size == desired_size [EOL] return new_im [EOL] [EOL] def _log_stats ( self , start_time = None ) : [EOL] assert start_time [EOL] log . debug ( [string] ) [EOL] end_time = time . monotonic ( ) [EOL] inf_time = ( end_time - start_time ) * [number] [EOL] fps = [number] / ( end_time - self . last_time ) [EOL] if self . context and self . context . unique_pipeline_name : [EOL] pipeline_name = self . context . unique_pipeline_name [EOL] else : [EOL] pipeline_name = [string] [EOL] inf_info = [string] [EOL] log . info ( inf_info , inf_time , fps , pipeline_name ) [EOL] self . last_time = end_time [EOL] [EOL] def detect ( self , image = None ) : [EOL] [docstring] [EOL] assert image [EOL] start_time = time . monotonic ( ) [EOL] log . debug ( [string] ) [EOL] [EOL] tfe = self . _tfengine [EOL] [EOL] [comment] [EOL] height = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] width = tfe . input_details [ [number] ] [ [string] ] [ [number] ] [EOL] [EOL] [comment] [EOL] thumbnail = self . thumbnail ( image = image , desired_size = ( width , height ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] new_im = self . resize ( image = thumbnail , desired_size = ( width , height ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] w_factor = thumbnail . size [ [number] ] / new_im . size [ [number] ] [EOL] h_factor = thumbnail . size [ [number] ] / new_im . size [ [number] ] [EOL] [EOL] [comment] [EOL] input_data = np . expand_dims ( new_im , axis = [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not tfe . is_quantized : [comment] [EOL] [comment] [EOL] input_mean = [number] [EOL] input_std = [number] [EOL] input_data = ( np . float32 ( input_data ) - input_mean ) / input_std [EOL] [EOL] tfe . set_tensor ( tfe . input_details [ [number] ] [ [string] ] , input_data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] tfe . infer ( ) [EOL] [EOL] self . _log_stats ( start_time = start_time ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] boxes = tfe . get_tensor ( tfe . output_details [ [number] ] [ [string] ] ) [EOL] label_codes = tfe . get_tensor ( tfe . output_details [ [number] ] [ [string] ] ) [EOL] scores = tfe . get_tensor ( tfe . output_details [ [number] ] [ [string] ] ) [EOL] num = tfe . get_tensor ( tfe . output_details [ [number] ] [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] detections_count = int ( num [ [number] ] ) [EOL] [EOL] inference_result = [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] indices_of_sorted_scores = np . argsort ( scores [ [number] , : detections_count ] ) [EOL] [comment] [EOL] [comment] [EOL] top_k_indices = indices_of_sorted_scores [ - [number] * tfe . top_k : ] [ : : - [number] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in top_k_indices : [EOL] confidence = scores [ [number] , i ] [EOL] if confidence >= tfe . confidence_threshold : [EOL] [comment] [EOL] [comment] [EOL] li = int ( label_codes [ [number] , i ] ) [EOL] [comment] [EOL] [comment] [EOL] if ( li < len ( self . _labels ) ) : [EOL] label = self . _labels [ li ] [EOL] box = boxes [ [number] , i , : ] [EOL] [comment] [EOL] [comment] [EOL] x0 = box [ [number] ] / w_factor [EOL] y0 = box [ [number] ] / h_factor [EOL] x1 = min ( box [ [number] ] / w_factor , [number] ) [EOL] y1 = min ( box [ [number] ] / h_factor , [number] ) [EOL] log . debug ( [string] [string] , thumbnail . size , new_im . size ) [EOL] log . debug ( [string] [string] , ( box [ [number] ] , box [ [number] ] , box [ [number] ] , box [ [number] ] ) , ( x0 , y0 , x1 , y1 ) ) [EOL] inference_result . append ( ( label , confidence , ( x0 , y0 , x1 , y1 ) ) ) [EOL] return thumbnail , new_im , inference_result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any,typing.Any]$ 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $src.ambianic.pipeline.ai.inference.TFInferenceEngine$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0
from typing import Dict , Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] [EOL] from . image_detection import TFImageDetection [EOL] from ambianic . util import stacktrace [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class ObjectDetector ( TFImageDetection ) : [EOL] [docstring] [EOL] [EOL] def process_sample ( self , ** sample ) : [EOL] [docstring] [EOL] log . debug ( [string] , self . __class__ . __name__ ) [EOL] if not sample : [EOL] [comment] [EOL] yield None [EOL] else : [EOL] try : [EOL] image = sample [ [string] ] [EOL] thumbnail , tensor_image , inference_result = self . detect ( image = image ) [EOL] log . debug ( [string] , inference_result ) [EOL] inf_meta = { [string] : [string] , } [EOL] [comment] [EOL] processed_sample = { [string] : image , [string] : thumbnail , [string] : inference_result , [string] : inf_meta } [EOL] yield processed_sample [EOL] except Exception as e : [EOL] log . error ( [string] [string] , str ( e ) , str ( sample ) ) [EOL] log . warning ( stacktrace ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] [EOL] from . image_detection import TFImageDetection [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class FaceDetector ( TFImageDetection ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def crop_image ( image , box ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] width , height = image . size [EOL] [EOL] [comment] [EOL] left = box [ [number] ] * width [EOL] top = box [ [number] ] * height [EOL] right = box [ [number] ] * width [EOL] bottom = box [ [number] ] * height [EOL] [EOL] [comment] [EOL] [comment] [EOL] im1 = image . crop ( ( left , top , right , bottom ) ) [EOL] return im1 [EOL] [EOL] def process_sample ( self , ** sample ) : [EOL] [docstring] [EOL] log . debug ( [string] , self . __class__ . __name__ , str ( [ * sample ] ) ) [EOL] if not sample : [EOL] [comment] [EOL] yield None [EOL] else : [EOL] try : [EOL] image = sample [ [string] ] [EOL] prev_inference_result = sample . get ( [string] , None ) [EOL] log . debug ( [string] , str ( prev_inference_result ) ) [EOL] person_regions = [ ] [EOL] if not prev_inference_result : [EOL] yield None [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] for label , confidence , box in prev_inference_result : [EOL] if label == [string] and confidence >= self . _tfengine . confidence_threshold : [EOL] person_regions . append ( box ) [EOL] log . debug ( [string] , len ( person_regions ) ) [EOL] for box in person_regions : [EOL] person_image = self . crop_image ( image , box ) [EOL] thumbnail , tensor_image , inference_result = self . detect ( image = person_image ) [EOL] log . debug ( [string] , inference_result ) [EOL] inf_meta = { [string] : [string] , } [EOL] processed_sample = { [string] : person_image , [string] : thumbnail , [string] : inference_result , [string] : inf_meta } [EOL] yield processed_sample [EOL] except Exception as e : [EOL] log . exception ( [string] [string] , e , sample ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import numpy as np [EOL] from tflite_runtime . interpreter import Interpreter [EOL] from tflite_runtime . interpreter import load_delegate [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def _get_edgetpu_interpreter ( model = None ) : [comment] [EOL] [comment] [EOL] [comment] [EOL] tf_interpreter = None [EOL] if model : [EOL] try : [EOL] edgetpu_delegate = load_delegate ( [string] ) [EOL] assert edgetpu_delegate [EOL] tf_interpreter = Interpreter ( model_path = model , experimental_delegates = [ edgetpu_delegate ] ) [EOL] log . debug ( [string] ) [EOL] except Exception as e : [EOL] log . debug ( [string] , e ) [EOL] [comment] [EOL] return tf_interpreter [EOL] [EOL] [EOL] class TFInferenceEngine : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , model = None , labels = None , confidence_threshold = [number] , top_k = [number] ) : [EOL] [docstring] [EOL] assert model [EOL] assert model [ [string] ] , [string] [EOL] model_tflite = model [ [string] ] [EOL] assert os . path . isfile ( model_tflite ) , [string] . format ( model_tflite ) [EOL] self . _model_tflite_path = model_tflite [EOL] model_edgetpu = model . get ( [string] , None ) [EOL] if model_edgetpu : [EOL] assert os . path . isfile ( model_edgetpu ) , [string] . format ( model_edgetpu ) [EOL] self . _model_edgetpu_path = model_edgetpu [EOL] assert labels , [string] [EOL] assert os . path . isfile ( labels ) , [string] . format ( labels ) [EOL] self . _model_labels_path = labels [EOL] self . _confidence_threshold = confidence_threshold [EOL] self . _top_k = top_k [EOL] log . debug ( [string] [string] [string] [string] [string] [string] , model_tflite , model_edgetpu , labels , confidence_threshold * [number] , top_k ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _tf_interpreter = _get_edgetpu_interpreter ( model = model_edgetpu ) [EOL] if not self . _tf_interpreter : [EOL] log . debug ( [string] ) [EOL] self . _tf_interpreter = Interpreter ( model_path = model_tflite ) [EOL] assert self . _tf_interpreter [EOL] self . _tf_interpreter . allocate_tensors ( ) [EOL] [comment] [EOL] self . _tf_input_details = self . _tf_interpreter . get_input_details ( ) [EOL] self . _tf_output_details = self . _tf_interpreter . get_output_details ( ) [EOL] self . _tf_is_quantized_model = self . input_details [ [number] ] [ [string] ] != np . float32 [EOL] [EOL] @ property def input_details ( self ) : [EOL] return self . _tf_input_details [EOL] [EOL] @ property def output_details ( self ) : [EOL] return self . _tf_output_details [EOL] [EOL] @ property def is_quantized ( self ) : [EOL] return self . _tf_is_quantized_model [EOL] [EOL] @ property def labels_path ( self ) : [EOL] [docstring] [EOL] return self . _model_labels_path [EOL] [EOL] @ property def confidence_threshold ( self ) : [EOL] [docstring] [EOL] return self . _confidence_threshold [EOL] [EOL] @ property def top_k ( self ) : [EOL] [docstring] [EOL] return self . _top_k [EOL] [EOL] def infer ( self ) : [EOL] [docstring] [EOL] return self . _tf_interpreter . invoke ( ) [EOL] [EOL] def set_tensor ( self , index = None , tensor_data = None ) : [EOL] [docstring] [EOL] assert isinstance ( index , int ) [EOL] self . _tf_interpreter . set_tensor ( index , tensor_data ) [EOL] [EOL] def get_tensor ( self , index = None ) : [EOL] [docstring] [EOL] assert isinstance ( index , int ) [EOL] return self . _tf_interpreter . get_tensor ( index ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , Dict , Union , Type , List , KeysView [EOL] import logging [EOL] import typing [EOL] from werkzeug . exceptions import NotFound , BadRequest [EOL] from ambianic import config_manager [EOL] import logging [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] source_model = { [string] : str , [string] : str , [string] : str , [string] : bool } [EOL] [EOL] source_types = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def validate ( source_id , source ) : [EOL] [docstring] [EOL] [EOL] if not isinstance ( source , dict ) : [EOL] raise BadRequest ( [string] ) [EOL] [EOL] source [ [string] ] = source_id [EOL] source_keys = source . keys ( ) [EOL] [EOL] for prop in source_model : [EOL] if prop not in source_keys : [EOL] raise BadRequest ( f" [string] { prop }" ) [EOL] if not isinstance ( source [ prop ] , source_model [ prop ] ) : [EOL] raise BadRequest ( f" [string] { prop }" ) [EOL] [EOL] if source [ [string] ] not in source_types : [EOL] raise BadRequest ( f" [string] { source_types }" ) [EOL] [EOL] return source [EOL] [EOL] [EOL] def get ( source_id ) : [EOL] [docstring] [EOL] log . info ( [string] , source_id ) [EOL] [EOL] if not source_id : [EOL] raise BadRequest ( [string] ) [EOL] [EOL] if not isinstance ( source_id , str ) : [EOL] raise BadRequest ( [string] ) [EOL] [EOL] source = config_manager . get_source ( source_id ) [EOL] [EOL] if source is None : [EOL] raise NotFound ( [string] ) [EOL] [EOL] return source . to_values ( ) [EOL] [EOL] [EOL] def remove ( source_id ) : [EOL] [docstring] [EOL] log . info ( [string] , source_id ) [EOL] get ( source_id ) [EOL] del config_manager . get_sources ( ) [ source_id ] [EOL] [EOL] [EOL] def save ( source_id , source ) : [EOL] [docstring] [EOL] log . info ( [string] , source_id ) [EOL] source = validate ( source_id , source ) [EOL] config_manager . get_sources ( ) . set ( source [ [string] ] , source ) [EOL] return config_manager . get_source ( source [ [string] ] ) . to_values ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , Any , Dict , List [EOL] import pathlib [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] import logging [EOL] import uuid [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] import os [EOL] import json [EOL] import yaml [EOL] [EOL] log = logging . getLogger ( ) [EOL] [EOL] SAMPLES = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [number] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } } ] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ ] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [number] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } } ] } , ] [EOL] [EOL] [EOL] def get_samples ( before_datetime = None , page = [number] ) : [EOL] [docstring] [EOL] parsed_datetime = None [EOL] assert isinstance ( page , int ) [EOL] assert page > [number] [EOL] page_size = [number] [EOL] if before_datetime : [EOL] try : [EOL] parsed_datetime = datetime . fromisoformat ( before_datetime ) [EOL] log . debug ( [string] , parsed_datetime ) [EOL] except ValueError as e : [EOL] log . warning ( [string] [string] , before_datetime , str ( e ) ) [EOL] page_start_position = ( page - [number] ) * page_size [EOL] page_end_position = page_start_position + page_size [EOL] if not parsed_datetime : [EOL] log . debug ( [string] ) [EOL] log . debug ( [string] [string] , page , page_size , page_start_position , page_end_position ) [EOL] p = Path ( [string] ) [EOL] log . debug ( [string] , p . resolve ( ) ) [EOL] files = list ( p . glob ( [string] ) ) [EOL] log . debug ( [string] , len ( files ) ) [EOL] files = sorted ( files , key = os . path . getmtime , reverse = True ) [EOL] samples = [ ] [EOL] for json_file in files [ page_start_position : page_end_position ] : [EOL] with open ( json_file ) as f : [EOL] sample = json . load ( f ) [EOL] sample [ [string] ] = uuid . uuid4 ( ) . hex [EOL] sample [ [string] ] = str ( json_file ) [EOL] samples . append ( sample ) [EOL] [comment] [EOL] [comment] [EOL] return samples [EOL] [EOL] [EOL] def get_timeline ( before_datetime = None , page = [number] , data_dir = None ) : [EOL] [docstring] [EOL] [EOL] if data_dir is None or not os . path . exists ( data_dir ) : [EOL] log . warning ( [string] , data_dir ) [EOL] return [ ] [EOL] [EOL] parsed_datetime = None [EOL] assert isinstance ( page , int ) [EOL] assert page > [number] [EOL] page_size = [number] [EOL] if before_datetime : [EOL] try : [EOL] parsed_datetime = datetime . fromisoformat ( before_datetime ) [EOL] log . debug ( [string] , parsed_datetime ) [EOL] except ValueError as e : [EOL] log . warning ( [string] [string] , before_datetime , str ( e ) ) [EOL] page_start_position = ( page - [number] ) * page_size [EOL] page_end_position = page_start_position + page_size [EOL] [EOL] if not parsed_datetime : [EOL] log . debug ( [string] ) [EOL] log . debug ( [string] [string] , page , page_size , page_start_position , page_end_position ) [EOL] [EOL] files = list ( Path ( data_dir ) . rglob ( [string] ) ) [EOL] files = sorted ( files , reverse = False ) [EOL] [EOL] page_count = [number] [EOL] events_queue = [ ] [EOL] [comment] [EOL] for file_path in files : [EOL] [EOL] with file_path . open ( ) as pf : [EOL] [EOL] timeline_events = yaml . safe_load ( pf ) [EOL] timeline_events += events_queue [EOL] [EOL] events_queue = [ ] [EOL] events_len = len ( timeline_events ) [EOL] if events_len < page_end_position : [EOL] [EOL] pages_mod = events_len % page_size [EOL] if pages_mod > [number] : [EOL] events_queue = timeline_events [ [number] : pages_mod ] [EOL] page_start_position += pages_mod [EOL] page_end_position += pages_mod [EOL] [EOL] page_start_position -= events_len [EOL] page_end_position -= events_len [EOL] page_count += [number] [EOL] [EOL] else : [EOL] [EOL] if page_start_position >= events_len : [EOL] return [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return timeline_events [ - [number] * page_start_position - [number] : - [number] * page_end_position - [number] : - [number] ] [EOL] [EOL] page_count += [number] [EOL] [EOL] if page_count < page : [EOL] return [ ] [EOL] [EOL] [comment] [EOL] return events_queue [EOL] [EOL] [EOL] def add_sample ( new_sample = None ) : [EOL] assert new_sample [EOL] log . debug ( [string] , new_sample ) [EOL] new_sample [ [string] ] = uuid . uuid4 ( ) . hex [EOL] log . debug ( [string] , new_sample ) [EOL] SAMPLES . append ( new_sample ) [EOL] [EOL] [EOL] def update_sample ( edited_sample = None ) : [EOL] assert edited_sample [EOL] for i , old_sample in enumerate ( SAMPLES ) : [EOL] old_sample = SAMPLES [ i ] [EOL] if old_sample [ [string] ] == edited_sample [ [string] ] : [EOL] SAMPLES [ i ] = edited_sample [EOL] return True [EOL] log . debug ( [string] , edited_sample ) [EOL] return False [EOL] [EOL] [EOL] def delete_sample ( sample_id ) : [EOL] sample = None [EOL] for sample in SAMPLES : [EOL] if sample [ [string] ] == sample_id : [EOL] SAMPLES . remove ( sample ) [EOL] log . debug ( [string] , sample ) [EOL] return True [EOL] log . debug ( [string] , sample ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0