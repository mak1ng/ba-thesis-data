from typing import List , Tuple , Dict [EOL] import typing [EOL] import datetime [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] import genparamdoc [EOL] import dim [EOL] [EOL] def copyright_years ( ) : [EOL] this_year = datetime . date . today ( ) . year [EOL] if this_year == [number] : [EOL] return str ( this_year ) [EOL] else : [EOL] return [string] % this_year [EOL] [EOL] project = [string] [EOL] copyright = [string] % copyright_years ( ) [EOL] author = [string] [EOL] version = [string] [EOL] release = [string] [EOL] master_doc = [string] [EOL] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] autodoc_default_flags = [ [string] , [string] ] [EOL] autodoc_member_order = [string] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : ( [string] , None ) } [EOL] [EOL] [comment] [EOL] html_theme = [string] [EOL] html_last_updated_fmt = [string] [EOL] html_sidebars = { [string] : [ [string] , [string] ] } [EOL] html_theme_options = { [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import importlib [EOL] import inspect [EOL] [EOL] [EOL] def setup ( app ) : [EOL] app . setup_extension ( [string] ) [EOL] app . connect ( [string] , _process_docstring ) [EOL] return { [string] : True } [EOL] [EOL] [EOL] def _process_docstring ( app , what , name , obj , options , lines ) : [EOL] if [string] in lines : [EOL] return [EOL] if what == [string] : [EOL] module = _get_object_by_name ( name ) [EOL] try : [EOL] func = module . __init__ [EOL] except AttributeError : [EOL] return [EOL] insert_before = [string] [EOL] elif what in [ [string] , [string] ] : [EOL] func = _get_object_by_name ( name ) [EOL] insert_before = [string] [EOL] else : [EOL] return [EOL] params = _get_param_list ( func ) [EOL] if not params : [EOL] return [EOL] new_lines = _format_params ( params ) [EOL] try : [EOL] anchor = lines . index ( insert_before ) [EOL] lines [ anchor : anchor ] = new_lines [EOL] except ValueError : [EOL] lines . extend ( new_lines ) [EOL] [EOL] [EOL] def _get_object_by_name ( qualname ) : [EOL] tokens = qualname . split ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] obj = importlib . __import__ ( tokens [ [number] ] ) [EOL] for token in tokens [ [number] : ] : [EOL] obj = getattr ( obj , token ) [EOL] return obj [EOL] [EOL] [EOL] def _get_param_list ( callable ) : [EOL] params = list ( inspect . signature ( callable ) . parameters . keys ( ) ) [EOL] if params and params [ [number] ] in ( [string] , [string] ) : [EOL] params = params [ [number] : ] [EOL] [comment] [EOL] if params == [ [string] , [string] ] : [EOL] return [ ] [EOL] return params [EOL] [EOL] [EOL] def _format_params ( params ) : [EOL] return [ [string] , [string] ] + [ [string] % param for param in params ] + [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0