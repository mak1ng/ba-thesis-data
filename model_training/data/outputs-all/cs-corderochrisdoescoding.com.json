from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from posts . factories import * [comment] [EOL]	0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . views . generic . base import TemplateView [EOL] [EOL] urlpatterns = [ path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AcnhConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import builtins [EOL] import chrisdoescoding [EOL] from bs4 import BeautifulSoup [EOL] from django . conf import settings [EOL] from django . db import models [EOL] [EOL] from posts import utils [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] , unique = True ) [EOL] body = models . TextField ( ) [EOL] excerpt = models . CharField ( max_length = settings . LISTVIEW_EXCERPT_LENGTH ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] last_updated = models . DateTimeField ( auto_now = True ) [EOL] publication_date = models . DateTimeField ( auto_now = False , null = True , blank = True ) [EOL] hide = models . BooleanField ( default = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] prefix = ( [string] . format ( self . last_updated . strftime ( [string] ) ) [EOL] if not self . publication_date [EOL] else [string] ) [EOL] return [string] . format ( prefix , self . title ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . excerpt = calculate_excerpt_from_markdown ( self . body ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] def calculate_excerpt_from_markdown ( markdown ) : [EOL] excerpt_length = settings . LISTVIEW_EXCERPT_LENGTH [EOL] [EOL] markdown_body = utils . MarkdownParser ( markdown ) . html [EOL] soup_text = BeautifulSoup ( markdown_body , [string] ) . text [EOL] [EOL] if len ( soup_text ) > excerpt_length : [EOL] return f"{ soup_text [ : excerpt_length - [number] ] } [string] " [EOL] else : [EOL] return soup_text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PostsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Optional , Any , Type [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import chrisdoescoding [EOL] import posts [EOL] import random [EOL] from typing import Any , Dict , Optional [EOL] [EOL] from django . http import Http404 , HttpRequest , HttpResponse [EOL] from django . utils import timezone [EOL] from django . views . generic import DetailView , ListView , RedirectView [EOL] [EOL] from posts . models import Post [EOL] from posts . utils import MarkdownParser [EOL] [EOL] [EOL] class BasePostView ( DetailView ) : [EOL] object = ... [EOL] model = Post [EOL] [EOL] def get_queryset ( self ) : [EOL] self . queryset = Post . objects . filter ( publication_date__lte = timezone . now ( ) ) . filter ( hide = False ) [EOL] return self . queryset [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] self . object = self . get_object ( ) [comment] [EOL] if not self . object : [EOL] raise Http404 ( [string] ) [EOL] [EOL] if [string] in request . GET : [EOL] return HttpResponse ( self . object . body , content_type = [string] ) [EOL] [EOL] [comment] [EOL] context = self . get_context_data ( object = self . object ) [EOL] with MarkdownParser ( self . object . body ) as markdown : [comment] [EOL] context . update ( { [string] : markdown } ) [EOL] context . update ( self . get_next_and_prev ( self . object ) ) [EOL] [EOL] return self . render_to_response ( context ) [EOL] [EOL] def get_next_and_prev ( self , current ) : [EOL] reference_time = current . publication_date [EOL] published_posts = self . get_queryset ( ) [EOL] [EOL] previous_post = ... [EOL] next_post = ... [EOL] try : [EOL] previous_post = published_posts . filter ( publication_date__lt = reference_time ) . latest ( [string] ) [EOL] except Post . DoesNotExist : [EOL] previous_post = None [EOL] try : [EOL] next_post = published_posts . filter ( publication_date__gt = reference_time ) . earliest ( [string] ) [EOL] except Post . DoesNotExist : [EOL] next_post = None [EOL] [EOL] return { [string] : previous_post , [string] : next_post } [EOL] [EOL] [EOL] class LatestPostView ( BasePostView ) : [EOL] template_name = [string] [EOL] [EOL] def get_object ( self ) : [comment] [EOL] try : [EOL] return self . get_queryset ( ) . latest ( [string] ) [comment] [EOL] except Post . DoesNotExist : [EOL] return None [EOL] [EOL] [EOL] class PostView ( BasePostView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class AllPostsView ( ListView ) : [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] self . queryset = ( Post . objects . filter ( publication_date__lte = timezone . now ( ) ) . filter ( hide = False ) . order_by ( [string] ) ) [EOL] return self . queryset [EOL] [EOL] [EOL] class RandomPostView ( RedirectView ) : [EOL] def get_queryset ( self ) : [EOL] self . queryset = Post . objects . filter ( publication_date__lte = timezone . now ( ) ) . filter ( hide = False ) [EOL] return self . queryset [EOL] [EOL] def get_redirect_url ( self , * args , ** kwargs ) : [EOL] published_posts = self . get_queryset ( ) [EOL] random_selection = random . randint ( [number] , len ( published_posts ) - [number] ) [EOL] post_id = published_posts [ random_selection ] . id [EOL] return f" [string] { post_id }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $posts.models.Post$ 0 0 0 $typing.Type[chrisdoescoding.posts.views.BasePostView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 $django.http.HttpRequest$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[posts.models.Post]]$ 0 0 0 $posts.models.Post$ 0 0 0 0 0 $posts.models.Post$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[posts.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from posts import feed , views [EOL] [EOL] urlpatterns = [ path ( [string] , views . LatestPostView . as_view ( ) , name = [string] ) , path ( [string] , views . PostView . as_view ( ) , name = [string] ) , path ( [string] , feed . RssPostFeed ( ) , name = [string] ) , path ( [string] , feed . AtomPostFeed ( ) , name = [string] ) , path ( [string] , views . RandomPostView . as_view ( ) , name = [string] ) , path ( [string] , views . AllPostsView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import chrisdoescoding [EOL] from django . conf import settings [EOL] from django . contrib . syndication . views import Feed [EOL] from django . urls import reverse [EOL] from django . utils . feedgenerator import Atom1Feed [EOL] [EOL] from posts import models [EOL] [EOL] [EOL] class RssPostFeed ( Feed ) : [EOL] title = settings . TITLE [EOL] link = [string] [EOL] description = settings . DESCRIPTION [EOL] [EOL] def items ( self ) : [EOL] return models . Post . objects . order_by ( [string] ) [ : [number] ] [EOL] [EOL] def item_title ( self , item ) : [EOL] return item . title [EOL] [EOL] def item_description ( self , item ) : [EOL] return item . excerpt [EOL] [EOL] def item_link ( self , item ) : [EOL] return reverse ( [string] , args = [ item . pk ] ) [EOL] [EOL] [EOL] class AtomPostFeed ( RssPostFeed ) : [EOL] feed_type = Atom1Feed [EOL] subtitle = RssPostFeed . description [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.feed.RssPostFeed]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[chrisdoescoding.posts.feed.RssPostFeed]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chrisdoescoding.posts.feed.AtomPostFeed]$ 0 0 0 $typing.Type[chrisdoescoding.posts.feed.AtomPostFeed]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import markdown [EOL] import builtins [EOL] from typing import Any [EOL] [EOL] from django . utils . safestring import mark_safe [EOL] from markdown import Markdown [EOL] from mdx_gfm import GithubFlavoredMarkdownExtension [EOL] [EOL] [EOL] class MarkdownParser : [EOL] [docstring] [EOL] [EOL] markdown_parser = Markdown ( extensions = [ GithubFlavoredMarkdownExtension ( ) ] ) [EOL] [EOL] def __init__ ( self , unparsed_text ) : [EOL] self . unparsed_text = unparsed_text [EOL] self . html = mark_safe ( self . markdown_parser . convert ( unparsed_text ) ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , exc_traceback ) : [EOL] self . markdown_parser . reset ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $markdown.core.Markdown$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $"MarkdownParser"$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from posts . models import Post [EOL] [EOL] [EOL] class PostAdmin ( admin . ModelAdmin ) : [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] admin . site . register ( Post , PostAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import os [EOL] from unittest . mock import MagicMock [EOL] [EOL] from django . contrib . auth . models import User [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . core . management import call_command [EOL] from django . test import TestCase , override_settings [EOL] [EOL] import factories [EOL] from posts . models import Post [EOL] [EOL] [EOL] @ override_settings ( DEBUG = True ) class TestBootstrap ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . devnull = open ( os . devnull , [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . devnull . close ( ) [EOL] self . devnull = None [EOL] [EOL] @ override_settings ( DEBUG = False ) def test_command_fails_in_prod ( self ) : [EOL] with self . assertRaises ( ImproperlyConfigured ) : [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] [EOL] def test_creates_post_when_it_doesnt_exist_before ( self ) : [EOL] assert Post . objects . count ( ) == [number] [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] assert Post . objects . count ( ) == [number] [EOL] [EOL] def test_creates_published_post_if_only_unpublished_posts_exist ( self ) : [EOL] factories . UnpublishedPostFactory ( ) [EOL] assert Post . objects . count ( ) == [number] [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] assert Post . objects . count ( ) == [number] [EOL] [EOL] def test_creates_superuser_when_it_doesnt_exist_before ( self ) : [EOL] assert not User . objects . filter ( username = [string] ) . exists ( ) [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] assert User . objects . filter ( username = [string] ) . exists ( ) [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] assert User . objects . filter ( username = [string] ) . count ( ) == [number] [EOL] [EOL] def test_sets_superuser_password_to_test ( self ) : [EOL] call_command ( [string] , stdout = self . devnull ) [EOL] user = User . objects . get ( username = [string] ) [EOL] assert user . check_password ( [string] ) [EOL] [EOL] def test_command_uses_correct_stdout ( self ) : [EOL] spy = MagicMock ( ) [EOL] call_command ( [string] , stdout = spy ) [EOL] spy . write . assert_called_once_with ( [string] ) [EOL] spy . write . reset_mock ( ) [EOL] [EOL] call_command ( [string] , stdout = spy ) [EOL] assert spy . write . call_count == [number] [EOL] spy . write . assert_any_call ( [string] ) [EOL] spy . write . assert_any_call ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import typing [EOL] from datetime import timedelta [EOL] from unittest . mock import patch [EOL] [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] from posts . models import Post , calculate_excerpt_from_markdown [EOL] [EOL] [EOL] class FakeMarkdownParser : [EOL] html = [string] [EOL] [EOL] def __exit__ ( self ) : [EOL] pass [EOL] [EOL] [EOL] class TestView ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] now = timezone . now ( ) [EOL] [EOL] cls . post_0 = Post . objects . create ( title = [string] , publication_date = now - timedelta ( hours = [number] ) , body = [string] , ) [EOL] cls . post_1 = Post . objects . create ( title = [string] , publication_date = now - timedelta ( hours = [number] ) , body = [string] , ) [EOL] cls . post_2 = Post . objects . create ( title = [string] ) [EOL] cls . post_3 = Post . objects . create ( title = [string] , publication_date = now - timedelta ( minutes = [number] ) , body = [string] , hide = True , ) [EOL] cls . post_4 = Post . objects . create ( title = [string] , publication_date = now - timedelta ( hours = [number] ) , body = [string] , ) [EOL] [EOL] def test_unable_to_find_post ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] , args = [ [number] ] ) [EOL] response = self . client . get ( url , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_unable_to_find_unpublished_post ( self ) : [EOL] [docstring] [EOL] unpublished_post_id = self . post_2 . id [EOL] url = reverse ( [string] , args = [ unpublished_post_id ] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_unable_to_find_hidden_post ( self ) : [EOL] [docstring] [EOL] hidden_post_id = self . post_3 . id [EOL] url = reverse ( [string] , args = [ hidden_post_id ] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_redirect_to_latest ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , follow = True ) [EOL] self . assertRedirects ( response , reverse ( [string] ) ) [EOL] self . assertContains ( response , self . post_4 . title ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_get_post_requested ( self ) : [EOL] [docstring] [EOL] published_posts = ( self . post_0 , self . post_1 , self . post_4 ) [EOL] for published_post in published_posts : [EOL] url = reverse ( [string] , args = [ published_post . id ] ) [EOL] response = self . client . get ( url ) [EOL] self . assertContains ( response , published_post . title ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] @ patch ( [string] ) def test_uses_markdownparser ( self , mock_mp ) : [EOL] [docstring] [EOL] published_posts = ( self . post_0 , self . post_1 , self . post_4 ) [EOL] mock_mp . return_value . __enter__ . return_value = FakeMarkdownParser [EOL] for published_post in published_posts : [EOL] url = reverse ( [string] , args = [ published_post . id ] ) [EOL] response = self . client . get ( url ) [EOL] mock_mp . assert_called_with ( published_post . body ) [EOL] self . assertContains ( response , published_post . title ) [EOL] self . assertContains ( response , FakeMarkdownParser . html ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_sets_next_prev_ids_in_context ( self ) : [EOL] [docstring] [EOL] inputs_to_expected = ( ( self . post_0 , ( None , self . post_1 . id ) ) , ( self . post_1 , ( self . post_0 . id , self . post_4 . id ) ) , ( self . post_4 , ( self . post_1 . id , None ) ) , ) [EOL] [EOL] for input_post , expected in inputs_to_expected : [EOL] url = reverse ( [string] , args = [ input_post . id ] ) [EOL] response = self . client . get ( url ) [EOL] context = response . context [EOL] expected_prev , expected_next = expected [EOL] actual_prev , actual_next = context [ [string] ] , context [ [string] ] [EOL] self . assertEqual ( actual_prev . pk if actual_prev else actual_prev , expected_prev ) [EOL] self . assertEqual ( actual_next . pk if actual_next else actual_next , expected_next ) [EOL] [EOL] @ patch ( [string] ) def test_raw_returns_post_body ( self , mock_mp ) : [EOL] [docstring] [EOL] published_posts = ( self . post_0 , self . post_1 , self . post_4 ) [EOL] mock_mp . return_value . __enter__ . return_value = FakeMarkdownParser [EOL] for published_post in published_posts : [EOL] url = f'{ reverse ( [string] , args = [ published_post . id ] ) } [string] ' [EOL] response = self . client . get ( url ) [EOL] mock_mp . assert_not_called ( ) [EOL] self . assertContains ( response , published_post . body ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] [EOL] def test_excerpt_calculation ( self ) : [EOL] assert calculate_excerpt_from_markdown ( self . post_4 . body ) == self . post_4 . excerpt [EOL] assert ( calculate_excerpt_from_markdown ( [string] ) == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[unknown,typing.Tuple[None,unknown]],typing.Tuple[unknown,typing.Tuple[unknown,unknown]],typing.Tuple[unknown,typing.Tuple[unknown,None]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[unknown,typing.Tuple[None,unknown]],typing.Tuple[unknown,typing.Tuple[unknown,unknown]],typing.Tuple[unknown,typing.Tuple[unknown,None]]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown,unknown]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] def forwards_func ( apps , schema_editor ) : [EOL] from posts . models import calculate_excerpt_from_markdown [EOL] [EOL] Post = apps . get_model ( [string] , [string] ) [EOL] for post in Post . objects . all ( ) : [EOL] post . excerpt = calculate_excerpt_from_markdown ( post . body ) [EOL] post . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( default = [string] , max_length = [number] ) , preserve_default = False , ) , migrations . RunPython ( forwards_func , migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . core . management import call_command [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] import factories [EOL] from posts . models import Post [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = ( [string] [string] [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if settings . DEBUG is False : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] [EOL] if not Post . objects . filter ( publication_date__isnull = False ) . exists ( ) : [EOL] factories . PostFactory ( ) [EOL] else : [EOL] self . stdout . write ( [string] ) [EOL] [EOL] if not User . objects . filter ( username = [string] ) . exists ( ) : [EOL] call_command ( [string] , [string] , username = [string] , email = [string] , stdout = self . stdout , stderr = self . stderr , ) [EOL] user = User . objects . get ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] else : [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , List [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from typing import Dict , List [EOL] [EOL] from . common import * [comment] [EOL] [EOL] DEBUG = True [EOL] SECRET_KEY = [string] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . environ . get ( [string] , [string] ) , } } [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ ] [comment] [EOL] [EOL] INSTALLED_APPS . append ( [string] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Optional , Tuple [EOL] import typing [EOL] import os [EOL] from typing import Optional [EOL] [EOL] from . common import * [comment] [EOL] [EOL] DEBUG = False [EOL] SECRET_KEY = ... [EOL] [EOL] try : [EOL] with open ( os . path . join ( BASE_DIR , [string] ) , [string] ) as f : [comment] [EOL] SECRET_KEY = f . read ( ) [EOL] except FileNotFoundError : [EOL] SECRET_KEY = os . environ . get ( [string] ) [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . environ [ [string] ] , [string] : os . environ [ [string] ] , [string] : os . environ [ [string] ] , [string] : os . environ [ [string] ] , } } [EOL] [EOL] SECURE_CONTENT_TYPE_NOSNIFF = True [EOL] SECURE_BROWSER_XSS_FILTER = True [EOL] X_FRAME_OPTIONS = [string] [EOL] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] SECURE_SSL_REDIRECT = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] import os [EOL] [EOL] BASE_DIR = os . path . abspath ( os . path . join ( __file__ , [string] , [string] , [string] ) ) [EOL] [EOL] LISTVIEW_EXCERPT_LENGTH = [number] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] } , } ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] STATIC_URL = [string] [EOL] [EOL] TITLE = [string] [EOL] DESCRIPTION = [string] [EOL] [EOL] SHELL_PLUS_PRE_IMPORTS = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0