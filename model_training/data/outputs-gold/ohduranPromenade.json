from typing import Dict , Any [EOL] import typing [EOL] import pytest [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework . authtoken . models import Token [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] @ pytest . fixture def default_user ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] user = User . objects . create_user ( ** data ) [EOL] user . raw_password = data [ [string] ] [EOL] Token . objects . create ( user = user ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import common [EOL] from django . db import models [EOL] from django . utils . text import slugify [EOL] [EOL] [EOL] [comment] [EOL] class Completable ( models . Model ) : [EOL] is_complete = models . BooleanField ( default = False ) [EOL] last_complete = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class Permalinkable ( models . Model ) : [EOL] slug = models . SlugField ( unique = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . slug : [EOL] self . slug = slugify ( self . username ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class Timestampable ( models . Model ) : [EOL] created_date = models . DateTimeField ( auto_now_add = True ) [EOL] modified_date = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[common.behaviors.Completable]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[common.behaviors.Completable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[common.behaviors.Permalinkable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[common.behaviors.Timestampable]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[common.behaviors.Timestampable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CommonConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . utils import timezone [EOL] from freezegun import freeze_time [EOL] [EOL] [EOL] class BehaviorTestCaseMixin : [EOL] [EOL] def get_model ( self ) : [EOL] return getattr ( self , [string] ) [EOL] [EOL] def create_instance ( self , ** kwargs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class TimestampableTests ( BehaviorTestCaseMixin ) : [EOL] [EOL] def test_created_date ( self ) : [EOL] [EOL] now = timezone . now ( ) [EOL] with freeze_time ( now ) : [EOL] obj = self . create_instance ( ) [EOL] [EOL] assert now == obj . created_date [EOL] [EOL] def test_modified_date ( self ) : [EOL] [EOL] obj = self . create_instance ( ) [EOL] [EOL] now = timezone . now ( ) [EOL] with freeze_time ( now ) : [EOL] obj . save ( ) [EOL] [EOL] assert now == obj . modified_date [EOL] [EOL] [EOL] class PermalinkableTests ( BehaviorTestCaseMixin ) : [EOL] [EOL] def test_givenAnObjectWithUsername_theSlugIsTheSlugifiedUsername ( self , default_user , client ) : [EOL] obj = self . create_instance ( username = [string] ) [EOL] assert [string] == obj . slug [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from . behavior_tests import * [EOL]	0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import typing [EOL] import accounts [EOL] from rest_framework import serializers [EOL] [EOL] from . models import Account [EOL] [EOL] [EOL] class AccountSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Account [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework import routers [EOL] [EOL] from . views import AccountViewSet [EOL] [EOL] router = routers . SimpleRouter ( ) [EOL] router . register ( [string] , AccountViewSet ) [EOL] [EOL] app_name = [string] [EOL] urlpatterns = router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Account [EOL] [EOL] [EOL] @ admin . register ( Account ) class BotModelAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import accounts [EOL] from rest_framework import viewsets [EOL] [EOL] from . models import Account [EOL] from . serializers import AccountSerializer [EOL] [EOL] [EOL] class AccountViewSet ( viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] queryset = Account . objects . all ( ) [EOL] serializer_class = AccountSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.views.AccountViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.serializers.AccountSerializer]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import accounts [EOL] from common . behaviors import Timestampable [EOL] from django . db import models [EOL] [EOL] [EOL] class AccountQueryset ( models . QuerySet ) : [EOL] pass [EOL] [EOL] [EOL] class AccountManager ( models . Manager ) : [EOL] queryset_class = AccountQueryset [EOL] use_for_related_fields = True [EOL] [EOL] def get_queryset ( self ) : [EOL] return self . queryset_class ( self . model ) [EOL] [EOL] [EOL] class Account ( Timestampable , models . Model ) : [EOL] username = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] objects = AccountManager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . username ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.AccountQueryset]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $accounts.models.AccountManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import typing [EOL] import accounts [EOL] import pytest [EOL] from accounts . models import Account [EOL] from common . tests import TimestampableTests [EOL] [EOL] [EOL] @ pytest . mark . django_db class TestBotViewSet ( TimestampableTests ) : [EOL] model = Account [EOL] [EOL] def create_instance ( self , ** kwargs ) : [EOL] return Account . objects . create ( ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] urlpatterns = [ path ( settings . ADMIN_URL , admin . site . urls ) , path ( [string] , include_docs_urls ( title = [string] , authentication_classes = [ ] , permission_classes = [ ] ) ) , path ( [string] , include ( [string] , namespace = [string] ) , ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple [EOL] import typing [EOL] import bots [EOL] from rest_framework import serializers [EOL] [EOL] from . models import Bot [EOL] [EOL] [EOL] class BotSerializer ( serializers . ModelSerializer ) : [EOL] password = serializers . CharField ( max_length = [number] , write_only = True ) [EOL] is_verified = serializers . BooleanField ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Bot [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.serializers.BotSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.serializers.BotSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.models.Bot]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework import routers [EOL] [EOL] from . views import BotViewSet [EOL] [EOL] router = routers . SimpleRouter ( ) [EOL] router . register ( [string] , BotViewSet ) [EOL] [EOL] app_name = [string] [EOL] urlpatterns = router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Bot [EOL] [EOL] [EOL] @ admin . register ( Bot ) class BotModelAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any [EOL] import typing [EOL] import bots [EOL] from rest_framework import status , viewsets [EOL] from rest_framework . decorators import action [EOL] from rest_framework . response import Response [EOL] [EOL] from . import messages , tasks [EOL] from . models import Bot [EOL] from . serializers import BotSerializer [EOL] [EOL] [EOL] class BotViewSet ( viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] queryset = Bot . objects . all ( ) [EOL] serializer_class = BotSerializer [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def verify ( self , request , pk = None ) : [EOL] bot = self . get_object ( ) [EOL] tasks . verify_bot . delay ( bot . username ) [EOL] return Response ( { [string] : messages . VERIFYING_BOT } ) [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def follow ( self , request , pk ) : [EOL] bot = self . get_object ( ) [EOL] return Response ( { [string] : messages . FOLLOWING_ACCOUNTS } , status = status . HTTP_201_CREATED ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.views.BotViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[bots.serializers.BotSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] from celery import shared_task [EOL] [EOL] from . models import Bot [EOL] from . selenium import get_session [EOL] [EOL] [EOL] @ shared_task ( ) def verify_bot ( username ) : [EOL] bot = Bot . objects . get ( username = username ) [EOL] if get_session ( bot ) : [EOL] bot . is_verified = True [EOL] bot . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from instapy import InstaPy [EOL] [EOL] [EOL] def get_session ( bot ) : [EOL] session = InstaPy ( username = bot . username , password = bot . password , selenium_local_session = False ) [EOL] session . set_selenium_remote_session ( selenium_url = [string] ) [EOL] session . login ( ) [EOL] session . end ( threaded_session = True ) [EOL] [comment] [EOL] return not session . aborting [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BotsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import bots [EOL] from django . contrib . auth . hashers import make_password [EOL] from django . db import models [EOL] [EOL] [EOL] [comment] [EOL] class PasswordEncryptable ( models . Model ) : [EOL] password = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def clean ( self ) : [EOL] self . password = make_password ( self . password ) [EOL] return super ( ) . clean ( ) [EOL] [EOL] [EOL] class Verifiable ( models . Model ) : [EOL] is_verified = models . BooleanField ( default = False ) [EOL] last_verified = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.behaviors.PasswordEncryptable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.behaviors.Verifiable]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.behaviors.Verifiable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
VERIFYING_BOT = [string] [EOL] FOLLOWING_ACCOUNTS = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , List , Any , Union , Dict [EOL] import typing [EOL] import bots [EOL] import pytest [EOL] from accounts . models import Account [EOL] from bots . models import Bot [EOL] from common . tests import PermalinkableTests , TimestampableTests [EOL] from django . urls import reverse [EOL] from model_mommy import mommy [EOL] from rest_framework import status [EOL] from users . models import User [EOL] from users . tests import HasUserMixinTests [EOL] [EOL] from . behavior_tests import IsVerifiableTests [EOL] [EOL] [EOL] @ pytest . mark . django_db class TestBotViewSet ( TimestampableTests , PermalinkableTests , IsVerifiableTests , HasUserMixinTests ) : [EOL] model = Bot [EOL] [EOL] def create_instance ( self , ** kwargs ) : [EOL] return Bot . objects . create ( ** kwargs ) [EOL] [EOL] def create_instance_with_user ( self , ** kwargs ) : [EOL] user_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] user = User . objects . create_user ( ** user_data ) [EOL] return Bot . objects . create ( user = user ) [EOL] [EOL] def test_Post_GivenUsernameAndPassword_aBotInstanceIsCreated ( self , default_user , client ) : [EOL] data = { [string] : [string] , [string] : [string] } [EOL] headers = [string] . format ( default_user . auth_token . key ) [EOL] response = client . post ( reverse ( [string] ) , data = data , HTTP_AUTHORIZATION = headers ) [EOL] [EOL] assert status . HTTP_201_CREATED == response . status_code [EOL] expected_json = { [string] : [number] , [string] : [string] , [string] : False } [EOL] assert expected_json == response . json ( ) [EOL] [EOL] assert [number] == Bot . objects . count ( ) [EOL] [EOL] bot = Bot . objects . first ( ) [EOL] [EOL] assert data [ [string] ] == bot . username [EOL] assert data [ [string] ] == bot . password [EOL] [EOL] def test_Post_GivenABotAndAnAccount_BotWillFollowAccount ( self , default_user , client ) : [EOL] headers = [string] . format ( default_user . auth_token . key ) [EOL] [EOL] bot = self . create_instance ( ) [EOL] bot . assign_user ( default_user . pk ) [EOL] account = mommy . make ( Account , pk = [number] ) [EOL] [EOL] data = { [string] : [ [number] ] , } [EOL] [EOL] response = client . post ( reverse ( [string] , args = [ bot . pk ] ) , data = data , HTTP_AUTHORIZATION = headers ) [EOL] assert status . HTTP_201_CREATED == response . status_code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bots.models.Bot]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from unittest . mock import patch [EOL] [EOL] from common . tests import BehaviorTestCaseMixin [EOL] from django . test . utils import override_settings [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] [EOL] [EOL] class IsVerifiableTests ( BehaviorTestCaseMixin ) : [EOL] [EOL] @ override_settings ( task_always_eager = True ) def test_Verify_GivenCorrectUsernameAndPassword_isVerifiedTurnsTrue ( self , default_user , client ) : [EOL] headers = [string] . format ( default_user . auth_token . key ) [EOL] [EOL] obj = self . create_instance ( pk = [number] ) [EOL] assert obj . is_verified is False [EOL] [EOL] with patch ( [string] . format ( self . model . _meta . app_label ) , return_value = True ) as mock : [EOL] url = reverse ( [string] . format ( self . model . _meta . app_label , self . model . _meta . verbose_name ) , args = [ [number] ] ) [EOL] response = client . get ( url , HTTP_AUTHORIZATION = headers ) [EOL] mock . assert_called_once ( ) [EOL] [EOL] assert status . HTTP_200_OK == response . status_code [EOL] [EOL] obj . refresh_from_db ( ) [EOL] assert obj . is_verified is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from rest_framework import routers [EOL] [EOL] from . views import UserViewSet [EOL] [EOL] [comment] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , UserViewSet ) [EOL] [EOL] app_name = [string] [EOL] [comment] [EOL] [comment] [EOL] urlpatterns = [ url ( [string] , include ( router . urls ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import users [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] [comment] [EOL] class HasUserMixin ( models . Model ) : [EOL] [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , on_delete = models . SET_NULL ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def assign_user ( self , pk ) : [EOL] if not self . user : [EOL] self . user = User . objects . get ( pk = pk ) [EOL] else : [EOL] raise ValidationError ( [string] . format ( self . user . pk ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.mixins.HasUserMixin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . contrib . auth import admin as auth_admin [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( auth_admin . UserAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , Any [EOL] import typing [EOL] import users [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework import serializers [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] [comment] [EOL] class UserSerializer ( serializers . HyperlinkedModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.UserSerializer.Meta]$ 0 $typing.Any$ 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any [EOL] import typing [EOL] import users [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework import viewsets [EOL] [EOL] from . serializers import UserSerializer [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.UserViewSet]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.UserSerializer]$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any [EOL] import typing [EOL] import pytest [EOL] from django . contrib . auth import get_user_model [EOL] from django . urls import reverse [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db class TestTokenCreateView : [EOL] [EOL] def test_post_should_login_user ( self , tp ) : [EOL] user_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] user = User . objects . create_user ( ** user_data ) [EOL] with pytest . raises ( User . auth_token . RelatedObjectDoesNotExist ) : [EOL] assert not user . auth_token [EOL] data = { [string] : user_data [ [string] ] , [string] : user_data [ [string] ] , } [EOL] response = tp . post ( [string] , data = data ) [EOL] user . refresh_from_db ( ) [EOL] assert response . data [ [string] ] == user . auth_token . key [EOL] [EOL] [EOL] @ pytest . mark . django_db class TestUserViewSet : [EOL] [EOL] def test_authenticatedUser_shouldGetAListOfUsers ( self , tp , default_user , client ) : [EOL] [EOL] headers = [string] . format ( default_user . auth_token . key ) [EOL] response = client . get ( reverse ( [string] ) , HTTP_AUTHORIZATION = headers ) [EOL] [EOL] expected_response = [ { [string] : default_user . username , [string] : default_user . email , [string] : False } ] [EOL] [EOL] assert expected_response == response . json ( ) [EOL] [EOL] def test_unauthenticatedUser_shouldGetAnError ( self , tp ) : [EOL] response = tp . get ( [string] ) [EOL] [EOL] assert { [string] : [string] } == response . json ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import pytest [EOL] from common . tests import BehaviorTestCaseMixin [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserBehaviorTestCaseMixin ( BehaviorTestCaseMixin ) : [EOL] [EOL] def create_instance_with_user ( self , ** kwargs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class HasUserMixinTests ( UserBehaviorTestCaseMixin ) : [EOL] def test_has_user ( self ) : [EOL] obj = self . create_instance_with_user ( ) [EOL] assert obj . user [EOL] [EOL] def test_assign_user ( self ) : [EOL] obj = self . create_instance ( ) [EOL] user_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] user = User . objects . create_user ( ** user_data ) [EOL] [EOL] obj . assign_user ( user . pk ) [EOL] [EOL] assert obj . user == user [EOL] [EOL] def test_assign_user_fails_if_user_is_already_assigned ( self ) : [EOL] obj = self . create_instance_with_user ( ) [EOL] with pytest . raises ( ValidationError ) : [EOL] obj . assign_user ( obj . user . pk ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0
from . behavior_tests import * [EOL]	0 0 0 0 0 0