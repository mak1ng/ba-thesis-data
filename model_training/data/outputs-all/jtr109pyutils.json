from distutils . core import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , author_email = [string] , py_modules = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import datetime [EOL] import builtins [EOL] import datetime [EOL] [EOL] [EOL] def timestamp ( t ) : [EOL] [docstring] [EOL] return int ( t . timestamp ( ) * [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Pattern [EOL] import typing [EOL] import builtins [EOL] import re [EOL] [EOL] _underscorer1 = re . compile ( [string] ) [EOL] _underscorer2 = re . compile ( [string] ) [EOL] [EOL] [EOL] def camel2snake ( camel ) : [EOL] [docstring] [EOL] subbed = _underscorer1 . sub ( [string] , camel ) [EOL] return _underscorer2 . sub ( [string] , subbed ) . lower ( ) [EOL] [EOL] [EOL] def snake_to_camel ( snake ) : [EOL] [docstring] [EOL] [EOL] return re . sub ( [string] , lambda x : x . group ( [number] ) . upper ( ) , snake ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import datetime [EOL] from unittest import TestCase [EOL] import datetime [EOL] [EOL] [EOL] from pyutils . datetime import timestamp [EOL] [EOL] [EOL] class TimeStampTestCase ( TestCase ) : [EOL] [EOL] def test_timestamp ( self ) : [EOL] d = datetime . datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] ts = timestamp ( d ) [EOL] expected = [number] [EOL] self . assertEqual ( ts , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $datetime.datetime$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0
	0
	0
from typing import Literal , Tuple [EOL] import typing_extensions [EOL] import typing [EOL] import datetime [EOL] from unittest import TestCase [EOL] [EOL] from pyutils . text import camel2snake , snake_to_camel [EOL] [EOL] [EOL] class CaseConverterTestCase ( TestCase ) : [EOL] [EOL] def test_camel2snake ( self ) : [EOL] pairs = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] for c , s in pairs : [EOL] self . assertEqual ( camel2snake ( c ) , s ) [EOL] [EOL] def test_snake2camel ( self ) : [EOL] pairs = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] for s , c in pairs : [EOL] self . assertEqual ( snake_to_camel ( s ) , c ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0