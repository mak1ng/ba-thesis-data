[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from urllib import parse [EOL] [EOL] from django . conf import settings [EOL] from django . utils . encoding import filepath_to_uri [EOL] from storages . backends . s3boto3 import S3Boto3Storage [EOL] [EOL] [EOL] class PublicMediaStorage ( S3Boto3Storage ) : [EOL] if hasattr ( settings , [string] ) : [EOL] bucket_name = settings . AWS_PUBLIC_BUCKET_NAME [EOL] [EOL] if hasattr ( settings , [string] ) : [EOL] custom_domain = settings . AWS_PUBLIC_CUSTOM_DOMAIN [EOL] [EOL] file_overwrite = False [EOL] querystring_auth = False [EOL] url_protocol = [string] [EOL] [EOL] [EOL] class PrivateMediaStorage ( S3Boto3Storage ) : [EOL] if hasattr ( settings , [string] ) : [EOL] bucket_name = settings . AWS_PRIVATE_BUCKET_NAME [EOL] [EOL] bucket_acl = [string] [EOL] custom_domain = False [EOL] default_acl = [string] [EOL] encryption = True [EOL] file_overwrite = False [EOL] querystring_auth = True [EOL] url_protocol = [string] [EOL] [EOL] def url ( self , name , parameters = None , expire = None ) : [EOL] url = super ( ) . url ( name , parameters , expire ) [EOL] [EOL] if hasattr ( settings , [string] ) : [EOL] [comment] [EOL] custom_domain = settings . AWS_PRIVATE_CUSTOM_DOMAIN [EOL] parts = list ( parse . urlsplit ( url ) ) [EOL] parts [ [number] : [number] ] = custom_domain , filepath_to_uri ( name ) [EOL] return parse . urlunsplit ( parts ) [EOL] [EOL] return url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UtilsConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django . db import models [EOL] from wagtail . admin . edit_handlers import FieldPanel [EOL] from wagtail . contrib . settings . models import BaseSetting , register_setting [EOL] [EOL] [EOL] @ register_setting class PDFPageSettings ( BaseSetting ) : [EOL] A4 = [string] [EOL] LEGAL = [string] [EOL] LETTER = [string] [EOL] PAGE_SIZES = [ ( A4 , [string] ) , ( LEGAL , [string] ) , ( LETTER , [string] ) , ] [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] [EOL] download_page_size = models . CharField ( choices = PAGE_SIZES , default = LEGAL , max_length = [number] , help_text = [string] ) [EOL] [EOL] panels = [ FieldPanel ( [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . conf import settings [EOL] from django . core . files . storage import get_storage_class [EOL] from django . http import FileResponse [EOL] from django . views . generic import View [EOL] [EOL] private_file_storage = getattr ( settings , [string] , None ) [EOL] PrivateStorage = get_storage_class ( private_file_storage ) [EOL] [EOL] [EOL] class PrivateMediaView ( View ) : [EOL] storage = PrivateStorage ( ) [EOL] [EOL] def get_media ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] raise NotImplementedError ( ) [EOL] [EOL] def get ( self , * args , ** kwargs ) : [EOL] file_to_serve = self . get_media ( * args , ** kwargs ) [EOL] return FileResponse ( file_to_serve ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.utils.storage.PrivateMediaView]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] from django . core . cache import cache [EOL] from django . urls import reverse [EOL] from django . utils . html import format_html [EOL] [EOL] [EOL] def image_url_cache_key ( image_id , spec ) : [EOL] return f' [string] { image_id } [string] { spec }' [EOL] [EOL] [EOL] def generate_image_url ( image , filter_spec ) : [EOL] cache_key = image_url_cache_key ( image . id , filter_spec ) [EOL] url = cache . get ( cache_key ) [EOL] if url : [EOL] return url [EOL] from wagtail . images . views . serve import generate_signature [EOL] signature = generate_signature ( image . id , filter_spec ) [EOL] url = reverse ( [string] , args = ( signature , image . id , filter_spec ) ) [EOL] url += image . file . name [ len ( [string] ) : ] [EOL] cache . set ( cache_key , url ) [EOL] return url [EOL] [EOL] [EOL] def generate_image_tag ( image , filter_spec ) : [EOL] url = generate_image_url ( image , filter_spec ) [EOL] return format_html ( f' [string] { image . title } [string] { url } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import List , Any , Union , Dict [EOL] import typing [EOL] from tinymce . widgets import TinyMCE [EOL] [EOL] MCE_ATTRIBUTES = { [string] : False , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] } , { [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] } , ] , [string] : False , [string] : True , [string] : [string] , } [EOL] MCE_ATTRIBUTES_SHORT = { ** MCE_ATTRIBUTES , ** { [string] : [number] } } [EOL] [EOL] RICH_TEXT_WIDGET = TinyMCE ( mce_attrs = MCE_ATTRIBUTES ) [EOL] RICH_TEXT_WIDGET_SHORT = TinyMCE ( mce_attrs = MCE_ATTRIBUTES_SHORT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,builtins.str]],builtins.str]]],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,builtins.str]],builtins.str]]],builtins.int,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,builtins.str]],builtins.str]]],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,builtins.str]],builtins.str]]],builtins.bool,builtins.str]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,builtins.str]],builtins.str]]],builtins.int,builtins.str]]$ 0 0
from typing import List , Any [EOL] import typing [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] [EOL] class ListRelatedMixin : [EOL] [docstring] [EOL] def get_queryset ( self , request ) : [EOL] qs = super ( ) . get_queryset ( request ) [EOL] related = [ f'{ form } [string] { field }' for form , field in self . related_models ] [EOL] return qs . prefetch_related ( * related ) [EOL] [EOL] def _list_related ( self , obj , form , field ) : [EOL] return [string] . join ( getattr ( obj , f'{ form } [string] ' ) . values_list ( f'{ field } [string] ' , flat = True ) ) [EOL] [EOL] def used_by ( self , obj ) : [EOL] rows = list ( ) [EOL] for form , field in self . related_models : [EOL] related = self . _list_related ( obj , form , field ) [EOL] if related : [EOL] rows . append ( related ) [EOL] return mark_safe ( [string] . join ( rows ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0
from typing import Any [EOL] import typing [EOL] import django [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . db . models import ProtectedError [EOL] from django . forms . models import ModelForm [EOL] from django . http import HttpResponseForbidden [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from django . utils . decorators import method_decorator [EOL] from django . utils . translation import gettext as _ [EOL] from django . views import defaults [EOL] from django . views . generic import View [EOL] from django . views . generic . base import ContextMixin [EOL] from django . views . generic . detail import SingleObjectTemplateResponseMixin [EOL] from django . views . generic . edit import ModelFormMixin , ProcessFormView [EOL] from wagtail . admin import messages [EOL] from wagtail . admin . auth import require_admin_access [EOL] from wagtail . admin . views . pages import delete [EOL] from wagtail . core . models import Page [EOL] [EOL] [EOL] def page_not_found ( request , exception = None , template_name = [string] ) : [EOL] if not request . user . is_authenticated : [EOL] template_name = [string] [EOL] return defaults . page_not_found ( request , exception , template_name ) [EOL] [EOL] [EOL] @ method_decorator ( login_required , name = [string] ) class ViewDispatcher ( View ) : [EOL] admin_view = None [EOL] reviewer_view = None [EOL] partner_view = None [EOL] community_view = None [EOL] applicant_view = None [EOL] [EOL] def admin_check ( self , request ) : [EOL] return request . user . is_apply_staff [EOL] [EOL] def reviewer_check ( self , request ) : [EOL] return request . user . is_reviewer [EOL] [EOL] def partner_check ( self , request ) : [EOL] return request . user . is_partner [EOL] [EOL] def community_check ( self , request ) : [EOL] return request . user . is_community_reviewer [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] view = self . applicant_view [EOL] [EOL] if self . admin_check ( request ) : [EOL] view = self . admin_view [EOL] elif self . reviewer_check ( request ) : [EOL] view = self . reviewer_view [EOL] elif self . partner_check ( request ) : [EOL] view = self . partner_view [EOL] elif self . community_check ( request ) : [EOL] view = self . community_view [EOL] [EOL] if view : [EOL] return view . as_view ( ) ( request , * args , ** kwargs ) [EOL] return HttpResponseForbidden ( ) [EOL] [EOL] [EOL] class DelegatableBase ( ContextMixin ) : [EOL] [docstring] [EOL] form_prefix = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . _form_views = { self . form_prefix + form_view . context_name : form_view for form_view in self . form_views } [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] return { } [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] forms = { } [EOL] for form_view in self . _form_views . values ( ) : [EOL] view = form_view ( ) [EOL] view . setup ( self . request , self . args , self . kwargs ) [EOL] context_key , form = view . contribute_form ( self ) [EOL] forms [ context_key ] = form [EOL] [EOL] return super ( ) . get_context_data ( form_prefix = self . form_prefix , ** forms , ** kwargs , ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] kwargs [ [string] ] = self . get_context_data ( ) [EOL] kwargs [ [string] ] = self . get_template_names ( ) [EOL] [EOL] for form_key , form_view in self . _form_views . items ( ) : [EOL] if form_key in request . POST : [EOL] return form_view . as_view ( ) ( request , * args , parent = self , ** kwargs ) [EOL] [EOL] [comment] [EOL] return redirect ( request . path ) [EOL] [EOL] [EOL] class DelegateableView ( DelegatableBase ) : [EOL] def get_form_kwargs ( self ) : [EOL] return { [string] : self . request . user , [string] : self . object , } [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] self . object = self . get_object ( ) [EOL] [EOL] kwargs [ [string] ] = self . object [EOL] [EOL] return super ( ) . post ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class DelegateableListView ( DelegatableBase ) : [EOL] def get_form_kwargs ( self ) : [EOL] return { [string] : self . request . user , } [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] self . object_list = self . get_queryset ( ) [EOL] return super ( ) . post ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class DelegatedViewMixin ( View ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] def setup ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . request = request [EOL] self . args = args [EOL] self . kwargs = kwargs [EOL] [EOL] def get_object ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not hasattr ( self , [string] ) : [EOL] parent_object = self . get_parent_object ( ) [EOL] if isinstance ( parent_object , self . model ) : [EOL] return parent_object [EOL] [EOL] return super ( ) . get_object ( ) [EOL] [EOL] def get_template_names ( self ) : [EOL] return self . kwargs [ [string] ] [EOL] [EOL] def get_form_name ( self ) : [EOL] return self . context_name [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] form_kwargs = super ( ) . get_form_kwargs ( ) [EOL] form_kwargs [ [string] ] = self . request . user [EOL] form_kwargs . update ( ** self . get_parent_kwargs ( ) ) [EOL] return form_kwargs [EOL] [EOL] def get_parent_kwargs ( self ) : [EOL] try : [EOL] return self . parent . get_form_kwargs ( ) [EOL] except AttributeError : [EOL] return self . kwargs [ [string] ] . get_form_kwargs ( ) [EOL] [EOL] def get_parent_object ( self ) : [EOL] return self . get_parent_kwargs ( ) [ [string] ] [EOL] [EOL] def get_form ( self , * args , ** kwargs ) : [EOL] form = super ( ) . get_form ( * args , ** kwargs ) [EOL] form . name = self . get_form_name ( ) [EOL] return form [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] [comment] [EOL] form = kwargs . pop ( [string] ) [EOL] kwargs . update ( self . kwargs [ [string] ] ) [EOL] kwargs . update ( ** { self . context_name : form } ) [EOL] return super ( ) . get_context_data ( ** kwargs ) [EOL] [EOL] @ classmethod def is_model_form ( cls ) : [EOL] return issubclass ( cls . form_class , ModelForm ) [EOL] [EOL] def contribute_form ( self , parent ) : [EOL] self . parent = parent [EOL] [EOL] [comment] [EOL] [comment] [EOL] old_method = None [EOL] if self . request . method in ( [string] , [string] ) : [EOL] old_method = self . request . method [EOL] self . request . method = [string] [EOL] [EOL] form = self . get_form ( ) [EOL] [EOL] if old_method : [EOL] self . request . method = old_method [EOL] return self . context_name , form [EOL] [EOL] def get_success_url ( self ) : [EOL] query = self . request . GET . urlencode ( ) [EOL] if query : [EOL] query = [string] + query [EOL] return self . request . path + query [EOL] [EOL] [EOL] class CreateOrUpdateView ( SingleObjectTemplateResponseMixin , ModelFormMixin , ProcessFormView ) : [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] self . object = self . get_object ( ) [EOL] except self . model . DoesNotExist : [EOL] self . object = None [EOL] [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] self . object = self . get_object ( ) [EOL] except self . model . DoesNotExist : [EOL] self . object = None [EOL] [EOL] return super ( ) . post ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] @ require_admin_access def custom_wagtail_page_delete ( request , page_id ) : [EOL] [docstring] [EOL] try : [EOL] return delete ( request , page_id ) [EOL] except ProtectedError as e : [EOL] protected_details = [string] . join ( [ str ( obj ) for obj in e . protected_objects ] ) [EOL] page = get_object_or_404 ( Page , id = page_id ) . specific [EOL] parent_id = page . get_parent ( ) . id [EOL] messages . warning ( request , _ ( [string] ) . format ( page . get_admin_display_title ( ) , protected_details ) ) [EOL] return redirect ( [string] , parent_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.views.generic.View$ 0 0 0 $django.views.generic.View$ 0 0 0 $django.views.generic.View$ 0 0 0 $django.views.generic.View$ 0 0 0 $django.views.generic.View$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django import forms [EOL] [EOL] from . options import RICH_TEXT_WIDGET [EOL] [EOL] [EOL] class RichTextField ( forms . CharField ) : [EOL] widget = RICH_TEXT_WIDGET [EOL] [EOL] def __init__ ( self , * args , required = False , ** kwargs ) : [EOL] kwargs . update ( required = required ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.utils.fields.RichTextField]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import hypha [EOL] import io [EOL] import itertools [EOL] import io [EOL] import os [EOL] from itertools import cycle [EOL] [EOL] from bs4 import BeautifulSoup , NavigableString [EOL] from reportlab . lib import pagesizes [EOL] from reportlab . lib . colors import Color , white [EOL] from reportlab . lib . styles import ParagraphStyle as PS [EOL] from reportlab . lib . utils import simpleSplit [EOL] from reportlab . pdfbase import pdfmetrics [EOL] from reportlab . pdfbase . ttfonts import TTFont [EOL] from reportlab . platypus import ( BaseDocTemplate , Frame , KeepTogether , ListFlowable , ListItem , NextPageTemplate , PageBreak , PageTemplate , Paragraph , Spacer , Table , TableStyle , ) [EOL] [EOL] STYLES = { [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , name = [string] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , [string] : PS ( fontName = [string] , fontSize = [number] , name = [string] , spaceAfter = [number] , spaceBefore = [number] , leading = [number] ) , } [EOL] [EOL] font_location = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] , [string] ) [EOL] [EOL] [EOL] def font ( font_name ) : [EOL] return os . path . join ( font_location , font_name ) [EOL] [EOL] [EOL] PREPARED_FONTS = False [EOL] [EOL] [EOL] def prepare_fonts ( ) : [EOL] global PREPARED_FONTS [EOL] if PREPARED_FONTS : [EOL] return [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFontFamily ( [string] , normal = [string] , bold = [string] , italic = [string] , boldItalic = [string] ) [EOL] [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFont ( TTFont ( [string] , font ( [string] ) ) ) [EOL] pdfmetrics . registerFontFamily ( [string] , normal = [string] , bold = [string] , italic = [string] , boldItalic = [string] ) [EOL] PREPARED_FONTS = True [EOL] [EOL] [EOL] DARK_GREY = Color ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] FRAME_PADDING = [number] [EOL] [EOL] [EOL] def do_nothing ( doc , canvas ) : [EOL] pass [EOL] [EOL] [EOL] class ReportDocTemplate ( BaseDocTemplate ) : [EOL] def build ( self , flowables , onFirstPage = do_nothing , onLaterPages = do_nothing ) : [EOL] frame = Frame ( self . leftMargin , self . bottomMargin , self . width , self . height , id = [string] ) [EOL] self . addPageTemplates ( [ PageTemplate ( id = [string] , autoNextPageTemplate = [string] , frames = frame , onPage = onFirstPage , pagesize = self . pagesize ) , PageTemplate ( id = [string] , frames = frame , onPage = onLaterPages , pagesize = self . pagesize ) , ] ) [EOL] super ( ) . build ( flowables ) [EOL] [EOL] [EOL] def make_pdf ( title , sections , pagesize ) : [EOL] prepare_fonts ( ) [EOL] buffer = io . BytesIO ( ) [EOL] page_width , page_height = getattr ( pagesizes , pagesize ) [EOL] [EOL] doc = ReportDocTemplate ( buffer , pagesize = getattr ( pagesizes , pagesize ) , title = title , ) [EOL] [EOL] story = [ ] [EOL] for section in sections : [EOL] story . extend ( section [ [string] ] ) [EOL] story . append ( NextPageTemplate ( [string] ) ) [EOL] story . append ( PageBreak ( ) ) [EOL] [EOL] current_section = None [EOL] sections = cycle ( sections ) [EOL] [EOL] def header_page ( canvas , doc ) : [EOL] nonlocal current_section [EOL] current_section = next ( sections ) [EOL] canvas . saveState ( ) [EOL] title_spacer = draw_title_block ( canvas , doc , current_section [ [string] ] , title , current_section [ [string] ] , page_width , page_height , ) [EOL] canvas . restoreState ( ) [EOL] story . insert ( [number] , title_spacer ) [EOL] [EOL] def main_page ( canvas , doc ) : [EOL] nonlocal current_section [EOL] canvas . saveState ( ) [EOL] spacer = draw_header ( canvas , doc , current_section [ [string] ] , title , page_width , page_height , ) [EOL] story . insert ( [number] , spacer ) [EOL] canvas . restoreState ( ) [EOL] [EOL] doc . build ( story , onFirstPage = header_page , onLaterPages = main_page ) [EOL] [EOL] buffer . seek ( [number] ) [EOL] return buffer [EOL] [EOL] [EOL] def split_text ( canvas , text , width ) : [EOL] return simpleSplit ( text , canvas . _fontname , canvas . _fontsize , width ) [EOL] [EOL] [EOL] def draw_header ( canvas , doc , page_title , title , page_width , page_height ) : [EOL] title_size = [number] [EOL] [EOL] [comment] [EOL] canvas . setFont ( [string] , title_size ) [EOL] [EOL] text_width = page_width - doc . leftMargin - doc . rightMargin - [number] * FRAME_PADDING [EOL] split_title = split_text ( canvas , title , text_width ) [EOL] [EOL] [comment] [EOL] total_height = ( doc . topMargin + [number] * ( len ( split_title ) - [number] ) * title_size + title_size / [number] ) [EOL] [EOL] canvas . setFillColor ( DARK_GREY ) [EOL] canvas . rect ( [number] , page_height - total_height , page_width , total_height , stroke = False , fill = True , ) [EOL] [EOL] pos = ( ( page_height - doc . topMargin ) + title_size / [number] + [number] * [number] * title_size ) [EOL] [EOL] canvas . setFillColor ( white ) [EOL] [EOL] canvas . drawString ( doc . leftMargin + FRAME_PADDING , pos , page_title , ) [EOL] [EOL] pos -= title_size / [number] [EOL] [EOL] for line in split_title : [EOL] pos -= title_size [EOL] canvas . drawString ( doc . leftMargin + FRAME_PADDING , pos , line , ) [EOL] pos -= title_size / [number] [EOL] [EOL] return Spacer ( [number] , total_height - doc . topMargin ) [EOL] [EOL] [EOL] def draw_title_block ( canvas , doc , page_title , title , meta , page_width , page_height ) : [EOL] page_title_size = [number] [EOL] title_size = [number] [EOL] meta_size = [number] [EOL] [EOL] text_width = page_width - doc . leftMargin - doc . rightMargin - [number] * FRAME_PADDING [EOL] [EOL] [comment] [EOL] canvas . setFont ( [string] , title_size ) [EOL] canvas . setFillColor ( white ) [EOL] split_title = split_text ( canvas , title , text_width ) [EOL] [EOL] canvas . setFont ( [string] , meta_size ) [EOL] canvas . setFillColor ( white ) [EOL] meta_text = [string] . join ( str ( text ) for text in meta ) [EOL] split_meta = split_text ( canvas , meta_text , text_width ) [EOL] [EOL] total_height = ( doc . topMargin + page_title_size + page_title_size * [number] / [number] + len ( split_title ) * ( title_size + title_size / [number] ) + ( [number] * len ( split_meta ) + [number] ) * meta_size ) [EOL] [EOL] canvas . setFillColor ( DARK_GREY ) [EOL] canvas . rect ( [number] , page_height - total_height , page_width , total_height , stroke = False , fill = True , ) [EOL] [EOL] canvas . setFont ( [string] , page_title_size ) [EOL] canvas . setFillColor ( white ) [EOL] pos = page_height - doc . topMargin [EOL] pos -= page_title_size [EOL] canvas . drawString ( doc . leftMargin + FRAME_PADDING , pos , page_title , ) [EOL] [EOL] pos -= page_title_size * [number] / [number] [EOL] [EOL] canvas . setFont ( [string] , title_size ) [EOL] canvas . setFillColor ( white ) [EOL] for line in split_title : [EOL] pos -= title_size [EOL] canvas . drawString ( doc . leftMargin + FRAME_PADDING , pos , line , ) [EOL] pos -= title_size / [number] [EOL] [EOL] canvas . setFont ( [string] , meta_size ) [EOL] canvas . setFillColor ( white ) [EOL] [EOL] pos -= meta_size * [number] [EOL] [EOL] for line in split_meta : [EOL] canvas . drawString ( doc . leftMargin + FRAME_PADDING , pos , line , ) [EOL] pos -= meta_size / [number] [EOL] [EOL] return Spacer ( [number] , total_height - doc . topMargin ) [EOL] [EOL] [EOL] def handle_block ( block , custom_style = None ) : [EOL] paragraphs = [ ] [EOL] if not custom_style : [EOL] custom_style = { } [EOL] [EOL] styles = { ** STYLES } [EOL] for style , overwrite in custom_style . items ( ) : [EOL] styles [ style ] = STYLES [ overwrite ] [EOL] [EOL] for tag in block : [EOL] if isinstance ( tag , NavigableString ) : [EOL] text = tag . strip ( ) [EOL] if text : [EOL] paragraphs . append ( Paragraph ( text , styles [ [string] ] ) ) [EOL] elif tag . name in { [string] , [string] } : [EOL] style = styles [ [string] ] [EOL] if tag . name == [string] : [EOL] bullet = [string] [EOL] elif tag . name == [string] : [EOL] bullet = [string] [EOL] [EOL] paragraphs . append ( ListFlowable ( [ ListItem ( Paragraph ( bullet_item . get_text ( ) , style ) ) for bullet_item in tag . find_all ( [string] ) ] , bulletType = bullet , ) ) [EOL] elif tag . name in { [string] } : [EOL] paragraphs . append ( Table ( [ [ Paragraph ( cell . get_text ( ) , styles [ [string] ] ) for cell in row . find_all ( { [string] , [string] } ) ] for row in tag . find_all ( [string] ) ] , colWidths = [string] , style = TableStyle ( [ ( [string] , ( [number] , [number] ) , ( - [number] , - [number] ) , [string] ) , ( [string] , ( [number] , [number] ) , ( - [number] , - [number] ) , [number] , DARK_GREY ) , ] ) , ) ) [EOL] else : [EOL] style = None [EOL] if tag . name in { [string] } : [EOL] style = styles [ [string] ] [EOL] elif tag . name == [string] : [EOL] style = styles [ [string] ] [EOL] elif tag . name == [string] : [EOL] style = styles [ [string] ] [EOL] elif tag . name == [string] : [EOL] style = styles [ [string] ] [EOL] elif tag . name == [string] : [EOL] style = styles [ [string] ] [EOL] [EOL] if style : [EOL] text = tag . get_text ( ) [EOL] if text : [EOL] paragraphs . append ( Paragraph ( text , style ) ) [EOL] else : [EOL] paragraphs . extend ( handle_block ( tag ) ) [EOL] return paragraphs [EOL] [EOL] [EOL] def draw_submission_content ( content ) : [EOL] prepare_fonts ( ) [EOL] paragraphs = [ ] [EOL] [EOL] for section in BeautifulSoup ( content , [string] ) . find_all ( [string] ) : [EOL] question_text = section . select_one ( [string] ) . get_text ( ) [EOL] question = Paragraph ( question_text , STYLES [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] first_answer , * rest = handle_block ( section . select_one ( [string] ) ) [EOL] paragraphs . extend ( [ KeepTogether ( [ question , first_answer , ] ) , * rest ] ) [EOL] return paragraphs [EOL] [EOL] [EOL] def draw_project_content ( content ) : [EOL] prepare_fonts ( ) [EOL] paragraphs = [ ] [EOL] for section in BeautifulSoup ( content , [string] ) . find_all ( class_ = [string] ) : [EOL] flowables = handle_block ( section , custom_style = { [string] : [string] , [string] : [string] } ) [EOL] paragraphs . extend ( flowables ) [EOL] [EOL] return paragraphs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import hypha [EOL] import requests [EOL] import requests [EOL] from django . conf import settings [EOL] [EOL] [EOL] class SlackNotifications ( ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . destination = settings . SLACK_DESTINATION_URL [EOL] self . target_room = settings . SLACK_DESTINATION_ROOM [EOL] [EOL] def __call__ ( self , * args , recipients = None , related = None , ** kwargs ) : [EOL] return self . send_message ( * args , recipients = None , related = related , ** kwargs ) [EOL] [EOL] def slack_users ( self , users ) : [EOL] slack_users = [ ] [EOL] for user in users : [EOL] if user . slack : [EOL] slack_users . append ( f' [string] { user . slack } [string] ' ) [EOL] return [string] . join ( slack_users ) [EOL] [EOL] def slack_link ( self , request , related , path = None , ** kwargs ) : [EOL] try : [EOL] url = path or related . get_absolute_url ( ) [EOL] except AttributeError : [EOL] return [string] [EOL] [EOL] link = request . scheme + [string] + request . get_host ( ) + url [EOL] title = str ( related ) [EOL] return f' [string] { link } [string] { title } [string] ' [EOL] [EOL] def send_message ( self , message , request , recipients = None , related = None , ** kwargs ) : [EOL] if not self . destination or not self . target_room : [EOL] errors = list ( ) [EOL] if not self . destination : [EOL] errors . append ( [string] ) [EOL] if not self . target_room : [EOL] errors . append ( [string] ) [EOL] return [string] . format ( [string] . join ( errors ) ) [EOL] [EOL] slack_users = self . slack_users ( recipients ) if recipients else [string] [EOL] [EOL] slack_link = self . slack_link ( request , related , ** kwargs ) if related else [string] [EOL] [EOL] message = [string] . join ( [ slack_users , message , slack_link ] ) . strip ( ) [EOL] [EOL] data = { [string] : self . target_room , [string] : message , } [EOL] response = requests . post ( self . destination , json = data ) [EOL] [EOL] return str ( response . status_code ) + [string] + response . content . decode ( ) [EOL] [EOL] [EOL] slack_notify = SlackNotifications ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $hypha.apply.utils.notifications.SlackNotifications$ 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django . test import TestCase [EOL] from django . views . generic import UpdateView [EOL] [EOL] from hypha . apply . utils . views import DelegatedViewMixin [EOL] [EOL] [EOL] class PatchedUpdateView ( UpdateView ) : [EOL] def get_object ( self ) : [EOL] return [number] [EOL] [EOL] [EOL] class DelegatedView ( DelegatedViewMixin , PatchedUpdateView ) : [EOL] model = int [comment] [EOL] [EOL] def get_parent_kwargs ( self ) : [EOL] return { [string] : [number] } [EOL] [EOL] [EOL] class TestDelegatedViewMixin ( TestCase ) : [EOL] def test_parent_access_if_no_object ( self ) : [EOL] self . assertEqual ( DelegatedView ( ) . get_object ( ) , [number] ) [EOL] [EOL] def test__access_if_no_object ( self ) : [EOL] view = DelegatedView ( ) [EOL] view . object = [number] [EOL] self . assertNotEqual ( view . get_object ( ) , [number] ) [EOL] self . assertEqual ( view . get_object ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.utils.tests.test_views.DelegatedView$ 0 0 0 0 0 $hypha.apply.utils.tests.test_views.DelegatedView$ 0 0 0 0 0 0 0 0 0 $hypha.apply.utils.tests.test_views.DelegatedView$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.utils.tests.test_views.DelegatedView$ 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] [comment] [EOL] @ register . filter def model_verbose_name ( instance ) : [EOL] return instance . _meta . verbose_name . title ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib . auth . models import AnonymousUser [EOL] from django . contrib . messages . storage . fallback import FallbackStorage [EOL] from django . test import RequestFactory , TestCase , override_settings [EOL] from django . urls import reverse [EOL] [EOL] request_factory = RequestFactory ( ) [EOL] [EOL] [EOL] def make_request ( user = AnonymousUser ( ) , data = { } , method = [string] , site = None ) : [EOL] method = getattr ( request_factory , method ) [EOL] request = method ( [string] , data ) [EOL] request . user = user [EOL] request . site = site [EOL] request . session = { } [EOL] request . _messages = FallbackStorage ( request ) [EOL] return request [EOL] [EOL] [EOL] @ override_settings ( ROOT_URLCONF = [string] ) class BaseViewTestCase ( TestCase ) : [EOL] url_name = [string] [comment] [EOL] base_view_name = [string] [EOL] user_factory = None [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . user = cls . user_factory ( ) [EOL] super ( ) . setUpTestData ( ) [EOL] [EOL] def setUp ( self ) : [EOL] if not self . user . is_anonymous : [EOL] self . client . force_login ( self . user ) [EOL] self . factory = RequestFactory ( ) [EOL] [EOL] def get_kwargs ( self , instance ) : [EOL] return { } [EOL] [EOL] def url ( self , instance , view_name = None , absolute = True , url_kwargs = None ) : [EOL] view = view_name or self . base_view_name [EOL] full_url_name = self . url_name . format ( view ) [EOL] kwargs_method = f' [string] { view } [string] ' [EOL] if hasattr ( self , kwargs_method ) : [EOL] kwargs = getattr ( self , kwargs_method ) ( instance ) [EOL] else : [EOL] kwargs = self . get_kwargs ( instance ) [EOL] if url_kwargs : [EOL] kwargs . update ( url_kwargs ) [EOL] return self . url_from_pattern ( full_url_name , kwargs , secure = True , absolute = absolute ) [EOL] [EOL] def absolute_url ( self , location , secure = True ) : [EOL] request = self . factory . get ( location , secure = secure ) [EOL] return request . build_absolute_uri ( ) [EOL] [EOL] def url_from_pattern ( self , pattern , kwargs = None , secure = True , absolute = True ) : [EOL] url = reverse ( pattern , kwargs = kwargs ) [EOL] if absolute : [EOL] return self . absolute_url ( url ) [EOL] request = self . factory . get ( url , secure = secure ) [EOL] return request . path [EOL] [EOL] def get_page ( self , instance = None , view_name = None , url_kwargs = None ) : [EOL] return self . client . get ( self . url ( instance , view_name , url_kwargs = url_kwargs ) , secure = True , follow = True ) [EOL] [EOL] def post_page ( self , instance = None , data = dict ( ) , view_name = None , url_kwargs = None ) : [EOL] return self . client . post ( self . url ( instance , view_name , url_kwargs = url_kwargs ) , data , secure = True , follow = True ) [EOL] [EOL] def refresh ( self , instance ) : [EOL] return instance . __class__ . objects . get ( id = instance . id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . tests import BaseViewTestCase , make_request [comment] [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any , Generator [EOL] import typing [EOL] def flatten ( iterable ) : [EOL] [docstring] [EOL] for item in iterable : [EOL] if isinstance ( item , list ) : [EOL] yield from flatten ( item ) [EOL] else : [EOL] yield item [EOL] [EOL] [EOL] def get_files ( project ) : [EOL] [docstring] [EOL] file_field_names = project . submission . file_field_ids [EOL] file_fields = ( project . submission . data ( field ) for field in file_field_names ) [EOL] [EOL] return list ( flatten ( file_fields ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProjectsConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from django . conf import settings [EOL] [EOL] [EOL] def projects_enabled ( request ) : [EOL] return { [string] : settings . PROJECTS_ENABLED } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase , override_settings [EOL] [EOL] from hypha . apply . users . tests . factories import StaffFactory [EOL] [EOL] [EOL] class TestProjectFeatureFlag ( TestCase ) : [EOL] @ override_settings ( PROJECTS_ENABLED = False ) def test_urls_404_when_turned_off ( self ) : [EOL] self . client . force_login ( StaffFactory ( ) ) [EOL] [EOL] response = self . client . get ( [string] , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] response = self . client . get ( [string] , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . conf import settings [EOL] from django . contrib . messages . storage . fallback import FallbackStorage [EOL] from django . core . management . base import BaseCommand [EOL] from django . http import HttpRequest [EOL] from django . urls import set_urlconf [EOL] from django . utils import timezone [EOL] [EOL] from hypha . apply . activity . messaging import MESSAGES , messenger [EOL] from hypha . apply . home . models import ApplyHomePage [EOL] from hypha . apply . projects . models import Project [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = int ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] site = ApplyHomePage . objects . first ( ) . get_site ( ) [EOL] set_urlconf ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] request = HttpRequest ( ) [EOL] request . META [ [string] ] = site . hostname [EOL] request . META [ [string] ] = site . port [EOL] request . META [ settings . SECURE_PROXY_SSL_HEADER ] = [string] [EOL] request . session = { } [EOL] request . _messages = FallbackStorage ( request ) [EOL] [EOL] today = timezone . now ( ) . date ( ) [EOL] due_date = today + relativedelta ( days = options [ [string] ] ) [EOL] for project in Project . objects . in_progress ( ) : [EOL] next_report = project . report_config . current_due_report ( ) [EOL] due_soon = next_report . end_date == due_date [EOL] not_notified_today = ( not next_report . notified or next_report . notified . date ( ) != today ) [EOL] if due_soon and not_notified_today : [EOL] messenger ( MESSAGES . REPORT_NOTIFY , request = request , user = None , source = project , related = next_report , ) [EOL] [comment] [EOL] next_report . notified = timezone . now ( ) [EOL] next_report . save ( ) [EOL] self . stdout . write ( self . style . SUCCESS ( f' [string] { project . id }' ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . models import F [EOL] [EOL] [EOL] def copy_submitted_date ( apps , schema_editor ) : [EOL] Contract = apps . get_model ( [string] , [string] ) [EOL] Contract . objects . all ( ) . update ( approved_at = F ( [string] ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( copy_submitted_date ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] def user_has_approved ( project , user ) : [EOL] [docstring] [EOL] return project . approvals . filter ( by = user ) . exists ( ) [EOL] [EOL] [EOL] @ register . simple_tag def can_send_for_approval ( project , user ) : [EOL] return user . is_staff and project . can_send_for_approval [EOL] [EOL] [EOL] @ register . simple_tag def user_can_approve_project ( project , user ) : [EOL] return user . is_approver and not user_has_approved ( project , user ) [EOL] [EOL] [EOL] @ register . simple_tag def user_can_edit_project ( project , user ) : [EOL] return project . editable_by ( user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import decimal [EOL] [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . simple_tag def can_change_status ( payment_request , user ) : [EOL] return payment_request . can_user_change_status ( user ) [EOL] [EOL] [EOL] @ register . simple_tag def can_delete ( payment_request , user ) : [EOL] return payment_request . can_user_delete ( user ) [EOL] [EOL] [EOL] @ register . simple_tag def can_edit ( payment_request , user ) : [EOL] return payment_request . can_user_edit ( user ) [EOL] [EOL] [EOL] @ register . simple_tag def percentage ( value , total ) : [EOL] if not total : [EOL] return decimal . Decimal ( [number] ) [EOL] [EOL] unrounded_total = ( value / total ) * [number] [EOL] [EOL] [comment] [EOL] rounded_total = unrounded_total . quantize ( decimal . Decimal ( [string] ) , rounding = decimal . ROUND_DOWN , ) [EOL] [EOL] return rounded_total [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib . admin . utils import unquote [EOL] from django . shortcuts import get_object_or_404 [EOL] from wagtail . contrib . modeladmin . views import CreateView [EOL] [EOL] [EOL] class AddChildMetaTermViewClass ( CreateView ) : [EOL] [docstring] [EOL] [EOL] parent_pk = None [EOL] parent_instance = None [EOL] [EOL] def __init__ ( self , model_admin , parent_pk ) : [EOL] self . parent_pk = unquote ( parent_pk ) [EOL] object_qs = model_admin . model . _default_manager . get_queryset ( ) [EOL] object_qs = object_qs . filter ( pk = self . parent_pk ) [EOL] self . parent_instance = get_object_or_404 ( object_qs ) [EOL] super ( ) . __init__ ( model_admin ) [EOL] [EOL] def get_page_title ( self ) : [EOL] [docstring] [EOL] title = super ( ) . get_page_title ( ) [EOL] return title + [string] % ( self . model . node_child_verbose_name , self . opts . verbose_name , self . parent_instance ) [EOL] [EOL] def get_initial ( self ) : [EOL] [docstring] [EOL] return { [string] : self . parent_pk } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . admin . utils import quote [EOL] from wagtail . contrib . modeladmin . helpers import ButtonHelper [EOL] [EOL] [EOL] class MetaTermButtonHelper ( ButtonHelper ) : [EOL] def delete_button ( self , pk , * args , ** kwargs ) : [EOL] [docstring] [EOL] instance = self . model . objects . get ( pk = pk ) [EOL] if instance . is_root ( ) : [EOL] return [EOL] return super ( ) . delete_button ( pk , * args , ** kwargs ) [EOL] [EOL] def prepare_classnames ( self , start = None , add = None , exclude = None ) : [EOL] [docstring] [EOL] classnames = start or [ ] [EOL] classnames . extend ( add or [ ] ) [EOL] return self . finalise_classname ( classnames , exclude or [ ] ) [EOL] [EOL] def add_child_button ( self , pk , child_verbose_name , ** kwargs ) : [EOL] [docstring] [EOL] instance = self . model . objects . get ( pk = pk ) [EOL] if instance . is_archived or instance . get_parent ( ) and instance . get_parent ( ) . is_archived : [EOL] return [EOL] [EOL] classnames = self . prepare_classnames ( start = self . edit_button_classnames + [ [string] , [string] ] , add = kwargs . get ( [string] ) , exclude = kwargs . get ( [string] ) ) [EOL] return { [string] : classnames , [string] : [string] % ( child_verbose_name , self . verbose_name ) , [string] : [string] % ( child_verbose_name , self . verbose_name ) , [string] : self . url_helper . get_action_url ( [string] , quote ( pk ) ) , } [EOL] [EOL] def get_buttons_for_obj ( self , obj , exclude = None , * args , ** kwargs ) : [EOL] [docstring] [EOL] buttons = super ( ) . get_buttons_for_obj ( obj , * args , ** kwargs ) [EOL] [EOL] add_child_button = self . add_child_button ( pk = getattr ( obj , self . opts . pk . attname ) , child_verbose_name = getattr ( obj , [string] ) , ** kwargs ) [EOL] buttons . append ( add_child_button ) [EOL] [EOL] return buttons [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from typing import List , Dict [EOL] import typing [EOL] CATEGORIES = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str
from django . apps import AppConfig [EOL] [EOL] [EOL] class CategoriesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
	0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import wagtail . core . fields [EOL] import wagtail . search . index [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True ) ) , ( [string] , models . PositiveIntegerField ( ) ) , ( [string] , models . PositiveIntegerField ( default = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , unique = True ) ) , ( [string] , models . BooleanField ( default = False , verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( blank = True ) ) , ( [string] , models . BooleanField ( default = True , help_text = [string] ) ) , ( [string] , models . BooleanField ( default = False , help_text = [string] ) ) , ( [string] , models . IntegerField ( blank = True , default = [number] , editable = False ) ) , ] , options = { [string] : [string] , [string] : [string] , } , bases = ( wagtail . search . index . Indexed , models . Model ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import wagtail . search . index [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True ) ) , ( [string] , models . PositiveIntegerField ( ) ) , ( [string] , models . PositiveIntegerField ( default = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , unique = True ) ) , ( [string] , models . IntegerField ( blank = True , default = [number] , editable = False ) ) , ] , options = { [string] : [string] , [string] : [string] , } , bases = ( wagtail . search . index . Indexed , models . Model ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django . conf import settings [EOL] from django . contrib . contenttypes . fields import GenericForeignKey [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db import models [EOL] [EOL] [EOL] class Flag ( models . Model ) : [EOL] STAFF = [string] [EOL] USER = [string] [EOL] FLAG_TYPES = { STAFF : [string] , USER : [string] , } [EOL] target_content_type = models . ForeignKey ( ContentType , on_delete = models . CASCADE ) [EOL] target_object_id = models . PositiveIntegerField ( ) [EOL] target = GenericForeignKey ( [string] , [string] ) [EOL] timestamp = models . DateTimeField ( auto_now_add = True ) [EOL] type = models . CharField ( choices = FLAG_TYPES . items ( ) , default = [string] , max_length = [number] , ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . PROTECT , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.flags.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.flags.models.Flag]$ 0 0 0 0 0 0 0 $typing.Type[hypha.apply.flags.models.Flag]$ 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.flags.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.flags.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def flagged_by ( submission , user ) : [EOL] return submission . flagged_by ( user ) [EOL] [EOL] [EOL] @ register . filter def flagged_staff ( submission ) : [EOL] return submission . flagged_staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class HomeConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
default_app_config = [string] [EOL]	0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
	0
[comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] def create_homepage ( apps , schema_editor ) : [EOL] [comment] [EOL] ContentType = apps . get_model ( [string] ) [EOL] Page = apps . get_model ( [string] ) [EOL] Site = apps . get_model ( [string] ) [EOL] ApplyHomePage = apps . get_model ( [string] ) [EOL] [EOL] [comment] [EOL] homepage_content_type , created = ContentType . objects . get_or_create ( model = [string] , app_label = [string] ) [EOL] [EOL] [comment] [EOL] applyhomepage = ApplyHomePage . objects . create ( title = [string] , draft_title = [string] , slug = [string] , content_type = homepage_content_type , path = [string] , depth = [number] , numchild = [number] , url_path = [string] , ) [EOL] [EOL] [comment] [EOL] Site . objects . create ( hostname = [string] , root_page = applyhomepage , is_default_site = False ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( create_homepage ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DashboardConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . core . exceptions import PermissionDenied [EOL] [EOL] from . utils import can_use_oauth_check [EOL] [EOL] [EOL] def require_oauth_whitelist ( view_func ) : [EOL] [docstring] [EOL] def decorated_view ( request , * args , ** kwargs ) : [EOL] if can_use_oauth_check ( request . user ) : [EOL] return view_func ( request , * args , ** kwargs ) [EOL] raise PermissionDenied [EOL] return decorated_view [EOL] [EOL] [EOL] def is_apply_staff ( user ) : [EOL] if not user . is_apply_staff : [EOL] raise PermissionDenied [EOL] return True [EOL] [EOL] [EOL] def is_approver ( user ) : [EOL] if not user . is_approver : [EOL] raise PermissionDenied [EOL] return True [EOL] [EOL] [EOL] staff_required = [ login_required , user_passes_test ( is_apply_staff ) ] [EOL] [EOL] approver_required = [ login_required , user_passes_test ( is_approver ) ] [EOL] [EOL] [EOL] def superuser_decorator ( fn ) : [EOL] check = user_passes_test ( lambda user : user . is_superuser ) [EOL] return check ( fn ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . conf . urls import url [EOL] from django . urls import reverse [EOL] from wagtail . core import hooks [EOL] [EOL] from hypha . apply . utils . notifications import slack_notify [EOL] [EOL] from . admin_views import index [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def register_admin_urls ( ) : [EOL] return [ url ( [string] , index , name = [string] ) , ] [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def notify_after_create_user ( request , user ) : [EOL] slack_notify ( message = f'{ request . user } [string] { user } [string] ' , request = request , related = user , path = reverse ( [string] , args = ( user . id , ) ) ) [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def notify_after_edit_user ( request , user ) : [EOL] roles = list ( user . groups . values_list ( [string] , flat = True ) ) [EOL] if user . is_superuser : [EOL] roles . append ( [string] ) [EOL] if roles : [EOL] roles = [string] . join ( roles ) [EOL] slack_notify ( message = f'{ request . user } [string] { user } [string] { roles } [string] ' , request = request , related = user , path = reverse ( [string] , args = ( user . id , ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import hypha [EOL] from django import forms [EOL] from django . contrib . auth import get_user_model [EOL] from django . utils . translation import gettext_lazy as _ [EOL] from django_select2 . forms import Select2Widget [EOL] from wagtail . users . forms import UserCreationForm , UserEditForm [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class CustomUserAdminFormBase ( ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( attrs = { [string] : [string] } ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( attrs = { [string] : [string] } ) [EOL] [EOL] [EOL] class CustomUserEditForm ( CustomUserAdminFormBase , UserEditForm ) : [EOL] pass [EOL] [EOL] [EOL] class CustomUserCreationForm ( CustomUserAdminFormBase , UserCreationForm ) : [EOL] pass [EOL] [EOL] [EOL] class ProfileForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] if not self . instance . is_apply_staff : [EOL] del self . fields [ [string] ] [EOL] [EOL] if not self . instance . has_usable_password ( ) : [EOL] [comment] [EOL] email_field = self . fields [ [string] ] [EOL] email_field . disabled = True [EOL] email_field . required = False [EOL] email_field . help_text = _ ( [string] ) [EOL] [EOL] def clean_slack ( self ) : [EOL] slack = self . cleaned_data [ [string] ] [EOL] if slack : [EOL] slack = slack . strip ( ) [EOL] if [string] in slack : [EOL] raise forms . ValidationError ( [string] ) [EOL] [EOL] if not slack . startswith ( [string] ) : [EOL] slack = [string] + slack [EOL] [EOL] return slack [EOL] [EOL] [EOL] class BecomeUserForm ( forms . Form ) : [EOL] user = forms . ModelChoiceField ( widget = Select2Widget , help_text = [string] , queryset = User . objects . filter ( is_active = True , is_superuser = False ) , label = [string] , required = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.forms.ProfileForm.Meta]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.forms.BecomeUserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . contrib . auth import views as auth_views [EOL] from django . urls import include , path , reverse_lazy [EOL] from two_factor . views import LoginView [EOL] [EOL] from hypha . apply . users . views import ( AccountView , ActivationView , become , create_password , oauth , ) [EOL] [EOL] app_name = [string] [EOL] [EOL] [EOL] public_urlpatterns = [ path ( [string] , LoginView . as_view ( template_name = [string] , redirect_authenticated_user = True ) , name = [string] ) , path ( [string] , auth_views . LogoutView . as_view ( next_page = [string] ) , name = [string] ) , ] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [ path ( [string] , AccountView . as_view ( ) , name = [string] ) , path ( [string] , become , name = [string] ) , path ( [string] , include ( [ path ( [string] , auth_views . PasswordChangeView . as_view ( template_name = [string] , success_url = reverse_lazy ( [string] ) ) , name = [string] , ) , path ( [string] , auth_views . PasswordResetView . as_view ( template_name = [string] , email_template_name = [string] , success_url = reverse_lazy ( [string] ) ) , name = [string] , ) , path ( [string] , auth_views . PasswordResetDoneView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetConfirmView . as_view ( template_name = [string] , post_reset_login = True , post_reset_login_backend = [string] , success_url = reverse_lazy ( [string] ) ) , name = [string] ) , path ( [string] , auth_views . PasswordResetCompleteView . as_view ( template_name = [string] ) , name = [string] ) , ] ) ) , path ( [string] , ActivationView . as_view ( ) , name = [string] ) , path ( [string] , create_password , name = [string] ) , path ( [string] , oauth , name = [string] ) , ] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Union , Dict [EOL] import typing [EOL] APPLICANT_GROUP_NAME = [string] [EOL] STAFF_GROUP_NAME = [string] [EOL] REVIEWER_GROUP_NAME = [string] [EOL] TEAMADMIN_GROUP_NAME = [string] [EOL] PARTNER_GROUP_NAME = [string] [EOL] COMMUNITY_REVIEWER_GROUP_NAME = [string] [EOL] APPROVER_GROUP_NAME = [string] [EOL] [EOL] GROUPS = [ { [string] : APPLICANT_GROUP_NAME , [string] : [ ] , } , { [string] : STAFF_GROUP_NAME , [string] : [ ] , } , { [string] : REVIEWER_GROUP_NAME , [string] : [ ] , } , { [string] : TEAMADMIN_GROUP_NAME , [string] : [ ] , } , { [string] : PARTNER_GROUP_NAME , [string] : [ ] , } , { [string] : COMMUNITY_REVIEWER_GROUP_NAME , [string] : [ ] , } , { [string] : APPROVER_GROUP_NAME , [string] : [ ] , } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.str]]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from social_core . exceptions import AuthForbidden [EOL] from social_django . middleware import ( SocialAuthExceptionMiddleware as _SocialAuthExceptionMiddleware , ) [EOL] [EOL] [EOL] class SocialAuthExceptionMiddleware ( _SocialAuthExceptionMiddleware ) : [EOL] [docstring] [EOL] def get_message ( self , request , exception ) : [EOL] if isinstance ( exception , AuthForbidden ) : [EOL] return [string] [EOL] [EOL] super ( ) . get_message ( request , exception ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . paginator import Paginator [EOL] from django . db . models import Q [EOL] from django . shortcuts import render [EOL] from django . utils . translation import gettext as _ [EOL] from django . views . decorators . vary import vary_on_headers [EOL] from wagtail . admin . auth import any_permission_required [EOL] from wagtail . admin . forms . search import SearchForm [EOL] from wagtail . core . compat import AUTH_USER_APP_LABEL , AUTH_USER_MODEL_NAME [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] add_user_perm = [string] . format ( AUTH_USER_APP_LABEL , AUTH_USER_MODEL_NAME . lower ( ) ) [EOL] change_user_perm = [string] . format ( AUTH_USER_APP_LABEL , AUTH_USER_MODEL_NAME . lower ( ) ) [EOL] delete_user_perm = [string] . format ( AUTH_USER_APP_LABEL , AUTH_USER_MODEL_NAME . lower ( ) ) [EOL] [EOL] [EOL] @ any_permission_required ( add_user_perm , change_user_perm , delete_user_perm ) @ vary_on_headers ( [string] ) def index ( request ) : [EOL] [docstring] [EOL] q = None [EOL] is_searching = False [EOL] [EOL] model_fields = [ f . name for f in User . _meta . get_fields ( ) ] [EOL] [EOL] if [string] in request . GET : [EOL] form = SearchForm ( request . GET , placeholder = _ ( [string] ) ) [EOL] if form . is_valid ( ) : [EOL] q = form . cleaned_data [ [string] ] [EOL] is_searching = True [EOL] conditions = Q ( ) [EOL] [EOL] for term in q . split ( ) : [EOL] if [string] in model_fields : [EOL] conditions |= Q ( username__icontains = term ) [EOL] [EOL] if [string] in model_fields : [EOL] conditions |= Q ( first_name__icontains = term ) [EOL] [EOL] if [string] in model_fields : [EOL] conditions |= Q ( last_name__icontains = term ) [EOL] [EOL] if [string] in model_fields : [EOL] conditions |= Q ( email__icontains = term ) [EOL] [EOL] [comment] [EOL] if [string] in model_fields : [EOL] conditions |= Q ( full_name__icontains = term ) [EOL] [EOL] users = User . objects . filter ( conditions ) [EOL] else : [EOL] form = SearchForm ( placeholder = _ ( [string] ) ) [EOL] [EOL] if not is_searching : [EOL] users = User . objects . all ( ) . order_by ( [string] , [string] ) [EOL] [EOL] if [string] in request . GET : [EOL] ordering = request . GET [ [string] ] [EOL] [EOL] if ordering == [string] : [EOL] users = users . order_by ( User . USERNAME_FIELD ) [EOL] elif ordering == [string] : [EOL] users = users . order_by ( [string] ) [EOL] else : [EOL] ordering = [string] [EOL] [EOL] paginator = Paginator ( users , per_page = [number] ) [EOL] users = paginator . get_page ( request . GET . get ( [string] ) ) [EOL] [EOL] if request . is_ajax ( ) : [EOL] return render ( request , [string] , { [string] : users , [string] : is_searching , [string] : q , [string] : ordering , } ) [EOL] else : [EOL] return render ( request , [string] , { [string] : form , [string] : users , [string] : is_searching , [string] : ordering , [string] : q , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib import messages [EOL] from django . contrib . auth import get_user_model , login , update_session_auth_hash [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . forms import AdminPasswordChangeForm [EOL] from django . contrib . auth . tokens import PasswordResetTokenGenerator [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . shortcuts import redirect , render [EOL] from django . template . response import TemplateResponse [EOL] from django . urls import reverse_lazy [EOL] from django . utils . decorators import method_decorator [EOL] from django . utils . encoding import force_str [EOL] from django . utils . http import urlsafe_base64_decode [EOL] from django . views . generic import UpdateView [EOL] from django . views . generic . base import TemplateView [EOL] from hijack . views import login_with_id [EOL] from wagtail . admin . views . account import password_management_enabled [EOL] [EOL] from . decorators import require_oauth_whitelist [EOL] from . forms import BecomeUserForm , ProfileForm [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] @ method_decorator ( login_required , name = [string] ) class AccountView ( UpdateView ) : [EOL] form_class = ProfileForm [EOL] template_name = [string] [EOL] [EOL] def get_object ( self ) : [EOL] return self . request . user [EOL] [EOL] def get_success_url ( self , ) : [EOL] return reverse_lazy ( [string] ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] if self . request . user . is_superuser : [EOL] swappable_form = BecomeUserForm ( ) [EOL] else : [EOL] swappable_form = None [EOL] [EOL] show_change_password = password_management_enabled ( ) and self . request . user . has_usable_password ( ) , [EOL] [EOL] return super ( ) . get_context_data ( swappable_form = swappable_form , show_change_password = show_change_password , ** kwargs , ) [EOL] [EOL] [EOL] @ login_required ( ) def become ( request ) : [EOL] if not request . user . is_apply_staff : [EOL] raise PermissionDenied ( ) [EOL] [EOL] id = request . POST . get ( [string] ) [EOL] if request . POST and id : [EOL] target_user = User . objects . get ( pk = id ) [EOL] if target_user . is_superuser : [EOL] raise PermissionDenied ( ) [EOL] [EOL] return login_with_id ( request , id ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ login_required ( ) @ require_oauth_whitelist def oauth ( request ) : [EOL] [docstring] [EOL] [EOL] return TemplateResponse ( request , [string] , { } ) [EOL] [EOL] [EOL] class ActivationView ( TemplateView ) : [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] user = self . get_user ( kwargs . get ( [string] ) ) [EOL] [EOL] if self . valid ( user , kwargs . get ( [string] ) ) : [EOL] user . backend = [string] [EOL] login ( request , user ) [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] def valid ( self , user , token ) : [EOL] [docstring] [EOL] [EOL] token_generator = PasswordResetTokenGenerator ( ) [EOL] return user is not None and token_generator . check_token ( user , token ) [EOL] [EOL] def get_user ( self , uidb64 ) : [EOL] [docstring] [EOL] try : [EOL] user = User . objects . get ( ** { [string] : force_str ( urlsafe_base64_decode ( uidb64 ) ) } ) [EOL] return user [EOL] except ( TypeError , ValueError , OverflowError , User . DoesNotExist ) : [EOL] return None [EOL] [EOL] [EOL] def create_password ( request ) : [EOL] [docstring] [EOL] [EOL] if request . method == [string] : [EOL] form = AdminPasswordChangeForm ( request . user , request . POST ) [EOL] if form . is_valid ( ) : [EOL] user = form . save ( ) [EOL] update_session_auth_hash ( request , user ) [comment] [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] else : [EOL] form = AdminPasswordChangeForm ( request . user ) [EOL] return render ( request , [string] , { [string] : form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.forms.ProfileForm]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 $typing.Tuple[typing.Any]$ 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth . tokens import PasswordResetTokenGenerator [EOL] from django . template . loader import render_to_string [EOL] from django . urls import reverse [EOL] from django . utils . encoding import force_bytes [EOL] from django . utils . http import urlsafe_base64_encode [EOL] [EOL] [EOL] def can_use_oauth_check ( user ) : [EOL] [docstring] [EOL] try : [EOL] domain = user . email . split ( [string] ) [ - [number] ] [EOL] return domain in settings . SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS [EOL] except AttributeError : [EOL] [comment] [EOL] pass [EOL] return False [EOL] [EOL] [EOL] def send_activation_email ( user , site = None ) : [EOL] [docstring] [EOL] token_generator = PasswordResetTokenGenerator ( ) [EOL] token = token_generator . make_token ( user ) [EOL] [EOL] uid = urlsafe_base64_encode ( force_bytes ( user . pk ) ) [EOL] [EOL] activation_path = reverse ( [string] , kwargs = { [string] : uid , [string] : token } ) [EOL] [EOL] context = { [string] : user , [string] : user . get_full_name ( ) , [string] : user . get_username ( ) , [string] : activation_path , [string] : settings . PASSWORD_RESET_TIMEOUT_DAYS , [string] : settings . ORG_LONG_NAME , } [EOL] [EOL] if site : [EOL] context . update ( site = site ) [EOL] [EOL] subject = [string] . format ( ** context ) [EOL] [comment] [EOL] subject = [string] . join ( subject . splitlines ( ) ) [EOL] message = render_to_string ( [string] , context ) [EOL] user . email_user ( subject , message , settings . DEFAULT_FROM_EMAIL ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import Group [EOL] [EOL] from hypha . apply . users . groups import STAFF_GROUP_NAME [EOL] [EOL] [EOL] def make_otf_staff ( backend , user , response , * args , ** kwargs ) : [EOL] _ , email_domain = user . email . split ( [string] ) [EOL] if email_domain in settings . STAFF_EMAIL_DOMAINS : [EOL] staff_group = Group . objects . get ( name = STAFF_GROUP_NAME ) [EOL] user . groups . add ( staff_group ) [EOL] [comment] [EOL] user . is_staff = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . core . management . sql import emit_post_migrate_signal [EOL] from django . db import migrations [EOL] [EOL] from hypha . apply . users . groups import GROUPS , TEAMADMIN_GROUP_NAME , PARTNER_GROUP_NAME [EOL] [EOL] [EOL] def add_groups ( apps , schema_editor ) : [EOL] [comment] [EOL] db_alias = schema_editor . connection . alias [EOL] emit_post_migrate_signal ( [number] , False , db_alias ) [EOL] [EOL] Group = apps . get_model ( [string] ) [EOL] Permission = apps . get_model ( [string] ) [EOL] [EOL] for group_data in GROUPS : [EOL] group , created = Group . objects . get_or_create ( name = group_data [ [string] ] ) [EOL] for permission in group_data [ [string] ] : [EOL] try : [EOL] group . permissions . add ( Permission . objects . get ( codename = permission ) ) [EOL] except ObjectDoesNotExist : [EOL] print ( [string] % permission ) [EOL] [EOL] [EOL] def remove_groups ( apps , schema_editor ) : [EOL] Group = apps . get_model ( [string] ) [EOL] Group . objects . filter ( name__in = [ TEAMADMIN_GROUP_NAME , PARTNER_GROUP_NAME ] ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( add_groups , remove_groups ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from django . contrib . auth . models import Group , Permission [EOL] from django . db import migrations [EOL] [EOL] from hypha . apply . users . groups import STAFF_GROUP_NAME [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] def add_permissions ( apps , schema_editor ) : [EOL] staff_group = Group . objects . get ( name = STAFF_GROUP_NAME ) [EOL] staff_add_perm = Permission . objects . get ( name = [string] ) [EOL] staff_group . permissions . add ( staff_add_perm ) [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( add_permissions ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . models import Group [EOL] from django . db import migrations [EOL] [EOL] from hypha . apply . users . groups import APPLICANT_GROUP_NAME [EOL] [EOL] [EOL] def set_group ( apps , schema_editor ) : [EOL] User = get_user_model ( ) [EOL] applicant_group = Group . objects . get ( name = APPLICANT_GROUP_NAME ) [EOL] applicants = User . objects . exclude ( applicationsubmission = None ) [EOL] for user in applicants : [EOL] if not user . is_apply_staff : [EOL] user . groups . add ( applicant_group ) [EOL] user . save ( ) [EOL] [EOL] [EOL] def unset_group ( apps , schema_editor ) : [EOL] User = get_user_model ( ) [EOL] applicant_group = Group . objects . get ( name = APPLICANT_GROUP_NAME ) [EOL] applicants = User . objects . filter ( groups__name = APPLICANT_GROUP_NAME ) . all ( ) [EOL] for user in applicants : [EOL] user . groups . remove ( applicant_group ) [EOL] user . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( set_group , unset_group ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] import hypha . apply . users . models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelManagers ( name = [string] , managers = [ ( [string] , hypha . apply . users . models . UserManager ( ) ) , ] , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . EmailField ( max_length = [number] , unique = True , verbose_name = [string] ) , ) , migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase , override_settings [EOL] from django . urls import reverse [EOL] [EOL] [EOL] @ override_settings ( ROOT_URLCONF = [string] ) class TestOAuthAccess ( TestCase ) : [EOL] def login ( self ) : [EOL] email = [string] [EOL] password = [string] [EOL] user = get_user_model ( ) . objects . create_user ( email = email , password = password ) [EOL] logged_in = self . client . login ( email = email , password = password ) [EOL] self . assertTrue ( logged_in ) [EOL] return user [EOL] [EOL] def test_oauth_page_requires_login ( self ) : [EOL] [docstring] [EOL] oauth_page = reverse ( [string] ) [EOL] response = self . client . get ( oauth_page , follow = True ) [EOL] self . assertRedirects ( response , reverse ( [string] ) + [string] + reverse ( [string] ) , status_code = [number] , target_status_code = [number] , ) [EOL] [EOL] @ override_settings ( ) def test_oauth_not_set_up ( self ) : [EOL] del settings . SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS [EOL] [EOL] self . login ( ) [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_oauth_user_email_not_whitelisted ( self ) : [EOL] self . login ( ) [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] @ override_settings ( SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = [ [string] ] ) def test_oauth_whitelisted_user_can_see_link_to_oauth_settings_page ( self ) : [EOL] self . login ( ) [EOL] [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertNotContains ( response , [string] ) [EOL] [EOL] @ override_settings ( SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = [ [string] ] ) def test_oauth_whitelisted_user_can_access_oauth_settings_page ( self ) : [EOL] [docstring] [EOL] self . login ( ) [EOL] [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertContains ( response , [string] ) [EOL] self . assertNotContains ( response , [string] ) [EOL] [EOL] self . assertTemplateUsed ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import hypha [EOL] from django . forms . models import model_to_dict [EOL] from django . test import TestCase [EOL] [EOL] from . . forms import ProfileForm [EOL] from . factories import StaffFactory , UserFactory [EOL] [EOL] [EOL] class BaseTestProfileForm ( TestCase ) : [EOL] def form_data ( self , user , ** values ) : [EOL] fields = ProfileForm . Meta . fields [EOL] data = model_to_dict ( user , fields ) [EOL] data . update ( ** values ) [EOL] return data [EOL] [EOL] def submit_form ( self , instance , ** extra_data ) : [EOL] form = ProfileForm ( instance = instance , data = self . form_data ( instance , ** extra_data ) ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] [EOL] return form [EOL] [EOL] [EOL] class TestProfileForm ( BaseTestProfileForm ) : [EOL] def setUp ( self ) : [EOL] self . user = UserFactory ( ) [EOL] [EOL] def test_email_unique ( self ) : [EOL] other_user = UserFactory ( ) [EOL] form = self . submit_form ( self . user , email = other_user . email ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . user . refresh_from_db ( ) [EOL] self . assertNotEqual ( self . user . email , other_user . email ) [EOL] [EOL] def test_can_change_email ( self ) : [EOL] new_email = [string] [EOL] self . submit_form ( self . user , email = new_email ) [EOL] self . user . refresh_from_db ( ) [EOL] self . assertEqual ( self . user . email , new_email ) [EOL] [EOL] def test_cant_set_slack_name ( self ) : [EOL] slack_name = [string] [EOL] self . submit_form ( self . user , slack = slack_name ) [EOL] self . user . refresh_from_db ( ) [EOL] self . assertNotEqual ( self . user . slack , slack_name ) [EOL] [EOL] [EOL] class TestStaffProfileForm ( BaseTestProfileForm ) : [EOL] def setUp ( self ) : [EOL] self . staff = StaffFactory ( ) [EOL] [EOL] def test_cant_change_email ( self ) : [EOL] new_email = [string] [EOL] self . submit_form ( self . staff , email = new_email ) [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertNotEqual ( new_email , self . staff . email ) [EOL] [EOL] def test_can_set_slack_name ( self ) : [EOL] slack_name = [string] [EOL] self . submit_form ( self . staff , slack = slack_name ) [EOL] [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertEqual ( self . staff . slack , slack_name ) [EOL] [EOL] def test_can_set_slack_name_with_trailing_space ( self ) : [EOL] slack_name = [string] [EOL] self . submit_form ( self . staff , slack = slack_name ) [EOL] [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertEqual ( self . staff . slack , slack_name ) [EOL] [EOL] def test_cant_set_slack_name_with_space ( self ) : [EOL] slack_name = [string] [EOL] form = self . submit_form ( self . staff , slack = slack_name ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertNotEqual ( self . staff . slack , slack_name ) [EOL] [EOL] def test_auto_prepend_at ( self ) : [EOL] slack_name = [string] [EOL] self . submit_form ( self . staff , slack = slack_name ) [EOL] [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertEqual ( self . staff . slack , [string] + slack_name ) [EOL] [EOL] def test_can_clear_slack_name ( self ) : [EOL] slack_name = [string] [EOL] self . submit_form ( self . staff , slack = slack_name ) [EOL] [EOL] self . staff . refresh_from_db ( ) [EOL] self . assertEqual ( self . staff . slack , slack_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.users.forms.ProfileForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.users.forms.ProfileForm$ 0 0 0 0 0 0 $hypha.apply.users.forms.ProfileForm$ 0 0 0 0 0 0 0 $hypha.apply.users.forms.ProfileForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.users.tests.factories.UserFactory$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.users.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.users.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0
from django . core import mail [EOL] from django . test import TestCase , override_settings [EOL] [EOL] from hypha . apply . users . tests . factories import UserFactory [EOL] [EOL] from . . utils import send_activation_email [EOL] [EOL] [EOL] @ override_settings ( ROOT_URLCONF = [string] ) class TestActivationEmail ( TestCase ) : [EOL] def test_activation_email_includes_link ( self ) : [EOL] send_activation_email ( UserFactory ( ) ) [EOL] self . assertEqual ( len ( mail . outbox ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Type [EOL] import typing [EOL] import hypha [EOL] import uuid [EOL] [EOL] import factory [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . models import Group [EOL] from django . utils . text import slugify [EOL] [EOL] from . . groups import ( APPLICANT_GROUP_NAME , APPROVER_GROUP_NAME , COMMUNITY_REVIEWER_GROUP_NAME , PARTNER_GROUP_NAME , REVIEWER_GROUP_NAME , STAFF_GROUP_NAME , ) [EOL] [EOL] [EOL] class GroupFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = Group [EOL] django_get_or_create = ( [string] , ) [EOL] [EOL] name = factory . Sequence ( [string] . format ) [EOL] [EOL] [EOL] class UserFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = get_user_model ( ) [EOL] [EOL] email = factory . LazyAttribute ( lambda o : [string] . format ( slugify ( o . full_name ) , uuid . uuid4 ( ) ) ) [EOL] full_name = factory . Faker ( [string] ) [EOL] password = factory . PostGenerationMethodCall ( [string] , [string] ) [EOL] [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] if not extracted : [EOL] groups = GroupFactory ( ** kwargs ) [EOL] else : [EOL] groups = extracted [EOL] [EOL] self . groups . add ( groups ) [EOL] [EOL] [EOL] class OAuthUserFactory ( UserFactory ) : [EOL] password = factory . PostGenerationMethodCall ( [string] ) [EOL] [EOL] [EOL] class AdminFactory ( UserFactory ) : [EOL] is_admin = True [EOL] [EOL] [EOL] class StaffFactory ( OAuthUserFactory ) : [EOL] class Meta : [EOL] exclude = ( [string] , ) [EOL] is_staff = True [EOL] [EOL] [comment] [EOL] slack_temp = factory . Faker ( [string] ) [EOL] [EOL] slack = factory . LazyAttribute ( lambda p : [string] . format ( p . slack_temp ) ) [EOL] [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = STAFF_GROUP_NAME ) ) [EOL] [EOL] [EOL] class ApproverFactory ( StaffFactory ) : [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = STAFF_GROUP_NAME ) , GroupFactory ( name = APPROVER_GROUP_NAME ) , ) [EOL] [EOL] [EOL] class SuperUserFactory ( StaffFactory ) : [EOL] is_superuser = True [EOL] [EOL] [EOL] class ReviewerFactory ( UserFactory ) : [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = REVIEWER_GROUP_NAME ) ) [EOL] [EOL] [EOL] class ApplicantFactory ( UserFactory ) : [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = APPLICANT_GROUP_NAME ) ) [EOL] [EOL] [EOL] class CommunityReviewerFactory ( UserFactory ) : [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = COMMUNITY_REVIEWER_GROUP_NAME ) ) [EOL] [EOL] [EOL] class PartnerFactory ( UserFactory ) : [EOL] @ factory . post_generation def groups ( self , create , extracted , ** kwargs ) : [EOL] if create : [EOL] self . groups . add ( GroupFactory ( name = PARTNER_GROUP_NAME ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.GroupFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory.Meta]$ 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.OAuthUserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.StaffFactory]$ 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.StaffFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.users.tests.factories.StaffFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from datetime import timedelta [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] onehundredfifty_days_ago = timezone . now ( ) - timedelta ( days = [number] ) [EOL] User = get_user_model ( ) [EOL] users_inactivate = User . objects . filter ( date_joined__date__lte = onehundredfifty_days_ago , is_active = True , is_staff = False , last_login__isnull = True ) [EOL] [EOL] for user in users_inactivate : [EOL] user . is_active = False [EOL] user . save ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Literal , Dict , Any , Union , Optional , Type [EOL] import typing [EOL] import hypha [EOL] import typing_extensions [EOL] import argparse [EOL] import json [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . models import Group [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from hypha . apply . users . groups import STAFF_GROUP_NAME [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] groups = Group . objects . all ( ) [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] with options [ [string] ] as json_data : [EOL] User = get_user_model ( ) [EOL] users = json . load ( json_data ) [EOL] [EOL] for uid in users : [EOL] user = users [ uid ] [EOL] [EOL] full_name = self . get_full_name ( user ) [EOL] slack_name = self . get_slack_name ( user ) [EOL] user_object , created = User . objects . get_or_create ( email = self . get_email ( user , options [ [string] ] ) , defaults = { [string] : full_name , [string] : slack_name , [string] : uid , } ) [EOL] [EOL] operation = [string] if created else [string] [EOL] [EOL] groups = self . get_user_groups ( user ) [EOL] user_object . groups . set ( groups ) [EOL] [EOL] [comment] [EOL] if not created : [EOL] user_object . slack = slack_name [EOL] [EOL] [comment] [EOL] user_object . drupal_id = uid [EOL] user_object . save ( ) [EOL] [EOL] self . stdout . write ( f"{ operation } [string] { uid } [string] { full_name } [string] " ) [EOL] [EOL] def get_full_name ( self , user ) : [EOL] full_name = user . get ( [string] , None ) [EOL] try : [EOL] full_name = full_name [ [string] ] [EOL] except ( KeyError , TypeError ) : [EOL] full_name = user [ [string] ] [EOL] [EOL] return full_name [EOL] [EOL] def get_slack_name ( self , user ) : [EOL] slack_name = user . get ( [string] , None ) [EOL] try : [EOL] slack_name = f" [string] { slack_name [ [string] ] }" [EOL] except ( KeyError , TypeError ) : [EOL] slack_name = [string] [EOL] [EOL] return slack_name [EOL] [EOL] def get_user_groups ( self , user ) : [EOL] groups = [ ] [EOL] role_map = { [string] : [string] , } [EOL] [EOL] if self . is_staff ( user [ [string] ] ) : [EOL] groups . append ( self . groups . filter ( name = STAFF_GROUP_NAME ) . first ( ) ) [EOL] [EOL] roles = [ role for role in user . get ( [string] ) . values ( ) if role != [string] ] [EOL] [EOL] for role in roles : [EOL] group_name = role_map . get ( role ) [EOL] if group_name : [EOL] groups . append ( self . groups . filter ( name = group_name ) . first ( ) ) [EOL] [EOL] return groups [EOL] [EOL] def get_email ( self , user , anonymize = False ) : [EOL] email = user [ [string] ] [EOL] if not anonymize or self . is_staff ( email ) : [EOL] return email [EOL] [EOL] return f" [string] { user [ [string] ] } [string] " [EOL] [EOL] def is_staff ( self , email ) : [EOL] _ , email_domain = email . split ( [string] ) [EOL] return email_domain in settings . STAFF_EMAIL_DOMAINS [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[hypha.apply.users.management.commands.migrate_users.Command]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Optional[builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] from . . utils import can_use_oauth_check [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def backend_name ( name ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , } . get ( name , name ) [EOL] [EOL] [EOL] @ register . filter def backend_class ( backend ) : [EOL] return backend . replace ( [string] , [string] ) [EOL] [EOL] [EOL] @ register . simple_tag ( takes_context = True ) def can_use_oauth ( context ) : [EOL] user = context . get ( [string] ) [EOL] [EOL] return can_use_oauth_check ( user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
default_app_config = [string] [EOL]	0 0 0 0
from enum import Enum [EOL] [EOL] [EOL] class MESSAGES ( Enum ) : [EOL] UPDATE_LEAD = [string] [EOL] BATCH_UPDATE_LEAD = [string] [EOL] EDIT = [string] [EOL] APPLICANT_EDIT = [string] [EOL] NEW_SUBMISSION = [string] [EOL] SCREENING = [string] [EOL] TRANSITION = [string] [EOL] BATCH_TRANSITION = [string] [EOL] DETERMINATION_OUTCOME = [string] [EOL] BATCH_DETERMINATION_OUTCOME = [string] [EOL] INVITED_TO_PROPOSAL = [string] [EOL] REVIEWERS_UPDATED = [string] [EOL] BATCH_REVIEWERS_UPDATED = [string] [EOL] PARTNERS_UPDATED = [string] [EOL] PARTNERS_UPDATED_PARTNER = [string] [EOL] READY_FOR_REVIEW = [string] [EOL] BATCH_READY_FOR_REVIEW = [string] [EOL] NEW_REVIEW = [string] [EOL] COMMENT = [string] [EOL] PROPOSAL_SUBMITTED = [string] [EOL] OPENED_SEALED = [string] [EOL] REVIEW_OPINION = [string] [EOL] DELETE_SUBMISSION = [string] [EOL] DELETE_REVIEW = [string] [EOL] CREATED_PROJECT = [string] [EOL] UPDATE_PROJECT_LEAD = [string] [EOL] EDIT_REVIEW = [string] [EOL] SEND_FOR_APPROVAL = [string] [EOL] APPROVE_PROJECT = [string] [EOL] PROJECT_TRANSITION = [string] [EOL] REQUEST_PROJECT_CHANGE = [string] [EOL] UPLOAD_DOCUMENT = [string] [EOL] REMOVE_DOCUMENT = [string] [EOL] UPLOAD_CONTRACT = [string] [EOL] APPROVE_CONTRACT = [string] [EOL] REQUEST_PAYMENT = [string] [EOL] UPDATE_PAYMENT_REQUEST_STATUS = [string] [EOL] DELETE_PAYMENT_REQUEST = [string] [EOL] SENT_TO_COMPLIANCE = [string] [EOL] UPDATE_PAYMENT_REQUEST = [string] [EOL] SUBMIT_REPORT = [string] [EOL] SKIPPED_REPORT = [string] [EOL] REPORT_FREQUENCY_CHANGED = [string] [EOL] REPORT_NOTIFY = [string] [EOL] CREATE_REMINDER = [string] [EOL] DELETE_REMINDER = [string] [EOL] REVIEW_REMINDER = [string] [EOL] BATCH_DELETE_SUBMISSION = [string] [EOL] [EOL] @ classmethod def choices ( cls ) : [EOL] return [ ( choice . name , choice . value ) for choice in cls ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] app_name = [string] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [EOL] from django . db import migrations [EOL] from django . db . models import F [EOL] [EOL] [EOL] def submission_to_source ( apps , schema_editor ) : [EOL] Activity = apps . get_model ( [string] , [string] ) [EOL] if Activity . objects . exists ( ) : [EOL] ContentType = apps . get_model ( [string] , [string] ) [EOL] content_type = ContentType . objects . get ( model = [string] , app_label = [string] ) [EOL] Activity . objects . update ( source_object_id = F ( [string] ) , source_content_type = content_type , ) [EOL] [EOL] [EOL] def source_to_submission ( apps , schema_editor ) : [EOL] Activity = apps . get_model ( [string] , [string] ) [EOL] Activity . objects . update ( submission_id = F ( [string] ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( submission_to_source , source_to_submission ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations [EOL] from django . db . models import F [EOL] [EOL] [EOL] def submission_to_source ( apps , schema_editor ) : [EOL] Event = apps . get_model ( [string] , [string] ) [EOL] if Event . objects . exists ( ) : [EOL] ContentType = apps . get_model ( [string] , [string] ) [EOL] content_type = ContentType . objects . get ( model = [string] , app_label = [string] ) [EOL] Event . objects . update ( object_id = F ( [string] ) , content_type = content_type , ) [EOL] [EOL] [EOL] def source_to_submission ( apps , schema_editor ) : [EOL] Event = apps . get_model ( [string] , [string] ) [EOL] Event . objects . update ( submission_id = F ( [string] ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( submission_to_source , source_to_submission ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DeterminationsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . IntegerField ( choices = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] , default = [number] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . RichTextField ( verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( ) ) , ( [string] , models . IntegerField ( choices = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] , default = [number] , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( default = False , verbose_name = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . PROTECT , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . OneToOneField ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ] , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( verbose_name = [string] ) ) , ( [string] , models . OneToOneField ( editable = False , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : [string] , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
from rest_framework import pagination [EOL] [EOL] [EOL] class StandardResultsSetPagination ( pagination . PageNumberPagination ) : [EOL] page_size_query_param = [string] [EOL] max_page_size = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsAuthor ( permissions . BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj . user == request . user [EOL] [EOL] [EOL] class IsApplyStaffUser ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return request . user . is_apply_staff [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return request . user . is_apply_staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib . auth . models import Permission [EOL] from wagtail . core import hooks [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def register_permissions ( ) : [EOL] return Permission . objects . filter ( content_type__app_label = [string] , codename__in = [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wagtail . contrib . modeladmin . helpers import PageButtonHelper [EOL] [EOL] [EOL] class ButtonsWithClone ( PageButtonHelper ) : [EOL] def clone_button ( self , obj , classnames_add , classnames_exclude ) : [EOL] classnames = self . copy_button_classnames + classnames_add [EOL] cn = self . finalise_classname ( classnames , classnames_exclude ) [EOL] return { [string] : self . url_helper . get_action_url ( [string] , instance_pk = obj . pk ) , [string] : [string] , [string] : cn , [string] : [string] % self . verbose_name , } [EOL] [EOL] def get_buttons_for_obj ( self , obj , exclude = list ( ) , classnames_add = list ( ) , classnames_exclude = list ( ) ) : [EOL] btns = super ( ) . get_buttons_for_obj ( obj , exclude , classnames_add , classnames_exclude ) [EOL] [EOL] [comment] [EOL] btns . insert ( - [number] , self . clone_button ( obj , classnames_add , classnames_exclude ) ) [EOL] [EOL] return btns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Literal , Dict , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] NA = [number] [EOL] [EOL] RATE_CHOICES = ( ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( NA , [string] ) , ) [EOL] [EOL] RATE_CHOICES_DICT = dict ( RATE_CHOICES ) [EOL] RATE_CHOICE_NA = RATE_CHOICES_DICT [ NA ] [EOL] [EOL] NO = [number] [EOL] MAYBE = [number] [EOL] YES = [number] [EOL] [EOL] RECOMMENDATION_CHOICES = ( ( NO , [string] ) , ( MAYBE , [string] ) , ( YES , [string] ) , ) [EOL] [EOL] DISAGREE = [number] [EOL] AGREE = [number] [EOL] [EOL] OPINION_CHOICES = ( ( AGREE , [string] ) , ( DISAGREE , [string] ) , ) [EOL] [EOL] PRIVATE = [string] [EOL] REVIEWER = [string] [EOL] [EOL] VISIBILILTY_HELP_TEXT = { PRIVATE : [string] , REVIEWER : [string] , } [EOL] [EOL] VISIBILITY = { PRIVATE : [string] , REVIEWER : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0
	0
from typing import List , Any , Tuple , Type [EOL] import typing [EOL] import hypha [EOL] from django import forms [EOL] from django . forms import widgets [EOL] from django . utils . safestring import mark_safe [EOL] from tinymce import TinyMCE [EOL] [EOL] from hypha . apply . review . options import NA , RATE_CHOICES [EOL] from hypha . apply . utils . options import MCE_ATTRIBUTES_SHORT [EOL] [EOL] [EOL] class ScoredAnswerWidget ( forms . MultiWidget ) : [EOL] def __init__ ( self , attrs = None ) : [EOL] _widgets = ( TinyMCE ( attrs = attrs , mce_attrs = MCE_ATTRIBUTES_SHORT ) , widgets . Select ( attrs = attrs , choices = RATE_CHOICES ) , ) [EOL] super ( ) . __init__ ( _widgets , attrs ) [EOL] [EOL] def decompress ( self , value ) : [EOL] [comment] [EOL] if value : [EOL] return value [EOL] return [ None , None ] [EOL] [EOL] def render ( self , name , value , attrs = None , renderer = None ) : [EOL] context = self . get_context ( name , value , attrs ) [EOL] rendered = [ ] [EOL] [comment] [EOL] [comment] [EOL] for kwargs , widget in zip ( context [ [string] ] [ [string] ] , self . widgets ) : [EOL] name = kwargs [ [string] ] [EOL] value = kwargs [ [string] ] [EOL] attrs = kwargs [ [string] ] [EOL] rendered . append ( widget . render ( name , value , attrs , renderer ) ) [EOL] return mark_safe ( [string] . join ( [ widget for widget in rendered ] ) ) [EOL] [EOL] [EOL] class ScoredAnswerField ( forms . MultiValueField ) : [EOL] widget = ScoredAnswerWidget [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] fields = ( forms . CharField ( ) , forms . ChoiceField ( choices = RATE_CHOICES ) , ) [EOL] [EOL] super ( ) . __init__ ( fields = fields , * args , ** kwargs ) [EOL] [EOL] def compress ( self , data_list ) : [EOL] if data_list : [EOL] return [ data_list [ [number] ] , int ( data_list [ [number] ] ) ] [EOL] else : [EOL] return [ [string] , NA ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.review.fields.ScoredAnswerWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ReviewConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] import uuid [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import connection , transaction [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] with connection . cursor ( ) as cursor : [EOL] cursor . execute ( [string] ) [EOL] form_fields = cursor . fetchall ( ) [EOL] [EOL] for row in form_fields : [EOL] review_id , review_form = row [EOL] form = json . loads ( review_form ) [EOL] updated = False [EOL] for field in form : [EOL] if field [ [string] ] == [string] : [EOL] field [ [string] ] = str ( uuid . uuid4 ( ) ) [EOL] updated = True [EOL] [EOL] if updated : [EOL] updated_form = json . dumps ( form ) [EOL] with connection . cursor ( ) as cursor : [EOL] cursor . execute ( [string] , [ updated_form , review_id ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StreamFormsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . conf import settings [EOL] from django . contrib . staticfiles . templatetags . staticfiles import static [EOL] from django . core . validators import FileExtensionValidator [EOL] from django . forms import FileField , Media [EOL] from django . utils . functional import cached_property [EOL] from django_file_form . forms import MultipleUploadedFileField , UploadedFileField [EOL] from django_file_form . widgets import UploadMultipleWidget , UploadWidget [EOL] [EOL] [EOL] class FileFieldWidgetMixin : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ cached_property def media ( self ) : [EOL] return Media ( css = { [string] : [ static ( [string] ) , ] } , js = [ static ( [string] ) , static ( [string] ) , ] , ) [EOL] [EOL] [EOL] class MultiFileFieldWidget ( FileFieldWidgetMixin , UploadMultipleWidget ) : [EOL] pass [EOL] [EOL] [EOL] class MultiFileField ( MultipleUploadedFileField ) : [EOL] widget = MultiFileFieldWidget [EOL] [EOL] def clean ( self , value , initial ) : [EOL] old_files = [ file for file in value if hasattr ( file , [string] ) and file . is_placeholder ] [EOL] new_files = [ file for file in value if hasattr ( file , [string] ) and not file . is_placeholder ] [EOL] if not new_files and initial and len ( old_files ) == len ( initial ) : [EOL] return initial [EOL] [EOL] files = [ FileField ( validators = [ FileExtensionValidator ( allowed_extensions = settings . FILE_ALLOWED_EXTENSIONS ) ] ) . clean ( file , initial ) for file in value ] [EOL] [EOL] return files [EOL] [EOL] def widget_attrs ( self , widget ) : [EOL] attrs = super ( ) . widget_attrs ( widget ) [EOL] if isinstance ( widget , MultiFileFieldWidget ) and [string] not in widget . attrs : [EOL] attrs . setdefault ( [string] , settings . FILE_ACCEPT_ATTR_VALUE ) [EOL] return attrs [EOL] [EOL] [EOL] class SingleFileFieldWidget ( FileFieldWidgetMixin , UploadWidget ) : [EOL] pass [EOL] [EOL] [EOL] class SingleFileField ( UploadedFileField ) : [EOL] widget = SingleFileFieldWidget [EOL] [EOL] def clean ( self , value , initial ) : [EOL] if not value : [EOL] return [EOL] if hasattr ( value , [string] ) and value . is_placeholder and initial : [EOL] return initial [EOL] validator = FileExtensionValidator ( allowed_extensions = settings . FILE_ALLOWED_EXTENSIONS ) [EOL] file = FileField ( validators = [ validator ] ) . clean ( value , initial ) [EOL] return file [EOL] [EOL] def widget_attrs ( self , widget ) : [EOL] attrs = super ( ) . widget_attrs ( widget ) [EOL] if isinstance ( widget , SingleFileFieldWidget ) and [string] not in widget . attrs : [EOL] attrs . setdefault ( [string] , settings . FILE_ACCEPT_ATTR_VALUE ) [EOL] return attrs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.stream_forms.fields.MultiFileFieldWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.stream_forms.fields.SingleFileFieldWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . files . base import File [EOL] from django . core . files . storage import default_storage [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] [EOL] [EOL] class StreamFieldDataEncoder ( DjangoJSONEncoder ) : [EOL] def default ( self , o ) : [EOL] if isinstance ( o , StreamFieldFile ) : [EOL] return { [string] : o . name , [string] : o . filename , } [EOL] return super ( ) . default ( o ) [EOL] [EOL] [EOL] class StreamFieldFile ( File ) : [EOL] [docstring] [EOL] def __init__ ( self , instance , field , * args , filename = None , storage = default_storage , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [comment] [EOL] self . field = field [EOL] [comment] [EOL] self . instance = instance [EOL] self . storage = storage [EOL] self . filename = filename or self . basename [EOL] self . _committed = False [EOL] [EOL] def __str__ ( self ) : [EOL] return self . filename [EOL] [EOL] @ property def basename ( self ) : [EOL] return os . path . basename ( self . name ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , File ) : [EOL] return self . filename == other . filename and self . size == other . size [EOL] [comment] [EOL] [comment] [EOL] return other . __eq__ ( self ) [EOL] [EOL] def _get_file ( self ) : [EOL] if getattr ( self , [string] , None ) is None : [EOL] self . _file = self . storage . open ( self . name , [string] ) [EOL] return self . _file [EOL] [EOL] def _set_file ( self , file ) : [EOL] self . _file = file [EOL] [EOL] def _del_file ( self ) : [EOL] del self . _file [EOL] [EOL] file = property ( _get_file , _set_file , _del_file ) [EOL] [EOL] def read ( self , chunk_size = None ) : [EOL] self . file . seek ( [number] ) [EOL] if chunk_size : [EOL] return super ( ) . read ( chunk_size ) [EOL] else : [EOL] return super ( ) . read ( ) [EOL] [EOL] @ property def path ( self ) : [EOL] return self . storage . path ( self . name ) [EOL] [EOL] @ property def url ( self ) : [EOL] return self . storage . url ( self . name ) [EOL] [EOL] @ property def size ( self ) : [EOL] if not self . _committed : [EOL] return self . file . size [EOL] return self . storage . size ( self . name ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . url , [string] : self . filename , } [EOL] [EOL] def open ( self , mode = [string] ) : [EOL] if getattr ( self , [string] , None ) is None : [EOL] self . file = self . storage . open ( self . name , mode ) [EOL] else : [EOL] self . file . open ( mode ) [EOL] return self [EOL] [EOL] def generate_filename ( self ) : [EOL] return self . name [EOL] [EOL] def save ( self ) : [EOL] name = self . generate_filename ( ) [EOL] name = self . storage . generate_filename ( name ) [EOL] if not self . _committed : [EOL] self . name = self . storage . save ( name , self . file ) [EOL] self . _committed = True [EOL] [EOL] def delete ( self , save = True ) : [EOL] if not self : [EOL] return [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( self , [string] ) : [EOL] self . close ( ) [EOL] del self . file [EOL] [EOL] self . storage . delete ( self . name ) [EOL] [EOL] self . name = None [EOL] self . _committed = False [EOL] [EOL] @ property def closed ( self ) : [EOL] file = getattr ( self , [string] , None ) [EOL] return file is None or file . closed [EOL] [EOL] def close ( self ) : [EOL] file = getattr ( self , [string] , None ) [EOL] if file is not None : [EOL] file . close ( ) [EOL] [EOL] [comment] [EOL] is_placeholder = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
	0
from typing import Dict , Any [EOL] import typing [EOL] import hypha [EOL] from urllib . parse import urlencode [EOL] [EOL] from django import forms [EOL] from django . contrib import admin [EOL] from django . urls import reverse [EOL] from django . utils . functional import cached_property [EOL] from django . utils . translation import gettext_lazy as _ [EOL] from wagtail . contrib . modeladmin . forms import ParentChooserForm [EOL] from wagtail . contrib . modeladmin . helpers import ( ButtonHelper , PageAdminURLHelper , PageButtonHelper , ) [EOL] from wagtail . contrib . modeladmin . views import ChooseParentView [EOL] from wagtail . core . models import Page [EOL] [EOL] [EOL] class VerboseLabelModelChoiceField ( forms . ModelChoiceField ) : [EOL] def label_from_instance ( str , obj ) : [EOL] return [string] . format ( obj . _meta . verbose_name , obj . title ) [EOL] [EOL] [EOL] class FundChooserForm ( ParentChooserForm ) : [EOL] [docstring] [EOL] parent_page = VerboseLabelModelChoiceField ( label = _ ( [string] ) , required = True , empty_label = None , queryset = Page . objects . none ( ) , widget = forms . RadioSelect ( ) , ) [EOL] [EOL] [EOL] class RoundFundChooserView ( ChooseParentView ) : [EOL] def get_form ( self , request ) : [EOL] parents = self . permission_helper . get_valid_parent_pages ( request . user ) . specific ( ) [EOL] return FundChooserForm ( parents , request . POST or None ) [EOL] [EOL] [EOL] class ButtonsWithPreview ( PageButtonHelper ) : [EOL] def preview_button ( self , obj , classnames_add , classnames_exclude ) : [EOL] classnames = self . copy_button_classnames + classnames_add [EOL] cn = self . finalise_classname ( classnames , classnames_exclude ) [EOL] return { [string] : reverse ( [string] , args = ( obj . id , ) ) , [string] : [string] , [string] : cn , [string] : [string] % self . verbose_name , } [EOL] [EOL] def get_buttons_for_obj ( self , obj , exclude = list ( ) , classnames_add = list ( ) , classnames_exclude = list ( ) ) : [EOL] btns = super ( ) . get_buttons_for_obj ( obj , exclude , classnames_add , classnames_exclude ) [EOL] [EOL] [comment] [EOL] btns . insert ( - [number] , self . preview_button ( obj , classnames_add , classnames_exclude ) ) [EOL] [EOL] return btns [EOL] [EOL] [EOL] class FormsFundRoundListFilter ( admin . SimpleListFilter ) : [EOL] title = [string] [EOL] parameter_name = [string] [EOL] [EOL] def lookups ( self , request , model_admin ) : [EOL] return ( ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ) [EOL] [EOL] def queryset ( self , request , queryset ) : [EOL] value = self . value ( ) [EOL] if value : [EOL] query = { f'{ value } [string] ' : False } [EOL] return queryset . filter ( ** query ) . distinct ( ) [EOL] return queryset [EOL] [EOL] [EOL] class RoundStateListFilter ( admin . SimpleListFilter ) : [EOL] title = [string] [EOL] parameter_name = [string] [EOL] [EOL] def lookups ( self , request , model_admin ) : [EOL] return ( ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ) [EOL] [EOL] def queryset ( self , request , queryset ) : [EOL] value = self . value ( ) [EOL] if value == [string] : [EOL] return queryset . open ( ) [EOL] elif value == [string] : [EOL] return queryset . closed ( ) [EOL] return queryset [EOL] [EOL] [EOL] class ApplicationFormButtonHelper ( ButtonHelper ) : [EOL] def prepare_classnames ( self , start = None , add = None , exclude = None ) : [EOL] [docstring] [EOL] classnames = start or [ ] [EOL] classnames . extend ( add or [ ] ) [EOL] return self . finalise_classname ( classnames , exclude or [ ] ) [EOL] [EOL] def copy_form_button ( self , pk , form_name , ** kwargs ) : [EOL] classnames = self . prepare_classnames ( start = self . edit_button_classnames , add = kwargs . get ( [string] ) , exclude = kwargs . get ( [string] ) ) [EOL] return { [string] : classnames , [string] : [string] , [string] : f' [string] { form_name }' , [string] : self . url_helper . get_action_url ( [string] , admin . utils . quote ( pk ) ) , } [EOL] [EOL] def get_buttons_for_obj ( self , obj , exclude = None , * args , ** kwargs ) : [EOL] [docstring] [EOL] buttons = super ( ) . get_buttons_for_obj ( obj , * args , ** kwargs ) [EOL] [EOL] copy_form_button = self . copy_form_button ( pk = getattr ( obj , self . opts . pk . attname ) , form_name = getattr ( obj , [string] ) , ** kwargs ) [EOL] buttons . append ( copy_form_button ) [EOL] [EOL] return buttons [EOL] [EOL] [EOL] class RoundAdminURLHelper ( PageAdminURLHelper ) : [EOL] @ cached_property def index_url ( self ) : [EOL] [comment] [EOL] [comment] [EOL] params = { [string] : [string] , [string] : [string] } [EOL] return f"{ self . get_action_url ( [string] ) } [string] { urlencode ( params ) }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.funds.admin_helpers.VerboseLabelModelChoiceField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib . staticfiles . templatetags . staticfiles import static [EOL] from django_select2 . forms import Select2MultipleWidget [EOL] [EOL] [EOL] class Select2MultiCheckboxesWidget ( Select2MultipleWidget ) : [EOL] class Media : [EOL] js = ( static ( [string] ) , static ( [string] ) , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] attrs = kwargs . get ( [string] , { } ) [EOL] attrs . setdefault ( [string] , [string] ) [EOL] kwargs [ [string] ] = attrs [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def build_attrs ( self , * args , ** kwargs ) : [EOL] attrs = super ( ) . build_attrs ( * args , ** kwargs ) [EOL] attrs [ [string] ] = attrs [ [string] ] . replace ( [string] , [string] ) [EOL] return attrs [EOL] [EOL] [EOL] class MetaTermSelect2Widget ( Select2MultipleWidget ) : [EOL] [EOL] def create_option ( self , name , value , label , selected , index , subindex = None , attrs = None ) : [EOL] disabled = False [EOL] [EOL] if isinstance ( label , dict ) : [EOL] label , disabled = label . get ( [string] ) , label . get ( [string] ) [EOL] [EOL] option_dict = super ( ) . create_option ( name , value , label , selected , index , subindex = subindex , attrs = attrs ) [EOL] [EOL] if disabled : [EOL] option_dict [ [string] ] [ [string] ] = [string] [EOL] return option_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib . admin . utils import unquote [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from django . utils . translation import gettext_lazy as _ [EOL] from wagtail . admin import messages [EOL] from wagtail . admin . forms . pages import CopyForm [EOL] from wagtail . admin . views . pages import get_valid_next_url_from_request [EOL] from wagtail . contrib . modeladmin . views import CreateView [EOL] from wagtail . core import hooks [EOL] from wagtail . core . models import Page [EOL] [EOL] [EOL] def custom_admin_round_copy_view ( request , page ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] parent_page = page . get_parent ( ) [EOL] [EOL] [comment] [EOL] can_publish = parent_page . permissions_for_user ( request . user ) . can_publish_subpage ( ) [EOL] [EOL] form = CopyForm ( request . POST or None , user = request . user , page = page , can_publish = can_publish ) [EOL] [EOL] next_url = get_valid_next_url_from_request ( request ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] parent_page = Page . objects . get ( id = request . POST [ [string] ] ) [EOL] [EOL] if form . is_valid ( ) : [EOL] [comment] [EOL] if form . cleaned_data [ [string] ] : [EOL] parent_page = form . cleaned_data [ [string] ] [EOL] [EOL] if not page . permissions_for_user ( request . user ) . can_copy_to ( parent_page , form . cleaned_data . get ( [string] ) ) : [EOL] raise PermissionDenied [EOL] [EOL] [comment] [EOL] can_publish = parent_page . permissions_for_user ( request . user ) . can_publish_subpage ( ) [EOL] [EOL] [comment] [EOL] new_page = page . copy ( recursive = form . cleaned_data . get ( [string] ) , to = parent_page , update_attrs = { [string] : form . cleaned_data [ [string] ] , [string] : form . cleaned_data [ [string] ] , [string] : None , [string] : None , } , keep_live = ( can_publish and form . cleaned_data . get ( [string] ) ) , user = request . user , ) [EOL] [EOL] messages . info ( request , _ ( ( [string] [string] ) ) ) [EOL] [EOL] [comment] [EOL] if form . cleaned_data . get ( [string] ) : [EOL] messages . success ( request , _ ( [string] ) . format ( page . get_admin_display_title ( ) , new_page . get_descendants ( ) . count ( ) ) ) [EOL] else : [EOL] messages . success ( request , _ ( [string] ) . format ( page . get_admin_display_title ( ) ) ) [EOL] [EOL] for fn in hooks . get_hooks ( [string] ) : [EOL] result = fn ( request , page , new_page ) [EOL] if hasattr ( result , [string] ) : [EOL] return result [EOL] [EOL] [comment] [EOL] if next_url : [EOL] return redirect ( next_url ) [EOL] return redirect ( [string] , parent_page . id ) [EOL] [EOL] [EOL] class CopyApplicationFormViewClass ( CreateView ) : [EOL] [docstring] [EOL] [EOL] form_pk = None [EOL] form_instance = None [EOL] [EOL] def __init__ ( self , model_admin , form_pk ) : [EOL] self . form_pk = unquote ( form_pk ) [EOL] object_qs = model_admin . model . _default_manager . get_queryset ( ) [EOL] object_qs = object_qs . filter ( pk = self . form_pk ) [EOL] self . form_instance = get_object_or_404 ( object_qs ) [EOL] super ( ) . __init__ ( model_admin ) [EOL] [EOL] def get_initial ( self ) : [EOL] return { [string] : f' [string] { self . form_instance . name }' , [string] : self . form_instance . form_fields } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from hypha . apply . utils . image import generate_image_tag [EOL] [EOL] [EOL] def render_icon ( image ) : [EOL] if not image : [EOL] return [string] [EOL] filter_spec = [string] [EOL] return generate_image_tag ( image , filter_spec ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . forms import Field , Widget [EOL] from django . forms . utils import pretty_name [EOL] from django . template . loader import render_to_string [EOL] from django . urls import reverse [EOL] from wagtail . admin . edit_handlers import EditHandler , FieldPanel [EOL] from wagtail . core . models import Page [EOL] [EOL] [EOL] def reverse_edit ( obj ) : [EOL] if isinstance ( obj , Page ) : [EOL] return reverse ( [string] , args = ( obj . id , ) ) [EOL] [EOL] url_name = f'{ obj . _meta . app_label } [string] { obj . _meta . model_name } [string] ' [EOL] return reverse ( url_name , args = ( obj . id , ) ) [EOL] [EOL] [EOL] class ReadonlyWidget ( Widget ) : [EOL] template_name = [string] [EOL] [EOL] def format_value ( self , value ) : [EOL] self . value = value [EOL] return super ( ) . format_value ( value ) [EOL] [EOL] def get_context ( self , * args , ** kwargs ) : [EOL] context = super ( ) . get_context ( * args , ** kwargs ) [EOL] try : [EOL] [comment] [EOL] edit_link = reverse_edit ( self . value . form ) [EOL] except AttributeError : [EOL] pass [EOL] else : [EOL] context [ [string] ] [ [string] ] = edit_link [EOL] return context [EOL] [EOL] [EOL] class DisplayField ( Field ) : [EOL] widget = ReadonlyWidget [EOL] [EOL] [EOL] class ReadOnlyPanel ( EditHandler ) : [EOL] template = [string] [EOL] field_template = [string] [EOL] [EOL] def __init__ ( self , attr , ** kwargs ) : [EOL] self . attr = attr [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . heading = pretty_name ( self . attr ) if not self . heading else self . heading [EOL] [EOL] def clone ( self ) : [EOL] return self . __class__ ( attr = self . attr , heading = self . heading , classname = self . classname , help_text = self . help_text , ) [EOL] [EOL] def context ( self ) : [EOL] try : [EOL] value = getattr ( self . instance , self . attr ) [EOL] except AttributeError : [EOL] self . attr = [string] . join ( [ self . instance . _meta . model_name , str ( self . instance . id ) ] ) [EOL] value = self . instance [EOL] [EOL] if callable ( value ) : [EOL] value = value ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . instance . id : [EOL] self . form . initial [ self . attr ] = value [EOL] else : [EOL] self . form . initial [ self . attr ] = [string] [EOL] self . bound_field = DisplayField ( ) . get_bound_field ( self . form , self . attr ) [EOL] return { [string] : self , [string] : self . bound_field , [string] : False , } [EOL] [EOL] def render_as_object ( self ) : [EOL] return render_to_string ( self . template , self . context ( ) ) [EOL] [EOL] def render_as_field ( self ) : [EOL] return render_to_string ( self . field_template , self . context ( ) ) [EOL] [EOL] [EOL] class ReadOnlyInlinePanel ( ReadOnlyPanel ) : [EOL] template = [string] [EOL] [EOL] def get_child_edit_handler ( self ) : [EOL] child_edit_handler = ReadOnlyPanel ( self . attr ) [EOL] model = getattr ( self . instance , self . attr ) [EOL] return child_edit_handler . bind_to ( model = model ) [EOL] [EOL] def on_instance_bound ( self ) : [EOL] values = getattr ( self . instance , self . attr ) . all ( ) [EOL] child_panel = self . get_child_edit_handler ( ) [EOL] self . children = [ child_panel . bind_to ( instance = value , form = self . form , request = self . request ) for value in values ] [EOL] [EOL] [EOL] class FilteredFieldPanel ( FieldPanel ) : [EOL] def __init__ ( self , * args , filter_query = dict ( ) , ** kwargs ) : [EOL] self . filter_query = filter_query [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clone ( self ) : [EOL] return self . __class__ ( field_name = self . field_name , widget = self . widget if hasattr ( self , [string] ) else None , heading = self . heading , classname = self . classname , help_text = self . help_text , filter_query = self . filter_query , ) [EOL] [EOL] def on_form_bound ( self ) : [EOL] super ( ) . on_form_bound ( ) [EOL] target_model = self . bound_field . field . queryset . model [EOL] self . bound_field . field . queryset = target_model . objects . filter ( ** self . filter_query ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.apply.funds.edit_handlers.ReadonlyWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.funds.edit_handlers.ReadOnlyPanel$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.apply.funds.edit_handlers.ReadOnlyPanel$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def is_user_has_access_to_view_submission ( user , submission ) : [EOL] has_access = False [EOL] [EOL] if not user . is_authenticated : [EOL] pass [EOL] [EOL] elif user . is_apply_staff or submission . user == user or user . is_reviewer : [EOL] has_access = True [EOL] [EOL] elif user . is_partner and submission . partners . filter ( pk = user . pk ) . exists ( ) : [EOL] has_access = True [EOL] [EOL] elif user . is_community_reviewer and submission . community_review : [EOL] has_access = True [EOL] [EOL] return has_access [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import difflib [EOL] import bleach [EOL] import re [EOL] from difflib import SequenceMatcher [EOL] [EOL] from bleach . sanitizer import Cleaner [EOL] from django . utils . html import format_html [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] [EOL] def wrap_with_span ( text , class_name ) : [EOL] return format_html ( [string] , class_name , mark_safe ( text ) ) [EOL] [EOL] [EOL] def wrap_deleted ( text ) : [EOL] return wrap_with_span ( text , [string] ) [EOL] [EOL] [EOL] def wrap_added ( text ) : [EOL] return wrap_with_span ( text , [string] ) [EOL] [EOL] [EOL] def compare ( answer_a , answer_b , should_bleach = True ) : [EOL] if should_bleach : [EOL] cleaner = Cleaner ( tags = [ [string] ] , attributes = { } , strip = True ) [EOL] answer_a = re . sub ( [string] , [string] , answer_a ) [EOL] answer_b = re . sub ( [string] , [string] , answer_b ) [EOL] answer_a = cleaner . clean ( answer_a ) [EOL] answer_b = cleaner . clean ( answer_b ) [EOL] [EOL] diff = SequenceMatcher ( None , answer_a , answer_b ) [EOL] from_diff = [ ] [EOL] to_diff = [ ] [EOL] for opcode , a0 , a1 , b0 , b1 in diff . get_opcodes ( ) : [EOL] if opcode == [string] : [EOL] from_diff . append ( mark_safe ( diff . a [ a0 : a1 ] ) ) [EOL] to_diff . append ( mark_safe ( diff . b [ b0 : b1 ] ) ) [EOL] elif opcode == [string] : [EOL] from_diff . append ( mark_safe ( diff . a [ a0 : a1 ] ) ) [EOL] to_diff . append ( wrap_with_span ( diff . b [ b0 : b1 ] , [string] ) ) [EOL] elif opcode == [string] : [EOL] from_diff . append ( wrap_with_span ( diff . a [ a0 : a1 ] , [string] ) ) [EOL] to_diff . append ( mark_safe ( diff . b [ b0 : b1 ] ) ) [EOL] elif opcode == [string] : [EOL] from_diff . append ( wrap_with_span ( diff . a [ a0 : a1 ] , [string] ) ) [EOL] to_diff . append ( wrap_with_span ( diff . b [ b0 : b1 ] , [string] ) ) [EOL] [EOL] from_display = [string] . join ( from_diff ) [EOL] to_display = [string] . join ( to_diff ) [EOL] from_display = re . sub ( [string] , [string] , from_display ) [EOL] to_display = re . sub ( [string] , [string] , to_display ) [EOL] from_display = re . sub ( [string] , [string] , from_display ) [EOL] to_display = re . sub ( [string] , [string] , to_display ) [EOL] from_display = mark_safe ( from_display ) [EOL] to_display = mark_safe ( to_display ) [EOL] [EOL] return ( from_display , to_display ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApplyConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import copy [EOL] [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def row_from_record ( row , record ) : [EOL] row = copy . copy ( row ) [EOL] row . _record = record [EOL] return row [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def should_display_primary_actions_block ( user , submission ) : [EOL] review_primary_action_displayed = submission . can_review ( user ) and ( submission . in_internal_review_phase or submission . in_external_review_phase ) [EOL] view_determination_action_displayed = submission . is_finished [EOL] [EOL] if review_primary_action_displayed or view_determination_action_displayed : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . inclusion_tag ( [string] ) def status_bar ( workflow , current_phase , user , author = False , css_class = [string] , same_stage = False ) : [EOL] [EOL] phases = workflow . phases_for ( user ) [EOL] is_applicant = user == author if author else user . is_applicant [EOL] [EOL] if same_stage and not is_applicant : [EOL] phases = [ phase for phase in phases if phase . stage == current_phase . stage ] [EOL] [EOL] if not current_phase . permissions . can_view ( user ) : [EOL] current_phase = workflow . previous_visible ( current_phase , user ) [EOL] [EOL] [comment] [EOL] elif not workflow . stepped_phases [ current_phase . step ] [ [number] ] . permissions . can_view ( user ) : [EOL] new_phase_list = [ ] [EOL] for phase in reversed ( phases ) : [EOL] if phase . step <= current_phase . step and current_phase not in new_phase_list : [EOL] next_phase = current_phase [EOL] else : [EOL] next_phase = phase [EOL] new_phase_list = [ next_phase , * new_phase_list ] [EOL] phases = new_phase_list [EOL] [EOL] return { [string] : phases , [string] : current_phase , [string] : css_class , [string] : user . is_applicant or user . is_partner , } [EOL] [EOL] [EOL] @ register . simple_tag ( ) def status_display ( current_phase , phase , public ) : [EOL] if phase . step == current_phase . step : [EOL] if public : [EOL] return current_phase . public_name [EOL] else : [EOL] return current_phase . display_name [EOL] [EOL] if phase . step > current_phase . step : [EOL] if public : [EOL] return phase . future_name_public [EOL] else : [EOL] return phase . future_name_staff [EOL] [EOL] if public : [EOL] return phase . public_name [EOL] else : [EOL] return phase . display_name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] def check_permission ( user , perm , submission ) : [EOL] perm_method = getattr ( submission . phase . permissions , f' [string] { perm }' , lambda x : False ) [EOL] return perm_method ( user ) [EOL] [EOL] [EOL] @ register . filter def has_edit_perm ( user , submission ) : [EOL] return check_permission ( user , [string] , submission ) [EOL] [EOL] [EOL] @ register . filter def has_review_perm ( user , submission ) : [EOL] return check_permission ( user , [string] , submission ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import mistune [EOL] import tomd [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] mistune_markdown = mistune . Markdown ( ) [EOL] [EOL] [EOL] @ register . filter def markdown ( value ) : [EOL] return mistune_markdown ( value ) [EOL] [EOL] [EOL] @ register . filter def to_markdown ( value ) : [EOL] [comment] [EOL] [comment] [EOL] value = markdown ( value ) [EOL] return tomd . convert ( value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Tuple , List , Any , Set [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STAFF_GROUP_NAME = [string] [EOL] REVIEWER_GROUP_NAME = [string] [EOL] PARTNER_GROUP_NAME = [string] [EOL] COMMUNITY_REVIEWER_GROUP_NAME = [string] [EOL] [EOL] REVIEWER_GROUPS = set ( [ STAFF_GROUP_NAME , REVIEWER_GROUP_NAME , COMMUNITY_REVIEWER_GROUP_NAME , PARTNER_GROUP_NAME , ] ) [EOL] [EOL] [EOL] def add_reviewer_type ( apps , schema_editor ) : [EOL] AssignedReviewer = apps . get_model ( [string] , [string] ) [EOL] Group = apps . get_model ( [string] , [string] ) [EOL] for assigned in AssignedReviewer . objects . prefetch_related ( [string] ) : [EOL] groups = set ( assigned . reviewer . groups . values_list ( [string] , flat = True ) ) & REVIEWER_GROUPS [EOL] if len ( groups ) > [number] : [EOL] if PARTNER_GROUP_NAME in groups and assigned . reviewer in assigned . submission . partners . all ( ) : [EOL] groups = { PARTNER_GROUP_NAME } [EOL] elif COMMUNITY_REVIEWER_GROUP_NAME in groups : [EOL] groups = { COMMUNITY_REVIEWER_GROUP_NAME } [EOL] elif assigned . reviewer . is_staff or assigned . reviewer . is_superuser : [EOL] groups = { STAFF_GROUP_NAME } [EOL] else : [EOL] groups = { REVIEWER_GROUP_NAME } [EOL] elif not groups : [EOL] if assigned . reviewer . is_staff or assigned . reviewer . is_superuser : [EOL] groups = { STAFF_GROUP_NAME } [EOL] else : [EOL] groups = { REVIEWER_GROUP_NAME } [EOL] [EOL] group = Group . objects . get ( name = groups . pop ( ) ) [EOL] assigned . type = group [EOL] assigned . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( add_reviewer_type , migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations [EOL] import hypha . apply . stream_forms . files [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( encoder = hypha . apply . stream_forms . files . StreamFieldDataEncoder ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( encoder = hypha . apply . stream_forms . files . StreamFieldDataEncoder ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import django . contrib . postgres . fields . jsonb [EOL] import django . core . serializers . json [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( default = [number] , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , preserve_default = False , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( encoder = django . core . serializers . json . DjangoJSONEncoder ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def increment_stage_in_forms ( forms ) : [EOL] [docstring] [EOL] for index , form in enumerate ( forms . all ( ) , [number] ) : [EOL] form . stage = index [EOL] form . save ( update_fields = [ [string] ] ) [EOL] [EOL] [EOL] def one_application_form_per_stage ( apps , schema_editor ) : [EOL] Fund = apps . get_model ( [string] , [string] ) [EOL] RequestForPartners = apps . get_model ( [string] , [string] ) [EOL] Round = apps . get_model ( [string] , [string] ) [EOL] SealedRound = apps . get_model ( [string] , [string] ) [EOL] LabType = apps . get_model ( [string] , [string] ) [EOL] [EOL] for fund in Fund . objects . all ( ) : [EOL] if fund . forms . count ( ) > [number] : [EOL] increment_stage_in_forms ( fund . forms ) [EOL] [EOL] for rfp in RequestForPartners . objects . all ( ) : [EOL] if rfp . forms . count ( ) > [number] : [EOL] increment_stage_in_forms ( rfp . forms ) [EOL] [EOL] for round_ in Round . objects . all ( ) : [EOL] if round_ . forms . count ( ) > [number] : [EOL] increment_stage_in_forms ( round_ . forms ) [EOL] [EOL] for sealed_round in SealedRound . objects . all ( ) : [EOL] if sealed_round . forms . count ( ) > [number] : [EOL] increment_stage_in_forms ( sealed_round . forms ) [EOL] [EOL] for lab in LabType . objects . all ( ) : [EOL] if lab . forms . count ( ) > [number] : [EOL] increment_stage_in_forms ( lab . forms ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( one_application_form_per_stage , migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def move_reviewer_data ( apps , schema_editor ) : [EOL] [comment] [EOL] [comment] [EOL] ApplicationSubmission = apps . get_model ( [string] , [string] ) [EOL] AssignedReviewers = apps . get_model ( [string] , [string] ) [EOL] for submission in ApplicationSubmission . objects . all ( ) : [EOL] AssignedReviewers . objects . bulk_create ( AssignedReviewers ( submission = submission , reviewer = reviewer , role = None , ) for reviewer in submission . reviewers . all ( ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( move_reviewer_data , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import modelcluster . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( blank = True , limit_choices_to = { [string] : [ [string] , [string] ] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( blank = True , limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( blank = True , limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( blank = True , limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] import django . core . serializers . json [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( encoder = django . core . serializers . json . DjangoJSONEncoder ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . OneToOneField ( editable = False , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . OneToOneField ( editable = False , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] import modelcluster . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import modelcluster . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ] , options = { [string] : [string] , } , bases = ( [string] , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ] , options = { [string] : [string] , } , bases = ( [string] , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , ) , ) , migrations . AlterModelOptions ( name = [string] , options = { } , ) , migrations . AlterModelOptions ( name = [string] , options = { } , ) , migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( blank = True , limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( limit_choices_to = { [string] : [string] } , on_delete = django . db . models . deletion . PROTECT , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalManyToManyField ( blank = True , limit_choices_to = { [string] : [string] } , related_name = [string] , to = settings . AUTH_USER_MODEL ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] from wagtail . images . models import AbstractImage , AbstractRendition , Image [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class CustomImage ( AbstractImage ) : [EOL] drupal_id = models . IntegerField ( null = True , blank = True , editable = False ) [EOL] [EOL] alt = models . CharField ( max_length = [number] , blank = True ) [EOL] credit = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] admin_form_fields = Image . admin_form_fields + ( [string] , [string] , ) [EOL] [EOL] [comment] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . alt : [EOL] self . alt = self . title [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class Rendition ( AbstractRendition ) : [EOL] image = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] , [string] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . conf import settings [EOL] from wagtail . contrib . frontend_cache . utils import purge_url_from_cache [EOL] from wagtail . core . models import Site [EOL] [EOL] [EOL] def purge_cache_on_all_sites ( path ) : [EOL] if settings . DEBUG : [EOL] return [EOL] [EOL] for site in Site . objects . all ( ) : [EOL] purge_url_from_cache ( [string] % ( site . root_url . rstrip ( [string] ) , path ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from wagtail . core import blocks [EOL] from wagtail . documents . blocks import DocumentChooserBlock [EOL] from wagtail . embeds . blocks import EmbedBlock [EOL] from wagtail . images . blocks import ImageChooserBlock [EOL] from wagtail . snippets . blocks import SnippetChooserBlock [EOL] [EOL] [EOL] class ImageBlock ( blocks . StructBlock ) : [EOL] image = ImageChooserBlock ( ) [EOL] caption = blocks . CharBlock ( required = False ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] class DocumentBlock ( blocks . StructBlock ) : [EOL] document = DocumentChooserBlock ( ) [EOL] title = blocks . CharBlock ( required = False ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] class QuoteBlock ( blocks . StructBlock ) : [EOL] quote = blocks . CharBlock ( classname = [string] ) [EOL] attribution = blocks . CharBlock ( required = False ) [EOL] job_title = blocks . CharBlock ( required = False ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] class BoxBlock ( blocks . StructBlock ) : [EOL] box_content = blocks . RichTextBlock ( ) [EOL] box_class = blocks . CharBlock ( required = False ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] class ApplyLinkBlock ( blocks . StructBlock ) : [EOL] application = blocks . PageChooserBlock ( ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] [comment] [EOL] class StoryBlock ( blocks . StreamBlock ) : [EOL] heading = blocks . CharBlock ( classname = [string] , icon = [string] ) [EOL] paragraph = blocks . RichTextBlock ( ) [EOL] box = BoxBlock ( ) [EOL] apply_link = ApplyLinkBlock ( ) [EOL] image = ImageBlock ( ) [EOL] quote = QuoteBlock ( ) [EOL] embed = EmbedBlock ( ) [EOL] call_to_action = SnippetChooserBlock ( [string] , template = [string] ) [EOL] document = DocumentBlock ( ) [EOL] [EOL] class Meta : [EOL] template = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.ImageBlock]$ 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.ImageBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.DocumentBlock]$ 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.DocumentBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.QuoteBlock]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.QuoteBlock]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.QuoteBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.BoxBlock]$ 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.BoxBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.ApplyLinkBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.StoryBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.StoryBlock]$ 0 0 0 0 0 0 0 $hypha.public.utils.blocks.BoxBlock$ 0 0 0 0 0 $hypha.public.utils.blocks.ApplyLinkBlock$ 0 0 0 0 0 $hypha.public.utils.blocks.ImageBlock$ 0 0 0 0 0 $hypha.public.utils.blocks.QuoteBlock$ 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.StoryBlock]$ 0 0 0 0 0 $typing.Type[hypha.public.utils.blocks.StoryBlock]$ 0 0 0 0 0 0 0 0 0 0 $hypha.public.utils.blocks.DocumentBlock$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import hypha [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] from django . utils . decorators import method_decorator [EOL] from wagtail . admin . edit_handlers import ( FieldPanel , FieldRowPanel , InlinePanel , MultiFieldPanel , PageChooserPanel , StreamFieldPanel , ) [EOL] from wagtail . contrib . settings . models import BaseSetting , register_setting [EOL] from wagtail . core import blocks [EOL] from wagtail . core . fields import RichTextField , StreamField [EOL] from wagtail . core . models import Orderable , Page [EOL] from wagtail . images . edit_handlers import ImageChooserPanel [EOL] from wagtail . snippets . models import register_snippet [EOL] from wagtailcache . cache import WagtailCacheMixin , cache_page [EOL] [EOL] [EOL] class LinkFields ( models . Model ) : [EOL] [docstring] [EOL] [EOL] link_page = models . ForeignKey ( [string] , blank = True , null = True , on_delete = models . SET_NULL ) [EOL] link_url = models . URLField ( blank = True ) [EOL] link_text = models . CharField ( blank = True , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def clean ( self ) : [EOL] if not self . link_page and not self . link_url : [EOL] raise ValidationError ( { [string] : ValidationError ( [string] ) , [string] : ValidationError ( [string] ) , } ) [EOL] [EOL] if self . link_page and self . link_url : [EOL] raise ValidationError ( { [string] : ValidationError ( [string] ) , [string] : ValidationError ( [string] ) , } ) [EOL] [EOL] if not self . link_page and not self . link_text : [EOL] raise ValidationError ( { [string] : ValidationError ( [string] ) , } ) [EOL] [EOL] def get_link_text ( self ) : [EOL] if self . link_text : [EOL] return self . link_text [EOL] [EOL] if self . link_page : [EOL] return self . link_page . title [EOL] [EOL] return [string] [EOL] [EOL] def get_link_url ( self ) : [EOL] if self . link_page : [EOL] return self . link_page . get_url [EOL] [EOL] return self . link_url [EOL] [EOL] panels = [ MultiFieldPanel ( [ PageChooserPanel ( [string] ) , FieldPanel ( [string] ) , FieldPanel ( [string] ) , ] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] class RelatedPage ( Orderable , models . Model ) : [EOL] page = models . ForeignKey ( [string] , on_delete = models . CASCADE , related_name = [string] , ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] ordering = [ [string] ] [EOL] [EOL] panels = [ PageChooserPanel ( [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] class SocialFields ( models . Model ) : [EOL] social_image = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] social_text = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] promote_panels = [ MultiFieldPanel ( [ ImageChooserPanel ( [string] ) , FieldPanel ( [string] ) , ] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] class ListingFields ( models . Model ) : [EOL] listing_image = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] , help_text = [string] ) [EOL] listing_title = models . CharField ( max_length = [number] , blank = True , help_text = [string] ) [EOL] listing_summary = models . CharField ( max_length = [number] , blank = True , help_text = [string] ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] promote_panels = [ MultiFieldPanel ( [ ImageChooserPanel ( [string] ) , FieldPanel ( [string] ) , FieldPanel ( [string] ) , ] , [string] ) , ] [EOL] [EOL] [EOL] @ register_snippet class CallToActionSnippet ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] ) [EOL] summary = RichTextField ( blank = True , max_length = [number] ) [EOL] image = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] [EOL] link = StreamField ( blocks . StreamBlock ( [ ( [string] , blocks . StructBlock ( [ ( [string] , blocks . URLBlock ( ) ) , ( [string] , blocks . CharBlock ( ) ) , ] , icon = [string] ) ) , ( [string] , blocks . StructBlock ( [ ( [string] , blocks . PageChooserBlock ( ) ) , ( [string] , blocks . CharBlock ( required = False ) ) , ] , icon = [string] ) , ) , ] , max_num = [number] , required = True ) , blank = True ) [EOL] [EOL] panels = [ FieldPanel ( [string] ) , FieldPanel ( [string] ) , ImageChooserPanel ( [string] ) , StreamFieldPanel ( [string] ) , ] [EOL] [EOL] def get_link_text ( self ) : [EOL] [comment] [EOL] [comment] [EOL] block = self . link [ [number] ] [EOL] [EOL] title = block . value [ [string] ] [EOL] if block . block_type == [string] : [EOL] return title [EOL] [EOL] [comment] [EOL] [comment] [EOL] return title or block . value [ [string] ] . title [EOL] [EOL] def get_link_url ( self ) : [EOL] [comment] [EOL] [comment] [EOL] block = self . link [ [number] ] [EOL] [EOL] if block . block_type == [string] : [EOL] return block . value [ [string] ] [EOL] [EOL] return block . value [ [string] ] . get_url ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] [EOL] @ register_setting class SocialMediaSettings ( BaseSetting ) : [EOL] twitter_handle = models . CharField ( max_length = [number] , blank = True , help_text = [string] , ) [EOL] facebook_app_id = models . CharField ( max_length = [number] , blank = True , help_text = [string] , ) [EOL] default_sharing_text = models . CharField ( max_length = [number] , blank = True , help_text = [string] , ) [EOL] site_name = models . CharField ( max_length = [number] , blank = True , default = [string] , help_text = [string] , ) [EOL] [EOL] [EOL] @ register_setting class SystemMessagesSettings ( BaseSetting ) : [EOL] class Meta : [EOL] verbose_name = [string] [EOL] [EOL] site_logo_default = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] , help_text = [string] , ) [EOL] [EOL] site_logo_mobile = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] , help_text = [string] , ) [EOL] [EOL] footer_content = models . TextField ( [string] , default = [string] , help_text = [string] , ) [EOL] [EOL] title_404 = models . CharField ( [string] , max_length = [number] , default = [string] , ) [EOL] body_404 = RichTextField ( [string] , default = [string] ) [EOL] [EOL] panels = [ MultiFieldPanel ( [ FieldPanel ( [string] ) , FieldPanel ( [string] ) , ] , [string] ) , FieldPanel ( [string] ) , MultiFieldPanel ( [ FieldPanel ( [string] ) , FieldPanel ( [string] ) , ] , [string] ) , ] [EOL] [EOL] [EOL] @ method_decorator ( cache_page , name = [string] ) class BasePage ( WagtailCacheMixin , SocialFields , ListingFields , Page ) : [EOL] show_in_menus_default = True [EOL] [EOL] header_image = models . ForeignKey ( [string] , null = True , blank = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] content_panels = Page . content_panels + [ ImageChooserPanel ( [string] ) ] [EOL] [EOL] promote_panels = ( Page . promote_panels + SocialFields . promote_panels + ListingFields . promote_panels ) [EOL] [EOL] def cache_control ( self ) : [EOL] return f' [string] { settings . CACHE_CONTROL_S_MAXAGE }' [EOL] [EOL] [EOL] class BaseFunding ( Orderable ) : [EOL] value = models . PositiveIntegerField ( ) [EOL] year = models . PositiveIntegerField ( ) [EOL] duration = models . PositiveIntegerField ( help_text = [string] ) [EOL] source = models . ForeignKey ( [string] , on_delete = models . PROTECT , null = True , blank = True , ) [EOL] [EOL] panels = [ FieldRowPanel ( [ FieldPanel ( [string] ) , FieldPanel ( [string] ) , FieldPanel ( [string] ) , ] ) , PageChooserPanel ( [string] , [ [string] , [string] ] ) , ] [EOL] [EOL] class Meta ( Orderable . Meta ) : [EOL] abstract = True [EOL] [EOL] [EOL] class FundingMixin ( models . Model ) : [EOL] [docstring] [EOL] content_panels = [ InlinePanel ( [string] , label = [string] ) ] [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] @ property def total_funding ( self ) : [EOL] return sum ( funding . value for funding in self . funding . all ( ) ) [EOL]	
from typing import Any , Tuple , Type [EOL] import typing [EOL] import hypha [EOL] from django . contrib . staticfiles . templatetags . staticfiles import static [EOL] from wagtail . contrib . modeladmin . options import ( ModelAdmin , ModelAdminGroup , modeladmin_register , ) [EOL] from wagtail . core import hooks [EOL] from wagtailcache . cache import clear_cache [EOL] [EOL] from hypha . public . news . models import NewsType [EOL] from hypha . public . people . models import PersonType [EOL] [EOL] [EOL] class NewsTypeModelAdmin ( ModelAdmin ) : [EOL] model = NewsType [EOL] menu_icon = [string] [EOL] [EOL] [EOL] class PersonTypeModelAdmin ( ModelAdmin ) : [EOL] model = PersonType [EOL] menu_icon = [string] [EOL] [EOL] [EOL] class TaxonomiesModelAdminGroup ( ModelAdminGroup ) : [EOL] menu_label = [string] [EOL] items = ( NewsTypeModelAdmin , PersonTypeModelAdmin ) [EOL] menu_icon = [string] [EOL] [EOL] [EOL] modeladmin_register ( TaxonomiesModelAdminGroup ) [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def editor_css ( ) : [EOL] link = [string] [EOL] path = static ( [string] ) [EOL] return link . format ( path ) [EOL] [EOL] [EOL] @ hooks . register ( [string] ) @ hooks . register ( [string] ) def clear_wagtailcache ( request , page ) : [EOL] if page . live : [EOL] clear_cache ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.news.models.NewsType]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.people.models.PersonType]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Type[hypha.public.utils.wagtail_hooks.NewsTypeModelAdmin],typing.Type[hypha.public.utils.wagtail_hooks.PersonTypeModelAdmin]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] from wagtail . core . utils import camelcase_to_underscore [EOL] [EOL] from hypha . public . utils . models import SocialMediaSettings [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] [comment] [EOL] @ register . filter ( name = [string] ) def social_text ( page , site ) : [EOL] try : [EOL] return page . social_text [EOL] except AttributeError : [EOL] return SocialMediaSettings . for_site ( site ) . default_sharing_text [EOL] [EOL] [EOL] [comment] [EOL] @ register . filter ( name = [string] ) def widget_type ( bound_field ) : [EOL] return camelcase_to_underscore ( bound_field . field . widget . __class__ . __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] @ register . filter ( name = [string] ) def field_type ( bound_field ) : [EOL] return camelcase_to_underscore ( bound_field . field . __class__ . __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] @ register . simple_tag def verbose_name ( instance ) : [EOL] return instance . specific . _meta . verbose_name . title ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . URLBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( ) ) ) , icon = [string] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ) , icon = [string] ) ) ) , blank = True ) ) , ( [string] , wagtail . core . fields . RichTextField ( blank = True , max_length = [number] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , default = [string] , help_text = [string] , max_length = [number] ) ) , ( [string] , models . OneToOneField ( editable = False , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( default = [string] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . RichTextField ( default = [string] , verbose_name = [string] ) ) , ( [string] , models . OneToOneField ( editable = False , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : False , [string] : [string] , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from wagtail . core import hooks [EOL] [EOL] from hypha . public . forms . models import FormPage [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def construct_from_wagtail_forms ( user , queryset ) : [EOL] [docstring] [EOL] [EOL] form_page_type = ContentType . objects . get_for_model ( FormPage ) [EOL] queryset = queryset . filter ( content_type__pk = form_page_type . pk ) [EOL] [EOL] return queryset [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FormsConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import modelcluster . fields [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( blank = True , editable = False , null = True ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . TextField ( blank = True , help_text = [string] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] , verbose_name = [string] ) ) , ] , options = { [string] : [ [string] ] , [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , wagtail . core . fields . RichTextField ( blank = True ) ) , ( [string] , wagtail . core . fields . RichTextField ( blank = True ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , models . Model ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = modelcluster . fields . ParentalKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str
	0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProjectsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
import builtins [EOL] from typing import List , Any , Type , Dict [EOL] import hypha [EOL] import typing [EOL] import requests [EOL] import io [EOL] import urllib [EOL] import argparse [EOL] import itertools [EOL] import json [EOL] import mimetypes [EOL] from datetime import datetime , timezone [EOL] from io import BytesIO [EOL] from urllib . parse import urlsplit [EOL] [EOL] import bleach [EOL] import requests [EOL] from django . core . files . images import ImageFile [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from django . db . utils import IntegrityError [EOL] from PIL import Image [EOL] from wagtail . admin . rich_text . converters . editor_html import EditorHTMLConverter [EOL] from wagtail . core . models import Page [EOL] from wagtail . core . rich_text import RichText [EOL] from wagtail . images import get_image_model [EOL] [EOL] from hypha . apply . categories . categories_seed import CATEGORIES [EOL] from hypha . apply . categories . models import Category , Option [EOL] from hypha . public . projects . models import ( ProjectContactDetails , ProjectFunding , ProjectIndexPage , ProjectPage , ) [EOL] [EOL] WagtailImage = get_image_model ( ) [EOL] [EOL] VALID_IMAGE_EXTENSIONS = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] VALID_IMAGE_MIMETYPES = [ [string] ] [EOL] [EOL] [EOL] def valid_url_extension ( url , extension_list = VALID_IMAGE_EXTENSIONS ) : [EOL] return any ( [ url . endswith ( e ) for e in extension_list ] ) [EOL] [EOL] [EOL] def valid_url_mimetype ( url , mimetype_list = VALID_IMAGE_MIMETYPES ) : [EOL] mimetype , encoding = mimetypes . guess_type ( url ) [EOL] if mimetype : [EOL] return any ( [ mimetype . startswith ( m ) for m in mimetype_list ] ) [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] data = [ ] [EOL] terms = { } [EOL] whitelister = EditorHTMLConverter ( ) . whitelister [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) , help = [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] [comment] [EOL] for item in CATEGORIES : [EOL] category , _ = Category . objects . get_or_create ( name = item [ [string] ] ) [EOL] option , _ = Option . objects . get_or_create ( value = item [ [string] ] , category = category ) [EOL] self . terms [ item [ [string] ] ] = option [EOL] [EOL] self . parent_page = ProjectIndexPage . objects . first ( ) [EOL] [EOL] if not self . parent_page : [EOL] raise ProjectIndexPage . DoesNotExist ( [string] ) [EOL] [EOL] self . funds = { [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , } [EOL] [EOL] with options [ [string] ] as json_data : [EOL] self . data = json . load ( json_data ) [EOL] [EOL] counter = [number] [EOL] for id in self . data : [EOL] self . process ( id ) [EOL] counter += [number] [EOL] [EOL] self . stdout . write ( f" [string] { counter } [string] " ) [EOL] [EOL] def process ( self , id ) : [EOL] node = self . data [ id ] [EOL] [EOL] try : [EOL] project = ProjectPage . objects . get ( drupal_id = node [ [string] ] ) [EOL] except ProjectPage . DoesNotExist : [EOL] project = ProjectPage ( drupal_id = node [ [string] ] ) [EOL] [EOL] [comment] [EOL] project . submit_time = datetime . fromtimestamp ( int ( node [ [string] ] ) , timezone . utc ) [EOL] [EOL] project . title = node [ [string] ] [EOL] [EOL] image_url_base = [string] [EOL] try : [EOL] uri = node [ [string] ] [ [string] ] [EOL] except TypeError : [EOL] [comment] [EOL] pass [EOL] else : [EOL] parts = urlsplit ( uri ) [EOL] image_url = image_url_base + parts . netloc + parts . path [EOL] project . icon = self . wagtail_image_obj_from_url ( image_url , node [ [string] ] [ [string] ] ) [EOL] [EOL] project . introduction = self . get_field ( node , [string] ) [EOL] [EOL] cleaned_body = self . whitelister . clean ( self . get_field ( node , [string] ) ) [EOL] if project . introduction : [EOL] project . body = [ ( [string] , RichText ( cleaned_body ) ) ] [EOL] else : [EOL] [comment] [EOL] very_clean_body = bleach . clean ( cleaned_body , strip = True ) [EOL] introduction = very_clean_body . split ( [string] ) [ [number] ] + [string] [EOL] project . introduction = introduction [EOL] body_without_intro = cleaned_body . replace ( introduction , [string] ) . strip ( ) [EOL] project . body = [ ( [string] , RichText ( body_without_intro ) ) ] [EOL] [EOL] status = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] project . status = status [ node [ [string] ] [ [string] ] ] [EOL] [EOL] project . contact_details . clear ( ) [EOL] [EOL] sites = node [ [string] ] [EOL] [EOL] if isinstance ( sites , dict ) : [EOL] sites = [ sites ] [EOL] [EOL] for site in sites : [EOL] url = site [ [string] ] [EOL] if [string] in url : [EOL] page_type = [string] [EOL] url = urlsplit ( url ) . path [EOL] else : [EOL] page_type = [string] [EOL] [EOL] project . contact_details . add ( ProjectContactDetails ( service = page_type , value = url , ) ) [EOL] [EOL] project . contact_details . add ( ProjectContactDetails ( service = [string] , value = self . get_field ( node , [string] ) ) ) [EOL] [EOL] [comment] [EOL] project . funding . clear ( ) [EOL] [EOL] years = self . ensure_iterable ( node [ [string] ] ) [EOL] amounts = self . ensure_iterable ( node [ [string] ] ) [EOL] durations = self . ensure_iterable ( node [ [string] ] ) [EOL] funds = self . ensure_iterable ( node [ [string] ] ) [EOL] for year , amount , duration , fund in itertools . zip_longest ( years , amounts , durations , funds ) : [EOL] try : [EOL] fund = self . funds [ fund [ [string] ] ] [EOL] except TypeError : [EOL] fund = None [EOL] [EOL] try : [EOL] duration = duration [ [string] ] [EOL] except TypeError : [EOL] duration = [number] [EOL] [EOL] try : [EOL] amount = amount [ [string] ] [EOL] except TypeError : [EOL] [comment] [EOL] continue [EOL] [EOL] project . funding . add ( ProjectFunding ( value = amount , year = year [ [string] ] , duration = duration , source = fund , ) ) [EOL] [EOL] category_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] categories = { } [EOL] for category in category_fields : [EOL] terms = self . ensure_iterable ( node [ category ] ) [EOL] for term in terms : [EOL] option = self . get_referenced_term ( term [ [string] ] ) [EOL] if option : [EOL] categories . setdefault ( option . category . id , [ ] ) . append ( option . id ) [EOL] [EOL] project . categories = json . dumps ( categories ) [EOL] [EOL] try : [EOL] if not project . get_parent ( ) : [EOL] self . parent_page . add_child ( instance = project ) [EOL] project . save_revision ( ) . publish ( ) [EOL] self . stdout . write ( f" [string] { node [ [string] ] . encode ( [string] ) } [string] { node [ [string] ] } [string] " ) [EOL] except IntegrityError : [EOL] self . stdout . write ( f" [string] { node [ [string] ] } [string] { node [ [string] ] } [string] " ) [EOL] pass [EOL] [EOL] def ensure_iterable ( self , value ) : [EOL] if isinstance ( value , dict ) : [EOL] value = [ value ] [EOL] return value [EOL] [EOL] def get_field ( self , node , field ) : [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] pass [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] return [string] [EOL] [EOL] def get_referenced_term ( self , tid ) : [EOL] try : [EOL] return self . terms [ tid ] [EOL] except KeyError : [EOL] return None [EOL] [EOL] def nl2br ( self , value ) : [EOL] return value . replace ( [string] , [string] ) [EOL] [EOL] @ staticmethod def wagtail_image_obj_from_url ( url , drupal_id = None ) : [EOL] [docstring] [EOL] [EOL] if drupal_id is not None and drupal_id : [EOL] try : [EOL] return WagtailImage . objects . get ( drupal_id = drupal_id ) [EOL] except WagtailImage . DoesNotExist : [EOL] pass [EOL] [EOL] if url and valid_url_extension ( url ) and valid_url_mimetype ( url ) : [EOL] r = requests . get ( url , stream = True ) [EOL] [EOL] if r . status_code == requests . codes . ok : [EOL] img_buffer = BytesIO ( r . content ) [EOL] img_filename = url . rsplit ( [string] , [number] ) [ [number] ] [EOL] [EOL] [comment] [EOL] try : [EOL] pil_image = Image . open ( img_buffer ) [EOL] pil_image . verify ( ) [EOL] except Exception as e : [EOL] print ( f" [string] { url } [string] { e }" ) [EOL] else : [EOL] img = WagtailImage . objects . create ( title = img_filename , file = ImageFile ( img_buffer , name = img_filename ) , drupal_id = drupal_id ) [EOL] return img [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.projects.management.commands.migrate_projects.Command]$ 0 0 0 0 0 $typing.Type[hypha.public.projects.management.commands.migrate_projects.Command]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $urllib.parse.SplitResult$ 0 0 0 $urllib.parse.SplitResult$ 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $None$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $None$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 $hypha.public.projects.models.ProjectPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
	0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from wagtail . core import blocks [EOL] from wagtail . images . blocks import ImageChooserBlock [EOL] [EOL] [EOL] class OurWorkBlock ( blocks . StructBlock ) : [EOL] icon = ImageChooserBlock ( ) [EOL] description = blocks . TextBlock ( help_text = [string] ) [EOL] [EOL] class Meta : [EOL] template = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.home.blocks.OurWorkBlock]$ 0 0 0 0 0 $typing.Type[hypha.public.home.blocks.OurWorkBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] import wagtail . images . blocks [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( default = [number] , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , preserve_default = False , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( max_length = [number] , default = [string] ) , preserve_default = False , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( max_length = [number] , default = [string] ) , preserve_default = False , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . images . blocks . ImageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . TextBlock ( help_text = [string] ) ) ) ) ) , ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . ListBlock ( wagtail . core . blocks . StreamBlock ( ( ( [string] , wagtail . core . blocks . CharBlock ( ) ) , ) ) ) ) , ) , default = [ ] ) , preserve_default = False , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from wagtail . core . models import Site [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] parser . add_argument ( [string] , type = int , help = [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] site_apply = Site . objects . get ( id = [number] ) [EOL] site_apply . hostname = options [ [string] ] [EOL] site_apply . port = options [ [string] ] [EOL] site_apply . save ( ) [EOL] [EOL] site_public = Site . objects . get ( id = [number] ) [EOL] site_public . hostname = options [ [string] ] [EOL] site_public . port = options [ [string] ] [EOL] site_public . save ( ) [EOL] [EOL] self . stdout . write ( f" [string] { options [ [string] ] } [string] { options [ [string] ] } [string] { options [ [string] ] } [string] { options [ [string] ] } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter ( name = [string] , is_safe = True ) def spanify ( text , num_words ) : [EOL] parts = text . split ( ) [EOL] parts . insert ( num_words , [string] ) [EOL] parts . insert ( [number] , [string] ) [EOL] return mark_safe ( [string] . join ( parts ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import hypha [EOL] from modelcluster . models import ClusterableModel [EOL] from wagtail . admin . edit_handlers import StreamFieldPanel [EOL] from wagtail . contrib . settings . models import BaseSetting , register_setting [EOL] from wagtail . core import blocks [EOL] from wagtail . core . fields import StreamField [EOL] [EOL] [EOL] class LinkBlock ( blocks . StructBlock ) : [EOL] page = blocks . PageChooserBlock ( ) [EOL] title = blocks . CharBlock ( help_text = [string] , required = False ) [EOL] [EOL] class Meta : [EOL] template = [string] , [EOL] [EOL] [EOL] @ register_setting ( icon = [string] ) class NavigationSettings ( BaseSetting , ClusterableModel ) : [EOL] primary_navigation = StreamField ( [ ( [string] , LinkBlock ( ) ) , ] , blank = True , help_text = [string] ) [EOL] [EOL] panels = [ StreamFieldPanel ( [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( help_text = [string] , required = False ) ) ) ) ) , ) , blank = True , help_text = [string] ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( help_text = [string] , required = False ) ) ) ) ) , ) , blank = True , help_text = [string] ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . CharBlock ( required = False , help_text = [string] ) ) , ( [string] , wagtail . core . blocks . ListBlock ( wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( help_text = [string] , required = False ) ) ) ) ) ) ) ) ) , ) , blank = True , help_text = [string] ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( help_text = [string] , required = False ) ) ) ) ) , ) , blank = True , help_text = [string] ) ) , ( [string] , models . OneToOneField ( editable = False , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] from wagtail . core . models import Site [EOL] [EOL] from hypha . public . navigation . models import NavigationSettings [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] [comment] [EOL] @ register . inclusion_tag ( [string] , takes_context = True ) def primarynav ( context ) : [EOL] request = context [ [string] ] [EOL] site_from_request = Site . find_for_request ( request ) [EOL] site = context . get ( [string] , site_from_request ) [EOL] apply_site = context . get ( [string] , site_from_request ) [EOL] return { [string] : NavigationSettings . for_site ( site ) . primary_navigation , [string] : request , [string] : apply_site , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . syndication . views import Feed [EOL] from django . core . cache import cache [EOL] from django . db . models . functions import Coalesce [EOL] from django . http import Http404 [EOL] from wagtail . core . models import Site [EOL] [EOL] from hypha . public . news . models import NewsFeedSettings , NewsIndex , NewsPage , NewsType [EOL] [EOL] [EOL] class NewsFeed ( Feed ) : [EOL] def __call__ ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] self . site = Site . objects . get ( is_default_site = True ) [EOL] except Site . DoesNotExist : [EOL] raise Http404 [EOL] self . news_feed_settings = NewsFeedSettings . for_site ( site = self . site ) [EOL] [EOL] cache_key = self . get_cache_key ( * args , ** kwargs ) [EOL] response = cache . get ( cache_key ) [EOL] [EOL] if response is None : [EOL] response = super ( ) . __call__ ( request , * args , ** kwargs ) [EOL] cache . set ( cache_key , response , settings . FEED_CACHE_TIMEOUT ) [EOL] [EOL] return response [EOL] [EOL] def get_cache_key ( self , * args , ** kwargs ) : [EOL] tag = [string] [EOL] for key , value in kwargs . items ( ) : [EOL] tag += f" [string] { key } [string] { value }" [EOL] return f"{ self . __class__ . __module__ }{ tag }" [EOL] [EOL] def title ( self ) : [EOL] return self . news_feed_settings . news_title [EOL] [EOL] def description ( self ) : [EOL] return self . news_feed_settings . news_description [EOL] [EOL] def link ( self ) : [EOL] news_index = NewsIndex . objects . live ( ) . public ( ) . first ( ) [EOL] if news_index : [EOL] return news_index . full_url [EOL] return self . site . root_url [EOL] [EOL] def items ( self ) : [EOL] return NewsPage . objects . live ( ) . public ( ) . annotate ( date = Coalesce ( [string] , [string] ) ) . order_by ( [string] ) [ : [number] ] [EOL] [EOL] def item_title ( self , item ) : [EOL] return item . title [EOL] [EOL] def item_description ( self , item ) : [EOL] return item . body [EOL] [EOL] def item_pubdate ( self , item ) : [EOL] return item . display_date [EOL] [EOL] [EOL] class NewsTypeFeed ( NewsFeed ) : [EOL] def get_object ( self , request , news_type ) : [EOL] return NewsType . objects . get ( id = news_type ) [EOL] [EOL] def title ( self , obj ) : [EOL] return self . news_feed_settings . news_per_type_title . format ( news_type = obj ) [EOL] [EOL] def description ( self , obj ) : [EOL] return self . news_feed_settings . news_per_type_description . format ( news_type = obj ) [EOL] [EOL] def link ( self , obj ) : [EOL] news_index = NewsIndex . objects . live ( ) . public ( ) . first ( ) [EOL] if news_index : [EOL] return f"{ news_index . full_url } [string] { obj . id }" [EOL] return self . site . root_url [EOL] [EOL] def items ( self , obj ) : [EOL] return NewsPage . objects . live ( ) . public ( ) . filter ( news_types__news_type = obj ) . annotate ( date = Coalesce ( [string] , [string] ) ) . order_by ( [string] ) [ : [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from wagtail . core import blocks [EOL] [EOL] from hypha . public . utils . blocks import StoryBlock [EOL] [EOL] [EOL] class AwesomeTableWidgetBlock ( blocks . StructBlock ) : [EOL] table_id = blocks . CharBlock ( classname = [string] , help_text = [string] ) [EOL] [EOL] class Meta : [EOL] icon = [string] [EOL] template = [string] [EOL] [EOL] [EOL] class NewsStoryBlock ( StoryBlock ) : [EOL] awesome_table_widget = AwesomeTableWidgetBlock ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.news.blocks.AwesomeTableWidgetBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.blocks.AwesomeTableWidgetBlock$ 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import List , Any , Type , Dict [EOL] import typing [EOL] import hypha [EOL] import argparse [EOL] import json [EOL] from datetime import datetime , timezone [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from django . db . utils import IntegrityError [EOL] from wagtail . admin . rich_text . converters . editor_html import EditorHTMLConverter [EOL] from wagtail . core . rich_text import RichText [EOL] [EOL] from hypha . apply . categories . categories_seed import CATEGORIES [EOL] from hypha . apply . categories . models import Category , Option [EOL] from hypha . apply . users . models import User [EOL] from hypha . public . news . models import ( NewsIndex , NewsPage , NewsPageAuthor , NewsPageNewsType , NewsProjectRelatedPage , NewsType , ) [EOL] from hypha . public . people . models import PersonPage [EOL] from hypha . public . projects . models import ProjectPage [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] data = [ ] [EOL] terms = { } [EOL] whitelister = EditorHTMLConverter ( ) . whitelister [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) , help = [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] [comment] [EOL] for item in CATEGORIES : [EOL] category , _ = Category . objects . get_or_create ( name = item [ [string] ] ) [EOL] option , _ = Option . objects . get_or_create ( value = item [ [string] ] , category = category ) [EOL] self . terms [ item [ [string] ] ] = option [EOL] [EOL] self . parent_page = NewsIndex . objects . first ( ) [EOL] [EOL] if not self . parent_page : [EOL] raise NewsIndex . DoesNotExist ( [string] ) [EOL] [EOL] self . types = { [string] : NewsType . objects . get_or_create ( title = [string] ) [ [number] ] , [string] : NewsType . objects . get_or_create ( title = [string] ) [ [number] ] , [string] : NewsType . objects . get_or_create ( title = [string] ) [ [number] ] , } [EOL] [EOL] with options [ [string] ] as json_data : [EOL] self . data = json . load ( json_data ) [EOL] [EOL] counter = [number] [EOL] for id in self . data : [EOL] self . process ( id ) [EOL] counter += [number] [EOL] [EOL] self . stdout . write ( f" [string] { counter } [string] " ) [EOL] [EOL] def process ( self , id ) : [EOL] node = self . data [ id ] [EOL] [EOL] try : [EOL] news = NewsPage . objects . get ( drupal_id = node [ [string] ] ) [EOL] except NewsPage . DoesNotExist : [EOL] news = NewsPage ( drupal_id = node [ [string] ] ) [EOL] [EOL] [comment] [EOL] news . submit_time = datetime . fromtimestamp ( int ( node [ [string] ] ) , timezone . utc ) [EOL] news . publication_date = datetime . fromtimestamp ( int ( node [ [string] ] ) , timezone . utc ) [EOL] [EOL] news . title = node [ [string] ] [EOL] [EOL] news . introduction = self . get_field ( node , [string] ) [EOL] [EOL] cleaned_body = self . whitelister . clean ( self . get_field ( node , [string] ) ) [EOL] news . body = [ ( [string] , RichText ( cleaned_body ) ) ] [EOL] [EOL] news . news_types . clear ( ) [EOL] for news_type in self . ensure_iterable ( node [ [string] ] ) : [EOL] news . news_types . add ( NewsPageNewsType ( news_type = self . types [ news_type [ [string] ] ] , ) ) [EOL] [EOL] news . related_projects . clear ( ) [EOL] for project in self . ensure_iterable ( node [ [string] ] ) : [EOL] try : [EOL] project_page = ProjectPage . objects . get ( drupal_id = project [ [string] ] ) [EOL] except ProjectPage . DoesNotExist : [EOL] self . stdout . write ( f" [string] { project [ [string] ] }" ) [EOL] else : [EOL] news . related_projects . add ( NewsProjectRelatedPage ( page = project_page , ) ) [EOL] [EOL] news . authors . clear ( ) [EOL] for author in self . ensure_iterable ( node [ [string] ] ) : [EOL] user = User . objects . get ( drupal_id = author [ [string] ] ) [EOL] news . authors . add ( NewsPageAuthor ( author = PersonPage . objects . get ( title = user . full_name ) ) ) [EOL] [EOL] try : [EOL] user = User . objects . get ( drupal_id = node [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] pass [EOL] else : [EOL] user_map = { [string] : [string] } [EOL] name = user_map . get ( user . full_name , user . full_name ) [EOL] [comment] [EOL] try : [EOL] news . authors . add ( NewsPageAuthor ( author = PersonPage . objects . get ( title = name ) ) ) [EOL] except PersonPage . DoesNotExist : [EOL] self . stdout . write ( f' [string] { name }' ) [EOL] [EOL] try : [EOL] if not news . get_parent ( ) : [EOL] self . parent_page . add_child ( instance = news ) [EOL] news . save_revision ( ) . publish ( ) [EOL] self . stdout . write ( f" [string] { node [ [string] ] . encode ( [string] ) } [string] { node [ [string] ] } [string] " ) [EOL] except IntegrityError : [EOL] self . stdout . write ( f" [string] { node [ [string] ] } [string] { node [ [string] ] } [string] " ) [EOL] [EOL] def ensure_iterable ( self , value ) : [EOL] if isinstance ( value , dict ) : [EOL] value = [ value ] [EOL] return value [EOL] [EOL] def get_field ( self , node , field ) : [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] pass [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.news.management.commands.migrate_news.Command]$ 0 0 0 0 0 $typing.Type[hypha.public.news.management.commands.migrate_news.Command]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.news.models.NewsPage$ 0 0 $hypha.public.news.models.NewsPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . OneToOneField ( editable = False , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django import forms [EOL] [EOL] [EOL] class NewsletterForm ( forms . Form ) : [EOL] email = forms . EmailField ( label = [string] ) [EOL] fname = forms . CharField ( label = [string] , required = False ) [EOL] lname = forms . CharField ( label = [string] , required = False ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] for field in self . fields . values ( ) : [EOL] class_name = [string] [EOL] if field . required : [EOL] class_name += [string] [EOL] field . widget . attrs = { [string] : class_name } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.mailchimp.forms.NewsletterForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.mailchimp.forms.NewsletterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.mailchimp.forms.NewsletterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import MailchimpSubscribeView [EOL] [EOL] app_name = [string] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , MailchimpSubscribeView . as_view ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import hypha [EOL] from django . db import models [EOL] from wagtail . admin . edit_handlers import FieldPanel [EOL] from wagtail . contrib . settings . models import BaseSetting , register_setting [EOL] [EOL] [EOL] @ register_setting class NewsletterSettings ( BaseSetting ) : [EOL] class Meta : [EOL] verbose_name = [string] [EOL] [EOL] newsletter_title = models . CharField ( [string] , max_length = [number] , default = [string] , help_text = [string] , ) [EOL] [EOL] panels = [ FieldPanel ( [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MailchimpConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Pattern , Dict , Any , Union , Type [EOL] import typing [EOL] import hypha [EOL] import urllib [EOL] import re [EOL] from unittest import mock [EOL] from urllib import parse [EOL] [EOL] import responses [EOL] from django . test import TestCase , override_settings [EOL] from django . urls import reverse [EOL] [EOL] any_url = re . compile ( [string] ) [EOL] [EOL] [EOL] class TestNewsletterView ( TestCase ) : [EOL] url = reverse ( [string] ) [EOL] [EOL] def setUp ( self ) : [EOL] self . origin = [string] [EOL] self . client . defaults = { [string] : self . origin } [EOL] [EOL] def assertNewsletterRedirects ( self , response , target_url , * args , ** kwargs ) : [EOL] url = response . redirect_chain [ [number] ] [ [number] ] [EOL] parts = parse . urlsplit ( url ) [EOL] self . assertTrue ( parts . query . startswith ( [string] ) ) [EOL] [EOL] target_url = target_url + [string] + parts . query [EOL] [EOL] return self . assertRedirects ( response , target_url , * args , ** kwargs ) [EOL] [EOL] def test_redirected_home_if_get ( self ) : [EOL] response = self . client . get ( self . url , secure = True , follow = True ) [EOL] request = response . request [EOL] self . assertRedirects ( response , [string] . format ( request [ [string] ] , request [ [string] ] ) ) [EOL] [EOL] @ override_settings ( MAILCHIMP_API_KEY = [string] * [number] , MAILCHIMP_LIST_ID = [string] ) @ responses . activate def test_can_subscribe ( self ) : [EOL] responses . add ( responses . POST , any_url , json = { [string] : [string] } , status = [number] ) [EOL] [EOL] response = self . client . post ( self . url , data = { [string] : [string] } , secure = True , follow = True ) [EOL] self . assertNewsletterRedirects ( response , self . origin ) [EOL] [EOL] messages = list ( response . context [ [string] ] ) [EOL] self . assertEqual ( len ( messages ) , [number] ) [EOL] self . assertIn ( [string] , str ( messages [ [number] ] ) ) [EOL] [EOL] def test_error_in_form ( self ) : [EOL] response = self . client . post ( self . url , data = { [string] : [string] } , secure = True , follow = True ) [EOL] self . assertNewsletterRedirects ( response , self . origin ) [EOL] [EOL] messages = list ( response . context [ [string] ] ) [EOL] self . assertEqual ( len ( messages ) , [number] ) [EOL] self . assertIn ( [string] , str ( messages [ [number] ] ) ) [EOL] [EOL] @ override_settings ( MAILCHIMP_API_KEY = [string] * [number] , MAILCHIMP_LIST_ID = [string] ) @ responses . activate @ mock . patch ( [string] ) def test_error_with_mailchimp ( self , logger ) : [EOL] [comment] [EOL] response_data = { [string] : [string] , [string] : [number] , [string] : [string] , } [EOL] responses . add ( responses . POST , any_url , json = response_data , status = [number] ) [EOL] response = self . client . post ( self . url , data = { [string] : [string] } , secure = True , follow = True ) [EOL] [EOL] self . assertNewsletterRedirects ( response , self . origin ) [EOL] [EOL] messages = list ( response . context [ [string] ] ) [EOL] self . assertEqual ( len ( messages ) , [number] ) [EOL] self . assertIn ( [string] , str ( messages [ [number] ] ) ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.mailchimp.tests.TestNewsletterView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Type [EOL] import typing [EOL] import hypha [EOL] import logging [EOL] import logging [EOL] import uuid [EOL] [EOL] from django . conf import settings [EOL] from django . contrib import messages [EOL] from django . http import HttpResponseRedirect [EOL] from django . utils . decorators import method_decorator [EOL] from django . utils . translation import gettext as _ [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . views . generic import RedirectView [EOL] from django . views . generic . edit import FormMixin [EOL] from mailchimp3 import MailChimp [EOL] [EOL] from . forms import NewsletterForm [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class MailchimpSubscribeView ( FormMixin , RedirectView ) : [EOL] form_class = NewsletterForm [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] form = self . get_form ( ) [EOL] if form . is_valid ( ) : [EOL] return self . form_valid ( form ) [EOL] else : [EOL] return self . form_invalid ( form ) [EOL] [EOL] def form_invalid ( self , form ) : [EOL] self . error ( form ) [EOL] return HttpResponseRedirect ( self . get_success_url ( ) ) [EOL] [EOL] def form_valid ( self , form ) : [EOL] mailchimp_enabled = settings . MAILCHIMP_API_KEY and settings . MAILCHIMP_LIST_ID [EOL] [EOL] dummy_key = [string] * [number] [EOL] [EOL] client = MailChimp ( mc_api = settings . MAILCHIMP_API_KEY or dummy_key , timeout = [number] , enabled = mailchimp_enabled ) [EOL] [EOL] data = form . cleaned_data . copy ( ) [EOL] email = data . pop ( [string] ) [EOL] data = { k . upper ( ) : v for k , v in data . items ( ) } [EOL] try : [EOL] client . lists . members . create ( settings . MAILCHIMP_LIST_ID , { [string] : email , [string] : [string] , [string] : data , } ) [EOL] except Exception as e : [EOL] self . warning ( e ) [EOL] else : [EOL] if mailchimp_enabled : [EOL] self . success ( ) [EOL] else : [EOL] self . warning ( Exception ( [string] . format ( str ( settings . MAILCHIMP_API_KEY ) , str ( settings . MAILCHIMP_LIST_ID ) , ) ) ) [EOL] [EOL] return super ( ) . form_valid ( form ) [EOL] [EOL] def error ( self , form ) : [EOL] messages . error ( self . request , _ ( [string] ) + str ( form . errors ) ) [EOL] [EOL] def warning ( self , e ) : [EOL] messages . warning ( self . request , _ ( [string] ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def success ( self ) : [EOL] messages . success ( self . request , _ ( [string] ) ) [EOL] [EOL] def get_success_url ( self ) : [EOL] [comment] [EOL] origin = self . request . META . get ( [string] ) or self . request . META . get ( [string] ) or [string] [EOL] [EOL] [comment] [EOL] return origin + [string] + uuid . uuid4 ( ) . hex [EOL] [EOL] def get_redirect_url ( self ) : [EOL] [comment] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.mailchimp.forms.NewsletterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . contrib . staticfiles . templatetags . staticfiles import static [EOL] from django . utils . safestring import mark_safe [EOL] from wagtail . core import hooks [EOL] [EOL] [EOL] @ hooks . register ( [string] ) def editor_js ( ) : [EOL] return mark_safe ( [string] % static ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import List , Any , Type , Dict [EOL] import typing [EOL] import hypha [EOL] import requests [EOL] import io [EOL] import argparse [EOL] import itertools [EOL] import json [EOL] import mimetypes [EOL] from datetime import datetime , timezone [EOL] from io import BytesIO [EOL] from urllib . parse import urlsplit [EOL] [EOL] import bleach [EOL] import requests [EOL] from django . core . files . images import ImageFile [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from django . db . utils import IntegrityError [EOL] from PIL import Image [EOL] from wagtail . admin . rich_text . converters . editor_html import EditorHTMLConverter [EOL] from wagtail . core . models import Page [EOL] from wagtail . core . rich_text import RichText [EOL] from wagtail . images import get_image_model [EOL] [EOL] from hypha . apply . categories . categories_seed import CATEGORIES [EOL] from hypha . apply . categories . models import Category , Option [EOL] from hypha . public . people . models import ( Funding , FundReviewers , PersonContactInfomation , PersonIndexPage , PersonPage , PersonPagePersonType , PersonType , SocialMediaProfile , ) [EOL] [EOL] WagtailImage = get_image_model ( ) [EOL] [EOL] VALID_IMAGE_EXTENSIONS = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] VALID_IMAGE_MIMETYPES = [ [string] ] [EOL] [EOL] [EOL] def valid_url_extension ( url , extension_list = VALID_IMAGE_EXTENSIONS ) : [EOL] return any ( [ url . endswith ( e ) for e in extension_list ] ) [EOL] [EOL] [EOL] def valid_url_mimetype ( url , mimetype_list = VALID_IMAGE_MIMETYPES ) : [EOL] mimetype , encoding = mimetypes . guess_type ( url ) [EOL] if mimetype : [EOL] return any ( [ mimetype . startswith ( m ) for m in mimetype_list ] ) [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] data = [ ] [EOL] terms = { } [EOL] whitelister = EditorHTMLConverter ( ) . whitelister [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) , help = [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] [comment] [EOL] for item in CATEGORIES : [EOL] category , _ = Category . objects . get_or_create ( name = item [ [string] ] ) [EOL] option , _ = Option . objects . get_or_create ( value = item [ [string] ] , category = category ) [EOL] self . terms [ item [ [string] ] ] = option [EOL] [EOL] self . parent_page = PersonIndexPage . objects . first ( ) [EOL] [EOL] if not self . parent_page : [EOL] raise PersonIndexPage . DoesNotExist ( [string] ) [EOL] [EOL] self . types = { [string] : PersonType . objects . get_or_create ( title = [string] ) [ [number] ] , [string] : PersonType . objects . get_or_create ( title = [string] ) [ [number] ] , [string] : PersonType . objects . get_or_create ( title = [string] ) [ [number] ] , } [EOL] [EOL] self . funds = { [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : None , [string] : Page . objects . get ( title = [string] ) , } [EOL] [EOL] self . review_funds = { [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , [string] : Page . objects . get ( title = [string] ) , } [EOL] [EOL] with options [ [string] ] as json_data : [EOL] self . data = json . load ( json_data ) [EOL] [EOL] counter = [number] [EOL] for id in self . data : [EOL] self . process ( id ) [EOL] counter += [number] [EOL] [EOL] self . stdout . write ( f" [string] { counter } [string] " ) [EOL] [EOL] def process ( self , id ) : [EOL] node = self . data [ id ] [EOL] print ( node [ [string] ] . encode ( [string] ) ) [EOL] [EOL] try : [EOL] person = PersonPage . objects . get ( drupal_id = node [ [string] ] ) [EOL] except PersonPage . DoesNotExist : [EOL] person = PersonPage ( drupal_id = node [ [string] ] ) [EOL] [EOL] [comment] [EOL] person . submit_time = datetime . fromtimestamp ( int ( node [ [string] ] ) , timezone . utc ) [EOL] [EOL] * first_name , last_name = node [ [string] ] . split ( ) [EOL] [EOL] person . first_name = [string] . join ( first_name ) [EOL] person . last_name = last_name [EOL] [EOL] person . title = node [ [string] ] [EOL] [EOL] person . job_title = self . get_field ( node , [string] ) [EOL] [EOL] person . active = bool ( int ( node [ [string] ] [ [string] ] ) ) [EOL] [EOL] person . person_types . clear ( ) [EOL] for person_type in self . ensure_iterable ( node [ [string] ] ) : [EOL] person . person_types . add ( PersonPagePersonType ( person_type = self . types [ person_type [ [string] ] ] , ) ) [EOL] [EOL] image_url_base = [string] [EOL] [EOL] try : [EOL] uri = node [ [string] ] [ [string] ] [EOL] except TypeError : [EOL] [comment] [EOL] pass [EOL] else : [EOL] parts = urlsplit ( uri ) [EOL] image_url = image_url_base + parts . netloc + parts . path [EOL] person . photo = self . wagtail_image_obj_from_url ( image_url , node [ [string] ] [ [string] ] ) [EOL] [EOL] cleaned_body = self . whitelister . clean ( self . get_field ( node , [string] ) ) [EOL] [EOL] [comment] [EOL] very_clean_body = bleach . clean ( cleaned_body , strip = True ) [EOL] very_clean_body = very_clean_body . replace ( [string] , [string] ) [EOL] parts = very_clean_body . split ( [string] ) [EOL] introduction = [string] [EOL] while len ( introduction ) < [number] : [EOL] try : [EOL] introduction += parts . pop ( [number] ) [EOL] introduction += [string] [EOL] except IndexError : [EOL] break [EOL] [EOL] introduction = introduction . strip ( ) [EOL] person . introduction = introduction [EOL] body_without_intro = cleaned_body . replace ( introduction , [string] ) . strip ( ) [EOL] person . biography = [ ( [string] , RichText ( body_without_intro ) ) ] [EOL] [EOL] person . social_media_profile . clear ( ) [EOL] [EOL] if self . get_field ( node , [string] ) : [EOL] person . social_media_profile . add ( SocialMediaProfile ( service = [string] , username = self . get_field ( node , [string] ) ) ) [EOL] [EOL] person . contact_details . clear ( ) [EOL] for contact in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] if self . get_field ( node , f' [string] { contact }' ) : [EOL] person . contact_details . add ( PersonContactInfomation ( contact_method = contact , contact_detail = self . get_field ( node , f' [string] { contact }' ) ) ) [EOL] [EOL] person . funds_reviewed . clear ( ) [EOL] for reviewer in self . ensure_iterable ( node [ [string] ] ) : [EOL] person . funds_reviewed . add ( FundReviewers ( page = self . review_funds [ reviewer [ [string] ] ] , ) ) [EOL] [EOL] [comment] [EOL] person . funding . clear ( ) [EOL] [EOL] years = self . ensure_iterable ( node [ [string] ] ) [EOL] amounts = self . ensure_iterable ( node [ [string] ] ) [EOL] durations = self . ensure_iterable ( node [ [string] ] ) [EOL] funds = self . ensure_iterable ( node [ [string] ] ) [EOL] for year , amount , duration , fund in itertools . zip_longest ( years , amounts , durations , funds ) : [EOL] try : [EOL] fund = self . funds [ fund [ [string] ] ] [EOL] except TypeError : [EOL] fund = None [EOL] [EOL] try : [EOL] duration = duration [ [string] ] [EOL] except TypeError : [EOL] duration = [number] [EOL] [EOL] try : [EOL] amount = amount [ [string] ] [EOL] except TypeError : [EOL] [comment] [EOL] continue [EOL] [EOL] person . funding . add ( Funding ( value = amount , year = year [ [string] ] , duration = duration , source = fund , ) ) [EOL] [EOL] try : [EOL] if not person . get_parent ( ) : [EOL] self . parent_page . add_child ( instance = person ) [EOL] person . save_revision ( ) . publish ( ) [EOL] self . stdout . write ( f" [string] { node [ [string] ] . encode ( [string] ) } [string] { node [ [string] ] } [string] " ) [EOL] except IntegrityError : [EOL] self . stdout . write ( f" [string] { node [ [string] ] } [string] { node [ [string] ] } [string] " ) [EOL] pass [EOL] [EOL] def ensure_iterable ( self , value ) : [EOL] if isinstance ( value , dict ) : [EOL] value = [ value ] [EOL] return value [EOL] [EOL] def get_field ( self , node , field ) : [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] pass [EOL] try : [EOL] return node [ field ] [ [string] ] [EOL] except TypeError : [EOL] return [string] [EOL] [EOL] def get_referenced_term ( self , tid ) : [EOL] try : [EOL] return self . terms [ tid ] [EOL] except KeyError : [EOL] return None [EOL] [EOL] def nl2br ( self , value ) : [EOL] return value . replace ( [string] , [string] ) [EOL] [EOL] @ staticmethod def wagtail_image_obj_from_url ( url , drupal_id = None ) : [EOL] [docstring] [EOL] [EOL] if drupal_id is not None and drupal_id : [EOL] try : [EOL] return WagtailImage . objects . get ( drupal_id = drupal_id ) [EOL] except WagtailImage . DoesNotExist : [EOL] pass [EOL] [EOL] if url and valid_url_extension ( url ) and valid_url_mimetype ( url ) : [EOL] r = requests . get ( url , stream = True ) [EOL] [EOL] if r . status_code == requests . codes . ok : [EOL] img_buffer = BytesIO ( r . content ) [EOL] img_filename = url . rsplit ( [string] , [number] ) [ [number] ] [EOL] [EOL] [comment] [EOL] try : [EOL] pil_image = Image . open ( img_buffer ) [EOL] pil_image . verify ( ) [EOL] except Exception as e : [EOL] print ( f" [string] { url } [string] { e }" ) [EOL] else : [EOL] img = WagtailImage . objects . create ( title = img_filename , file = ImageFile ( img_buffer , name = img_filename ) , drupal_id = drupal_id ) [EOL] return img [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hypha.public.people.management.commands.migrate_people.Command]$ 0 0 0 0 0 $typing.Type[hypha.public.people.management.commands.migrate_people.Command]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $None$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.people.models.PersonPage$ 0 0 $hypha.public.people.models.PersonPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import modelcluster . fields [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] import wagtail . documents . blocks [EOL] import wagtail . embeds . blocks [EOL] import wagtail . images . blocks [EOL] import wagtail . snippets . blocks [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ] , options = { [string] : False , } , bases = ( [string] , models . Model ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , wagtail . core . fields . StreamField ( ( ( [string] , wagtail . core . blocks . CharBlock ( classname = [string] , icon = [string] ) ) , ( [string] , wagtail . core . blocks . RichTextBlock ( ) ) , ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . images . blocks . ImageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ) ) ) , ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . core . blocks . CharBlock ( classname = [string] ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ) ) ) , ( [string] , wagtail . embeds . blocks . EmbedBlock ( ) ) , ( [string] , wagtail . snippets . blocks . SnippetChooserBlock ( [string] , template = [string] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( ( ( [string] , wagtail . documents . blocks . DocumentChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ) ) ) ) ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , models . Model ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( blank = True , editable = False , null = True ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , modelcluster . fields . ParentalKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ] , options = { [string] : [ [string] ] , [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] import wagtail . documents . blocks [EOL] import wagtail . embeds . blocks [EOL] import wagtail . images . blocks [EOL] import wagtail . snippets . blocks [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = wagtail . core . fields . StreamField ( [ ( [string] , wagtail . core . blocks . CharBlock ( classname = [string] , icon = [string] ) ) , ( [string] , wagtail . core . blocks . RichTextBlock ( ) ) , ( [string] , wagtail . core . blocks . StructBlock ( [ ( [string] , wagtail . core . blocks . RichTextBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( [ ( [string] , wagtail . core . blocks . PageChooserBlock ( ) ) ] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( [ ( [string] , wagtail . images . blocks . ImageChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( [ ( [string] , wagtail . core . blocks . CharBlock ( classname = [string] ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ] ) ) , ( [string] , wagtail . embeds . blocks . EmbedBlock ( ) ) , ( [string] , wagtail . snippets . blocks . SnippetChooserBlock ( [string] , template = [string] ) ) , ( [string] , wagtail . core . blocks . StructBlock ( [ ( [string] , wagtail . documents . blocks . DocumentChooserBlock ( ) ) , ( [string] , wagtail . core . blocks . CharBlock ( required = False ) ) ] ) ) ] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str
import hypha [EOL] from wagtail . core . blocks import StaticBlock [EOL] [EOL] from hypha . public . utils . blocks import StoryBlock [EOL] [EOL] [EOL] class ProjectsBlock ( StaticBlock ) : [EOL] class Meta : [EOL] icon = [string] [EOL] label = [string] [EOL] admin_text = f'{ label } [string] ' [EOL] template = [string] [EOL] [EOL] [EOL] class ReviewersBlock ( StaticBlock ) : [EOL] class Meta : [EOL] icon = [string] [EOL] label = [string] [EOL] admin_text = f'{ label } [string] ' [EOL] template = [string] [EOL] [EOL] [EOL] class FundBlock ( StoryBlock ) : [EOL] project_list = ProjectsBlock ( ) [EOL] reviewer_list = ReviewersBlock ( ) [EOL] [EOL] [EOL] class LabBlock ( StoryBlock ) : [EOL] reviewer_list = ReviewersBlock ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.funds.blocks.ProjectsBlock$ 0 0 0 0 0 $hypha.public.funds.blocks.ReviewersBlock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hypha.public.funds.blocks.ReviewersBlock$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FundsConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Tuple , Dict [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def recreate_objects ( apps , schema_editor ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ContentType = apps . get_model ( [string] ) [EOL] [EOL] [EOL] for model_name , new_model_name in [ ( [string] , [string] ) , ] : [EOL] content_type , _ = ContentType . objects . get_or_create ( model = model_name . lower ( ) , app_label = [string] ) [EOL] [EOL] model = apps . get_model ( [string] , model_name ) [EOL] new_model = apps . get_model ( [string] , new_model_name ) [EOL] for obj in new_model . objects . all ( ) : [EOL] field_values = { } [EOL] for field in obj . _meta . fields : [EOL] if field . name not in [ [string] ] : [EOL] field_values [ field . name ] = getattr ( obj , field . name ) [EOL] [EOL] kwargs = { f'{ new_model_name . lower ( ) } [string] ' : obj , [string] : obj . draft_title , [string] : content_type , } [EOL] field_values . update ( ** kwargs ) [EOL] new_obj = model ( ** field_values ) [EOL] new_obj . save ( ) [EOL] [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( recreate_objects , migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import modelcluster . fields [EOL] import hypha . public . funds . blocks [EOL] import wagtail . core . blocks [EOL] import wagtail . core . fields [EOL] import wagtail . documents . blocks [EOL] import wagtail . embeds . blocks [EOL] import wagtail . images . blocks [EOL] import wagtail . snippets . blocks [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ] , options = { [string] : False , } , bases = ( [string] , models . Model ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . base import * [comment] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] WAGTAIL_CACHE = False [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] BASE_URL = [string] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ ] [EOL] [EOL] INSTALLED_APPS = INSTALLED_APPS + [ [string] , ] [EOL] [EOL] [EOL] SECURE_SSL_REDIRECT = False [EOL] [EOL] [comment] [EOL] LOCAL_FILE_LOGGING = False [EOL] LOCAL_FILE_EMAIL = False [EOL] [EOL] try : [EOL] from . local import * [comment] [EOL] except ImportError : [EOL] pass [EOL] [EOL] PROJECTS_ENABLED = True [EOL] PROJECTS_AUTO_CREATE = True [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if LOCAL_FILE_EMAIL : [EOL] EMAIL_BACKEND = [string] [EOL] EMAIL_FILE_PATH = BASE_DIR + [string] [EOL] [EOL] [comment] [EOL] if LOCAL_FILE_LOGGING : [EOL] LOGGING = { [string] : [number] , [string] : True , [string] : { [string] : { [string] : [string] , [string] : [string] } , } , [string] : { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : BASE_DIR + [string] , [string] : [number] , [string] : [number] , [string] : [string] , } , } , [string] : { [string] : { [string] : [ [string] ] , [string] : [string] , [string] : True , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , } , [string] : { [string] : [ [string] ] , [string] : [string] , } , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if DEBUG : [EOL] INSTALLED_APPS = [ * INSTALLED_APPS , [string] , ] [EOL] MIDDLEWARE = [ [string] , * MIDDLEWARE , ] [EOL] [comment] [EOL] [comment] [EOL] INTERNAL_IPS = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DEBUG_TOOLBAR_CONFIG = { [string] : { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } , [string] : True , } [EOL] [EOL] WEBPACK_LOADER [ [string] ] . update ( { [string] : os . path . join ( BASE_DIR , [string] ) , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from . base import * [comment] [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [EOL] [comment] [EOL] env = os . environ . copy ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] from . local import * [comment] [EOL] except ImportError : [EOL] pass [EOL] [EOL] [comment] [EOL] if [string] in env : [EOL] EMAIL_BACKEND = [string] [EOL] ANYMAIL = { [string] : env [ [string] ] , [string] : env . get ( [string] , None ) , [string] : env . get ( [string] , None ) } [EOL] [EOL] [comment] [EOL] if [string] in env : [EOL] import sentry_sdk [EOL] from sentry_sdk . integrations . django import DjangoIntegration [EOL] from sentry_sdk . integrations . celery import CeleryIntegration [EOL] sentry_sdk . init ( dsn = env [ [string] ] , environment = env . get ( [string] , None ) , integrations = [ DjangoIntegration ( ) , CeleryIntegration ( ) ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in env : [EOL] import django_heroku [EOL] django_heroku . settings ( locals ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] import os [EOL] [EOL] import dj_database_url [EOL] [EOL] env = os . environ . copy ( ) [EOL] [EOL] PROJECT_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] BASE_DIR = os . path . dirname ( PROJECT_DIR ) [EOL] [EOL] APP_NAME = env . get ( [string] , [string] ) [EOL] [EOL] DEBUG = False [EOL] [EOL] [EOL] if [string] in env : [EOL] SECRET_KEY = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] ALLOWED_HOSTS = env [ [string] ] . split ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] ORG_LONG_NAME = env . get ( [string] , [string] ) [EOL] ORG_SHORT_NAME = env . get ( [string] , [string] ) [EOL] ORG_EMAIL = env . get ( [string] , [string] ) [EOL] ORG_GUIDE_URL = env . get ( [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] if [string] in env : [EOL] EMAIL_HOST = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] try : [EOL] EMAIL_PORT = int ( env [ [string] ] ) [EOL] except ValueError : [EOL] pass [EOL] [EOL] if [string] in env : [EOL] EMAIL_HOST_USER = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] EMAIL_HOST_PASSWORD = env [ [string] ] [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] EMAIL_USE_TLS = True [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] EMAIL_USE_SSL = True [EOL] [EOL] if [string] in env : [EOL] EMAIL_SUBJECT_PREFIX = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] SERVER_EMAIL = DEFAULT_FROM_EMAIL = env [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( PROJECT_DIR , [string] ) , os . path . join ( PROJECT_DIR , [string] , [string] ) , ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] FORM_RENDERER = [string] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : dj_database_url . config ( conn_max_age = [number] , default = f" [string] { APP_NAME }" ) } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] try : [EOL] CACHE_CONTROL_MAX_AGE = int ( env . get ( [string] , [number] ) ) [EOL] except ValueError : [EOL] CACHE_CONTROL_MAX_AGE = [number] [EOL] [EOL] [comment] [EOL] try : [EOL] CACHE_CONTROL_S_MAXAGE = int ( env . get ( [string] , [number] ) ) [EOL] except ValueError : [EOL] CACHE_CONTROL_S_MAXAGE = [number] [EOL] [EOL] [comment] [EOL] WAGTAIL_CACHE_TIMEOUT = CACHE_CONTROL_MAX_AGE [EOL] [EOL] [comment] [EOL] FEED_CACHE_TIMEOUT = [number] [EOL] [EOL] if [string] in env : [EOL] CACHES = { [string] : { [string] : [string] , [string] : env [ [string] ] , } , [string] : { [string] : [string] , [string] : env [ [string] ] , [string] : [string] , [string] : WAGTAIL_CACHE_TIMEOUT , } } [EOL] else : [EOL] CACHES = { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : WAGTAIL_CACHE_TIMEOUT , } } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CACHES [ [string] ] = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] WAGTAIL_CACHE_BACKEND = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in env and [string] in env : [EOL] INSTALLED_APPS += ( [string] , ) [comment] [EOL] WAGTAILFRONTENDCACHE = { [string] : { [string] : [string] , [string] : env [ [string] ] , [string] : env [ [string] ] , } , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] WAGTAILSEARCH_BACKENDS = { [string] : { [string] : [string] , } , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , [string] : { [string] : [number] , } } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] PASSWORD_RESET_TIMEOUT_DAYS = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = False [EOL] [EOL] USE_TZ = True [EOL] [EOL] DATE_FORMAT = [string] [EOL] [EOL] DATETIME_FORMAT = [string] [EOL] [EOL] SHORT_DATE_FORMAT = [string] [EOL] [EOL] SHORT_DATETIME_FORMAT = [string] [EOL] [EOL] DATETIME_INPUT_FORMATS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATICFILES_STORAGE = [string] [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( PROJECT_DIR , [string] ) , os . path . join ( PROJECT_DIR , [string] ) , ] [EOL] [EOL] STATIC_ROOT = env . get ( [string] , os . path . join ( BASE_DIR , [string] ) ) [EOL] STATIC_URL = env . get ( [string] , [string] ) [EOL] [EOL] MEDIA_ROOT = env . get ( [string] , os . path . join ( BASE_DIR , [string] ) ) [EOL] MEDIA_URL = env . get ( [string] , [string] ) [EOL] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] WAGTAIL_USER_EDIT_FORM = [string] [EOL] WAGTAIL_USER_CREATION_FORM = [string] [EOL] WAGTAIL_USER_CUSTOM_FIELDS = [ [string] ] [EOL] WAGTAIL_PASSWORD_MANAGEMENT_ENABLED = False [EOL] WAGTAILUSERS_PASSWORD_ENABLED = False [EOL] WAGTAILUSERS_PASSWORD_REQUIRED = False [EOL] [EOL] LOGIN_URL = [string] [EOL] LOGIN_REDIRECT_URL = [string] [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] LOGGING = { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , } , [string] : { [string] : { [string] : [string] } } , [string] : { [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] ] , [string] : [string] , [string] : False , } , } , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] WAGTAIL_SITE_NAME = [string] [EOL] [EOL] WAGTAILIMAGES_IMAGE_MODEL = [string] [EOL] WAGTAILIMAGES_FEATURE_DETECTION_ENABLED = False [EOL] [EOL] WAGTAILADMIN_RICH_TEXT_EDITORS = { [string] : { [string] : [string] , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] } } , } [EOL] [EOL] [EOL] PASSWORD_REQUIRED_TEMPLATE = [string] [EOL] [EOL] DEFAULT_PER_PAGE = [number] [EOL] [EOL] ESI_ENABLED = False [EOL] [EOL] [comment] [EOL] [EOL] ENABLE_STYLEGUIDE = False [EOL] DEBUGTOOLBAR = False [EOL] [EOL] [comment] [EOL] [EOL] if [string] in env : [EOL] STAFF_EMAIL_DOMAINS = env [ [string] ] . split ( [string] ) [EOL] else : [EOL] STAFF_EMAIL_DOMAINS = [ ] [EOL] [EOL] [comment] [EOL] SOCIAL_AUTH_URL_NAMESPACE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] in env : [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = env [ [string] ] . split ( [string] ) [EOL] else : [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = STAFF_EMAIL_DOMAINS [EOL] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env . get ( [string] , [string] ) [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env . get ( [string] , [string] ) [EOL] [EOL] SOCIAL_AUTH_LOGIN_ERROR_URL = [string] [EOL] SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] SOCIAL_AUTH_PIPELINE = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [comment] [EOL] BLEACH_ALLOWED_TAGS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] BLEACH_ALLOWED_ATTRIBUTES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] BLEACH_ALLOWED_STYLES = [ ] [EOL] [EOL] BLEACH_STRIP_TAGS = True [EOL] [EOL] BLEACH_STRIP_COMMENTS = True [EOL] [EOL] [comment] [EOL] FILE_ALLOWED_EXTENSIONS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] FILE_ACCEPT_ATTR_VALUE = [string] . join ( [ [string] + ext for ext in FILE_ALLOWED_EXTENSIONS ] ) [EOL] [EOL] [comment] [EOL] HIJACK_LOGIN_REDIRECT_URL = [string] [EOL] HIJACK_LOGOUT_REDIRECT_URL = [string] [EOL] HIJACK_DECORATOR = [string] [EOL] [EOL] [EOL] [comment] [EOL] SEND_MESSAGES = env . get ( [string] , [string] ) . lower ( ) == [string] [EOL] [EOL] if not SEND_MESSAGES : [EOL] from django . contrib . messages import constants as message_constants [EOL] MESSAGE_LEVEL = message_constants . DEBUG [EOL] [EOL] [EOL] SEND_READY_FOR_REVIEW = env . get ( [string] , [string] ) . lower ( ) == [string] [EOL] [EOL] SLACK_DESTINATION_URL = env . get ( [string] , None ) [EOL] SLACK_DESTINATION_ROOM = env . get ( [string] , None ) [EOL] SLACK_DESTINATION_ROOM_COMMENTS = env . get ( [string] , None ) [EOL] if [string] in env : [EOL] SLACK_TYPE_COMMENTS = env [ [string] ] . split ( [string] ) [EOL] else : [EOL] SLACK_TYPE_COMMENTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] if [string] in env : [EOL] CELERY_BROKER_URL = env . get ( [string] ) [EOL] else : [EOL] CELERY_TASK_ALWAYS_EAGER = True [EOL] [EOL] [EOL] [comment] [EOL] [EOL] if [string] in env : [EOL] DEFAULT_FILE_STORAGE = [string] [EOL] PRIVATE_FILE_STORAGE = [string] [EOL] [EOL] AWS_STORAGE_BUCKET_NAME = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_PUBLIC_BUCKET_NAME = env [ [string] ] [EOL] else : [EOL] AWS_PUBLIC_BUCKET_NAME = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_PRIVATE_BUCKET_NAME = env [ [string] ] [EOL] else : [EOL] AWS_PRIVATE_BUCKET_NAME = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_S3_CUSTOM_DOMAIN = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_PRIVATE_CUSTOM_DOMAIN = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_QUERYSTRING_EXPIRE = env [ [string] ] [EOL] [EOL] if [string] in env : [EOL] AWS_PUBLIC_CUSTOM_DOMAIN = env [ [string] ] [EOL] [EOL] INSTALLED_APPS += ( [string] , ) [EOL] [EOL] [EOL] [comment] [EOL] AWS_MIGRATION_BUCKET_NAME = env . get ( [string] , [string] ) [EOL] AWS_MIGRATION_ACCESS_KEY_ID = env . get ( [string] , [string] ) [EOL] AWS_MIGRATION_SECRET_ACCESS_KEY = env . get ( [string] , [string] ) [EOL] [EOL] [EOL] MAILCHIMP_API_KEY = env . get ( [string] ) [EOL] MAILCHIMP_LIST_ID = env . get ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] MIDDLEWARE . insert ( [number] , [string] ) [EOL] BASIC_AUTH_LOGIN = env [ [string] ] [EOL] BASIC_AUTH_PASSWORD = env [ [string] ] [EOL] if [string] in env : [EOL] BASIC_AUTH_WHITELISTED_HTTP_HOSTS = ( env [ [string] ] . split ( [string] ) ) [EOL] if [string] in env : [EOL] BASIC_AUTH_WHITELISTED_IP_NETWORKS = ( env [ [string] ] . split ( [string] ) ) [EOL] [EOL] [EOL] if [string] in env : [EOL] [comment] [EOL] [comment] [EOL] BASE_URL = [string] . format ( env [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if env . get ( [string] , [string] ) . strip ( ) . lower ( ) == [string] : [EOL] SECURE_SSL_REDIRECT = True [EOL] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] [EOL] if [string] in env : [EOL] try : [EOL] SECURE_HSTS_SECONDS = int ( env [ [string] ] ) [EOL] except ValueError : [EOL] pass [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] SECURE_BROWSER_XSS_FILTER = True [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] SECURE_CONTENT_TYPE_NOSNIFF = True [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] SESSION_COOKIE_SECURE = True [EOL] CSRF_COOKIE_SECURE = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] REFERRER_POLICY = env . get ( [string] , [string] ) . strip ( ) [EOL] [EOL] WEBPACK_LOADER = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [comment] [EOL] COUNTRIES_OVERRIDE = { [string] : [string] , } [EOL] [EOL] [comment] [EOL] REST_FRAMEWORK = { [string] : [string] , [string] : [number] , [string] : ( [string] , ) , [string] : ( [string] , ) } [EOL] [EOL] [EOL] [comment] [EOL] PROJECTS_ENABLED = False [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] PROJECTS_ENABLED = True [EOL] [EOL] PROJECTS_AUTO_CREATE = False [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] PROJECTS_AUTO_CREATE = True [EOL] [EOL] [EOL] [comment] [EOL] [EOL] if env . get ( [string] , [string] ) . lower ( ) . strip ( ) == [string] : [EOL] DATABASES = { ** DATABASES , [string] : { [string] : [string] , [string] : env . get ( [string] , [string] ) , [string] : env . get ( [string] , [string] ) , [string] : env . get ( [string] , [string] ) , [string] : env . get ( [string] , [string] ) , [string] : env . get ( [string] , [string] ) } } [EOL] [EOL] SALESFORCE_QUERY_TIMEOUT = ( [number] , [number] ) [comment] [EOL] [EOL] DATABASE_ROUTERS = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] FILE_FORM_CACHE = [string] [EOL] FILE_FORM_UPLOAD_DIR = [string] [EOL] [comment] [EOL] os . makedirs ( os . path . join ( MEDIA_ROOT , FILE_FORM_UPLOAD_DIR ) , exist_ok = True ) [EOL] [comment] [EOL] if [string] in env : [EOL] FILE_FORM_TEMP_STORAGE = PRIVATE_FILE_STORAGE [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] [EOL] from . base import * [comment] [EOL] [EOL] logging . disable ( logging . CRITICAL ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] PROJECTS_ENABLED = True [EOL] PROJECTS_AUTO_CREATE = True [EOL] [EOL] STATICFILES_STORAGE = [string] [EOL] [EOL] PASSWORD_HASHERS = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict , Any , Union , Tuple , Type [EOL] import typing [EOL] import addressfield [EOL] from django import forms [EOL] from django_countries import countries [EOL] from django_select2 . forms import Select2Widget [EOL] [EOL] [EOL] class KeepOwnAttrsWidget ( forms . Widget ) : [EOL] def get_context ( self , name , value , attrs ) : [EOL] attrs . update ( self . attrs ) [EOL] return super ( ) . get_context ( name , value , attrs ) [EOL] [EOL] [EOL] class CountrySelectWithChoices ( KeepOwnAttrsWidget , Select2Widget ) : [EOL] is_required = True [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs [ [string] ] = countries [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class KeepAttrsTextInput ( KeepOwnAttrsWidget , forms . TextInput ) : [EOL] pass [EOL] [EOL] [EOL] def classify ( field ) : [EOL] return field . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def display ( field ) : [EOL] return field . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] [EOL] class NestedMultiWidget ( KeepOwnAttrsWidget , forms . MultiWidget ) : [EOL] template_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] widgets = [ widget ( attrs = { [string] : classify ( field ) , [string] : False , [string] : display ( field ) } ) for field , widget in self . components . items ( ) ] [EOL] super ( ) . __init__ ( widgets , * args , ** kwargs ) [EOL] [EOL] @ property def field_names ( self ) : [EOL] return [ classify ( field ) for field in self . components . keys ( ) ] [EOL] [EOL] def decompress ( self , value ) : [EOL] if value : [EOL] decompressed = list ( ) [EOL] for i , widget in enumerate ( self . widgets ) : [EOL] if hasattr ( widget , [string] ) : [EOL] decompressed . append ( widget . decompress ( value ) ) [EOL] else : [EOL] decompressed . append ( value . get ( self . field_names [ i ] ) ) [EOL] return decompressed [EOL] return [ None ] * len ( self . components ) [EOL] [EOL] def value_from_datadict ( self , data , files , name ) : [EOL] value = dict ( ) [EOL] for i , widget in enumerate ( self . widgets ) : [EOL] widget_value = widget . value_from_datadict ( data , files , name + [string] % i ) [EOL] [comment] [EOL] if hasattr ( widget , [string] ) : [EOL] value . update ( widget_value ) [EOL] else : [EOL] value [ self . field_names [ i ] ] = widget_value [EOL] return value [EOL] [EOL] [EOL] class LocalityWidget ( NestedMultiWidget ) : [EOL] components = { [string] : KeepAttrsTextInput , [string] : KeepAttrsTextInput , [string] : KeepAttrsTextInput , } [EOL] [EOL] [EOL] class AddressWidget ( NestedMultiWidget ) : [EOL] components = { [string] : CountrySelectWithChoices , [string] : KeepAttrsTextInput , [string] : KeepAttrsTextInput , [string] : LocalityWidget , } [EOL] [EOL] class Media : [EOL] js = ( [string] , [string] , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] attrs = kwargs . get ( [string] , dict ( ) ) [EOL] attrs [ [string] ] = [string] [EOL] kwargs [ [string] ] = attrs [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[addressfield.widgets.KeepAttrsTextInput]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[addressfield.widgets.CountrySelectWithChoices,addressfield.widgets.KeepAttrsTextInput,addressfield.widgets.LocalityWidget]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Set [EOL] import typing [EOL] import addressfield [EOL] from django . core . exceptions import ValidationError [EOL] from django . test import TestCase [EOL] [EOL] from . fields import AddressField [EOL] [EOL] [EOL] class TestRequiredFields ( TestCase ) : [EOL] def build_validation_data ( self , fields = list ( ) , required = list ( ) ) : [EOL] fields = set ( fields + required ) [EOL] return { [string] : { [string] : [ { field : { [string] : field } } for field in fields ] , [string] : required , } } [EOL] [EOL] def test_non_required ( self ) : [EOL] field = AddressField ( ) [EOL] field . data = self . build_validation_data ( fields = [ [string] ] ) [EOL] field . clean ( { [string] : [string] } ) [EOL] [EOL] def test_non_required_blank_data ( self ) : [EOL] field = AddressField ( ) [EOL] field . data = self . build_validation_data ( fields = [ [string] ] ) [EOL] field . clean ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] def test_one_field_required ( self ) : [EOL] field = AddressField ( ) [EOL] field . data = self . build_validation_data ( required = [ [string] ] ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] field . clean ( { [string] : [string] } ) [EOL] [EOL] def test_one_field_required_blank_data ( self ) : [EOL] field = AddressField ( ) [EOL] field . data = self . build_validation_data ( required = [ [string] ] ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] field . clean ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] def test_one_field_required_supplied_data ( self ) : [EOL] field = AddressField ( ) [EOL] field . data = self . build_validation_data ( required = [ [string] ] ) [EOL] field . clean ( { [string] : [string] , [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $addressfield.fields.AddressField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Set , Dict , Any , Type [EOL] import typing [EOL] import addressfield [EOL] import json [EOL] from os import path [EOL] [EOL] from django import forms [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from . widgets import AddressWidget [EOL] [EOL] basepath = path . dirname ( __file__ ) [EOL] filepath = path . abspath ( path . join ( basepath , [string] , [string] ) ) [EOL] with open ( filepath , encoding = [string] ) as address_data : [EOL] countries = json . load ( address_data ) [ [string] ] [EOL] [EOL] VALIDATION_DATA = { country [ [string] ] : country for country in countries } [EOL] [EOL] ADDRESS_FIELDS_ORDER = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def flatten_data ( data ) : [EOL] flattened = dict ( ) [EOL] for d in data : [EOL] for k , v in d . items ( ) : [EOL] if isinstance ( v , list ) : [EOL] value = flatten_data ( v ) [EOL] else : [EOL] value = { k : v } [EOL] flattened . update ( value ) [EOL] return flattened [EOL] [EOL] [EOL] class AddressField ( forms . CharField ) : [EOL] [docstring] [EOL] widget = AddressWidget [EOL] data = VALIDATION_DATA [EOL] [EOL] def clean ( self , value , ** kwargs ) : [EOL] country = value [ [string] ] [EOL] try : [EOL] country_data = self . data [ country ] [EOL] except KeyError : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] fields = flatten_data ( country_data [ [string] ] ) [EOL] [EOL] missing_fields = set ( country_data [ [string] ] ) - set ( field for field , value in value . items ( ) if value ) [EOL] if missing_fields : [EOL] missing_field_name = [ fields [ field ] [ [string] ] for field in missing_fields ] [EOL] raise ValidationError ( [string] . format ( [string] . join ( missing_field_name ) ) ) [EOL] [EOL] return super ( ) . clean ( value , ** kwargs ) [EOL] [EOL] def to_python ( self , value ) : [EOL] return json . dumps ( value ) [EOL] [EOL] def prepare_value ( self , value ) : [EOL] try : [EOL] [comment] [EOL] return json . loads ( value or { } ) [EOL] except TypeError : [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0