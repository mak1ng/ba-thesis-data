import flask [EOL] import builtins [EOL] import flask_hintful [EOL] from dataclasses import dataclass [EOL] from datetime import date , datetime [EOL] [EOL] from flask import Flask [EOL] [EOL] from flask_hintful import FlaskHintful [EOL] [EOL] app = Flask ( [string] ) [EOL] api = FlaskHintful ( app ) [EOL] [EOL] [EOL] @ dataclass class NestedModel ( ) : [EOL] str_field = ... [EOL] [EOL] [EOL] @ dataclass class DataclassModel ( ) : [EOL] str_field = ... [EOL] int_field = ... [EOL] float_field = ... [EOL] boolean_field = ... [EOL] list_field = ... [EOL] date_field = ... [EOL] datetime_field = ... [EOL] nested_field = ... [EOL] [EOL] [EOL] @ api . route ( [string] , methods = [ [string] ] ) def dataclass_route ( id , query_arg , model ) : [EOL] [docstring] [EOL] return model [EOL] [EOL] [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask_hintful.flask_hintful.FlaskHintful$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.list$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date.time$ 0 0 0 $NestedModel$ 0 0 0 0 0 0 $flask_hintful.flask_hintful.FlaskHintful$ 0 0 0 0 0 0 0 0 0 0 0 0 $DataclassModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] from recommonmark . transform import AutoStructify [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] autosectionlabel_prefix_document = True [EOL] master_doc = [string] [EOL] [EOL] [EOL] def setup ( app ) : [EOL] app . add_config_value ( [string] , { [string] : [string] , } , True ) [EOL] app . add_transform ( AutoStructify ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import werkzeug [EOL] import flask_hintful [EOL] import typing [EOL] import builtins [EOL] import unittest [EOL] import json [EOL] from datetime import date , datetime [EOL] from unittest . mock import Mock [EOL] [EOL] import pytest [EOL] from dateutil . tz import tzoffset [EOL] from flask_hintful . deserializer import ( FALSE_STRS , TRUE_STRS , Deserializer , str_to_bool ) [EOL] from flask_hintful . utils import get_func_sig [EOL] from werkzeug . datastructures import MultiDict [EOL] [EOL] from . conftest import NestedModel [EOL] [EOL] [EOL] def test_deserialize ( ) : [EOL] [docstring] [EOL] _ = Deserializer ( ) [EOL] assert _ . deserialize ( [string] , dict ) == { [string] : [string] } [EOL] assert _ . deserialize ( [string] , str ) == [string] [EOL] assert _ . deserialize ( [string] , int ) == [number] [EOL] assert _ . deserialize ( [string] , float ) == [number] [EOL] assert _ . deserialize ( [string] , bool ) [EOL] assert _ . deserialize ( [string] , date ) == date ( [number] , [number] , [number] ) [EOL] assert _ . deserialize ( [string] , datetime ) == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzoffset ( None , - [number] ) ) [EOL] [EOL] [EOL] def test_deserialize_dataclass ( dataclass_type , model_dict ) : [EOL] [docstring] [EOL] deserializer = Deserializer ( ) [EOL] deserialized_dataclass = deserializer . deserialize ( json . dumps ( model_dict ) , dataclass_type ) [EOL] expected_dataclass = dataclass_type ( ** model_dict ) [EOL] expected_dataclass . date_field = date ( [number] , [number] , [number] ) [EOL] expected_dataclass . datetime_field = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tzoffset ( None , - [number] ) ) [EOL] expected_dataclass . nested_field = NestedModel ( ** model_dict [ [string] ] ) [EOL] assert deserialized_dataclass == expected_dataclass [EOL] [EOL] [EOL] def test_deserialize_marshmallow_dict ( marshmallow_type , model_dict ) : [EOL] [docstring] [EOL] deserializer = Deserializer ( ) [EOL] marshmallow_obj = marshmallow_type . __marshmallow__ ( ) . load ( model_dict ) [EOL] deserialized_marshmallow = deserializer . deserialize ( model_dict , marshmallow_type ) [EOL] assert marshmallow_obj == deserialized_marshmallow [EOL] [EOL] [EOL] def test_deserialize_marshmallow_str ( marshmallow_type , model_dict ) : [EOL] [docstring] [EOL] deserializer = Deserializer ( ) [EOL] marshmallow_obj = marshmallow_type . __marshmallow__ ( ) . load ( model_dict ) [EOL] deserialized_marshmallow = deserializer . deserialize ( json . dumps ( model_dict ) , marshmallow_type ) [EOL] assert marshmallow_obj == deserialized_marshmallow [EOL] [EOL] [EOL] def test_deserialize_invalid_type ( simple_type ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) : [EOL] Deserializer ( ) . deserialize ( [string] , simple_type ) [EOL] [EOL] [EOL] def test_add_deserializer ( ) : [EOL] [docstring] [EOL] mock = Mock ( ) [EOL] deserializer = Deserializer ( ) [EOL] deserializer . add_deserializer ( str , mock ) [EOL] deserializer . deserialize ( [string] , str ) [EOL] mock . assert_called_with ( [string] ) [EOL] [EOL] [EOL] def test_deserialize_args ( marshmallow_type , model_dict ) : [EOL] [docstring] [EOL] def _ ( foo , body ) : [EOL] pass [EOL] func_sig = get_func_sig ( _ ) [EOL] deserializer = Deserializer ( ) [EOL] args = MultiDict ( [ ( [string] , [string] ) ] ) [EOL] deserialized_args = deserializer . deserialize_args ( args , func_sig [ [string] ] , model_dict ) [EOL] assert deserialized_args [ [string] ] == [string] [EOL] assert deserialized_args [ [string] ] == marshmallow_type . __marshmallow__ ( ) . load ( model_dict ) [EOL] [EOL] [EOL] def test_str_to_bool ( ) : [EOL] [docstring] [EOL] for false_str in FALSE_STRS : [EOL] assert not str_to_bool ( false_str ) [EOL] for true_str in TRUE_STRS : [EOL] assert str_to_bool ( true_str ) [EOL] with pytest . raises ( ValueError ) : [EOL] str_to_bool ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from functools import wraps [EOL] [EOL] [EOL] def test_decorated_func ( api ) : [EOL] [docstring] [EOL] [EOL] def some_decorator ( func ) : [EOL] @ wraps ( func ) def decorator ( * args , ** kwargs ) : [EOL] return func ( * args , ** kwargs ) [EOL] return decorator [EOL] [EOL] @ api . route ( [string] ) @ some_decorator def _ ( arg ) : [EOL] return arg [EOL] [EOL] with api . flask_app . test_client ( ) as client : [EOL] resp = client . get ( [string] ) [EOL] [EOL] assert resp . get_data ( as_text = True ) == [string] [EOL] assert api . openapi_provider . openapi_paths [ [number] ] . params [ [number] ] . name == [string] [EOL] assert api . openapi_provider . openapi_paths [ [number] ] . responses [ [number] ] . data_type == str [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import flask_hintful [EOL] import json [EOL] from datetime import date , datetime [EOL] from unittest . mock import Mock [EOL] [EOL] import pytest [EOL] from dateutil . tz import tzoffset [EOL] from flask import jsonify [EOL] from flask_hintful import Serializer [EOL] [EOL] [EOL] def test_serialize ( ) : [EOL] [docstring] [EOL] serializer = Serializer ( ) [EOL] assert serializer . serialize ( { [string] : [string] } ) == [string] [EOL] assert serializer . serialize ( [string] ) == [string] [EOL] assert serializer . serialize ( [number] ) == [string] [EOL] assert serializer . serialize ( [number] ) == [string] [EOL] assert serializer . serialize ( True ) == [string] [EOL] assert serializer . serialize ( date ( [number] , [number] , [number] ) ) == [string] [EOL] assert serializer . serialize ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzoffset ( None , - [number] ) ) ) == [string] [EOL] [EOL] [EOL] def test_serialize_list ( dataclass_type , marshmallow_type , model_dict ) : [EOL] [docstring] [EOL] serializer = Serializer ( ) [EOL] expected_list = [string] [EOL] deserialized_list = serializer . serialize ( [ [number] , [number] , True , { [string] : [string] } , dataclass_type ( ** model_dict ) , marshmallow_type . __marshmallow__ ( ) . load ( model_dict ) ] ) [EOL] assert expected_list == deserialized_list [EOL] [EOL] [EOL] def test_serialize_dataclass ( dataclass_type , model_dict ) : [EOL] [docstring] [EOL] serializer = Serializer ( ) [EOL] serialized_dataclass = serializer . serialize ( dataclass_type ( ** model_dict ) ) [EOL] assert json . loads ( serialized_dataclass ) == model_dict [EOL] [EOL] [EOL] def test_serialize_marshmallow ( marshmallow_type , model_dict ) : [EOL] [docstring] [EOL] serializer = Serializer ( ) [EOL] marshmallow_obj = marshmallow_type . __marshmallow__ ( ) . load ( model_dict ) [EOL] serialized_marshmallow = serializer . serialize ( marshmallow_obj ) [EOL] assert serialized_marshmallow == marshmallow_type . __marshmallow__ ( ) . dumps ( marshmallow_obj ) [EOL] [EOL] [EOL] def test_serialize_invalid_type ( simple_type ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) : [EOL] Serializer ( ) . serialize ( simple_type ( ) ) [EOL] [EOL] [EOL] def test_add_serializer ( ) : [EOL] [docstring] [EOL] serializer = Serializer ( ) [EOL] mock = Mock ( ) [EOL] serializer . add_serializer ( str , mock ) [EOL] serializer . serialize ( [string] ) [EOL] mock . assert_called_with ( [string] ) [EOL] [EOL] [EOL] def test_serialize_response_class ( api ) : [EOL] [docstring] [EOL] @ api . route ( [string] ) def _ ( ) : [EOL] return jsonify ( { [string] : [string] } ) [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_json ( ) . get ( [string] ) == [string] [EOL] [EOL] [EOL] def test_serialize_tuple_data_status ( api ) : [EOL] [docstring] [EOL] @ api . route ( [string] ) def _ ( ) : [EOL] return { [string] : [string] } , [number] [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . get_json ( ) . get ( [string] ) == [string] [EOL] assert response . headers [ [string] ] == [string] [EOL] [EOL] [EOL] def test_serialize_tuple_data_header ( api ) : [EOL] [docstring] [EOL] @ api . route ( [string] ) def _ ( ) : [EOL] return { [string] : [string] } , { [string] : [string] } [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . get_json ( ) . get ( [string] ) == [string] [EOL] assert response . headers [ [string] ] == [string] [EOL] assert response . headers [ [string] ] == [string] [EOL] [EOL] [EOL] def test_serialize_tuple_data_status_header ( api ) : [EOL] [docstring] [EOL] @ api . route ( [string] ) def _ ( ) : [EOL] return { [string] : [string] } , [number] , { [string] : [string] } [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . get_json ( ) . get ( [string] ) == [string] [EOL] assert response . headers [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import flask_hintful [EOL] from flask import Blueprint , Flask [EOL] from flask_hintful import FlaskHintful [EOL] from flask_hintful . openapi import OpenApiProvider [EOL] [EOL] [EOL] def test_openapi_json ( api ) : [EOL] [docstring] [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = [string] [EOL] [EOL] api = FlaskHintful ( app ) [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_json ( ) is not None [EOL] [EOL] [EOL] def test_openapi_ui ( api ) : [EOL] [docstring] [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = [string] [EOL] [EOL] api = FlaskHintful ( app ) [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) is not None [EOL] [EOL] [EOL] def test_openapi_blueprint ( ) : [EOL] [docstring] [EOL] openapi = OpenApiProvider ( ) [EOL] app = Flask ( __name__ ) [EOL] api = FlaskHintful ( app , openapi_provider = openapi ) [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] @ bp . route ( [string] ) def api_route ( id , foo = [string] ) : [EOL] pass [EOL] [EOL] api . register_blueprint ( bp ) [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . path == [string] [EOL] assert openapi . openapi_paths [ [number] ] . method == [string] [EOL] [EOL] [EOL] def test_openapi_args ( ) : [EOL] [docstring] [EOL] openapi = OpenApiProvider ( ) [EOL] app = Flask ( __name__ ) [EOL] api = FlaskHintful ( app , openapi_provider = openapi ) [EOL] [EOL] @ api . route ( [string] ) def api_route ( id , foo = [string] ) : [EOL] pass [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . path == [string] [EOL] assert openapi . openapi_paths [ [number] ] . method == [string] [EOL] assert openapi . openapi_paths [ [number] ] . responses [ [number] ] . data_type == str [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . name == [string] [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . data_type == str [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . location == [string] [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . required [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . name == [string] [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . data_type == str [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . location == [string] [EOL] assert not openapi . openapi_paths [ [number] ] . params [ [number] ] . required [EOL] assert openapi . openapi_paths [ [number] ] . params [ [number] ] . default == [string] [EOL] [EOL] [EOL] def test_openapi_request_body ( marshmallow_type , dataclass_type ) : [EOL] [docstring] [EOL] openapi = OpenApiProvider ( ) [EOL] app = Flask ( __name__ ) [EOL] api = FlaskHintful ( app , openapi_provider = openapi ) [EOL] [EOL] @ api . route ( [string] , methods = [ [string] ] ) def marshmallow_route ( _ ) : [EOL] pass [EOL] [EOL] @ api . route ( [string] , methods = [ [string] ] ) def dataclass_route ( _ ) : [EOL] pass [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . path == [string] [EOL] assert openapi . openapi_paths [ [number] ] . method == [string] [EOL] assert openapi . openapi_paths [ [number] ] . responses [ [number] ] . data_type == marshmallow_type . __marshmallow__ [EOL] assert openapi . openapi_paths [ [number] ] . request_body == marshmallow_type . __marshmallow__ [EOL] [EOL] assert openapi . openapi_paths [ [number] ] . path == [string] [EOL] assert openapi . openapi_paths [ [number] ] . method == [string] [EOL] assert openapi . openapi_paths [ [number] ] . responses [ [number] ] . data_type == dataclass_type [EOL] assert openapi . openapi_paths [ [number] ] . request_body == dataclass_type [EOL] [EOL] [EOL] def test_openapi_security ( ) : [EOL] [docstring] [EOL] openapi = OpenApiProvider ( ) [EOL] app = Flask ( __name__ ) [EOL] api = FlaskHintful ( app , openapi_provider = openapi , openapi_security = ( [string] , [string] , [string] ) ) [EOL] [EOL] assert openapi . openapi_security . basic_auth is not None [EOL] assert openapi . openapi_security . bearer_auth is not None [EOL] assert openapi . openapi_security . api_key_auth is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $marshmallow_type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataclass_type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import flask [EOL] import typing [EOL] import tests [EOL] import json [EOL] from dataclasses import dataclass [EOL] from datetime import date , datetime [EOL] [EOL] import pytest [EOL] from flask import Flask [EOL] from flask_hintful import FlaskHintful [EOL] from marshmallow import Schema , fields , post_load [EOL] [EOL] [EOL] @ pytest . fixture def api ( ) : [EOL] app = Flask ( __name__ ) [EOL] return FlaskHintful ( app ) [EOL] [EOL] [EOL] @ pytest . fixture def simple_type ( ) : [EOL] return SimpleType [EOL] [EOL] [EOL] @ pytest . fixture def dataclass_type ( ) : [EOL] return DataclassModel [EOL] [EOL] [EOL] @ pytest . fixture def marshmallow_type ( ) : [EOL] return MarshmallowModel [EOL] [EOL] [EOL] @ pytest . fixture def model_dict ( ) : [EOL] return { [string] : [string] , [string] : [number] , [string] : [number] , [string] : True , [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } [EOL] [EOL] [EOL] class SimpleType ( ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass class NestedModel ( ) : [EOL] str_field = ... [EOL] [EOL] [EOL] @ dataclass class DataclassModel ( ) : [EOL] str_field = ... [EOL] int_field = ... [EOL] float_field = ... [EOL] bool_field = ... [EOL] list_field = ... [EOL] date_field = ... [EOL] datetime_field = ... [EOL] nested_field = ... [EOL] [EOL] [EOL] class MarshmallowModel ( ) : [EOL] def __init__ ( self , str_field , int_field , float_field , bool_field , list_field , date_field , datetime_field , nested_field ) : [EOL] self . str_field = str_field [EOL] self . int_field = int_field [EOL] self . float_field = float_field [EOL] self . bool_field = bool_field [EOL] self . list_field = list_field [EOL] self . date_field = date_field [EOL] self . datetime_field = datetime_field [EOL] self . nested_field = nested_field [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , self . __class__ ) : [EOL] return self . __dict__ == other . __dict__ [EOL] return False [EOL] [EOL] [EOL] class NestedModelSchema ( Schema ) : [EOL] str_field = fields . Str ( ) [EOL] [EOL] @ post_load def make_some_model ( self , data , ** kwargs ) : [EOL] return NestedModel ( ** data ) [EOL] [EOL] [EOL] class MarshmallowModelSchema ( Schema ) : [EOL] str_field = fields . Str ( ) [EOL] int_field = fields . Int ( ) [EOL] float_field = fields . Float ( ) [EOL] bool_field = fields . Bool ( ) [EOL] list_field = fields . List ( fields . Str ( ) ) [EOL] date_field = fields . Date ( ) [EOL] datetime_field = fields . AwareDateTime ( ) [EOL] nested_field = fields . Nested ( [string] ) [EOL] [EOL] @ post_load def make_some_model ( self , data , ** kwargs ) : [EOL] return MarshmallowModel ( ** data ) [EOL] [EOL] [EOL] setattr ( MarshmallowModel , [string] , MarshmallowModelSchema ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.list$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date.time$ 0 0 0 $NestedModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import unittest [EOL] from unittest . mock import Mock [EOL] [EOL] from flask import Blueprint [EOL] [EOL] [EOL] def test_register_route ( api ) : [EOL] [docstring] [EOL] @ api . route ( [string] ) def _ ( ) : [EOL] return [string] [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) == [string] [EOL] [EOL] [EOL] def test_register_blueprint ( api ) : [EOL] [docstring] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] @ bp . route ( [string] ) def _ ( ) : [EOL] return [string] [EOL] [EOL] @ bp . route ( [string] ) def __ ( ) : [EOL] return [string] [EOL] [EOL] api . register_blueprint ( bp ) [EOL] [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) == [string] [EOL] [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) == [string] [EOL] [EOL] [EOL] def test_register_blueprint_before_after_requests ( api ) : [EOL] [docstring] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] mock = Mock ( ) [EOL] [EOL] @ bp . before_request def before_request ( ) : [EOL] mock . before_request ( ) [EOL] [EOL] @ bp . before_app_first_request def before_app_first_request ( ) : [EOL] mock . before_first_request ( ) [EOL] [EOL] @ bp . after_request def after_request ( response ) : [EOL] mock . after_request ( ) [EOL] return response [EOL] [EOL] @ bp . route ( [string] ) def _ ( ) : [EOL] return [string] [EOL] [EOL] api . register_blueprint ( bp ) [EOL] [EOL] with api . flask_app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) == [string] [EOL] response = client . get ( [string] ) [EOL] assert response . get_data ( as_text = True ) == [string] [EOL] [EOL] mock . before_first_request . assert_called_once ( ) [EOL] assert mock . before_request . call_count == [number] [EOL] assert mock . after_request . call_count == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . deserializer import Deserializer [EOL] from . flask_hintful import FlaskHintful [EOL] from . serializer import Serializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Callable [EOL] import typing [EOL] import deserializer [EOL] import serializer [EOL] import builtins [EOL] from functools import wraps [EOL] from typing import Callable [EOL] [EOL] from flask import request [EOL] [EOL] from . deserializer import Deserializer [EOL] from . serializer import Serializer [EOL] from . utils import get_func_sig [EOL] [EOL] [EOL] def view_func_wrapper ( view_func , serializer , deserializer ) : [EOL] [docstring] [EOL] func_sig = get_func_sig ( view_func ) [EOL] [EOL] @ wraps ( view_func ) def decorator ( ** _ ) : [EOL] args = request . args . copy ( ) [EOL] args . update ( request . view_args ) [EOL] deserialized_args = deserializer . deserialize_args ( args , func_sig [ [string] ] , request . get_json ( ) ) [EOL] response = view_func ( ** deserialized_args ) [EOL] return serializer . serialize_response ( response ) [EOL] return decorator [EOL] [EOL] [EOL] class BlueprintWrapper ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , app , url_prefix = [string] ) : [EOL] self . app = app [EOL] self . url_prefix = url_prefix [EOL] [EOL] def add_url_rule ( self , rule , endpoint , view_func , ** options ) : [EOL] [docstring] [EOL] wrapped_view_func = view_func_wrapper ( view_func , self . app . serializer , self . app . deserializer ) [EOL] prefixed_rule = [string] [EOL] if self . url_prefix : [EOL] prefixed_rule = [string] . join ( ( self . url_prefix . rstrip ( [string] ) , rule . lstrip ( [string] ) ) ) [EOL] self . app . openapi_provider . add_openapi_path ( prefixed_rule or rule , options . get ( [string] , [ [string] ] ) , view_func ) [EOL] return lambda s : s . add_url_rule ( rule , endpoint , wrapped_view_func , ** options ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Callable [EOL] import typing [EOL] import inspect [EOL] import builtins [EOL] from inspect import getdoc , signature [EOL] from typing import Callable [EOL] [EOL] [EOL] def get_func_sig ( func ) : [EOL] sig = signature ( func , follow_wrapped = True ) [EOL] return { [string] : sig . return_annotation , [string] : sig . parameters , [string] : getdoc ( func ) , [string] : sig . empty } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import flask_hintful [EOL] from flask import Blueprint , Flask [EOL] [EOL] from . deserializer import Deserializer [EOL] from . openapi import OpenApiProvider [EOL] from . serializer import Serializer [EOL] from . wrapper import BlueprintWrapper , view_func_wrapper [EOL] [EOL] [EOL] class FlaskHintful ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , flask_app , serializer = None , deserializer = None , openapi_provider = None , openapi_security = None ) : [EOL] self . flask_app = flask_app [EOL] self . serializer = serializer or Serializer ( ) [EOL] self . deserializer = deserializer or Deserializer ( ) [EOL] self . openapi_provider = openapi_provider or OpenApiProvider ( ) [EOL] self . flask_app . add_url_rule ( flask_app . config . get ( [string] , [string] ) , view_func = self . openapi_provider . get_openapi_spec ) [EOL] self . flask_app . add_url_rule ( flask_app . config . get ( [string] , [string] ) , view_func = self . openapi_provider . get_openapi_ui ) [EOL] if openapi_security : [EOL] self . openapi_provider . add_security ( openapi_security ) [EOL] [EOL] def route ( self , rule , ** options ) : [EOL] [docstring] [EOL] def decorator ( view_func ) : [EOL] wrapped_view_func = view_func_wrapper ( view_func , self . serializer , self . deserializer ) [EOL] self . flask_app . route ( rule , ** options ) ( wrapped_view_func ) [EOL] self . openapi_provider . add_openapi_path ( rule , options . get ( [string] , [ [string] ] ) , view_func ) [EOL] return view_func [EOL] return decorator [EOL] [EOL] def register_blueprint ( self , blueprint ) : [EOL] [docstring] [EOL] bp_wrapper = BlueprintWrapper ( self , blueprint . url_prefix ) [EOL] for i , func in enumerate ( blueprint . deferred_functions ) : [EOL] if func . __qualname__ == [string] : [EOL] blueprint . deferred_functions [ i ] = func ( bp_wrapper ) [EOL] self . flask_app . register_blueprint ( blueprint ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_hintful.wrapper.BlueprintWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_hintful.wrapper.BlueprintWrapper$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Callable [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import openapi_specgen [EOL] import re [EOL] from dataclasses import is_dataclass [EOL] from typing import Callable , List [EOL] [EOL] from flask import Response , current_app , jsonify [EOL] from openapi_specgen import ( OpenApi , OpenApiParam , OpenApiPath , OpenApiResponse , OpenApiSecurity ) [EOL] from openapi_specgen . security import ApiKeyAuth , BasicAuth , BearerAuth [EOL] from . utils import get_func_sig [EOL] [EOL] [EOL] class OpenApiProvider ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . openapi_paths = [ ] [EOL] self . openapi_security = OpenApiSecurity ( ) [EOL] [EOL] def add_security ( self , auth_list ) : [EOL] [docstring] [EOL] if any ( auth . lower ( ) == [string] for auth in auth_list ) : [EOL] self . openapi_security . basic_auth = BasicAuth ( ) [EOL] if any ( auth . lower ( ) == [string] for auth in auth_list ) : [EOL] self . openapi_security . bearer_auth = BearerAuth ( ) [EOL] if any ( auth . lower ( ) == [string] for auth in auth_list ) : [EOL] self . openapi_security . api_key_auth = ApiKeyAuth ( ) [EOL] [EOL] def add_openapi_path ( self , rule , methods , view_func ) : [EOL] [docstring] [EOL] func_sig = get_func_sig ( view_func ) [EOL] openapi_params = [ ] [EOL] body = None [EOL] [EOL] for param_name , param in func_sig [ [string] ] . items ( ) : [EOL] if hasattr ( param . annotation , [string] ) : [EOL] body = param . annotation . __marshmallow__ [EOL] elif is_dataclass ( param . annotation ) : [EOL] body = param . annotation [EOL] elif f' [string] { param_name } [string] ' in re . findall ( [string] , rule ) : [EOL] openapi_params . append ( OpenApiParam ( param_name , [string] , data_type = param . annotation if param . annotation is not param . empty else str , default = param . default if param . default is not param . empty else None , required = param . default is param . empty ) ) [EOL] else : [EOL] openapi_params . append ( OpenApiParam ( param_name , [string] , data_type = param . annotation if param . annotation is not param . empty else str , default = param . default if param . default is not param . empty else None , required = param . default is param . empty ) ) [EOL] [EOL] response_type = func_sig [ [string] ] if func_sig [ [string] ] is not func_sig [ [string] ] else str [EOL] [EOL] if hasattr ( response_type , [string] ) : [EOL] response_type = response_type . __marshmallow__ [EOL] [EOL] openapi_response = OpenApiResponse ( [string] , data_type = response_type ) [EOL] [EOL] for method in methods : [EOL] self . openapi_paths . append ( OpenApiPath ( rule . replace ( [string] , [string] ) . replace ( [string] , [string] ) , method . lower ( ) , [ openapi_response ] , openapi_params , descr = func_sig [ [string] ] , request_body = body ) ) [EOL] [EOL] def get_openapi_spec ( self ) : [EOL] [docstring] [EOL] return jsonify ( OpenApi ( current_app . name , self . openapi_paths , security = self . openapi_security ) . as_dict ( ) ) [EOL] [EOL] @ staticmethod def get_openapi_ui ( ) : [EOL] [docstring] [EOL] openapi_json_path = current_app . config . get ( [string] , [string] ) [EOL] return [string] . format ( openapi_json_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[openapi_specgen.OpenApiPath]$ 0 0 0 0 0 0 $openapi_specgen.OpenApi.Security$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 $typing.Callable$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Callable$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0