from typing import Any [EOL] import typing [EOL] import random [EOL] import sys [EOL] [EOL] [EOL] LOWER_NUMBER = [number] [EOL] HIGHEST_NUMBER = [number] [EOL] [EOL] [EOL] def print_header ( ) : [EOL] print ( [string] * [number] ) [EOL] print ( [string] ) [EOL] print ( [string] * [number] ) [EOL] [EOL] [EOL] def print_exit_message ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def check_exit ( leave_game ) : [EOL] [docstring] [EOL] if leave_game . lower ( ) == [string] : [EOL] print_exit_message ( ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def user_input ( ) : [EOL] [docstring] [EOL] while True : [EOL] try : [EOL] guess = int ( input ( f' [string] ' f'{ LOWER_NUMBER } [string] { HIGHEST_NUMBER } [string] ' ) ) [EOL] if guess < LOWER_NUMBER or guess > HIGHEST_NUMBER : [EOL] print ( [string] ) [EOL] continue [EOL] except ValueError : [EOL] print ( [string] ) [EOL] continue [EOL] else : [EOL] break [EOL] [EOL] return guess [EOL] [EOL] [EOL] def generate_number_to_guess ( lower_number , higher_number ) : [EOL] [docstring] [EOL] return random . randint ( lower_number , higher_number ) [EOL] [EOL] [EOL] def play_again ( ) : [EOL] [docstring] [EOL] while True : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] new_game = input ( [string] ) [EOL] except KeyboardInterrupt : [EOL] leave_game = input ( [string] ) [EOL] if not check_exit ( leave_game ) : [EOL] continue [EOL] [EOL] if new_game . lower ( ) not in [ [string] , [string] ] : [EOL] print ( [string] ) [EOL] continue [EOL] else : [EOL] break [EOL] [EOL] return new_game . lower ( ) [EOL] [EOL] [EOL] def start_game ( ) : [EOL] [docstring] [EOL] highscore = [number] [EOL] while True : [EOL] print_header ( ) [EOL] number_to_guess = generate_number_to_guess ( LOWER_NUMBER , HIGHEST_NUMBER ) [EOL] guess = [number] [EOL] count = [number] [EOL] [EOL] while guess != number_to_guess : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] guess = user_input ( ) [EOL] except KeyboardInterrupt : [EOL] leave_game = input ( [string] ) [EOL] if not check_exit ( leave_game ) : [EOL] continue [EOL] [EOL] count += [number] [EOL] if guess < number_to_guess : [EOL] print ( [string] ) [EOL] elif guess > number_to_guess : [EOL] print ( [string] ) [EOL] [EOL] else : [EOL] print ( f' [string] { count } [string] ' ) [EOL] if count < highscore or highscore == [number] : [EOL] highscore = count [EOL] [EOL] [comment] [EOL] another_game = play_again ( ) [EOL] if another_game == [string] : [EOL] print ( f" [string] { highscore }" ) [EOL] continue [EOL] elif another_game == [string] : [EOL] print_exit_message ( ) [EOL] break [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] start_game ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from number_guessing_game import ( play_again , user_input ) [EOL] [EOL] [EOL] def test_user_input ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [number] ) [EOL] [EOL] user_entry = user_input ( ) [EOL] assert user_entry == [number] [EOL] [EOL] [EOL] def test_play_again ( monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] user_entry = play_again ( ) [EOL] assert user_entry == [string] [EOL] [EOL] monkeypatch . setattr ( [string] , lambda x : [string] ) [EOL] [EOL] user_entry = play_again ( ) [EOL] assert user_entry == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0