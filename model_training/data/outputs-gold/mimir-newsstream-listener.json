[comment] [EOL] import app [EOL] import logging [EOL] import threading [EOL] import logging [EOL] import sys [EOL] from threading import Thread [EOL] [EOL] [comment] [EOL] from app import stream_listner [EOL] from app import mq_connector [EOL] from app . service import emit_heartbeats [EOL] from app . config import HealthCheckConfig [EOL] [EOL] [EOL] _log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def start_heartbeat_thread ( ) : [EOL] [docstring] [EOL] config = HealthCheckConfig ( ) [EOL] thread = Thread ( target = emit_heartbeats , args = ( config , mq_connector ) ) [EOL] thread . setDaemon ( True ) [EOL] thread . start ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] try : [EOL] start_heartbeat_thread ( ) [EOL] stream_listner . start ( ) [EOL] except Exception as e : [EOL] _log . info ( [string] . format ( str ( e ) ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Type , List , Any [EOL] import app [EOL] import tweepy [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from typing import Dict [EOL] [EOL] [comment] [EOL] from tweepy import OAuthHandler , Stream [EOL] [EOL] [comment] [EOL] from app . config import TwitterConfig , SpamFilterConfig , MQConfig [EOL] from app . models import TrackedStock [EOL] from app . repository import SQLStockRepo , SQLTweetRepo [EOL] from app . service import StreamListenerImpl [EOL] from app . service import TweetService , TweetServiceImpl [EOL] from app . service import SpamFilterService [EOL] from app . service import MQRankingService [EOL] from app . service import MQConnectionFactory [EOL] [EOL] [EOL] class App : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , mq_connector ) : [EOL] self . TRACKED_STOCKS = self . _get_tracked_stocks ( ) [EOL] tweet_svc = self . _setup_tweet_service ( mq_connector ) [EOL] config = TwitterConfig ( ) [EOL] listener = StreamListenerImpl ( tweet_svc , config ) [EOL] self . _stream = Stream ( self . _setup_auth ( config ) , listener ) [EOL] [EOL] def start ( self ) : [EOL] cashtags = [ f" [string] { symbol }" for symbol in self . TRACKED_STOCKS . keys ( ) ] [EOL] self . _log . info ( f" [string] { cashtags }" ) [EOL] self . _stream . filter ( track = cashtags ) [EOL] [EOL] def _setup_auth ( self , config ) : [EOL] [docstring] [EOL] config = TwitterConfig ( ) [EOL] auth = OAuthHandler ( config . CONSUMER_KEY , config . CONSUMER_SECRET ) [EOL] auth . set_access_token ( config . ACCESS_TOKEN , config . ACCESS_TOKEN_SECRET ) [EOL] return auth [EOL] [EOL] def _get_tracked_stocks ( self ) : [EOL] [docstring] [EOL] stock_repo = SQLStockRepo ( ) [EOL] stocks = stock_repo . get_all ( ) [EOL] return { s . symbol : TrackedStock ( name = s . name , symbol = s . symbol ) for s in stocks } [EOL] [EOL] def _setup_tweet_service ( self , mq_connector ) : [EOL] [docstring] [EOL] filter_svc = SpamFilterService ( SpamFilterConfig ( ) ) [EOL] ranking_svc = MQRankingService ( self . TRACKED_STOCKS , MQConfig ( ) , mq_connector ) [EOL] tweet_repo = SQLTweetRepo ( ) [EOL] return TweetServiceImpl ( self . TRACKED_STOCKS , filter_svc , ranking_svc , tweet_repo ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $tweepy.OAuthHandler$ 0 0 0 $app.config.TwitterConfig$ 0 0 0 0 0 $app.config.TwitterConfig$ 0 0 0 0 0 $typing.Any$ 0 0 0 $app.config.TwitterConfig$ 0 0 0 $app.config.TwitterConfig$ 0 0 0 0 $typing.Any$ 0 0 0 $app.config.TwitterConfig$ 0 0 0 $app.config.TwitterConfig$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,app.models.TrackedStock]$ 0 0 0 0 0 0 0 $app.repository.stock_repo.SQLStockRepo$ 0 0 0 0 0 $typing.List[app.models.stock.Stock]$ 0 $app.repository.stock_repo.SQLStockRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.models.stock.Stock]$ 0 0 0 0 $app.service.TweetService$ 0 0 0 $app.service.MQConnectionFactory$ 0 0 0 0 0 $app.service.filter_service.SpamFilterService$ 0 0 0 0 0 0 0 0 $app.service.ranking_service.MQRankingService$ 0 0 0 0 0 0 0 0 0 0 0 $app.service.MQConnectionFactory$ 0 0 $app.repository.tweet_repo.SQLTweetRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 $app.service.filter_service.SpamFilterService$ 0 $app.service.ranking_service.MQRankingService$ 0 $app.repository.tweet_repo.SQLTweetRepo$ 0 0
[comment] [EOL] import app [EOL] import logging [EOL] [EOL] [comment] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] [comment] [EOL] from app . config import DBConfig [EOL] [EOL] [EOL] class Database : [EOL] def __init__ ( self , config ) : [EOL] self . engine = create_engine ( config . URI ) [EOL] self . engine . echo = config . ECHO [EOL] self . Model = declarative_base ( ) [EOL] self . Model . metadata . bind = self . engine [EOL] self . __DBSession = sessionmaker ( bind = self . engine ) [EOL] self . session = self . __DBSession ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $app.config.DBConfig$ 0 0 0 0 0 0 0 0 0 $app.config.DBConfig$ 0 0 0 0 0 0 0 0 0 0 $app.config.DBConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import app [EOL] from sqlalchemy import create_engine [EOL] [EOL] [comment] [EOL] from app . config import values , DBConfig , MQConfig [EOL] from . database import Database [EOL] [EOL] [EOL] db = Database ( DBConfig ( ) ) [EOL] [EOL] [EOL] from . app import App [EOL] from app . service import MQConnectionFactory [EOL] [EOL] _mq_config = MQConfig ( ) [EOL] mq_connector = MQConnectionFactory ( _mq_config ) [EOL] stream_listner = App ( mq_connector ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.database.Database$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.config.MQConfig$ 0 0 0 0 0 $app.service.mq.MQConnectionFactory$ 0 0 0 $app.config.MQConfig$ 0 0 $app.app.App$ 0 0 0 $app.service.mq.MQConnectionFactory$ 0 0
[comment] [EOL] from typing import Type [EOL] import app [EOL] import typing [EOL] import logging [EOL] [EOL] [comment] [EOL] from app . service import FilterService [EOL] [EOL] [EOL] class MockFilter ( FilterService ) : [EOL] [EOL] __log = logging . getLogger ( [string] ) [EOL] [EOL] def is_spam ( self , tweet ) : [EOL] self . __log . info ( f' [string] { tweet }' ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . filter_service import MockFilter [EOL] from . ranking_service import MockRanker [EOL] from . stream import MockStream [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import app [EOL] import typing [EOL] import logging [EOL] [EOL] [comment] [EOL] from app . service import RankingService [EOL] [EOL] [EOL] class MockRanker ( RankingService ) : [EOL] [EOL] __log = logging . getLogger ( [string] ) [EOL] [EOL] def rank ( self , tweet , links , symbols ) : [EOL] self . __log . info ( f' [string] { tweet } [string] { links } [string] { symbols }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import time [EOL] from os import listdir [EOL] from os . path import isfile , join [EOL] [EOL] [EOL] class MockStream ( object ) : [EOL] def __init__ ( self , input_dir , listener ) : [EOL] self . input_dir = input_dir [EOL] self . listener = listener [EOL] [EOL] def filter ( self , track ) : [EOL] for tweet in self . __get_tweets ( ) : [EOL] self . listener . on_data ( tweet ) [EOL] time . sleep ( [number] ) [EOL] self . listener . on_error ( [number] ) [EOL] [EOL] def __get_tweets ( self ) : [EOL] fndir = [ join ( self . input_dir , f ) for f in listdir ( self . input_dir ) ] [EOL] filenames = [ name for name in fndir if isfile ( name ) ] [EOL] tweets = [ ] [EOL] for filename in filenames : [EOL] with open ( filename , [string] ) as f : [EOL] tweets . append ( f . read ( ) ) [EOL] return tweets [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
[comment] [EOL] from typing import Dict , Type [EOL] import app [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass [comment] [EOL] from datetime import datetime [EOL] from typing import Dict [EOL] [EOL] [EOL] [comment] [EOL] import sqlalchemy as sa [EOL] [EOL] [comment] [EOL] from app import db [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class TrackedStock : [EOL] name = ... [EOL] symbol = ... [EOL] [EOL] def asdict ( self ) : [EOL] return { [string] : self . name , [string] : self . symbol } [EOL] [EOL] [EOL] class Stock ( db . Model ) : [comment] [EOL] __tablename__ = [string] [EOL] [EOL] symbol = sa . Column ( sa . String ( [number] ) , primary_key = True ) [EOL] name = sa . Column ( sa . String ( [number] ) ) [EOL] is_active = sa . Column ( sa . Boolean ) [EOL] total_count = sa . Column ( sa . Integer ) [EOL] updated_at = sa . Column ( sa . DateTime ) [EOL] [EOL] def __init__ ( self , symbol , name , is_active , total_count , updated_at = None ) : [EOL] self . symbol = symbol [EOL] self . name = name [EOL] self . is_active = is_active [EOL] self . total_count = total_count [EOL] self . updated_at = updated_at or datetime . utcnow ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] [string] . format ( self . symbol , self . name , self . is_active , self . total_count , self . updated_at ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . stock import Stock , TrackedStock [EOL] from . tweet import Tweet , TweetLink , TweetSymbol , TweetContent [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Optional [EOL] import app [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass [comment] [EOL] from datetime import datetime [EOL] from typing import List , Optional [EOL] from uuid import uuid4 [EOL] [EOL] [comment] [EOL] import sqlalchemy as sa [EOL] [EOL] [comment] [EOL] from app import db [EOL] [EOL] [EOL] class Tweet ( db . Model ) : [comment] [EOL] __tablename__ = [string] [EOL] [EOL] id = sa . Column ( sa . String ( [number] ) , primary_key = True ) [EOL] text = sa . Column ( sa . String ( [number] ) ) [EOL] language = sa . Column ( sa . String ( [number] ) ) [EOL] author_id = sa . Column ( sa . String ( [number] ) ) [EOL] author_followers = sa . Column ( sa . Integer ) [EOL] created_at = sa . Column ( sa . DateTime ) [EOL] [EOL] def __init__ ( self , text , language , author_id , author_followers , id = None , ) : [EOL] self . id = id or str ( uuid4 ( ) ) . lower ( ) [EOL] self . text = text [EOL] self . language = language [EOL] self . author_id = author_id [EOL] self . author_followers = author_followers [EOL] self . created_at = datetime . utcnow ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] [string] . format ( self . id , self . text , self . language , self . author_id , self . author_followers , self . created_at , ) ) [EOL] [EOL] [EOL] class TweetLink ( db . Model ) : [comment] [EOL] __tablename__ = [string] [EOL] [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] url = sa . Column ( sa . String ( [number] ) ) [EOL] tweet_id = sa . Column ( sa . String ( [number] ) , sa . ForeignKey ( [string] ) ) [EOL] [EOL] def __init__ ( self , url , tweet_id ) : [EOL] self . url = url [EOL] self . tweet_id = tweet_id [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . id , self . url , self . tweet_id ) [EOL] [EOL] [EOL] class TweetSymbol ( db . Model ) : [comment] [EOL] __tablename__ = [string] [EOL] [EOL] def __init__ ( self , symbol , tweet_id ) : [EOL] self . symbol = symbol [EOL] self . tweet_id = tweet_id [EOL] [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] symbol = sa . Column ( sa . String ( [number] ) , sa . ForeignKey ( [string] ) ) [EOL] tweet_id = sa . Column ( sa . String ( [number] ) , sa . ForeignKey ( [string] ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . id , self . symbol , self . tweet_id ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class TweetContent : [EOL] tweet = ... [EOL] links = ... [EOL] symbols = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Tweet$ 0 0 0 $typing.List[TweetLink]$ 0 0 0 $typing.List[TweetSymbol]$ 0 0 0
[comment] [EOL] from typing import Type , Any [EOL] import pika [EOL] import app [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] [EOL] [comment] [EOL] import pika [EOL] from pika . channel import Channel [EOL] [EOL] [comment] [EOL] from app . config import MQConfig [EOL] [EOL] [EOL] class MQConnectionChecker ( metaclass = ABCMeta ) : [EOL] def is_connected ( self , health_target ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] [EOL] class MQConnectionFactory ( MQConnectionChecker ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . TEST_MODE = config . TEST_MODE [EOL] if not self . TEST_MODE : [EOL] connection_params = pika . URLParameters ( config . URI ) [EOL] self . _conn = pika . BlockingConnection ( connection_params ) [EOL] self . _channel = self . _conn . channel ( ) [EOL] else : [EOL] self . _conn = None [EOL] self . _channel = None [EOL] [EOL] def close ( self ) : [EOL] if not self . TEST_MODE : [EOL] self . _channel . close ( ) [EOL] self . _conn . close ( ) [EOL] [EOL] def get_channel ( self ) : [EOL] return self . _channel [EOL] [EOL] def is_connected ( self , health_target ) : [EOL] try : [EOL] self . _channel . queue_declare ( queue = health_target , passive = True ) [EOL] return True [EOL] except Exception as e : [EOL] self . _log . error ( e ) [EOL] return False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $app.config.MQConfig$ 0 0 0 0 0 0 0 $app.config.MQConfig$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $app.config.MQConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pika.channel.Channel$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Type , List , Any [EOL] import mq [EOL] import requests [EOL] import app [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] from urllib . parse import urlparse [EOL] from typing import Dict , List [EOL] [EOL] [comment] [EOL] import requests [EOL] import pika [EOL] [EOL] [comment] [EOL] from app . config import values , NewsRankerConfig , MQConfig [EOL] from app . models import TweetContent , Tweet , TweetLink , TweetSymbol [EOL] from app . models import TrackedStock [EOL] from . mq import MQConnectionFactory [EOL] [EOL] [EOL] class RankingService ( metaclass = ABCMeta ) : [EOL] @ abstractmethod def rank ( self , tweet_content ) : [EOL] [docstring] [EOL] [EOL] [EOL] class MQRankingService ( RankingService ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , tracked , config , factory , ) : [EOL] self . TRACKED_STOCKS = tracked [EOL] self . EXCHANGE = config . EXCHANGE [EOL] self . QUEUE_NAME = config . QUEUE_NAME [EOL] self . _connection_factory = factory [EOL] self . _channel = self . _connection_factory . get_channel ( ) [EOL] [EOL] def __del__ ( self ) : [EOL] self . _log . info ( [string] ) [EOL] self . _connection_factory . close ( ) [EOL] self . _log . info ( [string] ) [EOL] [EOL] def rank ( self , tweet_content ) : [EOL] rank_object = self . _create_rank_object ( tweet_content ) [EOL] if should_rank ( rank_object ) : [EOL] self . _log . info ( f" [string] { tweet_content . tweet . id } [string] " ) [EOL] self . _send_to_ranker ( rank_object ) [EOL] else : [EOL] self . _log . info ( f" [string] { tweet_content . tweet . id } [string] " ) [EOL] [EOL] def _send_to_ranker ( self , rank_object ) : [EOL] try : [EOL] self . _channel . basic_publish ( exchange = self . EXCHANGE , routing_key = self . QUEUE_NAME , body = json . dumps ( rank_object ) , properties = pika . BasicProperties ( content_type = [string] ) , ) [EOL] except Exception as e : [EOL] self . _log . error ( f" [string] { e }" ) [EOL] raise e [EOL] [EOL] def _create_rank_object ( self , content ) : [EOL] subjects = [ self . TRACKED_STOCKS [ s . symbol ] for s in content . symbols ] [EOL] return create_rank_object ( content , subjects ) [EOL] [EOL] [EOL] class RestRankingService ( RankingService ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , tracked , config ) : [EOL] self . TRACKED_STOCKS = tracked [EOL] self . RANK_URL = f"{ config . URL }{ config . RANK_ROUTE }" [EOL] self . HEADERS = { [string] : [string] , [string] : values . USER_AGENT , } [EOL] [EOL] def rank ( self , tweet_content ) : [EOL] rank_object = self . _create_rank_object ( tweet_content ) [EOL] if should_rank ( rank_object ) : [EOL] self . _send_to_ranker ( rank_object ) [EOL] [EOL] def _send_to_ranker ( self , rank_object ) : [EOL] resp = requests . post ( self . RANK_URL , data = json . dumps ( rank_object ) , headers = self . HEADERS , timeout = values . RPC_TIMEOUT , ) [EOL] if not resp . ok : [EOL] self . _log . error ( f" [string] { resp . status_code } [string] { resp . text }" ) [EOL] [EOL] def _create_rank_object ( self , content ) : [EOL] subjects = [ self . TRACKED_STOCKS [ s . symbol ] for s in content . symbols ] [EOL] return create_rank_object ( content , subjects ) [EOL] [EOL] [EOL] def create_rank_object ( content , subjects ) : [EOL] [docstring] [EOL] tweet = content . tweet [EOL] return { [string] : [ link . url for link in content . links if allowed_link ( link ) ] , [string] : [ sub . asdict ( ) for sub in subjects ] , [string] : { [string] : tweet . author_id , [string] : tweet . author_followers , } , [string] : tweet . language , } [EOL] [EOL] [EOL] def allowed_link ( link ) : [EOL] [docstring] [EOL] return urlparse ( link . url ) . netloc not in values . FORBIDDEN_DOMAINS [EOL] [EOL] [EOL] def should_rank ( rank_object ) : [EOL] return len ( rank_object [ [string] ] ) > [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.List[app.models.stock.TrackedStock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.models.stock.TrackedStock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Type , Any [EOL] import app [EOL] import typing [EOL] import concurrent [EOL] import logging [EOL] import json [EOL] import os [EOL] import time [EOL] import sys [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] [EOL] [comment] [EOL] from tweepy . streaming import StreamListener [EOL] [EOL] [comment] [EOL] from app . config import values [EOL] [EOL] [EOL] class StreamListenerImpl ( StreamListener ) : [EOL] [docstring] [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , tweet_svc , twitter_config ) : [EOL] self . _excutor = ThreadPoolExecutor ( max_workers = values . THREAD_POOL_SIZE ) [EOL] self . _tweet_svc = tweet_svc [EOL] self . _error_count = [number] [EOL] self . RATE_LIMIT_CODE = twitter_config . RATE_LIMIT_CODE [EOL] self . ERROR_PAUSE = twitter_config . ERROR_PAUSE_SECONDS [EOL] [EOL] def on_data ( self , data ) : [EOL] self . _excutor . submit ( self . _tweet_svc . handle , data ) [EOL] self . _error_count = [number] [EOL] [EOL] def on_error ( self , status_code ) : [EOL] rate_limited = status_code == self . RATE_LIMIT_CODE [EOL] self . _error_count += [number] [EOL] pause_seconds = self . ERROR_PAUSE * self . _error_count * ( [number] + int ( rate_limited ) ) [EOL] self . _log . error ( f" [string] { status_code } [string] { rate_limited } [string] " f" [string] { self . _error_count } [string] { pause_seconds } [string] " ) [EOL] time . sleep ( pause_seconds ) [EOL] self . _log . info ( f" [string] " ) [EOL] [EOL] [EOL] class StreamLogger ( StreamListener ) : [EOL] [docstring] [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def on_data ( self , data ) : [EOL] formated_data = self . __format_data ( data ) [EOL] self . _log . info ( formated_data ) [EOL] [EOL] def on_error ( self , status_code ) : [EOL] self . _log . error ( f" [string] { status_code } [string] " ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def __format_data ( self , data ) : [EOL] deserialized_data = json . loads ( data ) [EOL] return json . dumps ( deserialized_data , indent = [number] , sort_keys = True ) [EOL] [EOL] [EOL] class FileStreamer ( StreamListener ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , output_dir ) : [EOL] self . output_dir = output_dir [EOL] self . _create_dir_if_missing ( output_dir ) [EOL] [EOL] def on_data ( self , data ) : [EOL] id , tweet = self . _format_data ( data ) [EOL] self . _save_tweet ( id , tweet ) [EOL] self . _log . info ( f" [string] { id }" ) [EOL] [EOL] def on_error ( self , status_code ) : [EOL] self . _log . error ( f" [string] { status_code } [string] " ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def _format_data ( self , data ) : [EOL] deserialized_data = json . loads ( data ) [EOL] formated_data = json . dumps ( deserialized_data , indent = [number] , sort_keys = True ) [EOL] return deserialized_data [ [string] ] , formated_data [EOL] [EOL] def _save_tweet ( self , name , tweet ) : [EOL] filename = os . path . join ( self . output_dir , f"{ name } [string] " ) [EOL] with open ( filename , [string] ) as f : [EOL] f . write ( tweet ) [EOL] [EOL] def _create_dir_if_missing ( self , output_dir ) : [EOL] if not os . path . exists ( output_dir ) : [EOL] os . makedirs ( output_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , List , Iterator , Type , Any [EOL] import app [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] from typing import Dict , List [EOL] [EOL] [comment] [EOL] from app . config import values [EOL] from app . models import Tweet , TweetLink , TweetSymbol , TweetContent [EOL] from app . models import TrackedStock [EOL] from app . service import FilterService [EOL] from app . service import RankingService [EOL] from app . service import FilterService [EOL] from app . repository import TweetRepo [EOL] [EOL] [EOL] _ACTION_FILTERED_SPAM = [string] [EOL] _ACTION_SUCCESS = [string] [EOL] [EOL] [EOL] class TweetService ( metaclass = ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def handle ( self , raw_tweet ) : [EOL] [docstring] [EOL] [EOL] [EOL] class TweetServiceImpl ( TweetService ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , tracked_symbols , filter_svc , ranking_svc , tweet_repo , ) : [EOL] self . TRACKED_SYMBOLS = tracked_symbols [EOL] self . _filter_svc = filter_svc [EOL] self . _ranking_svc = ranking_svc [EOL] self . _tweet_repo = tweet_repo [EOL] [EOL] def handle ( self , raw_tweet ) : [EOL] content = self . _parse_tweet_contents ( raw_tweet ) [EOL] tweet_id = content . tweet . id [EOL] self . _log . info ( f" [string] { tweet_id } [string] " ) [EOL] if self . _filter_svc . is_spam ( content . tweet ) : [EOL] self . _log_tweet_handling ( content , _ACTION_FILTERED_SPAM ) [EOL] return [EOL] self . _tweet_repo . save_tweet_content ( content ) [EOL] self . _ranking_svc . rank ( content ) [EOL] self . _log_tweet_handling ( content , _ACTION_SUCCESS ) [EOL] [EOL] def _parse_tweet_contents ( self , raw_tweet ) : [EOL] [docstring] [EOL] deserilized_tweet = json . loads ( raw_tweet ) [EOL] tweet = self . _parse_tweet ( deserilized_tweet ) [EOL] links = self . _parse_links ( tweet . id , deserilized_tweet ) [EOL] symbols = self . _parse_symbols ( tweet . id , deserilized_tweet ) [EOL] [comment] [EOL] return TweetContent ( tweet = tweet , links = links , symbols = symbols ) [EOL] [EOL] def _parse_tweet ( self , tweet_dict ) : [EOL] [docstring] [EOL] return Tweet ( text = tweet_dict [ [string] ] , language = tweet_dict [ [string] ] , author_id = tweet_dict [ [string] ] [ [string] ] , author_followers = tweet_dict [ [string] ] [ [string] ] , ) [EOL] [EOL] def _parse_links ( self , tweet_id , tweet_dict ) : [EOL] [docstring] [EOL] entities = tweet_dict [ [string] ] [EOL] urls = [ self . _parse_url ( url ) for url in entities [ [string] ] ] [EOL] full_urls = filter ( lambda url : url != [string] and url != None , urls ) [EOL] return [ TweetLink ( url = url , tweet_id = tweet_id ) for url in full_urls ] [EOL] [EOL] def _parse_url ( self , url ) : [EOL] [docstring] [EOL] if [string] in url and url [ [string] ] != None : [EOL] return url [ [string] ] [EOL] elif [string] in url : [EOL] return url [ [string] ] [EOL] return [string] [EOL] [EOL] def _parse_symbols ( self , tweet_id , tweet ) : [EOL] [docstring] [EOL] all_symbols = self . _parse_symbol_text ( tweet ) [EOL] symbols = filter ( lambda s : s in self . TRACKED_SYMBOLS , set ( all_symbols ) ) [EOL] return [ TweetSymbol ( symbol = s , tweet_id = tweet_id ) for s in symbols ] [EOL] [EOL] def _parse_symbol_text ( self , tweet ) : [EOL] [docstring] [EOL] all_symbols = self . _parse_symbols_from_entities ( tweet ) [EOL] if [string] in tweet : [EOL] extended_tweet = tweet [ [string] ] [EOL] all_symbols += self . _parse_symbols_from_entities ( extended_tweet ) [EOL] if [string] in tweet : [EOL] all_symbols += self . _parse_symbol_text ( tweet [ [string] ] ) [EOL] return all_symbols [EOL] [EOL] def _parse_symbols_from_entities ( self , component ) : [EOL] [docstring] [EOL] if [string] not in component : [EOL] return [ ] [EOL] entities = component [ [string] ] [EOL] return [ symbol [ [string] ] . upper ( ) for symbol in entities [ [string] ] ] [EOL] [EOL] def _log_tweet_handling ( self , content , action ) : [EOL] [docstring] [EOL] self . _log . info ( f" [string] { content . tweet . id } [string] { action } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
[comment] [EOL] import app [EOL] import logging [EOL] import mq [EOL] import logging [EOL] import time [EOL] from pathlib import Path [EOL] [EOL] [comment] [EOL] from app . config import HealthCheckConfig [EOL] [EOL] [comment] [EOL] from . filter_service import FilterService , SpamFilterService [EOL] from . listener_service import StreamLogger , StreamListenerImpl , FileStreamer [EOL] from . ranking_service import RankingService , RestRankingService , MQRankingService [EOL] from . mq import MQConnectionChecker , MQConnectionFactory [EOL] from . tweet_service import TweetService , TweetServiceImpl [EOL] [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def emit_heartbeats ( config , checker ) : [EOL] [docstring] [EOL] while True : [EOL] if checker . is_connected ( config . MQ_HEALTH_TARGET ) : [EOL] Path ( config . FILENAME ) . touch ( ) [EOL] else : [EOL] _log . warn ( [string] ) [EOL] time . sleep ( config . INTERVAL ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Type , Any [EOL] import requests [EOL] import app [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] from uuid import uuid4 [EOL] from typing import Dict [EOL] [EOL] [comment] [EOL] import requests [EOL] [EOL] [comment] [EOL] from app . config import values [EOL] from app . models import Tweet [EOL] [EOL] [EOL] class FilterService ( metaclass = ABCMeta ) : [EOL] @ abstractmethod def is_spam ( self , tweet ) : [EOL] [docstring] [EOL] [EOL] [EOL] class SpamFilterService ( FilterService ) : [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . CLASSIFY_URL = f"{ config . URL }{ config . CLASSIFY_ROUTE }" [EOL] [EOL] def is_spam ( self , tweet ) : [EOL] spam_candidate = self . _create_spam_body ( tweet ) [EOL] body = json . dumps ( spam_candidate ) [EOL] resp = requests . post ( self . CLASSIFY_URL , data = body , headers = self . _headers ( tweet . id ) , timeout = values . RPC_TIMEOUT , ) [EOL] if not resp . ok : [EOL] self . _log . error ( f" [string] { resp . status_code } [string] { resp . text }" ) [EOL] return False [EOL] return self . _tweet_was_spam ( tweet , resp ) [EOL] [EOL] def _create_spam_body ( self , tweet ) : [EOL] [docstring] [EOL] return { [string] : tweet . text } [EOL] [EOL] def _headers ( self , request_id ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : values . USER_AGENT , values . REQUEST_ID_HEADER : request_id , } [EOL] [EOL] def _tweet_was_spam ( self , tweet , resp ) : [EOL] [docstring] [EOL] try : [EOL] resp_body = resp . json ( ) [EOL] self . _log . info ( f" [string] { tweet . id } [string] { resp_body } [string] " ) [EOL] return resp_body [ [string] ] == values . SPAM_LABEL [EOL] except Exception as e : [EOL] self . _log . error ( str ( e ) ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $app.models.Tweet$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $app.models.Tweet$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $app.models.Tweet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.Tweet$ 0 $requests.models.Response$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $app.models.Tweet$ 0 0 0 0 0 0 0 0 0 $app.models.Tweet$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $app.models.Tweet$ 0 $requests.Response$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.Tweet$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Type [EOL] import app [EOL] import typing [EOL] import os [EOL] from logging . config import dictConfig [EOL] [EOL] [comment] [EOL] from . logging import LOGGING_CONIFG [EOL] [EOL] dictConfig ( LOGGING_CONIFG ) [EOL] [EOL] from app . config import values [EOL] from app . config import util [EOL] [EOL] [EOL] class DBConfig : [EOL] URI = util . get_database_uri ( ) [EOL] ECHO = False [EOL] [EOL] [EOL] class TwitterConfig : [EOL] CONSUMER_KEY = util . getenv ( [string] ) [EOL] CONSUMER_SECRET = util . getenv ( [string] ) [EOL] ACCESS_TOKEN = util . getenv ( [string] ) [EOL] ACCESS_TOKEN_SECRET = util . getenv ( [string] ) [EOL] RATE_LIMIT_CODE = [number] [EOL] ERROR_PAUSE_SECONDS = [number] [EOL] [EOL] [EOL] class SpamFilterConfig : [EOL] URL = util . getenv ( [string] ) [EOL] CLASSIFY_ROUTE = [string] [EOL] [EOL] [EOL] class NewsRankerConfig : [EOL] URL = os . getenv ( [string] ) [EOL] RANK_ROUTE = [string] [EOL] [EOL] [EOL] class MQConfig : [EOL] TEST_MODE = os . getenv ( [string] ) in [ [string] , [string] ] [EOL] EXCHANGE = util . getenv ( [string] ) [EOL] QUEUE_NAME = util . getenv ( [string] ) [EOL] URI = util . get_mq_uri ( ) [EOL] [EOL] [EOL] class HealthCheckConfig : [EOL] MQ_HEALTH_TARGET = util . getenv ( [string] ) [EOL] FILENAME = util . getenv ( [string] ) [EOL] INTERVAL = int ( util . getenv ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.config.HealthCheckConfig]$ 0 0 0 0 0 0 0 0 $typing.Type[app.config.HealthCheckConfig]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Literal , Union , Set [EOL] import typing [EOL] import typing_extensions [EOL] import os [EOL] [EOL] [comment] [EOL] from app . config import util [EOL] [EOL] [EOL] DEVELOPMENT_PROFILE = [string] [EOL] TEST_PROFILE = [string] [EOL] PRODUCTION_PROFILE = [string] [EOL] [EOL] PACKAGE_NAME = [string] [EOL] USER_AGENT = [string] [EOL] RPC_TIMEOUT = [number] [EOL] THREAD_POOL_SIZE = int ( os . getenv ( [string] , default = [string] ) ) [EOL] [EOL] APP_PROFILE = os . getenv ( [string] , PRODUCTION_PROFILE ) [EOL] HANDLE_SPAM = os . getenv ( [string] , [string] ) == [string] [EOL] SPAM_LABEL = [string] [EOL] [EOL] [EOL] FORBIDDEN_DOMAINS = set ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] REQUEST_ID_HEADER = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def getenv ( key ) : [EOL] [docstring] [EOL] try : [EOL] return os . environ [ key ] [EOL] except KeyError : [EOL] _log . error ( f" [string] { key } [string] " ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def get_database_uri ( ) : [EOL] [docstring] [EOL] USER = getenv ( [string] ) [EOL] PASSWORD = getenv ( [string] ) [EOL] HOST = getenv ( [string] ) [EOL] PORT = getenv ( [string] ) [EOL] DB_NAME = getenv ( [string] ) [EOL] return f" [string] { USER } [string] { PASSWORD } [string] { HOST } [string] { PORT } [string] { DB_NAME }" [EOL] [EOL] [EOL] def get_mq_uri ( ) : [EOL] [docstring] [EOL] USER = getenv ( [string] ) [EOL] PASSWORD = getenv ( [string] ) [EOL] HOST = getenv ( [string] ) [EOL] PORT = getenv ( [string] ) [EOL] return f" [string] { USER } [string] { PASSWORD } [string] { HOST } [string] { PORT } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import app [EOL] import typing [EOL] import builtins [EOL] from abc import ABCMeta , abstractmethod [EOL] from typing import List [EOL] [EOL] [comment] [EOL] from app import db [EOL] from app . models import Stock [EOL] [EOL] [EOL] class StockRepo ( metaclass = ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def get_all ( self , include_inactive = False ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def save ( self , stock ) : [EOL] [docstring] [EOL] [EOL] [EOL] class SQLStockRepo ( StockRepo ) : [EOL] [docstring] [EOL] [EOL] def get_all ( self , include_inactive = False ) : [EOL] if include_inactive : [EOL] return db . session . query ( Stock ) . all ( ) [EOL] return db . session . query ( Stock ) . filter ( Stock . is_active == True ) . all ( ) [EOL] [EOL] [EOL] def save ( self , stock ) : [EOL] db . session . add ( stock ) [EOL] db . session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.models.Stock]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $app.models.Stock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.models.Stock]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $app.models.Stock$ 0 0 0 0 0 0 0 0 0 $app.models.Stock$ 0 0 0 0 0 0 0 0 0 0
from . stock_repo import StockRepo , SQLStockRepo [EOL] from . tweet_repo import TweetRepo , SQLTweetRepo [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , List , Any [EOL] import app [EOL] import typing [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] from typing import List [EOL] [EOL] [comment] [EOL] from app import db [EOL] from app . models import Tweet , TweetLink , TweetSymbol , TweetContent [EOL] [EOL] [EOL] class TweetRepo ( metaclass = ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def save_tweet_content ( self , content ) : [EOL] [docstring] [EOL] [EOL] [EOL] class SQLTweetRepo ( TweetRepo ) : [EOL] [docstring] [EOL] [EOL] _log = logging . getLogger ( [string] ) [EOL] [EOL] def save_tweet_content ( self , content ) : [EOL] tweet_id = content . tweet . id [EOL] success_steps = [ ] [EOL] try : [EOL] self . _save_tweet ( content . tweet ) [EOL] success_steps . append ( [string] ) [EOL] self . _save_links ( content . links ) [EOL] success_steps . append ( [string] ) [EOL] self . _save_symbols ( content . symbols ) [EOL] success_steps . append ( [string] ) [EOL] self . _log . info ( f" [string] { tweet_id } [string] { success_steps } [string] " ) [EOL] except Exception as e : [EOL] self . _log . error ( f" [string] { tweet_id } [string] { type ( e ) } [string] { str ( e ) } [string] { success_steps } [string] " ) [EOL] db . session . rollback ( ) [EOL] [EOL] def _save_tweet ( self , tweet ) : [EOL] db . session . add ( tweet ) [EOL] db . session . commit ( ) [EOL] [EOL] def _save_links ( self , links ) : [EOL] for link in links : [EOL] db . session . add ( link ) [EOL] db . session . commit ( ) [EOL] [EOL] def _save_symbols ( self , symbols ) : [EOL] for symbol in symbols : [EOL] db . session . add ( symbol ) [EOL] db . session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] from __future__ import with_statement [EOL] from alembic import context [EOL] from sqlalchemy import engine_from_config , pool [EOL] from logging . config import fileConfig [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] config = context . config [EOL] [EOL] [comment] [EOL] [comment] [EOL] fileConfig ( config . config_file_name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def get_database_uri ( ) : [EOL] [docstring] [EOL] DB_USERNAME = os . getenv ( [string] ) [EOL] DB_PASSWORD = os . getenv ( [string] ) [EOL] DB_HOST = os . getenv ( [string] ) [EOL] DB_PORT = os . getenv ( [string] ) [EOL] DB_NAME = os . getenv ( [string] ) [EOL] return [string] . format ( DB_USERNAME , DB_PASSWORD , DB_HOST , DB_PORT , DB_NAME ) [EOL] [EOL] [EOL] config . set_main_option ( [string] , get_database_uri ( ) ) [EOL] target_metadata = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def run_migrations_offline ( ) : [EOL] [docstring] [EOL] url = config . get_main_option ( [string] ) [EOL] context . configure ( url = url , target_metadata = target_metadata , literal_binds = True ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] connectable = engine_from_config ( config . get_section ( config . config_ini_section ) , prefix = [string] , poolclass = pool . NullPool ) [EOL] [EOL] with connectable . connect ( ) as connection : [EOL] context . configure ( connection = connection , target_metadata = target_metadata ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] if context . is_offline_mode ( ) : [EOL] run_migrations_offline ( ) [EOL] else : [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0