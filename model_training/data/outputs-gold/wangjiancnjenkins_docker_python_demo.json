from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import QueryView [EOL] [EOL] urlpatterns = [ path ( [string] , QueryView . as_view ( ) ) , path ( [string] , QueryView . as_view ( ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CQIConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] DEFAULT_READ_ACL = { [string] : [number] , [string] : [number] , } [EOL] [EOL] DEFAULT_WRITE_ACL = { [string] : [number] , [string] : [number] } [EOL] [EOL] DEFAULT_UPDATE_ACL = { [string] : [number] , [string] : [number] } [EOL] [EOL] DEFAULT_DELETE_ACL = { [string] : [number] , [string] : [number] } [EOL] [EOL] DEFAULT_ROW_ACL = { [string] : DEFAULT_READ_ACL , [string] : DEFAULT_WRITE_ACL } [EOL] [EOL] [EOL] def read_acl ( ) : [EOL] return DEFAULT_READ_ACL [EOL] [EOL] [EOL] def write_acl ( ) : [EOL] return DEFAULT_WRITE_ACL [EOL] [EOL] [EOL] def update_acl ( ) : [EOL] return DEFAULT_UPDATE_ACL [EOL] [EOL] [EOL] def delte_acl ( ) : [EOL] return DEFAULT_DELETE_ACL [EOL] [EOL] [EOL] def row_acl ( ) : [EOL] return DEFAULT_ROW_ACL [EOL] [EOL] [EOL] def get_acl ( permisson_name , level = [string] ) : [EOL] def acl ( ) : [EOL] acl_map = { [string] : DEFAULT_READ_ACL , [string] : DEFAULT_WRITE_ACL , [string] : DEFAULT_UPDATE_ACL , [string] : DEFAULT_DELETE_ACL , [string] : DEFAULT_ROW_ACL } [EOL] acl_item = acl_map . get ( permisson_name , { } ) [EOL] if level == [string] and permisson_name == [string] : [EOL] acl_item [ [string] ] . update ( { [string] : [number] } ) [EOL] acl_item [ [string] ] . update ( { [string] : [number] } ) [EOL] elif level == [string] : [EOL] acl_item . update ( { [string] : [number] } ) [EOL] return acl_item [EOL] return acl [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . register ) , path ( [string] , views . login ) , path ( [string] , views . logout ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] from django . views . decorators . http import require_POST [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . contrib . auth import authenticate [EOL] [EOL] from . models import UserProfile [EOL] from . auth_wrap import token_required [EOL] from utils . api_response import APIResponse , APIResponseError [EOL] [EOL] [EOL] @ require_POST @ csrf_exempt def register ( r ) : [EOL] [docstring] [EOL] data = json . loads ( r . body ) [EOL] user = UserProfile . objects . create_user ( ** data ) [EOL] return APIResponse ( user . token ) [EOL] [EOL] [EOL] @ csrf_exempt @ require_POST def login ( r ) : [EOL] [docstring] [EOL] data = json . loads ( r . body ) [EOL] user = authenticate ( ** data ) [EOL] if user is not None : [EOL] return APIResponse ( user . token ) [EOL] else : [EOL] return APIResponseError ( [number] ) [EOL] [EOL] [EOL] @ token_required @ require_POST @ csrf_exempt def logout ( r ) : [EOL] [docstring] [EOL] return APIResponse ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AclConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
import builtins [EOL] from typing import Type [EOL] import blog [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] [EOL] import jwt [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . core . validators import RegexValidator [EOL] from django . db import models [EOL] from django . utils . translation import gettext_lazy as _ [EOL] from django_mysql . models import JSONField [EOL] [EOL] from utils . base_model import BaseModel [EOL] [EOL] from . default_acl import write_acl , update_acl , delte_acl , read_acl [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class Acl ( BaseModel ) : [EOL] scope = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] name = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] read = JSONField ( default = read_acl ) [EOL] write = JSONField ( default = write_acl ) [EOL] update = JSONField ( default = update_acl ) [EOL] delete = JSONField ( default = delte_acl ) [EOL] [EOL] [EOL] class Role ( BaseModel ) : [EOL] name = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] desc = models . CharField ( [string] , max_length = [number] ) [EOL] [EOL] [EOL] class Group ( BaseModel ) : [EOL] name = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] desc = models . CharField ( [string] , max_length = [number] ) [EOL] roles = models . ManyToManyField ( Role ) [EOL] [EOL] [EOL] class UserProfile ( AbstractUser , BaseModel ) : [EOL] [EOL] mobile_validator = RegexValidator ( regex = [string] , message = [string] ) [EOL] [EOL] mobile = models . CharField ( [string] , max_length = [number] , validators = [ mobile_validator ] ) [EOL] [EOL] nickname = models . CharField ( _ ( [string] ) , max_length = [number] , help_text = _ ( [string] ) , error_messages = { [string] : _ ( [string] ) , } , ) [EOL] [EOL] roles = models . ManyToManyField ( Role ) [EOL] groups = models . ManyToManyField ( Group ) [EOL] [EOL] @ property def token ( self ) : [EOL] return self . _generate_jwt ( ) [EOL] [EOL] def _generate_jwt ( self ) : [EOL] token = jwt . encode ( { [string] : datetime . utcnow ( ) + timedelta ( days = [number] ) , [string] : datetime . utcnow ( ) , [string] : { [string] : self . username , [string] : self . is_active , [string] : self . nickname } } , settings . SECRET_KEY , algorithm = [string] ) [EOL] return token . decode ( ) [EOL] [EOL] def to_dict ( self ) : [EOL] return dict ( username = self . username , nickname = self . nickname , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any , Tuple , Type [EOL] import blog [EOL] import typing [EOL] from django . db import models [EOL] from django . db . models import Manager [EOL] from utils . base_model import BaseModel [EOL] from utils . tool import is_uuid [EOL] from acl . models import UserProfile [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Tag ( BaseModel ) : [EOL] user_uuid = models . CharField ( [string] , null = True , max_length = [number] ) [EOL] name = models . CharField ( max_length = [number] , db_index = True , unique = True ) [EOL] desc = models . CharField ( max_length = [number] , db_index = True , default = [string] ) [EOL] [EOL] [EOL] class Category ( BaseModel ) : [EOL] user_uuid = models . CharField ( [string] , null = True , max_length = [number] ) [EOL] name = models . CharField ( [string] , max_length = [number] ) [EOL] desc = models . CharField ( [string] , max_length = [number] , default = [string] ) [EOL] [EOL] [EOL] class Comment ( BaseModel ) : [EOL] body = models . TextField ( [string] ) [EOL] markdown = models . TextField ( ) [EOL] author = models . ForeignKey ( UserProfile , on_delete = models . CASCADE ) [EOL] parent = models . ForeignKey ( [string] , verbose_name = [string] , on_delete = models . CASCADE , null = True ) [EOL] [EOL] [EOL] class Like ( BaseModel ) : [EOL] from_user_uuid = models . UUIDField ( [string] ) [EOL] to_user_uuid = models . UUIDField ( [string] ) [EOL] kind = models . CharField ( [string] , max_length = [number] ) [EOL] target_uuid = models . UUIDField ( [string] ) [EOL] fav_name = models . CharField ( [string] , max_length = [number] ) [EOL] [EOL] [EOL] class LikeFolder ( BaseModel ) : [EOL] name = models . CharField ( [string] , max_length = [number] ) [EOL] desc = models . CharField ( [string] , max_length = [number] ) [EOL] author = models . ForeignKey ( UserProfile , verbose_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Rate ( BaseModel ) : [EOL] target_uuid = models . UUIDField ( [string] ) [EOL] goal = models . SmallIntegerField ( [string] ) [EOL] from_user_uuid = models . UUIDField ( [string] ) [EOL] to_user_uuid = models . UUIDField ( [string] ) [EOL] kind = models . CharField ( [string] , max_length = [number] ) [EOL] [EOL] [EOL] class Post ( BaseModel ) : [EOL] [EOL] POST_KIND_OPTIONS = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] POST_STATE_OPTIONS = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] POST_TYPE_OPTIONS = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] desc = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] private = models . BooleanField ( [string] , default = False , db_index = True ) [EOL] is_publish = models . BooleanField ( [string] , default = False , db_index = True ) [EOL] title = models . CharField ( [string] , max_length = [number] , db_index = True ) [EOL] tags = models . ManyToManyField ( Tag ) [EOL] markdown = models . TextField ( [string] ) [EOL] body = models . TextField ( [string] ) [EOL] kind = models . CharField ( [string] , choices = POST_KIND_OPTIONS , db_index = True , max_length = [number] ) [EOL] post_type = models . CharField ( [string] , choices = POST_TYPE_OPTIONS , default = [string] , db_index = True , max_length = [number] ) [EOL] rate = models . SmallIntegerField ( [string] , default = [number] , db_index = True ) [EOL] views_count = models . IntegerField ( [string] , default = [number] , db_index = True ) [EOL] [EOL] author = models . ForeignKey ( UserProfile , on_delete = models . SET_NULL , null = True ) [EOL] cat = models . ForeignKey ( Category , on_delete = models . SET_NULL , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . id } [string] { self . title }' [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] data = self . _to_dict ( ) [EOL] data . update ( tags = list ( self . tags . values ( ) ) if self . tags else [ ] , author = self . author . to_dict ( ) if self . author else None ) [EOL] return data [EOL] [EOL] def update_tag ( self , tags , user_id = [number] ) : [EOL] [docstring] [EOL] if tags : [EOL] tag_instances = [ ] [EOL] for tag in tags : [EOL] if not is_uuid ( tag ) : [EOL] tag_instances . append ( Tag . objects . get_or_create ( name = tag ) [ [number] ] ) [EOL] else : [EOL] tag_instances . append ( Tag . objects . get ( uuid = tag ) ) [EOL] self . tags . set ( tag_instances ) [EOL] [EOL] def add_view_count ( self , count = [number] ) : [EOL] [docstring] [EOL] self . views_count = self . views_count + count [EOL] self . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import blog [EOL] import typing [EOL] from utils . api_response import APIResponse , APIResponseError , APIError [EOL] from . models import Post , Tag , Category , Comment , Like , Rate [EOL] [EOL] [EOL] class Actions ( ) : [EOL] [EOL] def run_action ( self , r , * args , ** kwargs ) : [EOL] action_name = kwargs . get ( [string] ) [EOL] if not action_name or not hasattr ( self , action_name ) : [EOL] raise APIError ( [number] ) [EOL] action = getattr ( self , action_name ) [EOL] return action ( r , * args , ** kwargs ) [EOL] [EOL] def publish_post ( self , r , * args , ** kwargs ) : [EOL] return APIResponse ( kwargs ) [EOL] [EOL] [EOL] actions = Actions ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL] from . models import Post , Tag [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ArticleConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UploadConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . upload_image ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import uuid [EOL] import os [EOL] [EOL] from django . shortcuts import render [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . views . decorators . http import require_POST [EOL] from django . conf import settings [EOL] [EOL] from utils . api_response import APIResponse , APIError , APIResponseError [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def handle_upload_file ( file , path ) : [EOL] with open ( path , [string] ) as destination : [EOL] for chunk in file . chunks ( ) : [EOL] destination . write ( chunk ) [EOL] [EOL] [EOL] @ require_POST @ csrf_exempt def upload_image ( r ) : [EOL] files = r . FILES [EOL] image = files . get ( [string] ) [EOL] if not image : [EOL] return APIResponseError ( [number] ) [EOL] name = image . name [EOL] try : [EOL] ext = name . rsplit ( [string] ) [ [number] ] [EOL] except IndexError : [EOL] return APIResponseError ( [number] ) [EOL] file_name = uuid . uuid4 ( ) . hex + [string] + ext [EOL] path = os . path . join ( settings . ENV_UPLOAD_PATH , [string] , file_name ) [EOL] [EOL] url = os . path . join ( settings . STATIC_URL , os . path . join ( [string] , file_name ) ) [EOL] handle_upload_file ( image , path ) [EOL] [EOL] return APIResponse ( url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . http . response import HttpResponse [EOL] [EOL] from . error_code import get_msg [EOL] [EOL] [EOL] class APIError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , code = - [number] ) : [EOL] self . code = code [EOL] [EOL] [EOL] class APIResponse ( HttpResponse ) : [EOL] status_code = [number] [EOL] [EOL] def __init__ ( self , data = [string] , code = [number] , encoder = DjangoJSONEncoder , safe = True , json_dumps_params = None , ** kwargs ) : [EOL] json_dumps_params = json_dumps_params or { } [EOL] kwargs . setdefault ( [string] , [string] ) [EOL] res = dict ( code = code , msg = get_msg ( code ) ) [EOL] if data : [EOL] res . update ( data = data ) [EOL] if safe and not isinstance ( res , dict ) : [EOL] raise TypeError ( [string] [string] ) [EOL] res = json . dumps ( res , cls = DjangoJSONEncoder , ** json_dumps_params ) [EOL] super ( ) . __init__ ( content = res , ** kwargs ) [EOL] [EOL] [EOL] class APIResponseError ( APIResponse ) : [EOL] [EOL] status_code = [number] [EOL] [EOL] def __init__ ( self , code = [number] , data = { } , ** kwargs ) : [EOL] super ( ) . __init__ ( data = data , code = code , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import List , Any , Type , Dict [EOL] import blog [EOL] import typing [EOL] import uuid [EOL] import datetime [EOL] from abc import abstractmethod [EOL] [EOL] from django . db import models , transaction [EOL] from django_mysql . models import JSONField , Model [EOL] [EOL] from acl . default_acl import row_acl [EOL] from utils . api_response import APIError , APIResponseError [EOL] from utils . tool import is_uuid [EOL] [EOL] [EOL] class MyQuerySet ( models . QuerySet ) : [EOL] def pagination ( self , limit = [number] , offset = [number] ) : [EOL] [docstring] [EOL] meta = dict ( total_count = self . count ( ) , limit = limit , offset = offset ) [EOL] objects = [ o . to_dict ( ) for o in self [ offset : offset + limit ] ] [EOL] return dict ( meta = meta , objects = objects ) [EOL] [EOL] def get_or_api_404 ( self , ** kwargs ) : [EOL] [docstring] [EOL] try : [EOL] obj = self . get ( ** kwargs ) [EOL] except : [EOL] raise APIError ( [number] ) [EOL] else : [EOL] return obj [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] return self . update ( is_active = False ) [EOL] [EOL] def true_delete ( self ) : [EOL] [docstring] [EOL] return super ( MyQuerySet , self ) . delete ( ) [EOL] [EOL] [EOL] class MyManager ( models . Manager ) : [EOL] [EOL] def get_queryset ( self ) : [EOL] return MyQuerySet ( self . model , using = self . _db ) [EOL] [EOL] def get_or_api_404 ( self , ** kwargs ) : [EOL] return self . get_queryset ( ) . get_or_api_404 ( ** kwargs ) [EOL] [EOL] def active ( self , * args , ** filters ) : [EOL] filters . update ( is_active = True ) [EOL] return self . get_queryset ( ) . filter ( * args , ** filters ) [EOL] [EOL] [EOL] class BaseModel ( Model ) : [EOL] objects = MyManager ( ) [EOL] [EOL] fields_map = { } [EOL] [EOL] created = models . DateTimeField ( [string] , auto_now_add = True ) [EOL] last_modified = models . DateTimeField ( [string] , auto_now_add = True ) [EOL] [comment] [EOL] acl = JSONField ( default = row_acl ) [EOL] is_active = models . BooleanField ( [string] , default = True ) [EOL] uuid = models . UUIDField ( default = uuid . uuid4 ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . id } [string] { self . name }" [EOL] [EOL] @ classmethod def _get_fields ( cls ) : [EOL] if cls . fields_map : [EOL] return cls . fields_map [EOL] [EOL] FOREIGNKEY_LIKE_KEY = [ [string] , [string] , [string] , ] [EOL] MANYTOMANY = [ [string] ] [EOL] [EOL] _fields = cls . _meta . get_fields ( ) [EOL] [comment] [EOL] _field_map = { } [EOL] [EOL] for field in _fields : [EOL] name = field . name [EOL] cls_name = field . __class__ . __name__ [EOL] if cls_name in FOREIGNKEY_LIKE_KEY : [EOL] _field_map [ name ] = dict ( field = field , cls_name = cls_name ) [EOL] _field_map [ field . column ] = dict ( field = field ) [EOL] elif cls_name . endswith ( [string] ) : [EOL] _field_map [ f'{ name } [string] ' ] = dict ( field = field , cls_name = cls_name ) [EOL] else : [EOL] _field_map [ name ] = dict ( cls_name = cls_name , field = field ) [EOL] if cls_name . endswith ( [string] ) and field . choices : [EOL] _field_map [ name ] . update ( { f'{ name } [string] ' : field . choices } ) [EOL] cls . fields_map = _field_map [EOL] return _field_map [EOL] [EOL] def _to_dict ( self ) : [EOL] [EOL] FOREIGNKEY_LIKE_KEY = [ [string] , [string] , [string] , ] [EOL] MANYTOMANY = [ [string] ] [EOL] [EOL] data = { } [EOL] field_map = self . _get_fields ( ) [EOL] [EOL] for field_name , field_config in field_map . items ( ) : [EOL] cls_name = field_config . get ( [string] , [string] ) [EOL] if cls_name in FOREIGNKEY_LIKE_KEY : [EOL] attr = getattr ( self , field_name ) [EOL] value = attr . to_dict ( ) if attr else None [EOL] elif cls_name . endswith ( [string] ) : [EOL] value = [string] [EOL] elif cls_name in MANYTOMANY : [EOL] attr = getattr ( self , field_name ) [EOL] value = [ i . to_dict ( ) for i in attr . all ( ) ] if attr else [ ] [EOL] else : [EOL] value = self . __dict__ . get ( field_name ) [EOL] if field_name != [string] : [EOL] data [ field_name ] = value [EOL] return data [EOL] [EOL] def to_dict ( self ) : [EOL] return self . _to_dict ( ) [EOL] [EOL] @ staticmethod def pagination ( query_set , limit = [number] , offset = [number] ) : [EOL] meta = dict ( total_count = query_set . count ( ) , limit = limit , offset = offset ) [EOL] objects = [ o . to_dict ( ) for o in query_set [ offset : limit ] ] [EOL] return dict ( meta = meta , objects = objects ) [EOL] [EOL] @ transaction . atomic def update_fields ( self , ** kwargs ) : [EOL] _field_map = self . _get_fields ( ) [EOL] field_data = { } [EOL] _foreignkey_data = { } [EOL] _manytomany_data = { } [EOL] _no_field = { } [EOL] for field , value in kwargs . items ( ) : [EOL] field_info = _field_map . get ( field ) [EOL] cls_name = field_info . get ( [string] ) if field_info else [string] [EOL] if field_info and cls_name == [string] : [EOL] _foreignkey_data [ field ] = value or None [EOL] elif field_info and cls_name == [string] : [EOL] _manytomany_data [ field ] = value or [ ] [EOL] elif field_info : [EOL] field_data [ field ] = value [EOL] else : [EOL] _no_field [ field ] = value [EOL] foreignkey_data = self . _get_foreignKey ( ** _foreignkey_data ) [EOL] manytomany_data = self . _get_manyToMany ( ** _manytomany_data ) [EOL] self . __update ( ** field_data , ** foreignkey_data , ** manytomany_data ) [EOL] return self [EOL] [EOL] def _get_foreignKey ( self , ** kwargs ) : [EOL] _data = { } [EOL] _field_map = self . _get_fields ( ) [EOL] for field , value in kwargs . items ( ) : [EOL] model = _field_map . get ( field ) . get ( [string] ) . related_model [EOL] if is_uuid ( value ) : [EOL] _data [ field ] = model . objects . get ( uuid = value ) [EOL] else : [EOL] _data [ field ] = model . objects . get ( id = value ) [EOL] return _data [EOL] [EOL] def _get_manyToMany ( self , ** kwargs ) : [EOL] _data = { } [EOL] _field_map = self . _get_fields ( ) [EOL] for field , values in kwargs . items ( ) : [EOL] model = _field_map . get ( field ) . get ( [string] ) . related_model [EOL] if values : [EOL] if is_uuid ( values [ [number] ] ) : [EOL] _data [ field ] = model . objects . filter ( uuid__in = values ) [EOL] else : [EOL] _data [ field ] = model . objects . filter ( id__in = values ) [EOL] else : [EOL] return { } [EOL] return _data [EOL] [EOL] def __update ( self , ** data ) : [EOL] _field_map = self . _get_fields ( ) [EOL] for field , value in data . items ( ) : [EOL] if _field_map . get ( field ) . get ( [string] ) == [string] : [EOL] attr = getattr ( self , field ) [EOL] attr . set ( value ) [EOL] else : [EOL] setattr ( self , field , value ) [EOL] self . save_to_now ( ) [EOL] return self [EOL] [EOL] @ classmethod def create ( cls , ** data ) : [EOL] _field_map = cls . _get_fields ( ) [EOL] data_to_create = { } [EOL] foreign_key_data = { } [EOL] many_to_many_data = { } [EOL] for field , value in data . items ( ) : [EOL] field_meta = _field_map . get ( field ) [EOL] cls_name = field_meta . get ( [string] ) if field_meta else None [EOL] if field_meta is None : [EOL] pass [EOL] elif cls_name == [string] : [EOL] model = field_meta . get ( [string] ) . related_model [EOL] if isinstance ( value , int ) : [EOL] data_to_create [ field ] = model . objects . get_or_api_404 ( id = value ) [EOL] elif isinstance ( value , model ) : [EOL] data_to_create [ field ] = value [EOL] elif cls_name == [string] : [EOL] if isinstance ( value , list ) : [EOL] model = field_meta . get ( [string] ) . related_model [EOL] many_to_many_data [ field ] = model . objects . filter ( id__in = value ) [EOL] elif cls_name . endswith ( [string] ) : [EOL] data_to_create [ field ] = value [EOL] obj = cls ( ** data_to_create ) [EOL] obj . save_to_now ( ) [EOL] if many_to_many_data : [EOL] for field , value in many_to_many_data . items ( ) : [EOL] attr = getattr ( obj , field ) [EOL] attr . set ( value ) [EOL] return obj [EOL] [EOL] def save_to_now ( self ) : [EOL] [docstring] [EOL] self . last_modified = datetime . datetime . now ( ) [EOL] self . save ( ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] self . is_active = False [EOL] self . save ( ) [EOL] [EOL] def ture_delete ( self ) : [EOL] [docstring] [EOL] super ( BaseModel , self ) . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $blog.utils.base_model.BaseModel$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $blog.utils.base_model.BaseModel$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $blog.utils.base_model.BaseModel$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $blog.utils.base_model.BaseModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , NamedTuple [EOL] import builtins [EOL] import typing [EOL] import django [EOL] import uuid [EOL] from collections import namedtuple [EOL] from typing import NamedTuple , Tuple [EOL] [EOL] from django . http import QueryDict [EOL] from django . db . models import Q [EOL] [EOL] from utils . model_search import get_model_search [EOL] [EOL] [EOL] def is_uuid ( arg ) : [EOL] uuid_str = str ( arg ) [EOL] try : [EOL] uuid . UUID ( uuid_str ) [EOL] except Exception : [EOL] return False [EOL] else : [EOL] return True [EOL] [EOL] [EOL] def parse_query_string ( queryDict , model_name ) : [EOL] [docstring] [EOL] [EOL] _clone = queryDict . copy ( ) [EOL] [EOL] Query = namedtuple ( [string] , [string] ) [EOL] [EOL] order_by = _clone . pop ( [string] , [ ] ) [EOL] search_text = _clone . pop ( [string] , [ [string] ] ) [ - [number] ] [EOL] search = get_model_search ( search_text , model_name ) [EOL] pagination = { [string] : int ( _clone . pop ( [string] , [ [number] ] ) [ - [number] ] ) , [string] : int ( _clone . pop ( [string] , [ [number] ] ) [ - [number] ] ) , } [EOL] [EOL] defer = [ ] [EOL] defer_query = _clone . pop ( [string] , [ ] ) [EOL] for i in defer_query : [EOL] defer . extend ( i . split ( [string] ) ) [EOL] [EOL] filters = _clone . dict ( ) [EOL] [EOL] query = Query ( pagination , order_by , filters , defer , search ) [EOL] return query [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . utils . deprecation import MiddlewareMixin [EOL] [EOL] from utils . api_response import APIError , APIResponseError [EOL] [EOL] [EOL] class APIMiddleware ( MiddlewareMixin ) : [EOL] [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [comment] [EOL] [EOL] def __call__ ( self , request ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] response = self . get_response ( request ) [EOL] [EOL] response [ [string] ] = os . environ . get ( [string] , [string] ) [EOL] response [ [string] ] = os . environ . get ( [string] , [string] ) [EOL] response [ [string] ] = os . environ . get ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return response [EOL] [EOL] def process_exception ( self , request , exception ) : [EOL] [docstring] [EOL] if isinstance ( exception , APIError ) : [EOL] return APIResponseError ( exception . code ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0