[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Any [EOL] [EOL] [EOL] class AbstractRuleInstance : [EOL] [docstring] [EOL] def _toTex ( self ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def eval ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] def toTex ( self ) : [EOL] [docstring] [EOL] return [string] + self . _toTex ( ) + [string] [EOL] [EOL] [EOL] class DerivationError ( Exception ) : [EOL] [docstring] [EOL] def __init__ ( self , scope , message , ** kwargs ) : [EOL] self . message = message . format ( ** kwargs ) [EOL] self . scope = scope [EOL] super ( ) . __init__ ( self , message ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( scope = self . scope , msg = self . message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetopicSet import Graft , pastingDiagram , Point , RuleInstance , Shift [EOL] from opetopy . UnnamedOpetope import address , Arrow , OpetopicInteger , OpetopicTree [EOL] from opetopy . UnnamedOpetope import Graft as OptGraft [EOL] from opetopy . UnnamedOpetope import Shift as OptShift [EOL] [EOL] [comment] [EOL] omega = OptGraft ( OptShift ( OpetopicInteger ( [number] ) ) , OpetopicInteger ( [number] ) , address ( [ [ [string] ] ] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] classic = Point ( None , [string] ) [comment] [EOL] [EOL] [comment] [EOL] classic = Graft ( classic , pastingDiagram ( Arrow ( ) , { address ( [ ] , [number] ) : [string] } ) ) [EOL] classic = Shift ( classic , [string] , [string] ) [EOL] [EOL] [comment] [EOL] classic = Graft ( classic , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] } ) ) [EOL] classic = Shift ( classic , [string] , [string] ) [EOL] [EOL] [comment] [EOL] classic = Graft ( classic , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] , address ( [ [string] , [string] ] ) : [string] } ) ) [EOL] classic = Shift ( classic , [string] , [string] ) [EOL] [EOL] [comment] [EOL] classic = Graft ( classic , pastingDiagram ( omega , { address ( [ ] , [number] ) : [string] , address ( [ [ [string] ] ] ) : [string] } ) ) [EOL] classic = Shift ( classic , [string] , [string] ) [EOL] [EOL] print ( classic . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Graft$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetope.Graft$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
from typing import Any , Type , Tuple , Optional [EOL] import typing [EOL] import opetopy [EOL] import unittest [EOL] [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . common import DerivationError [EOL] [EOL] from opetopy import NamedOpetope [EOL] [EOL] [EOL] class Test_NamedOpetope_Variable ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . b0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . c1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . a1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . a0 , self . a0 ) [EOL] self . assertEqual ( self . b0 , self . b0 ) [EOL] self . assertEqual ( self . c1 , self . c1 ) [EOL] self . assertEqual ( self . a1 , self . a1 ) [EOL] self . assertNotEqual ( self . a0 , self . b0 ) [EOL] self . assertNotEqual ( self . a0 , self . c1 ) [EOL] self . assertNotEqual ( self . a0 , self . a1 ) [EOL] [EOL] def test___init__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Variable ( [string] , - [number] ) [EOL] NamedOpetope . Variable ( [string] , [number] ) [EOL] [EOL] [EOL] class Test_NamedOpetope_Term ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . w = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . x = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . y = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . z = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . a = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . b = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . c = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . d = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . e = NamedOpetope . Variable ( [string] , [number] ) [EOL] [comment] [EOL] self . tw = NamedOpetope . Term ( self . w ) [EOL] self . tx = NamedOpetope . Term ( self . x ) [EOL] self . ty = NamedOpetope . Term ( self . y ) [EOL] self . tz = NamedOpetope . Term ( self . z ) [EOL] self . ty [ self . c ] = self . tz [EOL] self . ty [ self . d ] = NamedOpetope . Term ( self . e , True ) [EOL] self . tw [ self . a ] = self . tx [EOL] self . tw [ self . b ] = self . ty [EOL] [EOL] def test___contains__ ( self ) : [EOL] self . assertIn ( self . a , self . tw ) [EOL] self . assertIn ( self . b , self . tw ) [EOL] self . assertIn ( self . c , self . tw ) [EOL] self . assertIn ( self . d , self . tw ) [EOL] self . assertNotIn ( self . e , self . tw ) [EOL] self . assertIn ( self . w , self . tw ) [EOL] self . assertIn ( self . x , self . tw ) [EOL] self . assertIn ( self . y , self . tw ) [EOL] self . assertIn ( self . z , self . tw ) [EOL] self . assertNotIn ( self . a , self . tx ) [EOL] self . assertNotIn ( self . b , self . tx ) [EOL] self . assertNotIn ( self . c , self . tx ) [EOL] self . assertNotIn ( self . d , self . tx ) [EOL] self . assertNotIn ( self . e , self . tx ) [EOL] self . assertNotIn ( self . w , self . tx ) [EOL] self . assertIn ( self . x , self . tx ) [EOL] self . assertNotIn ( self . y , self . tx ) [EOL] self . assertNotIn ( self . z , self . tx ) [EOL] self . assertNotIn ( self . a , self . ty ) [EOL] self . assertNotIn ( self . b , self . ty ) [EOL] self . assertIn ( self . c , self . ty ) [EOL] self . assertIn ( self . d , self . ty ) [EOL] self . assertNotIn ( self . e , self . ty ) [EOL] self . assertNotIn ( self . w , self . ty ) [EOL] self . assertNotIn ( self . x , self . ty ) [EOL] self . assertIn ( self . y , self . ty ) [EOL] self . assertIn ( self . z , self . ty ) [EOL] self . assertNotIn ( self . a , self . tz ) [EOL] self . assertNotIn ( self . b , self . tz ) [EOL] self . assertNotIn ( self . c , self . tz ) [EOL] self . assertNotIn ( self . d , self . tz ) [EOL] self . assertNotIn ( self . e , self . tz ) [EOL] self . assertNotIn ( self . w , self . tz ) [EOL] self . assertNotIn ( self . x , self . tz ) [EOL] self . assertNotIn ( self . y , self . tz ) [EOL] self . assertIn ( self . z , self . tz ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . tw , self . tw ) [EOL] self . assertEqual ( self . tx , self . tx ) [EOL] self . assertEqual ( self . ty , self . ty ) [EOL] self . assertEqual ( self . tz , self . tz ) [EOL] self . assertNotEqual ( self . tx , self . tz ) [EOL] self . assertNotEqual ( self . tw , NamedOpetope . Term ( self . w ) ) [EOL] self . assertNotEqual ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] [EOL] def test_dim ( self ) : [EOL] self . assertEqual ( self . tw . dimension , [number] ) [EOL] self . assertEqual ( self . tx . dimension , [number] ) [EOL] self . assertEqual ( self . ty . dimension , [number] ) [EOL] self . assertEqual ( self . tz . dimension , [number] ) [EOL] self . assertEqual ( NamedOpetope . Term ( self . e , True ) . dimension , [number] ) [EOL] [EOL] def test_graftTuples ( self ) : [EOL] self . assertEqual ( self . tw . graftTuples ( ) , { ( self . a , self . x ) , ( self . b , self . y ) , ( self . c , self . z ) } ) [EOL] [EOL] def test_isVariable ( self ) : [EOL] self . assertFalse ( self . tw . isVariable ( ) ) [EOL] self . assertTrue ( self . tx . isVariable ( ) ) [EOL] self . assertFalse ( self . ty . isVariable ( ) ) [EOL] self . assertTrue ( self . tz . isVariable ( ) ) [EOL] [EOL] def test_variables ( self ) : [EOL] self . assertEqual ( self . tw . variables ( [number] ) , set ( ) ) [EOL] self . assertEqual ( self . tw . variables ( [number] ) , { self . a , self . b , self . c , self . d } ) [EOL] self . assertEqual ( self . tw . variables ( [number] ) , { self . w , self . x , self . y , self . z } ) [EOL] [EOL] [EOL] class Test_NamedOpetope_Type ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . f = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . alpha = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . t0 = NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) [EOL] self . t1 = NamedOpetope . Type ( [ NamedOpetope . Term ( self . a ) , NamedOpetope . Term ( ) ] ) [EOL] self . t2 = NamedOpetope . Type ( [ NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . a ) , NamedOpetope . Term ( ) ] ) [EOL] self . t3 = NamedOpetope . Type ( [ NamedOpetope . Term ( self . alpha ) , NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . a ) , NamedOpetope . Term ( ) ] ) [EOL] [EOL] def test___contains__ ( self ) : [EOL] self . assertNotIn ( self . a , self . t0 ) [EOL] self . assertNotIn ( self . f , self . t0 ) [EOL] self . assertNotIn ( self . alpha , self . t0 ) [EOL] self . assertIn ( self . a , self . t1 ) [EOL] self . assertNotIn ( self . f , self . t1 ) [EOL] self . assertNotIn ( self . alpha , self . t1 ) [EOL] self . assertIn ( self . a , self . t2 ) [EOL] self . assertIn ( self . f , self . t2 ) [EOL] self . assertNotIn ( self . alpha , self . t2 ) [EOL] self . assertIn ( self . a , self . t3 ) [EOL] self . assertIn ( self . f , self . t3 ) [EOL] self . assertIn ( self . alpha , self . t3 ) [EOL] self . assertNotIn ( NamedOpetope . Variable ( [string] , [number] ) , self . t3 ) [EOL] self . assertNotIn ( NamedOpetope . Variable ( [string] , [number] ) , self . t3 ) [EOL] [EOL] def test___init__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Type ( [ NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . a ) , NamedOpetope . Term ( ) ] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Type ( [ NamedOpetope . Term ( self . alpha ) , NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( ) ] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Type ( [ ] ) [EOL] [EOL] def test_variables ( self ) : [EOL] self . assertEqual ( self . t3 . variables ( [number] ) , { self . a } ) [EOL] self . assertEqual ( self . t3 . variables ( [number] ) , { self . f } ) [EOL] self . assertEqual ( self . t3 . variables ( [number] ) , { self . alpha } ) [EOL] self . assertEqual ( self . t3 . variables ( [number] ) , set ( ) ) [EOL] [EOL] [EOL] class Test_NamedOpetope_Typing ( unittest . TestCase ) : [EOL] [EOL] def test___init__ ( self ) : [EOL] NamedOpetope . Typing ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) ) [EOL] NamedOpetope . Typing ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Type ( [ NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( ) ] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Typing ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Typing ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Type ( [ NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( ) ] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . Typing ( NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Type ( [ NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) , NamedOpetope . Term ( ) ] ) ) [EOL] [EOL] [EOL] class Test_NamedOpetope_Context ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . term1 = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] self . term2 = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] self . term3 = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] self . term4 = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] self . typing1 = NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) [EOL] self . typing2 = NamedOpetope . Type ( [ self . term1 , NamedOpetope . Term ( ) ] ) [EOL] self . typing3 = NamedOpetope . Type ( [ self . term2 , self . term1 , NamedOpetope . Term ( ) ] ) [EOL] self . typing4 = NamedOpetope . Type ( [ self . term3 , self . term2 , self . term1 , NamedOpetope . Term ( ) ] ) [EOL] self . ctx1 = NamedOpetope . Context ( ) [EOL] self . ctx2 = self . ctx1 + NamedOpetope . Typing ( self . term1 , self . typing1 ) [EOL] self . ctx3 = self . ctx2 + NamedOpetope . Typing ( self . term2 , self . typing2 ) [EOL] self . ctx4 = self . ctx3 + NamedOpetope . Typing ( self . term3 , self . typing3 ) [EOL] self . ctx5 = self . ctx4 + NamedOpetope . Typing ( self . term4 , self . typing4 ) [EOL] [EOL] def test___add__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 + NamedOpetope . Typing ( self . term1 , self . typing1 ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 + NamedOpetope . Typing ( self . term2 , self . typing2 ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 + NamedOpetope . Typing ( self . term3 , self . typing3 ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 + NamedOpetope . Typing ( self . term4 , self . typing4 ) [EOL] term = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] term [ NamedOpetope . Variable ( [string] , [number] ) ] = NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] typing = NamedOpetope . Typing ( term , self . typing3 ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 + typing [EOL] [EOL] def test___contains__ ( self ) : [EOL] self . assertNotIn ( self . term1 . variable , self . ctx1 ) [EOL] self . assertIn ( self . term1 . variable , self . ctx2 ) [EOL] self . assertIn ( self . term1 . variable , self . ctx3 ) [EOL] self . assertIn ( self . term1 . variable , self . ctx4 ) [EOL] self . assertIn ( self . term1 . variable , self . ctx5 ) [EOL] self . assertNotIn ( self . term2 . variable , self . ctx1 ) [EOL] self . assertNotIn ( self . term2 . variable , self . ctx2 ) [EOL] self . assertIn ( self . term2 . variable , self . ctx3 ) [EOL] self . assertIn ( self . term2 . variable , self . ctx4 ) [EOL] self . assertIn ( self . term2 . variable , self . ctx5 ) [EOL] self . assertNotIn ( self . term3 . variable , self . ctx1 ) [EOL] self . assertNotIn ( self . term3 . variable , self . ctx2 ) [EOL] self . assertNotIn ( self . term3 . variable , self . ctx3 ) [EOL] self . assertIn ( self . term3 . variable , self . ctx4 ) [EOL] self . assertIn ( self . term3 . variable , self . ctx5 ) [EOL] self . assertNotIn ( self . term4 . variable , self . ctx1 ) [EOL] self . assertNotIn ( self . term4 . variable , self . ctx2 ) [EOL] self . assertNotIn ( self . term4 . variable , self . ctx3 ) [EOL] self . assertNotIn ( self . term4 . variable , self . ctx4 ) [EOL] self . assertIn ( self . term4 . variable , self . ctx5 ) [EOL] [EOL] def test_source ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , - [number] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) [EOL] self . assertEqual ( self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertEqual ( self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertEqual ( self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertEqual ( self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertEqual ( self . ctx5 . source ( NamedOpetope . Variable ( [string] , [number] ) , [number] ) , NamedOpetope . Term ( ) ) [EOL] [EOL] def test_typeOf ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx1 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx2 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) [EOL] self . assertEqual ( self . ctx5 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) . terms , self . typing1 . terms ) [EOL] self . assertEqual ( self . ctx5 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) . terms , self . typing2 . terms ) [EOL] self . assertEqual ( self . ctx5 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) . terms , self . typing3 . terms ) [EOL] self . assertEqual ( self . ctx5 . typeOf ( NamedOpetope . Variable ( [string] , [number] ) ) . terms , self . typing4 . terms ) [EOL] [EOL] [EOL] class Test_NamedOpetope_EquationalTheory ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . b0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . c0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . d0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . e0 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . a1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . th1 = NamedOpetope . EquationalTheory ( ) [EOL] self . th2 = self . th1 + ( self . a0 , self . b0 ) [EOL] self . th3 = self . th2 + ( self . c0 , self . d0 ) [EOL] self . th4 = self . th3 + ( self . c0 , self . e0 ) [EOL] self . th5 = self . th4 + ( self . b0 , self . a0 ) [EOL] self . th6 = self . th5 + ( self . a0 , self . e0 ) [EOL] [EOL] def test___add__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . EquationalTheory ( ) + ( self . a0 , self . a1 ) [EOL] self . assertEqual ( len ( self . th2 . classes ) , [number] ) [EOL] self . assertEqual ( self . th2 . classes [ [number] ] , { self . a0 , self . b0 } ) [EOL] self . assertEqual ( len ( self . th3 . classes ) , [number] ) [EOL] self . assertEqual ( self . th3 . classes [ [number] ] , { self . a0 , self . b0 } ) [EOL] self . assertEqual ( self . th3 . classes [ [number] ] , { self . c0 , self . d0 } ) [EOL] self . assertEqual ( len ( self . th4 . classes ) , [number] ) [EOL] self . assertEqual ( self . th4 . classes [ [number] ] , { self . a0 , self . b0 } ) [EOL] self . assertEqual ( self . th4 . classes [ [number] ] , { self . c0 , self . d0 , self . e0 } ) [EOL] self . assertEqual ( len ( self . th5 . classes ) , [number] ) [EOL] self . assertEqual ( self . th5 . classes [ [number] ] , { self . a0 , self . b0 } ) [EOL] self . assertEqual ( self . th5 . classes [ [number] ] , { self . c0 , self . d0 , self . e0 } ) [EOL] self . assertEqual ( len ( self . th6 . classes ) , [number] ) [EOL] self . assertEqual ( self . th6 . classes [ [number] ] , { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) [EOL] [EOL] def test___or__ ( self ) : [EOL] self . assertFalse ( ( self . th1 | self . th1 ) . equal ( self . a0 , self . b0 ) ) [EOL] self . assertFalse ( ( self . th1 | self . th2 ) . equal ( self . a0 , self . c0 ) ) [EOL] self . assertTrue ( ( self . th2 | self . th2 ) . equal ( self . a0 , self . b0 ) ) [EOL] self . assertTrue ( ( self . th2 | ( NamedOpetope . EquationalTheory ( ) + ( self . b0 , self . e0 ) ) ) . equal ( self . e0 , self . a0 ) ) [EOL] [EOL] def test_classOf ( self ) : [EOL] self . assertEqual ( self . th1 . classOf ( self . a0 ) , set ( { self . a0 } ) ) [EOL] self . assertEqual ( self . th1 . classOf ( self . b0 ) , set ( { self . b0 } ) ) [EOL] self . assertEqual ( self . th1 . classOf ( self . c0 ) , set ( { self . c0 } ) ) [EOL] self . assertEqual ( self . th1 . classOf ( self . d0 ) , set ( { self . d0 } ) ) [EOL] self . assertEqual ( self . th1 . classOf ( self . e0 ) , set ( { self . e0 } ) ) [EOL] self . assertEqual ( self . th1 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . a0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . b0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . c0 ) , set ( { self . c0 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . d0 ) , set ( { self . d0 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . e0 ) , set ( { self . e0 } ) ) [EOL] self . assertEqual ( self . th2 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . a0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . b0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . c0 ) , set ( { self . c0 , self . d0 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . d0 ) , set ( { self . c0 , self . d0 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . e0 ) , set ( { self . e0 } ) ) [EOL] self . assertEqual ( self . th3 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . a0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . b0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . c0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . d0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . e0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th4 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . a0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . b0 ) , set ( { self . a0 , self . b0 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . c0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . d0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . e0 ) , set ( { self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th5 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . a0 ) , set ( { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . b0 ) , set ( { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . c0 ) , set ( { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . d0 ) , set ( { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . e0 ) , set ( { self . a0 , self . b0 , self . c0 , self . d0 , self . e0 } ) ) [EOL] self . assertEqual ( self . th6 . classOf ( self . a1 ) , set ( { self . a1 } ) ) [EOL] [EOL] def test_equal ( self ) : [EOL] self . assertTrue ( self . th2 . equal ( self . a0 , self . b0 ) ) [EOL] self . assertTrue ( self . th2 . equal ( self . b0 , self . a0 ) ) [EOL] self . assertFalse ( self . th2 . equal ( self . a0 , self . a1 ) ) [EOL] self . assertFalse ( self . th2 . equal ( self . c0 , self . d0 ) ) [EOL] self . assertTrue ( self . th3 . equal ( self . a0 , self . b0 ) ) [EOL] self . assertTrue ( self . th3 . equal ( self . c0 , self . d0 ) ) [EOL] self . assertFalse ( self . th3 . equal ( self . a0 , self . c0 ) ) [EOL] self . assertFalse ( self . th3 . equal ( self . a0 , self . d0 ) ) [EOL] self . assertFalse ( self . th4 . equal ( self . a0 , self . e0 ) ) [EOL] self . assertFalse ( self . th4 . equal ( self . b0 , self . e0 ) ) [EOL] self . assertTrue ( self . th6 . equal ( self . a0 , self . b0 ) ) [EOL] self . assertTrue ( self . th6 . equal ( self . a0 , self . c0 ) ) [EOL] self . assertTrue ( self . th6 . equal ( self . a0 , self . d0 ) ) [EOL] self . assertTrue ( self . th6 . equal ( self . a0 , self . e0 ) ) [EOL] [EOL] def test_isIn ( self ) : [EOL] self . assertTrue ( self . th1 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th1 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th1 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th1 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th1 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th1 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th2 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th2 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th2 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th2 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th2 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th2 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th3 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th3 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th3 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th3 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th3 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th3 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th4 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th4 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th4 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th4 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th4 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th4 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th5 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th5 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th5 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th5 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th5 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th5 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th6 . isIn ( self . a0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th6 . isIn ( self . b0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th6 . isIn ( self . c0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th6 . isIn ( self . d0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertTrue ( self . th6 . isIn ( self . e0 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] self . assertFalse ( self . th6 . isIn ( self . a1 , NamedOpetope . Term ( self . a0 ) ) ) [EOL] [EOL] [EOL] class Test_NamedOpetope_Sequent ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . b1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . c1 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . a2 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . b2 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . c2 = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . f = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . g = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . h = NamedOpetope . Variable ( [string] , [number] ) [EOL] self . i = NamedOpetope . Variable ( [string] , [number] ) [EOL] ctx = NamedOpetope . Context ( ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . a1 ) , NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . b1 ) , NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . c1 ) , NamedOpetope . Type ( [ NamedOpetope . Term ( ) ] ) ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . f ) , NamedOpetope . Type ( [ NamedOpetope . Term ( self . a2 ) , NamedOpetope . Term ( ) ] ) ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . g ) , NamedOpetope . Type ( [ NamedOpetope . Term ( self . b2 ) , NamedOpetope . Term ( ) ] ) ) + NamedOpetope . Typing ( NamedOpetope . Term ( self . h ) , NamedOpetope . Type ( [ NamedOpetope . Term ( self . c2 ) , NamedOpetope . Term ( ) ] ) ) [EOL] eqth = NamedOpetope . EquationalTheory ( ) + ( self . b1 , self . b2 ) + ( self . c1 , self . c2 ) + ( self . h , self . i ) [EOL] self . sequent = NamedOpetope . Sequent ( eqth , ctx , None ) [EOL] self . fg = self . sequent . graft ( NamedOpetope . Term ( self . g ) , self . b2 , NamedOpetope . Term ( self . f ) ) [EOL] self . gh = self . sequent . graft ( NamedOpetope . Term ( self . h ) , self . c2 , NamedOpetope . Term ( self . g ) ) [EOL] self . fgh1 = self . sequent . graft ( self . gh , self . b2 , NamedOpetope . Term ( self . f ) ) [EOL] self . fgh2 = self . sequent . graft ( NamedOpetope . Term ( self . h ) , self . c2 , self . fg ) [EOL] [EOL] def test_equal ( self ) : [EOL] self . assertTrue ( self . sequent . equal ( self . fgh1 , self . fgh2 ) ) [EOL] self . assertTrue ( self . sequent . equal ( NamedOpetope . Term ( self . h ) , NamedOpetope . Term ( self . i ) ) ) [EOL] self . assertTrue ( self . sequent . equal ( self . sequent . graft ( NamedOpetope . Term ( self . i ) , self . c1 , self . fg ) , self . fgh1 ) ) [EOL] self . assertTrue ( self . sequent . equal ( self . sequent . graft ( NamedOpetope . Term ( self . i ) , self . c1 , self . fg ) , self . fgh2 ) ) [EOL] self . assertFalse ( self . sequent . equal ( self . gh , NamedOpetope . Term ( self . h ) ) ) [EOL] self . assertFalse ( self . sequent . equal ( self . gh , NamedOpetope . Term ( self . g ) ) ) [EOL] self . assertFalse ( self . sequent . equal ( self . gh , self . fg ) ) [EOL] [EOL] def test_graft ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( NamedOpetope . Term ( self . g ) , self . sequent . graft ( NamedOpetope . Term ( self . g ) , self . c1 , NamedOpetope . Term ( self . f ) ) ) [EOL] self . assertEqual ( self . fgh1 , self . fgh2 ) [EOL] self . assertEqual ( len ( self . fgh1 . keys ( ) ) , [number] ) [EOL] self . assertTrue ( self . sequent . theory . equal ( list ( self . fgh1 . keys ( ) ) [ [number] ] , self . c1 ) ) [EOL] t = list ( self . fgh1 . values ( ) ) [ [number] ] [EOL] self . assertTrue ( self . sequent . theory . equal ( t . variable , self . g ) ) [EOL] self . assertEqual ( len ( t . keys ( ) ) , [number] ) [EOL] self . assertTrue ( self . sequent . theory . equal ( list ( t . keys ( ) ) [ [number] ] , self . b1 ) ) [EOL] self . assertTrue ( self . sequent . theory . equal ( list ( t . values ( ) ) [ [number] ] . variable , self . f ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . sequent . graft ( self . fg , self . b1 , NamedOpetope . Term ( self . f ) ) [EOL] [EOL] def test_substitute ( self ) : [EOL] res = self . sequent . substitute ( self . fg , self . gh , self . g ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] self . assertEqual ( res [ [number] ] , self . fgh1 ) [EOL] res = self . sequent . substitute ( self . gh , self . fg , self . g ) [EOL] self . assertEqual ( res [ [number] ] , self . fgh1 ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] res = self . sequent . substitute ( NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . f ) , self . f ) [EOL] self . assertEqual ( res [ [number] ] , NamedOpetope . Term ( self . f ) ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] res = self . sequent . substitute ( NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . fg ) , self . f ) [EOL] self . assertEqual ( res [ [number] ] , NamedOpetope . Term ( self . fg ) ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] res = self . sequent . substitute ( NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . fg ) , self . g ) [EOL] self . assertEqual ( res [ [number] ] , NamedOpetope . Term ( self . f ) ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] res = self . sequent . substitute ( NamedOpetope . Term ( self . f ) , NamedOpetope . Term ( self . fgh1 ) , self . f ) [EOL] self . assertEqual ( res [ [number] ] , NamedOpetope . Term ( self . fgh1 ) ) [EOL] self . assertIs ( res [ [number] ] , None ) [EOL] res = self . sequent . substitute ( self . fgh1 , NamedOpetope . Term ( self . c1 , True ) , self . g ) [EOL] self . assertEqual ( res [ [number] ] , self . sequent . graft ( NamedOpetope . Term ( self . h ) , self . c2 , NamedOpetope . Term ( self . f ) ) ) [EOL] res = self . sequent . substitute ( self . fgh1 , NamedOpetope . Term ( self . b1 , True ) , self . f ) [EOL] self . assertTrue ( self . sequent . equal ( res [ [number] ] , self . gh ) ) [EOL] [EOL] [EOL] class Test_NamedOpetope_InferenceRules ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test_point ( self ) : [EOL] s = NamedOpetope . point ( [string] ) [EOL] self . assertEqual ( s . typing . term , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] [EOL] def test_shift ( self ) : [EOL] pass [EOL] [EOL] def test_degen ( self ) : [EOL] s = NamedOpetope . point ( [string] ) [EOL] s = NamedOpetope . degen ( s ) [EOL] self . assertEqual ( s . typing . term , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) , True ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetope . degen ( s ) [EOL] [EOL] def test_degenshift ( self ) : [EOL] pass [EOL] [EOL] def test_graft ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( verbosity = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Termopetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variableopetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 $opetopy.NamedOpetope.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Typing$ 0 0 0 0 0 $opetopy.NamedOpetope.Term$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Typingopetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variableopetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.EquationalTheory$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.NamedOpetope.EquationalTheory$ 0 $opetopy.NamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 $opetopy.NamedOpetope.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[opetopy.NamedOpetope.Term,typing.Optional[typing.Tuple[opetopy.NamedOpetope.Variable,opetopy.NamedOpetope.Variable]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , ProofTree [EOL] [EOL] p = ProofTree ( { address ( [ ] , [number] ) : { address ( [ ] , [number] ) : { address ( [string] ) : { } } , address ( [ [string] ] ) : { address ( [string] ) : { } } } , address ( [ [ [string] ] ] ) : { None : { } } } ) [EOL] [EOL] print ( p ) [EOL] print ( ) [EOL] print ( p . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.RuleInstance$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . NamedOpetope import Graft , Point , Shift [EOL] [EOL] beta = Shift ( Graft ( Shift ( Point ( [string] ) , [string] ) , Shift ( Point ( [string] ) , [string] ) , [string] ) , [string] ) [EOL] alpha = Shift ( Graft ( Shift ( Point ( [string] ) , [string] ) , Shift ( Point ( [string] ) , [string] ) , [string] ) , [string] ) [EOL] classic = Shift ( Graft ( beta , alpha , [string] ) , [string] ) [EOL] [EOL] print ( classic . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import opetopy [EOL] import unittest [EOL] [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . common import DerivationError [EOL] [EOL] from opetopy import UnnamedOpetope [EOL] [EOL] [EOL] class Test_UnnamedOpetope_Address ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a = UnnamedOpetope . Address . epsilon ( [number] ) [EOL] self . b = UnnamedOpetope . Address . epsilon ( [number] ) [EOL] self . c = UnnamedOpetope . Address . fromListOfAddresses ( [ self . a ] ) [EOL] self . d = UnnamedOpetope . Address . fromListOfAddresses ( [ self . a , self . a ] ) [EOL] self . e = UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ [string] , [string] ] , [ ] ] , [number] ) [EOL] [EOL] def test___add__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . b + self . b [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . a + self . b [EOL] self . assertEqual ( UnnamedOpetope . Address . fromListOfAddresses ( [ self . a , self . a ] ) , UnnamedOpetope . Address . fromListOfAddresses ( [ self . a ] ) + self . a ) [EOL] self . assertNotEqual ( UnnamedOpetope . Address . fromListOfAddresses ( [ self . a , self . a , self . a ] ) , UnnamedOpetope . Address . fromListOfAddresses ( [ self . a ] ) + self . a ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . a , self . a ) [EOL] self . assertEqual ( self . e , self . e ) [EOL] self . assertNotEqual ( self . a , self . b ) [EOL] self . assertNotEqual ( self . b , self . c ) [EOL] [EOL] def test___init__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address ( - [number] ) [EOL] UnnamedOpetope . Address ( [number] ) [EOL] [EOL] def test___lt__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . a < self . b [EOL] self . assertFalse ( self . c < self . c ) [EOL] self . assertLess ( self . c , self . d ) [EOL] self . assertFalse ( self . d < self . c ) [EOL] self . assertLess ( self . e , self . e + self . d ) [EOL] self . assertLess ( self . e + self . c , self . e + self . d ) [EOL] [EOL] def test___mul__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . a * self . c [EOL] self . assertEqual ( self . a * self . a , self . a ) [EOL] self . assertEqual ( self . b * self . b , self . b ) [EOL] self . assertEqual ( self . c * self . c , self . d ) [EOL] self . assertNotEqual ( self . c * self . d , self . d ) [EOL] [EOL] def test___str__ ( self ) : [EOL] self . assertEqual ( str ( self . a ) , [string] ) [EOL] self . assertEqual ( str ( self . b ) , [string] ) [EOL] self . assertEqual ( str ( self . c ) , [string] ) [EOL] self . assertEqual ( str ( self . d ) , [string] ) [EOL] self . assertEqual ( str ( self . e ) , [string] ) [EOL] [EOL] def test_epsilon ( self ) : [EOL] self . assertEqual ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address ( [number] ) ) [EOL] [EOL] def test_isEpsilon ( self ) : [EOL] self . assertTrue ( self . a . isEpsilon ( ) ) [EOL] self . assertTrue ( self . b . isEpsilon ( ) ) [EOL] self . assertFalse ( self . c . isEpsilon ( ) ) [EOL] self . assertFalse ( self . d . isEpsilon ( ) ) [EOL] self . assertFalse ( self . e . isEpsilon ( ) ) [EOL] [EOL] def test_edgeDecomposition ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . a . edgeDecomposition ( ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . b . edgeDecomposition ( ) [EOL] p , q = self . c . edgeDecomposition ( ) [EOL] self . assertEqual ( p , self . b ) [EOL] self . assertEqual ( q , self . a ) [EOL] p , q = self . d . edgeDecomposition ( ) [EOL] self . assertEqual ( p , self . c ) [EOL] self . assertEqual ( q , self . a ) [EOL] p , q = self . e . edgeDecomposition ( ) [EOL] self . assertEqual ( p , UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ [string] , [string] ] ] , [number] ) ) [EOL] self . assertEqual ( q , self . b ) [EOL] [EOL] def test_fromListOfAddresses ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address . fromListOfAddresses ( [ self . a , self . b ] ) [EOL] self . assertEqual ( self . e , UnnamedOpetope . Address . fromListOfAddresses ( [ self . c , self . d , UnnamedOpetope . Address . epsilon ( [number] ) ] ) ) [EOL] [EOL] def test_fromList ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address . fromList ( [ ] , - [number] ) [EOL] self . assertEqual ( UnnamedOpetope . Address . fromList ( [ ] , [number] ) , self . b ) [EOL] self . assertEqual ( UnnamedOpetope . Address . fromList ( [ [ ] ] , [number] ) , self . c ) [EOL] self . assertEqual ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . c ) [EOL] self . assertEqual ( UnnamedOpetope . Address . fromList ( [ [ ] , [ ] ] , [number] ) , self . d ) [EOL] [EOL] def test_shift ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . a . shift ( - [number] ) [EOL] self . assertEqual ( self . a . shift ( [number] ) , self . a ) [EOL] self . assertEqual ( self . b . shift ( [number] ) , self . b ) [EOL] self . assertEqual ( self . c . shift ( [number] ) , self . c ) [EOL] self . assertEqual ( self . d . shift ( [number] ) , self . d ) [EOL] self . assertEqual ( self . e . shift ( [number] ) , self . e ) [EOL] self . assertEqual ( self . a . shift ( ) , self . c ) [EOL] self . assertEqual ( self . a . shift ( [number] ) , self . c ) [EOL] self . assertEqual ( ( self . a . shift ( [number] ) + ( self . a . shift ( [number] ) + self . a ) ) * self . b . shift ( [number] ) , self . e ) [EOL] [EOL] def test_substitution ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address . substitution ( self . d , self . a , self . c ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address . substitution ( self . d , self . c , self . a ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Address . substitution ( self . e , self . b , self . b ) [EOL] self . assertEqual ( UnnamedOpetope . Address . substitution ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) + UnnamedOpetope . Address . epsilon ( [number] ) ) , self . e ) [EOL] self . assertEqual ( UnnamedOpetope . Address . substitution ( self . d , self . c , self . c ) , self . d ) [EOL] self . assertEqual ( UnnamedOpetope . Address . substitution ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( [number] ) , self . e ) , UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ [string] , [string] ] , [ ] , [ [string] , [string] ] , [ ] ] , [number] ) ) [EOL] [EOL] [EOL] class Test_UnnamedOpetope_Context ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a = UnnamedOpetope . Context ( [number] ) [EOL] self . b = UnnamedOpetope . Context ( [number] ) [EOL] self . c = UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . d = UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . e = UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) [EOL] self . f = UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] [EOL] def test___add__ ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . b + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . b + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e + ( UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) [EOL] self . assertEqual ( self . b + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) , self . c ) [EOL] self . assertEqual ( self . b + ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) , self . d ) [EOL] self . assertEqual ( self . e + ( UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Address . epsilon ( [number] ) ) , self . f + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) ) [EOL] [EOL] def test___call__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . f ( UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . assertEqual ( self . c ( UnnamedOpetope . Address . epsilon ( [number] ) ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . assertEqual ( self . e ( UnnamedOpetope . Address . epsilon ( [number] ) ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . a , self . a ) [EOL] self . assertEqual ( self . b , self . b ) [EOL] self . assertEqual ( self . c , self . c ) [EOL] self . assertEqual ( self . d , self . d ) [EOL] self . assertEqual ( self . e , self . e ) [EOL] self . assertEqual ( self . f , self . f ) [EOL] self . assertNotEqual ( self . a , self . b ) [EOL] self . assertNotEqual ( self . b , self . c ) [EOL] self . assertNotEqual ( self . b , self . d ) [EOL] self . assertNotEqual ( self . c , self . d ) [EOL] self . assertNotEqual ( self . e , self . f ) [EOL] [EOL] def test___init__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Context ( - [number] ) [EOL] self . assertEqual ( len ( self . b . keys ( ) ) , [number] ) [EOL] self . assertEqual ( self . b . dimension , [number] ) [EOL] [EOL] def test___sub__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . b - UnnamedOpetope . Address . epsilon ( [number] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . f - UnnamedOpetope . Address . epsilon ( [number] ) [EOL] self . assertEqual ( self . c - UnnamedOpetope . Address . epsilon ( [number] ) , self . b ) [EOL] self . assertEqual ( self . d - UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . b ) [EOL] self . assertEqual ( self . e - UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Context ( [number] ) ) [EOL] self . assertEqual ( self . f - UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Context ( [number] ) ) [EOL] [EOL] [EOL] class Test_UnnamedOpetope_Preopetope ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a = UnnamedOpetope . Preopetope ( - [number] ) [EOL] self . b = UnnamedOpetope . Preopetope ( [number] ) [EOL] self . c = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . b } ) [EOL] self . d = UnnamedOpetope . Preopetope . degenerate ( self . b ) [EOL] self . e = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . c } ) [EOL] self . f = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) : self . c } ) [EOL] [EOL] def test___add__ ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . d + ( UnnamedOpetope . Address . epsilon ( [number] ) , self . c ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e + ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . a ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e + ( UnnamedOpetope . Address . epsilon ( [number] ) , self . f ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e + ( UnnamedOpetope . Address . epsilon ( [number] ) , self . c ) [EOL] self . assertEqual ( self . e + ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . c ) , self . f ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . a , self . a ) [EOL] self . assertEqual ( self . b , self . b ) [EOL] self . assertEqual ( self . c , self . c ) [EOL] self . assertEqual ( self . b , self . b ) [EOL] self . assertEqual ( self . e , self . e ) [EOL] self . assertEqual ( self . f , self . f ) [EOL] self . assertNotEqual ( self . a , self . b ) [EOL] self . assertNotEqual ( self . b , self . c ) [EOL] self . assertNotEqual ( self . c , self . d ) [EOL] self . assertNotEqual ( self . c , self . e ) [EOL] self . assertNotEqual ( self . e , self . f ) [EOL] [EOL] def test___init__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope ( - [number] ) [EOL] UnnamedOpetope . Preopetope ( - [number] ) [EOL] x = UnnamedOpetope . Preopetope ( [number] ) [EOL] self . assertEqual ( x . dimension , [number] ) [EOL] self . assertFalse ( x . isDegenerate ) [EOL] self . assertEqual ( x . nodes , { } ) [EOL] [EOL] def test___sub__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . e - UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) [EOL] self . assertEqual ( self . f - UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . e ) [EOL] [EOL] def test_degenerate ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . degenerate ( self . a ) [EOL] self . assertEqual ( self . d . degeneracy , self . b ) [EOL] self . assertEqual ( self . d . dimension , self . b . dimension + [number] ) [EOL] self . assertTrue ( self . d . isDegenerate ) [EOL] self . assertEqual ( self . d . nodes , { } ) [EOL] [EOL] def test_empty ( self ) : [EOL] x = UnnamedOpetope . Preopetope . empty ( ) [EOL] self . assertEqual ( x . dimension , - [number] ) [EOL] [EOL] def test_fromDictOfPreopetopes ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { } ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . a } ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . a , UnnamedOpetope . Address . epsilon ( [number] ) : self . c } ) [EOL] self . assertEqual ( self . f . nodes [ UnnamedOpetope . Address . epsilon ( [number] ) ] , self . c ) [EOL] self . assertIn ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . f . nodes . keys ( ) ) [EOL] self . assertNotIn ( UnnamedOpetope . Address . epsilon ( [number] ) , self . f . nodes . keys ( ) ) [EOL] [EOL] def test_grafting ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . grafting ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) , self . b ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . grafting ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) , self . c ) [EOL] self . assertEqual ( UnnamedOpetope . Preopetope . grafting ( self . e , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . e ) , self . f ) [EOL] [EOL] def test_improperGrafting ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . improperGrafting ( self . d , UnnamedOpetope . Address . epsilon ( [number] ) , self . c ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . improperGrafting ( self . e , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . a ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . improperGrafting ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) , self . f ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . Preopetope . improperGrafting ( self . e , UnnamedOpetope . Address . epsilon ( [number] ) , self . c ) [EOL] self . assertEqual ( UnnamedOpetope . Preopetope . improperGrafting ( self . e , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) , self . c ) , self . f ) [EOL] [EOL] def test_leafAddresses ( self ) : [EOL] self . assertEqual ( self . b . leafAddresses ( ) , set ( ) ) [EOL] self . assertEqual ( self . c . leafAddresses ( ) , set ( ) ) [EOL] self . assertEqual ( self . d . leafAddresses ( ) , set ( ) ) [EOL] self . assertEqual ( self . e . leafAddresses ( ) , set ( [ UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ] ) ) [EOL] self . assertEqual ( self . f . leafAddresses ( ) , set ( [ UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) ] ) ) [EOL] [EOL] def test_nodeAddresses ( self ) : [EOL] self . assertEqual ( self . b . nodeAddresses ( ) , set ( ) ) [EOL] self . assertEqual ( self . c . nodeAddresses ( ) , set ( [ UnnamedOpetope . Address . epsilon ( [number] ) ] ) ) [EOL] self . assertEqual ( self . d . nodeAddresses ( ) , set ( ) ) [EOL] self . assertEqual ( self . e . nodeAddresses ( ) , set ( [ UnnamedOpetope . Address . epsilon ( [number] ) ] ) ) [EOL] self . assertEqual ( self . f . nodeAddresses ( ) , set ( [ UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ] ) ) [EOL] [EOL] def test_point ( self ) : [EOL] p = UnnamedOpetope . Preopetope . point ( ) [EOL] self . assertEqual ( p , self . b ) [EOL] self . assertEqual ( p . dimension , [number] ) [EOL] self . assertFalse ( p . isDegenerate ) [EOL] self . assertEqual ( p . nodes , { } ) [EOL] [EOL] def test_source ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . f . source ( UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) ) [EOL] self . assertEqual ( self . c . source ( UnnamedOpetope . Address . epsilon ( [number] ) ) , self . b ) [EOL] self . assertEqual ( self . f . source ( UnnamedOpetope . Address . epsilon ( [number] ) ) , self . c ) [EOL] self . assertEqual ( self . f . source ( UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) , self . c ) [EOL] [EOL] def test_substitution ( self ) : [EOL] i2 = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) : self . c } ) [EOL] i4 = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] , [string] , [string] ] , [number] ) : self . c } ) [EOL] i5 = UnnamedOpetope . Preopetope . fromDictOfPreopetopes ( { UnnamedOpetope . Address . epsilon ( [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] , [string] , [string] ] , [number] ) : self . c , UnnamedOpetope . Address . fromList ( [ [string] , [string] , [string] , [string] ] , [number] ) : self . c } ) [EOL] ctx = UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . assertEqual ( UnnamedOpetope . Preopetope . substitution ( i4 , UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) , ctx , i2 ) , i5 ) [EOL] [EOL] def test_toDict ( self ) : [EOL] for i in range ( [number] ) : [EOL] seq = UnnamedOpetope . OpetopicInteger ( i ) . eval ( ) [EOL] self . assertEqual ( seq , UnnamedOpetope . ProofTree ( seq . source . toDict ( ) ) . eval ( ) ) [EOL] [EOL] [EOL] class Test_UnnamedOpetope_InferenceRules ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test_point ( self ) : [EOL] s = UnnamedOpetope . point ( ) [EOL] self . assertEqual ( s . context , UnnamedOpetope . Context ( [number] ) ) [EOL] self . assertEqual ( s . source , UnnamedOpetope . Preopetope . point ( ) ) [EOL] self . assertEqual ( s . target , UnnamedOpetope . Preopetope . empty ( ) ) [EOL] [EOL] def test_degen ( self ) : [EOL] s = UnnamedOpetope . degen ( UnnamedOpetope . point ( ) ) [EOL] self . assertEqual ( s . context , UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . epsilon ( [number] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) ) [EOL] self . assertEqual ( s . source , UnnamedOpetope . Preopetope . degenerate ( UnnamedOpetope . Preopetope . point ( ) ) ) [EOL] self . assertEqual ( s . target , UnnamedOpetope . shift ( UnnamedOpetope . point ( ) ) . source ) [EOL] [EOL] def test_shift ( self ) : [EOL] s1 = UnnamedOpetope . shift ( UnnamedOpetope . point ( ) ) [EOL] s2 = UnnamedOpetope . shift ( s1 ) [EOL] self . assertEqual ( s2 . context , UnnamedOpetope . Context ( [number] ) + ( UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) , UnnamedOpetope . Address . epsilon ( [number] ) ) ) [EOL] p = UnnamedOpetope . Preopetope . point ( ) [EOL] a = UnnamedOpetope . Preopetope ( [number] ) [EOL] a . nodes [ UnnamedOpetope . Address . epsilon ( [number] ) ] = p [EOL] g = UnnamedOpetope . Preopetope ( [number] ) [EOL] g . nodes [ UnnamedOpetope . Address . epsilon ( [number] ) ] = a [EOL] self . assertEqual ( s1 . source , a ) [EOL] self . assertEqual ( s1 . target , p ) [EOL] self . assertEqual ( s2 . source , g ) [EOL] self . assertEqual ( s2 . target , a ) [EOL] [EOL] def test_graft ( self ) : [EOL] i2 = UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) [EOL] i3 = UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) [EOL] s = UnnamedOpetope . shift ( i3 ) [EOL] s = UnnamedOpetope . graft ( s , i2 , UnnamedOpetope . Address . fromList ( [ [ [string] ] ] , [number] ) ) [EOL] s = UnnamedOpetope . graft ( s , i2 , UnnamedOpetope . Address . fromList ( [ [ [string] , [string] ] ] , [number] ) ) [EOL] r = s . context [EOL] self . assertEqual ( r ( UnnamedOpetope . Address . fromList ( [ [ ] ] , [number] ) ) , UnnamedOpetope . Address . fromList ( [ ] , [number] ) ) [EOL] self . assertEqual ( r ( UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ ] ] , [number] ) ) , UnnamedOpetope . Address . fromList ( [ [string] ] , [number] ) ) [EOL] self . assertEqual ( r ( UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ [string] ] ] , [number] ) ) , UnnamedOpetope . Address . fromList ( [ [string] , [string] ] , [number] ) ) [EOL] self . assertEqual ( r ( UnnamedOpetope . Address . fromList ( [ [ [string] , [string] ] , [ ] ] , [number] ) ) , UnnamedOpetope . Address . fromList ( [ [string] , [string] , [string] ] , [number] ) ) [EOL] self . assertEqual ( r ( UnnamedOpetope . Address . fromList ( [ [ [string] , [string] ] , [ [string] ] ] , [number] ) ) , UnnamedOpetope . Address . fromList ( [ [string] , [string] , [string] , [string] ] , [number] ) ) [EOL] [EOL] [EOL] class Test_UnnamedOpetope_Utils ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test_address ( self ) : [EOL] self . assertEqual ( UnnamedOpetope . address ( [string] ) , UnnamedOpetope . Address . epsilon ( [number] ) ) [EOL] self . assertEqual ( UnnamedOpetope . address ( [ [ [string] ] , [ ] , [ [string] , [string] ] ] ) , UnnamedOpetope . Address . fromList ( [ [ [string] ] , [ ] , [ [string] , [string] ] ] , [number] ) ) [EOL] self . assertEqual ( UnnamedOpetope . address ( [ [ ] , [ ] , [ [string] , [string] ] ] ) , UnnamedOpetope . Address . fromList ( [ [ ] , [ ] , [ [string] , [string] ] ] , [number] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . address ( [ [ [ ] ] ] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . address ( [ [ [ ] ] ] , [number] ) [EOL] UnnamedOpetope . address ( [ [ [ ] ] ] , [number] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . address ( [ [ [ [string] ] , [ [ [string] ] ] ] ] ) [EOL] [EOL] def test_OpetopicTree ( self ) : [EOL] self . assertEqual ( UnnamedOpetope . OpetopicTree ( None ) . eval ( ) , UnnamedOpetope . Degen ( UnnamedOpetope . Arrow ( ) ) . eval ( ) ) [EOL] for i in range ( [number] ) : [EOL] self . assertEqual ( UnnamedOpetope . OpetopicTree ( [ None ] * i ) . eval ( ) , UnnamedOpetope . Shift ( UnnamedOpetope . OpetopicInteger ( i ) ) . eval ( ) ) [EOL] for i in range ( [number] ) : [EOL] tree = [ None ] * i + [ [ None ] ] + [ None ] * ( [number] - i ) [EOL] self . assertEqual ( UnnamedOpetope . OpetopicTree ( tree ) . eval ( ) , UnnamedOpetope . Graft ( UnnamedOpetope . Shift ( UnnamedOpetope . OpetopicInteger ( [number] ) ) , UnnamedOpetope . OpetopicInteger ( [number] ) , UnnamedOpetope . address ( [ [ [string] ] * i ] , [number] ) ) . eval ( ) ) [EOL] [EOL] def test_ProofTree ( self ) : [EOL] self . assertEqual ( UnnamedOpetope . ProofTree ( { } ) . eval ( ) , UnnamedOpetope . Point ( ) . eval ( ) ) [EOL] self . assertEqual ( UnnamedOpetope . ProofTree ( { UnnamedOpetope . address ( [string] ) : { } } ) . eval ( ) , UnnamedOpetope . Arrow ( ) . eval ( ) ) [EOL] self . assertEqual ( UnnamedOpetope . ProofTree ( { None : { } } ) . eval ( ) , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) ) [EOL] self . assertEqual ( UnnamedOpetope . ProofTree ( { UnnamedOpetope . address ( [ ] , [number] ) : { UnnamedOpetope . address ( [string] ) : { } } , UnnamedOpetope . address ( [ [string] ] ) : { UnnamedOpetope . address ( [string] ) : { } } } ) . eval ( ) , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . ProofTree ( { UnnamedOpetope . address ( [ [string] ] ) : { UnnamedOpetope . address ( [string] ) : { } } } ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetope . ProofTree ( { UnnamedOpetope . address ( [ ] , [number] ) : { UnnamedOpetope . address ( [string] ) : { } } , UnnamedOpetope . address ( [ [string] , [string] ] ) : { UnnamedOpetope . address ( [string] ) : { } } } ) . eval ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( verbosity = [number] ) [EOL]	opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Contextopetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetopeopetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 $opetopy.UnnamedOpetope.Preopetope$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetope.Sequent$ 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 $opetopy.UnnamedOpetope.Sequent$ 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . NamedOpetope import Point [EOL] [EOL] pt = Point ( [string] ) [EOL] print ( pt . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Point$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Point$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , Arrow , OpetopicInteger [EOL] from opetopy . UnnamedOpetopicSet import Graft , pastingDiagram , Point , RuleInstance , Shift [EOL] from opetopy . UnnamedOpetopicCategory import TUniv , SUniv , TFill [EOL] [EOL] [comment] [EOL] proof = Point ( None , [ [string] , [string] , [string] ] ) [comment] [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] } ) ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = TUniv ( proof , [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = TUniv ( proof , [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = SUniv ( proof , [string] , [string] , address ( [ ] , [number] ) , [string] , [string] ) [EOL] [EOL] print ( proof . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import OpetopicInteger [EOL] [EOL] oi5 = OpetopicInteger ( [number] ) [EOL] [EOL] print ( oi5 . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetopicSet import Graft , pastingDiagram , Point , RuleInstance , Shift [EOL] from opetopy . UnnamedOpetope import address , Arrow [EOL] [EOL] ar = Point ( None , [string] ) [comment] [EOL] ar = Point ( ar , [string] ) [EOL] ar = Graft ( ar , pastingDiagram ( Arrow ( ) , { address ( [ ] , [number] ) : [string] } ) ) [EOL] ar = Shift ( ar , [string] , [string] ) [EOL] [EOL] print ( ar . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , Arrow , OpetopicInteger [EOL] from opetopy . UnnamedOpetopicSet import Graft , pastingDiagram , Point , RuleInstance , Shift [EOL] from opetopy . UnnamedOpetopicCategory import TFill [EOL] [EOL] [comment] [EOL] proof = Point ( None , [ [string] , [string] , [string] ] ) [comment] [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] } ) ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] print ( proof . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . NamedOpetopicSetM import Glue , Pd , Point , RuleInstance , Shift , Sum [EOL] [EOL] p1 = Shift ( Pd ( Point ( [string] ) , [string] ) , [string] ) [EOL] p1 = Shift ( Pd ( p1 , [string] ) , [string] ) [EOL] [EOL] p2 = Shift ( Pd ( Point ( [string] ) , [string] ) , [string] ) [EOL] [EOL] example = Sum ( p1 , p2 ) [comment] [EOL] example = Glue ( example , [string] , [string] ) [EOL] example = Glue ( example , [string] , [string] ) [EOL] example = Shift ( Pd ( example , [string] ) , [string] ) [EOL] example = Glue ( example , [string] , [string] ) [EOL] example = Glue ( example , [string] , [string] ) [EOL] example = Glue ( example , [string] , [string] ) [EOL] [EOL] print ( example . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.Shift$ 0 0 0 0 0 $opetopy.NamedOpetopicSetM.Shift$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.Shift$ 0 $opetopy.NamedOpetopicSetM.Shift$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSetM.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , Graft , OpetopicInteger , OpetopicTree , Shift [EOL] [EOL] classic = Graft ( Shift ( OpetopicInteger ( [number] ) ) , OpetopicInteger ( [number] ) , address ( [ [ [string] ] ] ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( classic . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Graft$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Graft$ 0 0 0 0 0 0
import opetopy [EOL] import unittest [EOL] [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . common import DerivationError [EOL] [EOL] from opetopy import NamedOpetope [EOL] from opetopy import NamedOpetopicSetM [EOL] [EOL] [EOL] class Test_NamedOpetopicSetM_InferenceRules ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test_point ( self ) : [EOL] s = NamedOpetopicSetM . point ( [string] ) [EOL] self . assertTrue ( isinstance ( s , NamedOpetope . OCMT ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] self . assertEqual ( len ( s . theory . classes ) , [number] ) [EOL] [EOL] def test_degen ( self ) : [EOL] s = NamedOpetopicSetM . point ( [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSetM . degen ( s , [string] ) [EOL] s = NamedOpetopicSetM . degen ( s , [string] ) [EOL] self . assertTrue ( isinstance ( s , NamedOpetope . Sequent ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] self . assertEqual ( len ( s . theory . classes ) , [number] ) [EOL] self . assertEqual ( s . typing . term , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) , True ) ) [EOL] [EOL] def test_pd ( self ) : [EOL] s = NamedOpetopicSetM . point ( [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSetM . pd ( s , [string] ) [EOL] s = NamedOpetopicSetM . pd ( s , [string] ) [EOL] self . assertTrue ( isinstance ( s , NamedOpetope . Sequent ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] self . assertEqual ( len ( s . theory . classes ) , [number] ) [EOL] self . assertEqual ( s . typing . term , NamedOpetope . Term ( NamedOpetope . Variable ( [string] , [number] ) , False ) ) [EOL] [EOL] def test_graft ( self ) : [EOL] pass [EOL] [EOL] def test_shift ( self ) : [EOL] s = NamedOpetopicSetM . Shift ( NamedOpetopicSetM . Pd ( NamedOpetopicSetM . Point ( [string] ) , [string] ) , [string] ) . eval ( ) [EOL] self . assertTrue ( isinstance ( s , NamedOpetope . OCMT ) ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] self . assertEqual ( len ( s . theory . classes ) , [number] ) [EOL] [EOL] def test_zero ( self ) : [EOL] pass [EOL] [EOL] def test_sum ( self ) : [EOL] pass [EOL] [EOL] def test_glue ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( verbosity = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import opetopy [EOL] import unittest [EOL] [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . common import DerivationError [EOL] [EOL] from opetopy import NamedOpetope [EOL] from opetopy import NamedOpetopicSet [EOL] [EOL] [EOL] class Test_NamedOpetopicSet_InferenceRules ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test_repres ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSet . repres ( NamedOpetope . Degen ( NamedOpetope . Point ( [string] ) ) . eval ( ) ) [EOL] aseq = NamedOpetopicSet . repres ( NamedOpetope . Arrow ( ) . eval ( ) ) [EOL] self . assertEqual ( len ( aseq . context ) , [number] ) [EOL] self . assertEqual ( len ( aseq . theory . classes ) , [number] ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , aseq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , aseq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , aseq . context ) [EOL] i3seq = NamedOpetopicSet . repres ( NamedOpetope . OpetopicInteger ( [number] ) . eval ( ) ) [EOL] self . assertEqual ( len ( i3seq . context ) , [number] ) [EOL] self . assertEqual ( len ( i3seq . theory . classes ) , [number] ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertIn ( NamedOpetope . Variable ( [string] , [number] ) , i3seq . context ) [EOL] self . assertTrue ( i3seq . theory . equal ( NamedOpetope . Variable ( [string] , [number] ) , NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertTrue ( i3seq . theory . equal ( NamedOpetope . Variable ( [string] , [number] ) , NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] self . assertTrue ( i3seq . theory . equal ( NamedOpetope . Variable ( [string] , [number] ) , NamedOpetope . Variable ( [string] , [number] ) ) ) [EOL] [EOL] def test_sum ( self ) : [EOL] a = NamedOpetopicSet . Repr ( NamedOpetope . OpetopicInteger ( [number] , [string] , [string] , [string] ) ) . eval ( ) [EOL] b = NamedOpetopicSet . Repr ( NamedOpetope . OpetopicInteger ( [number] , [string] , [string] , [string] ) ) . eval ( ) [EOL] c = NamedOpetopicSet . Repr ( NamedOpetope . OpetopicInteger ( [number] , [string] , [string] , [string] ) ) . eval ( ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSet . sum ( a , b ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSet . sum ( b , c ) [EOL] d = NamedOpetopicSet . sum ( a , c ) [EOL] self . assertEqual ( len ( d . context ) , len ( a . context ) + len ( c . context ) ) [EOL] self . assertEqual ( len ( d . theory . classes ) , len ( a . theory . classes ) + len ( c . theory . classes ) ) [EOL] [EOL] def test_glue ( self ) : [EOL] a = NamedOpetopicSet . Repr ( NamedOpetope . OpetopicInteger ( [number] ) ) . eval ( ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] a = NamedOpetopicSet . glue ( a , [string] , [string] ) [EOL] self . assertEqual ( len ( a . theory . classes ) , [number] ) [EOL] [EOL] def test_zero ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( verbosity = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 $opetopy.NamedOpetope.OCMT$ 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.OCMT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import Arrow , Point , Shift [EOL] [EOL] ar = Shift ( Point ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( ar . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetope.Shift$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , Arrow [EOL] from opetopy . UnnamedOpetopicSet import Degen , Graft , pastingDiagram , Point , RuleInstance , Shift [EOL] from opetopy . UnnamedOpetopicCategory import TUniv , TFill [EOL] [EOL] [comment] [EOL] proof = Point ( None , [string] ) [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] proof = Degen ( proof , [string] ) [EOL] proof = Shift ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Degen ( proof , [string] ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = TUniv ( proof , [string] , [string] , [string] , [string] ) [EOL] [EOL] print ( proof . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . UnnamedOpetope import address , Arrow , OpetopicInteger [EOL] from opetopy . UnnamedOpetopicSet import Graft , pastingDiagram , Point , RuleInstance [EOL] from opetopy . UnnamedOpetopicCategory import TClose , TFill [EOL] [EOL] proof = Point ( None , [string] ) [comment] [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( Arrow ( ) , { address ( [string] ) : [string] } ) ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = Graft ( proof , pastingDiagram ( OpetopicInteger ( [number] ) , { address ( [ ] , [number] ) : [string] , address ( [ [string] ] ) : [string] } ) ) [EOL] proof = TFill ( proof , [string] , [string] ) [EOL] [EOL] [comment] [EOL] proof = TClose ( proof , [string] ) [EOL] [EOL] print ( proof . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.RuleInstance$ 0 0 0 0 0 0
import opetopy [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . NamedOpetope import Point , Shift [EOL] from opetopy . NamedOpetopicSet import Glue , Repr , Sum [EOL] [EOL] alpha = Shift ( Shift ( Point ( [string] ) , [string] ) , [string] ) [EOL] g = Shift ( Point ( [string] ) , [string] ) [EOL] h = Shift ( Point ( [string] ) , [string] ) [EOL] unglued = Sum ( Sum ( Repr ( alpha ) , Repr ( g ) ) , Repr ( h ) ) [EOL] example = Glue ( Glue ( Glue ( Glue ( Glue ( unglued , [string] , [string] ) , [string] , [string] ) , [string] , [string] ) , [string] , [string] ) , [string] , [string] ) [EOL] [EOL] print ( example . eval ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSet.Sum$ 0 0 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 0 0 $opetopy.NamedOpetope.Shift$ 0 0 0 $opetopy.NamedOpetopicSet.Glue$ 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSet.Sum$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.NamedOpetopicSet.Glue$ 0 0 0 0 0 0
from typing import Type , Optional [EOL] import typing [EOL] import opetopy [EOL] import builtins [EOL] import unittest [EOL] [EOL] import sys [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] from opetopy . common import DerivationError [EOL] [EOL] from opetopy import UnnamedOpetope [EOL] from opetopy import UnnamedOpetopicSet [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_Variable ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . a = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . b = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . i1 = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) [EOL] self . i2 = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) [EOL] self . i3 = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) [EOL] self . c = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Graft ( UnnamedOpetope . Shift ( UnnamedOpetope . OpetopicInteger ( [number] ) ) , UnnamedOpetope . OpetopicInteger ( [number] ) , UnnamedOpetope . Address . fromList ( [ [ [string] ] ] , [number] ) ) ) [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( self . a , self . a ) [EOL] self . assertEqual ( self . b , self . b ) [EOL] self . assertEqual ( self . i1 , self . i1 ) [EOL] self . assertEqual ( self . i2 , self . i2 ) [EOL] self . assertNotEqual ( self . a , self . b ) [EOL] self . assertNotEqual ( self . a , self . i1 ) [EOL] self . assertNotEqual ( self . i1 , self . i2 ) [EOL] self . assertNotEqual ( self . i2 , self . i3 ) [EOL] self . assertNotEqual ( self . i3 , self . c ) [EOL] [EOL] def test_shape ( self ) : [EOL] self . assertEqual ( self . a . shape , UnnamedOpetope . Arrow ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . b . shape , UnnamedOpetope . Arrow ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i1 . shape , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i2 . shape , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i3 . shape , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) . source ) [EOL] [EOL] def test_shapeTarget ( self ) : [EOL] self . assertEqual ( self . a . shapeTarget ( ) , UnnamedOpetope . Point ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . b . shapeTarget ( ) , UnnamedOpetope . Point ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i1 . shapeTarget ( ) , UnnamedOpetope . Arrow ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i2 . shapeTarget ( ) , UnnamedOpetope . Arrow ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . i3 . shapeTarget ( ) , UnnamedOpetope . Arrow ( ) . eval ( ) . source ) [EOL] self . assertEqual ( self . c . shapeTarget ( ) , UnnamedOpetope . OpetopicInteger ( [number] ) . eval ( ) . source ) [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_PastingDiagram ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def test___eq__ ( self ) : [EOL] self . assertEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) ) [EOL] self . assertNotEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) ) [EOL] self . assertNotEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . Degen ( UnnamedOpetope . Arrow ( ) ) , [string] ) ) [EOL] self . assertNotEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ ] , [number] ) : [string] } ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ ] , [number] ) : [string] } ) ) [EOL] self . assertNotEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ ] , [number] ) : [string] } ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ ] , [number] ) : [string] , UnnamedOpetope . address ( [ [string] ] ) : [string] } ) ) [EOL] self . assertEqual ( UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ ] , [number] ) : [string] , UnnamedOpetope . address ( [ [string] ] ) : [string] } ) , UnnamedOpetopicSet . pastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . address ( [ [string] ] ) : [string] , UnnamedOpetope . address ( [ ] , [number] ) : [string] } ) ) [EOL] [EOL] def test___getitem__ ( self ) : [EOL] d = UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) [EOL] p = UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] d [ UnnamedOpetope . Address . epsilon ( [number] ) ] [EOL] self . assertEqual ( p [ UnnamedOpetope . Address . epsilon ( [number] ) ] , [string] ) [EOL] self . assertEqual ( p [ UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) ] , [string] ) [EOL] [EOL] def test_degeneratePastingDiagram ( self ) : [EOL] UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) [EOL] [EOL] def test_point ( self ) : [EOL] UnnamedOpetopicSet . PastingDiagram . point ( ) [EOL] [EOL] def test_nonDegeneratePastingDiagram ( self ) : [EOL] UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { } ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] } ) [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_Type ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . s = UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) [EOL] [EOL] def test___init__ ( self ) : [EOL] UnnamedOpetopicSet . Type ( self . s , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . Type ( self . s , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) ) [EOL] UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . point ( ) , None ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . Type ( self . s , None ) [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_Typing ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . t = UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) ) [EOL] [EOL] def test___init__ ( self ) : [EOL] UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) , self . t ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) , self . t ) [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_Context ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . p = UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) , UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . point ( ) , None ) ) [EOL] self . a = UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) , UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) ) ) [EOL] self . b = UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) , UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) ) ) [EOL] self . c = UnnamedOpetopicSet . Typing ( UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . OpetopicInteger ( [number] ) ) , UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) , UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) ) ) [EOL] self . ctx = UnnamedOpetopicSet . Context ( ) + self . p + self . a + self . c [EOL] [EOL] def test___add__ ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx + self . a [EOL] self . ctx + self . b [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx + self . c [EOL] [EOL] def test___contains__ ( self ) : [EOL] self . assertIn ( self . a . variable , self . ctx ) [EOL] self . assertNotIn ( self . b . variable , self . ctx ) [EOL] self . assertIn ( self . c . variable , self . ctx ) [EOL] [EOL] def test___getitem__ ( self ) : [EOL] self . assertEqual ( self . ctx [ [string] ] . variable , self . a . variable ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx [ [string] ] [EOL] self . assertEqual ( self . ctx [ [string] ] . variable , self . c . variable ) [EOL] [EOL] def test_source ( self ) : [EOL] self . assertEqual ( self . ctx . source ( [string] , UnnamedOpetope . Address . epsilon ( [number] ) ) , [string] ) [EOL] self . assertEqual ( self . ctx . source ( [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) ) , [string] ) [EOL] [EOL] def test_target ( self ) : [EOL] self . assertEqual ( self . ctx . target ( [string] ) , [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] self . ctx . target ( [string] ) [EOL] [EOL] [EOL] class Test_UnnamedOpetopicSet_InferenceRules ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . type_point = UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . point ( ) , None ) [EOL] self . a = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) [EOL] self . b = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) [EOL] self . c = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) [EOL] self . d = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Point ( ) ) [EOL] self . ab = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . ac = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . bc = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . cd = UnnamedOpetopicSet . Variable ( [string] , UnnamedOpetope . Arrow ( ) ) [EOL] self . seq = UnnamedOpetopicSet . Sequent ( ) [EOL] self . seq . context = UnnamedOpetopicSet . Context ( ) + UnnamedOpetopicSet . Typing ( self . a , self . type_point ) + UnnamedOpetopicSet . Typing ( self . b , self . type_point ) + UnnamedOpetopicSet . Typing ( self . c , self . type_point ) + UnnamedOpetopicSet . Typing ( self . d , self . type_point ) + UnnamedOpetopicSet . Typing ( self . ab , self . type_arrow ( [string] , self . b ) ) + UnnamedOpetopicSet . Typing ( self . ac , self . type_arrow ( [string] , self . c ) ) + UnnamedOpetopicSet . Typing ( self . bc , self . type_arrow ( [string] , self . c ) ) + UnnamedOpetopicSet . Typing ( self . cd , self . type_arrow ( [string] , self . d ) ) [EOL] [EOL] def type_arrow ( self , src , tgt ) : [EOL] [docstring] [EOL] return UnnamedOpetopicSet . Type ( UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . Arrow ( ) , { UnnamedOpetope . Address . epsilon ( [number] ) : src } ) , tgt ) [EOL] [EOL] def test_degen ( self ) : [EOL] s = UnnamedOpetopicSet . point ( UnnamedOpetopicSet . Sequent ( ) , [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . degen ( s , [string] ) [EOL] s = UnnamedOpetopicSet . degen ( s , [string] ) [EOL] self . assertIsNotNone ( s . pastingDiagram . degeneracy ) [EOL] self . assertEqual ( s . pastingDiagram . degeneracy , [string] ) [EOL] self . assertIsNone ( s . pastingDiagram . nodes ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . degen ( s , [string] ) [EOL] [EOL] def test_shift ( self ) : [EOL] s = UnnamedOpetopicSet . graft ( self . seq , UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] } ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . shift ( s , [string] , [string] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . shift ( s , [string] , [string] ) [EOL] UnnamedOpetopicSet . shift ( s , [string] , [string] ) [EOL] [EOL] def test_graft ( self ) : [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . graft ( UnnamedOpetopicSet . Sequent ( ) , UnnamedOpetopicSet . PastingDiagram . degeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , [string] ) ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . graft ( UnnamedOpetopicSet . Sequent ( ) , UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . Arrow ( ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] } ) ) [EOL] [comment] [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . graft ( self . seq , UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) ) [EOL] [comment] [EOL] UnnamedOpetopicSet . graft ( self . seq , UnnamedOpetopicSet . PastingDiagram . nonDegeneratePastingDiagram ( UnnamedOpetope . OpetopicInteger ( [number] ) , { UnnamedOpetope . Address . epsilon ( [number] ) : [string] , UnnamedOpetope . Address . epsilon ( [number] ) . shift ( ) : [string] } ) ) [EOL] [EOL] def test_point ( self ) : [EOL] s = UnnamedOpetopicSet . point ( UnnamedOpetopicSet . Sequent ( ) , [string] ) [EOL] s = UnnamedOpetopicSet . point ( s , [string] ) [EOL] self . assertEqual ( len ( s . context ) , [number] ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . point ( s , [string] ) [EOL] s . pastingDiagram = UnnamedOpetopicSet . PastingDiagram . point ( ) [EOL] with self . assertRaises ( DerivationError ) : [EOL] UnnamedOpetopicSet . point ( s , [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( verbosity = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.PastingDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.PastingDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.PastingDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.PastingDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.PastingDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 $opetopy.UnnamedOpetopicSet.Typing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Type$ 0 0 0 $builtins.str$ 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $opetopy.UnnamedOpetopicSet.Variable$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 $typing.Optional[opetopy.UnnamedOpetopicSet.PastingDiagram]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $opetopy.UnnamedOpetopicSet.Sequent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0