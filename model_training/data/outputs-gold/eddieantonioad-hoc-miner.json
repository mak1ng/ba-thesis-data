[comment] [EOL] [EOL] from distutils . core import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , author_email = [string] , packages = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] ENTRIES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List , Tuple , Iterator [EOL] import sensibility [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Iterator [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class Lexeme : [EOL] [docstring] [EOL] __slots__ = [string] , [string] [EOL] [EOL] def __init__ ( self , * , name , value ) : [EOL] self . name = name [EOL] self . value = value [EOL] [comment] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . value [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . name !r} [string] { self . value !r} [string] " [EOL] [EOL] [EOL] class Position : [EOL] [docstring] [EOL] __slots__ = [string] , [string] [EOL] [EOL] def __init__ ( self , * , line , column ) : [EOL] self . line = line [EOL] self . column = column [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return ( isinstance ( other , Position ) [EOL] and self . line == other . line [EOL] and self . column == other . column ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . line !r} [string] { self . column !r} [string] " [EOL] [EOL] [EOL] class Location : [EOL] [docstring] [EOL] __slots__ = [string] , [string] [EOL] def __init__ ( self , * , start , end ) : [EOL] self . start = start [EOL] self . end = end [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return ( isinstance ( other , Location ) [EOL] and self . start == other . start [EOL] and self . end == other . end ) [EOL] [EOL] @ property def spans_single_line ( self ) : [EOL] [docstring] [EOL] return self . start . line == self . end . line [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . start !r} [string] { self . end !r} [string] " [EOL] [EOL] [EOL] class Token ( Lexeme ) : [EOL] [docstring] [EOL] __slots__ = [string] , [string] [EOL] [EOL] def __init__ ( self , * , name , value , start , end ) : [EOL] super ( ) . __init__ ( name = name , value = value ) [EOL] self . start = start [EOL] self . end = end [EOL] [EOL] @ property def column ( self ) : [EOL] [docstring] [EOL] return self . start . column [EOL] [EOL] @ property def line ( self ) : [EOL] [docstring] [EOL] return self . start . line [EOL] [EOL] @ property def lines ( self ) : [EOL] [docstring] [EOL] yield from range ( self . start . line , self . end . line + [number] ) [EOL] [EOL] @ property def location ( self ) : [EOL] [docstring] [EOL] return Location ( start = self . start , end = self . end ) [EOL] [EOL] @ property def loc ( self ) : [EOL] [docstring] [EOL] return self . location [EOL] [EOL] @ property def spans_single_line ( self ) : [EOL] [docstring] [EOL] return self . location . spans_single_line [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( f" [string] " f" [string] { self . name !r} [string] { self . value !r} [string] " f" [string] { self . start !r} [string] { self . end !r} [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Location$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Location$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import datetime [EOL] import logging [EOL] import time [EOL] [EOL] from . connection import github [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def wait_for_rate_limit ( resource = [string] ) : [EOL] [docstring] [EOL] assert resource in ( [string] , [string] ) [EOL] response = github . rate_limit ( ) [EOL] limit_info = response [ [string] ] [ resource ] [EOL] [EOL] remaining = limit_info [ [string] ] [EOL] logger . debug ( [string] , remaining ) [EOL] [EOL] if remaining <= [number] : [EOL] [comment] [EOL] reset = limit_info [ [string] ] [EOL] logger . info ( [string] , reset ) [EOL] [comment] [EOL] time . sleep ( seconds_until ( reset ) + [number] ) [EOL] wait_for_rate_limit ( resource ) [EOL] [EOL] [EOL] def seconds_until ( timestamp ) : [EOL] now = datetime . datetime . now ( ) [EOL] future = datetime . datetime . fromtimestamp ( timestamp ) [EOL] difference = future - now [EOL] return difference . seconds [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import sqlite3 [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import sqlite3 [EOL] import sys [EOL] from types import ModuleType [EOL] [EOL] import redis [EOL] import github3 [EOL] from lazy_object_proxy import Proxy [EOL] [EOL] from . . language import language [EOL] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] redis_client = Proxy ( lambda : redis . StrictRedis ( db = [number] ) ) [EOL] [docstring] [EOL] [EOL] [EOL] def get_sqlite3_path ( ) : [EOL] [docstring] [EOL] return f'{ language !s} [string] ' [EOL] [EOL] [EOL] def get_sqlite3_connection ( ) : [EOL] [docstring] [EOL] return sqlite3 . connect ( get_sqlite3_path ( ) ) [EOL] [EOL] [EOL] github = Proxy ( lambda : github3 . login ( token = str ( github_token ) ) ) [EOL] [docstring] [EOL] [EOL] @ Proxy def github_token ( ) : [EOL] [docstring] [EOL] [comment] [EOL] with open ( [string] , [string] , encoding = [string] ) as token_file : [EOL] return token_file . read ( ) . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import uuid [EOL] import sensibility [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from uuid import UUID [EOL] [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class WithErrors ( str ) : [EOL] [docstring] [EOL] @ property def errors ( self ) : [EOL] return f"{ self } [string] " [EOL] [EOL] [EOL] class WorkQueueName : [EOL] [docstring] [EOL] def __init__ ( self , prefix ) : [EOL] self . prefix = prefix [EOL] [EOL] def __getitem__ ( self , queue_id ) : [EOL] return f"{ self . prefix } [string] { queue_id !s}" [EOL] [EOL] [EOL] DOWNLOAD_QUEUE = WithErrors ( [string] ) [EOL] PARSE_QUEUE = WithErrors ( [string] ) [EOL] WORK_QUEUE = WorkQueueName ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 $sensibility.miner.names.WithErrors$ 0 0 0 0 0 0 $sensibility.miner.names.WithErrors$ 0 0 0 0 0 0 $sensibility.miner.names.WorkQueueName$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import AnyStr [EOL] import redis [EOL] import sensibility [EOL] import typing [EOL] import builtins [EOL] import uuid [EOL] from typing import AnyStr , Iterable [EOL] [EOL] import redis [EOL] [EOL] from . names import WORK_QUEUE [EOL] [EOL] [EOL] class Queue ( Iterable [ bytes ] ) : [EOL] def __init__ ( self , name , client = None ) : [EOL] self . name = name [EOL] if client is None : [EOL] self . client = redis . StrictRedis ( ) [EOL] else : [EOL] self . client = client [EOL] [EOL] def enqueue ( self , thing ) : [EOL] self . client . lpush ( self . name , thing ) [EOL] [EOL] def pop ( self ) : [EOL] return self . client . rpop ( self . name ) [EOL] [EOL] def __lshift__ ( self , other ) : [EOL] [docstring] [EOL] self . enqueue ( other ) [EOL] [EOL] def __rshift__ ( self , other ) : [EOL] [docstring] [EOL] self . transfer ( other ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . client . lrange ( self . name , [number] , - [number] ) ) [EOL] [EOL] def clear ( self ) : [EOL] self . client . delete ( self . name ) [EOL] [EOL] def remove ( self , value , count = [number] ) : [EOL] self . client . lrem ( self . name , count , value ) [EOL] [EOL] def transfer ( self , other , timeout = [number] ) : [EOL] [docstring] [EOL] return self . client . brpoplpush ( self . name , other . name , timeout ) [EOL] [EOL] [EOL] class WorkQueue : [EOL] def __init__ ( self , queue ) : [EOL] self . origin = queue [EOL] self . _id = uuid . uuid4 ( ) [EOL] self . _processing = Queue ( self . name , client = queue . client ) [EOL] [EOL] @ property def name ( self ) : [EOL] return WORK_QUEUE [ self . _id ] [EOL] [EOL] def get ( self , timeout = [number] ) : [EOL] return self . origin . transfer ( self . _processing , timeout ) [EOL] [EOL] def acknowledge ( self , value ) : [EOL] self . _processing . remove ( value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.AnyStr$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AnyStr$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.AnyStr$ 0 0 0 0 0 0 0 0 0 $typing.AnyStr$ 0 0 0 0 $None$ 0 0 0 $'Queue'$ 0 0 0 0 0 0 0 0 0 $'Queue'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.AnyStr$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.AnyStr$ 0 0 0 0 $builtins.bytes$ 0 0 0 $'Queue'$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Queue'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Queue$ 0 0 0 0 0 $sensibility.miner.rqueue.Queue$ 0 $Queue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $sensibility.miner.rqueue.Queue$ 0 0 0 0 0 0 0 0 0 $Queue$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 $typing.AnyStr$ 0 0 0 0 0 0 0 0 0 $typing.AnyStr$ 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Literal , Any [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] [EOL] from sqlalchemy import ( Table , Column , Integer , String , DateTime , LargeBinary , MetaData , ForeignKeyConstraint ) [EOL] [EOL] from typing import Iterable , Any , Tuple [EOL] [EOL] [EOL] def _to ( table_name , * columns ) : [EOL] [docstring] [EOL] yield columns [EOL] yield tuple ( f"{ table_name } [string] { col }" for col in columns ) [EOL] [EOL] [EOL] metadata = MetaData ( ) [EOL] cascade_all = dict ( onupdate = [string] , ondelete = [string] ) [EOL] [EOL] [comment] [EOL] meta = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , Column ( [string] , String ) ) [EOL] [EOL] repository = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , Column ( [string] , String , primary_key = True ) , Column ( [string] , String , nullable = False ) , Column ( [string] , DateTime , nullable = False ) , Column ( [string] , String ) , ) [EOL] [EOL] source_file = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , Column ( [string] , LargeBinary , nullable = False ) , ) [EOL] [EOL] repository_source = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , Column ( [string] , String , primary_key = True ) , Column ( [string] , String , primary_key = True ) , Column ( [string] , String , primary_key = True ) , ForeignKeyConstraint ( * _to ( [string] , [string] , [string] ) , ** cascade_all ) , ForeignKeyConstraint ( * _to ( [string] , [string] ) , ** cascade_all ) , ) [EOL] [EOL] source_summary = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , Column ( [string] , Integer , nullable = False ) , Column ( [string] , Integer , nullable = False ) , ForeignKeyConstraint ( * _to ( [string] , [string] ) , ** cascade_all ) , ) [EOL] [EOL] failure = Table ( [string] , metadata , Column ( [string] , String , primary_key = True ) , ForeignKeyConstraint ( * _to ( [string] , [string] ) , ** cascade_all ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Iterator , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import sys [EOL] from typing import Iterator [EOL] [EOL] [EOL] def filehashes ( file = sys . stdin ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] for line in file : [EOL] filehash = line . strip ( ) [EOL] if filehash : [EOL] yield filehash [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Tuple , Sequence , Any [EOL] import sensibility [EOL] import typing [EOL] import pytest [comment] [EOL] [EOL] from sensibility . language import Language [EOL] from sensibility . language . javascript import javascript [EOL] from sensibility . lexical_analysis import Position [EOL] [EOL] from location_factory import LocationFactory [EOL] [EOL] test_file = [string] [EOL] [EOL] def test_sanity_check ( ) : [EOL] assert isinstance ( javascript , Language ) [EOL] [EOL] [EOL] def test_tokenize ( ) : [EOL] tokens = javascript . tokenize ( test_file ) [EOL] [comment] [EOL] assert len ( tokens ) == [number] [EOL] assert tokens [ [number] ] . value == [string] [EOL] [EOL] [EOL] def test_check_syntax ( ) : [EOL] assert not javascript . check_syntax ( [string] ) [EOL] assert javascript . check_syntax ( test_file ) [EOL] [EOL] [EOL] def test_summarize ( ) : [EOL] summary = javascript . summarize ( test_file ) [EOL] assert summary . sloc == [number] [EOL] assert summary . n_tokens == [number] [EOL] [EOL] [EOL] def test_vocabularize ( ) : [EOL] loc = LocationFactory ( Position ( line = [number] , column = [number] ) ) [EOL] result = list ( javascript . vocabularize_with_locations ( test_file ) ) [EOL] expected = [ ( loc . across ( len ( [string] ) ) , [string] ) , ( loc . space ( ) . across ( [number] ) , [string] ) , ( loc . across ( len ( [string] ) ) , [string] ) , ( loc . across ( [number] ) , [string] ) , ( loc . space ( ) . across ( len ( [string] ) ) , [string] ) , ( loc . space ( ) . across ( len ( [string] ) ) , [string] ) , ( loc . across ( [number] ) , [string] ) , ] [EOL] assert result [ : len ( expected ) ] == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sensibility [EOL] import builtins [EOL] from sensibility . lexical_analysis import Position , Location [EOL] [EOL] [EOL] class LocationFactory : [EOL] [docstring] [EOL] def __init__ ( self , start ) : [EOL] self . current = start [EOL] [EOL] def across ( self , width ) : [EOL] start = self . current [EOL] self . current = Position ( line = start . line , column = start . column + width ) [EOL] return Location ( start = start , end = self . current ) [EOL] [EOL] def until ( self , end ) : [EOL] start = self . current [EOL] self . current = end [EOL] return Location ( start = start , end = end ) [EOL] [EOL] def single ( self ) : [EOL] return self . across ( [number] ) [EOL] [EOL] def newline ( self ) : [EOL] result = self . single ( ) [EOL] self . next_line ( ) [EOL] return result [EOL] [EOL] def next_line ( self , n = [number] ) : [EOL] self . current = Position ( line = self . current . line + n , column = [number] ) [EOL] return self [EOL] [EOL] def space ( self , n = [number] ) : [EOL] self . current = Position ( line = self . current . line , column = self . current . column + n ) [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 $builtins.int$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $builtins.int$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Location$ 0 0 0 $'LocationFactory'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $'LocationFactory'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 0 0 0 0 $sensibility.lexical_analysis.Position$ 0 0 0 $builtins.int$ 0 0 0 0 0