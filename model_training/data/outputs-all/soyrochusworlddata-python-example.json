from typing import List , Dict , Any [EOL] import typing [EOL] import json [EOL] from statistics import mean [EOL] [EOL] class FaoData : [EOL] [EOL] def __init__ ( self , path , db ) : [EOL] [EOL] mapping3 , mapping2 = db . get_countries_mapping ( ) [EOL] [EOL] self . countries = { } [EOL] with open ( path , [string] ) as read_file : [EOL] items = json . load ( read_file ) [EOL] for item in items : [EOL] countrycode = mapping2 [ item [ [string] ] ] . CountryCode [EOL] country = self . countries . get ( countrycode , { } ) [EOL] product = { } [EOL] product [ [string] ] = item [ [string] ] [EOL] product [ [string] ] = item [ [string] ] [EOL] product [ [string] ] = item [ [string] ] [EOL] product [ [string] ] = item [ [string] ] [EOL] product [ [string] ] = item [ [string] ] [EOL] for year in range ( [number] , [number] ) : [EOL] product [ str ( year ) ] = item [ [string] + str ( year ) ] [EOL] [EOL] country [ str ( item [ [string] ] ) ] = product [EOL] self . countries [ countrycode ] = country [EOL] [EOL] def get_all ( self ) : [EOL] return self . countries [EOL] [EOL] def get_range ( self , sel_countries , sel_item_codes , sel_years = range ( [number] , [number] ) ) : [EOL] selected = { } [EOL] for sel_country in sel_countries : [EOL] selected [ sel_country ] = _select_items ( self . countries [ sel_country ] , sel_item_codes , sel_years ) [EOL] return selected [EOL] [EOL] def _get_countries_tuples ( self , sel_countries , sel_item_codes , sel_years ) : [EOL] selected = self . get_range ( sel_countries , sel_item_codes , sel_years ) [EOL] [EOL] res = [ ] [EOL] for country in selected . keys ( ) : [EOL] for item_code in selected [ country ] . keys ( ) : [EOL] for year in sel_years : [EOL] value = selected [ country ] [ item_code ] [ str ( year ) ] [EOL] res . append ( ( country , item_code , str ( year ) , value ) ) [EOL] [EOL] return res [EOL] [EOL] def get_range_max ( self , sel_countries , sel_item_codes , sel_years = range ( [number] , [number] ) ) : [EOL] selected = self . _get_countries_tuples ( sel_countries , sel_item_codes , sel_years ) [EOL] return max ( selected , key = lambda item : int ( item [ [number] ] ) ) [EOL] [EOL] def get_range_min ( self , sel_countries , sel_item_codes , sel_years = range ( [number] , [number] ) ) : [EOL] selected = self . _get_countries_tuples ( sel_countries , sel_item_codes , sel_years ) [EOL] return min ( selected , key = lambda item : int ( item [ [number] ] ) ) [EOL] [EOL] def get_range_mean ( self , sel_countries , sel_item_codes , sel_years = range ( [number] , [number] ) ) : [EOL] selected = [ int ( e [ [number] ] ) for e in self . _get_countries_tuples ( sel_countries , sel_item_codes , sel_years ) ] [EOL] return mean ( selected ) [EOL] [EOL] [EOL] def _select_items ( country , sel_item_codes , sel_years ) : [EOL] selected = { } [EOL] for item_code in sel_item_codes : [EOL] item_data = country [ item_code ] [EOL] new_item = { } [EOL] new_item [ [string] ] = item_data [ [string] ] [EOL] new_item [ [string] ] = item_data [ [string] ] [EOL] new_item [ [string] ] = item_data [ [string] ] [EOL] new_item [ [string] ] = item_data [ [string] ] [EOL] new_item [ [string] ] = item_data [ [string] ] [EOL] [EOL] for year in sel_years : [EOL] new_item [ str ( year ) ] = item_data [ str ( year ) ] [EOL] [EOL] selected [ item_code ] = new_item [EOL] return selected	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from . gdp import GdpData [EOL] from . population import PopulationData [EOL] from . fao import FaoData [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] import csv [EOL] import csv [EOL] from statistics import mean [EOL] [EOL] class PopulationData : [EOL] def __init__ ( self , path ) : [EOL] self . countries = { } [EOL] with open ( path ) as csv_population : [EOL] population = csv . DictReader ( csv_population ) [EOL] for country in population : [EOL] years = { } [EOL] self . countries [ country [ [string] ] ] = years [EOL] for year in range ( [number] , [number] ) : [EOL] years [ str ( year ) ] = country [ str ( year ) ] [EOL] [EOL] def get_all ( self ) : [EOL] return self . countries [EOL] [EOL] def get_range ( self , sel_countries , sel_years = range ( [number] , [number] ) ) : [EOL] selected = { } [EOL] for sel_country in sel_countries : [EOL] selected [ sel_country ] = _select_years ( self . countries [ sel_country ] , sel_years ) [EOL] return selected [EOL] [EOL] def _get_countries_tuples ( self , sel_countries , sel_years ) : [EOL] selected = self . get_range ( sel_countries , sel_years ) [EOL] print ( selected ) [EOL] res = [ ] [EOL] for country in selected . keys ( ) : [EOL] for year , value in selected [ country ] . items ( ) : [EOL] res . append ( ( country , year , value ) ) [EOL] return res [EOL] [EOL] def get_range_max ( self , sel_countries , sel_years = range ( [number] , [number] ) ) : [EOL] selected = self . _get_countries_tuples ( sel_countries , sel_years ) [EOL] return max ( selected , key = lambda item : int ( item [ [number] ] ) ) [EOL] [EOL] def get_range_min ( self , sel_countries , sel_years = range ( [number] , [number] ) ) : [EOL] selected = self . _get_countries_tuples ( sel_countries , sel_years ) [EOL] return min ( selected , key = lambda item : int ( item [ [number] ] ) ) [EOL] [EOL] def get_range_mean ( self , sel_countries , sel_years = range ( [number] , [number] ) ) : [EOL] selected = [ int ( e [ [number] ] ) for e in self . _get_countries_tuples ( sel_countries , sel_years ) ] [EOL] return mean ( selected ) [EOL] [EOL] def _select_years ( years , sel_years ) : [EOL] selected = { } [EOL] for year in sel_years : [EOL] selected [ str ( year ) ] = years [ str ( year ) ] [EOL] return selected	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import worlddata [EOL] from worlddata import PopulationData [EOL] from functools import reduce [EOL] [EOL] POPS_DB_PATH = [string] [EOL] [EOL] def test_population_instantiation ( ) : [EOL] [EOL] pops = PopulationData ( POPS_DB_PATH ) [EOL] assert pops is not None [EOL] [EOL] def test_population_get_all ( ) : [EOL] [EOL] pops = PopulationData ( POPS_DB_PATH ) [EOL] data = pops . get_all ( ) [EOL] [EOL] assert [number] == len ( data . keys ( ) ) [comment] [EOL] [EOL] total = [number] [EOL] for e in data . values ( ) : [EOL] total += len ( e . values ( ) ) [EOL] assert [number] == total [EOL] [EOL] [comment] [EOL] [EOL] def test_population_filter_data ( ) : [EOL] pops = PopulationData ( POPS_DB_PATH ) [EOL] data = pops . get_range ( ( [string] , [string] ) , range ( [number] , [number] ) ) [EOL] assert [string] == data [ [string] ] [ [string] ] [EOL] assert [string] == data [ [string] ] [ [string] ] [EOL] assert [string] == data [ [string] ] [ [string] ] [EOL] assert [string] == data [ [string] ] [ [string] ] [EOL] [EOL] def test_population_filter_mixmaxmean ( ) : [EOL] pops = PopulationData ( POPS_DB_PATH ) [EOL] data = pops . get_range_max ( ( [string] , [string] ) , range ( [number] , [number] ) ) [EOL] assert ( [string] , [string] , [string] ) == data [EOL] [EOL] data = pops . get_range_min ( ( [string] , [string] ) , range ( [number] , [number] ) ) [EOL] assert ( [string] , [string] , [string] ) == data [EOL] [EOL] data = pops . get_range_mean ( ( [string] , [string] ) , range ( [number] , [number] ) ) [EOL] assert [number] == data [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import worlddata [EOL] from worlddata import GdpData [EOL] [EOL] DB_PATH = [string] [EOL] [EOL] def test_gdp_instantiation ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] assert gdp is not None [EOL] [EOL] def test_gdp_get_countries ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] countries = gdp . get_countries ( ) [EOL] assert [number] == len ( countries ) [comment] [EOL] assert [string] == countries [ [number] ] . CountryCode [comment] [EOL] assert [string] == countries [ [number] ] . CountryName [EOL] assert [string] == countries [ [number] ] . CountryCode2 [EOL] assert [string] == countries [ [number] ] . UNCode [EOL] assert [string] == countries [ - [number] ] . CountryCode [comment] [EOL] [EOL] [EOL] def test_gdp_get_countries_mapping ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] countries , countries2 = gdp . get_countries_mapping ( ) [EOL] assert [number] == len ( countries . keys ( ) ) [comment] [EOL] assert [string] == countries [ [string] ] . CountryCode [comment] [EOL] assert [string] == countries [ [string] ] . CountryName [EOL] assert [string] == countries [ [string] ] . CountryCode2 [EOL] assert [string] == countries [ [string] ] . UNCode [EOL] assert [string] == countries [ [string] ] . CountryCode [comment] [EOL] [comment] [EOL] assert [string] == countries2 [ [string] ] . CountryCode2 [comment] [EOL] [EOL] [EOL] def test_gdp_get_all ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] data = gdp . get_all ( ) [EOL] [EOL] assert [number] == len ( data . keys ( ) ) [comment] [EOL] [EOL] total = [number] [EOL] for e in data . values ( ) : [EOL] total += len ( e . values ( ) ) [EOL] assert [number] == total [EOL] [EOL] [EOL] def test_gdp_filter_data ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] data = gdp . get_range ( ( [string] , [string] ) , range ( [number] , [number] ) ) [EOL] [EOL] { [string] : [number] , [string] : [number] } == data [ [string] ] [ [string] ] [EOL] { [string] : [number] , [string] : [number] } == data [ [string] ] [ [string] ] [EOL] [EOL] { [string] : [number] , [string] : [number] } == data [ [string] ] [ [string] ] [EOL] { [string] : [number] , [string] : [number] } == data [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def test_gdp_filter_mixmaxmean ( ) : [EOL] gdp = GdpData ( DB_PATH ) [EOL] data = gdp . get_range_max ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] [EOL] assert ( [string] , [string] , { [string] : [number] , [string] : [number] } ) == data [EOL] [EOL] data = gdp . get_range_max ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] assert ( [string] , [string] , { [string] : [number] , [string] : [number] } ) == data [EOL] [EOL] data = gdp . get_range_min ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] assert ( [string] , [string] , { [string] : [number] , [string] : [number] } ) == data [EOL] [EOL] data = gdp . get_range_min ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] assert ( [string] , [string] , { [string] : [number] , [string] : [number] } ) == data [EOL] [EOL] data = gdp . get_range_mean ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] assert [number] == data [EOL] [EOL] data = gdp . get_range_mean ( ( [string] , [string] ) , range ( [number] , [number] ) , [string] ) [EOL] assert [number] == data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import worlddata [EOL] from worlddata import FaoData , GdpData [EOL] [EOL] FAO_DB_PATH = [string] [EOL] DB_PATH = [string] [EOL] [EOL] def test_fao_instantiation ( ) : [EOL] [EOL] gdpdata = GdpData ( DB_PATH ) [EOL] faodata = FaoData ( FAO_DB_PATH , gdpdata ) [EOL] assert faodata is not None [EOL] [EOL] def test_fao_get_all ( ) : [EOL] [EOL] gdpdata = GdpData ( DB_PATH ) [EOL] faodata = FaoData ( FAO_DB_PATH , gdpdata ) [EOL] data = faodata . get_all ( ) [EOL] assert [number] == len ( data ) [comment] [EOL] [comment] [EOL] assert [number] == data [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def test_fao_filter_data ( ) : [EOL] gdpdata = GdpData ( DB_PATH ) [EOL] faodata = FaoData ( FAO_DB_PATH , gdpdata ) [EOL] data = faodata . get_range ( ( [string] , ) , ( [string] , ) , range ( [number] , [number] ) ) [EOL] [EOL] assert [number] == len ( data [ [string] ] ) [comment] [EOL] [EOL] [comment] [EOL] assert [number] == data [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] def test_fao_filter_mixmaxmean ( ) : [EOL] gdpdata = GdpData ( DB_PATH ) [EOL] faodata = FaoData ( FAO_DB_PATH , gdpdata ) [EOL] [EOL] data = faodata . get_range_max ( ( [string] , ) , ( [string] , ) , range ( [number] , [number] ) ) [EOL] assert ( [string] , [string] , [string] , [number] ) == data [EOL] [EOL] data = faodata . get_range_min ( ( [string] , ) , ( [string] , ) , range ( [number] , [number] ) ) [EOL] assert ( [string] , [string] , [string] , [number] ) == data [EOL] [EOL] data = faodata . get_range_mean ( ( [string] , ) , ( [string] , ) , range ( [number] , [number] ) ) [EOL] assert [number] == data [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] import sqlite3 [EOL] import csv [EOL] import csv [EOL] import sqlite3 [EOL] [EOL] conn = sqlite3 . connect ( [string] ) [EOL] c = conn . cursor ( ) [EOL] [EOL] with open ( [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] for row in reader : [EOL] data = row [ [string] ] , row [ [string] ] [EOL] print ( data ) [EOL] conn . execute ( [string] , data ) [EOL] conn . commit ( ) [EOL] [EOL] conn . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0
import builtins [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] import sqlite3 [EOL] import io [EOL] import csv [EOL] import csv [EOL] import sqlite3 [EOL] [EOL] conn = sqlite3 . connect ( [string] ) [EOL] c = conn . cursor ( ) [EOL] [EOL] csv_growth = open ( [string] ) [EOL] csv_gdp = open ( [string] ) [EOL] [EOL] growth_reader = csv . DictReader ( csv_growth ) [EOL] gdp_reader = csv . DictReader ( csv_gdp ) [EOL] [EOL] growth = { e [ [string] ] : e for e in growth_reader } [EOL] gdp = { e [ [string] ] : e for e in gdp_reader } [EOL] [EOL] for country in growth : [EOL] [EOL] growth_item = growth [ country ] [EOL] gdp_item = gdp [ country ] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] year = str ( i ) [EOL] data = country , year , gdp_item [ year ] , growth_item [ year ] [EOL] conn . execute ( [string] , data ) [EOL] print ( country , year , data ) [EOL] [EOL] csv_gdp . close ( ) [EOL] csv_growth . close ( ) [EOL] [EOL] conn . commit ( ) [EOL] conn . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0