from typing import Set [EOL] import typing [EOL] import os [EOL] WTF_CSRF_ENABLED = True [EOL] SECRET_KEY = [string] [EOL] UPLOAD_FOLDER = [string] [EOL] ALLOWED_EXTENSIONS = set ( [ [string] , [string] , [string] ] ) [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] from app import app [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . setLevel ( logging . INFO ) [EOL] fh = logging . FileHandler ( [string] ) [EOL] formatter = logging . Formatter ( [string] ) [EOL] fh . setFormatter ( formatter ) [EOL] logger . addHandler ( fh ) [EOL] [EOL] logger . info ( [string] ) [EOL] [EOL] app . run ( host = [string] , port = [number] , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Formatter$ 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Literal , Any , Union [EOL] import typing [EOL] import typing_extensions [EOL] import os [EOL] import psycopg2 [EOL] [EOL] options = os . getenv ( [string] , [string] ) [EOL] [EOL] connection = psycopg2 . connect ( options ) [EOL] cursor = connection . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] [EOL] schema = open ( [string] , [string] ) . read ( ) [EOL] cursor . execute ( schema ) [EOL] [EOL] connection . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Literal , Any , List , Union [EOL] import io [EOL] import typing [EOL] import typing_extensions [EOL] import json [EOL] import random [EOL] import re [EOL] import time [EOL] import os [EOL] [EOL] import psycopg2 [EOL] import psycopg2 . extras [EOL] [EOL] START_TIME = time . time ( ) [EOL] [EOL] def connectToDB ( ) : [EOL] options = os . getenv ( [string] , [string] ) [EOL] return psycopg2 . connect ( options ) [EOL] [EOL] [EOL] def wrapper ( str ) : [EOL] return [string] + str + [string] [EOL] [EOL] [EOL] def readFromFile ( filename ) : [EOL] with open ( filename , [string] ) as f : [EOL] tmp = [ ] [EOL] for line in f : [EOL] line = re . sub ( [string] , [string] , line ) [EOL] if not ( line in tmp ) : [EOL] tmp . append ( line ) [EOL] print ( [string] + filename + [string] + str ( len ( tmp ) ) ) [EOL] with open ( filename , [string] ) as f : [EOL] f . write ( [string] . join ( tmp ) ) [EOL] return tmp [EOL] [EOL] [EOL] customerCount = [number] [EOL] sys_userCount = [number] [EOL] cities_name = [ ] [EOL] hotel_admins_id = [ ] [EOL] hotels_id = [ ] [EOL] options_id = [ ] [EOL] config_id = [ ] [EOL] [EOL] [EOL] def countryGenerator ( ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] f = open ( [string] , [string] ) [EOL] country = f . read ( ) [EOL] country = json . loads ( country ) [EOL] f . close ( ) [EOL] f = open ( [string] , [string] ) [EOL] for i in range ( len ( country ) ) : [EOL] country_query = [string] + [string] + country [ i ] [ [string] ] + [string] + country [ i ] [ [string] ] + [string] [EOL] cities_name . append ( country [ i ] [ [string] ] ) [EOL] cur . execute ( country_query ) [EOL] [comment] [EOL] f . writelines ( country_query ) [EOL] f . close ( ) [EOL] db . commit ( ) [EOL] db . close ( ) [EOL] [EOL] [EOL] def customersGenereator ( times ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] emails = None [EOL] with open ( [string] , [string] ) as f : [EOL] emails = f . read ( ) [EOL] emails = json . loads ( emails ) [EOL] with open ( [string] , [string] ) as f : [EOL] customers = f . read ( ) [EOL] customers = json . loads ( customers ) [EOL] with open ( [string] , [string] ) as f : [EOL] for k in range ( [number] , times ) : [EOL] for i in range ( len ( emails ) ) : [EOL] global customerCount [EOL] global sys_userCount [EOL] customerCount += [number] [EOL] sys_userCount += [number] [EOL] sys_user_query = [string] + str ( k ) + emails [ i ] [ [string] ] + [string] [EOL] cur . execute ( sys_user_query ) [EOL] customers [ i ] [ [string] ] = str ( cur . fetchone ( ) [ [string] ] ) [EOL] f . writelines ( sys_user_query ) [EOL] customer_qurey = [string] + [string] + customers [ i ] [ [string] ] + [string] + customers [ i ] [ [string] ] + [string] + customers [ i ] [ [string] ] + [string] + customers [ i ] [ [string] ] + [string] + customers [ i ] [ [string] ] + [string] [string] [EOL] cur . execute ( customer_qurey ) [EOL] f . writelines ( customer_qurey ) [EOL] db . commit ( ) [EOL] db . close ( ) [EOL] [EOL] [EOL] def hotel_adminsGenerator ( ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] emails = None [EOL] with open ( [string] , [string] ) as f : [EOL] emails = f . read ( ) [EOL] emails = json . loads ( emails ) [EOL] with open ( [string] , [string] ) as f : [EOL] admins = f . read ( ) [EOL] admins = json . loads ( admins ) [EOL] with open ( [string] , [string] ) as f : [EOL] for i in range ( len ( emails ) ) : [EOL] sys_user_query = [string] + emails [ i ] [ [string] ] + [string] [EOL] cur . execute ( sys_user_query ) [EOL] admins [ i ] [ [string] ] = str ( cur . fetchone ( ) [ [string] ] ) [EOL] hotel_admins_id . append ( admins [ i ] [ [string] ] ) [EOL] f . writelines ( sys_user_query ) [EOL] hotel_admin_query = [string] + [string] + admins [ i ] [ [string] ] + [string] + admins [ i ] [ [string] ] + [string] + admins [ i ] [ [string] ] + [string] + admins [ i ] [ [string] ] + [string] [EOL] cur . execute ( hotel_admin_query ) [EOL] f . writelines ( hotel_admin_query ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] def optionsGenerator ( ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] variants = [ [string] , [string] ] [EOL] with open ( [string] , [string] ) as f : [EOL] for wifi in range ( [number] ) : [EOL] for bath in range ( [number] ) : [EOL] for tv in range ( [number] ) : [EOL] for hub in range ( [number] ) : [EOL] for air in range ( [number] ) : [EOL] option_query = [string] + variants [ bath ] + [string] + variants [ tv ] + [string] + variants [ wifi ] + [string] + variants [ hub ] + [string] + variants [ air ] + [string] [EOL] cur . execute ( option_query ) [EOL] tmp = cur . fetchone ( ) [ [string] ] [EOL] options_id . append ( tmp ) [EOL] db . commit ( ) [EOL] f . writelines ( option_query ) [EOL] [EOL] [EOL] def configGenerator ( ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] with open ( [string] , [string] ) as f : [EOL] for double in range ( [number] ) : [EOL] for single in range ( [number] ) : [EOL] for sofa in range ( [number] ) : [EOL] config_query = [string] + str ( double ) + [string] + str ( single ) + [string] + str ( sofa ) + [string] [EOL] cur . execute ( config_query ) [EOL] tmp = cur . fetchone ( ) [ [string] ] [EOL] config_id . append ( tmp ) [EOL] f . writelines ( config_query ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] def rooms_generator ( hotel_id ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] with open ( [string] , [string] ) as f : [EOL] room = json . loads ( f . read ( ) ) [EOL] with open ( [string] , [string] ) as f : [EOL] for i in range ( len ( room ) ) : [EOL] room_query = [string] + str ( hotel_id ) + [string] + getRandomConfig ( ) + [string] + getRandomOption ( ) + [string] + getRandomQuantity ( ) + [string] + room [ i ] [ [string] ] + [string] + room [ i ] [ [string] ] + [string] + getRandomCost ( ) + [string] [EOL] f . writelines ( room_query ) [EOL] cur . execute ( room_query ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] def hotels_Generator ( ) : [EOL] db = connectToDB ( ) [EOL] cur = db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] with open ( [string] , [string] ) as f : [EOL] hotel = f . read ( ) [EOL] hotel = json . loads ( hotel ) [EOL] with open ( [string] , [string] ) as f : [EOL] for i in range ( len ( hotel ) ) : [EOL] hotel_query = [string] + getRandomCity ( ) + [string] + hotel [ i ] [ [string] ] + [string] + hotel [ i ] [ [string] ] + [string] + getRandomStars ( ) + [string] + hotel [ i ] [ [string] ] + [string] + getRandomImg ( ) + [string] + getRandomOwner ( ) + [string] [EOL] cur . execute ( hotel_query ) [EOL] f . writelines ( hotel_query ) [EOL] hotel_id = cur . fetchone ( ) [ [string] ] [EOL] hotels_id . append ( hotel_id ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] [comment] [EOL] def getRandomOption ( ) : [EOL] return str ( options_id [ random . randint ( [number] , len ( options_id ) - [number] ) ] ) [EOL] [EOL] [EOL] def getRandomConfig ( ) : [EOL] return str ( config_id [ random . randint ( [number] , len ( config_id ) - [number] ) ] ) [EOL] [EOL] [EOL] def getRandomQuantity ( ) : [EOL] return str ( random . randint ( [number] , [number] ) ) [EOL] [EOL] [EOL] def getRandomCost ( ) : [EOL] return str ( random . randint ( [number] , [number] ) ) [EOL] [EOL] [EOL] def getRandomStars ( ) : [EOL] return str ( random . randint ( [number] , [number] ) ) [EOL] [EOL] [EOL] def getRandomImg ( ) : [EOL] imgs = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] return imgs [ random . randint ( [number] , len ( imgs ) - [number] ) ] [EOL] [EOL] [EOL] def getRandomCity ( ) : [EOL] return cities_name [ random . randint ( [number] , len ( cities_name ) - [number] ) ] [EOL] [EOL] [EOL] def getRandomOwner ( ) : [EOL] return hotel_admins_id [ random . randint ( [number] , len ( hotel_admins_id ) - [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] countryGenerator ( ) [EOL] configGenerator ( ) [EOL] optionsGenerator ( ) [EOL] customersGenereator ( [number] ) [EOL] hotel_adminsGenerator ( ) [EOL] hotels_Generator ( ) [EOL] for hot in hotels_id : [EOL] rooms_generator ( hot ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] finalStr = open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] finalStr += open ( [string] , [string] ) . read ( ) [EOL] f . writelines ( finalStr ) [EOL] [EOL] END_TIME = time . time ( ) [EOL] [EOL] FINAL_TIME = END_TIME - START_TIME [EOL] print ( [string] + str ( FINAL_TIME / [number] ) + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import logging [EOL] import flask [EOL] import typing [EOL] from flask import Flask [EOL] from flask_bcrypt import Bcrypt [EOL] from flask_login import LoginManager [EOL] [EOL] from . models import AnonymousUser [EOL] [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . setLevel ( logging . INFO ) [EOL] fh = logging . FileHandler ( [string] ) [EOL] formatter = logging . Formatter ( [string] ) [EOL] fh . setFormatter ( formatter ) [EOL] logger . addHandler ( fh ) [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] bcrypt = Bcrypt ( app ) [EOL] login_manager = LoginManager ( ) [EOL] login_manager . init_app ( app ) [EOL] login_manager . login_view = [string] [EOL] login_manager . anonymous_user = AnonymousUser [EOL] [EOL] app . config . from_object ( [string] ) [EOL] [EOL] from app import views [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Formatter$ 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0
from typing import Type [EOL] import logging [EOL] import typing [EOL] import app [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import BooleanField , FileField , HiddenField , IntegerField , PasswordField , SelectField , StringField , SubmitField , TextAreaField [EOL] from wtforms . validators import DataRequired , EqualTo [EOL] [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class LoginForm ( FlaskForm ) : [EOL] email = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] password = PasswordField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] remember_me = BooleanField ( [string] ) [EOL] [EOL] [EOL] class RegisterForm ( FlaskForm ) : [EOL] first_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] last_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] email = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] password = PasswordField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] password_confirmation = PasswordField ( [string] , validators = [ DataRequired ( ) , EqualTo ( [string] , message = [string] ) ] ) [EOL] telephone = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] [EOL] [EOL] class ProfileForm ( FlaskForm ) : [EOL] first_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] last_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] email = StringField ( [string] ) [EOL] telephone = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] credit_card = StringField ( [string] ) [EOL] [EOL] [EOL] class UDHotelForm ( FlaskForm ) : [EOL] hotel_id = HiddenField ( [string] ) [EOL] edit = SubmitField ( [string] ) [EOL] delete = SubmitField ( [string] ) [EOL] add_hotel = SubmitField ( [string] ) [EOL] manage = SubmitField ( [string] ) [EOL] [EOL] [EOL] class CUHotelForm ( FlaskForm ) : [EOL] img = FileField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] hotel_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] country = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] city = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] address = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] description = TextAreaField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] stars = SelectField ( [string] , choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , validators = [ DataRequired ( ) ] ) [EOL] [EOL] [EOL] class CReceptionistForm ( FlaskForm ) : [EOL] first_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] last_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] email = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] password = PasswordField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] telephone = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] salary = IntegerField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] save = SubmitField ( [string] ) [EOL] [EOL] [EOL] class CRoomForm ( FlaskForm ) : [EOL] is_bathroom = BooleanField ( [string] ) [EOL] is_tv = BooleanField ( [string] ) [EOL] is_wifi = BooleanField ( [string] ) [EOL] is_bathhub = BooleanField ( [string] ) [EOL] is_aircond = BooleanField ( [string] ) [EOL] sing_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] doub_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] sofa_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] quantity = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] title = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] description = TextAreaField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] cost = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] save = SubmitField ( [string] ) [EOL] [EOL] [EOL] class URoomForm ( FlaskForm ) : [EOL] room_id = HiddenField ( [string] ) [EOL] is_bathroom = BooleanField ( [string] ) [EOL] is_tv = BooleanField ( [string] ) [EOL] is_wifi = BooleanField ( [string] ) [EOL] is_bathhub = BooleanField ( [string] ) [EOL] is_aircond = BooleanField ( [string] ) [EOL] sing_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] doub_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] sofa_bed = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] quantity = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] title = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] description = TextAreaField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] cost = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] edit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class UDRoomForm ( FlaskForm ) : [EOL] room_id = HiddenField ( [string] ) [EOL] delete = SubmitField ( [string] ) [EOL] [EOL] [EOL] class DReceptionistForm ( FlaskForm ) : [EOL] user_id = HiddenField ( [string] ) [EOL] del_rec = SubmitField ( [string] ) [EOL] [EOL] [EOL] class SearchForm ( FlaskForm ) : [EOL] destination = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] checkin = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] checkout = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] is_bathroom = BooleanField ( [string] ) [EOL] is_tv = BooleanField ( [string] ) [EOL] is_wifi = BooleanField ( [string] ) [EOL] is_bathhub = BooleanField ( [string] ) [EOL] is_airconditioniring = BooleanField ( [string] ) [EOL] sleeps = IntegerField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] price_from = IntegerField ( [string] ) [EOL] price_to = IntegerField ( [string] ) [EOL] quantity = IntegerField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] [EOL] [EOL] class InfoForm ( FlaskForm ) : [EOL] hotel_id = HiddenField ( [string] ) [EOL] info = SubmitField ( [string] ) [EOL] [EOL] [EOL] class DBookingForm ( FlaskForm ) : [EOL] transaction_id = HiddenField ( [string] ) [EOL] delete = SubmitField ( [string] ) [EOL] [EOL] [EOL] class ReserveRoomForm ( FlaskForm ) : [EOL] room_id = HiddenField ( [string] ) [EOL] quantity = HiddenField ( [string] ) [EOL] amount = HiddenField ( [string] ) [EOL] first_name = StringField ( [string] ) [EOL] last_name = StringField ( [string] ) [EOL] email = StringField ( [string] ) [EOL] payment_info = StringField ( [string] ) [EOL] checkin = StringField ( [string] ) [EOL] checkout = StringField ( [string] ) [EOL] [EOL] [EOL] class CAdmin ( FlaskForm ) : [EOL] first_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] last_name = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] email = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] password = PasswordField ( [string] , validators = [ DataRequired ( ) ] ) [EOL] telephone = StringField ( [string] , validators = [ DataRequired ( ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.ProfileForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.ProfileForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.ProfileForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ProfileForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.ProfileForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.UDHotelForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.UDHotelForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.UDHotelForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.UDHotelForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.UDHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CUHotelForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.URoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.UDRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.UDRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.DReceptionistForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.DReceptionistForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.InfoForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.InfoForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.DBookingForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.DBookingForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 $typing.Type[app.forms.ReserveRoomForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.forms.CAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import logging [EOL] import typing [EOL] from app import app , bcrypt [EOL] import time [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def imgName ( filename ) : [EOL] img_name = None [EOL] if [string] in filename and filename . rsplit ( [string] , [number] ) [ [number] ] in app . config [ [string] ] : [EOL] img_name = str ( time . time ( ) ) + [string] + filename . rsplit ( [string] , [number] ) [ [number] ] [EOL] return img_name [EOL] [EOL] [EOL] def reverseDate ( date ) : [EOL] return [string] . join ( date . split ( [string] ) [ : : - [number] ] ) [EOL] [EOL] [EOL] def searchOp ( args ) : [EOL] d = [ [string] , [string] , [string] , [string] , [string] ] [EOL] s = [ ] [EOL] for key in d : [EOL] if key in args : [EOL] line = [string] + key + [string] + key + [string] [EOL] s . append ( line ) [EOL] if len ( s ) != [number] : [EOL] s = [string] . join ( s ) [EOL] return [string] + s + [string] [EOL] else : [EOL] return [string] [EOL] [EOL] [EOL] def check_password ( hash , password ) : [EOL] return bcrypt . check_password_hash ( hash , password ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Optional , Any , Union [EOL] import logging [EOL] import builtins [EOL] import typing [EOL] import typing_extensions [EOL] import logging [EOL] import os [EOL] from typing import Optional [EOL] [EOL] import psycopg2 [EOL] from flask import g [EOL] [EOL] from . helpers import searchOp [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Database : [EOL] pass [EOL] [EOL] [EOL] class AndrewDB ( Database ) : [EOL] ROLE_ADMIN = [string] [EOL] ROLE_CUSTOMER = [string] [EOL] ROLE_HOTEL_ADMIN = [string] [EOL] ROLE_RECEPTIONIST = [string] [EOL] [EOL] def __connect_to_db ( self ) : [EOL] options = os . getenv ( [string] , [string] ) [EOL] logger . info ( [string] ) [EOL] try : [EOL] return psycopg2 . connect ( options ) [EOL] except Exception as e : [EOL] print ( [string] , e ) [EOL] logger . exception ( [string] , e ) [EOL] [EOL] def __get_cursor ( self , role ) : [EOL] logger . info ( [string] ) [EOL] dict_cursor = psycopg2 . extras . DictCursor [EOL] g . db = self . __connect_to_db ( ) [EOL] g . role = role [EOL] return g . db . cursor ( cursor_factory = dict_cursor ) [EOL] [EOL] def insert_sys_user_get_id ( self , email , password , role = ROLE_ADMIN ) : [EOL] logger . info ( [string] ) [EOL] res = self . insert_sys_user ( email , password , role ) [EOL] if res : [EOL] return res [ [string] ] [EOL] else : [EOL] return None [EOL] [EOL] def insert_sys_user ( self , email , password , role = ROLE_ADMIN ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] [string] , ( email , password , role ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except psycopg2 . IntegrityError : [EOL] logger . exception ( [string] ) [EOL] g . db . rollback ( ) [EOL] return None [EOL] [EOL] def get_sys_user_by_email ( self , email ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] , ( email , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def insert_admin ( self , user_id , f_name , l_name , phone_number ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] , ( user_id , f_name , l_name , phone_number ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] [EOL] def insert_hotel_admin ( self , person_id , first_name , last_name , phone_number ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_HOTEL_ADMIN ) [EOL] cur . execute ( [string] , ( person_id , first_name , last_name , phone_number ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def get_all_hotels ( self ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] [EOL] def get_all_system_users ( self ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] [EOL] def get_db_statistics ( self ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] [string] ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchall ( ) [ [number] ] ) [EOL] [EOL] def get_all_admins ( self ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( f" [string] { self . ROLE_ADMIN }" ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] [EOL] def get_rooms_by_params ( self , recep , checkin_date , checkout_date ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] query = [string] [string] [string] [string] [string] [string] [EOL] cur . execute ( query , ( recep , checkin_date , checkout_date ) ) [EOL] rooms = cur . fetchall ( ) [EOL] g . db . commit ( ) [EOL] return rooms [EOL] [EOL] def get_all_receptionists ( self , user_id ) : [EOL] logger . info ( [string] % user_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( user_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_vw_hotel_by_id ( self , hotel_id ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_vw_customer_by_id ( self , person_id ) : [EOL] logger . info ( [string] % person_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_customer_by_id ( self , person_id ) : [EOL] logger . info ( [string] % person_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_hotel_admin_by_id ( self , person_id ) : [EOL] logger . info ( [string] % person_id ) [EOL] try : [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] [EOL] def get_receptionist_by_id ( self , person_id ) : [EOL] logger . info ( [string] % person_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_admin_by_id ( self , person_id ) : [EOL] logger . info ( [string] % person_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] [EOL] def get_hotel_by_id ( self , hotel_id ) : [EOL] try : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return dict ( cur . fetchone ( ) ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def get_rooms_with_settings_by_id ( self , hotel_id ) : [EOL] try : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] [string] , ( hotel_id , ) ) [EOL] return cur . fetchall ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def get_booked_rooms_by_hotel_id ( self , hotel_id ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] [EOL] def delete_transaction ( self , transaction_id ) : [EOL] try : [EOL] logger . info ( [string] % transaction_id ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] , ( transaction_id , ) ) [EOL] g . db . commit ( ) [EOL] return True [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return False [EOL] [EOL] def get_some_info_by_user_id ( self , user_id ) : [EOL] try : [EOL] logger . info ( [string] % user_id ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] [string] [string] [string] [string] , ( user_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def get_option_by_params ( self , is_bath , is_tv , is_wifi , is_bathh , is_air ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] [string] , ( is_bath , is_tv , is_wifi , is_bathh , is_air ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def insert_option ( self , is_bath , is_tv , is_wifi , is_bathh , is_air ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] [string] , ( is_bath , is_tv , is_wifi , is_bathh , is_air ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def delete_room_by_id ( self , room_id ) : [EOL] try : [EOL] logger . info ( [string] % room_id ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] , ( room_id , ) ) [EOL] g . db . commit ( ) [EOL] return True [EOL] except Exception as e : [EOL] logger . info ( [string] ) [EOL] print ( e ) [EOL] return False [EOL] [EOL] def select_config ( self , single_bed , double_bed , sofa_bed ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] , ( single_bed , double_bed , sofa_bed ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def insert_config ( self , single_bed , souble_bed , sofa_bed ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] , ( single_bed , souble_bed , sofa_bed ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def set_up_room_by_id ( self , config_id , option_id , quantity , title , description , cost , room_id ) : [EOL] try : [EOL] logger . info ( [string] % room_id ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] [string] , ( config_id , option_id , quantity , title , description , cost , room_id ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] [EOL] def delete_receptionist_by_id ( self , recep_id ) : [EOL] try : [EOL] logger . info ( [string] % recep_id ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] , ( recep_id , ) ) [EOL] g . db . commit ( ) [EOL] return True [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return False [EOL] [EOL] def add_new_receptionist ( self , user_id , hotel_id , f_name , l_name , phone , salary ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] [string] , ( user_id , hotel_id , f_name , l_name , phone , salary ) ) [EOL] g . db . commit ( ) [EOL] return True [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return False [EOL] [EOL] def add_new_room ( self , hotel_id , config_id , option_id , quantity , title , descr , cost ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] [string] , ( hotel_id , config_id , option_id , quantity , title , descr , cost ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] [EOL] def get_receptionists_by_hotel_id ( self , hotel_id ) : [EOL] try : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_RECEPTIONIST ) [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return None [EOL] [EOL] def get_cost_by_id ( self , room_id ) : [EOL] logger . info ( [string] % id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( room_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] [EOL] def create_transaction_get_id ( self , info ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] [string] , info ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] [EOL] def insert_location_if_not_exists ( self , country , city ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] , ( country , city ) ) [EOL] g . db . commit ( ) [EOL] if not cur . fetchone ( ) : [EOL] cur . execute ( [string] , ( country , city ) ) [EOL] g . db . commit ( ) [EOL] [EOL] def add_hotel ( self , city , address , name , stars , description , owner_id , img ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] cur . execute ( [string] [string] , ( city , address , name , stars , description , owner_id , img ) ) [EOL] g . db . commit ( ) [EOL] [EOL] def get_image_name_by_hotel_id ( self , hotel_id ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] try : [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def update_hotel_by_id ( self , hotel_id , city , address , hotel_name , stars , description , img_path ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] try : [EOL] cur . execute ( [string] [string] , ( city , address , hotel_name , stars , description , img_path , hotel_id ) ) [EOL] g . db . commit ( ) [EOL] return True [EOL] except Exception as e : [EOL] logger . exception ( [string] ) [EOL] print ( e ) [EOL] return False [EOL] [EOL] def get_hotel_and_address_by_id ( self , hotel_id ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] try : [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def add_booking ( self , info ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] try : [EOL] cur . execute ( [string] [string] , info ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def search_get_rooms ( self , search ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] query = [string] [string] [string] [string] [string] [string] [EOL] if search [ [string] ] or search [ [string] ] or search [ [string] ] or search [ [string] ] or search [ [string] ] : [EOL] options = searchOp ( search ) [EOL] query += [string] + options [EOL] if search [ [string] ] != [number] : [EOL] query += [string] [EOL] try : [EOL] cur . execute ( query , search ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def add_customer ( self , person_id , first_name , last_name , phone_number ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] , ( person_id , first_name , last_name , phone_number ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def update_customer ( self , person_id , first_name , last_name , phone_number , payment_info ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] cur . execute ( [string] [string] , ( person_id , first_name , last_name , phone_number , payment_info ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def update_hotel_admin ( self , person_id , first_name , last_name , phone_number ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_HOTEL_ADMIN ) [EOL] cur . execute ( [string] , ( first_name , last_name , phone_number , person_id ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def update_admin ( self , person_id , first_name , last_name , phone_number ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_HOTEL_ADMIN ) [EOL] cur . execute ( [string] , ( first_name , last_name , phone_number , person_id ) ) [EOL] g . db . commit ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def search_hotels_by_form ( self , search ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] query = [string] [string] [string] [string] [string] [string] [string] [string] [EOL] if search [ [string] ] or search [ [string] ] or search [ [string] ] or search [ [string] ] or search [ [string] ] : [EOL] options = searchOp ( search ) [EOL] query = [string] [string] [string] [string] [string] [string] [string] [string] + options [EOL] if search [ [string] ] != [number] : [EOL] query += [string] [EOL] query += [string] [EOL] cur . execute ( query , search ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] [EOL] def get_user_by_id ( self , user_id ) : [EOL] logger . info ( [string] % user_id ) [EOL] cur = self . __get_cursor ( self . ROLE_CUSTOMER ) [EOL] try : [EOL] cur . execute ( [string] , ( user_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def remove_hotel_by_id ( self , hotel_id ) : [EOL] logger . info ( [string] % hotel_id ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] try : [EOL] cur . execute ( [string] , ( hotel_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchone ( ) [ [string] ] [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL] [EOL] def get_hotels_by_admin_id ( self , user_id ) : [EOL] logger . info ( [string] ) [EOL] cur = self . __get_cursor ( self . ROLE_ADMIN ) [EOL] try : [EOL] cur . execute ( [string] , ( user_id , ) ) [EOL] g . db . commit ( ) [EOL] return cur . fetchall ( ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] logger . exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class User ( object ) : [EOL] [EOL] def __init__ ( self , user_id , email , password , role ) : [EOL] self . user_id = user_id [EOL] self . email = email [EOL] self . password = password [EOL] self . role = role [EOL] [EOL] def is_authenticated ( self ) : [EOL] return True [EOL] [EOL] def is_active ( self ) : [EOL] return True [EOL] [EOL] def is_anonymous ( self ) : [EOL] return False [EOL] [EOL] def is_admin ( self ) : [EOL] return self . role == [string] [EOL] [EOL] def is_hotel_admin ( self ) : [EOL] return self . role == [string] [EOL] [EOL] def is_receptionist ( self ) : [EOL] return self . role == [string] [EOL] [EOL] def is_customer ( self ) : [EOL] return self . role == [string] [EOL] [EOL] def get_id ( self ) : [EOL] return str ( self . user_id ) [EOL] [EOL] [EOL] class AnonymousUser ( object ) : [EOL] [EOL] def is_authenticated ( self ) : [EOL] return False [EOL] [EOL] def is_active ( self ) : [EOL] return False [EOL] [EOL] def is_anonymous ( self ) : [EOL] return True [EOL] [EOL] def is_admin ( self ) : [EOL] return False [EOL] [EOL] def is_hotel_admin ( self ) : [EOL] return False [EOL] [EOL] def is_receptionist ( self ) : [EOL] return False [EOL] [EOL] def is_customer ( self ) : [EOL] return False [EOL] [EOL] def get_id ( self ) : [EOL] return None [EOL] [EOL] [EOL] class Customer ( object ) : [EOL] [EOL] def __init__ ( self , first_name , last_name , email , phone_number , payment_info ) : [EOL] self . first_name = first_name [EOL] self . last_name = last_name [EOL] self . email = email [EOL] self . phone_number = phone_number [EOL] self . payment_info = payment_info [EOL] [EOL] [EOL] class HotelAdmin ( object ) : [EOL] [EOL] def __init__ ( self , first_name , last_name , email , phone_number ) : [EOL] self . first_name = first_name [EOL] self . last_name = last_name [EOL] self . email = email [EOL] self . phone_number = phone_number [EOL]	0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any , Dict , List , Union [EOL] import typing [EOL] import app [EOL] import allure [EOL] import mock [EOL] [EOL] from app import app [EOL] from app . db import AndrewDB , searchOp [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_sys_user_get_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . insert_sys_user_get_id ( [string] , [string] ) [EOL] assert result == expected [ [string] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_sys_user ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . insert_sys_user ( [string] , [string] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_sys_user_by_email ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_sys_user_by_email ( [string] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_admin ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . insert_admin ( [number] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_hotels ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value . __getitem__ ( [string] ) . return_value = expected [EOL] result = db . get_all_hotels ( ) . return_value [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_sys_users ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value . __getitem__ ( [string] ) . return_value = expected [EOL] result = db . get_all_system_users ( ) . return_value [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_db_statistics ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ { [string] : [number] , [string] : [number] } ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_db_statistics ( ) [EOL] assert result == expected [ [number] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_admins ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_all_admins ( ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_room_by_params ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_rooms_by_params ( [string] , [string] , [string] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_receptionists ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_all_receptionists ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_vw_hotel_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_vw_hotel_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_vw_customer_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_vw_customer_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_customer_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_customer_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_hotel_admin_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_hotel_admin_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_receptionist_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_receptionist_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_admin_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_admin_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_hotel_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_hotel_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_rooms_with_settings_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_rooms_with_settings_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_booked_rooms_by_hotel_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_rooms_with_settings_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_delete_transaction ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . delete_transaction ( [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_some_info_by_user_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_some_info_by_user_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_options_by_params ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_option_by_params ( True , True , True , True , True ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_option ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . insert_option ( True , True , True , True , True ) [EOL] assert result == expected [ [string] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_delete_room_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . delete_room_by_id ( [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_delete_receptionist_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . delete_receptionist_by_id ( [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_select_config_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [number] [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . select_config ( False , False , True ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_config ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . insert_config ( True , False , False ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_setup_room_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . set_up_room_by_id ( [number] , [number] , [number] , [string] , [string] , [number] , [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_add_new_receptionist ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . add_new_receptionist ( [number] , [number] , [string] , [string] , [string] , [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_add_new_room ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . add_new_room ( [number] , [number] , [number] , [number] , [string] , [string] , [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_receptionists_by_hotel_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_receptionists_by_hotel_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_cost_by_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_cost_by_id ( [number] ) [EOL] assert result == expected [ [string] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_create_transaction_get_id ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [number] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . create_transaction_get_id ( { } ) [EOL] assert result == expected [ [string] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_insert_location_if_not_exists ( mock_connect ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . insert_location_if_not_exists ( [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_add_hotel ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . add_hotel ( [string] , [string] , [string] , [number] , [string] , [number] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_image_name_by_hotel_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_image_name_by_hotel_id ( { } ) [EOL] assert result == expected [ [string] ] [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_update_hotel_by_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] result = db . update_hotel_by_id ( [number] , [string] , [string] , [string] , [number] , [string] , [string] ) [EOL] assert result [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_hotel_and_address_by_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [string] : [string] , [string] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_hotel_and_address_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_add_booking ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . add_booking ( { } ) [EOL] [EOL] [EOL] def create_search_form ( is_bathroom = True , is_tv = True , is_wifi = True , is_bathhub = True , is_airconditioniring = True ) : [EOL] return { [string] : is_bathroom , [string] : is_tv , [string] : is_wifi , [string] : is_bathhub , [string] : is_airconditioniring , [string] : [number] } [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_search_get_rooms ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . search_get_rooms ( create_search_form ( ) ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_add_customer ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . add_customer ( [number] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_update_customer ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . update_customer ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_update_hotel_admin ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . update_hotel_admin ( [number] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_update_admin ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . update_admin ( [number] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_search_hotel_by_form ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . search_hotels_by_form ( create_search_form ( ) ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_user_by_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = { [number] : [string] } [EOL] mock_connect ( ) . cursor . return_value . fetchone . return_value = expected [EOL] result = db . get_user_by_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_delete_hotel_by_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] db . remove_hotel_by_id ( [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) @ mock . patch ( [string] ) def test_get_hotels_by_admin_id ( mock_connect ) : [EOL] with allure . step ( [string] ) : [EOL] with app . app_context ( ) : [EOL] db = AndrewDB ( ) [EOL] expected = [ [string] , [string] ] [EOL] mock_connect ( ) . cursor . return_value . fetchall . return_value = expected [EOL] result = db . get_hotels_by_admin_id ( [number] ) [EOL] assert result == expected [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_searchOp ( ) : [EOL] [docstring] [EOL] [EOL] with allure . step ( [string] ) : [EOL] query = searchOp ( { } ) [EOL] assert ( len ( query ) == [number] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] query = searchOp ( create_search_form ( ) ) [EOL] assert ( len ( query ) != [number] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] query = searchOp ( { [string] : False } ) [EOL] assert ( len ( query ) == [number] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] query = searchOp ( create_search_form ( ) ) [EOL] assert ( query == [string] [string] [string] [string] [string] ) [EOL]	
	0
from typing import Any [EOL] import typing [EOL] import app [EOL] import allure [EOL] from app . models import User , AnonymousUser , Customer , HotelAdmin [EOL] [EOL] user_id = [string] [EOL] email = [string] [EOL] password = [string] [EOL] [EOL] [EOL] def create_user ( role = [string] ) : [EOL] return User ( user_id , email , password , role ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_user_init ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . get_id ( ) == user_id ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . email == email ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . password == password ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_user_status ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_active ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_authenticated ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_anonymous ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . get_id ( ) is not None ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_anonymous_user_status ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = AnonymousUser ( ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_active ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_authenticated ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_anonymous ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . get_id ( ) is None ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_customer_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_hotel_admin_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_admin_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_receptionist_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_broken_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_anonymous_user_role ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] user = create_user ( ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_customer ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_hotel_admin ( ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( not user . is_receptionist ( ) ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_customer ( ) : [EOL] [docstring] [EOL] first_name = [string] [EOL] last_name = [string] [EOL] email = [string] [EOL] phone_number = [string] [EOL] payment_info = [string] [EOL] [EOL] with allure . step ( [string] ) : [EOL] customer = Customer ( first_name , last_name , email , phone_number , payment_info ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( customer . first_name == first_name ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( customer . last_name == last_name ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( customer . email == email ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( customer . phone_number == phone_number ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( customer . payment_info == payment_info ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_hotel_admin ( ) : [EOL] [docstring] [EOL] first_name = [string] [EOL] last_name = [string] [EOL] email = [string] [EOL] phone_number = [string] [EOL] [EOL] with allure . step ( [string] ) : [EOL] admin = HotelAdmin ( first_name , last_name , email , phone_number ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( admin . first_name == first_name ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( admin . last_name == last_name ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( admin . email == email ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( admin . phone_number == phone_number ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import allure [EOL] from app import bcrypt [EOL] from app . views import imgName , reverseDate , check_password [EOL] from time import time [EOL] [EOL] @ allure . feature ( [string] ) def test_check_password ( ) : [EOL] [docstring] [EOL] [EOL] password = [string] [EOL] hash = bcrypt . generate_password_hash ( password ) . decode ( [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( check_password ( hash , password ) is True ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( check_password ( hash , [string] ) is False ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] failed = False [EOL] try : [EOL] check_password ( [string] , password ) [EOL] except : [EOL] failed = True [EOL] assert ( failed is True ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] failed = False [EOL] try : [EOL] check_password ( [string] , [string] ) [EOL] except : [EOL] failed = True [EOL] assert ( failed is True ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_img_name ( ) : [EOL] [docstring] [EOL] [EOL] def check_extension ( original , output ) : [EOL] orig_ext = original . rsplit ( [string] , [number] ) [ [number] ] [EOL] out_ext = output . rsplit ( [string] , [number] ) [ [number] ] [EOL] [EOL] if orig_ext != out_ext : [EOL] print ( [string] ) [EOL] [EOL] return orig_ext == out_ext [EOL] [EOL] def get_time ( output ) : [EOL] return output . rsplit ( [string] , [number] ) [ [number] ] [EOL] [EOL] img_name = [string] [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( check_extension ( img_name , imgName ( img_name ) ) ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( imgName ( [string] ) is not None ) [EOL] assert ( imgName ( [string] ) is not None ) [EOL] assert ( imgName ( [string] ) is not None ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( imgName ( [string] ) is None ) [EOL] assert ( imgName ( [string] ) is None ) [EOL] assert ( imgName ( [string] ) is None ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] output = imgName ( img_name ) [EOL] now = time ( ) [EOL] output_time = float ( get_time ( output ) ) [EOL] assert ( output_time < now ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] output = imgName ( img_name ) [EOL] now = time ( ) [EOL] output_time = float ( get_time ( output ) ) [EOL] assert ( now - output_time < [number] ) [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_reverse_date ( ) : [EOL] [docstring] [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( reverseDate ( [string] ) == [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( reverseDate ( [string] ) == [string] ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( reverseDate ( [string] ) == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import allure [EOL] [EOL] [EOL] def test_foo ( ) : [EOL] with allure . step ( [string] ) : [EOL] assert ( True == True ) [EOL] [EOL] with allure . step ( [string] ) : [EOL] assert ( False == False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from selenium import webdriver [EOL] [EOL] [EOL] chrome_options = webdriver . ChromeOptions ( ) [EOL] chrome_options . add_argument ( [string] ) [EOL] chrome_options . add_argument ( [string] ) [EOL] chrome_options . add_argument ( [string] ) [EOL] [EOL] @ pytest . yield_fixture ( ) def browser ( request ) : [EOL] driver = webdriver . Chrome ( chrome_options = chrome_options ) [EOL] yield driver [EOL] driver . quit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import time [EOL] import allure [EOL] from time import sleep [EOL] [EOL] @ allure . feature ( [string] ) def test_register ( browser ) : [EOL] [docstring] [EOL] driver = browser [EOL] [EOL] with allure . step ( [string] ) : [EOL] login_and_pass = str ( int ( time . time ( ) ) ) [EOL] [EOL] driver . get ( [string] ) [EOL] driver . implicitly_wait ( [number] ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] driver . implicitly_wait ( [number] ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( login_and_pass ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( login_and_pass ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( f"{ login_and_pass } [string] " ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( login_and_pass ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( login_and_pass ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( login_and_pass ) [EOL] driver . find_element_by_xpath ( [string] ) . click ( ) [EOL] assert (True) [EOL] [EOL] with allure . step ( [string] ) : [EOL] driver . get ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] driver . implicitly_wait ( [number] ) [EOL] [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . find_element_by_id ( [string] ) . clear ( ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( [string] ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( [string] ) [EOL] driver . find_element_by_id ( [string] ) . send_keys ( [string] ) [EOL] driver . find_element_by_xpath ( [string] ) . click ( ) [EOL] driver . implicitly_wait ( [number] ) [EOL] driver . find_element_by_id ( [string] ) . click ( ) [EOL] driver . implicitly_wait ( [number] ) [EOL] driver . find_element_by_xpath ( [string] ) . click ( ) [EOL] sleep ( [number] ) [EOL] driver . find_element_by_xpath ( [string] ) . click ( ) [EOL] assert (True) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any , Union [EOL] import flask [EOL] import typing [EOL] import requests [EOL] import time [EOL] [EOL] import allure [EOL] import requests [EOL] [EOL] from app import app [EOL] [EOL] url = [string] [EOL] OK = [number] [EOL] FOUND = [number] [EOL] NOT_FOUND = [number] [EOL] NOT_ALLOWED = [number] [EOL] ERROR = [number] [EOL] req_session = requests . Session ( ) [EOL] client = app . test_client ( ) [EOL] owner = app . test_client ( ) [EOL] [EOL] curr_time = str ( int ( time . time ( ) ) ) [EOL] registration_data = { [string] : curr_time , [string] : curr_time , [string] : curr_time + [string] , [string] : curr_time , [string] : curr_time , [string] : curr_time } [EOL] registration_data_broken_pass = { [string] : curr_time , [string] : curr_time , [string] : curr_time + [string] , [string] : curr_time , [string] : [string] , [string] : curr_time } [EOL] registration_data_broken_email = { [string] : curr_time , [string] : curr_time , [string] : curr_time , [string] : curr_time , [string] : curr_time , [string] : curr_time } [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_registration ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] register_url = f'{ url } [string] ' [EOL] req = client . post ( register_url , data = registration_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . post ( register_url , data = registration_data_broken_pass ) [EOL] assert req . status_code == OK [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . post ( register_url , data = registration_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . post ( register_url , data = { } ) [EOL] assert req . status_code == OK [EOL] assert req . location is None [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . post ( register_url , data = { [string] : curr_time } ) [EOL] assert req . status_code == OK [EOL] assert req . location is None [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . post ( register_url , data = registration_data_broken_email ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] logout_url = f'{ url } [string] ' [EOL] req = client . post ( logout_url , data = registration_data ) [EOL] assert req . status_code == NOT_ALLOWED [EOL] [EOL] with allure . step ( [string] ) : [EOL] login_url = f'{ url } [string] ' [EOL] req = client . post ( login_url , data = registration_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_index_accessibility ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] assert req_session . get ( f'{ url }' ) . status_code == OK [EOL] assert req_session . get ( f'{ url } [string] ' ) . status_code == OK [EOL] assert req_session . get ( f'{ url } [string] ' ) . status_code == OK [EOL] with allure . step ( [string] ) : [EOL] assert req_session . get ( f'{ url } [string] ' ) . status_code == NOT_FOUND [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_hotel_searching ( ) : [EOL] [docstring] [EOL] request_data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] with allure . step ( [string] ) : [EOL] search_url = f'{ url } [string] ' [EOL] req = client . post ( search_url , data = request_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] search_url = f'{ url } [string] ' [EOL] hotel_id_data = { [string] : [string] } [EOL] req = client . post ( search_url , data = hotel_id_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = client . get ( search_url ) [EOL] assert req . status_code == OK [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( search_url , data = { } ) [EOL] assert req . status_code == ERROR [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_more_info ( ) : [EOL] [docstring] [EOL] request_data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] } [EOL] [EOL] with allure . step ( [string] ) : [EOL] search_url = f'{ url } [string] ' [EOL] req = client . post ( search_url , data = request_data ) [EOL] assert req . status_code >= FOUND [EOL] [EOL] with allure . step ( [string] ) : [EOL] search_url = f'{ url } [string] ' [EOL] hotel_id_data = { [string] : [string] } [EOL] req = client . post ( search_url , data = hotel_id_data ) [EOL] assert req . status_code >= FOUND [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( search_url , data = { } ) [EOL] assert req . status_code == NOT_FOUND [EOL] [EOL] [EOL] curr_time = str ( int ( time . time ( ) ) ) [EOL] owner_data = { [string] : curr_time , [string] : curr_time , [string] : curr_time + [string] , [string] : curr_time , [string] : curr_time , [string] : curr_time } [EOL] owner_data_broken_pass = { [string] : curr_time , [string] : curr_time , [string] : curr_time + [string] , [string] : curr_time , [string] : [string] , [string] : curr_time } [EOL] owner_data_existing_email = { [string] : curr_time , [string] : curr_time , [string] : curr_time + [string] , [string] : curr_time , [string] : curr_time , [string] : curr_time } [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_add_property ( ) : [EOL] [docstring] [EOL] url_link = f'{ url } [string] ' [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( url_link , data = owner_data_broken_pass ) [EOL] assert req . status_code == OK [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( url_link , data = owner_data_existing_email ) [EOL] assert req . status_code == FOUND [EOL] [comment] [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( url_link , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( url_link , data = registration_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( url_link , data = { } ) [EOL] assert req . status_code == OK [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_get_profile ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] profile_url = f'{ url } [string] ' [EOL] req = owner . get ( profile_url , data = owner_data ) [EOL] assert req . status_code == OK [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( profile_url , data = { } ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_update_profile ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] profile_url = f'{ url } [string] ' [EOL] req = owner . post ( profile_url , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( profile_url , data = { } ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_my_hotels ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] hotel_url = f'{ url } [string] ' [EOL] req = owner . post ( hotel_url , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] hotel_url = f'{ url } [string] ' [EOL] req = owner . get ( hotel_url , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( hotel_url , data = { } ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_add_hotel ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] add_hotel_url = f'{ url } [string] ' [EOL] req = owner . post ( add_hotel_url , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( add_hotel_url , data = { } ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_edit_hotel ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] edit_hotel_url = f'{ url } [string] ' [EOL] req = owner . post ( edit_hotel_url , data = owner_data ) [EOL] assert req . status_code == NOT_FOUND [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( edit_hotel_url , data = { } ) [EOL] assert req . status_code == NOT_FOUND [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_manage_hotel ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] manage_hotel_url = f'{ url } [string] ' [EOL] req = owner . post ( manage_hotel_url , data = owner_data ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( manage_hotel_url , data = { } ) [EOL] assert req . status_code == FOUND [EOL] assert [string] in req . location [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_my_booking ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] my_booking_url = f'{ url } [string] ' [EOL] req = owner . post ( my_booking_url , data = owner_data ) [EOL] assert req . status_code == OK [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( my_booking_url , data = { } ) [EOL] assert req . status_code == OK [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_manage_booking ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] manage_booking_url = f'{ url } [string] ' [EOL] req = owner . post ( manage_booking_url , data = owner_data ) [EOL] assert req . status_code == ERROR [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( manage_booking_url , data = { } ) [EOL] assert req . status_code == ERROR [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_new_booking ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] new_booking_url = f'{ url } [string] ' [EOL] req = owner . post ( new_booking_url , data = registration_data ) [EOL] assert req . status_code == ERROR [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( new_booking_url , data = { } ) [EOL] assert req . status_code == ERROR [EOL] [EOL] [EOL] @ allure . feature ( [string] ) def test_admin ( ) : [EOL] [docstring] [EOL] with allure . step ( [string] ) : [EOL] admin_panel_url = f'{ url } [string] ' [EOL] req = owner . post ( admin_panel_url , data = owner_data ) [EOL] assert req . status_code == ERROR [EOL] [EOL] with allure . step ( [string] ) : [EOL] req = owner . post ( admin_panel_url , data = { } ) [EOL] assert req . status_code == ERROR [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $requests.sessions.Session$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $requests.sessions.Session$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient[flask.wrappers.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0