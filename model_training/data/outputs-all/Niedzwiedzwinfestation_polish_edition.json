from typing import Any , Iterable , Dict [EOL] import typing [EOL] import builtins [EOL] import typing as t [EOL] from json import loads , dumps [EOL] from itertools import groupby [EOL] [EOL] [EOL] def _get_response ( ) : [EOL] with open ( [string] ) as f : [EOL] [EOL] return f . read ( ) [EOL] [EOL] [EOL] def _save_response ( data ) : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( dumps ( data ) ) [EOL] [EOL] [EOL] def by_sickness ( values ) : [EOL] return { k : v for k , v in ( ( v [ [string] ] , v [ [string] ] ) for v in values ) } [EOL] [EOL] [EOL] def sicknesses_by_date ( entries ) : [EOL] all_sicknesses = { e [ [string] ] : [number] for e in entries } [EOL] return { k : { ** all_sicknesses , ** by_sickness ( v ) } for k , v in groupby ( entries , key = lambda x : x [ [string] ] ) } [EOL] [EOL] [EOL] def main ( ) : [EOL] data = loads ( _get_response ( ) ) [EOL] formatted = sicknesses_by_date ( data ) [EOL] _save_response ( formatted ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Iterable , List [EOL] import typing [EOL] import builtins [EOL] import typing as t [EOL] [EOL] [EOL] def stripped ( rows ) : [EOL] return [ [ col for col in row if col . strip ( ) ] for row in rows ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterable , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , Any , Iterable [EOL] [EOL] from os import listdir [EOL] from requests import post [EOL] import grequests [EOL] from grequests import post , map [EOL] from json import dumps [EOL] [EOL] [EOL] GOOGLE_URL = [string] [EOL] [EOL] [EOL] def exception_handler ( request , exception ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def get_token ( ) : [EOL] with open ( [string] ) as f : [EOL] return f . read ( ) . strip ( ) [EOL] [EOL] [EOL] def auth_headers ( token ) : [EOL] return { [string] : f' [string] { token }' , [string] : [string] } [EOL] [EOL] [EOL] def storage_file_path ( filename ) : [EOL] return f' [string] { filename }' [EOL] [EOL] [EOL] def annotate_file_request ( filename ) : [EOL] return { [string] : [ { [string] : { [string] : { [string] : storage_file_path ( filename ) } , [string] : [string] } , [string] : [ { [string] : [string] } ] , } ] } [EOL] [EOL] [EOL] def extract_file_text ( filename ) : [EOL] response = post ( GOOGLE_URL , data = dumps ( annotate_file_request ( filename ) ) , headers = auth_headers ( get_token ( ) ) , ) [EOL] [EOL] return response . json ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] files = listdir ( [string] ) [EOL] [EOL] print ( auth_headers ( get_token ( ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for file in files : [EOL] basename , extension = file . rsplit ( [string] , [number] ) [EOL] outpath = f' [string] { basename } [string] ' [EOL] [EOL] data = extract_file_text ( file ) [EOL] [EOL] with open ( outpath , [string] ) as f : [EOL] f . write ( dumps ( data , indent = [number] ) ) [EOL] [EOL] print ( f'{ file } [string] { outpath } [string] ' ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0