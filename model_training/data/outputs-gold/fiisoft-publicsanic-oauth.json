[comment] [EOL] [EOL] from os import path as op [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] def _read ( fname ) : [EOL] try : [EOL] return open ( op . join ( op . dirname ( __file__ ) , fname ) ) . read ( ) [EOL] except IOError : [EOL] return [string] [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , license = [string] , long_description = _read ( [string] ) , keywords = [ [string] , [string] , [string] , [string] ] , author = [string] , packages = find_packages ( ) , author_email = [string] , url = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , install_requires = [ [string] , [string] , [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . import base_test [EOL]	0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sanic_oauth [EOL] from aiohttp import ClientSession [EOL] from aiohttp . web import HTTPBadRequest [EOL] import pytest [EOL] [EOL] from sanic_oauth . providers import TwitterClient , GithubClient [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . skip async def test_oauth1 ( ) : [EOL] async with ClientSession ( ) as session : [EOL] twitter = TwitterClient ( session , consumer_key = [string] , consumer_secret = [string] , ) [EOL] assert twitter [EOL] [EOL] rtoken , rsecret , _ = await twitter . get_request_token ( oauth_callback = [string] ) [EOL] assert rtoken [EOL] assert rsecret [EOL] assert twitter . oauth_token == rtoken [EOL] assert twitter . oauth_token_secret == rsecret [EOL] [EOL] url = twitter . get_authorize_url ( ) [EOL] assert url == [string] % rtoken [EOL] [EOL] with pytest . raises ( HTTPBadRequest ) : [EOL] await twitter . get_access_token ( [string] , rtoken ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_oauth2 ( ) : [EOL] async with ClientSession ( ) as session : [EOL] github = GithubClient ( session , client_id = [string] , client_secret = [string] , ) [EOL] assert github [EOL] [EOL] assert github . get_authorize_url ( ) [EOL] with pytest . raises ( HTTPBadRequest ) : [EOL] await github . get_access_token ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sanic [EOL] import aiohttp [EOL] from collections import defaultdict [EOL] from sanic import Sanic [EOL] from sanic . request import Request [EOL] from sanic . response import text , HTTPResponse , html [EOL] from sanic_session import InMemorySessionInterface [EOL] from sanic_oauth . blueprint import oauth_blueprint , login_required [EOL] [EOL] app = Sanic ( [string] ) [EOL] app . blueprint ( oauth_blueprint ) [EOL] app . session_interface = InMemorySessionInterface ( ) [EOL] [EOL] app . config . OAUTH_REDIRECT_URI = [string] [EOL] app . config . OAUTH_SCOPE = [string] [EOL] app . config . OAUTH_PROVIDERS = defaultdict ( dict ) [EOL] DISCORD_PROVIDER = app . config . OAUTH_PROVIDERS [ [string] ] [EOL] DISCORD_PROVIDER [ [string] ] = [string] [EOL] DISCORD_PROVIDER [ [string] ] = [string] [EOL] DISCORD_PROVIDER [ [string] ] = [string] [EOL] DISCORD_PROVIDER [ [string] ] = [string] [EOL] GITLAB_PROVIDER = app . config . OAUTH_PROVIDERS [ [string] ] [EOL] GITLAB_PROVIDER [ [string] ] = [string] [EOL] GITLAB_PROVIDER [ [string] ] = [string] [EOL] GITLAB_PROVIDER [ [string] ] = [string] [EOL] GITLAB_PROVIDER [ [string] ] = [string] [EOL] app . config . OAUTH_PROVIDERS [ [string] ] = DISCORD_PROVIDER [EOL] [EOL] @ app . listener ( [string] ) async def init_aiohttp_session ( sanic_app , _loop ) : [EOL] sanic_app . async_session = aiohttp . ClientSession ( ) [EOL] [EOL] [EOL] @ app . listener ( [string] ) async def close_aiohttp_session ( sanic_app , _loop ) : [EOL] await sanic_app . async_session . close ( ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def add_session_to_request ( request ) : [EOL] [comment] [EOL] [comment] [EOL] await request . app . session_interface . open ( request ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def save_session ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] await request . app . session_interface . save ( request , response ) [EOL] [EOL] [EOL] @ app . route ( [string] ) async def main_page ( _request ) : [EOL] return html ( [string] ) [EOL] [EOL] @ app . route ( [string] ) @ login_required async def index ( _request , user ) : [EOL] return text ( [string] ) [EOL] [EOL] @ app . route ( [string] ) @ login_required ( provider = [string] ) async def index ( _request , user ) : [EOL] return text ( [string] ) [EOL] [EOL] @ app . route ( [string] ) @ login_required ( provider = [string] ) async def index ( _request , user ) : [EOL] return text ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sanic [EOL] import aiohttp [EOL] from sanic import Sanic [EOL] from sanic . request import Request [EOL] from sanic . response import text , HTTPResponse [EOL] from sanic_session import InMemorySessionInterface [EOL] from sanic_oauth . blueprint import oauth_blueprint , login_required [EOL] [EOL] app = Sanic ( [string] ) [EOL] app . blueprint ( oauth_blueprint ) [EOL] app . session_interface = InMemorySessionInterface ( ) [EOL] app . config . OAUTH_PROVIDER = [string] [EOL] app . config . OAUTH_REDIRECT_URI = [string] [EOL] app . config . OAUTH_SCOPE = [string] [EOL] app . config . OAUTH_CLIENT_ID = [string] [EOL] app . config . OAUTH_CLIENT_SECRET = [string] [EOL] [EOL] [EOL] @ app . listener ( [string] ) async def init_aiohttp_session ( sanic_app , _loop ) : [EOL] sanic_app . async_session = aiohttp . ClientSession ( ) [EOL] [EOL] [EOL] @ app . listener ( [string] ) async def close_aiohttp_session ( sanic_app , _loop ) : [EOL] await sanic_app . async_session . close ( ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def add_session_to_request ( request ) : [EOL] [comment] [EOL] [comment] [EOL] await request . app . session_interface . open ( request ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def save_session ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] await request . app . session_interface . save ( request , response ) [EOL] [EOL] [EOL] @ app . route ( [string] ) @ login_required async def index ( _request , user ) : [EOL] return text ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( port = [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sanic_oauth [EOL] import aiohttp [EOL] from sanic import Sanic [EOL] from sanic . response import redirect , text [EOL] [EOL] from sanic_oauth . providers import UserInfo , GoogleClient [EOL] from sanic_session import InMemorySessionInterface [EOL] from sanic . log import error_logger [EOL] [EOL] app = Sanic ( [string] ) [EOL] [EOL] session_interface = InMemorySessionInterface ( ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def add_session_to_request ( request ) : [EOL] [comment] [EOL] [comment] [EOL] await session_interface . open ( request ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def save_session ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] await session_interface . save ( request , response ) [EOL] [EOL] [EOL] @ app . listener ( [string] ) async def init_aiohttp_session ( sanic_app , _loop ) : [EOL] sanic_app . async_session = aiohttp . ClientSession ( ) [EOL] [EOL] [EOL] @ app . listener ( [string] ) async def close_aiohttp_session ( sanic_app , _loop ) : [EOL] await sanic_app . async_session . close ( ) [EOL] [EOL] [EOL] class cfg : [EOL] oauth_redirect_path = [string] [comment] [EOL] redirect_uri = [string] [comment] [EOL] [EOL] [comment] [EOL] client_id = [string] [EOL] client_secret = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] secret_key = [string] [EOL] [EOL] [EOL] async def oauth ( request ) : [EOL] client = GoogleClient ( request . app . async_session , client_id = cfg . client_id , client_secret = cfg . client_secret ) [EOL] if [string] not in request . args : [EOL] return redirect ( client . get_authorize_url ( scope = [string] , redirect_uri = cfg . redirect_uri ) ) [EOL] token , data = await client . get_access_token ( request . args . get ( [string] ) , redirect_uri = cfg . redirect_uri ) [EOL] request [ [string] ] [ [string] ] = token [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def login_required ( fn ) : [EOL] [docstring] [EOL] [EOL] async def wrapped ( request , ** kwargs ) : [EOL] [EOL] if [string] not in request [ [string] ] : [EOL] return redirect ( cfg . oauth_redirect_path ) [EOL] [EOL] client = GoogleClient ( request . app . async_session , client_id = cfg . client_id , client_secret = cfg . client_secret , access_token = request [ [string] ] [ [string] ] ) [EOL] [EOL] try : [EOL] user , info = await client . user_info ( ) [EOL] except Exception as exc : [EOL] error_logger . exception ( exc ) [EOL] return redirect ( cfg . oauth_redirect_path ) [EOL] [EOL] return await fn ( request , user , ** kwargs ) [EOL] [EOL] return wrapped [EOL] [EOL] [EOL] @ app . route ( [string] ) @ login_required async def index ( request , user ) : [EOL] return text ( user . email ) [EOL] [EOL] app . add_route ( oauth , cfg . oauth_redirect_path ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __credits__ = [ [string] ] [EOL] __license__ = [string] [EOL] __version__ = [string] [EOL] __maintainer__ = [string] [EOL] __email__ = [string] [EOL] __status__ = [string] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
SES_SESSION_NAME = [string] [EOL] SES_COOKIE_NAME = [string] [EOL] SES_ACCESS_TOKEN_FIELD = [string] [EOL] SES_REFRESH_TOKEN_FIELD = [string] [EOL] SES_USER_INFO_FIELD = [string] [EOL] SES_OAUTH_PROVIDER_FIELD = [string] [EOL] SES_AFTER_AUTH_REDIR_FIELD = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0