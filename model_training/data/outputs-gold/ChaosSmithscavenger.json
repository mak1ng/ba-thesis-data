from aiohttp import web [EOL] [EOL] from app import create_app [EOL] [EOL] app = create_app ( ) [EOL] web . run_app ( app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import aiohttp [EOL] import builtins [EOL] import typing [EOL] from random import randrange [EOL] from aiohttp import web [EOL] from typing import List [EOL] [EOL] from routes import routes [EOL] [EOL] [EOL] def generate_grid ( size , obstacles ) : [EOL] obstacle_list = [ ( randrange ( [number] , size ) , randrange ( [number] , size ) ) for _ in range ( obstacles ) ] [EOL] return [ [ ( x , y ) in obstacle_list for y in range ( size ) ] for x in range ( size ) ] [EOL] [EOL] [EOL] def generate_treasure ( size , obstacles ) : [EOL] obstacle_list = [ ( randrange ( [number] , size ) , randrange ( [number] , size ) ) for _ in range ( obstacles ) ] [EOL] return obstacle_list [EOL] [EOL] [EOL] def create_app ( ) : [EOL] app = web . Application ( ) [EOL] app [ [string] ] = generate_treasure ( [number] , [number] ) [EOL] app [ [string] ] = [ ] [EOL] for route in routes : [EOL] getattr ( app . router , f" [string] { route [ [string] ] }" ) ( route [ [string] ] , route [ [string] ] ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] import pytest [EOL] from aiohttp import web [EOL] [EOL] from app import create_app [EOL] [EOL] [EOL] @ pytest . fixture def client ( loop , aiohttp_client ) : [EOL] app = create_app ( ) [EOL] return loop . run_until_complete ( aiohttp_client ( app ) ) [EOL] [EOL] [EOL] async def test_400_missing_name ( client ) : [EOL] resp = await client . post ( [string] , json = { [string] : [string] } ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] async def test_400_missing_token ( client ) : [EOL] resp = await client . post ( [string] , json = { [string] : [string] } ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] async def test_connect_player_1 ( client ) : [EOL] resp = await client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] assert resp . status == [number] [EOL] assert json . loads ( await resp . read ( ) ) == { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [ [number] , [number] ] , } [EOL] [EOL] [EOL] async def test_connect_player_2 ( client ) : [EOL] resp = await client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] assert resp . status == [number] [EOL] assert json . loads ( await resp . read ( ) ) == { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [ [number] , [number] ] , } [EOL] [EOL] [EOL] async def test_400_on_repeat_name ( client ) : [EOL] resp = await client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] assert resp . status == [number] [EOL] resp = await client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] assert resp . status == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import routes [EOL] import aiohttp [EOL] import json [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def map_handler ( request ) : [EOL] parsed_grid = json . dumps ( request . app [ [string] ] ) [EOL] return web . Response ( text = parsed_grid ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : map_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import aiohttp [EOL] import routes [EOL] import typing [EOL] import json [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def connect_handler ( request ) : [EOL] data = await request . json ( ) [EOL] request_keys = data . keys ( ) [EOL] if [string] not in request_keys : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] if [string] not in request_keys : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] if data [ [string] ] in [ player [ [string] ] for player in request . app [ [string] ] ] : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] [EOL] player = { [string] : data [ [string] ] , [string] : data [ [string] ] , [string] : [number] , [string] : ( [number] , [number] ) , } [EOL] [EOL] request . app [ [string] ] . append ( player ) [EOL] return web . Response ( text = json . dumps ( player ) ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : connect_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from mypy_extensions import TypedDict [EOL] from typing import Callable , Coroutine , Any [EOL] [EOL] from aiohttp import web [EOL] [EOL] [EOL] Route = TypedDict ( [string] , { [string] : str , [string] : str , [string] : Callable [ [ web . Request ] , Coroutine [ Any , Any , web . Response ] ] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import aiohttp [EOL] import routes [EOL] import typing [EOL] import json [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def move_handler ( request ) : [EOL] data = await request . json ( ) [EOL] request_keys = data . keys ( ) [EOL] if [string] not in request_keys : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] if [string] not in request_keys : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] [EOL] player = next ( ( p for p in request . app [ [string] ] if p [ [string] ] == data [ [string] ] ) , None ) [EOL] if not player : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] [EOL] i = request . app [ [string] ] . index ( player ) [EOL] [EOL] c_pos = request . app [ [string] ] [ i ] [ [string] ] [EOL] if data [ [string] ] == [string] : [EOL] new_position = ( c_pos [ [number] ] + [number] , c_pos [ [number] ] ) [EOL] elif data [ [string] ] == [string] : [EOL] new_position = ( c_pos [ [number] ] - [number] , c_pos [ [number] ] ) [EOL] elif data [ [string] ] == [string] : [EOL] new_position = ( c_pos [ [number] ] , c_pos [ [number] ] - [number] ) [EOL] elif data [ [string] ] == [string] : [EOL] new_position = ( c_pos [ [number] ] , c_pos [ [number] ] + [number] ) [EOL] else : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] [EOL] player [ [string] ] = new_position [EOL] [EOL] treasure = next ( ( t for t in request . app [ [string] ] if t == new_position ) , None ) [EOL] [EOL] if treasure : [EOL] t_i = request . app [ [string] ] . index ( treasure ) [EOL] request . app [ [string] ] . pop ( t_i ) [EOL] player [ [string] ] = player [ [string] ] + [number] [EOL] [EOL] request . app [ [string] ] [ i ] = player [EOL] return web . Response ( text = json . dumps ( player ) ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : move_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import routes [EOL] import aiohttp [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def root_handler ( request ) : [EOL] return web . Response ( text = [string] ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : root_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import aiohttp [EOL] import routes [EOL] import typing [EOL] import json [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def player_handler ( request ) : [EOL] name = request . match_info [ [string] ] [EOL] if not name : [EOL] return web . HTTPBadRequest ( text = [string] ) [EOL] [EOL] player = next ( ( p for p in request . app [ [string] ] if name == p [ [string] ] ) , None ) [EOL] [EOL] if not player : [EOL] return web . HTTPBadRequest ( text = f" [string] { name } [string] " ) [EOL] [EOL] return web . Response ( text = json . dumps ( player ) ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : player_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import routes [EOL] import aiohttp [EOL] import json [EOL] from aiohttp import web [EOL] [EOL] from routes . types import Route [EOL] [EOL] [EOL] async def treasure_handler ( request ) : [EOL] return web . Response ( text = json . dumps ( request . app [ [string] ] ) ) [EOL] [EOL] [EOL] route = { [string] : [string] , [string] : [string] , [string] : treasure_handler } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $routes.types.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0