import sys [EOL] import http_firewall [EOL] from os import path [EOL] from setuptools import setup , find_packages [EOL] from setuptools . command . develop import develop [EOL] [comment] [EOL] from subprocess import check_call , CalledProcessError [EOL] [EOL] pwd = path . abspath ( path . dirname ( __file__ ) ) [EOL] [EOL] [comment] [EOL] with open ( path . join ( pwd , [string] ) , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] [EOL] class LintCommand ( develop ) : [EOL] [docstring] [EOL] def run ( self ) : [EOL] try : [EOL] check_call ( [string] . split ( ) ) [EOL] except CalledProcessError as err : [EOL] if [string] in str ( err ) : [EOL] print ( [string] , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class TestCommand ( develop ) : [EOL] [docstring] [EOL] def run ( self ) : [EOL] try : [EOL] check_call ( [ [string] ] ) [EOL] except CalledProcessError as err : [EOL] if [string] in str ( err ) : [EOL] print ( [string] , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def requirements_to_list ( filename ) : [EOL] return [ dep for dep in open ( path . join ( pwd , filename ) ) . read ( ) . split ( [string] ) if ( dep and not dep . startswith ( [string] ) ) ] [EOL] [EOL] [EOL] setup ( name = [string] , version = http_firewall . __version__ , description = [string] , long_description = long_description , long_description_content_type = [string] , url = [string] , author = http_firewall . __author__ , author_email = http_firewall . __email__ , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , keywords = [string] , packages = find_packages ( exclude = [ [string] , [string] , [string] , [string] ] ) , install_requires = requirements_to_list ( [string] ) , extras_require = { [string] : requirements_to_list ( [string] ) , [string] : requirements_to_list ( [string] ) , } , entry_points = { [string] : [ [string] , ] , } , package_data = { [string] : [ [string] , [string] , [string] , [string] , [string] , ] , } , cmdclass = { [string] : LintCommand , [string] : TestCommand , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Any , List [EOL] import pathlib [EOL] import builtins [EOL] import typing [EOL] import miracle [EOL] import yaml [EOL] from typing import Optional , Any , Dict [EOL] from pathlib import Path [EOL] from miracle import Acl [EOL] from . logging import get_logger [EOL] [EOL] ALLOW = [string] [EOL] [EOL] log = get_logger ( __name__ ) [EOL] acl = None [EOL] config_cache = None [EOL] [EOL] [EOL] def load_config_file ( config_file ) : [EOL] [docstring] [EOL] global config_cache [EOL] [EOL] conf_path = Path ( config_file ) . expanduser ( ) . resolve ( ) [EOL] [EOL] config_cache = None [EOL] [EOL] with conf_path . open ( ) as _file : [EOL] config_cache = yaml . load ( _file . read ( ) ) [EOL] [EOL] if not isinstance ( config_cache , dict ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] log . debug ( [string] . format ( conf_path ) ) [EOL] [EOL] return config_cache [EOL] [EOL] [EOL] def build_acl ( config ) : [EOL] [docstring] [EOL] global acl [EOL] acl = Acl ( ) [EOL] [EOL] log . debug ( [string] ) [EOL] [EOL] if [string] in config : [EOL] assert isinstance ( config [ [string] ] , dict ) , [string] [EOL] acl . add_roles ( config [ [string] ] . keys ( ) ) [EOL] for k , v in config [ [string] ] . items ( ) : [EOL] log . debug ( [string] . format ( k ) ) [EOL] acl . add_role ( k ) [EOL] if len ( v ) > [number] : [EOL] for res in v : [EOL] log . debug ( [string] . format ( res ) ) [EOL] acl . add_resource ( res ) [EOL] [EOL] log . debug ( [string] ) [EOL] acl . add_permission ( res , ALLOW ) [EOL] [EOL] log . debug ( [string] . format ( k , res ) ) [EOL] acl . grant ( k , res , ALLOW ) [EOL] [EOL] return acl [EOL] [EOL] [EOL] def load_acl_config ( config_file ) : [EOL] [docstring] [EOL] global acl , config_cache [EOL] [EOL] if config_cache is None : [EOL] load_config_file ( config_file ) [EOL] [EOL] assert config_cache is not None , ( [string] ) [EOL] [EOL] if acl is None : [EOL] build_acl ( config_cache ) [EOL] [EOL] return acl [EOL] [EOL] [EOL] def check_allowed ( path , ip = None ) : [EOL] [docstring] [EOL] [EOL] log . debug ( [string] . format ( path , ip ) ) [EOL] [EOL] if config_cache is None or acl is None : [EOL] raise Exception ( [string] ) [EOL] [EOL] path_parts = path . split ( [string] ) [EOL] [EOL] [docstring] [EOL] for i in range ( [number] , len ( path_parts ) + [number] ) : [EOL] [EOL] path_partial = [string] . join ( path_parts [ : i ] ) [EOL] [EOL] if acl . check ( [string] , path_partial , ALLOW ) : [EOL] log . debug ( [string] . format ( path ) ) [EOL] return True [EOL] [EOL] if acl . check ( ip , path_partial , ALLOW ) : [EOL] log . debug ( [string] . format ( path , ip ) ) [EOL] return True [EOL] [EOL] log . info ( [string] . format ( path ) ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 $miracle.Acl$ 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 $miracle.Acl$ 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[miracle.Acl]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] __version__ = [string] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __license__ = [string] [EOL] __maintainer__ = __author__ [EOL] __email__ = [string] [EOL] __status__ = [string] [EOL]	0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
import logging [EOL] import logging [EOL] [EOL] parent_logger = logging . getLogger ( ) [EOL] console_handler = logging . StreamHandler ( ) [EOL] parent_logger . addHandler ( console_handler ) [EOL] [EOL] [EOL] def get_logger ( name ) : [EOL] [docstring] [EOL] return parent_logger . getChild ( name ) [EOL] [EOL] [EOL] def set_debug_logging ( logger = None ) : [EOL] [docstring] [EOL] parent_logger . setLevel ( logging . DEBUG ) [EOL] console_handler . setLevel ( logging . DEBUG ) [EOL] if logger : [EOL] logger . setLevel ( logging . DEBUG ) [EOL] [EOL] [EOL] def logging_shutdown ( ) : [EOL] return logging . shutdown ( ) [EOL]	0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . main import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import os [EOL] import pytest [EOL] from pathlib import Path [EOL] from contextlib import contextmanager [EOL] from datetime import datetime [EOL] [EOL] RECURSUION_MAX = [number] [EOL] TMP_DIR = Path ( [string] ) . joinpath ( [string] . format ( int ( datetime . now ( ) . timestamp ( ) ) ) ) [EOL] [EOL] [EOL] def delete_path_recursively ( pth , depth = [number] ) : [EOL] [docstring] [EOL] assert isinstance ( pth , Path ) [EOL] assert str ( pth ) . startswith ( [string] ) [comment] [EOL] if depth > RECURSUION_MAX : [EOL] raise Exception ( [string] ) [EOL] if not pth . exists ( ) : [EOL] return False [EOL] if pth . is_file ( ) or pth . is_symlink ( ) : [EOL] pth . unlink ( ) [EOL] elif pth . is_dir ( ) : [EOL] for child in pth . iterdir ( ) : [EOL] delete_path_recursively ( child , depth + [number] ) [EOL] pth . rmdir ( ) [EOL] else : [EOL] raise Exception ( [string] . format ( str ( pth ) ) ) [EOL] [EOL] [EOL] @ pytest . fixture def temp_dir ( ) : [EOL] @ contextmanager def yield_temp_dir ( tmpdir = TMP_DIR ) : [EOL] temp_dir = tmpdir . joinpath ( [string] . format ( datetime . now ( ) . timestamp ( ) ) ) [EOL] temp_dir . mkdir ( parents = True ) [EOL] original_pwd = Path . cwd ( ) [EOL] os . chdir ( temp_dir ) [EOL] yield temp_dir [EOL] os . chdir ( original_pwd ) [EOL] delete_path_recursively ( temp_dir ) [EOL] return yield_temp_dir [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
ACL_CONFIG_1 = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from http_firewall . acl import ( ALLOW , load_config_file , build_acl , load_acl_config , check_allowed , ) [EOL] from . const import ACL_CONFIG_1 [EOL] [EOL] [EOL] def test_acl_load_config ( temp_dir ) : [EOL] [docstring] [EOL] [EOL] with temp_dir ( ) as _tmpdir : [EOL] config_file = _tmpdir . joinpath ( [string] ) [EOL] [EOL] with config_file . open ( [string] ) as _file : [EOL] _file . write ( ACL_CONFIG_1 ) [EOL] [EOL] [comment] [EOL] loaded = load_config_file ( str ( config_file ) ) [EOL] assert isinstance ( loaded , dict ) [EOL] assert [string] in loaded [EOL] assert [string] in loaded [ [string] ] [EOL] assert [string] in loaded [ [string] ] [EOL] assert isinstance ( loaded [ [string] ] [ [string] ] , list ) [EOL] assert isinstance ( loaded [ [string] ] [ [string] ] , list ) [EOL] assert len ( loaded [ [string] ] [ [string] ] ) == [number] [EOL] assert len ( loaded [ [string] ] [ [string] ] ) == [number] [EOL] [EOL] [EOL] def test_acl_build_acl ( temp_dir ) : [EOL] [docstring] [EOL] [EOL] with temp_dir ( ) as _tmpdir : [EOL] config_file = _tmpdir . joinpath ( [string] ) [EOL] [EOL] with config_file . open ( [string] ) as _file : [EOL] _file . write ( ACL_CONFIG_1 ) [EOL] [EOL] [comment] [EOL] loaded = load_config_file ( str ( config_file ) ) [EOL] new_acl = build_acl ( loaded ) [EOL] [EOL] assert new_acl is not None [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] [EOL] [EOL] def test_acl_load_acl_config ( temp_dir ) : [EOL] [docstring] [EOL] [EOL] with temp_dir ( ) as _tmpdir : [EOL] config_file = _tmpdir . joinpath ( [string] ) [EOL] [EOL] with config_file . open ( [string] ) as _file : [EOL] _file . write ( ACL_CONFIG_1 ) [EOL] [EOL] [comment] [EOL] new_acl = load_acl_config ( str ( config_file ) ) [EOL] [EOL] assert new_acl is not None [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] assert not new_acl . check ( [string] , [string] , ALLOW ) [EOL] [EOL] [EOL] def test_acl_check_allowed ( temp_dir ) : [EOL] [docstring] [EOL] [EOL] with temp_dir ( ) as _tmpdir : [EOL] config_file = _tmpdir . joinpath ( [string] ) [EOL] [EOL] with config_file . open ( [string] ) as _file : [EOL] _file . write ( ACL_CONFIG_1 ) [EOL] [EOL] [comment] [EOL] load_acl_config ( str ( config_file ) ) [EOL] [EOL] assert check_allowed ( [string] ) [EOL] assert check_allowed ( [string] ) [EOL] assert check_allowed ( [string] , [string] ) [EOL] assert check_allowed ( [string] , [string] ) [EOL] assert not check_allowed ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0