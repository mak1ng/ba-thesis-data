from typing import Any [EOL] import typing [EOL] import WaveFieldVisualize [EOL] from vispy import gloo [EOL] from vispy import app [EOL] from vispy . gloo . util import _screenshot [EOL] from vispy . gloo . wrappers import read_pixels [EOL] import cv2 as cv [EOL] import numpy as np [EOL] [EOL] [EOL] vertex = [string] [EOL] [EOL] fragment = [string] [EOL] [EOL] vertex_bg = [string] [EOL] [EOL] fragment_bg = [string] [EOL] [EOL] [EOL] def gen_line_indices ( M , N ) : [EOL] kk = np . asarray ( range ( [number] , ( M - [number] ) * N ) ) . reshape ( M - [number] , N ) [EOL] [EOL] kk1 = kk [ : , [number] : - [number] ] [EOL] kk1 = kk1 . reshape ( kk1 . size ) [EOL] kk2 = kk1 + [number] [EOL] kk4 = kk1 + N + [number] [EOL] [EOL] kk123 = np . concatenate ( ( np . expand_dims ( kk1 , axis = [number] ) , np . expand_dims ( kk2 , axis = [number] ) , np . expand_dims ( kk2 , axis = [number] ) , np . expand_dims ( kk4 , axis = [number] ) ) , axis = [number] ) [EOL] return kk123 . flatten ( ) [EOL] [EOL] [EOL] def gen_triang_indices ( M , N ) : [EOL] kk = np . asarray ( range ( [number] , ( M - [number] ) * N ) ) . reshape ( M - [number] , N ) [EOL] [EOL] kk1 = kk [ : , [number] : - [number] ] [EOL] kk1 = kk1 . reshape ( kk1 . size ) [EOL] kk2 = kk1 + [number] [EOL] kk3 = kk1 + N [EOL] kk4 = kk1 + N + [number] [EOL] [EOL] kk123 = np . concatenate ( ( np . expand_dims ( kk1 , axis = [number] ) , np . expand_dims ( kk2 , axis = [number] ) , np . expand_dims ( kk4 , axis = [number] ) , np . expand_dims ( kk1 , axis = [number] ) , np . expand_dims ( kk4 , axis = [number] ) , np . expand_dims ( kk3 , axis = [number] ) ) , axis = [number] ) [EOL] [EOL] return kk123 . flatten ( ) [EOL] [EOL] [EOL] class WaveView ( app . Canvas ) : [EOL] [EOL] def __init__ ( self , title , width = [number] , height = [number] , wireframe = False , pixel_scale = [number] ) : [EOL] app . Canvas . __init__ ( self , resizable = False , size = ( width , height ) , show = False , px_scale = pixel_scale ) [EOL] [EOL] self . width = width [EOL] self . height = height [EOL] self . wireframe = wireframe [EOL] [EOL] self . _rendertex = gloo . Texture2D ( shape = ( height , width , [number] ) , internalformat = [string] ) [EOL] [comment] [EOL] [EOL] self . _fbo = gloo . FrameBuffer ( self . _rendertex , gloo . RenderBuffer ( ( height , width , [number] ) ) ) [EOL] [EOL] self . quad_bg = gloo . Program ( vertex_bg , fragment_bg , count = [number] ) [EOL] self . quad_bg [ [string] ] = [ ( - [number] , - [number] ) , ( - [number] , + [number] ) , ( + [number] , - [number] ) , ( + [number] , + [number] ) ] [EOL] self . quad_bg [ [string] ] = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] [EOL] gloo . set_clear_color ( [string] ) [EOL] self . update ( ) [EOL] [EOL] [EOL] def setup_field ( self , XX , YY , P0 ) : [EOL] [docstring] [EOL] self . M = XX . shape [ [number] ] [EOL] self . N = XX . shape [ [number] ] [EOL] [EOL] self . index_buff_t = gloo . IndexBuffer ( np . array ( gen_triang_indices ( self . M , self . N ) , dtype = np . uint32 ) ) [EOL] [EOL] if self . wireframe : [EOL] self . index_buff = gloo . IndexBuffer ( np . array ( gen_line_indices ( self . M , self . N ) , dtype = np . uint32 ) ) [EOL] else : [EOL] self . index_buff = self . index_buff_t [EOL] [EOL] [EOL] XX = XX . reshape ( ( XX . size , [number] ) ) . astype ( np . float32 ) [EOL] YY = YY . reshape ( ( YY . size , [number] ) ) . astype ( np . float32 ) [EOL] [EOL] self . grid = gloo . Program ( vertex , fragment ) [EOL] self . grid [ [string] ] = np . concatenate ( ( XX , YY ) , axis = [number] ) [EOL] self . set_zrange ( - [number] , [number] ) [EOL] self . grid [ [string] ] = P0 . reshape ( ( P0 . size , [number] ) ) . astype ( np . float32 ) [EOL] self . grid [ [string] ] = np . zeros ( XX . size , dtype = np . float32 ) [EOL] [EOL] [EOL] def on_draw ( self , event ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] with self . _fbo : [EOL] [comment] [EOL] gloo . clear ( color = True , depth = True ) [EOL] gloo . set_state ( depth_test = False , blend = False ) [EOL] self . quad_bg . draw ( [string] ) [EOL] [EOL] gloo . clear ( color = False , depth = True ) [EOL] gloo . set_state ( depth_test = True , blend = True , blend_func = ( [string] , [string] ) ) [EOL] self . grid [ [string] ] = [number] [EOL] self . grid . draw ( [string] if self . wireframe else [string] , self . index_buff ) [EOL] self . _im_zimg = read_pixels ( alpha = False , out_type = np . float32 ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] gloo . clear ( color = True , depth = True ) [EOL] gloo . set_state ( depth_test = True , blend = False ) [EOL] self . grid [ [string] ] = [number] [EOL] self . grid . draw ( [string] , self . index_buff_t ) [EOL] self . _im_xyzimg = read_pixels ( alpha = False , out_type = np . float32 ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] def set_zrange ( self , zmin , zmax , zalpha = [number] ) : [EOL] self . grid [ [string] ] = float ( zmin ) [EOL] self . grid [ [string] ] = float ( zmax ) [EOL] self . grid [ [string] ] = float ( zalpha ) [EOL] [EOL] [EOL] def render ( self , image , elevations ) : [EOL] [docstring] [EOL] self . quad_bg [ [string] ] = gloo . Texture2D ( image ) [EOL] elevations = elevations . reshape ( ( elevations . size , [number] ) ) [comment] [EOL] self . grid [ [string] ] = np . squeeze ( elevations ) . astype ( np . float32 ) [EOL] self . update ( ) [EOL] app . process_events ( ) [EOL] return self . _im_zimg , self . _im_xyzimg [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [docstring] [EOL] wv = WaveView ( ) [EOL] import scipy . io as sio [EOL] data = sio . loadmat ( [string] ) [EOL] wv . setup_field ( data [ [string] ] , data [ [string] ] , data [ [string] ] ) [EOL] [EOL] I = cv . imread ( [string] ) [EOL] [EOL] img = wv . render ( I , data [ [string] ] ) [EOL] cv . imwrite ( [string] , img ) [EOL] wv . set_zrange ( - [number] , [number] , [number] ) [EOL] img = wv . render ( I , data [ [string] ] * [number] ) [EOL] cv . imwrite ( [string] , img ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $WaveFieldVisualize.waveview2.WaveView$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $WaveFieldVisualize.waveview2.WaveView$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $WaveFieldVisualize.waveview2.WaveView$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $WaveFieldVisualize.waveview2.WaveView$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $WaveFieldVisualize.waveview2.WaveView$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0