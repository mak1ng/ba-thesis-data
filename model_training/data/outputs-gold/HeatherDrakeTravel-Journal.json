from typing import Any , Tuple , Union , Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] from os . path import normpath , join [EOL] import dj_database_url [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ][comment] [EOL] [EOL] [EOL] [comment] [EOL] DEFAULT_FILE_STORAGE = [string] [EOL] AWS_ACCESS_KEY_ID = os . environ [ [string] ] [EOL] AWS_SECRET_ACCESS_KEY = os . environ [ [string] ] [EOL] AWS_STORAGE_BUCKET_NAME = [string] [EOL] AWS_DEFAULT_ACL = None [EOL] [comment] [EOL] AWS_S3_FILE_OVERWRITE = False [EOL] [comment] [EOL] [EOL] [EOL] REACT_APP_DIR = [string] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if os . environ . get ( [string] ) : [EOL] DATABASES = { [string] : dj_database_url . config ( default = os . environ [ [string] ] ) } [EOL] [EOL] else : [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] STATIC_ROOT = normpath ( join ( BASE_DIR , [string] ) ) [EOL] [EOL] [comment] [EOL] STATIC_URL = [string] [EOL] [EOL] [comment] [EOL] STATICFILES_FINDERS = [ [string] , [string] , ] [EOL] [comment] [EOL] [EOL] STATICFILES_DIRS = ( os . path . join ( BASE_DIR , [string] ) , ) [EOL] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] MEDIA_URL = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] User = get_user_model ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import accounts [EOL] from django import forms [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class SignUpForm ( UserCreationForm ) : [EOL] first_name = forms . CharField ( max_length = [number] , required = False , help_text = [string] ) [EOL] last_name = forms . CharField ( max_length = [number] , required = False , help_text = [string] ) [EOL] email = forms . EmailField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.forms.SignUpForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.forms.SignUpForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.forms.SignUpForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.forms.SignUpForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TravelConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import travel [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] from django . views . generic import DetailView [EOL] from . models import Blog [EOL] [EOL] class PublicTravelSite ( DetailView ) : [EOL] template_name = [string] [EOL] model = Blog	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[travel.models.Blog]$ 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] [EOL] from travelviews import PublicTravelSite [EOL] [EOL] urlpatterns = [ path ( [string] , views . PublicTravelSite . as_view ( ) , name = [string] ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Blog , Post [EOL] [EOL] [comment] [EOL] admin . site . register ( Blog ) [EOL] admin . site . register ( Post )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import travel [EOL] import typing [EOL] from django . db import models [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Blog ( models . Model ) : [EOL] user = models . ForeignKey ( User , null = True , on_delete = models . SET_NULL ) [EOL] bitly = models . CharField ( max_length = [number] ) [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] blog = models . ForeignKey ( Blog , related_name = [string] , on_delete = models . CASCADE ) [EOL] date = models . DateField ( auto_now = True ) [EOL] image = models . ImageField ( blank = True , upload_to = [string] ) [EOL] caption = models . TextField ( null = True , max_length = [number] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Blog]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Blog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import path [EOL] [EOL] [EOL] from . views import IndexView [EOL] [EOL] app_name = [string] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , IndexView . as_view ( ) , name = [string] ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FrontendConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[EOL] import os [EOL] [EOL] from django . views . generic import View [EOL] from django . http import HttpResponse [EOL] from django . conf import settings [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] [EOL] [EOL] [EOL] class IndexView ( LoginRequiredMixin , View ) : [EOL] [docstring] [EOL] [EOL] def get ( self , request ) : [EOL] try : [EOL] with open ( os . path . join ( settings . REACT_APP_DIR , [string] , [string] ) ) as f : [EOL] return HttpResponse ( f . read ( ) ) [EOL] except FileNotFoundError : [EOL] return HttpResponse ( [string] , status = [number] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] from api . views import DiaryView [EOL] [comment] [EOL] [EOL] [EOL] app_name = [string] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , DiaryView . as_view ( { [string] : [string] , [string] : [string] } ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import api [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] [EOL] from rest_framework import viewsets [EOL] from . serializers import DiarySerializer [EOL] from travel . models import Blog , Post [EOL] from rest_framework . authentication import SessionAuthentication , BasicAuthentication [EOL] from rest_framework . response import Response [EOL] [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from rest_framework import authentication , permissions [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class CsrfExemptSessionAuthentication ( SessionAuthentication ) : [EOL] [EOL] def enforce_csrf ( self , request ) : [EOL] return [comment] [EOL] [EOL] [EOL] class DiaryView ( viewsets . ModelViewSet ) : [EOL] authentication_classes = ( CsrfExemptSessionAuthentication , BasicAuthentication ) [EOL] serializer_class = DiarySerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] blog = Blog . objects . get ( user = self . request . user ) [EOL] return Post . objects . filter ( blog = blog ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] blog = Blog . objects . get ( user = self . request . user ) [EOL] serializer . save ( blog = blog ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.DiarySerializer]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import travel [EOL] import typing [EOL] from rest_framework . serializers import ModelSerializer [EOL] from rest_framework import serializers [EOL] from travel . models import Post [EOL] [EOL] [EOL] class DiarySerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Post [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] depth = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[travel.models.Post]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0