[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] with open ( [string] ) as f : [EOL] version = f . read ( ) [EOL] [EOL] with open ( [string] ) as f : [EOL] long_desc = f . read ( ) [EOL] [EOL] setup ( name = [string] , version = version , description = [string] , author = [string] , author_email = [string] , url = [string] , packages = find_packages ( ) , long_description = long_desc , long_description_content_type = [string] , license = [string] , install_requires = [ [string] , [string] , [string] , [string] ] , python_requires = [string] , test_require = [ [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Tuple [EOL] import majortomo [EOL] import typing [EOL] import time [EOL] [EOL] from pytest import mark , raises [EOL] [EOL] from majortomo import broker , error [EOL] [EOL] [EOL] def test_broker_can_bind_again_after_close ( ) : [EOL] b = broker . Broker ( [string] ) [EOL] b . bind ( ) [EOL] b . close ( ) [EOL] b . bind ( ) [EOL] b . close ( ) [EOL] [EOL] [EOL] def test_broker_can_only_bind_once ( ) : [EOL] b = broker . Broker ( [string] ) [EOL] try : [EOL] b . bind ( ) [EOL] with raises ( RuntimeError ) : [EOL] b . bind ( ) [EOL] finally : [EOL] b . close ( ) [EOL] [EOL] [EOL] def test_worker_is_expired ( ) : [EOL] now = time . time ( ) [EOL] w = broker . Worker ( [string] , [string] , now + [number] , now + [number] ) [EOL] assert w . is_expired ( now ) is False [EOL] assert w . is_expired ( now + [number] ) is False [EOL] assert w . is_expired ( now + [number] ) is True [EOL] assert w . is_expired ( now + [number] ) is True [EOL] [EOL] [EOL] def test_worker_is_heartbeat ( ) : [EOL] now = time . time ( ) [EOL] w = broker . Worker ( [string] , [string] , now + [number] , now + [number] ) [EOL] assert w . is_heartbeat ( now ) is False [EOL] assert w . is_heartbeat ( now + [number] ) is False [EOL] assert w . is_heartbeat ( now + [number] ) is True [EOL] assert w . is_heartbeat ( now + [number] ) is True [EOL] [EOL] [EOL] def test_service_worker_added ( ) : [EOL] svc = broker . Service ( ) [EOL] assert [number] == svc . available_workers [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] assert [number] == svc . available_workers [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] assert [number] == svc . available_workers [EOL] [EOL] [EOL] def test_service_worker_removed ( ) : [EOL] svc = broker . Service ( ) [EOL] assert [number] == svc . available_workers [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] assert [number] == svc . available_workers [EOL] svc . remove_worker ( [string] ) [EOL] svc . remove_worker ( [string] ) [EOL] assert [number] == svc . available_workers [EOL] [EOL] [EOL] def test_service_request_queued ( ) : [EOL] svc = broker . Service ( ) [EOL] assert [number] == svc . queued_requests [EOL] svc . queue_request ( [string] , [ [string] , [string] ] ) [EOL] assert [number] == svc . queued_requests [EOL] svc . queue_request ( [string] , [ [string] , [string] ] ) [EOL] assert [number] == svc . queued_requests [EOL] [EOL] [EOL] def test_service_request_dequeued ( ) : [EOL] message = [ [string] , [string] ] [EOL] worker = broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) [EOL] client = [string] [EOL] [EOL] svc = broker . Service ( ) [EOL] svc . add_worker ( worker ) [EOL] [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] svc . queue_request ( client , message ) [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] assert dequeued [ [number] ] == ( message , worker , client ) [EOL] [EOL] [EOL] def test_service_dequeue_no_workers ( ) : [EOL] svc = broker . Service ( ) [EOL] svc . queue_request ( [string] , [ [string] , [string] ] ) [EOL] svc . queue_request ( [string] , [ [string] , [string] ] ) [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] [EOL] assert [number] == svc . available_workers [EOL] assert [number] == svc . queued_requests [EOL] [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] assert [number] == svc . available_workers [EOL] assert [number] == svc . queued_requests [EOL] [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] [EOL] def test_service_dequeue_no_requests ( ) : [EOL] svc = broker . Service ( ) [EOL] svc . queue_request ( [string] , [ [string] , [string] ] ) [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] svc . add_worker ( broker . Worker ( [string] , [string] , time . time ( ) , time . time ( ) ) ) [EOL] [EOL] assert [number] == svc . available_workers [EOL] assert [number] == svc . queued_requests [EOL] [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] assert [number] == svc . available_workers [EOL] assert [number] == svc . queued_requests [EOL] [EOL] dequeued = list ( svc . dequeue_pending ( ) ) [EOL] assert [number] == len ( dequeued ) [EOL] [EOL] [EOL] def test_service_container_yields_expired_workers ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now - [number] , now ) [EOL] container . add_worker ( [string] , [string] , now - [number] , now ) [EOL] [EOL] expired = list ( container . expired_workers ( ) ) [EOL] assert [number] == len ( expired ) [EOL] for w in expired : [EOL] assert w . id in { [string] , [string] } [EOL] [EOL] [EOL] def test_service_container_yields_expired_busy_workers ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now - [number] , now ) [EOL] container . add_worker ( [string] , [string] , now - [number] , now ) [EOL] container . set_worker_busy ( [string] , now - [number] ) [EOL] [EOL] expired = list ( container . expired_workers ( ) ) [EOL] assert [number] == len ( expired ) [EOL] [EOL] [EOL] def test_service_container_worker_removed ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now - [number] , now ) [EOL] [EOL] assert [number] == len ( list ( container . expired_workers ( ) ) ) [EOL] [EOL] for w in container . expired_workers ( ) : [EOL] container . remove_worker ( w . id ) [EOL] [EOL] assert [number] == len ( list ( container . expired_workers ( ) ) ) [EOL] [EOL] [EOL] def test_service_container_busy_worker_removed ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . set_worker_busy ( [string] , now + [number] ) [EOL] [EOL] assert [number] == len ( list ( container . expired_workers ( ) ) ) [EOL] [EOL] container . remove_worker ( [string] ) [EOL] [EOL] with raises ( error . StateError ) : [EOL] container . set_worker_available ( [string] , now + [number] , now + [number] ) [EOL] [EOL] [EOL] def test_service_container_is_worker_busy ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] [EOL] assert container . is_busy_worker ( [string] ) is False [EOL] [EOL] container . set_worker_busy ( [string] , now + [number] ) [EOL] assert container . is_busy_worker ( [string] ) is True [EOL] [EOL] assert container . is_busy_worker ( [string] ) is False [EOL] [EOL] [EOL] def test_service_container_non_existing_worker_removed ( ) : [EOL] container = broker . ServicesContainer ( ) [EOL] with raises ( error . StateError ) : [EOL] container . remove_worker ( [string] ) [EOL] [EOL] [EOL] def test_service_container_yields_heartbeat_workers ( ) : [EOL] now = time . time ( ) [EOL] container = broker . ServicesContainer ( ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now + [number] ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now + [number] ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now ) [EOL] container . add_worker ( [string] , [string] , now + [number] , now - [number] ) [EOL] [EOL] expired = list ( container . heartbeat_workers ( ) ) [EOL] assert [number] == len ( expired ) [EOL] for w in expired : [EOL] assert w . id in { [string] , [string] } [EOL] [EOL] [EOL] @ mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) ] ) def test_id_to_int ( id_ , expected ) : [EOL] assert expected == broker . id_to_int ( id_ ) [EOL]	
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import majortomo [EOL] from majortomo import Worker [EOL] [EOL] [EOL] def test_zmq_mdp_worker_instantiates ( ) : [EOL] worker = Worker ( broker_url = [string] , service_name = [string] ) [EOL] assert worker [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import majortomo [EOL] from majortomo import Client [EOL] [EOL] [EOL] def test_client_is_connected ( ) : [EOL] client = Client ( broker_url = [string] ) [EOL] assert client . is_connected ( ) is False [EOL] client . connect ( ) [EOL] assert client . is_connected ( ) is True [EOL] client . close ( ) [EOL] assert client . is_connected ( ) is False [EOL] [EOL] [EOL] def test_client_connection_is_context_managed ( ) : [EOL] client = Client ( broker_url = [string] ) [EOL] assert client . is_connected ( ) is False [EOL] with client : [EOL] assert client . is_connected ( ) is True [EOL] assert client . is_connected ( ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import subprocess [EOL] import multiprocessing [EOL] import majortomo [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import sys [EOL] from contextlib import contextmanager [EOL] from multiprocessing import Process [EOL] from subprocess import Popen [EOL] from tempfile import mkstemp [EOL] [EOL] import pytest [EOL] import zmq [EOL] [EOL] from majortomo import Worker , WorkerRequestsIterator [EOL] from majortomo . config import default_config [EOL] [EOL] try : [EOL] from importlib import reload [EOL] except ImportError : [EOL] [comment] [EOL] pass [EOL] [EOL] HEARTBEAT_INTERVAL = [number] [EOL] HEARTBEAT_TIMEOUT = [number] [EOL] [EOL] [EOL] @ pytest . fixture ( ) def socket_url ( ) : [EOL] fh , path = mkstemp ( prefix = [string] ) [EOL] os . close ( fh ) [EOL] try : [EOL] yield [string] + path [EOL] finally : [EOL] os . unlink ( path ) [EOL] [EOL] [EOL] @ contextmanager def run_broker ( bind ) : [EOL] [docstring] [EOL] command = [ sys . executable , [string] , [string] , [string] , bind , [string] , str ( HEARTBEAT_INTERVAL ) , [string] , str ( HEARTBEAT_TIMEOUT ) , [string] ] [EOL] [EOL] broker_proc = Popen ( command ) [EOL] [EOL] try : [EOL] yield [EOL] finally : [EOL] broker_proc . terminate ( ) [EOL] broker_proc . wait ( ) [EOL] [EOL] [EOL] @ contextmanager def run_worker ( connect , service_name = [string] , handler_func = lambda r : r , send_partials = False ) : [EOL] [EOL] def _worker_process ( ) : [EOL] [comment] [EOL] logging . shutdown ( ) [EOL] reload ( logging ) [EOL] logging . basicConfig ( level = logging . DEBUG , format = default_config [ [string] ] [ [string] ] [ [string] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] zmq . Context . instance ( ) . destroy ( ) [EOL] [EOL] logging . debug ( [string] , service_name ) [EOL] worker = Worker ( broker_url = connect , service_name = service_name , heartbeat_interval = HEARTBEAT_INTERVAL , heartbeat_timeout = HEARTBEAT_TIMEOUT , zmq_linger = [number] ) [EOL] worker_iter = WorkerRequestsIterator ( worker ) [EOL] worker_iter . stop_on_signal ( ) [EOL] [EOL] for request in worker_iter : [EOL] response = list ( handler_func ( request ) ) [EOL] if send_partials and len ( response ) > [number] : [EOL] partials = response [ [number] : - [number] ] [EOL] final = response [ - [number] ] [EOL] worker_iter . send_reply_from_iterable ( partials , final = final ) [EOL] else : [EOL] worker_iter . send_reply_final ( response ) [EOL] [EOL] logging . debug ( [string] , service_name ) [EOL] [EOL] proc = Process ( target = _worker_process ) [EOL] try : [EOL] proc . start ( ) [EOL] yield [EOL] if not proc . is_alive ( ) : [EOL] raise RuntimeError ( [string] , proc . exitcode ) [EOL] finally : [EOL] proc . terminate ( ) [EOL] proc . join ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Set , Any [EOL] import majortomo [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from majortomo import Client [EOL] [EOL] from . conftest import run_broker , run_worker [EOL] [EOL] [EOL] def test_full_system_messages_delivered ( socket_url ) : [EOL] [docstring] [EOL] messages = [ str ( i ) . encode ( [string] ) for i in range ( [number] ) ] [EOL] replies = [ ] [EOL] with run_broker ( socket_url ) , run_worker ( socket_url ) , Client ( broker_url = socket_url ) as client : [EOL] for msg in messages : [EOL] client . send ( [string] , msg ) [EOL] replies . append ( client . recv_all_as_list ( timeout = [number] ) [ [number] ] ) [EOL] [EOL] assert replies == messages [EOL] [EOL] [EOL] def test_full_system_messages_delivered_multiframe ( socket_url ) : [EOL] [docstring] [EOL] messages = [ [ str ( i * j ) . encode ( [string] ) for j in range ( [number] ) ] for i in range ( [number] ) ] [EOL] replies = [ ] [EOL] with run_broker ( socket_url ) , run_worker ( socket_url ) , Client ( broker_url = socket_url ) as client : [EOL] for msg in messages : [EOL] client . send ( [string] , * msg ) [EOL] replies . append ( client . recv_all_as_list ( timeout = [number] ) ) [EOL] [EOL] assert replies == messages [EOL] [EOL] [EOL] def test_full_system_messages_delivered_multiple_workers ( socket_url ) : [EOL] [docstring] [EOL] messages = set ( [ str ( i ) . encode ( [string] ) for i in range ( [number] ) ] ) [EOL] replies = set ( ) [EOL] [EOL] worker1 = run_worker ( socket_url ) [EOL] worker2 = run_worker ( socket_url ) [EOL] worker3 = run_worker ( socket_url ) [EOL] [EOL] with run_broker ( socket_url ) , Client ( broker_url = socket_url ) as client , worker1 , worker2 , worker3 : [EOL] for msg in messages : [EOL] client . send ( [string] , msg ) [EOL] replies . add ( client . recv_all_as_list ( timeout = [number] ) [ [number] ] ) [EOL] [EOL] assert replies == messages [EOL] [EOL] [EOL] def test_full_system_messages_delivered_multiple_workers_and_clients ( socket_url ) : [EOL] [docstring] [EOL] c1_messages = [ str ( i ) . encode ( [string] ) for i in range ( [number] ) ] [EOL] c2_messages = [ str ( i ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] [EOL] c1_replies = set ( ) [EOL] c2_replies = set ( ) [EOL] [EOL] client1 = Client ( broker_url = socket_url ) [EOL] client2 = Client ( broker_url = socket_url ) [EOL] [EOL] worker1 = run_worker ( socket_url ) [EOL] worker2 = run_worker ( socket_url ) [EOL] [EOL] with run_broker ( socket_url ) , client1 , client2 , worker1 , worker2 : [EOL] for i in range ( [number] ) : [EOL] client1 . send ( [string] , c1_messages [ i ] ) [EOL] client2 . send ( [string] , c2_messages [ i ] ) [EOL] c1_replies . add ( client1 . recv_all_as_list ( timeout = [number] ) [ [number] ] ) [EOL] c2_replies . add ( client2 . recv_all_as_list ( timeout = [number] ) [ [number] ] ) [EOL] [EOL] assert c1_replies == set ( c1_messages ) [EOL] assert c2_replies == set ( c2_messages ) [EOL] [EOL] [EOL] def test_full_system_partial_multiframe_replies ( socket_url ) : [EOL] [docstring] [EOL] message_parts = [ [ [string] . join ( [ str ( i * j ) . encode ( [string] ) for j in range ( [number] ) ] ) for i in range ( [number] ) ] for _ in range ( [number] ) ] [EOL] [EOL] def handler ( _ ) : [EOL] return ( p for p in message_parts ) [EOL] [EOL] worker = run_worker ( socket_url , handler_func = handler , send_partials = True ) [EOL] [EOL] reply = [ ] [EOL] with run_broker ( socket_url ) , worker , Client ( broker_url = socket_url ) as client : [EOL] client . send ( [string] , [string] ) [EOL] for _ in message_parts [ [number] : - [number] ] : [EOL] reply . append ( client . recv_part ( timeout = [number] ) ) [EOL] reply . append ( client . recv_part ( timeout = [number] ) ) [EOL] [EOL] assert message_parts == reply [EOL] [EOL] [EOL] def test_full_system_partial_multiframe_replies_receive_all ( socket_url ) : [EOL] [docstring] [EOL] message_parts = [ [ [string] . join ( [ str ( i * j ) . encode ( [string] ) for j in range ( [number] ) ] ) for i in range ( [number] ) ] for _ in range ( [number] ) ] [EOL] [EOL] def handler ( _ ) : [EOL] return ( p for p in message_parts ) [EOL] [EOL] worker = run_worker ( socket_url , handler_func = handler , send_partials = True ) [EOL] [EOL] with run_broker ( socket_url ) , worker , Client ( broker_url = socket_url ) as client : [EOL] client . send ( [string] , [string] ) [EOL] reply = list ( client . recv_all ( ) ) [EOL] [EOL] assert message_parts == reply [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0