[comment] [EOL] [EOL] from typing import Pattern , Dict , Optional , Any , Match , List [EOL] import builtins [EOL] import argparse [EOL] import typing [EOL] import barscripts [EOL] import sys [EOL] import dbus [EOL] import os [EOL] from operator import itemgetter [EOL] import argparse [EOL] import re [EOL] from urllib . parse import unquote [EOL] import time [EOL] from dbus . mainloop . glib import DBusGMainLoop [EOL] from gi . repository import GLib [EOL] DBusGMainLoop ( set_as_default = True ) [EOL] [EOL] [EOL] FORMAT_STRING = [string] [EOL] FORMAT_REGEX = re . compile ( [string] , re . I ) [EOL] FORMAT_TAG_REGEX = re . compile ( [string] ) [EOL] SAFE_TAG_REGEX = re . compile ( [string] ) [EOL] [EOL] class PlayerManager : [EOL] def __init__ ( self , blacklist = [ ] , connect = True ) : [EOL] self . blacklist = blacklist [EOL] self . _connect = connect [EOL] self . _session_bus = dbus . SessionBus ( ) [EOL] self . players = { } [EOL] [EOL] self . print_queue = [ ] [EOL] self . connected = False [EOL] self . player_states = { } [EOL] [EOL] self . refreshPlayerList ( ) [EOL] [EOL] if self . _connect : [EOL] self . connect ( ) [EOL] loop = GLib . MainLoop ( ) [EOL] try : [EOL] loop . run ( ) [EOL] except KeyboardInterrupt : [EOL] print ( [string] ) [EOL] [EOL] def connect ( self ) : [EOL] self . _session_bus . add_signal_receiver ( self . onOwnerChangedName , [string] ) [EOL] self . _session_bus . add_signal_receiver ( self . onChangedProperties , [string] , path = [string] , sender_keyword = [string] ) [EOL] [EOL] def onChangedProperties ( self , interface , properties , signature , sender = None ) : [EOL] if sender in self . players : [EOL] player = self . players [ sender ] [EOL] [comment] [EOL] if [string] not in player . _signals : [EOL] [comment] [EOL] player . onPropertiesChanged ( interface , properties , signature ) [EOL] else : [EOL] [comment] [EOL] bus_name = self . getBusNameFromOwner ( sender ) [EOL] self . addPlayer ( bus_name , sender ) [EOL] player = self . players [ sender ] [EOL] player . onPropertiesChanged ( interface , properties , signature ) [EOL] [EOL] def onOwnerChangedName ( self , bus_name , old_owner , new_owner ) : [EOL] if self . busNameIsAPlayer ( bus_name ) : [EOL] if new_owner and not old_owner : [EOL] self . addPlayer ( bus_name , new_owner ) [EOL] elif old_owner and not new_owner : [EOL] self . removePlayer ( old_owner ) [EOL] else : [EOL] self . changePlayerOwner ( bus_name , old_owner , new_owner ) [EOL] [EOL] def getBusNameFromOwner ( self , owner ) : [EOL] player_bus_names = [ bus_name for bus_name in self . _session_bus . list_names ( ) if self . busNameIsAPlayer ( bus_name ) ] [EOL] for player_bus_name in player_bus_names : [EOL] player_bus_owner = self . _session_bus . get_name_owner ( player_bus_name ) [EOL] if owner == player_bus_owner : [EOL] return player_bus_name [EOL] [EOL] def busNameIsAPlayer ( self , bus_name ) : [EOL] return bus_name . startswith ( [string] ) and bus_name . split ( [string] ) [ [number] ] not in self . blacklist [EOL] [EOL] def refreshPlayerList ( self ) : [EOL] player_bus_names = [ bus_name for bus_name in self . _session_bus . list_names ( ) if self . busNameIsAPlayer ( bus_name ) ] [EOL] for player_bus_name in player_bus_names : [EOL] self . addPlayer ( player_bus_name ) [EOL] if self . connected != True : [EOL] self . connected = True [EOL] self . printQueue ( ) [EOL] [EOL] def addPlayer ( self , bus_name , owner = None ) : [EOL] player = Player ( self . _session_bus , bus_name , owner = owner , connect = self . _connect , _print = self . print ) [EOL] self . players [ player . owner ] = player [EOL] [EOL] def removePlayer ( self , owner ) : [EOL] if owner in self . players : [EOL] self . players [ owner ] . disconnect ( ) [EOL] del self . players [ owner ] [EOL] [comment] [EOL] if len ( self . players ) == [number] : [EOL] _printFlush ( ICON_NONE ) [EOL] [comment] [EOL] else : [EOL] players = self . getSortedPlayerOwnerList ( ) [EOL] if len ( players ) > [number] : [EOL] self . players [ players [ [number] ] ] . printStatus ( ) [EOL] [EOL] def changePlayerOwner ( self , bus_name , old_owner , new_owner ) : [EOL] player = Player ( self . _session_bus , bus_name , owner = new_owner , connect = self . _connect , _print = self . print ) [EOL] self . players [ new_owner ] = player [EOL] del self . players [ old_owner ] [EOL] [EOL] [comment] [EOL] def getSortedPlayerOwnerList ( self ) : [EOL] players = [ { [string] : int ( owner . split ( [string] ) [ - [number] ] ) , [string] : [number] if player . status == [string] else [number] if player . status == [string] else [number] , [string] : owner } for owner , player in self . players . items ( ) ] [EOL] return [ info [ [string] ] for info in reversed ( sorted ( players , key = itemgetter ( [string] , [string] ) ) ) ] [EOL] [EOL] [comment] [EOL] def getCurrentPlayer ( self ) : [EOL] playing_players = [ player_owner for player_owner in self . getSortedPlayerOwnerList ( ) if self . players [ player_owner ] . status == [string] or self . players [ player_owner ] . status == [string] ] [EOL] return self . players [ playing_players [ [number] ] ] if playing_players else None [EOL] [EOL] def print ( self , status , player ) : [EOL] self . player_states [ player . bus_name ] = status [EOL] [EOL] if self . connected : [EOL] current_player = self . getCurrentPlayer ( ) [EOL] if current_player != None : [EOL] _printFlush ( self . player_states [ current_player . bus_name ] ) [EOL] else : [EOL] _printFlush ( ICON_STOPPED ) [EOL] else : [EOL] self . print_queue . append ( [ status , player ] ) [EOL] [EOL] def printQueue ( self ) : [EOL] for args in self . print_queue : [EOL] self . print ( args [ [number] ] , args [ [number] ] ) [EOL] self . print_queue . clear ( ) [EOL] [EOL] [EOL] class Player : [EOL] def __init__ ( self , session_bus , bus_name , owner = None , connect = True , _print = None ) : [EOL] self . _session_bus = session_bus [EOL] self . bus_name = bus_name [EOL] self . _disconnecting = False [EOL] self . __print = _print [EOL] [EOL] self . metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] } [EOL] [EOL] self . _rate = [number] [EOL] self . _positionAtLastUpdate = [number] [EOL] self . _timeAtLastUpdate = time . time ( ) [EOL] self . _positionTimerRunning = False [EOL] [EOL] self . _metadata = None [EOL] self . status = [string] [EOL] self . icon = ICON_NONE [EOL] self . icon_reversed = ICON_PLAYING [EOL] if owner is not None : [EOL] self . owner = owner [EOL] else : [EOL] self . owner = self . _session_bus . get_name_owner ( bus_name ) [EOL] self . _obj = self . _session_bus . get_object ( self . bus_name , [string] ) [EOL] self . _properties_interface = dbus . Interface ( self . _obj , dbus_interface = [string] ) [EOL] self . _introspect_interface = dbus . Interface ( self . _obj , dbus_interface = [string] ) [EOL] self . _media_interface = dbus . Interface ( self . _obj , dbus_interface = [string] ) [EOL] self . _player_interface = dbus . Interface ( self . _obj , dbus_interface = [string] ) [EOL] self . _introspect = self . _introspect_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _getProperty = self . _properties_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerPlay = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerPause = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerPlayPause = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerStop = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerPrevious = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerNext = self . _player_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _playerRaise = self . _media_interface . get_dbus_method ( [string] , dbus_interface = None ) [EOL] self . _signals = { } [EOL] [EOL] self . refreshPosition ( ) [EOL] self . refreshStatus ( ) [EOL] self . refreshMetadata ( ) [EOL] [EOL] if connect : [EOL] self . printStatus ( ) [EOL] self . connect ( ) [EOL] [EOL] def play ( self ) : [EOL] self . _playerPlay ( ) [EOL] def pause ( self ) : [EOL] self . _playerPause ( ) [EOL] def playpause ( self ) : [EOL] self . _playerPlayPause ( ) [EOL] def stop ( self ) : [EOL] self . _playerStop ( ) [EOL] def previous ( self ) : [EOL] self . _playerPrevious ( ) [EOL] def next ( self ) : [EOL] self . _playerNext ( ) [EOL] def raisePlayer ( self ) : [EOL] self . _playerRaise ( ) [EOL] [EOL] def connect ( self ) : [EOL] if self . _disconnecting is not True : [EOL] introspect_xml = self . _introspect ( self . bus_name , [string] ) [EOL] if [string] in introspect_xml : [EOL] self . _signals [ [string] ] = self . _session_bus . add_signal_receiver ( self . onMetadataChanged , [string] , self . bus_name ) [EOL] self . _signals [ [string] ] = self . _player_interface . connect_to_signal ( [string] , self . onSeeked ) [EOL] self . _signals [ [string] ] = self . _properties_interface . connect_to_signal ( [string] , self . onPropertiesChanged ) [EOL] [EOL] def disconnect ( self ) : [EOL] self . _disconnecting = True [EOL] for signal_name , signal_handler in list ( self . _signals . items ( ) ) : [EOL] signal_handler . remove ( ) [EOL] del self . _signals [ signal_name ] [EOL] [EOL] def refreshStatus ( self ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] self . status = str ( self . _getProperty ( [string] , [string] ) ) . lower ( ) [EOL] self . updateIcon ( ) [EOL] self . checkPositionTimer ( ) [EOL] except dbus . exceptions . DBusException : [EOL] self . disconnect ( ) [EOL] [EOL] def refreshMetadata ( self ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] self . _metadata = self . _getProperty ( [string] , [string] ) [EOL] self . _parseMetadata ( ) [EOL] except dbus . exceptions . DBusException : [EOL] self . disconnect ( ) [EOL] [EOL] def updateIcon ( self ) : [EOL] self . icon = ( ICON_PLAYING if self . status == [string] else [EOL] ICON_PAUSED if self . status == [string] else [EOL] ICON_STOPPED if self . status == [string] else [EOL] ICON_NONE ) [EOL] self . icon_reversed = ( ICON_PAUSED if self . status == [string] else [EOL] ICON_PLAYING ) [EOL] [EOL] def _print ( self , status ) : [EOL] self . __print ( status , self ) [EOL] [EOL] def _parseMetadata ( self ) : [EOL] if self . _metadata != None : [EOL] [comment] [EOL] _artist = _getProperty ( self . _metadata , [string] , [ [string] ] ) [EOL] _album = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _title = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _track = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _genre = _getProperty ( self . _metadata , [string] , [ [string] ] ) [EOL] _disc = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _length = _getProperty ( self . _metadata , [string] , [number] ) or _getProperty ( self . _metadata , [string] , [number] ) [EOL] _length_int = _length if type ( _length ) is int else int ( float ( _length ) ) [EOL] _date = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _year = _date [ [number] : [number] ] if len ( _date ) else [string] [EOL] _url = _getProperty ( self . _metadata , [string] , [string] ) [EOL] _cover = _getProperty ( self . _metadata , [string] , [string] ) or _getProperty ( self . _metadata , [string] , [string] ) [EOL] _duration = _getDuration ( _length_int ) [EOL] [comment] [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _firstIfList ( _artist ) ) [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _firstIfList ( _album ) ) [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _firstIfList ( _title ) ) [EOL] self . metadata [ [string] ] = _track [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _firstIfList ( _genre ) ) [EOL] self . metadata [ [string] ] = _disc [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _date ) [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _year ) [EOL] self . metadata [ [string] ] = _url [EOL] self . metadata [ [string] ] = os . path . basename ( _url ) [EOL] self . metadata [ [string] ] = _length_int [EOL] self . metadata [ [string] ] = re . sub ( SAFE_TAG_REGEX , [string] , _firstIfList ( _cover ) ) [EOL] self . metadata [ [string] ] = _duration [EOL] [EOL] def onMetadataChanged ( self , track_id , metadata ) : [EOL] self . refreshMetadata ( ) [EOL] self . printStatus ( ) [EOL] [EOL] def onPropertiesChanged ( self , interface , properties , signature ) : [EOL] updated = False [EOL] if dbus . String ( [string] ) in properties : [EOL] _metadata = properties [ dbus . String ( [string] ) ] [EOL] if _metadata != self . _metadata : [EOL] self . _metadata = _metadata [EOL] self . _parseMetadata ( ) [EOL] updated = True [EOL] if dbus . String ( [string] ) in properties : [EOL] status = str ( properties [ dbus . String ( [string] ) ] ) . lower ( ) [EOL] if status != self . status : [EOL] self . status = status [EOL] self . checkPositionTimer ( ) [EOL] self . updateIcon ( ) [EOL] updated = True [EOL] if dbus . String ( [string] ) in properties and dbus . String ( [string] ) not in properties : [EOL] self . refreshStatus ( ) [EOL] if NEEDS_POSITION and dbus . String ( [string] ) in properties : [EOL] rate = properties [ dbus . String ( [string] ) ] [EOL] if rate != self . _rate : [EOL] self . _rate = rate [EOL] self . refreshPosition ( ) [EOL] [EOL] if updated : [EOL] self . refreshPosition ( ) [EOL] self . printStatus ( ) [EOL] [EOL] def checkPositionTimer ( self ) : [EOL] if NEEDS_POSITION and self . status == [string] and not self . _positionTimerRunning : [EOL] self . _positionTimerRunning = True [EOL] GLib . timeout_add_seconds ( [number] , self . _positionTimer ) [EOL] [EOL] def onSeeked ( self , position ) : [EOL] self . refreshPosition ( ) [EOL] self . printStatus ( ) [EOL] [EOL] def _positionTimer ( self ) : [EOL] self . printStatus ( ) [EOL] self . _positionTimerRunning = self . status == [string] [EOL] return self . _positionTimerRunning [EOL] [EOL] def refreshPosition ( self ) : [EOL] try : [EOL] time_us = self . _getProperty ( [string] , [string] ) [EOL] except dbus . exceptions . DBusException : [EOL] time_us = [number] [EOL] [EOL] self . _timeAtLastUpdate = time . time ( ) [EOL] self . _positionAtLastUpdate = time_us / [number] [EOL] [EOL] def _getPosition ( self ) : [EOL] if self . status == [string] : [EOL] return self . _positionAtLastUpdate + self . _rate * ( time . time ( ) - self . _timeAtLastUpdate ) [EOL] else : [EOL] return self . _positionAtLastUpdate [EOL] [EOL] def _statusReplace ( self , match , metadata ) : [EOL] tag = match . group ( [string] ) [EOL] format = match . group ( [string] ) [EOL] formatlen = match . group ( [string] ) [EOL] text = match . group ( [string] ) [EOL] tag_found = False [EOL] reversed_tag = False [EOL] [EOL] if tag . startswith ( [string] ) : [EOL] tag = tag [ [number] : ] [EOL] reversed_tag = True [EOL] [EOL] if format is None : [EOL] tag_is_format_match = re . match ( FORMAT_TAG_REGEX , tag ) [EOL] if tag_is_format_match : [EOL] format = tag_is_format_match . group ( [string] ) [EOL] formatlen = tag_is_format_match . group ( [string] ) [EOL] tag_found = True [EOL] if format is not None : [EOL] text = text . format_map ( CleanSafeDict ( ** metadata ) ) [EOL] if format == [string] : [EOL] formatlen = int ( formatlen ) [EOL] text = text [ : formatlen ] [EOL] elif format == [string] : [EOL] formatlen = int ( formatlen ) [EOL] if len ( text ) > formatlen : [EOL] text = text [ : max ( formatlen - len ( TRUNCATE_STRING ) , [number] ) ] + TRUNCATE_STRING [EOL] if tag_found is False and tag in metadata and len ( metadata [ tag ] ) : [EOL] tag_found = True [EOL] [EOL] if reversed_tag : [EOL] tag_found = not tag_found [EOL] [EOL] if tag_found : [EOL] return text [EOL] else : [EOL] return [string] [EOL] [EOL] def printStatus ( self ) : [EOL] if self . status in [ [string] , [string] ] : [EOL] metadata = { ** self . metadata , [string] : self . icon , [string] : self . icon_reversed } [EOL] if NEEDS_POSITION : [EOL] metadata [ [string] ] = time . strftime ( [string] , time . gmtime ( self . _getPosition ( ) ) ) [EOL] [comment] [EOL] text = re . sub ( FORMAT_REGEX , lambda match : self . _statusReplace ( match , metadata ) , FORMAT_STRING ) [EOL] [comment] [EOL] try : [EOL] text = re . sub ( [string] , [string] , text . format_map ( CleanSafeDict ( ** metadata ) ) ) [EOL] except : [EOL] print ( [string] ) [EOL] self . _print ( text ) [EOL] else : [EOL] self . _print ( ICON_STOPPED ) [EOL] [EOL] [EOL] def _dbusValueToPython ( value ) : [EOL] if isinstance ( value , dbus . Dictionary ) : [EOL] return { _dbusValueToPython ( key ) : _dbusValueToPython ( value ) for key , value in value . items ( ) } [EOL] elif isinstance ( value , dbus . Array ) : [EOL] return [ _dbusValueToPython ( item ) for item in value ] [EOL] elif isinstance ( value , dbus . Boolean ) : [EOL] return int ( value ) == [number] [EOL] elif ( isinstance ( value , dbus . Byte ) or isinstance ( value , dbus . Int16 ) or isinstance ( value , dbus . UInt16 ) or isinstance ( value , dbus . Int32 ) or isinstance ( value , dbus . UInt32 ) or isinstance ( value , dbus . Int64 ) or isinstance ( value , dbus . UInt64 ) ) : [EOL] return int ( value ) [EOL] elif isinstance ( value , dbus . Double ) : [EOL] return float ( value ) [EOL] elif ( isinstance ( value , dbus . ObjectPath ) or isinstance ( value , dbus . Signature ) or isinstance ( value , dbus . String ) ) : [EOL] return unquote ( str ( value ) ) [EOL] [EOL] def _getProperty ( properties , property , default = None ) : [EOL] value = default [EOL] if not isinstance ( property , dbus . String ) : [EOL] property = dbus . String ( property ) [EOL] if property in properties : [EOL] value = properties [ property ] [EOL] return _dbusValueToPython ( value ) [EOL] else : [EOL] return value [EOL] [EOL] def _getDuration ( t ) : [EOL] seconds = t / [number] [EOL] return time . strftime ( [string] , time . gmtime ( seconds ) ) [EOL] [EOL] def _firstIfList ( _value ) : [EOL] return _value [ [number] ] if type ( _value ) is list and len ( _value ) else _value [EOL] [EOL] class CleanSafeDict ( dict ) : [EOL] def __missing__ ( self , key ) : [EOL] return [string] . format ( key ) [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] _last_status = [string] [EOL] def _printFlush ( status , ** kwargs ) : [EOL] global _last_status [EOL] if status != _last_status : [EOL] print ( status , ** kwargs ) [EOL] sys . stdout . flush ( ) [EOL] _last_status = status [EOL] [EOL] [EOL] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , help = [string] , choices = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , default = None , nargs = [string] ) [EOL] parser . add_argument ( [string] , [string] , help = [string] , action = [string] , metavar = [string] , default = [ ] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] FORMAT_STRING = re . sub ( [string] , [string] , args . format ) [EOL] NEEDS_POSITION = [string] in FORMAT_STRING [EOL] [EOL] TRUNCATE_STRING = args . truncate_text [EOL] ICON_PLAYING = args . icon_playing [EOL] ICON_PAUSED = args . icon_paused [EOL] ICON_STOPPED = args . icon_stopped [EOL] ICON_NONE = args . icon_none [EOL] [EOL] if args . command is None : [EOL] PlayerManager ( blacklist = args . blacklist ) [EOL] else : [EOL] player_manager = PlayerManager ( blacklist = args . blacklist , connect = False ) [EOL] current_player = player_manager . getCurrentPlayer ( ) [EOL] if args . command == [string] and current_player : [EOL] current_player . play ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . pause ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . playpause ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . stop ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . previous ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . next ( ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . printStatus ( ) [EOL] elif args . command == [string] : [EOL] print ( [string] . join ( sorted ( [ [string] . format ( player . bus_name . split ( [string] ) [ [number] ] , player . status ) for player in player_manager . players . values ( ) ] ) ) ) [EOL] elif args . command == [string] and current_player : [EOL] print ( [string] . format ( current_player . bus_name . split ( [string] ) [ [number] ] , current_player . status ) ) [EOL] elif args . command == [string] and current_player : [EOL] print ( _dbusValueToPython ( current_player . _metadata ) ) [EOL] elif args . command == [string] and current_player : [EOL] current_player . raisePlayer ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $barscripts.mpris.Player$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $barscripts.mpris.Player$ 0 0 0 0 $barscripts.mpris.Player$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $barscripts.mpris.Player$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $barscripts.mpris.Player$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 $typing.Any$ 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 $barscripts.mpris.PlayerManager$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $barscripts.mpris.PlayerManager$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $barscripts.mpris.PlayerManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0