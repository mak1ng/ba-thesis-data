[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , Match , Tuple , List , Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] [EOL] import re [EOL] [EOL] import sphinx_rtd_theme [EOL] [EOL] [EOL] def get_library_version ( ) : [EOL] with open ( [string] ) as f : [EOL] for line in f . readlines ( ) : [EOL] m = re . search ( [string] , line ) [EOL] if m : [EOL] return m . group ( [string] ) [EOL] return [string] [EOL] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] version = get_library_version ( ) [EOL] [comment] [EOL] release = get_library_version ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] autosummary_generate = True [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [EOL] source_parsers = { [string] : [string] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : ( [string] , None ) , [string] : ( [string] , None ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] [EOL] from os . path import abspath [EOL] [EOL] from bravado . client import SwaggerClient [EOL] from jsonschema import ValidationError [EOL] from six . moves . urllib . parse import urljoin [EOL] from six . moves . urllib . request import pathname2url [EOL] [EOL] old_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] new_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] [EOL] object_to_send = { } [EOL] [EOL] print ( [string] ) [EOL] old_client . endpoint . post_endpoint ( body = object_to_send ) [EOL] [EOL] print ( [string] ) [EOL] try : [EOL] new_client . endpoint . post_endpoint ( body = object_to_send ) [EOL] raise RuntimeError ( [string] ) [EOL] except ValidationError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] [EOL] from os . path import abspath [EOL] [EOL] from bravado . client import SwaggerClient [EOL] from six . moves . urllib . parse import urljoin [EOL] from six . moves . urllib . request import pathname2url [EOL] [EOL] old_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] new_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] [EOL] print ( [string] ) [EOL] old_client . endpoint . post_endpoint ( ) [EOL] print ( [string] ) [EOL] try : [EOL] new_client . endpoint . post_endpoint ( ) [EOL] raise RuntimeError ( [string] ) [EOL] except AttributeError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] [EOL] from os . path import abspath [EOL] [EOL] from bravado . client import SwaggerClient [EOL] from bravado_core . validate import validate_schema_object [EOL] from jsonschema import ValidationError [EOL] from six . moves . urllib . parse import urljoin [EOL] from six . moves . urllib . request import pathname2url [EOL] [EOL] old_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] new_client = SwaggerClient . from_url ( spec_url = urljoin ( [string] , pathname2url ( abspath ( [string] ) ) ) , ) [EOL] [EOL] object_to_validate = { } [EOL] [EOL] print ( [string] ) [EOL] try : [EOL] validate_schema_object ( swagger_spec = old_client . swagger_spec , schema_object_spec = old_client . swagger_spec . definitions [ [string] ] . _model_spec , value = object_to_validate , ) [EOL] raise RuntimeError ( [string] ) [EOL] except ValidationError : [EOL] pass [EOL] [EOL] print ( [string] ) [EOL] validate_schema_object ( swagger_spec = new_client . swagger_spec , schema_object_spec = new_client . swagger_spec . definitions [ [string] ] . _model_spec , value = object_to_validate , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0
	0
[comment] [EOL] from typing import Optional , Match , Set , List , Any , Pattern [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] [EOL] import os [EOL] import re [EOL] import sys [EOL] from glob import iglob [EOL] from itertools import chain [EOL] from subprocess import CalledProcessError [EOL] from subprocess import check_call [EOL] [EOL] import pytest [EOL] [EOL] [EOL] BLACKLIST_MODULES_FROM_DOCUMENTATION = { [string] , } [EOL] [EOL] [EOL] def _extract_documented_models ( doc_file ) : [EOL] regex = re . compile ( [string] ) [EOL] with open ( doc_file ) as f : [EOL] for line in f . readlines ( ) : [EOL] m = regex . search ( line ) [EOL] if m : [EOL] yield m . group ( str ( [string] ) ) [EOL] [EOL] [EOL] def _from_path_to_module ( PACKAGE_DIR , path ) : [EOL] return [string] . format ( lib = os . path . basename ( PACKAGE_DIR ) , module = os . path . relpath ( path , PACKAGE_DIR ) . replace ( [string] , [string] ) . replace ( os . sep , [string] ) , ) . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def _contain_docstring_or_code ( path ) : [EOL] with open ( path ) as f : [EOL] lines_with_no_comments = [ re . sub ( [string] , [string] , line . rstrip ( ) ) for line in f . readlines ( ) ] [EOL] not_empty_lines = [ line for line in lines_with_no_comments if line . strip ( ) ] [EOL] return any ( not_empty_lines ) [EOL] [EOL] [EOL] REPOSITORY_ROOT = os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] DOC_DIR = os . path . join ( REPOSITORY_ROOT , [string] , [string] ) [EOL] PACKAGE_DIR = os . path . join ( REPOSITORY_ROOT , [string] ) [EOL] SOURCE_FILES = set ( chain ( iglob ( os . path . join ( PACKAGE_DIR , [string] ) ) , iglob ( os . path . join ( PACKAGE_DIR , [string] , [string] ) ) , ) ) [EOL] PYTHON_MODULES = { _from_path_to_module ( PACKAGE_DIR , source_file ) for source_file in SOURCE_FILES if _contain_docstring_or_code ( source_file ) } - BLACKLIST_MODULES_FROM_DOCUMENTATION [EOL] DOC_FILES = set ( chain ( iglob ( os . path . join ( DOC_DIR , [string] ) ) , iglob ( os . path . join ( DOC_DIR , [string] , [string] ) ) , iglob ( os . path . join ( DOC_DIR , [string] ) ) , iglob ( os . path . join ( DOC_DIR , [string] , [string] ) ) , ) ) [EOL] DOCUMENTED_MODULES = set ( _extract_documented_models ( os . path . join ( DOC_DIR , [string] ) ) ) [EOL] BACKWARD_INCOMPATIBILITY_EXAMPLES = sorted ( iglob ( os . path . join ( DOC_DIR , [string] , [string] , [string] ) ) , ) [EOL] [EOL] [EOL] def test_ensure_all_modules_are_available_in_documentation ( ) : [EOL] not_documented_modules = PYTHON_MODULES - DOCUMENTED_MODULES [EOL] assert not not_documented_modules , [string] [string] . format ( [string] . join ( sorted ( not_documented_modules ) ) , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , BACKWARD_INCOMPATIBILITY_EXAMPLES , ) def test_backward_incompatibility_testers_are_not_failing ( backward_incompatibility_example_dir ) : [EOL] tester = os . path . join ( backward_incompatibility_example_dir , [string] ) [EOL] try : [EOL] check_call ( [ sys . executable , tester ] , cwd = backward_incompatibility_example_dir , ) [EOL] except CalledProcessError : [comment] [EOL] pytest . fail ( [string] . format ( tester ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , BACKWARD_INCOMPATIBILITY_EXAMPLES , ) def test_ensure_that_examples_are_covering_the_correct_rule ( backward_incompatibility_example_dir ) : [EOL] old_spec = os . path . join ( backward_incompatibility_example_dir , [string] ) [EOL] new_spec = os . path . join ( backward_incompatibility_example_dir , [string] ) [EOL] rule_name = os . path . basename ( backward_incompatibility_example_dir ) [EOL] try : [EOL] check_call ( [ sys . executable , [string] , [string] , [string] , old_spec , new_spec , [string] , rule_name ] , cwd = backward_incompatibility_example_dir , ) [EOL] pytest . fail ( [string] . format ( backward_incompatibility_example_dir , rule_name ) ) [EOL] except CalledProcessError : [comment] [EOL] [comment] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0