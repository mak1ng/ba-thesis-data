from typing import Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] RESOLUTION_WIDTH = [number] [EOL] RESOLUTION_HEIGHT = [number] [EOL] RESOLUTION = ( RESOLUTION_WIDTH , RESOLUTION_HEIGHT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , List , Optional , Tuple [EOL] import typing [EOL] import builtins [EOL] import main [EOL] [docstring] [EOL] import random [EOL] import typing [EOL] [EOL] import math [EOL] import pygame [EOL] from pygame import locals [EOL] [EOL] import settings [EOL] [EOL] pygame . init ( ) [EOL] black = ( [number] , [number] , [number] ) [EOL] white = ( [number] , [number] , [number] ) [EOL] red = ( [number] , [number] , [number] ) [EOL] green = ( [number] , [number] , [number] ) [EOL] blue = ( [number] , [number] , [number] ) [EOL] [EOL] Coords = typing . Tuple [ int , int ] [EOL] [EOL] [EOL] class World : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , display ) : [EOL] [docstring] [EOL] self . _display = display [EOL] self . grid = { } [EOL] [EOL] def render_frame ( self ) : [EOL] [docstring] [EOL] self . _display . fill ( black ) [EOL] for coords , creature in self . grid . items ( ) : [EOL] self . _display . set_at ( coords , creature . color ) [EOL] pygame . display . update ( ) [EOL] [EOL] def update_cell ( self , coords ) : [EOL] [docstring] [EOL] for adjacent_cell in self . get_adjacent_coords ( coords ) + [ coords ] : [EOL] creature = self . grid . get ( adjacent_cell ) [EOL] if creature : [EOL] creature . update_activeness ( ) [EOL] [EOL] @ staticmethod def get_adjacent_coords ( coords ) : [EOL] [docstring] [EOL] coords_set = [ ] [EOL] if coords [ [number] ] > [number] : [EOL] coords_set . append ( ( coords [ [number] ] - [number] , coords [ [number] ] ) ) [EOL] if coords [ [number] ] < settings . RESOLUTION_WIDTH - [number] : [EOL] coords_set . append ( ( coords [ [number] ] + [number] , coords [ [number] ] ) ) [EOL] if coords [ [number] ] > [number] : [EOL] coords_set . append ( ( coords [ [number] ] , coords [ [number] ] - [number] ) ) [EOL] if coords [ [number] ] < settings . RESOLUTION_HEIGHT - [number] : [EOL] coords_set . append ( ( coords [ [number] ] , coords [ [number] ] + [number] ) ) [EOL] return coords_set [EOL] [EOL] [EOL] class Colony : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , world , color ) : [EOL] [docstring] [EOL] self . _world = world [EOL] self . _color = color [EOL] [EOL] @ property def color ( self ) : [EOL] [docstring] [EOL] return self . _color [EOL] [EOL] @ property def world ( self ) : [EOL] [docstring] [EOL] return self . _world [EOL] [EOL] @ staticmethod def spawn ( world , color , coords = None , count = [number] ) : [EOL] [docstring] [EOL] if coords is None : [EOL] coords = ( random . randint ( [number] , settings . RESOLUTION_WIDTH - [number] ) , random . randint ( [number] , settings . RESOLUTION_HEIGHT - [number] ) , ) [EOL] colony = Colony ( world , color ) [EOL] for _ in range ( count ) : [EOL] radius = [number] [EOL] for _ in range ( [number] ) : [EOL] angle = [number] * math . pi * random . random ( ) [EOL] x = int ( radius * math . cos ( angle ) + coords [ [number] ] ) [EOL] y = int ( radius * math . sin ( angle ) + coords [ [number] ] ) [EOL] if x >= settings . RESOLUTION_WIDTH or y >= settings . RESOLUTION_HEIGHT : [EOL] break [EOL] if ( x , y ) not in world . grid : [EOL] Creature . spawn ( colony , ( x , y ) ) [EOL] break [EOL] radius += [number] [EOL] return colony [EOL] [EOL] [EOL] class Creature : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , colony , coords ) : [EOL] [docstring] [EOL] self . _colony = colony [EOL] self . _coords = coords [EOL] self . is_active = True [EOL] [EOL] @ property def color ( self ) : [EOL] [docstring] [EOL] return self . _colony . color [EOL] [EOL] @ property def world ( self ) : [EOL] [docstring] [EOL] return self . _colony . world [EOL] [EOL] @ property def coords ( self ) : [EOL] [docstring] [EOL] return self . _coords [EOL] [EOL] @ property def colony ( self ) : [EOL] [docstring] [EOL] return self . _colony [EOL] [EOL] @ staticmethod def spawn ( colony , coords ) : [EOL] [docstring] [EOL] colony . world . grid [ coords ] = Creature ( colony , coords , ) [EOL] colony . world . update_cell ( coords ) [EOL] [EOL] def update_activeness ( self ) : [EOL] [docstring] [EOL] for adjacent_cell in self . world . get_adjacent_coords ( self . coords ) : [EOL] adjacent_creature = self . world . grid . get ( adjacent_cell ) [EOL] if not adjacent_creature or adjacent_creature . colony != self . colony : [EOL] self . is_active = True [EOL] return [EOL] self . is_active = False [EOL] [EOL] def act ( self ) : [EOL] [docstring] [EOL] coords_set = self . world . get_adjacent_coords ( self . _coords ) [EOL] target_coords = random . choice ( coords_set ) [EOL] if self . world . grid . get ( target_coords ) is None : [EOL] Creature . spawn ( self . _colony , target_coords ) [EOL] else : [EOL] pass [EOL] [EOL] [EOL] w = World ( pygame . display . set_mode ( settings . RESOLUTION ) ) [EOL] Colony . spawn ( w , white ) [EOL] Colony . spawn ( w , red ) [EOL] Colony . spawn ( w , green ) [EOL] Colony . spawn ( w , blue ) [EOL] [EOL] while True : [EOL] [ creature . act ( ) for creature in list ( w . grid . values ( ) ) if creature . is_active ] [EOL] w . render_frame ( ) [EOL] for event in pygame . event . get ( ) : [EOL] if event . type in ( locals . QUIT , locals . KEYDOWN ) : [EOL] exit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],Creature]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Coords$ 0 0 0 0 0 0 0 0 0 0 0 0 $Coords$ 0 0 0 $Coords$ 0 0 0 $typing.Optional[main.Creature]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[main.Creature]$ 0 0 $typing.Optional[main.Creature]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int],]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $World$ 0 0 0 0 0 0 0 0 0 0 0 $World$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $World$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $World$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $World$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Colony$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $Colony$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Colony$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $Colony$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $Colony$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $Colony$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0