import builtins [EOL] from typing import Literal , Union , List , Any [EOL] import typing [EOL] import typing_extensions [EOL] import redis [EOL] import os [EOL] [EOL] import redis [EOL] from rq import Worker , Queue , Connection [EOL] [EOL] listen = [ [string] , [string] , [string] ] [EOL] [EOL] redis_url = os . getenv ( [string] , [string] ) [EOL] [EOL] conn = redis . from_url ( redis_url ) [EOL] [EOL] if __name__ == [string] : [EOL] with Connection ( conn ) : [EOL] worker = Worker ( map ( Queue , listen ) ) [EOL] worker . work ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $redis.client.Redis[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $redis.client.Redis[builtins.bytes]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import api_rules [EOL] from rest_framework import serializers [EOL] from django . contrib . auth import get_user_model [EOL] from . models import PermissionRow [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class PermissionSerializer ( serializers . ModelSerializer ) : [EOL] email = serializers . EmailField ( help_text = [string] , write_only = True ) [EOL] [EOL] class Meta : [EOL] model = PermissionRow [EOL] fields = [ [string] , [string] , [string] , ] [EOL] read_only_fields = [ [string] ] [EOL] [EOL] def validate_email ( self , value , * args , ** kwargs ) : [EOL] [EOL] user = User . objects . filter ( email = value ) . first ( ) [EOL] if user is None : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] [comment] [EOL] return user . id [EOL] [EOL] @ staticmethod def validate_permission ( value ) : [EOL] if value . upper ( ) != [string] and value . upper ( ) != [string] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate ( self , attrs ) : [EOL] request = self . context . get ( [string] ) [EOL] dict = request . parser_context . get ( [string] ) [EOL] desk_id = dict [ [string] ] [EOL] user_id = attrs . pop ( [string] ) [EOL] attrs . __setitem__ ( [string] , user_id ) [EOL] row = PermissionRow . objects . filter ( user_id = user_id , related_desk_id = desk_id ) [EOL] if row . exists ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return attrs [EOL] [EOL] def create ( self , validated_data ) : [EOL] [EOL] obj = PermissionRow . objects . create ( user_id = validated_data [ [string] ] , permission = validated_data [ [string] ] . upper ( ) , related_desk_id = validated_data [ [string] ] ) [EOL] obj . save ( ) [EOL] return obj [EOL] [EOL] [EOL] class UpdatePermissionRowSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = PermissionRow [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] @ staticmethod def validate_permission ( value ) : [EOL] if value . upper ( ) != [string] and value . upper ( ) != [string] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.serializers.PermissionSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.models.PermissionRow]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.models.PermissionRow]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RulesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] from . models import PermissionRow [EOL] [EOL] admin . site . register ( PermissionRow ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import api_rules [EOL] from django . db import models [EOL] from desk . model import Desk [EOL] from django . conf import settings [EOL] [EOL] [EOL] class PermissionRow ( models . Model ) : [EOL] [docstring] [EOL] permission = models . CharField ( max_length = [number] , default = [string] ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] related_desk = models . ForeignKey ( Desk , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . user } [string] { self . permission } [string] { self . related_desk } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.models.PermissionRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.models.PermissionRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.models.PermissionRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from . views import SetUsersPermissionsAPIView , UpdateUsersPermissionsAPIView [EOL] [EOL] urlpatterns = [ path ( [string] , SetUsersPermissionsAPIView . as_view ( ) ) , path ( [string] , UpdateUsersPermissionsAPIView . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] from rest_framework import permissions [EOL] from api_rules . models import PermissionRow [EOL] from django . core . cache import cache [EOL] from desk . model import Desk , Column , Comment , Task [EOL] from debug . db_queries import DbQueries [EOL] from redis_manager . permission_cache_manager import PermissionCacheManager [EOL] from debug . db_queries import DbQueries [EOL] LOCAL_DEBUG_SQL = True [EOL] [EOL] permission_dict = { [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] [EOL] def check_base_permission ( request , view , permission , weight ) : [EOL] [docstring] [EOL] [EOL] dict = request . parser_context . get ( [string] ) [EOL] [EOL] user_perms = PermissionCacheManager . get_user_perms ( user_id = request . user . id ) [EOL] [EOL] [comment] [EOL] if [string] in dict . keys ( ) : [EOL] [EOL] [comment] [EOL] if dict [ [string] ] in user_perms . keys ( ) : [EOL] desk_role = user_perms [ dict [ [string] ] ] [EOL] return permission_dict [ desk_role ] > weight [EOL] else : [EOL] return False [EOL] [EOL] else : [EOL] return True [EOL] [EOL] [EOL] class IsAdminOfDesk ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL] [EOL] [EOL] class IsEditorOfDeskOrHigher ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [EOL] [comment] [EOL] if isinstance ( obj , Task ) : [EOL] if obj . current_executor == request . user : [EOL] return True [EOL] [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL] [EOL] [EOL] class IsStaffOfDeskOrHigher ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return check_base_permission ( request , view , [string] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import api_rules [EOL] from django . db import IntegrityError [EOL] from . permissions import IsAdminOfDesk , IsEditorOfDeskOrHigher [EOL] from . serializers import UpdatePermissionRowSerializer , PermissionSerializer [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from rest_framework import generics [EOL] from . models import PermissionRow [EOL] from desk . model import Desk [EOL] from rest_framework import permissions [EOL] from rest_framework . response import Response [EOL] from django . contrib . auth import get_user_model [EOL] from user_auth . models import UsersDesks [EOL] from redis_manager . permission_cache_manager import PermissionCacheManager [EOL] from django . http import QueryDict [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class SetUsersPermissionsAPIView ( generics . CreateAPIView , generics . ListAPIView , generics . UpdateAPIView , generics . DestroyAPIView , generics . ListCreateAPIView ) : [EOL] authentication_classes = [ SessionAuthentication ] [EOL] permission_classes = [ permissions . IsAuthenticated , IsEditorOfDeskOrHigher ] [EOL] serializer_class = PermissionSerializer [EOL] queryset = PermissionRow . objects . select_related ( [string] ) . select_related ( [string] ) . all ( ) [EOL] [EOL] def get_serializer_class ( self , * args , ** kwargs ) : [EOL] serializer_class = PermissionSerializer [EOL] if self . request . method == [string] : [EOL] serializer_class = PermissionSerializer [EOL] [EOL] elif self . request . method in ( [string] , [string] , [string] ) : [EOL] serializer_class = UpdatePermissionRowSerializer [EOL] [EOL] return serializer_class [EOL] [EOL] def get_queryset ( self ) : [EOL] qs = self . queryset . filter ( related_desk_id = self . kwargs [ [string] ] ) [EOL] [EOL] return qs [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] queryset = self . get_queryset ( ) [EOL] [EOL] page = self . paginate_queryset ( queryset ) [EOL] if page is not None : [EOL] serializer = self . get_serializer ( page , many = True ) [EOL] return self . get_paginated_response ( serializer . data ) [EOL] [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] desk_id = self . kwargs [ [string] ] [EOL] return serializer . save ( related_desk_id = desk_id ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] data = QueryDict ( mutable = True ) [EOL] print ( type ( request . data ) ) [EOL] data . update ( request . data ) [EOL] [EOL] serializer = self . get_serializer ( data = data , many = isinstance ( data , list ) ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_create ( serializer ) [EOL] [EOL] obj = serializer . instance [EOL] headers = self . get_success_headers ( serializer . data ) [EOL] [EOL] rel = UsersDesks . objects . create ( user_id = obj . user_id , desks_id = self . kwargs [ [string] ] ) [EOL] rel . save ( ) [EOL] [EOL] [comment] [EOL] PermissionCacheManager . update_cache_of_user ( user_id = obj . user_id , permission = obj . permission , desk_id = self . kwargs [ [string] ] ) [EOL] [EOL] return Response ( serializer . data , status = [number] , headers = headers ) [EOL] [EOL] [EOL] class UpdateUsersPermissionsAPIView ( generics . UpdateAPIView , generics . DestroyAPIView , ) : [EOL] authentication_classes = [ SessionAuthentication ] [EOL] permission_classes = [ permissions . IsAuthenticated , IsEditorOfDeskOrHigher ] [EOL] serializer_class = UpdatePermissionRowSerializer [EOL] queryset = PermissionRow . objects . prefetch_related ( [string] ) . select_related ( [string] ) . all ( ) [EOL] [EOL] def get_object ( self ) : [EOL] [EOL] obj = self . queryset . filter ( related_desk_id = self . kwargs [ [string] ] , user_id = self . request . data [ [string] ] ) . first ( ) [EOL] [EOL] return obj [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] def patch ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] obj = self . get_object ( ) [EOL] [EOL] if obj is None : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] if obj . permission == [string] : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] serializer = self . get_serializer ( obj , data = request . data , partial = True ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_update ( serializer ) [EOL] [EOL] [comment] [EOL] post_data = request . data [EOL] user_id = post_data [ [string] ] [EOL] [EOL] PermissionCacheManager . update_cache_of_user ( user_id = user_id , permission = post_data [ [string] ] , desk_id = self . kwargs [ [string] ] ) [EOL] [EOL] if getattr ( obj , [string] , None ) : [EOL] [comment] [EOL] [comment] [EOL] obj . _prefetched_objects_cache = { } [EOL] [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] obj = self . get_object ( ) [EOL] [EOL] if obj is None : [EOL] return Response ( { [string] : f" [string] " } , status = [number] ) [EOL] [EOL] if obj . permission == [string] : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] [comment] [EOL] user_id = request . data . get ( [string] ) [EOL] rel_to_desk = UsersDesks . objects . filter ( user_id = user_id , desks_id = obj . related_desk . id ) . delete ( ) [EOL] [EOL] [comment] [EOL] PermissionCacheManager . delete_user_cache_row ( user_id = user_id , desk_id = obj . related_desk_id ) [EOL] [EOL] [comment] [EOL] obj . delete ( ) [EOL] [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api_rules.serializers.UpdatePermissionRowSerializer]$ 0 0 0 $typing.Type[api_rules.views.UpdateUsersPermissionsAPIView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] from django . conf import settings [EOL] from django . utils . cache import patch_vary_headers [EOL] from django . utils . http import cookie_date [EOL] from django . contrib . sessions . middleware import SessionMiddleware [EOL] [EOL] [EOL] class SessionHostDomainMiddleware ( SessionMiddleware ) : [EOL] def process_response ( self , request , response ) : [EOL] [docstring] [EOL] try : [EOL] accessed = request . session . accessed [EOL] modified = request . session . modified [EOL] except AttributeError : [EOL] pass [EOL] else : [EOL] if accessed : [EOL] patch_vary_headers ( response , ( [string] , ) ) [EOL] if modified or settings . SESSION_SAVE_EVERY_REQUEST : [EOL] if request . session . get_expire_at_browser_close ( ) : [EOL] max_age = None [EOL] expires = None [EOL] else : [EOL] max_age = request . session . get_expiry_age ( ) [EOL] expires_time = time . time ( ) + max_age [EOL] expires = cookie_date ( expires_time ) [EOL] [comment] [EOL] [comment] [EOL] if response . status_code != [number] : [EOL] request . session . save ( ) [EOL] host = request . get_host ( ) . split ( [string] ) [ [number] ] [EOL] response . set_cookie ( settings . SESSION_COOKIE_NAME , request . session . session_key , max_age = max_age , expires = expires , domain = host , path = settings . SESSION_COOKIE_PATH , secure = settings . SESSION_COOKIE_SECURE or None , httponly = settings . SESSION_COOKIE_HTTPONLY or None ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . cache import cache [EOL] from django . conf import settings [EOL] [EOL] [EOL] class PermissionCacheMiddleware : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [EOL] def __call__ ( self , request ) : [EOL] if request . user . is_authenticated : [EOL] [EOL] user_id = request . user . id [EOL] ttl = settings . CACHE_TTL [EOL] [EOL] [comment] [EOL] cache . expire ( user_id , timeout = ttl * [number] ) [EOL] [EOL] response = self . get_response ( request ) [EOL] [EOL] else : [EOL] response = self . get_response ( request ) [EOL] [EOL] print ( response . cookies ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0
	0
from typing import Any [EOL] import typing [EOL] from django . core . cache import cache [EOL] from django . conf import settings [EOL] from rest_framework . response import Response [EOL] import json [EOL] [EOL] [EOL] class CSRF : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [EOL] def __call__ ( self , request ) : [EOL] try : [EOL] domain = request . META [ [string] ] [EOL] except KeyError : [EOL] domain = request . META [ [string] ] [EOL] except KeyError : [EOL] domain = None [EOL] [EOL] if domain in settings . CSRF_TRUSTED_ORIGINS : [EOL] request . _dont_enforce_csrf_checks = True [EOL] response = self . get_response ( request ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from . views import UserRegisterAPIView , AuthAPIView , UserAPIView , LogoutAPIView [EOL] from django . contrib . auth import views [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , UserAPIView . as_view ( ) ) , path ( [string] , UserRegisterAPIView . as_view ( ) ) , path ( [string] , AuthAPIView . as_view ( ) ) , path ( [string] , LogoutAPIView . as_view ( ) ) ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Type [EOL] import typing [EOL] import user_auth [EOL] from rest_framework import serializers [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class UserRegisterSerializer ( serializers . ModelSerializer ) : [EOL] password = serializers . CharField ( style = { [string] : [string] } , write_only = True ) [EOL] password2 = serializers . CharField ( style = { [string] : [string] } , write_only = True ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] def validate ( self , data ) : [EOL] pw = data . get ( [string] ) [EOL] pw2 = data . pop ( [string] ) [EOL] [EOL] if pw != pw2 : [EOL] [comment] [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return data [EOL] [EOL] def create ( self , validated_data ) : [EOL] user = User ( username = validated_data . get ( [string] ) , email = validated_data . get ( [string] ) , first_name = validated_data . get ( [string] ) , last_name = validated_data . get ( [string] ) ) [EOL] user . set_password ( validated_data . get ( [string] ) ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] [EOL] class UserLoginSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.serializers.UserLoginSerializer.Meta]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.serializers.UserRegisterSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.serializers.UserRegisterSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.serializers.UserLoginSerializer.Meta]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.serializers.UserLoginSerializer.Meta]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import user_auth [EOL] from desk . model import Desk [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractBaseUser , PermissionsMixin , AbstractUser , UserManager , Group [EOL] [EOL] [EOL] class CustomUserManager ( UserManager ) : [EOL] pass [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] objects = CustomUserManager ( ) [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] [EOL] email = models . EmailField ( max_length = [number] , unique = True ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] [EOL] REQUIRED_FIELDS = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class UsersDesks ( models . Model ) : [EOL] [docstring] [EOL] [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] desks = models . ForeignKey ( Desk , on_delete = models . CASCADE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $user_auth.models.CustomUserManager$ 0 0 0 0 0 $typing.Type[user_auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.models.UsersDesks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user_auth.models.UsersDesks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from django . conf import settings [EOL] from . models import User , UsersDesks [EOL] [EOL] admin . site . register ( User ) [EOL] admin . site . register ( UsersDesks ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , List , Any , Type [EOL] import typing [EOL] import user_auth [EOL] from api_rules . permissions import PermissionRow [EOL] from . serializers import UserRegisterSerializer , UserLoginSerializer , UserSerializer [EOL] from django . contrib . auth import get_user_model , login , logout , authenticate [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from rest_framework import generics [EOL] from redis_manager . permission_cache_manager import PermissionCacheManager [EOL] from django . http import HttpResponse [EOL] from rest_framework import permissions [EOL] from rest_framework . views import APIView [EOL] from django . conf import settings [EOL] from django . middleware . csrf import get_token [EOL] from django . core . mail import send_mail [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserAPIView ( generics . RetrieveAPIView ) : [EOL] lookup_field = [string] [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] [EOL] [EOL] class UserRegisterAPIView ( generics . CreateAPIView ) : [EOL] [docstring] [EOL] queryset = get_user_model ( ) . objects . all ( ) [EOL] serializer_class = UserRegisterSerializer [EOL] [EOL] authentication_classes = [ ] [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] if request . user . is_active : [EOL] from django . contrib . auth . models import AnonymousUser [EOL] request . user = AnonymousUser ( ) [EOL] request . session . flush ( ) [EOL] logout ( request ) [EOL] print ( [string] ) [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_create ( serializer ) [EOL] [EOL] headers = self . get_success_headers ( serializer . data ) [EOL] data = request . data [EOL] email = data . get ( [string] ) [EOL] password = data . get ( [string] ) [EOL] [comment] [EOL] user = authenticate ( request , email = email , password = password ) [EOL] [EOL] login ( request , user ) [EOL] print ( request . session . session_key ) [EOL] [comment] [EOL] send ( request , email ) [EOL] response = Response ( set_users_cookie ( user , request ) , status = status . HTTP_201_CREATED , headers = headers ) [EOL] response . set_cookie ( [string] , user . username , domain = [string] ) [EOL] return response [EOL] [EOL] [EOL] class AuthAPIView ( generics . CreateAPIView ) : [EOL] [docstring] [EOL] queryset = get_user_model ( ) . objects . all ( ) [EOL] serializer_class = UserLoginSerializer [EOL] permission_classes = [ permissions . AllowAny ] [EOL] [EOL] authentication_classes = [ ] [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] print ( [string] ) [EOL] if request . user . is_active : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] data = request . data [EOL] [EOL] email = data . get ( [string] ) [EOL] password = data . get ( [string] ) [EOL] [EOL] user = authenticate ( request , email = email , password = password ) [EOL] if user is not None : [EOL] [EOL] PermissionCacheManager . set_user_perms_in_cache ( user . id ) [EOL] [EOL] login ( request , user ) [EOL] [EOL] response = Response ( set_users_cookie ( user , request ) , status = [number] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] return response [EOL] [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] [EOL] def set_users_cookie ( user , request ) : [EOL] [EOL] user_data = { [string] : user . id , [string] : user . email , [string] : user . username , [string] : user . first_name , [string] : user . last_name , [string] : request . session . session_key , [string] : get_token ( request ) } [EOL] [EOL] return user_data [EOL] [EOL] [EOL] class LogoutAPIView ( APIView ) : [EOL] permission_classes = [ permissions . AllowAny ] [EOL] [EOL] authentication_classes = [ ] [EOL] [EOL] def post ( self , request ) : [EOL] [EOL] logout ( request ) [EOL] response = Response ( { [string] : [string] } , status = [number] ) [EOL] response . delete_cookie ( [string] ) [EOL] response . delete_cookie ( [string] ) [EOL] response . delete_cookie ( [string] ) [EOL] response . delete_cookie ( [string] ) [EOL] response . delete_cookie ( [string] ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def send ( request , email ) : [EOL] [EOL] subject = [string] [EOL] message = [string] [EOL] email_from = settings . EMAIL_HOST_USER [EOL] recipient_list = [ email ] [EOL] [EOL] send_mail ( subject = subject , message = message , from_email = email_from , recipient_list = recipient_list ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , Type [EOL] import typing [EOL] import redis_manager [EOL] from django . core . cache import cache [EOL] from api_rules . models import PermissionRow [EOL] from django . core . cache . backends . base import DEFAULT_TIMEOUT [EOL] from django . conf import settings [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class PermissionCacheManager : [EOL] [docstring] [EOL] ttl = settings . CACHE_TTL [EOL] [EOL] @ classmethod def get_user_perms ( self , user_id ) : [EOL] [docstring] [EOL] [EOL] id = self . _get_user_id ( user_id ) [EOL] [EOL] if id is None : [EOL] return None [EOL] [EOL] user_perms = cache . get ( id ) [EOL] [EOL] if user_perms is not None : [EOL] return user_perms [EOL] else : [EOL] return self . set_user_perms_in_cache ( id ) [EOL] [EOL] @ classmethod def _get_user_id ( self , user_id ) : [EOL] [docstring] [EOL] if not isinstance ( user_id , int ) : [EOL] return None [EOL] return user_id [EOL] [EOL] @ classmethod def set_user_perms_in_cache ( self , user_id ) : [EOL] [docstring] [EOL] [EOL] id = self . _get_user_id ( user_id ) [EOL] if id is None : [EOL] return None [EOL] [EOL] permissions = PermissionRow . objects . filter ( user_id = user_id ) [EOL] [EOL] [comment] [EOL] permission_dict = { perm . related_desk_id : perm . permission for perm in permissions } [EOL] [EOL] cache . set ( id , permission_dict , self . ttl * [number] ) [EOL] [EOL] return cache . get ( id ) [EOL] [EOL] @ classmethod def update_cache_of_user ( self , user_id , permission , desk_id ) : [EOL] data = cache . get ( user_id ) [EOL] [EOL] if data is not None : [EOL] data . update ( { desk_id : permission } ) [EOL] cache . set ( user_id , data ) [EOL] [EOL] @ classmethod def delete_user_cache_row ( self , user_id , desk_id ) : [EOL] [docstring] [EOL] [EOL] user_info = cache . get ( user_id ) [EOL] del user_info [ desk_id ] [EOL] cache . set ( user_id , user_info ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[redis_manager.permission_cache_manager.PermissionCacheManager]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import desk [EOL] import redis_manager [EOL] from django . core . cache import cache [EOL] from desk . model import Comment [EOL] from django . core . cache . backends . base import DEFAULT_TIMEOUT [EOL] from django . conf import settings [EOL] from desk . api_comments . serializers import CommentSerializer [EOL] [EOL] [EOL] class CommentCacheManager : [EOL] [docstring] [EOL] ttl = settings . CACHE_TTL * [number] * [number] [EOL] key = [string] [EOL] [EOL] @ classmethod def get_comments_from_cache ( self , related_task_id ) : [EOL] comments = cache . get ( self . key + str ( related_task_id ) ) [EOL] print ( type ( comments ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] return comments if comments is not None else self . set_comments_in_cache ( related_task_id ) [EOL] [EOL] @ classmethod def set_comments_in_cache ( self , related_task_id ) : [EOL] [EOL] comments = Comment . objects . filter ( related_task_id = related_task_id , is_child = False ) [EOL] [EOL] serializer = CommentSerializer ( comments , many = True ) [EOL] cache . set ( self . key + str ( related_task_id ) , serializer . data , self . ttl ) [EOL] [EOL] return serializer . data [EOL] [EOL] [comment] [EOL] @ classmethod def update_comments_in_cache ( self , related_task_id , new_data ) : [EOL] [EOL] comment_data = cache . get ( self . key + str ( related_task_id ) ) [EOL] key = self . key + str ( related_task_id ) [EOL] [EOL] if comment_data is None : [EOL] cache . set ( key , new_data , self . ttl ) [EOL] [EOL] else : [EOL] comment_data . append ( new_data ) [EOL] cache . set ( key , comment_data , self . ttl ) [EOL] [EOL] cache . expire ( key , self . ttl ) [EOL] [EOL] return comment_data or new_data [EOL] [EOL] [EOL] @ classmethod def is_cached ( self , related_task_id ) : [EOL] [docstring] [EOL] data = cache . get ( self . key + str ( related_task_id ) ) [EOL] return True if data else False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[redis_manager.comments_cache_manager.CommentCacheManager]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desk.api_comments.serializers.CommentSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desk.api_comments.serializers.CommentSerializer$ 0 0 0 0 0 0 0 0 0 0 $desk.api_comments.serializers.CommentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from rest_framework . documentation import include_docs_urls [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from django . conf . urls import url [EOL] from django . conf . urls . static import static [EOL] from django . conf import settings [EOL] [EOL] from rest_framework import routers [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , url ( [string] , include_docs_urls ( title = [string] , public = False ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] import debug_toolbar [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) , ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import inspect [EOL] from django . db import connection [EOL] from django . conf import settings [EOL] import inspect [EOL] [EOL] [EOL] class DbQueries : [EOL] [EOL] @ staticmethod def show ( l_dbg_sql = None , levels = [number] , view = None ) : [EOL] [docstring] [EOL] frame = inspect . stack ( ) [EOL] [EOL] if l_dbg_sql is None : [EOL] pass [EOL] elif l_dbg_sql and settings . DEBUG_SQL and settings . DEBUG_SQL : [EOL] [comment] [EOL] [comment] [EOL] qdic = { } [EOL] print ( [string] . format ( frame [ levels ] [ [number] ] ) ) [EOL] levels -= [number] [EOL] while levels != [number] : [EOL] print ( [string] . format ( frame [ levels ] [ [number] ] ) ) [EOL] levels -= [number] [EOL] print ( [string] . format ( frame [ [number] ] [ [number] ] , len ( connection . queries ) ) ) [EOL] for q in connection . queries : [EOL] qsql = q [ [string] ] [EOL] if qsql in qdic : [EOL] qdic [ qsql ] += [number] [EOL] print ( [string] . format ( qsql , qdic [ qsql ] ) ) [EOL] else : [EOL] qdic [ qsql ] = [number] [EOL] print ( [string] . format ( qsql ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[inspect.FrameInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[inspect.FrameInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[inspect.FrameInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[inspect.FrameInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
	0
from django . contrib import admin [EOL] from . model import Desk , Task , Column , Comment [EOL] [EOL] admin . site . register ( Desk ) [EOL] admin . site . register ( Task ) [EOL] admin . site . register ( Column ) [EOL] admin . site . register ( Comment ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DeskConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Tuple , Type [EOL] import typing [EOL] import desk [EOL] from django . db import models [EOL] from django . conf import settings [EOL] from django . utils . timezone import now [EOL] [EOL] [EOL] class Desk ( models . Model ) : [EOL] [docstring] [EOL] [EOL] author = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] description = models . TextField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name }" [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [comment] [EOL] @ property def desk_author ( self ) : [EOL] return self . author [EOL] [EOL] [EOL] class Column ( models . Model ) : [EOL] [docstring] [EOL] [EOL] author = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] [EOL] related_desk = models . ForeignKey ( Desk , related_name = [string] , on_delete = models . CASCADE , help_text = [string] ) [EOL] name = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] created = models . DateField ( auto_now_add = True , blank = True , editable = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name }" [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [comment] [EOL] @ property def desk_author ( self ) : [EOL] return self . related_desk . author [EOL] [EOL] [EOL] def upload_task_image ( instance , filename ) : [EOL] return [string] . format ( filename = filename ) [EOL] [EOL] [EOL] class Task ( models . Model ) : [EOL] [docstring] [EOL] [EOL] related_column = models . ForeignKey ( Column , related_name = [string] , on_delete = models . CASCADE , help_text = [string] ) [EOL] current_executor = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE , help_text = [string] ) [EOL] name = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] description = models . TextField ( max_length = [number] , help_text = [string] ) [EOL] task_deadline = models . DateField ( default = now , help_text = [string] ) [EOL] [EOL] image = models . ImageField ( upload_to = upload_task_image , blank = True , null = True ) [EOL] priority_choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] priority = models . CharField ( max_length = [number] , choices = priority_choices , default = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] " + self . description [ : [number] ] + [string] [EOL] [EOL] [comment] [EOL] @ property def desk_author ( self ) : [EOL] return self . related_column . related_desk . author [EOL] [EOL] [EOL] def upload_comment_image ( instance , filename ) : [EOL] return [string] . format ( filename = filename ) [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] [docstring] [EOL] author = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] comment_body = models . TextField ( max_length = [number] , help_text = [string] ) [EOL] related_task = models . ForeignKey ( Task , related_name = [string] , on_delete = models . CASCADE , help_text = [string] ) [EOL] [EOL] image = models . ImageField ( upload_to = upload_comment_image , null = True , blank = True ) [EOL] [EOL] is_child = models . BooleanField ( default = False ) [EOL] [EOL] parent = models . ForeignKey ( [string] , on_delete = models . CASCADE , default = None , blank = True , null = True , related_name = [string] ) [EOL] [EOL] [comment] [EOL] @ property def desk_author ( self ) : [EOL] return self . related_task . related_column . related_desk . author [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Desk]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Desk]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Desk]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Column]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Column]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Column]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Column]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any [EOL] import typing [EOL] import desk [EOL] from desk . api_comments . serializers import CommentSerializer [EOL] from desk . model import Desk , Comment [EOL] [EOL] [EOL] def get_columns_and_users ( desk_id , data ) : [EOL] [docstring] [EOL] [EOL] desk = Desk . objects . prefetch_related ( [string] , [string] ) . get ( id = desk_id ) [EOL] user_data = [ ] [EOL] users = desk . usersdesks_set . all ( ) [EOL] for row in users : [EOL] user_data . append ( { [string] : row . user . id , [string] : row . user . username , [string] : row . user . email } ) [EOL] [EOL] column_data = [ { [string] : row . id , [string] : row . name } for row in desk . columns . all ( ) ] [EOL] data [ [string] ] = column_data [EOL] data [ [string] ] = user_data [EOL] return data [EOL] [EOL] [EOL] def get_comments ( data , task_id ) : [EOL] [docstring] [EOL] comments = Comment . objects . select_related ( [string] , [string] ) . prefetch_related ( [string] ) . filter ( related_task_id = task_id , is_child = False ) [EOL] data_ser = CommentSerializer ( data = comments , many = True ) [EOL] data_ser . is_valid ( ) [EOL] data [ [string] ] = data_ser . data [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from . views import ( DeskAPIView , DeskDetailAPIView ) [EOL] from django . urls import path , include [EOL] from api_rules . views import SetUsersPermissionsAPIView [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , DeskAPIView . as_view ( ) ) , path ( [string] , DeskDetailAPIView . as_view ( ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import desk [EOL] from rest_framework import serializers [EOL] from desk . model import Desk [EOL] from django . db import models [EOL] from desk . api_columns . serializers import ColumnSerializer [EOL] [EOL] [EOL] class DeskSerializer ( serializers . ModelSerializer ) : [EOL] columns = ColumnSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Desk [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] ordering = [ [string] ] [EOL] read_only_fields = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desk.api_columns.serializers.ColumnSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Desk]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Dict , Union , List , Any , Type [EOL] import typing [EOL] import desk [EOL] from rest_framework . generics import get_object_or_404 [EOL] [EOL] from desk . model import Desk [EOL] from . serializers import DeskSerializer [EOL] from rest_framework import generics [EOL] from rest_framework import mixins , permissions [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from api_rules . models import PermissionRow [EOL] from user_auth . models import UsersDesks [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from api_rules . permissions import IsAdminOfDesk , IsEditorOfDeskOrHigher , IsStaffOfDeskOrHigher [EOL] from redis_manager . permission_cache_manager import PermissionCacheManager [EOL] from desk . actions . actions_data import get_columns_and_users , get_comments [EOL] [EOL] [EOL] class DeskAPIView ( generics . ListAPIView , mixins . CreateModelMixin , ) : [EOL] permission_classes = [ permissions . IsAuthenticated ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] serializer_class = DeskSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] queryset = Desk . objects . prefetch_related ( [string] ) . all ( ) [EOL] [EOL] [comment] [EOL] paginator = None [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] return serializer . save ( author = self . request . user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def list ( self , request , * args , ** kwargs ) : [EOL] current_user = request . user [EOL] [EOL] [comment] [EOL] queryset = self . queryset . filter ( permissionrow__user = current_user ) [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] [EOL] [comment] [EOL] return Response ( serializer . data ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] desk_object = self . perform_create ( serializer ) [EOL] [EOL] headers = self . get_success_headers ( serializer . data ) [EOL] [EOL] [comment] [EOL] rel = UsersDesks . objects . create ( user = request . user , desks = desk_object ) [EOL] rel . save ( ) [EOL] [EOL] p = PermissionRow . objects . create ( related_desk = desk_object , user = request . user , permission = [string] ) [EOL] p . save ( ) [EOL] [EOL] [comment] [EOL] PermissionCacheManager . update_cache_of_user ( user_id = request . user . id , permission = [string] , desk_id = desk_object . id ) [EOL] [EOL] [comment] [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED , headers = headers ) [EOL] [EOL] [EOL] class DeskDetailAPIView ( mixins . UpdateModelMixin , mixins . DestroyModelMixin , generics . RetrieveAPIView , ) : [EOL] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] queryset = Desk . objects . prefetch_related ( [string] , [string] ) . all ( ) [EOL] serializer_class = DeskSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] [EOL] def get_permissions ( self ) : [EOL] permission_classes = [ permissions . IsAuthenticated ] [EOL] if self . request . method == [string] : [EOL] permission_classes . append ( IsStaffOfDeskOrHigher ) [EOL] else : [EOL] permission_classes . append ( IsEditorOfDeskOrHigher ) [EOL] return [ permission ( ) for permission in self . permission_classes ] [EOL] [EOL] def retrieve ( self , request , * args , ** kwargs ) : [EOL] instance = self . queryset . filter ( id = self . kwargs [ self . lookup_url_kwarg ] ) . first ( ) [EOL] serializer = self . get_serializer ( instance ) [EOL] new_data = get_user_perm_for_desk ( request . user , serializer . data ) [EOL] new_data = get_additional_data ( new_data , instance ) [EOL] return Response ( new_data ) [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . update ( request , * args , ** kwargs ) [EOL] [EOL] def patch ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . update ( request , * args , ** kwargs ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . permission_classes = [ IsAdminOfDesk ] [EOL] return self . destroy ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] def get_user_perm_for_desk ( user , serializer_data ) : [EOL] [docstring] [EOL] [EOL] permissions_dict = { [string] : { [string] : [string] , [string] : True , [string] : False } , [string] : { [string] : [string] , [string] : False , [string] : True , [string] : False , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , [string] : False } , [string] : { [string] : [string] , [string] : False , [string] : True , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : None , [string] : False , [string] : True , [string] : False , [string] : False , [string] : False , [string] : False } } [EOL] [EOL] users_dict = PermissionCacheManager . get_user_perms ( user . id ) [EOL] perm = users_dict [ serializer_data [ [string] ] ] [EOL] serializer_data [ [string] ] = permissions_dict [ perm ] [EOL] return serializer_data [EOL] [EOL] [EOL] def get_additional_data ( serialized_data , obj ) : [EOL] [docstring] [EOL] [EOL] users = obj . usersdesks_set . all ( ) [EOL] columns = obj . columns . all ( ) [EOL] columns_data = [ { [string] : row . id , [string] : row . name } for row in columns ] [EOL] data = [ ] [EOL] for row in users : [EOL] data . append ( { [string] : row . user . id , [string] : row . user . username , [string] : row . user . email } ) [EOL] [EOL] serialized_data [ [string] ] = data [EOL] for row in range ( len ( serialized_data [ [string] ] ) ) : [EOL] for task in range ( len ( serialized_data [ [string] ] [ row ] [ [string] ] ) ) : [EOL] [comment] [EOL] serialized_data [ [string] ] [ row ] [ [string] ] [ task ] [ [string] ] = data [EOL] [comment] [EOL] serialized_data [ [string] ] [ row ] [ [string] ] [ task ] [ [string] ] = columns_data [EOL] [EOL] return serialized_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_desks.views.DeskDetailAPIView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_desks.serializers.DeskSerializer]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import desk [EOL] from rest_framework import serializers [EOL] from desk . model import Comment [EOL] import datetime [EOL] import json [EOL] [EOL] [EOL] class RecursiveField ( serializers . Serializer ) : [EOL] def to_representation ( self , value ) : [EOL] serializer = self . parent . parent . __class__ ( value , context = self . context ) [EOL] return serializer . data [EOL] [EOL] [EOL] [comment] [EOL] class CommentSerializer ( serializers . ModelSerializer ) : [EOL] related_comment = RecursiveField ( many = True ) [EOL] author = serializers . CharField ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] [comment] [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] read_only_fields = [ [string] , [string] , [string] , ] [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class CreateCommentSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] read_only_fields = [ [string] , [string] , [string] ] [EOL] ordering = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desk.api_comments.serializers.RecursiveField$ 0 0 0 0 0 0 0 0 $typing.Type[desk.api_comments.serializers.CommentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Comment]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import desk [EOL] from desk . model import Column , Desk , Task , Comment [EOL] from . serializers import CommentSerializer , CreateCommentSerializer [EOL] from rest_framework import generics [EOL] from rest_framework import mixins , permissions [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from api_rules . permissions import IsStaffOfDeskOrHigher [EOL] from rest_framework . response import Response [EOL] from api_rules . permissions import IsStaffOfDeskOrHigher [EOL] from redis_manager . comments_cache_manager import CommentCacheManager [EOL] [EOL] [EOL] class CommentAPIView ( generics . ListAPIView ) : [EOL] [EOL] permission_classes = [ permissions . IsAuthenticated , IsStaffOfDeskOrHigher ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] serializer_class = CommentSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] paginator = None [EOL] [EOL] def get_queryset ( self , * args , ** kwargs ) : [EOL] return Comment . objects . select_related ( [string] ) . prefetch_related ( [string] ) . all ( ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] queryset = self . filter_queryset ( self . get_queryset ( ) ) . filter ( is_child = False , related_task_id = self . kwargs [ [string] ] ) [EOL] [EOL] page = self . paginate_queryset ( queryset ) [EOL] if page is not None : [EOL] serializer = self . get_serializer ( page , many = True ) [EOL] return self . get_paginated_response ( serializer . data ) [EOL] [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] class CreateCommentAPIView ( generics . CreateAPIView ) : [EOL] [EOL] permission_classes = [ permissions . IsAuthenticated , IsStaffOfDeskOrHigher ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] serializer_class = CreateCommentSerializer [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] task_id = self . kwargs [ [string] ] [EOL] return serializer . save ( related_task_id = task_id , author = self . request . user ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] self . perform_create ( serializer ) [EOL] comment = serializer . data [EOL] comment [ [string] ] = request . user . username [EOL] [comment] [EOL] [EOL] [comment] [EOL] return Response ( comment , status = [number] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_comments.serializers.CreateCommentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from . views import CommentAPIView , CreateCommentAPIView [EOL] [EOL] urlpatterns = [ path ( [string] , CommentAPIView . as_view ( ) ) , path ( [string] , CreateCommentAPIView . as_view ( ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import desk [EOL] from desk . model import Column , Desk , Task , Comment [EOL] from . serializers import CreateTaskSerializer , UpdateTaskSerializer [EOL] from rest_framework import generics [EOL] from rest_framework import mixins , permissions [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from api_rules . permissions import IsEditorOfDeskOrHigher , IsStaffOfDeskOrHigher [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from desk . api_comments . serializers import CommentSerializer [EOL] from desk . actions . actions_data import get_columns_and_users , get_comments [EOL] [EOL] [EOL] class TaskAPIView ( generics . CreateAPIView , generics . ListAPIView ) : [EOL] [EOL] permission_classes = [ permissions . IsAuthenticated , IsEditorOfDeskOrHigher ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] serializer_class = CreateTaskSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] [comment] [EOL] [EOL] def get_queryset ( self , * args , ** kwargs ) : [EOL] [EOL] [comment] [EOL] qs = Task . objects . prefetch_related ( [string] ) . filter ( related_column_id = self . kwargs [ [string] ] ) [EOL] return qs [comment] [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] column_id = self . kwargs [ [string] ] [EOL] return serializer . save ( related_column_id = column_id ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] self . perform_create ( serializer ) [EOL] [EOL] [comment] [EOL] data = get_columns_and_users ( self . kwargs [ [string] ] , serializer . data ) [EOL] [EOL] [comment] [EOL] return Response ( data , status = [number] ) [EOL] [EOL] [EOL] class TaskDetailAPIView ( mixins . UpdateModelMixin , mixins . DestroyModelMixin , generics . RetrieveAPIView , ) : [EOL] [EOL] [comment] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] [EOL] queryset = Task . objects . prefetch_related ( [string] ) . all ( ) [EOL] [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] serializer_class = UpdateTaskSerializer [EOL] [comment] [EOL] [EOL] def get_permissions ( self ) : [EOL] permission_classes = [ permissions . IsAuthenticated ] [EOL] if self . request . method == [string] : [EOL] permission_classes . append ( IsStaffOfDeskOrHigher ) [EOL] else : [EOL] permission_classes . append ( IsEditorOfDeskOrHigher ) [EOL] return [ permission ( ) for permission in self . permission_classes ] [EOL] [EOL] def retrieve ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] instance = Task . objects . select_related ( [string] , [string] ) . filter ( id = self . kwargs [ [string] ] ) . first ( ) [EOL] [EOL] [comment] [EOL] [EOL] if instance is None : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] serializer = self . get_serializer ( instance ) [EOL] new_data = get_columns_and_users ( self . kwargs [ [string] ] , serializer . data ) [EOL] new_data [ [string] ] = { [string] : instance . current_executor . id , [string] : instance . current_executor . username } [EOL] [EOL] new_data = get_comments ( new_data , self . kwargs [ self . lookup_url_kwarg ] ) [EOL] return Response ( new_data ) [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] def patch ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] partial = True [EOL] [EOL] instance = Task . objects . prefetch_related ( [string] ) . filter ( id = self . kwargs [ [string] ] ) . first ( ) [EOL] serializer = self . get_serializer ( instance , data = request . data , partial = partial ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_update ( serializer ) [EOL] [EOL] if getattr ( instance , [string] , None ) : [EOL] [comment] [EOL] [comment] [EOL] instance . _prefetched_objects_cache = { } [EOL] [EOL] return Response ( serializer . data ) [EOL] [EOL] def perform_update ( self , serializer ) : [EOL] serializer . save ( ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . destroy ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_tasks.views.TaskDetailAPIView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[desk.api_tasks.serializers.UpdateTaskSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from . views import TaskAPIView , TaskDetailAPIView [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , TaskAPIView . as_view ( ) ) , path ( [string] , TaskDetailAPIView . as_view ( ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Type [EOL] import typing [EOL] import desk [EOL] import datetime [EOL] from rest_framework import serializers [EOL] from desk . model import Task , Desk [EOL] import datetime [EOL] from desk . api_comments . serializers import CommentSerializer [EOL] from desk . model import Comment [EOL] [EOL] [EOL] [comment] [EOL] class CreateTaskSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Task [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] read_only_fields = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] def validate_task_deadline ( self , value ) : [EOL] print ( value ) [EOL] today = datetime . date . today ( ) [EOL] if today . year > value . year : [EOL] raise serializers . ValidationError ( [string] ) [EOL] elif today . year == value . year : [EOL] if today . month > value . month : [EOL] raise serializers . ValidationError ( [string] ) [EOL] elif today . month == value . month : [EOL] if today . day > value . day : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return value [EOL] [EOL] [EOL] [comment] [EOL] class UpdateTaskSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Task [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] read_only_fields = [ [string] , ] [EOL] ordering = [ [string] ] [EOL] [EOL] def get_comments_url ( self , obj ) : [EOL] desk_id = obj . related_column . related_desk . id [EOL] column_id = obj . related_column . id [EOL] return f" [string] { desk_id } [string] { column_id } [string] { obj . id } [string] " [EOL] [EOL] [comment] [EOL] def validate_task_deadline ( self , value ) : [EOL] today = datetime . date . today ( ) [EOL] print ( value . year , value . month , value . day ) [EOL] print ( today . year , today . month , today . day ) [EOL] if today . year > value . year : [EOL] raise serializers . ValidationError ( [string] ) [EOL] elif today . year == value . year : [EOL] if today . month > value . month : [EOL] raise serializers . ValidationError ( [string] ) [EOL] elif today . month == value . month : [EOL] if today . day > value . day : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Task]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import desk [EOL] from rest_framework import serializers [EOL] from desk . model import Column [EOL] from django . db import models [EOL] from desk . api_tasks . serializers import CreateTaskSerializer , UpdateTaskSerializer [EOL] [EOL] [EOL] class ColumnSerializer ( serializers . ModelSerializer ) : [EOL] tasks = UpdateTaskSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Column [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] ordering = [ [string] ] [EOL] [EOL] read_only_fields = [ [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desk.api_tasks.serializers.UpdateTaskSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.model.Column]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from . views import ( ColumnAPIView , ColumnDetailAPIView ) [EOL] from django . urls import path , include [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , ColumnAPIView . as_view ( ) ) , path ( [string] , ColumnDetailAPIView . as_view ( ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import desk [EOL] from desk . model import Column , Desk [EOL] from . serializers import ColumnSerializer [EOL] from rest_framework import generics [EOL] from rest_framework import mixins , permissions [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from api_rules . permissions import IsEditorOfDeskOrHigher [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] [EOL] [EOL] class ColumnAPIView ( generics . CreateAPIView , generics . ListAPIView ) : [EOL] [EOL] permission_classes = [ permissions . IsAuthenticated , IsEditorOfDeskOrHigher ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] serializer_class = ColumnSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] queryset = Column . objects . prefetch_related ( [string] ) . all ( ) [EOL] [EOL] [comment] [EOL] paginator = None [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [EOL] desk = Desk . objects . prefetch_related ( [string] ) . filter ( id = self . kwargs [ [string] ] ) . first ( ) [EOL] self . check_object_permissions ( self . request , desk ) [EOL] [EOL] queryset = self . queryset . filter ( related_desk = desk ) [EOL] [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] desk_id = self . kwargs [ [string] ] [EOL] return serializer . save ( author = self . request . user , related_desk_id = desk_id ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] [EOL] [comment] [EOL] desk = Desk . objects . get ( id = self . kwargs [ [string] ] ) [EOL] self . check_object_permissions ( request , desk ) [EOL] [EOL] [comment] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] self . perform_create ( serializer ) [EOL] [EOL] [comment] [EOL] return Response ( serializer . data , status = [number] ) [EOL] [EOL] [EOL] class ColumnDetailAPIView ( mixins . UpdateModelMixin , mixins . DestroyModelMixin , generics . RetrieveAPIView , ) : [EOL] permission_classes = [ permissions . IsAuthenticated , IsEditorOfDeskOrHigher ] [EOL] authentication_classes = [ SessionAuthentication ] [EOL] queryset = Column . objects . all ( ) [EOL] serializer_class = ColumnSerializer [EOL] lookup_field = [string] [EOL] lookup_url_kwarg = [string] [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] instance = Column . objects . prefetch_related ( [string] ) . get ( id = self . kwargs [ [string] ] ) [EOL] [EOL] [comment] [EOL] if instance . related_desk_id != self . kwargs [ [string] ] : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] print ( request . user ) [EOL] serializer = self . get_serializer ( instance ) [EOL] return Response ( serializer . data ) [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] return self . update ( request , * args , ** kwargs ) [EOL] [EOL] def patch ( self , request , * args , ** kwargs ) : [EOL] return self . update ( request , * args , ** kwargs ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] return self . destroy ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_columns.views.ColumnDetailAPIView]$ 0 0 0 0 0 0 0 0 0 $typing.Type[desk.api_columns.serializers.ColumnSerializer]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0