from typing import Literal , Dict , Counter , Any , Union [EOL] import collections [EOL] import typing [EOL] import typing_extensions [EOL] import pickle [EOL] import math [EOL] import string [EOL] from nltk . corpus import stopwords [EOL] from nltk . tokenize import word_tokenize [EOL] from collections import Counter [EOL] [comment] [EOL] def getGenderClassifierObject ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] try : [EOL] return pickle . load ( f ) [EOL] except EOFError : [EOL] print ( [string] ) [EOL] [EOL] def getMisclassifiedEntries ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] try : [EOL] return pickle . load ( f ) [EOL] except EOFError : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] my_obj = getGenderClassifierObject ( ) [EOL] misclassifieds = getMisclassifiedEntries ( ) [EOL] misclassifieds = misclassifieds [ [number] : ] [EOL] [EOL] [EOL] [comment] [EOL] counter = Counter ( [string] ) [EOL] counterF = Counter ( [string] ) [EOL] sr = stopwords . words ( [string] ) [EOL] punctuation = string . punctuation [EOL] [EOL] [comment] [EOL] for entry in misclassifieds : [EOL] is_male = False if entry [ [number] ] else True [EOL] current_entry = str ( entry [ [number] ] ) [EOL] current_entry = current_entry . lower ( ) [EOL] for token in word_tokenize ( current_entry ) : [EOL] if token in sr or token in punctuation : [EOL] continue [EOL] elif is_male : [EOL] counter [ token ] += [number] [EOL] else : [EOL] counterF [ token ] += [number] [EOL] [EOL] [comment] [EOL] counter . subtract ( counterF ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] log_distributed_results = { } [EOL] for key in counter . keys ( ) : [EOL] value = float ( counter [ key ] ) [EOL] if value >= [number] : [EOL] log_distributed_results [ key ] = math . log1p ( value ) [EOL] else : [EOL] log_distributed_results [ key ] = - math . log1p ( - value ) [EOL] [EOL] new_counter = Counter ( log_distributed_results ) [EOL] new_counter2 = Counter ( my_obj ) [EOL] new_counter += new_counter2 [EOL] adjusted_values = { } [EOL] for key in new_counter . keys ( ) : [EOL] adjusted_values [ key ] = float ( new_counter [ key ] / [number] ) [EOL] [EOL] with open ( [string] , [string] ) as output : [EOL] pickle . dump ( my_obj , output , pickle . HIGHEST_PROTOCOL ) [EOL] [comment] [EOL] with open ( [string] , [string] ) as output : [EOL] pickle . dump ( adjusted_values , output , pickle . HIGHEST_PROTOCOL )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0
from typing import List , Any [EOL] import _csv [EOL] import typing [EOL] import csv [EOL] from nltk . tokenize import word_tokenize [EOL] from nltk . corpus import stopwords [EOL] from functools import reduce [EOL] import nltk [EOL] import matplotlib . pylab as plb [EOL] import string [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] with open ( [string] , [string] ) as csvFile : [EOL] myReader = csv . reader ( csvFile , delimiter = [string] ) [EOL] [comment] [EOL] sr = stopwords . words ( [string] ) [EOL] print ( type ( sr ) ) [EOL] clean_tokens = [ ] [EOL] iterationCount = [number] [EOL] [EOL] [comment] [EOL] for row in myReader : [EOL] if iterationCount >= [number] : [EOL] break [EOL] tokens = word_tokenize ( row [ [number] ] . lower ( ) ) [EOL] for token in tokens : [EOL] if token not in sr and token not in string . punctuation : [EOL] clean_tokens . append ( token ) [EOL] iterationCount += [number] [EOL] freq = nltk . FreqDist ( clean_tokens ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] plb . subplot ( [number] , [number] , i ) [EOL] itemPairs = freq . most_common ( i * [number] ) [EOL] xItems = [ ] [EOL] yItems = [ ] [EOL] for item in itemPairs : [EOL] xItems . append ( item [ [number] ] ) [EOL] yItems . append ( item [ [number] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plb . plot ( xItems , yItems ) [EOL] plb . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import io [EOL] import typing [EOL] import pickle [EOL] import json [EOL] [EOL] def getGenderClassifierObject ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] try : [EOL] return pickle . load ( f ) [EOL] except EOFError : [EOL] print ( [string] ) [EOL] [EOL] my_classifier = getGenderClassifierObject ( ) [EOL] my_json = json . dumps ( my_classifier ) [EOL] my_json_file = open ( [string] , [string] ) [EOL] my_json_file . write ( my_json ) [EOL] my_json_file . close ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , List , Any [EOL] import typing [EOL] import pandas as pd [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from pprint import pprint [EOL] from bs4 import BeautifulSoup [EOL] import re [EOL] from nltk . tokenize import WordPunctTokenizer [EOL] cols = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] df = pd . read_csv ( [string] , header = None , names = cols , encoding = [string] ) [EOL] [comment] [EOL] df . head ( ) [EOL] [EOL] print ( str ( df . sentiment . value_counts ( ) ) ) [EOL] df . drop ( [ [string] , [string] , [string] , [string] ] , axis = [number] , inplace = True ) [EOL] [EOL] print ( str ( df [ df . sentiment == [number] ] . head ( [number] ) ) ) [EOL] print ( str ( df [ df . sentiment == [number] ] . head ( [number] ) ) ) [EOL] df [ [string] ] = [ len ( t ) for t in df . text ] [EOL] data_dict = { [string] : { [string] : df . sentiment . dtype , [string] : [string] } , [string] : { [string] : df . text . dtype , [string] : [string] } , [string] : { [string] : df . pre_clean_len . dtype , [string] : [string] } , [string] : df . shape } [EOL] pprint ( data_dict ) [EOL] fig , ax = plt . subplots ( figsize = ( [number] , [number] ) ) [EOL] plt . boxplot ( df . pre_clean_len ) [EOL] plt . show ( ) [EOL] print ( str ( df [ df . pre_clean_len > [number] ] . head ( [number] ) ) ) [EOL] example1 = BeautifulSoup ( df . text [ [number] ] , [string] ) [EOL] print ( example1 . get_text ( ) ) [EOL] [EOL] tok = WordPunctTokenizer ( ) [EOL] pat1 = [string] [EOL] pat2 = [string] [EOL] combined_pat = [string] . join ( ( pat1 , pat2 ) ) [EOL] def tweet_cleaner ( text ) : [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] souped = soup . get_text ( ) [EOL] stripped = re . sub ( combined_pat , [string] , souped ) [EOL] try : [EOL] clean = stripped . decode ( [string] ) . replace ( [string] , [string] ) [EOL] except : [EOL] clean = stripped [EOL] letters_only = re . sub ( [string] , [string] , clean ) [EOL] lower_case = letters_only . lower ( ) [EOL] [comment] [EOL] [comment] [EOL] words = tok . tokenize ( lower_case ) [EOL] return ( [string] . join ( words ) ) . strip ( ) [EOL] testing = df . text [ : [number] ] [EOL] test_result = [ ] [EOL] for t in testing : [EOL] test_result . append ( tweet_cleaner ( t ) ) [EOL] test_result [EOL] [EOL] def xrange ( x , y ) : [EOL] return iter ( range ( x , y ) ) [EOL] [EOL] nums = [ [number] , [number] , [number] , [number] , [number] ] [EOL] print ( [string] ) [EOL] clean_tweet_texts = [ ] [EOL] for i in xrange ( nums [ [number] ] , nums [ [number] ] ) : [EOL] if ( ( i + [number] ) % [number] == [number] ) : [EOL] print ( [string] % ( i + [number] , nums [ [number] ] ) ) [EOL] clean_tweet_texts . append ( tweet_cleaner ( df [ [string] ] [ i ] ) ) [EOL] [EOL] clean_df = pd . DataFrame ( clean_tweet_texts , columns = [ [string] ] ) [EOL] clean_df [ [string] ] = df . sentiment [EOL] clean_df . head ( ) [EOL] [EOL] clean_df . to_csv ( [string] , encoding = [string] ) [EOL] csv = [string] [EOL] my_df = pd . read_csv ( csv , index_col = [number] ) [EOL] my_df . head ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import collections [EOL] from collections import Counter [EOL] from nltk . tokenize import word_tokenize [EOL] from nltk . corpus import stopwords [EOL] import math [EOL] import string [EOL] import operator [EOL] import pandas as pd [EOL] import pickle [EOL] [comment] [EOL] [docstring] [EOL] [comment] [EOL] def getGenderClassifierObject ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] try : [EOL] return pickle . load ( f ) [EOL] except EOFError : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] my_obj = getGenderClassifierObject ( ) [EOL] [comment] [EOL] [EOL] [EOL] my_file = pd . read_csv ( [string] , index_col = False , usecols = [ [number] , [number] ] , skiprows = [number] , nrows = [number] ) [EOL] [EOL] def scoreText ( classifierObject , text ) : [EOL] score = [number] [EOL] for token in word_tokenize ( text ) : [EOL] if token in classifierObject : [EOL] score += classifierObject [ token ] [EOL] return score [EOL] [EOL] incorrect_entries = [ [string] ] [EOL] all_scores = [number] [EOL] len_all_scores = [number] [EOL] all_scoresF = [number] [EOL] len_all_scoresF = [number] [EOL] def calculateEffectiveness ( set_threshold = [number] , best_threshold = [number] , best_score = [number] ) : [EOL] global all_scores , len_all_scores , all_scoresF , len_all_scoresF [EOL] num_of_entries = [number] [EOL] num_of_correct_guesses = [number] [EOL] for entry in my_file . get_values ( ) : [EOL] [comment] [EOL] threshold = ( all_scores / ( len_all_scores or [number] ) + all_scoresF / ( len_all_scoresF or [number] ) ) / [number] [EOL] current_score = scoreText ( dict ( my_obj ) , str ( entry [ [number] ] ) ) [EOL] if entry [ [number] ] == [number] : [EOL] all_scores += current_score [EOL] len_all_scores += [number] [EOL] else : [EOL] all_scoresF += current_score [EOL] len_all_scoresF += [number] [EOL] if current_score >= threshold and entry [ [number] ] == [number] : [EOL] incorrect_entries . append ( [ entry [ [number] ] , entry [ [number] ] ] ) [EOL] num_of_correct_guesses += [number] [EOL] elif current_score < threshold and entry [ [number] ] == [number] : [EOL] incorrect_entries . append ( [ entry [ [number] ] , entry [ [number] ] ] ) [EOL] num_of_correct_guesses += [number] [EOL] else : [EOL] incorrect_entries . append ( [ entry [ [number] ] , [number] * entry [ [number] ] ] ) [EOL] num_of_entries += [number] [EOL] [EOL] current_percentage = num_of_correct_guesses / num_of_entries [EOL] print ( [string] + str ( threshold ) + [string] + str ( current_percentage ) ) [EOL] if current_percentage > best_score : [EOL] best_score = current_percentage [EOL] best_threshold = threshold [EOL] [EOL] current_best_threshold = [number] [EOL] current_best_score = [number] [EOL] calculateEffectiveness ( [number] , current_best_threshold , current_best_score ) [EOL] print ( all_scores / len_all_scores ) [EOL] print ( all_scoresF / len_all_scoresF ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as output : [EOL] pickle . dump ( incorrect_entries , output , pickle . HIGHEST_PROTOCOL )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from bs4 import BeautifulSoup [EOL] import urllib . request [EOL] import nltk [EOL] from nltk . corpus import stopwords [EOL] import matplotlib . pyplot as plt [EOL] from nltk . tokenize import sent_tokenize [EOL] response = urllib . request . urlopen ( [string] ) [EOL] html = response . read ( ) [EOL] soup = BeautifulSoup ( html , [string] ) [EOL] text = soup . get_text ( strip = True ) [EOL] tokens = [ t for t in text . split ( ) ] [EOL] clean_tokens = tokens [ : ] [EOL] sr = stopwords . words ( [string] ) [EOL] for token in tokens : [EOL] if token in stopwords . words ( [string] ) : [EOL] clean_tokens . remove ( token ) [EOL] freq = nltk . FreqDist ( clean_tokens ) [EOL] for key , val in freq . items ( ) : [EOL] print ( str ( key ) + [string] + str ( val ) ) [EOL] [EOL] freq . plot ( [number] , cumulative = False ) [EOL] [docstring] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import datetime [EOL] import typing [EOL] def simple ( request ) : [EOL] import random [EOL] import django [EOL] import datetime [EOL] [EOL] from matplotlib . backends . backend_agg import FigureCanvasAgg as FigureCanvas [EOL] from matplotlib . figure import Figure [EOL] from matplotlib . dates import DateFormatter [EOL] [EOL] fig = Figure ( ) [EOL] ax = fig . add_subplot ( [number] ) [EOL] x = [ ] [EOL] y = [ ] [EOL] now = datetime . datetime . now ( ) [EOL] delta = datetime . timedelta ( days = [number] ) [EOL] for i in range ( [number] ) : [EOL] x . append ( now ) [EOL] now += delta [EOL] y . append ( random . randint ( [number] , [number] ) ) [EOL] ax . plot_date ( x , y , [string] ) [EOL] ax . xaxis . set_major_formatter ( DateFormatter ( [string] ) ) [EOL] fig . autofmt_xdate ( ) [EOL] canvas = FigureCanvas ( fig ) [EOL] response = django . http . HttpResponse ( content_type = [string] ) [EOL] canvas . print_png ( response ) [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TwitterappConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any , Type [EOL] import twitterApp [EOL] import io [EOL] import logging [EOL] import typing [EOL] from django . http import HttpResponseRedirect [EOL] from django . shortcuts import get_object_or_404 , render [EOL] from django . urls import reverse [EOL] from django . views import generic as gen [EOL] from django . http import HttpResponse [EOL] from . models import evaluation , Choice , Question [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] CLASSIFIER_MEDIAN_VALUE = [number] [EOL] [EOL] class IndexView ( gen . ListView ) : [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return Question . objects . order_by ( [string] ) [ : [number] ] [EOL] [EOL] [EOL] class DetailView ( gen . DetailView ) : [EOL] model = Question [EOL] template_name = [string] [EOL] [EOL] class GraphView ( gen . DetailView ) : [EOL] template_name = [string] [EOL] model = Question [EOL] [EOL] class ResultsView ( gen . DetailView ) : [EOL] model = Question [EOL] template_name = [string] [EOL] def vote ( request , question_id ) : [EOL] question = get_object_or_404 ( Question , pk = question_id ) [EOL] try : [EOL] selected_choice = question . choice_set . get ( pk = request . POST [ [string] ] ) [EOL] except ( KeyError , Choice . DoesNotExist ) : [EOL] [comment] [EOL] return render ( request , [string] , { [string] : question , [string] : [string] , } ) [EOL] else : [EOL] selected_choice . votes += [number] [EOL] selected_choice . save ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return HttpResponseRedirect ( reverse ( [string] , args = ( question . id , ) ) ) [EOL] [EOL] def index ( request ) : [EOL] [comment] [EOL] qry = evaluation . objects . order_by ( [string] ) [ [number] : ] . values ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] return render ( request , [string] , { [string] : qry , [string] : qry [ [number] ] . keys ( ) } ) [EOL] [EOL] def send_classifier_data ( request ) : [EOL] import json [EOL] json_data = open ( [string] ) [EOL] json_dump = json . dumps ( json_data . read ( ) ) [EOL] json_data . close ( ) [EOL] [comment] [EOL] [comment] [EOL] currentQueryData = request . META . get ( [string] ) [EOL] currentQueryType = request . META . get ( [string] ) [EOL] return HttpResponse ( json . dumps ( analyze_twitter_query ( request ) ) ) [EOL] if currentQueryData == [string] and currentQueryType == [string] : [EOL] processed_data = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] else : [EOL] processed_data = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] return HttpResponse ( json . dumps ( processed_data ) ) [EOL] [EOL] def determine_gender ( text_list ) : [EOL] from nltk . tokenize import word_tokenize [EOL] import json [EOL] [EOL] def scoreText ( classifierObject , text ) : [EOL] score = [number] [EOL] for token in word_tokenize ( text ) : [EOL] if token in classifierObject : [EOL] score += classifierObject [ token ] [EOL] return score - CLASSIFIER_MEDIAN_VALUE [EOL] with open ( [string] ) as file : [EOL] try : [EOL] text_classifications = [ ] [EOL] g_classifier = json . load ( file ) [EOL] for text in text_list : [EOL] text_classifications . append ( { [string] : scoreText ( g_classifier , text [ [string] ] ) } ) [EOL] return text_classifications [EOL] except Exception as ex : [EOL] raise FileNotFoundError ( [string] + str ( ex ) ) [EOL] [EOL] def determine_sentiment ( text_list ) : [EOL] from nltk . sentiment . vader import SentimentIntensityAnalyzer [EOL] sentiment_list = [ ] [EOL] SIA = SentimentIntensityAnalyzer ( ) [EOL] for text in text_list : [EOL] sentiment_list . append ( SIA . polarity_scores ( text [ [string] ] ) ) [EOL] return sentiment_list [EOL] [EOL] def pull_twitter_data ( queryData , queryDataType ) : [EOL] import json [EOL] test_twiter_json = open ( [string] ) [EOL] test_json_object = json . load ( test_twiter_json ) [EOL] test_twiter_json . close ( ) [EOL] return test_json_object [EOL] [EOL] def analyze_twitter_query ( request ) : [EOL] [comment] [EOL] currentQueryData = request . META . get ( [string] ) [EOL] currentQueryType = request . META . get ( [string] ) [EOL] tw_data = pull_twitter_data ( currentQueryData , currentQueryType ) [EOL] [EOL] [comment] [EOL] tweets = [ ] [EOL] for tweet in tw_data : [EOL] [comment] [EOL] tweets . append ( tweet ) [EOL] [EOL] [comment] [EOL] sentiment_list = determine_sentiment ( tweets ) [EOL] gender_list = determine_gender ( tweets ) [EOL] [EOL] [comment] [EOL] positive_entries = [number] [EOL] negative_entries = [number] [EOL] male_entries = [number] [EOL] female_entries = [number] [EOL] for item in sentiment_list : [EOL] if item [ [string] ] >= [number] : [EOL] positive_entries += [number] [EOL] else : [EOL] negative_entries += [number] [EOL] for item in gender_list : [EOL] if item [ [string] ] >= [number] : [EOL] male_entries += [number] [EOL] else : [EOL] female_entries += [number] [EOL] return { [string] : [number] * male_entries , [string] : [number] * positive_entries , [string] : [number] * female_entries , [string] : [number] * negative_entries }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Question]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[twitterApp.models.Question]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Question]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float
from typing import Any [EOL] import twitterApp [EOL] import typing [EOL] import datetime [EOL] [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] [EOL] from . models import Question [EOL] [EOL] [EOL] class QuestionModelTests ( TestCase ) : [EOL] [EOL] def test_was_published_recently_with_future_question ( self ) : [EOL] [docstring] [EOL] time = timezone . now ( ) + datetime . timedelta ( days = [number] ) [EOL] future_question = Question ( pub_date = time ) [EOL] self . assertIs ( future_question . was_published_recently ( ) , False ) [EOL] [EOL] def test_was_published_recently_with_old_question ( self ) : [EOL] [docstring] [EOL] time = timezone . now ( ) - datetime . timedelta ( days = [number] , seconds = [number] ) [EOL] old_question = Question ( pub_date = time ) [EOL] self . assertIs ( old_question . was_published_recently ( ) , False ) [EOL] [EOL] def test_was_published_recently_with_recent_question ( self ) : [EOL] [docstring] [EOL] time = timezone . now ( ) - datetime . timedelta ( hours = [number] , minutes = [number] , seconds = [number] ) [EOL] recent_question = Question ( pub_date = time ) [EOL] self . assertIs ( recent_question . was_published_recently ( ) , True )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $twitterApp.models.Question$ 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import twitterApp [EOL] import typing [EOL] import datetime [EOL] from django . utils import timezone [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class Question ( models . Model ) : [EOL] question_text = models . CharField ( max_length = [number] ) [EOL] pub_date = models . DateTimeField ( [string] ) [EOL] def __str__ ( self ) : [EOL] return self . question_text [EOL] def was_published_recently ( self ) : [EOL] now = timezone . now ( ) [EOL] return now - datetime . timedelta ( days = [number] ) <= self . pub_date <= now [EOL] [EOL] class evaluation ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] date = models . DateField ( ) [EOL] ym = models . FloatField ( max_length = [number] ) [EOL] homogeneity = models . FloatField ( max_length = [number] ) [EOL] plowing = models . FloatField ( max_length = [number] ) [EOL] biological = models . FloatField ( max_length = [number] ) [EOL] chemical = models . FloatField ( max_length = [number] ) [EOL] hardness = models . FloatField ( max_length = [number] ) [EOL] [EOL] class Choice ( models . Model ) : [EOL] question = models . ForeignKey ( Question , on_delete = models . CASCADE ) [EOL] choice_text = models . CharField ( max_length = [number] ) [EOL] votes = models . IntegerField ( default = [number] ) [EOL] def __str__ ( self ) : [EOL] return self . choice_text	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Question]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Question]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.evaluation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[twitterApp.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Question , evaluation [EOL] [comment] [EOL] [EOL] admin . site . register ( Question ) [EOL] admin . site . register ( evaluation )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . DateField ( ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ( [string] , models . FloatField ( max_length = [number] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from twitterApp . views import send_classifier_data [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , send_classifier_data , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0