import github [EOL] import plugins . labhub [EOL] [EOL] from tests . cmbot_testcase import CmbotTestCase [EOL] from unittest . mock import create_autospec , PropertyMock [EOL] [EOL] [EOL] class LabHubTestCase ( CmbotTestCase ) : [EOL] [EOL] def setUp ( self , klasses = None ) : [EOL] plugins . labhub . github = create_autospec ( github ) [EOL] [EOL] self . mock_org = create_autospec ( github . Organization . Organization ) [EOL] self . mock_gh = create_autospec ( github . Github ) [EOL] self . mock_team = create_autospec ( github . Team . Team ) [EOL] self . mock_team . name = PropertyMock ( ) [EOL] self . mock_team . name = [string] [EOL] self . teams = { [string] : self . mock_team , [string] : self . mock_team , } [EOL] [EOL] plugins . labhub . github . Github . return_value = self . mock_gh [EOL] self . mock_gh . get_organization . return_value = self . mock_org [EOL] self . mock_org . get_teams . return_value = [ self . mock_team ] [EOL] [EOL] if klasses : [EOL] super ( ) . setUp ( klasses ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import queue [EOL] [EOL] from tests . isolated_testcase import IsolatedTestCase [EOL] [EOL] [EOL] class HelloWorldTest ( IsolatedTestCase ) : [EOL] [EOL] def test_hello_world_callback ( self ) : [EOL] self . assertCommand ( [string] , [string] ) [EOL] with self . assertRaises ( queue . Empty ) : [EOL] self . assertCommand ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import tests [EOL] import logging [EOL] import os [EOL] [EOL] from errbot . backends . test import FullStackTest [EOL] from pathlib import Path [EOL] [EOL] [EOL] class IsolatedTestCase ( FullStackTest ) : [EOL] [EOL] file_path = Path ( __file__ ) . parent / [string] / [string] / [string] [EOL] renamed_file_path = Path ( __file__ ) . parent / [string] / [string] / [string] [EOL] [EOL] @ classmethod def setUpClass ( cls , extra_config = None ) : [EOL] os . rename ( cls . file_path , cls . renamed_file_path ) [EOL] [EOL] @ classmethod def tearDownClass ( cls ) : [EOL] os . rename ( cls . renamed_file_path , cls . file_path ) [EOL] [EOL] def setUp ( self , extra_config = None ) : [EOL] super ( ) . setUp ( extra_plugin_dir = [string] , loglevel = logging . ERROR , extra_config = extra_config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , Any [EOL] import tests [EOL] import typing [EOL] import queue [EOL] import github [EOL] [EOL] from errbot . backends . base import Message [EOL] from unittest . mock import MagicMock , create_autospec , PropertyMock [EOL] from utils . backends import GitterRoomOccupant [EOL] [EOL] import plugins . labhub [EOL] from plugins . labhub import LabHub [EOL] [EOL] from tests . labhub_testcase import LabHubTestCase [EOL] [EOL] [EOL] class TestLabHub ( LabHubTestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ( plugins . labhub . LabHub , ) ) [EOL] self . global_mocks = { [string] : self . teams , } [EOL] configs = { [string] : None , [string] : [string] , } [EOL] self . bot . sender . _nick = [string] [EOL] self . labhub = self . load_plugin ( [string] , self . global_mocks , configs ) [EOL] [EOL] def test_is_room_member ( self ) : [EOL] msg = create_autospec ( Message ) [EOL] msg . frm . room . occupants = PropertyMock ( ) [EOL] user1 = create_autospec ( GitterRoomOccupant ) [EOL] user1 . username = [string] [EOL] user2 = create_autospec ( GitterRoomOccupant ) [EOL] user2 . username = [string] [EOL] msg . frm . room . occupants = [ user1 , user2 ] [EOL] self . assertTrue ( LabHub . is_room_member ( [string] , msg ) ) [EOL] [EOL] def test_invite_cmd ( self ) : [EOL] mock_team_contributors = create_autospec ( github . Team . Team ) [EOL] mock_team_maintainers = create_autospec ( github . Team . Team ) [EOL] [EOL] self . teams [ [string] ] = mock_team_contributors [EOL] self . teams [ [string] ] = mock_team_maintainers [EOL] [EOL] mock_dict = { [string] : self . teams , [string] : MagicMock ( ) , } [EOL] self . inject_mocks ( [string] , mock_dict ) [EOL] testbot = self [EOL] [EOL] self . assertEqual ( self . labhub . TEAMS , self . teams ) [EOL] [EOL] mock_dict [ [string] ] . return_value = False [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] mock_dict [ [string] ] . return_value = True [EOL] [EOL] mock_team_maintainers . has_in_members . return_value = False [EOL] [EOL] [comment] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [comment] [EOL] with self . assertRaises ( queue . Empty ) : [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] mock_team_maintainers . has_in_members . return_value = True [EOL] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] mock_team_maintainers . has_in_members . return_value = False [EOL] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] mock_team_contributors . has_in_members . return_value = False [EOL] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] self . bot . sender . _nick = None [EOL] testbot . assertCommand ( [string] , [string] ) [EOL] [EOL] def test_invalid_token ( self ) : [EOL] plugins . labhub . github . Github . return_value = None [EOL] self . labhub . deactivate ( ) [EOL] with self . assertLogs ( ) as cm : [EOL] self . labhub . activate ( ) [EOL] self . assertIn ( [string] [string] , cm . output ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.labhub_test.TestLabHub$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] from errbot . backends . test import FullStackTest [EOL] from errbot . plugin_info import PluginInfo [EOL] from errbot . templating import add_plugin_templates_path [EOL] from pathlib import Path [EOL] [EOL] import logging [EOL] [EOL] [EOL] class CmbotTestCase ( FullStackTest ) : [EOL] [EOL] def setUp ( self , klasses ) : [EOL] super ( ) . setUp ( loglevel = logging . ERROR , extra_config = { [string] : [string] } ) [EOL] self . klasses = { } [EOL] self . plug_files = { } [EOL] self . plugins = { } [EOL] [EOL] for klass in klasses : [EOL] self . klasses [ klass . __name__ ] = klass [EOL] self . load_plugin_templates ( klass ) [EOL] [EOL] def load_plugin_templates ( self , klass ) : [EOL] plug_filename = klass . __module__ . split ( [string] ) [ - [number] ] + [string] [EOL] plug_file_path = ( Path ( __file__ ) . parent / [string] / [string] / plug_filename ) [EOL] with plug_file_path . open ( ) as plugfile : [EOL] plug_info = PluginInfo . load_file ( plugfile , plug_file_path ) [EOL] self . plug_files [ klass . __name__ ] = plug_info [EOL] add_plugin_templates_path ( plug_info ) [EOL] [EOL] def load_plugin ( self , plugin_name , mock_dict = False , plugin_config = None ) : [EOL] [docstring] [EOL] klass = self . klasses [ plugin_name ] [EOL] plugin = klass ( self . bot , plugin_name ) [EOL] plugin . configure ( plugin_config ) [EOL] self . plugins [ plugin_name ] = plugin [EOL] self . bot . plugin_manager . plugins [ plugin_name ] = plugin [EOL] plug_file = self . plug_files [ plugin_name ] [EOL] plugin . dependencies = plug_file . dependencies [EOL] self . bot . plugin_manager . plugin_infos [ plug_file . name ] = plug_file [EOL] plugin . activate ( ) [EOL] [EOL] if mock_dict : [EOL] self . inject_mocks ( plugin_name = plugin_name , mock_dict = mock_dict ) [EOL] [EOL] return plugin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import plugins [EOL] import github [EOL] [EOL] from errbot import BotPlugin , re_botcmd [EOL] from errbot . templating import tenv [EOL] from utils . mixin import DefaultConfigMixin [EOL] [EOL] [EOL] class LabHub ( DefaultConfigMixin , BotPlugin ) : [EOL] [docstring] [EOL] [EOL] CONFIG_TEMPLATE = { [string] : None , [string] : None , } [EOL] [EOL] def activate ( self ) : [EOL] super ( ) . activate ( ) [EOL] teams = dict ( ) [EOL] gh_org = None [EOL] try : [EOL] gh = github . Github ( self . config [ [string] ] ) [EOL] assert gh is not None [EOL] except AssertionError : [EOL] self . log . error ( [string] ) [EOL] else : [EOL] gh_org = gh . get_organization ( self . config [ [string] ] ) [EOL] for team in gh_org . get_teams ( ) : [EOL] teams [ team . name ] = team [EOL] [EOL] self . _gh_org = gh_org [EOL] self . _teams = teams [EOL] self . _gh = gh [EOL] self . invited_users = set ( ) [EOL] [EOL] @ property def GH_ORG_NAME ( self ) : [EOL] return self . config [ [string] ] [EOL] [EOL] @ property def TEAMS ( self ) : [EOL] return self . _teams [EOL] [EOL] @ TEAMS . setter def TEAMS ( self , new ) : [EOL] self . _teams = new [EOL] [EOL] def team_mapping ( self ) : [EOL] return { [string] : self . TEAMS [ [string] ] , [string] : self . TEAMS [ [string] ] , } [EOL] [EOL] def is_team_member ( self , user , team ) : [EOL] teams = self . team_mapping ( ) [EOL] return teams [ team ] . has_in_members ( self . _gh . get_user ( user ) ) [EOL] [EOL] @ staticmethod def is_room_member ( invitee , msg ) : [EOL] members = [ mem . username for mem in msg . frm . room . occupants ] [EOL] return invitee in members [EOL] [EOL] [comment] [EOL] @ re_botcmd ( pattern = [string] , re_cmd_name_help = [string] ) def invite_cmd ( self , msg , match ) : [EOL] [docstring] [EOL] invitee = match . group ( [number] ) [EOL] inviter = msg . frm . nick [EOL] if not inviter : [EOL] yield [string] [EOL] return [EOL] [EOL] team = [string] if match . group ( [number] ) is None else match . group ( [number] ) [EOL] team = team . lower ( ) [EOL] [EOL] is_maintainer = self . is_team_member ( inviter , [string] ) [EOL] [EOL] self . log . info ( [string] . format ( inviter , invitee , team ) ) [EOL] [EOL] valid_teams = self . team_mapping ( ) [EOL] if team not in valid_teams : [EOL] yield [string] + [string] . join ( valid_teams ) [EOL] return [EOL] [EOL] def invite ( invitee , team ) : [EOL] self . team_mapping ( ) [ team ] . add_membership ( self . _gh . get_user ( invitee ) ) [EOL] [EOL] if invitee == [string] : [EOL] team = [string] [EOL] invitee = inviter [EOL] [EOL] if not self . is_room_member ( invitee , msg ) : [EOL] yield [string] . format ( invitee ) [EOL] return [EOL] [EOL] if invitee in self . invited_users : [EOL] return [EOL] [EOL] if is_maintainer : [EOL] invite ( invitee , team ) [EOL] yield tenv ( ) . get_template ( [string] . format ( team ) ) . render ( target = invitee , ) [EOL] elif team == [string] : [EOL] invite ( invitee , team ) [EOL] yield tenv ( ) . get_template ( [string] . format ( team ) ) . render ( target = invitee , ) [EOL] self . invited_users . add ( invitee ) [EOL] else : [EOL] yield tenv ( ) . get_template ( [string] ) . render ( action = [string] , designation = [string] , target = inviter , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] from errbot import BotPlugin [EOL] from errbot . templating import tenv [EOL] [EOL] [EOL] class hello_world ( BotPlugin ) : [EOL] [docstring] [EOL] [EOL] def activate ( self ) : [EOL] super ( ) . activate ( ) [EOL] self . hello_world_users = set ( ) [EOL] [EOL] def callback_message ( self , msg ) : [EOL] [docstring] [EOL] if re . search ( [string] , msg . body , flags = re . IGNORECASE ) : [EOL] user = msg . frm . nick [EOL] if user not in self . hello_world_users : [EOL] response = tenv ( ) . get_template ( [string] ) . render ( target = user , ) [EOL] self . send ( msg . frm , response ) [EOL] self . hello_world_users . add ( user ) [EOL] print ( self . hello_world_users ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import utils [EOL] from errbot . backends . base import Person , Room , RoomOccupant [EOL] [EOL] [EOL] class GitterPerson ( Person ) : [EOL] def __init__ ( self , idd = None , username = None , displayName = None , url = None , avatarSmall = None , avatarMedium = None ) : [EOL] self . _idd = idd [EOL] self . _username = username [EOL] self . _displayName = displayName [EOL] self . _url = url [EOL] self . _avatarSmall = avatarSmall [EOL] self . _avatarMedium = avatarMedium [EOL] [EOL] @ property def idd ( self ) : [EOL] return self . _idd [EOL] [EOL] @ property def username ( self ) : [EOL] return self . _username [EOL] [EOL] @ property def displayName ( self ) : [EOL] return self . _displayName [EOL] [EOL] @ property def url ( self ) : [EOL] return self . _url [EOL] [EOL] @ property def avatarSmall ( self ) : [EOL] return self . _avatarSmall [EOL] [EOL] @ property def avatarMedium ( self ) : [EOL] return self . _avatarMedium [EOL] [EOL] [comment] [EOL] @ property def person ( self ) : [EOL] return self . _idd [EOL] [EOL] @ property def nick ( self ) : [EOL] return self . _username [EOL] [EOL] @ property def fullname ( self ) : [EOL] return self . _displayName [EOL] [EOL] @ property def client ( self ) : [EOL] return [string] [EOL] [EOL] @ staticmethod def build_from_json ( from_user ) : [EOL] return GitterPerson ( idd = from_user [ [string] ] , username = from_user [ [string] ] , displayName = from_user [ [string] ] , url = from_user [ [string] ] , avatarSmall = from_user [ [string] ] , avatarMedium = from_user [ [string] ] ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return str ( self ) == str ( other ) [EOL] [EOL] def __unicode__ ( self ) : [EOL] return self . username [EOL] [EOL] __str__ = __unicode__ [EOL] aclattr = nick [EOL] [EOL] [EOL] class GitterRoomOccupant ( GitterPerson , RoomOccupant ) : [EOL] def __init__ ( self , room , idd = None , username = None , displayName = None , url = None , avatarSmall = None , avatarMedium = None ) : [EOL] self . _room = room [EOL] super ( ) . __init__ ( idd , username , displayName , url , avatarSmall , avatarMedium ) [EOL] [EOL] @ property def room ( self ) : [EOL] return self . _room [EOL] [EOL] @ staticmethod def build_from_json ( room , json_user ) : [EOL] return GitterRoomOccupant ( room , idd = json_user [ [string] ] , username = json_user [ [string] ] , displayName = json_user [ [string] ] , url = json_user [ [string] ] , avatarSmall = json_user [ [string] ] , avatarMedium = json_user [ [string] ] ) [EOL] [EOL] def __unicode__ ( self ) : [EOL] if self . url == self . _room . _uri : [EOL] return self . username [comment] [EOL] return self . username + [string] + self . _room . name [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if hasattr ( other , [string] ) : [EOL] return self . person == other . person [EOL] return str ( self ) == str ( other ) [EOL] [EOL] __str__ = __unicode__ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from itertools import chain [EOL] [EOL] class DefaultConfigMixin ( ) : [EOL] [EOL] @ property def _default_config ( self ) : [EOL] if ( hasattr ( self . bot_config , [string] ) and self . name in self . bot_config . DEFAULT_CONFIG ) : [EOL] return self . bot_config . DEFAULT_CONFIG [ self . name ] [EOL] [EOL] def __init__ ( self , bot , name = None ) : [EOL] super ( ) . __init__ ( bot , name = name ) [EOL] if not hasattr ( self , [string] ) : [comment] [EOL] self . log . error ( [string] . format ( self . name ) ) [EOL] [EOL] def get_configuration_template ( self ) : [EOL] default_config = self . _default_config [EOL] config_template = self . CONFIG_TEMPLATE [EOL] [EOL] if default_config : [EOL] config = dict ( chain ( config_template . items ( ) , default_config . items ( ) ) ) [EOL] else : [EOL] config = config_template [EOL] [EOL] return config [EOL] [EOL] def configure ( self , configuration ) : [EOL] config_template = self . get_configuration_template ( ) [EOL] [EOL] if configuration is not None and configuration != { } : [EOL] config = dict ( chain ( config_template . items ( ) , configuration . items ( ) ) ) [EOL] else : [EOL] config = config_template [EOL] [EOL] self . config = config [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0