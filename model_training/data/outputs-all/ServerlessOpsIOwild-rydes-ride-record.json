from typing import Dict , Union , Any , Optional [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] [EOL] import json [EOL] import logging [EOL] import os [EOL] [EOL] import boto3 [EOL] [EOL] log_level = os . environ . get ( [string] , [string] ) [EOL] logging . root . setLevel ( logging . getLevelName ( log_level ) ) [comment] [EOL] _logger = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] DDB_TABLE_NAME = os . environ . get ( [string] ) [EOL] DDB_TABLE_HASH_KEY = os . environ . get ( [string] ) [EOL] dynamodb = boto3 . resource ( [string] ) [EOL] DDT = dynamodb . Table ( DDB_TABLE_NAME ) [EOL] [EOL] [EOL] def handler ( event , context ) : [EOL] [docstring] [EOL] _logger . info ( [string] . format ( json . dumps ( event ) ) ) [EOL] [EOL] ride_record = json . loads ( event . get ( [string] ) ) [EOL] [EOL] try : [EOL] DDT . put_item ( TableName = DDB_TABLE_NAME , Item = ride_record ) [EOL] except Exception as e : [EOL] _logger . exception ( e ) [EOL] raise e [EOL] [EOL] resp = { [string] : [number] , [string] : json . dumps ( { [string] : True } ) } [EOL] [EOL] _logger . info ( [string] . format ( json . dumps ( resp ) ) ) [EOL] [EOL] return resp [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
	0
	0
	0
	0
	0