from typing import List [EOL] import typing [EOL] from setuptools import setup , find_packages [EOL] from codecs import open [EOL] import sys [EOL] [EOL] if sys . version_info . major < [number] : [EOL] sys . exit ( [string] ) [EOL] elif sys . version_info . minor < [number] : [EOL] sys . exit ( [string] ) [EOL] [EOL] [EOL] requirements = [ [string] ] [EOL] [EOL] with open ( [string] , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = long_description , url = [string] , author = [string] , author_email = [string] , license = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , keywords = [string] , packages = find_packages ( ) , install_requires = requirements ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
[comment] [EOL] from typing import Any , List , Dict [EOL] import typing [EOL] import datetime [EOL] import toml [EOL] import requests [EOL] [EOL] [comment] [EOL] currencies = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] cc_list = requests . get ( [string] ) . json ( ) [EOL] for cc , _ in cc_list [ [string] ] . items ( ) : [EOL] currencies . append ( cc ) [EOL] [EOL] prices = dict ( ) [EOL] start = [number] [EOL] batch_size = [number] [EOL] while start < len ( currencies ) : [EOL] fsyms = [string] . join ( currencies [ start : start + batch_size ] ) [EOL] prices . update ( requests . get ( [string] . format ( fsyms ) ) . json ( ) ) [EOL] start += batch_size [EOL] [EOL] fallbacks = dict ( ) [EOL] for symbol , price_data in prices . items ( ) : [EOL] fallbacks [ symbol ] = price_data [ [string] ] [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] toml . dump ( { [string] : fallbacks , [string] : datetime . datetime . now ( ) } , f ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import builtins [EOL] import typing [EOL] import asyncio [EOL] import json [EOL] from typing import List , Any , Dict [EOL] [EOL] import aiohttp [EOL] [EOL] [EOL] _coin_list = { } [EOL] [EOL] [EOL] async def fetch ( url ) : [EOL] async with aiohttp . ClientSession ( ) as session : [EOL] async with session . get ( url ) as resp : [EOL] text = await resp . text ( ) [EOL] return json . loads ( text ) [EOL] [EOL] [EOL] async def fetch_price_data ( from_currencies , to_currencies , full = False ) : [EOL] if full : [EOL] endpoint = [string] [EOL] from_parameter = [string] [EOL] if [string] not in to_currencies : [EOL] to_currencies . append ( [string] ) [EOL] else : [EOL] endpoint = [string] [EOL] from_parameter = [string] [EOL] [EOL] price_url = f' [string] { endpoint } [string] ' f'{ from_parameter } [string] { [string] . join ( from_currencies ) } [string] ' f' [string] { [string] . join ( to_currencies ) }' [EOL] resp = await fetch ( price_url ) [EOL] if full : [EOL] resp = resp [ [string] ] [EOL] return resp [EOL] [EOL] [EOL] async def fetch_coin_list ( ) : [EOL] global _coin_list [EOL] async with asyncio . Lock ( ) : [EOL] if not _coin_list : [EOL] coin_list_url = [string] [EOL] _coin_list = await fetch ( coin_list_url ) [EOL] return _coin_list [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0
class CryptoPriceException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class CurrencyNotFound ( CryptoPriceException ) : [EOL] pass [EOL] [EOL] [EOL] class UnfetchedInformation ( CryptoPriceException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import aiocrypto_prices [EOL] import typing [EOL] from . aiocrypto_prices import Currencies , Currency , Prices [EOL] [EOL] __title__ = [string] [EOL] __author__ = [string] [EOL] __license__ = [string] [EOL] __copyright__ = [string] [EOL] __version__ = [string] [EOL] [EOL] [comment] [EOL] currencies = Currencies ( ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $aiocrypto_prices.aiocrypto_prices.Currencies$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
import _pytest [EOL] import pytest [EOL] from _pytest . fixtures import SubRequest [EOL] [EOL] from aiocrypto_prices import Currencies [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def currencies ( ) : [EOL] return Currencies ( ) [EOL] [EOL] [EOL] @ pytest . fixture def symbols ( ) : [EOL] return [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . fixture ( params = symbols ( ) ) def symbol_from ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . fixture ( params = symbols ( ) ) def symbol_to ( request ) : [EOL] return request . param [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import builtins [EOL] import aiocrypto_prices [EOL] import typing [EOL] from typing import List [EOL] [EOL] import pytest [EOL] [EOL] from aiocrypto_prices import Currencies , Currency [EOL] [EOL] [comment] [EOL] [EOL] pytestmark = pytest . mark . asyncio [EOL] [EOL] [EOL] async def test_single_get ( currencies , symbol_from , symbol_to ) : [EOL] [docstring] [EOL] resp = await getattr ( currencies , symbol_from ) . prices . get ( symbol_to ) [EOL] assert isinstance ( resp , float ) [EOL] [EOL] [EOL] async def test_load_all ( currencies , symbols , symbol_to ) : [EOL] [docstring] [EOL] currencies . target_currencies = symbols [EOL] currencies . add ( * symbols ) [EOL] await currencies . load_all ( ) [EOL] for symbol in symbols : [EOL] assert isinstance ( getattr ( getattr ( currencies , symbol ) . prices , symbol_to ) , float ) [EOL] [EOL] [EOL] async def test_full ( currencies , symbol_from , symbol_to ) : [EOL] [docstring] [EOL] currencies . full = True [EOL] currencies . target_currencies = [ symbol_to ] [EOL] currency = getattr ( currencies , symbol_from ) [EOL] await currency . load ( ) [EOL] assert isinstance ( currency . market_cap , float ) [EOL] assert isinstance ( currency . supply , float ) [EOL] [EOL] [EOL] async def test_full_multiple ( symbols , symbol_to ) : [EOL] [docstring] [EOL] currencies = Currencies ( full = True , target_currencies = [ symbol_to ] ) [EOL] currencies . add ( * symbols ) [EOL] await currencies . load_all ( ) [EOL] for symbol in symbols : [EOL] currency = getattr ( currencies , symbol ) [EOL] assert isinstance ( currency . market_cap , float ) [EOL] assert isinstance ( currency . supply , float ) [EOL] [EOL] [EOL] async def test_human ( currencies , symbol_from ) : [EOL] [docstring] [EOL] currencies . human = True [EOL] currencies . add ( symbol_from ) [EOL] await currencies . load_all ( ) [EOL] if not symbol_from == [string] : [EOL] assert getattr ( currencies , symbol_from ) . name [EOL] assert getattr ( currencies , symbol_from ) . image_url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0