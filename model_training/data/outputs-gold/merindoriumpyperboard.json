from pyperboard . cli import reporter [EOL] [EOL] [EOL] class PyperboardError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ConfigError ( PyperboardError ) : [EOL] pass [EOL] [EOL] [EOL] def exit_on_error ( func ) : [EOL] def decorator ( ) : [EOL] try : [EOL] func ( ) [EOL] except PyperboardError as e : [EOL] reporter . error ( e ) [EOL] exit ( [number] ) [EOL] [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from pyperboard . cli . reporter import Emoji , reporter [EOL] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
import builtins [EOL] import pyperboard [EOL] import click [EOL] import colorful [EOL] [EOL] colorful . disable ( ) [EOL] colorful . use_8_ansi_colors ( ) [EOL] [EOL] [EOL] class Emoji : [EOL] package = [string] [EOL] check_mark = [string] [EOL] cross_mark = [string] [EOL] info = [string] [EOL] [EOL] [EOL] class Reporter : [EOL] def info ( self , message ) : [EOL] click . echo ( [string] . format ( colorful . bold_cyan ( Emoji . info ) , message ) ) [EOL] [EOL] def error ( self , error ) : [EOL] click . echo ( f" [string] { colorful . bold_red ( Emoji . cross_mark ) } [string] { error }" , err = True ) [EOL] [EOL] def success ( self , message ) : [EOL] click . echo ( f" [string] { colorful . bold_green ( Emoji . check_mark ) } [string] { message }" ) [EOL] [EOL] [EOL] reporter = Reporter ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $pyperboard.cli.reporter.Reporter$ 0 0 0 0 0
import builtins [EOL] import yaml [EOL] [EOL] from pyperboard . errors import ConfigError [EOL] [EOL] [EOL] class ConfigFile : [EOL] def __init__ ( self , file_path ) : [EOL] self . file_path = file_path [EOL] [EOL] def read ( self ) : [EOL] try : [EOL] with open ( self . file_path , [string] ) as f : [EOL] return yaml . safe_load ( f . read ( ) ) [EOL] except IOError as e : [EOL] raise ConfigError ( f" [string] { e }" ) [EOL] except yaml . YAMLError : [EOL] raise ConfigError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Type [EOL] import typing [EOL] import pyperboard [EOL] import os [EOL] from typing import Any [EOL] [EOL] from marshmallow import EXCLUDE , Schema , fields [EOL] [EOL] [EOL] class File ( fields . String ) : [EOL] default_error_messages = { [string] : [string] } [EOL] [EOL] def _validate ( self , value ) : [EOL] working_dir = os . getcwd ( ) [EOL] file_abs_path = os . path . join ( working_dir , value ) [EOL] [EOL] if not os . path . isfile ( file_abs_path ) : [EOL] self . fail ( [string] , file_name = value ) [EOL] [EOL] [EOL] class ConfigSchema ( Schema ) : [EOL] pages = fields . List ( File , required = True ) [EOL] [EOL] class Meta : [EOL] unknown = EXCLUDE [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import builtins [EOL] import pyperboard [EOL] import os [EOL] [EOL] from marshmallow . exceptions import ValidationError [EOL] [EOL] from pyperboard . cli import reporter [EOL] from pyperboard . config . base import Config [EOL] from pyperboard . config . config_file import ConfigFile [EOL] from pyperboard . config . schema import ConfigSchema [EOL] from pyperboard . errors import ConfigError [EOL] [EOL] [EOL] class ConfigAssembler : [EOL] CONFIG_FILENAME = [string] [EOL] CONFIG_EXT = [ [string] , [string] ] [EOL] [EOL] def assemble ( self ) : [EOL] reporter . info ( [string] ) [EOL] config_file_path = self . _get_config_file_path ( ) [EOL] [EOL] config_file = ConfigFile ( file_path = config_file_path ) [EOL] [EOL] reporter . info ( f" [string] " ) [EOL] config_raw_data = config_file . read ( ) [EOL] [EOL] config_data = self . _load_config_data ( config_raw_data ) [EOL] [EOL] config = Config ( ) [EOL] config . update ( config_data ) [EOL] [EOL] reporter . success ( [string] ) [EOL] [EOL] return config [EOL] [EOL] def _get_config_file_path ( self ) : [EOL] [EOL] for ext in self . CONFIG_EXT : [EOL] filename = f"{ self . CONFIG_FILENAME } [string] { ext }" [EOL] path = os . path . join ( self . current_working_dir , filename ) [EOL] [EOL] if os . path . isfile ( path ) : [EOL] return path [EOL] [EOL] raise ConfigError ( [string] ) [EOL] [EOL] @ property def current_working_dir ( self ) : [EOL] return os . getcwd ( ) [EOL] [EOL] def _load_config_data ( self , raw_data ) : [EOL] try : [EOL] return ConfigSchema ( ) . load ( raw_data ) [EOL] except ValidationError : [EOL] raise ConfigError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $pyperboard.config.base.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $pyperboard.config.config_file.ConfigFile$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $pyperboard.config.config_file.ConfigFile$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $pyperboard.config.base.Config$ 0 0 0 0 0 $pyperboard.config.base.Config$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $pyperboard.config.base.Config$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] class Config : [EOL] def __init__ ( self ) : [EOL] self . pages = [ ] [EOL] [EOL] def update ( self , config ) : [EOL] for k , v in config . items ( ) : [EOL] setattr ( self , k , v ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0