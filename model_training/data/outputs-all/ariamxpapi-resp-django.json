from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . urls import path [EOL] [EOL] [comment] [EOL] from cride . users . views import ( UserLoginAPIView , UserSignUpAPIView ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , UserLoginAPIView . as_view ( ) , name = [string] ) , path ( [string] , UserSignUpAPIView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . users import * [EOL]	0 0 0 0 0 0
	0
from . users import User [EOL] from . profiles import Profile [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from . users import * [EOL]	0 0 0 0 0 0
	0
from typing import Type [EOL] import cride [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from rest_framework import serializers [EOL] from rest_framework . validators import UniqueValidator [EOL] [EOL] [comment] [EOL] from cride . circles . models import Circle [EOL] [EOL] class CircleSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] name = serializers . CharField ( ) [EOL] slug_name = serializers . SlugField ( ) [EOL] rides_taken = serializers . IntegerField ( ) [EOL] rides_offered = serializers . IntegerField ( ) [EOL] members_limit = serializers . IntegerField ( ) [EOL] [EOL] [EOL] class CreateCircleSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] name = serializers . CharField ( max_length = [number] ) [EOL] slug_name = serializers . SlugField ( max_length = [number] , validators = [ UniqueValidator ( queryset = Circle . objects . all ( ) ) ] ) [EOL] about = serializers . CharField ( max_length = [number] , required = False ) [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] return Circle . objects . create ( ** data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CircleSerializer]$ 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CircleSerializer]$ 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CircleSerializer]$ 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CircleSerializer]$ 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CircleSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CreateCircleSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CreateCircleSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.serializers.CreateCircleSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class CirclesAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . urls import path [EOL] [EOL] [comment] [EOL] from cride . circles . views import list_circles , create_circle [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , list_circles ) , path ( [string] , create_circle ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . circles import Circle [EOL]	0 0 0 0 0 0
	0
	0
	0
	0