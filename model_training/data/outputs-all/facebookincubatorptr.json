[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Union [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] from pathlib import Path [EOL] from setuptools import setup [EOL] [EOL] [EOL] [comment] [EOL] ptr_params = { [string] : True , [string] : [string] , [string] : [string] , [string] : [number] , [string] : { [string] : [number] , [string] : [number] } , [string] : True , [string] : True , [string] : True , [string] : True , [string] : True , } [EOL] [EOL] [EOL] def get_long_desc ( ) : [EOL] repo_base = Path ( __file__ ) . parent [EOL] long_desc = [string] [EOL] for info_file in ( repo_base / [string] , repo_base / [string] ) : [EOL] with info_file . open ( [string] , encoding = [string] ) as ifp : [EOL] long_desc += ifp . read ( ) [EOL] long_desc += [string] [EOL] [EOL] return long_desc [EOL] [EOL] [EOL] setup ( name = ptr_params [ [string] ] , version = [string] , description = [string] , long_description = get_long_desc ( ) , long_description_content_type = [string] , py_modules = [ [string] , [string] , [string] ] , url = [string] , author = [string] , author_email = [string] , license = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , python_requires = [string] , install_requires = None , entry_points = { [string] : [ [string] ] } , test_suite = ptr_params [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],builtins.int,builtins.str]]$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import pathlib [EOL] import typing [EOL] import subprocess [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import json [EOL] import sys [EOL] from os import environ [EOL] from pathlib import Path [EOL] from subprocess import PIPE , run [EOL] from tempfile import gettempdir [EOL] [EOL] [EOL] def check_ptr_stats_json ( stats_file ) : [EOL] stats_errors = [number] [EOL] [EOL] if not stats_file . exists ( ) : [EOL] print ( f"{ stats_file } [string] " ) [EOL] return [number] [EOL] [EOL] try : [EOL] with stats_file . open ( [string] ) as sfp : [EOL] stats_json = json . load ( sfp ) [EOL] except json . JSONDecodeError as jde : [EOL] print ( f" [string] { jde }" ) [EOL] return [number] [EOL] [EOL] [comment] [EOL] print ( json . dumps ( stats_json , indent = [number] , sort_keys = True ) ) [EOL] [EOL] any_fail = int ( stats_json [ [string] ] ) + int ( stats_json [ [string] ] ) [EOL] if any_fail : [EOL] print ( f" [string] { any_fail } [string] " , file = sys . stderr ) [EOL] return any_fail [EOL] [EOL] if int ( stats_json [ [string] ] ) > [number] : [EOL] print ( [string] , file = sys . stderr ) [EOL] stats_errors += [number] [EOL] [EOL] if int ( stats_json [ [string] ] ) != [number] : [EOL] print ( [string] , file = sys . stderr ) [EOL] stats_errors += [number] [EOL] [EOL] [comment] [EOL] coverage_key_count = [number] [EOL] for key in stats_json . keys ( ) : [EOL] if [string] in key : [EOL] coverage_key_count += [number] [EOL] if coverage_key_count != [number] : [EOL] print ( [string] , file = sys . stderr ) [EOL] stats_errors += [number] [EOL] [EOL] print ( f" [string] { stats_errors } [string] " ) [EOL] [EOL] return stats_errors [EOL] [EOL] [EOL] def integration_test ( ) : [EOL] [comment] [EOL] print ( [string] , file = sys . stderr ) [EOL] [EOL] stats_file = Path ( gettempdir ( ) ) / [string] [EOL] ci_cmd = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , str ( stats_file ) , ] [EOL] if [string] in environ : [EOL] ci_cmd . extend ( [ [string] , environ [ [string] ] ] ) [EOL] [EOL] cp = run ( ci_cmd , check = True ) [EOL] return cp . returncode + check_ptr_stats_json ( stats_file ) [EOL] [EOL] [EOL] def ci ( show_env = False ) : [EOL] [comment] [EOL] cp = run ( ( [string] , [string] ) , check = True , stdout = PIPE , universal_newlines = True ) [EOL] print ( f" [string] { cp . stdout }" , file = sys . stderr ) [EOL] [EOL] if show_env : [EOL] print ( [string] , file = sys . stderr ) [EOL] for key in sorted ( environ . keys ( ) ) : [EOL] print ( f"{ key } [string] { environ [ key ] }" , file = sys . stderr ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in environ or ( [string] in environ and environ [ [string] ] == [string] ) : [EOL] return integration_test ( ) [EOL] [EOL] print ( [string] , file = sys . stderr ) [EOL] return run ( ( [string] , [string] , [string] ) , check = True ) . returncode [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( ci ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0