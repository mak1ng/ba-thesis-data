[comment] [EOL]	0 0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . test import RequestFactory [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def media_storage ( settings , tmpdir ) : [EOL] settings . MEDIA_ROOT = tmpdir . strpath [EOL] [EOL] @ pytest . fixture def request_factory ( ) : [EOL] return RequestFactory ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.test.RequestFactory$ 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Commit , Contributor [EOL] [EOL] admin . site . register ( Commit ) [EOL] admin . site . register ( Contributor ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List , Type [EOL] import thanks_python [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] [EOL] import django_filters [EOL] from django . http import HttpResponse , Http404 [EOL] from django . template import loader [EOL] from django . db . models import Count , Q [EOL] from django_filters . views import FilterView [EOL] from django_filters . widgets import RangeWidget [EOL] [EOL] from . models import Contributor , Tag , Commit [EOL] [EOL] from django_tables2 import RequestConfig , tables , SingleTableMixin [EOL] from django_tables2 . columns import TemplateColumn , LinkColumn [EOL] from django_tables2 . utils import A [EOL] [EOL] [EOL] def all_time ( request ) : [EOL] valid_commits = Count ( [string] , filter = Q ( commit__merge = False ) ) [EOL] all_contributors = Contributor . objects . annotate ( number_of_commits = valid_commits ) . order_by ( [string] ) [EOL] template = loader . get_template ( [string] ) [EOL] context = { [string] : all_contributors } [EOL] return HttpResponse ( template . render ( context , request ) ) [EOL] [EOL] [EOL] class CommitFilter ( django_filters . FilterSet ) : [EOL] creation_date = django_filters . DateFromToRangeFilter ( widget = RangeWidget ( attrs = { [string] : [string] } ) ) [EOL] [EOL] class Meta : [EOL] model = Commit [EOL] fields = { [string] : [ [string] ] } [EOL] [EOL] [EOL] class CommitTable ( tables . Table ) : [EOL] sha = TemplateColumn ( [string] ) [EOL] [EOL] class Meta : [EOL] model = Commit [EOL] [EOL] fields = [ [string] , [string] , [string] ] [EOL] attrs = { [string] : [string] } [EOL] [EOL] [EOL] class CommitTableWithAuthor ( CommitTable ) : [EOL] author = LinkColumn ( [string] , text = lambda record : record . author . username , args = [ A ( [string] ) ] , ) [EOL] [EOL] class Meta : [EOL] model = Commit [EOL] [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] attrs = { [string] : [string] } [EOL] [EOL] [EOL] class FilterCommitListView ( SingleTableMixin , FilterView ) : [EOL] table_class = CommitTable [EOL] model = Commit [EOL] [EOL] filterset_class = CommitFilter [EOL] [EOL] def get_table_kwargs ( self ) : [EOL] return { [string] : [string] } [EOL] [EOL] def get_filterset_kwargs ( self , filterset_class ) : [EOL] kwargs = super ( ) . get_filterset_kwargs ( filterset_class ) [EOL] if kwargs [ [string] ] is None : [EOL] kwargs [ [string] ] = { } [EOL] return kwargs [EOL] [EOL] [EOL] class ContributorCommitsView ( FilterCommitListView ) : [EOL] template_name = [string] [EOL] paginate_by = [number] [EOL] [EOL] def get_queryset ( self ) : [EOL] contributor = Contributor . objects . get ( id = self . kwargs [ [string] ] ) [EOL] commits = contributor . commit_set . filter ( merge = False ) . order_by ( [string] ) [EOL] return commits [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] contributor = Contributor . objects . get ( id = self . kwargs [ [string] ] ) [EOL] context [ [string] ] = contributor . username [EOL] return context [EOL] [EOL] [EOL] class CommitsSinceListView ( FilterCommitListView ) : [EOL] table_class = CommitTableWithAuthor [EOL] template_name = [string] [EOL] paginate_by = [number] [EOL] [EOL] def _target_date ( self ) : [EOL] from_date = datetime . datetime . now ( ) . replace ( hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] return from_date - datetime . timedelta ( days = int ( self . kwargs [ [string] ] ) ) [EOL] [EOL] def get_queryset ( self ) : [EOL] if self . kwargs [ [string] ] > [number] : [EOL] raise Http404 [EOL] commits = Commit . objects . filter ( creation_date__gt = self . _target_date ( ) ) . order_by ( [string] ) [EOL] return commits [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = self . _target_date ( ) . date ( ) [EOL] return context [EOL] [EOL] [EOL] def tag_contributors ( request , tag ) : [EOL] tag = Tag . objects . get ( name = tag ) [EOL] author_ids = tag . commit_set . values_list ( [string] , flat = True ) . distinct ( ) [EOL] authors = Contributor . objects . filter ( id__in = author_ids ) . order_by ( [string] ) [EOL] template = loader . get_template ( [string] ) [EOL] context = { [string] : authors } [EOL] return HttpResponse ( template . render ( context , request ) ) [EOL] [EOL] [EOL] def index ( request ) : [EOL] all_tags = ( Tag . objects . filter ( name__startswith = [string] ) . order_by ( [string] ) . values_list ( [string] , flat = True ) ) [EOL] template = loader . get_template ( [string] ) [EOL] context = { [string] : [ [string] ] + list ( all_tags ) } [EOL] return HttpResponse ( template . render ( context , request ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitTable]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitTableWithAuthor]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitTableWithAuthor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitTable]$ 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.views.CommitTableWithAuthor]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . urls import path , include [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) , path ( [string] , views . all_time , name = [string] ) , path ( [string] , views . tag_contributors , name = [string] ) , path ( [string] , views . CommitsSinceListView . as_view ( ) , name = [string] ) , path ( [string] , views . ContributorCommitsView . as_view ( ) , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] EMAIL_MAP = { [string] : [string] } [EOL] [EOL] NAME_MAP = { } [EOL] [EOL] [EOL] def canonical_name ( name , email ) : [EOL] if email in EMAIL_MAP : [EOL] return EMAIL_MAP [ email ] [EOL] [EOL] if name in NAME_MAP : [EOL] return NAME_MAP [ name ] [EOL] [EOL] return name [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0
from typing import Type [EOL] import thanks_python [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Contributor ( models . Model ) : [EOL] username = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . username } [string] ' [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . username }' [EOL] [EOL] [EOL] class Tag ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . name } [string] ' [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . name }' [EOL] [EOL] [EOL] class Commit ( models . Model ) : [EOL] sha = models . CharField ( max_length = [number] , unique = True ) [EOL] creation_date = models . DateTimeField ( db_index = True ) [EOL] author = models . ForeignKey ( Contributor , on_delete = models . CASCADE , db_index = True ) [EOL] message = models . TextField ( ) [EOL] merge = models . BooleanField ( ) [EOL] [EOL] tags = models . ManyToManyField ( Tag , db_index = True ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . sha } [string] ' [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . sha }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Contributor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 0 $typing.Type[thanks_python.contributions.models.Commit]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ContributionsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery , bootsteps [EOL] from django . apps import apps , AppConfig [EOL] from django . conf import settings [EOL] [EOL] from . . contributions . tasks import setup_cpython_repo , update_database_objects [EOL] [EOL] if not settings . configured : [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [comment] [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] [EOL] class CeleryAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] installed_apps = [ app_config . name for app_config in apps . get_app_configs ( ) ] [EOL] app . autodiscover_tasks ( lambda : installed_apps , force = True ) [EOL] [EOL] if hasattr ( settings , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from raven import Client as RavenClient [EOL] from raven . contrib . celery import register_signal as raven_register_signal [EOL] from raven . contrib . celery import register_logger_signal as raven_register_logger_signal [EOL] [comment] [EOL] [EOL] raven_client = RavenClient ( dsn = settings . RAVEN_CONFIG [ [string] ] ) [EOL] raven_register_logger_signal ( raven_client ) [EOL] raven_register_signal ( raven_client ) [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( f' [string] { self . request !r}' ) [comment] [EOL] [EOL] [EOL] class InitRepoStep ( bootsteps . StartStopStep ) : [EOL] def start ( self , c ) : [EOL] setup_cpython_repo ( ) [EOL] update_database_objects ( ) [EOL] [EOL] [EOL] app . steps [ [string] ] . add ( InitRepoStep ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from . celery import app as celery [EOL]	0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import include , path [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . views . generic import TemplateView [EOL] from django . views import defaults as default_views [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] , ) , path ( settings . ADMIN_URL , admin . site . urls ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . server_error ) , ] [EOL] if [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import sys [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [comment] [EOL] [comment] [EOL] app_path = os . path . abspath ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , os . pardir ) ) [EOL] sys . path . append ( os . path . join ( app_path , [string] ) ) [EOL] if os . environ . get ( [string] ) == [string] : [EOL] from raven . contrib . django . raven_compat . middleware . wsgi import Sentry [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] application = get_wsgi_application ( ) [EOL] if os . environ . get ( [string] ) == [string] : [EOL] application = Sentry ( application ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
	0