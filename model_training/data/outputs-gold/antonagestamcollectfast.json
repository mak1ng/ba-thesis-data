from setuptools import setup [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] import os [EOL] import shutil [EOL] [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def create_test_directories ( ) : [EOL] paths = ( settings . STATICFILES_DIRS [ [number] ] , settings . STATIC_ROOT , settings . MEDIA_ROOT ) [EOL] for path in paths : [EOL] if not os . path . exists ( path ) : [EOL] os . makedirs ( path ) [EOL] try : [EOL] yield [EOL] finally : [EOL] for path in paths : [EOL] shutil . rmtree ( path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
	0
from typing import Dict , Literal , Any , Type , List , Union , Tuple , Optional [EOL] import typing_extensions [EOL] import collectfast [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] from typing import Any [EOL] from typing import Dict [EOL] from typing import List [EOL] from typing import Optional [EOL] from typing import Tuple [EOL] from typing import Type [EOL] [EOL] from django . conf import settings as django_settings [EOL] from django . contrib . staticfiles . management . commands import collectstatic [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . core . files . storage import Storage [EOL] from django . core . management . base import CommandParser [EOL] [EOL] from collectfast import __version__ [EOL] from collectfast import settings [EOL] from collectfast . strategies import DisabledStrategy [EOL] from collectfast . strategies import load_strategy [EOL] from collectfast . strategies import Strategy [EOL] [EOL] [EOL] Task = Tuple [ str , str , Storage ] [EOL] [EOL] [EOL] class Command ( collectstatic . Command ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . num_copied_files = [number] [EOL] self . tasks = [ ] [EOL] self . collectfast_enabled = settings . enabled [EOL] self . strategy = DisabledStrategy ( Storage ( ) ) [EOL] self . found_files = { } [EOL] [EOL] @ staticmethod def _load_strategy ( ) : [EOL] strategy_str = getattr ( django_settings , [string] , None ) [EOL] if strategy_str is not None : [EOL] return load_strategy ( strategy_str ) [EOL] [EOL] raise ImproperlyConfigured ( [string] ) [EOL] [EOL] def get_version ( self ) : [EOL] return __version__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] super ( ) . add_arguments ( parser ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , default = False , help = [string] , ) [EOL] [EOL] def set_options ( self , ** options ) : [EOL] self . collectfast_enabled = self . collectfast_enabled and not options . pop ( [string] ) [EOL] if self . collectfast_enabled : [EOL] self . strategy = self . _load_strategy ( ) ( self . storage ) [EOL] super ( ) . set_options ( ** options ) [EOL] [EOL] def collect ( self ) : [EOL] [docstring] [EOL] if not self . collectfast_enabled or not settings . threads : [EOL] return super ( ) . collect ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] super_post_process = self . post_process [EOL] self . post_process = False [EOL] [EOL] return_value = super ( ) . collect ( ) [EOL] [EOL] with ThreadPoolExecutor ( settings . threads ) as pool : [EOL] pool . map ( self . maybe_copy_file , self . tasks ) [EOL] [EOL] self . maybe_post_process ( super_post_process ) [EOL] return_value [ [string] ] = self . post_processed_files [EOL] [EOL] return return_value [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [docstring] [EOL] ret = super ( ) . handle ( ** options ) [EOL] if not self . collectfast_enabled : [EOL] return ret [EOL] plural = [string] if self . num_copied_files == [number] else [string] [EOL] return f"{ self . num_copied_files } [string] { plural } [string] " [EOL] [EOL] def maybe_copy_file ( self , args ) : [EOL] [docstring] [EOL] path , prefixed_path , source_storage = args [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . found_files [ prefixed_path ] = ( source_storage , path ) [EOL] [EOL] if self . collectfast_enabled and not self . dry_run : [EOL] self . strategy . pre_should_copy_hook ( ) [EOL] [EOL] if not self . strategy . should_copy_file ( path , prefixed_path , source_storage ) : [EOL] self . log ( f" [string] { path } [string] " ) [EOL] self . strategy . on_skip_hook ( path , prefixed_path , source_storage ) [EOL] return [EOL] [EOL] self . num_copied_files += [number] [EOL] [EOL] existed = prefixed_path in self . copied_files [EOL] super ( ) . copy_file ( path , prefixed_path , source_storage ) [EOL] copied = not existed and prefixed_path in self . copied_files [EOL] if copied : [EOL] self . strategy . post_copy_hook ( path , prefixed_path , source_storage ) [EOL] else : [EOL] self . strategy . on_skip_hook ( path , prefixed_path , source_storage ) [EOL] [EOL] def copy_file ( self , path , prefixed_path , source_storage ) : [EOL] [docstring] [EOL] args = ( path , prefixed_path , source_storage ) [EOL] if settings . threads and self . collectfast_enabled : [EOL] self . tasks . append ( args ) [EOL] else : [EOL] self . maybe_copy_file ( args ) [EOL] [EOL] def delete_file ( self , path , prefixed_path , source_storage ) : [EOL] [docstring] [EOL] if not self . collectfast_enabled : [EOL] return super ( ) . delete_file ( path , prefixed_path , source_storage ) [EOL] [EOL] if self . dry_run : [EOL] self . log ( f" [string] { path } [string] " ) [EOL] return True [EOL] [EOL] self . log ( f" [string] { path } [string] " ) [EOL] [EOL] try : [EOL] self . storage . delete ( prefixed_path ) [EOL] except self . strategy . delete_not_found_exception : [EOL] pass [EOL] [EOL] return True [EOL] [EOL] def maybe_post_process ( self , super_post_process ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if not super_post_process or not hasattr ( self . storage , [string] ) : [EOL] return [EOL] [EOL] processor = self . storage . post_process ( self . found_files , dry_run = self . dry_run ) [EOL] [EOL] for original_path , processed_path , processed in processor : [EOL] if isinstance ( processed , Exception ) : [EOL] self . stderr . write ( [string] % original_path ) [EOL] [comment] [EOL] [comment] [EOL] self . stderr . write ( [string] ) [EOL] raise processed [EOL] if processed : [EOL] self . log ( [string] % ( original_path , processed_path ) , level = [number] , ) [EOL] self . post_processed_files . append ( original_path ) [EOL] else : [EOL] self . log ( [string] % original_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from importlib import reload [EOL] [EOL] import pytest [EOL] from django . test . utils import override_settings [EOL] [EOL] from collectfast import settings [EOL] [EOL] [EOL] @ override_settings ( FOO = [number] ) def test_get_setting_returns_valid_value ( ) : [EOL] assert [number] == settings . _get_setting ( int , [string] , [number] ) [EOL] [EOL] [EOL] def test_get_setting_returns_default_value_for_missing_setting ( ) : [EOL] assert [number] == settings . _get_setting ( int , [string] , [number] ) [EOL] [EOL] [EOL] @ override_settings ( FOO = [string] ) def test_get_setting_raises_for_invalid_type ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] settings . _get_setting ( int , [string] , [number] ) [EOL] [EOL] [EOL] def test_basic_settings ( ) : [EOL] with override_settings ( COLLECTFAST_DEBUG = True , COLLECTFAST_CACHE = [string] , COLLECTFAST_ENABLED = False , AWS_IS_GZIPPED = True , GZIP_CONTENT_TYPES = ( [string] , [string] ) , COLLECTFAST_THREADS = [number] , ) : [EOL] reload ( settings ) [EOL] assert settings . debug is True [EOL] assert isinstance ( settings . cache_key_prefix , str ) [EOL] assert settings . cache == [string] [EOL] assert settings . enabled is False [EOL] assert isinstance ( settings . gzip_content_types , tuple ) [EOL] assert settings . threads == [number] [EOL] [EOL] [EOL] def test_settings_with_threads ( ) : [EOL] with override_settings ( COLLECTFAST_THREADS = [number] ) : [EOL] reload ( settings ) [EOL] assert settings . threads == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( { [string] : [string] } , { [string] : [number] } , { [string] : None } , { [string] : None } , { [string] : [number] } , { [string] : [string] } , { [string] : [string] } , ) , ) def test_invalid_setting_type_raises_value_error ( django_settings ) : [EOL] with override_settings ( ** django_settings ) : [EOL] with pytest . raises ( ValueError ) : [EOL] reload ( settings ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Tuple , Any [EOL] import typing [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] import tempfile [EOL] [EOL] from google . oauth2 import service_account [EOL] [EOL] base_path = pathlib . Path . cwd ( ) [EOL] [EOL] [comment] [EOL] USE_TZ = True [EOL] [EOL] SECRET_KEY = [string] [EOL] CACHES = { [string] : { [string] : [string] , [string] : [string] , } } [EOL] TEMPLATE_LOADERS = ( [string] , [string] , [string] , ) [EOL] TEMPLATE_DIRS = [ str ( base_path / [string] ) ] [EOL] INSTALLED_APPS = ( [string] , [string] ) [EOL] STATIC_URL = [string] [EOL] STATIC_ROOT = str ( base_path / [string] ) [EOL] MEDIA_ROOT = str ( base_path / [string] ) [EOL] STATICFILES_DIRS = [ str ( base_path / [string] ) ] [EOL] STATICFILES_STORAGE = [string] [EOL] COLLECTFAST_STRATEGY = [string] [EOL] COLLECTFAST_DEBUG = True [EOL] [EOL] GZIP_CONTENT_TYPES = ( [string] , ) [EOL] [EOL] [comment] [EOL] AWS_PRELOAD_METADATA = True [EOL] AWS_STORAGE_BUCKET_NAME = [string] [EOL] AWS_IS_GZIPPED = False [EOL] AWS_ACCESS_KEY_ID = os . environ . get ( [string] , [string] ) . strip ( ) [EOL] AWS_SECRET_ACCESS_KEY = os . environ . get ( [string] , [string] ) . strip ( ) [EOL] AWS_S3_REGION_NAME = [string] [EOL] AWS_S3_SIGNATURE_VERSION = [string] [EOL] AWS_QUERYSTRING_AUTH = False [EOL] AWS_DEFAULT_ACL = None [EOL] S3_USE_SIGV4 = True [EOL] AWS_S3_HOST = [string] [EOL] [EOL] [comment] [EOL] gcloud_credentials_json = os . environ . get ( [string] , [string] ) . strip ( ) [EOL] if not gcloud_credentials_json : [EOL] GS_CREDENTIALS = None [EOL] else : [EOL] with tempfile . NamedTemporaryFile ( ) as file : [EOL] file . write ( gcloud_credentials_json . encode ( ) ) [EOL] file . read ( ) [EOL] GS_CREDENTIALS = service_account . Credentials . from_service_account_file ( file . name ) [EOL] GS_BUCKET_NAME = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict , Type , Callable [EOL] import typing [EOL] import collectfast [EOL] import unittest [EOL] import pathlib [EOL] from unittest import mock [EOL] from unittest import TestCase [EOL] [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . test import override_settings as override_django_settings [EOL] [EOL] from . utils import call_collectstatic [EOL] from collectfast . management . commands . collectstatic import Command [EOL] from collectfast . tests . utils import clean_static_dir [EOL] from collectfast . tests . utils import create_static_file [EOL] from collectfast . tests . utils import live_test [EOL] from collectfast . tests . utils import make_test [EOL] from collectfast . tests . utils import override_setting [EOL] from collectfast . tests . utils import override_storage_attr [EOL] from collectfast . tests . utils import test_many [EOL] [EOL] [EOL] aws_backend_confs = { [string] : override_django_settings ( STATICFILES_STORAGE = [string] , COLLECTFAST_STRATEGY = [string] , ) , } [EOL] all_backend_confs = { ** aws_backend_confs , [string] : override_django_settings ( STATICFILES_STORAGE = [string] , COLLECTFAST_STRATEGY = [string] , ) , [string] : override_django_settings ( STATICFILES_STORAGE = [string] , COLLECTFAST_STRATEGY = [string] , ) , [string] : override_django_settings ( STATICFILES_STORAGE = [string] , COLLECTFAST_STRATEGY = ( [string] ) , ) , } [EOL] [EOL] make_test_aws_backends = test_many ( ** aws_backend_confs ) [EOL] make_test_all_backends = test_many ( ** all_backend_confs ) [EOL] [EOL] [EOL] @ make_test_all_backends @ live_test def test_basics ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [comment] [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [EOL] [EOL] @ make_test_all_backends @ live_test @ override_setting ( [string] , [number] ) def test_threads ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [comment] [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [EOL] [EOL] @ make_test def test_dry_run ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] result = call_collectstatic ( dry_run = True ) [EOL] case . assertIn ( [string] , result ) [EOL] case . assertTrue ( [string] , result ) [EOL] result = call_collectstatic ( dry_run = True ) [EOL] case . assertIn ( [string] , result ) [EOL] case . assertTrue ( [string] , result ) [EOL] case . assertTrue ( [string] , result ) [EOL] [EOL] [EOL] @ make_test_aws_backends @ live_test @ override_storage_attr ( [string] , True ) @ override_setting ( [string] , True ) def test_aws_is_gzipped ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [comment] [EOL] case . assertIn ( [string] , call_collectstatic ( ) ) [EOL] [EOL] [EOL] @ make_test @ override_django_settings ( STATICFILES_STORAGE = None , COLLECTFAST_STRATEGY = None ) def test_raises_for_no_configured_strategy ( case ) : [EOL] with case . assertRaises ( ImproperlyConfigured ) : [EOL] Command . _load_strategy ( ) [EOL] [EOL] [EOL] @ make_test_all_backends @ live_test @ mock . patch ( [string] , autospec = True ) def test_calls_post_copy_hook ( _case , post_copy_hook ) : [EOL] clean_static_dir ( ) [EOL] path = create_static_file ( ) [EOL] cmd = Command ( ) [EOL] cmd . run_from_argv ( [ [string] , [string] , [string] ] ) [EOL] post_copy_hook . assert_called_once_with ( mock . ANY , path . name , path . name , mock . ANY ) [EOL] [EOL] [EOL] @ make_test_all_backends @ live_test @ mock . patch ( [string] , autospec = True ) def test_calls_on_skip_hook ( _case , on_skip_hook ) : [EOL] clean_static_dir ( ) [EOL] path = create_static_file ( ) [EOL] cmd = Command ( ) [EOL] cmd . run_from_argv ( [ [string] , [string] , [string] ] ) [EOL] on_skip_hook . assert_not_called ( ) [EOL] cmd . run_from_argv ( [ [string] , [string] , [string] ] ) [EOL] on_skip_hook . assert_called_once_with ( mock . ANY , path . name , path . name , mock . ANY ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Type[unittest.case.TestCase]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import collectfast [EOL] import unittest [EOL] import pathlib [EOL] from unittest import mock [EOL] [EOL] from django . contrib . staticfiles . storage import StaticFilesStorage [EOL] from django . test import override_settings as override_django_settings [EOL] [EOL] from collectfast . management . commands . collectstatic import Command [EOL] from collectfast . tests . utils import clean_static_dir [EOL] from collectfast . tests . utils import create_static_file [EOL] from collectfast . tests . utils import override_setting [EOL] [EOL] [EOL] class MockPostProcessing ( StaticFilesStorage ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . post_process = mock . MagicMock ( ) [EOL] [EOL] [EOL] @ override_setting ( [string] , [number] ) @ override_django_settings ( STATICFILES_STORAGE = [string] ) def test_calls_post_process_with_collected_files ( ) : [EOL] clean_static_dir ( ) [EOL] path = create_static_file ( ) [EOL] [EOL] cmd = Command ( ) [EOL] cmd . run_from_argv ( [ [string] , [string] , [string] ] ) [EOL] cmd . storage . post_process . assert_called_once_with ( { path . name : ( mock . ANY , path . name ) } , dry_run = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import unittest [EOL] from unittest import mock [EOL] from unittest import TestCase [EOL] [EOL] from django . test import override_settings as override_django_settings [EOL] [EOL] from . utils import call_collectstatic [EOL] from collectfast . tests . utils import clean_static_dir [EOL] from collectfast . tests . utils import create_static_file [EOL] from collectfast . tests . utils import live_test [EOL] from collectfast . tests . utils import make_test [EOL] from collectfast . tests . utils import override_setting [EOL] [EOL] [EOL] @ make_test @ override_django_settings ( STATICFILES_STORAGE = [string] ) def test_disable_collectfast_with_default_storage ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] case . assertIn ( [string] , call_collectstatic ( disable_collectfast = True ) ) [EOL] [EOL] [EOL] @ make_test @ live_test def test_disable_collectfast ( case ) : [EOL] clean_static_dir ( ) [EOL] create_static_file ( ) [EOL] case . assertIn ( [string] , call_collectstatic ( disable_collectfast = True ) ) [EOL] [EOL] [EOL] @ override_setting ( [string] , False ) @ mock . patch ( [string] ) def test_no_load_with_disable_setting ( mocked_load_strategy ) : [EOL] clean_static_dir ( ) [EOL] call_collectstatic ( ) [EOL] mocked_load_strategy . assert_not_called ( ) [EOL] [EOL] [EOL] @ mock . patch ( [string] ) def test_no_load_with_disable_flag ( mocked_load_strategy ) : [EOL] clean_static_dir ( ) [EOL] call_collectstatic ( disable_collectfast = True ) [EOL] mocked_load_strategy . assert_not_called ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import io [EOL] import builtins [EOL] from io import StringIO [EOL] from typing import Any [EOL] [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] def call_collectstatic ( * args , ** kwargs ) : [EOL] out = StringIO ( ) [EOL] call_command ( [string] , * args , verbosity = [number] , interactive = False , stdout = out , ** kwargs ) [EOL] return out . getvalue ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import unittest [EOL] import collectfast [EOL] import re [EOL] import tempfile [EOL] from unittest import mock [EOL] from unittest import TestCase [EOL] [EOL] from django . contrib . staticfiles . storage import StaticFilesStorage [EOL] from django . core . files . storage import FileSystemStorage [EOL] [EOL] from collectfast . strategies . base import HashStrategy [EOL] from collectfast . tests . utils import make_test [EOL] [EOL] [EOL] class Strategy ( HashStrategy [ FileSystemStorage ] ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( FileSystemStorage ( ) ) [EOL] [EOL] def get_remote_file_hash ( self , prefixed_path ) : [EOL] pass [EOL] [EOL] [EOL] @ make_test def test_get_file_hash ( case ) : [EOL] strategy = Strategy ( ) [EOL] local_storage = StaticFilesStorage ( ) [EOL] [EOL] with tempfile . NamedTemporaryFile ( dir = local_storage . base_location ) as f : [EOL] f . write ( [string] ) [EOL] hash_ = strategy . get_local_file_hash ( f . name , local_storage ) [EOL] case . assertTrue ( re . fullmatch ( [string] , hash_ ) is not None ) [EOL] [EOL] [EOL] @ make_test def test_should_copy_file ( case ) : [EOL] strategy = Strategy ( ) [EOL] local_storage = StaticFilesStorage ( ) [EOL] remote_hash = [string] [EOL] mock_remote_hash = mock . patch . object ( strategy , [string] , mock . MagicMock ( return_value = remote_hash ) ) [EOL] [EOL] with mock_remote_hash : [EOL] with mock . patch . object ( strategy , [string] , mock . MagicMock ( return_value = remote_hash ) ) : [EOL] case . assertFalse ( strategy . should_copy_file ( [string] , [string] , local_storage ) ) [EOL] with mock . patch . object ( strategy , [string] , mock . MagicMock ( return_value = [string] ) ) : [EOL] case . assertTrue ( strategy . should_copy_file ( [string] , [string] , local_storage ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , ClassVar , TypeVar , NoReturn , Type , Union , Tuple , Optional [EOL] import io [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import gzip [EOL] import django [EOL] import abc [EOL] import gzip [EOL] import hashlib [EOL] import logging [EOL] import mimetypes [EOL] import pydoc [EOL] from functools import lru_cache [EOL] from io import BytesIO [EOL] from typing import ClassVar [EOL] from typing import Generic [EOL] from typing import NoReturn [EOL] from typing import Optional [EOL] from typing import Tuple [EOL] from typing import Type [EOL] from typing import TypeVar [EOL] from typing import Union [EOL] [EOL] from django . core . cache import caches [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . core . files . storage import Storage [EOL] from django . utils . encoding import force_bytes [EOL] [EOL] from collectfast import settings [EOL] [EOL] [EOL] _RemoteStorage = TypeVar ( [string] , bound = Storage ) [EOL] [EOL] [EOL] cache = caches [ settings . cache ] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Strategy ( abc . ABC , Generic [ _RemoteStorage ] ) : [EOL] [comment] [EOL] [comment] [EOL] delete_not_found_exception = ( ) [EOL] [EOL] def __init__ ( self , remote_storage ) : [EOL] self . remote_storage = remote_storage [EOL] [EOL] @ abc . abstractmethod def should_copy_file ( self , path , prefixed_path , local_storage ) : [EOL] [docstring] [EOL] ... [EOL] [EOL] def pre_should_copy_hook ( self ) : [EOL] [docstring] [EOL] ... [EOL] [EOL] def post_copy_hook ( self , path , prefixed_path , local_storage ) : [EOL] [docstring] [EOL] ... [EOL] [EOL] def on_skip_hook ( self , path , prefixed_path , local_storage ) : [EOL] [docstring] [EOL] ... [EOL] [EOL] [EOL] class HashStrategy ( Strategy [ _RemoteStorage ] , abc . ABC ) : [EOL] use_gzip = False [EOL] [EOL] def should_copy_file ( self , path , prefixed_path , local_storage ) : [EOL] local_hash = self . get_local_file_hash ( path , local_storage ) [EOL] remote_hash = self . get_remote_file_hash ( prefixed_path ) [EOL] return local_hash != remote_hash [EOL] [EOL] def get_gzipped_local_file_hash ( self , uncompressed_file_hash , path , contents ) : [EOL] buffer = BytesIO ( ) [EOL] zf = gzip . GzipFile ( mode = [string] , fileobj = buffer , mtime = [number] ) [EOL] zf . write ( force_bytes ( contents ) ) [EOL] zf . close ( ) [EOL] return hashlib . md5 ( buffer . getvalue ( ) ) . hexdigest ( ) [EOL] [EOL] @ lru_cache ( maxsize = None ) def get_local_file_hash ( self , path , local_storage ) : [EOL] [docstring] [EOL] [comment] [EOL] file = local_storage . open ( path ) [EOL] try : [EOL] contents = file . read ( ) [EOL] finally : [EOL] file . close ( ) [EOL] [EOL] file_hash = hashlib . md5 ( contents ) . hexdigest ( ) [EOL] [EOL] [comment] [EOL] content_type = mimetypes . guess_type ( path ) [ [number] ] or [string] [EOL] if self . use_gzip and content_type in settings . gzip_content_types : [EOL] file_hash = self . get_gzipped_local_file_hash ( file_hash , path , contents ) [EOL] [EOL] return file_hash [EOL] [EOL] @ abc . abstractmethod def get_remote_file_hash ( self , prefixed_path ) : [EOL] ... [EOL] [EOL] [EOL] class CachingHashStrategy ( HashStrategy [ _RemoteStorage ] , abc . ABC ) : [EOL] @ lru_cache ( maxsize = None ) def get_cache_key ( self , path ) : [EOL] path_hash = hashlib . md5 ( path . encode ( ) ) . hexdigest ( ) [EOL] return settings . cache_key_prefix + path_hash [EOL] [EOL] def invalidate_cached_hash ( self , path ) : [EOL] cache . delete ( self . get_cache_key ( path ) ) [EOL] [EOL] def should_copy_file ( self , path , prefixed_path , local_storage ) : [EOL] local_hash = self . get_local_file_hash ( path , local_storage ) [EOL] remote_hash = self . get_cached_remote_file_hash ( path , prefixed_path ) [EOL] if local_hash != remote_hash : [EOL] [comment] [EOL] [comment] [EOL] self . invalidate_cached_hash ( path ) [EOL] return True [EOL] return False [EOL] [EOL] def get_cached_remote_file_hash ( self , path , prefixed_path ) : [EOL] [docstring] [EOL] cache_key = self . get_cache_key ( path ) [EOL] hash_ = cache . get ( cache_key , False ) [EOL] if hash_ is False : [EOL] hash_ = self . get_remote_file_hash ( prefixed_path ) [EOL] cache . set ( cache_key , hash_ ) [EOL] return str ( hash_ ) [EOL] [EOL] def get_gzipped_local_file_hash ( self , uncompressed_file_hash , path , contents ) : [EOL] [docstring] [EOL] cache_key = self . get_cache_key ( [string] % uncompressed_file_hash ) [EOL] file_hash = cache . get ( cache_key , False ) [EOL] if file_hash is False : [EOL] file_hash = super ( ) . get_gzipped_local_file_hash ( uncompressed_file_hash , path , contents ) [EOL] cache . set ( cache_key , file_hash ) [EOL] return str ( file_hash ) [EOL] [EOL] def post_copy_hook ( self , path , prefixed_path , local_storage ) : [EOL] [docstring] [EOL] super ( ) . post_copy_hook ( path , prefixed_path , local_storage ) [EOL] key = self . get_cache_key ( path ) [EOL] value = self . get_local_file_hash ( path , local_storage ) [EOL] cache . set ( key , value ) [EOL] [EOL] [EOL] class DisabledStrategy ( Strategy ) : [EOL] def should_copy_file ( self , path , prefixed_path , local_storage ) : [EOL] raise NotImplementedError [EOL] [EOL] def pre_should_copy_hook ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def load_strategy ( klass ) : [EOL] if isinstance ( klass , str ) : [EOL] klass = pydoc . locate ( klass ) [EOL] if not isinstance ( klass , type ) or not issubclass ( klass , Strategy ) : [EOL] raise ImproperlyConfigured ( [string] % ( Strategy . __module__ , Strategy . __qualname__ ) ) [EOL] return klass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[typing.Tuple[typing.Type[builtins.Exception],...]]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $io.BytesIO$ 0 0 0 0 0 $gzip.GzipFile$ 0 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 $gzip.GzipFile$ 0 0 0 0 0 $builtins.str$ 0 0 0 $gzip.GzipFile$ 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 $typing.Any$ 0 $django.core.files.storage.Storage$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.NoReturn$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $django.core.files.storage.Storage$ 0 0 0 0 0 0 0 0 $typing.NoReturn$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Strategy[django.core.files.storage.Storage]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from . base import DisabledStrategy [EOL] from . base import load_strategy [EOL] from . base import Strategy [EOL] [EOL] __all__ = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import logging [EOL] import storages [EOL] import builtins [EOL] import logging [EOL] from typing import Optional [EOL] [EOL] import botocore . exceptions [EOL] from storages . backends . s3boto3 import S3Boto3Storage [EOL] from storages . utils import safe_join [EOL] [EOL] from . base import CachingHashStrategy [EOL] from collectfast import settings [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Boto3Strategy ( CachingHashStrategy [ S3Boto3Storage ] ) : [EOL] def __init__ ( self , remote_storage ) : [EOL] super ( ) . __init__ ( remote_storage ) [EOL] self . remote_storage . preload_metadata = True [EOL] self . use_gzip = settings . aws_is_gzipped [EOL] [EOL] def _normalize_path ( self , prefixed_path ) : [EOL] path = str ( safe_join ( self . remote_storage . location , prefixed_path ) ) [EOL] return path . replace ( [string] , [string] ) [EOL] [EOL] @ staticmethod def _clean_hash ( quoted_hash ) : [EOL] [docstring] [EOL] if quoted_hash is None : [EOL] return None [EOL] assert quoted_hash [ [number] ] == quoted_hash [ - [number] ] == [string] [EOL] return quoted_hash [ [number] : - [number] ] [EOL] [EOL] def get_remote_file_hash ( self , prefixed_path ) : [EOL] normalized_path = self . _normalize_path ( prefixed_path ) [EOL] logger . debug ( [string] , extra = { [string] : normalized_path } ) [EOL] try : [EOL] hash_ = self . remote_storage . bucket . Object ( normalized_path ) . e_tag [EOL] except botocore . exceptions . ClientError : [EOL] logger . debug ( [string] , exc_info = True ) [EOL] return None [EOL] return self . _clean_hash ( hash_ ) [EOL] [EOL] def pre_should_copy_hook ( self ) : [EOL] if settings . threads : [EOL] logger . info ( [string] ) [EOL] self . remote_storage . _connection = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $storages.backends.s3boto3.S3Boto3Storage$ 0 0 0 0 0 0 0 0 0 $storages.backends.s3boto3.S3Boto3Storage$ 0 0 0 0 $storages.backends.s3boto3.S3Boto3Storage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from django . core . files . storage import FileSystemStorage [EOL] [EOL] from . base import CachingHashStrategy [EOL] from . base import HashStrategy [EOL] [EOL] [EOL] class FileSystemStrategy ( HashStrategy [ FileSystemStorage ] ) : [EOL] def get_remote_file_hash ( self , prefixed_path ) : [EOL] try : [EOL] return self . get_local_file_hash ( prefixed_path , self . remote_storage ) [EOL] except FileNotFoundError : [EOL] return None [EOL] [EOL] [EOL] class CachingFileSystemStrategy ( CachingHashStrategy [ FileSystemStorage ] , FileSystemStrategy , ) : [EOL] ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional , Any [EOL] import typing [EOL] import builtins [EOL] import collectfast [EOL] import base64 [EOL] import binascii [EOL] from typing import Optional [EOL] [EOL] from google . api_core . exceptions import NotFound [EOL] from storages . backends . gcloud import GoogleCloudStorage [EOL] [EOL] from . base import CachingHashStrategy [EOL] [EOL] [EOL] class GoogleCloudStrategy ( CachingHashStrategy [ GoogleCloudStorage ] ) : [EOL] delete_not_found_exception = ( NotFound , ) [EOL] [EOL] def get_remote_file_hash ( self , prefixed_path ) : [EOL] normalized_path = prefixed_path . replace ( [string] , [string] ) [EOL] blob = self . remote_storage . bucket . get_blob ( normalized_path ) [EOL] if blob is None : [EOL] return blob [EOL] md5_base64 = blob . _properties [ [string] ] [EOL] return binascii . hexlify ( base64 . urlsafe_b64decode ( md5_base64 ) ) . decode ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0