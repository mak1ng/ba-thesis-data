from typing import Dict , Any , Union , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from datetime import date [EOL] [EOL] import arrow [EOL] from mock import patch , call [EOL] import pytest [EOL] [EOL] from jira_timemachine import Worklog , get_worklogs , format_time , match_worklog [EOL] [EOL] [EOL] def test_worklog_to_tempo ( ) : [EOL] [docstring] [EOL] assert Worklog ( id = [number] , tempo_id = [number] , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = [string] , author = [string] , issue = [string] , ) . to_tempo ( ) == { [string] : [ ] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( False , True ) , ( True , False ) , ) ) def test_get_worklogs ( all_users , single_user ) : [EOL] [docstring] [EOL] old_sample_worklogs = [ Worklog ( id = [number] , tempo_id = [number] , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = [string] , author = [string] , issue = [string] ) , Worklog ( id = [number] , tempo_id = [number] , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = [string] , author = [string] , issue = [string] ) , ] [EOL] recent_sample_worklogs = [ Worklog ( id = [number] , tempo_id = [number] , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = [string] , author = [string] , issue = [string] ) , Worklog ( id = [number] , tempo_id = [number] , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = [string] , author = [string] , issue = [string] ) , ] [EOL] config = { [string] : True , [string] : [string] } [EOL] with patch ( [string] ) as mock_get_client : [EOL] mock_get_client . return_value . get_worklogs . return_value = iter ( old_sample_worklogs + recent_sample_worklogs ) [EOL] assert list ( get_worklogs ( config , arrow . get ( [string] ) , all_users ) ) == recent_sample_worklogs [EOL] [EOL] assert mock_get_client . mock_calls == [ call ( config ) , call ( ) . get_worklogs ( from_date = date ( [number] , [number] , [number] ) , single_user = single_user ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] * [number] , [string] ) , ( [number] * [number] + [number] , [string] ) , ( [number] * [number] + [number] * [number] , [string] ) , ( [number] * [number] + [number] * [number] + [number] , [string] ) , ) ) def test_format_time ( seconds , result ) : [EOL] [docstring] [EOL] assert format_time ( seconds ) == result [EOL] [EOL] [EOL] def test_match_worklog ( ) : [EOL] [docstring] [EOL] def make ( i , description ) : [EOL] [docstring] [EOL] return Worklog ( id = i , tempo_id = None , started = arrow . get ( [string] ) , time_spent_seconds = [number] , description = description , author = [string] , issue = [string] ) [EOL] [EOL] w123 = make ( [number] , [string] ) [EOL] w124 = make ( [number] , [string] ) [EOL] source_worklogs = { [number] : w123 , [number] : w124 , } [EOL] [EOL] assert match_worklog ( source_worklogs , make ( [number] , [string] ) ) is None [EOL] assert match_worklog ( source_worklogs , make ( [number] , [string] ) ) is None [EOL] assert match_worklog ( source_worklogs , make ( [number] , [string] ) ) is w123 [EOL] assert match_worklog ( source_worklogs , make ( [number] , [string] ) ) is w124 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0