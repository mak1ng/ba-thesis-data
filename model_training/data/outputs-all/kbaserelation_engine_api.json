from setuptools import setup [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , url = [string] , packages = [ [string] ] , install_requires = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Union , Dict , Any [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import json [EOL] import requests [EOL] from typing import Optional , List , Dict , Union [EOL] [EOL] from . exceptions import REServerError , RERequestError , RENotFound [EOL] [EOL] _QUERY_METHOD = [string] [EOL] _QUERY_ENDPOINT = [string] [EOL] _SAVE_METHOD = [string] [EOL] _SAVE_ENDPOINT = [string] [EOL] [EOL] [EOL] class REClient : [EOL] [EOL] def __init__ ( self , api_url , token = None ) : [EOL] self . api_url = api_url [EOL] self . token = token [EOL] [comment] [EOL] if not self . api_url or not isinstance ( self . api_url , str ) : [EOL] raise TypeError ( [string] ) [EOL] [comment] [EOL] self . api_url = self . api_url . strip ( [string] ) [EOL] [EOL] def admin_query ( self , query , bind_vars , raise_not_found = False ) : [EOL] [docstring] [EOL] [comment] [EOL] if not isinstance ( query , str ) : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( bind_vars , dict ) : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( raise_not_found , bool ) : [EOL] raise TypeError ( [string] ) [EOL] [comment] [EOL] req_body = dict ( bind_vars ) [EOL] req_body [ [string] ] = query [EOL] url = str ( self . api_url ) + _QUERY_ENDPOINT [EOL] resp = self . _make_request ( method = _QUERY_METHOD , url = url , data = json . dumps ( req_body ) , params = { } , raise_not_found = raise_not_found ) [EOL] return resp [EOL] [EOL] def stored_query ( self , stored_query , bind_vars , raise_not_found = False ) : [EOL] [docstring] [EOL] [comment] [EOL] if not isinstance ( stored_query , str ) : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( bind_vars , dict ) : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( raise_not_found , bool ) : [EOL] raise TypeError ( [string] ) [EOL] [comment] [EOL] req_body = dict ( bind_vars ) [EOL] url = str ( self . api_url ) + _QUERY_ENDPOINT [EOL] return self . _make_request ( method = _QUERY_METHOD , url = url , data = json . dumps ( req_body ) , params = { [string] : stored_query } , raise_not_found = raise_not_found ) [EOL] [EOL] def save_docs ( self , coll , docs , on_duplicate = None , display_errors = False ) : [EOL] [docstring] [EOL] if isinstance ( docs , dict ) : [EOL] docs = [ docs ] [EOL] if not docs : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( docs , list ) : [EOL] raise TypeError ( [string] ) [EOL] if on_duplicate and not isinstance ( on_duplicate , str ) : [EOL] raise TypeError ( [string] ) [EOL] if not isinstance ( display_errors , bool ) : [EOL] raise TypeError ( [string] ) [EOL] params = { [string] : coll } [EOL] if display_errors : [EOL] params [ [string] ] = [string] [EOL] params [ [string] ] = on_duplicate or [string] [EOL] req_body = [string] . join ( json . dumps ( d ) for d in docs ) [EOL] url = str ( self . api_url ) + _SAVE_ENDPOINT [EOL] return self . _make_request ( method = _SAVE_METHOD , url = url , data = req_body , params = params , raise_not_found = False ) [EOL] [EOL] def _make_request ( self , method , url , data , params , raise_not_found ) : [EOL] [docstring] [EOL] headers = { } [EOL] if self . token : [EOL] headers [ [string] ] = self . token [EOL] resp = requests . request ( method = method , url = url , data = data , params = params , headers = headers ) [EOL] if resp . status_code >= [number] : [EOL] [comment] [EOL] raise REServerError ( resp ) [EOL] elif resp . status_code >= [number] and resp . status_code < [number] : [EOL] [comment] [EOL] raise RERequestError ( resp ) [EOL] elif not resp . ok : [EOL] raise RuntimeError ( f" [string] { resp . url } [string] { method } [string] { resp . text }" ) [EOL] resp_json = resp . json ( ) [EOL] if raise_not_found and not len ( resp_json [ [string] ] ) : [EOL] [comment] [EOL] raise RENotFound ( req_body = data , req_params = params ) [EOL] return resp_json [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List [EOL] import typing [EOL] from . main import REClient [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[EOL] class REServerError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , resp ) : [EOL] self . resp = resp [EOL] [EOL] def __str__ ( self ) : [EOL] return ( f" [string] " f" [string] { self . resp . status_code } [string] " f" [string] { self . resp . text }" ) [EOL] [EOL] [EOL] class RERequestError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , resp ) : [EOL] self . resp = resp [EOL] [EOL] def __str__ ( self ) : [EOL] return ( f" [string] " f" [string] { self . resp . status_code } [string] " f" [string] { self . resp . text }" ) [EOL] [EOL] [EOL] class RENotFound ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , req_body , req_params ) : [EOL] self . req_body = req_body [EOL] self . req_params = req_params [EOL] [EOL] def __str__ ( self ) : [EOL] return ( f" [string] " f" [string] { self . req_body } [string] " f" [string] { self . req_params }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict , Any [EOL] import typing [EOL] import unittest [EOL] import os [EOL] from uuid import uuid4 [EOL] [EOL] from relation_engine_client import REClient [EOL] from relation_engine_client . exceptions import RERequestError , RENotFound [EOL] [EOL] _API_URL = os . environ . get ( [string] , [string] ) [EOL] [comment] [EOL] [comment] [EOL] _VERT_COLL = [string] [EOL] _EDGE_COLL = [string] [EOL] [comment] [EOL] [comment] [EOL] _TOK_ADMIN = [string] [EOL] _TOK_USER = [string] [EOL] _TOK_INVALID = [string] [EOL] [EOL] [EOL] class TestREClientIntegration ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] cls . client = REClient ( _API_URL , _TOK_ADMIN ) [EOL] [EOL] def test_admin_query_ok ( self ) : [EOL] _id = self . _save_test_vert ( ) [EOL] bind_vars = { [string] : _id } [EOL] query = f" [string] { _VERT_COLL } [string] " [EOL] result = self . client . admin_query ( query , bind_vars ) [EOL] self . assertEqual ( result [ [string] ] , [number] ) [EOL] self . assertEqual ( result [ [string] ] [ [number] ] [ [string] ] , _id ) [EOL] [EOL] def test_admin_query_empty_auth ( self ) : [EOL] client2 = REClient ( _API_URL ) [EOL] query = f" [string] { _VERT_COLL } [string] " [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] client2 . admin_query ( query , { [string] : [string] } ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_admin_query_invalid_auth ( self ) : [EOL] client2 = REClient ( _API_URL , [string] ) [EOL] query = f" [string] { _VERT_COLL } [string] " [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] client2 . admin_query ( query , { [string] : [string] } ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_admin_empty_query ( self ) : [EOL] bind_vars = { [string] : [string] } [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . admin_query ( [string] , bind_vars ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_admin_missing_param ( self ) : [EOL] query = f" [string] { _VERT_COLL } [string] " [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . admin_query ( query , bind_vars = { } ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_admin_raise_not_found ( self ) : [EOL] query = f" [string] { _VERT_COLL } [string] " [EOL] _id = str ( uuid4 ( ) ) [EOL] bind_vars = { [string] : _id } [EOL] with self . assertRaises ( RENotFound ) as ctx : [EOL] self . client . admin_query ( query , bind_vars , raise_not_found = True ) [EOL] self . assertTrue ( _id in ctx . exception . req_body ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_admin_invalid_args ( self ) : [EOL] [comment] [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . admin_query ( ) [EOL] [comment] [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . admin_query ( [number] ) [EOL] [comment] [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . admin_query ( [string] , [number] ) [EOL] [EOL] def test_stored_query_ok ( self ) : [EOL] _id = self . _save_test_vert ( ) [EOL] bind_vars = { [string] : _id } [EOL] qname = [string] [EOL] result = self . client . stored_query ( qname , bind_vars ) [EOL] self . assertEqual ( result [ [string] ] , [number] ) [EOL] self . assertEqual ( result [ [string] ] [ [number] ] [ [string] ] , _id ) [EOL] [EOL] def test_stored_query_invalid_args ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . stored_query ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . stored_query ( [number] , [number] ) [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . stored_query ( [string] ) [EOL] [EOL] def test_stored_query_unknown_query ( self ) : [EOL] qname = [string] [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . admin_query ( qname , bind_vars = { [string] : [number] } ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_stored_query_missing_bind_vars ( self ) : [EOL] qname = [string] [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . admin_query ( qname , bind_vars = { [string] : [string] } ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_stored_query_raise_not_found ( self ) : [EOL] _id = str ( uuid4 ( ) ) [EOL] bind_vars = { [string] : _id } [EOL] qname = [string] [EOL] with self . assertRaises ( RENotFound ) as ctx : [EOL] self . client . stored_query ( qname , bind_vars , raise_not_found = True ) [EOL] self . assertTrue ( _id in ctx . exception . req_body ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_save_docs_ok ( self ) : [EOL] _id = str ( uuid4 ( ) ) [EOL] docs = [ { [string] : _id } ] [EOL] results = self . client . save_docs ( coll = _VERT_COLL , docs = docs ) [EOL] self . assertEqual ( results [ [string] ] , [number] ) [EOL] self . assertFalse ( results [ [string] ] ) [EOL] self . assertEqual ( results [ [string] ] , [number] ) [EOL] self . assertEqual ( results [ [string] ] , [number] ) [EOL] self . assertEqual ( results [ [string] ] , [number] ) [EOL] [EOL] def test_save_docs_empty_auth ( self ) : [EOL] client2 = REClient ( _API_URL ) [EOL] docs = [ { [string] : [string] } ] [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] client2 . save_docs ( coll = _VERT_COLL , docs = docs ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_save_docs_invalid_auth ( self ) : [EOL] client2 = REClient ( _API_URL , [string] ) [EOL] docs = [ { [string] : [string] } ] [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] client2 . save_docs ( coll = _VERT_COLL , docs = docs ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_save_docs_invalid_args ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . save_docs ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . save_docs ( [number] , [number] ) [EOL] [comment] [EOL] with self . assertRaises ( TypeError ) : [EOL] self . client . save_docs ( _VERT_COLL , [ ] ) [EOL] [EOL] def test_save_docs_unknown_coll ( self ) : [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . save_docs ( [string] , [ { [string] : [number] } ] ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] def test_save_docs_invalid_docs ( self ) : [EOL] with self . assertRaises ( RERequestError ) as ctx : [EOL] self . client . save_docs ( _VERT_COLL , [ { [string] : [number] } ] ) [EOL] self . assertEqual ( ctx . exception . resp . status_code , [number] ) [EOL] [comment] [EOL] self . assertTrue ( [string] in str ( ctx . exception ) ) [EOL] [EOL] [comment] [EOL] [EOL] def _save_test_vert ( self ) : [EOL] [docstring] [EOL] _id = str ( uuid4 ( ) ) [EOL] docs = [ { [string] : _id } ] [EOL] results = self . client . save_docs ( coll = _VERT_COLL , docs = docs ) [EOL] if results [ [string] ] : [EOL] raise RuntimeError ( results ) [EOL] return _id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0
	0
from typing import Tuple , List , Dict , Any [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] import unittest [EOL] import requests [EOL] import json [EOL] import os [EOL] [EOL] from src . relation_engine_server . utils . config import get_config [EOL] [EOL] _CONF = get_config ( ) [EOL] [EOL] [comment] [EOL] NON_ADMIN_TOKEN = [string] [EOL] ADMIN_TOKEN = [string] [EOL] INVALID_TOKEN = [string] [EOL] [EOL] [comment] [EOL] URL = os . environ . get ( [string] , [string] ) [EOL] VERSION = [string] [EOL] API_URL = [string] . join ( [ URL , [string] , VERSION ] ) [EOL] [EOL] HEADERS_NON_ADMIN = { [string] : [string] + NON_ADMIN_TOKEN , [string] : [string] } [EOL] HEADERS_ADMIN = { [string] : [string] + ADMIN_TOKEN , [string] : [string] } [EOL] [EOL] [EOL] def create_test_docs ( count ) : [EOL] [docstring] [EOL] def doc ( i ) : [EOL] return [string] % i [EOL] return [string] . join ( doc ( i ) for i in range ( [number] , count ) ) [EOL] [EOL] [EOL] def create_test_edges ( count ) : [EOL] [docstring] [EOL] def doc ( i ) : [EOL] return [string] % ( i , i ) [EOL] return [string] . join ( doc ( i ) for i in range ( [number] , count ) ) [EOL] [EOL] [EOL] def save_test_docs ( count , edges = False ) : [EOL] if edges : [EOL] docs = create_test_edges ( count ) [EOL] collection = [string] [EOL] else : [EOL] docs = create_test_docs ( count ) [EOL] collection = [string] [EOL] return requests . put ( API_URL + [string] , params = { [string] : True , [string] : collection } , data = docs , headers = HEADERS_ADMIN ) . json ( ) [EOL] [EOL] [EOL] class TestApi ( unittest . TestCase ) : [EOL] [EOL] def test_root ( self ) : [EOL] [docstring] [EOL] resp = requests . get ( URL + [string] ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] [EOL] def test_config ( self ) : [EOL] [docstring] [EOL] resp = requests . get ( API_URL + [string] ) . json ( ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) ) [EOL] [EOL] def test_update_specs ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , headers = HEADERS_ADMIN , params = { [string] : [string] , [string] : [string] } ) [EOL] resp_json = resp . json ( ) [EOL] self . assertEqual ( resp . status_code , [number] ) [EOL] self . assertTrue ( len ( resp_json [ [string] ] ) ) [EOL] [comment] [EOL] url = _CONF [ [string] ] + [string] [EOL] auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) [EOL] resp = requests . get ( url , params = { [string] : [string] } , auth = auth ) [EOL] resp_json = resp . json ( ) [EOL] indexes = resp_json [ [string] ] [EOL] self . assertEqual ( len ( indexes ) , [number] ) [EOL] fields = [ i [ [string] ] for i in indexes ] [EOL] self . assertEqual ( set ( tuple ( f ) for f in fields ) , { ( [string] , ) , ( [string] , ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) } ) [EOL] [EOL] def test_list_stored_queries ( self ) : [EOL] [docstring] [EOL] resp = requests . get ( API_URL + [string] ) . json ( ) [EOL] self . assertTrue ( [string] in resp ) [EOL] [EOL] def test_list_schemas ( self ) : [EOL] [docstring] [EOL] resp = requests . get ( API_URL + [string] ) . json ( ) [EOL] self . assertTrue ( [string] in resp ) [EOL] self . assertTrue ( [string] in resp ) [EOL] self . assertFalse ( [string] in resp ) [EOL] self . assertTrue ( len ( resp ) ) [EOL] [EOL] def test_fetch_schema_for_doc ( self ) : [EOL] [docstring] [EOL] resp = requests . get ( API_URL + [string] , params = { [string] : [string] } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] [EOL] def test_save_documents_missing_auth ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , { [string] : [string] , [string] : [number] } ) [EOL] [EOL] def test_save_documents_invalid_auth ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , headers = { [string] : [string] + INVALID_TOKEN } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] [EOL] def test_save_documents_non_admin ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , headers = HEADERS_NON_ADMIN ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] [EOL] def test_save_documents_invalid_schema ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , { [string] : [string] } ) [EOL] self . assertEqual ( resp [ [string] ] , [ ] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] [EOL] def test_save_documents_missing_schema ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) . json ( ) [EOL] self . assertTrue ( [string] in resp [ [string] ] ) [EOL] [EOL] def test_save_documents_invalid_json ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) . json ( ) [EOL] self . assertTrue ( [string] in resp [ [string] ] ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] [EOL] def test_create_documents ( self ) : [EOL] [docstring] [EOL] resp = save_test_docs ( [number] ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_create_edges ( self ) : [EOL] [docstring] [EOL] resp = save_test_docs ( [number] , edges = True ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_update_documents ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = create_test_docs ( [number] ) , headers = HEADERS_ADMIN ) . json ( ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_update_edge ( self ) : [EOL] [docstring] [EOL] edges = create_test_edges ( [number] ) [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = create_test_edges ( [number] ) , headers = HEADERS_ADMIN ) [EOL] self . assertTrue ( resp . ok ) [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = edges , headers = HEADERS_ADMIN ) . json ( ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_replace_documents ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = create_test_docs ( [number] ) , headers = HEADERS_ADMIN ) . json ( ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_save_documents_dupe_errors ( self ) : [EOL] [docstring] [EOL] save_test_docs ( [number] ) [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] , [string] : [string] } , data = create_test_docs ( [number] ) , headers = HEADERS_ADMIN ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] [EOL] def test_save_documents_ignore_dupes ( self ) : [EOL] [docstring] [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : [string] , [string] : [string] } , data = create_test_docs ( [number] ) , headers = HEADERS_ADMIN ) . json ( ) [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : False } [EOL] self . assertEqual ( resp , expected ) [EOL] [EOL] def test_admin_query ( self ) : [EOL] [docstring] [EOL] save_test_docs ( [number] ) [EOL] query = [string] [EOL] resp = requests . post ( API_URL + [string] , params = { } , headers = HEADERS_ADMIN , data = json . dumps ( { [string] : query , [string] : [number] } ) ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( len ( resp [ [string] ] ) , [number] ) [EOL] [EOL] def test_admin_query_non_admin ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] resp = requests . post ( API_URL + [string] , params = { } , headers = HEADERS_NON_ADMIN , data = json . dumps ( { [string] : query , [string] : [number] } ) ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] [EOL] def test_admin_query_invalid_auth ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] resp = requests . post ( API_URL + [string] , params = { } , headers = { [string] : INVALID_TOKEN } , data = json . dumps ( { [string] : query , [string] : [number] } ) ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] [EOL] def test_query_with_cursor ( self ) : [EOL] [docstring] [EOL] save_test_docs ( count = [number] ) [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] , [string] : [number] , [string] : True } ) . json ( ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] self . assertEqual ( resp [ [string] ] , True ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) , [number] ) [EOL] cursor_id = resp [ [string] ] [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : cursor_id } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] , False ) [EOL] self . assertEqual ( resp [ [string] ] , None ) [EOL] self . assertTrue ( len ( resp [ [string] ] ) , [number] ) [EOL] [comment] [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : cursor_id } ) . json ( ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] [EOL] def test_query_no_name ( self ) : [EOL] [docstring] [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] [EOL] def test_query_missing_bind_var ( self ) : [EOL] [docstring] [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } , data = json . dumps ( { [string] : [string] } ) ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertTrue ( resp [ [string] ] ) [EOL] [EOL] def test_auth_query_with_access ( self ) : [EOL] [docstring] [EOL] ws_id = [number] [EOL] [comment] [EOL] requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] } , data = json . dumps ( { [string] : [string] , [string] : [string] , [string] : ws_id } ) , headers = HEADERS_ADMIN ) [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } , headers = { [string] : [string] } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] self . assertEqual ( resp [ [string] ] [ [number] ] [ [string] ] , ws_id ) [EOL] [EOL] def test_auth_query_no_access ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } , headers = { [string] : [string] } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] [EOL] def test_query_cannot_pass_ws_ids ( self ) : [EOL] [docstring] [EOL] ws_id = [number] [EOL] requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } , data = json . dumps ( { [string] : [ ws_id ] } ) , headers = { [string] : [string] } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] [EOL] def test_auth_query_invalid_token ( self ) : [EOL] [docstring] [EOL] requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] } , data = [string] , headers = HEADERS_ADMIN ) [EOL] resp = requests . post ( API_URL + [string] , params = { [string] : [string] } , data = json . dumps ( { [string] : [ [number] ] } ) , headers = { [string] : INVALID_TOKEN } ) [EOL] self . assertEqual ( resp . status_code , [number] ) [EOL] [EOL] def test_auth_adhoc_query ( self ) : [EOL] [docstring] [EOL] ws_id = [number] [EOL] requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] } , data = json . dumps ( { [string] : [string] , [string] : [string] , [string] : ws_id } ) , headers = { [string] : [string] } ) [EOL] [comment] [EOL] query = [string] [EOL] resp = requests . post ( API_URL + [string] , data = json . dumps ( { [string] : query } ) , headers = { [string] : ADMIN_TOKEN } ) . json ( ) [EOL] self . assertEqual ( resp [ [string] ] , [number] ) [EOL] [EOL] def test_save_docs_invalid ( self ) : [EOL] [docstring] [EOL] doc = { [string] : [string] , [string] : [string] } [EOL] resp = requests . put ( API_URL + [string] , params = { [string] : True , [string] : [string] , [string] : [number] } , data = json . dumps ( doc ) , headers = HEADERS_ADMIN ) [EOL] self . assertEqual ( resp . status_code , [number] ) [EOL] resp_json = resp . json ( ) [EOL] self . assertEqual ( resp_json [ [string] ] , [number] ) [EOL] [EOL] def test_list_data_sources ( self ) : [EOL] resp = requests . get ( API_URL + [string] ) [EOL] self . assertTrue ( resp . ok ) [EOL] resp_json = resp . json ( ) [EOL] self . assertTrue ( len ( resp_json [ [string] ] ) > [number] ) [EOL] self . assertEqual ( set ( type ( x ) for x in resp_json [ [string] ] ) , { str } ) [EOL] [EOL] def test_show_data_source ( self ) : [EOL] resp = requests . get ( API_URL + [string] ) [EOL] self . assertTrue ( resp . ok ) [EOL] resp_json = resp . json ( ) [EOL] self . assertEqual ( type ( resp_json [ [string] ] ) , dict ) [EOL] self . assertEqual ( set ( resp_json [ [string] ] . keys ( ) ) , { [string] , [string] , [string] , [string] , [string] , [string] } ) [EOL] self . assertTrue ( [string] in resp_json [ [string] ] [ [string] ] ) [EOL] [EOL] def test_show_data_source_unknown ( self ) : [EOL] [docstring] [EOL] name = [string] [EOL] resp = requests . get ( f"{ API_URL } [string] { name }" ) [EOL] self . assertEqual ( resp . status_code , [number] ) [EOL] resp_json = resp . json ( ) [EOL] [comment] [EOL] self . assertEqual ( resp_json , { [string] : { [string] : [string] , [string] : [number] , [string] : f" [string] { name } [string] " , } } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[docstring] [EOL] import requests [EOL] import time [EOL] [EOL] [EOL] def main ( ) : [EOL] timeout = int ( time . time ( ) ) + [number] [EOL] while True : [EOL] try : [EOL] requests . get ( [string] ) . raise_for_status ( ) [EOL] break [EOL] except Exception : [EOL] print ( [string] ) [EOL] if int ( time . time ( ) ) > timeout : [EOL] raise RuntimeError ( [string] ) [EOL] time . sleep ( [number] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] [docstring] [EOL] import requests [EOL] import time [EOL] [EOL] from . utils . config import get_config [EOL] [EOL] _CONFIG = get_config ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] timeout = int ( time . time ( ) ) + [number] [EOL] adb_url = f"{ _CONFIG [ [string] ] } [string] " [EOL] while True : [EOL] try : [EOL] requests . get ( _CONFIG [ [string] ] ) [EOL] requests . get ( _CONFIG [ [string] ] ) [EOL] auth = ( _CONFIG [ [string] ] , _CONFIG [ [string] ] ) [EOL] requests . get ( adb_url , auth = auth ) . raise_for_status ( ) [EOL] break [EOL] except Exception : [EOL] print ( [string] ) [EOL] if int ( time . time ( ) ) > timeout : [EOL] raise RuntimeError ( [string] ) [EOL] time . sleep ( [number] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] [EOL] class InvalidParameters ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , msg ) : [EOL] self . msg = msg [EOL] [EOL] def __str__ ( self ) : [EOL] return self . msg [EOL] [EOL] [EOL] class MissingHeader ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , header_name ) : [EOL] self . header_name = header_name [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] + self . header_name [EOL] [EOL] [EOL] class UnauthorizedAccess ( Exception ) : [EOL] [string] [string] [EOL] [EOL] def __init__ ( self , auth_url , response ) : [EOL] self . auth_url = auth_url [EOL] self . response = response [EOL] [EOL] [EOL] class NotFound ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , details ) : [EOL] self . details = details [EOL] [EOL] def __str__ ( self ) : [EOL] return self . details [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Literal , Union , Dict , Any [EOL] import typing [EOL] import requests [EOL] import typing_extensions [EOL] [docstring] [EOL] import sys [EOL] import os [EOL] import requests [EOL] import json [EOL] [EOL] from . config import get_config [EOL] [EOL] _CONF = get_config ( ) [EOL] [EOL] [EOL] def server_status ( ) : [EOL] [docstring] [EOL] auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) [EOL] adb_url = f"{ _CONF [ [string] ] } [string] " [EOL] try : [EOL] resp = requests . get ( adb_url , auth = auth ) [EOL] except requests . exceptions . ConnectionError : [EOL] return [string] [EOL] if resp . ok : [EOL] return [string] [EOL] elif resp . status_code == [number] : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] [EOL] def run_query ( query_text = None , cursor_id = None , bind_vars = None , batch_size = [number] , full_count = False ) : [EOL] [docstring] [EOL] url = _CONF [ [string] ] + [string] [EOL] req_json = { [string] : min ( [number] , batch_size ) , [string] : [number] , } [EOL] if cursor_id : [EOL] method = [string] [EOL] url += [string] + cursor_id [EOL] else : [EOL] method = [string] [EOL] req_json [ [string] ] = True [EOL] req_json [ [string] ] = query_text [EOL] if full_count : [EOL] req_json [ [string] ] = { [string] : True } [EOL] if bind_vars : [EOL] req_json [ [string] ] = bind_vars [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] resp = requests . request ( method , url , data = json . dumps ( req_json ) , auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) ) [EOL] resp_json = resp . json ( ) [EOL] if not resp . ok or resp_json [ [string] ] : [EOL] raise ArangoServerError ( resp . text ) [EOL] return { [string] : resp_json [ [string] ] , [string] : resp_json [ [string] ] , [string] : resp_json [ [string] ] , [string] : resp_json . get ( [string] ) , [string] : resp_json [ [string] ] [ [string] ] } [EOL] [EOL] [EOL] def create_collection ( name , config ) : [EOL] [docstring] [EOL] is_edge = config [ [string] ] == [string] [EOL] num_shards = int ( os . environ . get ( [string] , [number] ) ) [EOL] url = _CONF [ [string] ] + [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] collection_type = [number] if is_edge else [number] [EOL] print ( f" [string] { name } [string] { is_edge } [string] " ) [EOL] data = json . dumps ( { [string] : { [string] : True } , [string] : name , [string] : collection_type , [string] : num_shards } ) [EOL] resp = requests . post ( url , data , auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) ) [EOL] resp_json = resp . json ( ) [EOL] if not resp . ok : [EOL] if [string] not in resp_json [ [string] ] : [EOL] [comment] [EOL] raise ArangoServerError ( resp . text ) [EOL] if config . get ( [string] ) : [EOL] _create_indexes ( name , config ) [EOL] [EOL] [EOL] def _create_indexes ( coll_name , config ) : [EOL] [docstring] [EOL] url = _CONF [ [string] ] + [string] [EOL] [comment] [EOL] auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) [EOL] resp = requests . get ( url , params = { [string] : coll_name } , auth = auth ) [EOL] if not resp . ok : [EOL] raise RuntimeError ( resp . text ) [EOL] indexes = resp . json ( ) [ [string] ] [EOL] for idx_conf in config [ [string] ] : [EOL] if _index_exists ( idx_conf , indexes ) : [EOL] continue [EOL] idx_type = idx_conf [ [string] ] [EOL] idx_url = url + [string] + idx_type [EOL] idx_conf [ [string] ] = idx_type [EOL] resp = requests . post ( idx_url , params = { [string] : coll_name } , data = json . dumps ( idx_conf ) , auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) ) [EOL] if not resp . ok : [EOL] raise RuntimeError ( resp . text ) [EOL] print ( f' [string] { idx_type } [string] { idx_conf [ [string] ] } [string] { coll_name } [string] ' ) [EOL] [EOL] [EOL] def _index_exists ( idx_conf , indexes ) : [EOL] [docstring] [EOL] for idx in indexes : [EOL] if idx_conf [ [string] ] == idx [ [string] ] and idx_conf [ [string] ] == idx [ [string] ] : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def import_from_file ( file_path , query ) : [EOL] [docstring] [EOL] with open ( file_path , [string] ) as file_desc : [EOL] resp = requests . post ( _CONF [ [string] ] + [string] , data = file_desc , auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) , params = query ) [EOL] if not resp . ok : [EOL] raise ArangoServerError ( resp . text ) [EOL] resp_json = resp . json ( ) [EOL] if resp_json . get ( [string] , [number] ) > [number] : [EOL] err_msg = f"{ resp_json [ [string] ] } [string] " [EOL] sys . stderr . write ( err_msg ) [EOL] details = resp_json . get ( [string] ) [EOL] if details : [EOL] sys . stderr . write ( f" [string] { details [ [number] ] } [string] " ) [EOL] return resp_json [EOL] [EOL] [EOL] def create_view ( name , config ) : [EOL] [docstring] [EOL] [EOL] url = _CONF [ [string] ] + [string] [EOL] [EOL] if [string] not in config : [EOL] config [ [string] ] = name [EOL] if [string] not in config : [EOL] config [ [string] ] = [string] [EOL] print ( f" [string] { name }" ) [EOL] data = json . dumps ( config ) [EOL] resp = requests . post ( url , data , auth = ( _CONF [ [string] ] , _CONF [ [string] ] ) ) [EOL] resp_json = resp . json ( ) [EOL] if not resp . ok : [EOL] if [string] not in resp_json [ [string] ] : [EOL] [comment] [EOL] raise ArangoServerError ( resp . text ) [EOL] [EOL] [EOL] class ArangoServerError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , resp_text ) : [EOL] self . resp_text = resp_text [EOL] self . resp_json = json . loads ( resp_text ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] import yaml [EOL] import os [EOL] import glob [EOL] [EOL] from src . relation_engine_server . utils . config import get_config [EOL] from src . relation_engine_server . exceptions import NotFound [EOL] [EOL] _CONF = get_config ( ) [EOL] _PATH = _CONF [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def list_all ( ) : [EOL] [docstring] [EOL] names = [ ] [EOL] for path in glob . iglob ( os . path . join ( _PATH + [string] ) ) : [EOL] with open ( path ) as fd : [EOL] contents = yaml . safe_load ( fd ) [EOL] names . append ( contents [ [string] ] ) [EOL] return names [EOL] [EOL] [EOL] def fetch_one ( name ) : [EOL] [comment] [EOL] try : [EOL] with open ( os . path . join ( _PATH , f"{ name } [string] " ) ) as fd : [EOL] contents = yaml . safe_load ( fd ) [EOL] except FileNotFoundError : [EOL] raise NotFound ( f" [string] { name } [string] " ) [EOL] [comment] [EOL] base_logo_url = re . sub ( [string] , [string] , _CONF [ [string] ] ) [EOL] contents [ [string] ] = base_logo_url + contents [ [string] ] [EOL] del contents [ [string] ] [EOL] return contents [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import json [EOL] import flask [EOL] [EOL] [EOL] def get_json_body ( ) : [EOL] [docstring] [EOL] json_body = None [comment] [EOL] req_data = flask . request . get_data ( ) [EOL] if req_data : [EOL] json_body = json . loads ( req_data ) [EOL] return json_body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Union , Any [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] import json [EOL] import flask [EOL] import requests [EOL] [EOL] from . config import get_config [EOL] from . . exceptions import MissingHeader , UnauthorizedAccess [EOL] [EOL] [EOL] def require_auth_token ( roles = [ ] ) : [EOL] [docstring] [EOL] config = get_config ( ) [EOL] if not flask . request . headers . get ( [string] ) : [EOL] [comment] [EOL] raise MissingHeader ( [string] ) [EOL] token = get_auth_header ( ) [EOL] [comment] [EOL] headers = { [string] : token } [EOL] auth_url = config [ [string] ] + [string] [EOL] auth_resp = requests . get ( auth_url , headers = headers ) [EOL] if not auth_resp . ok : [EOL] print ( [string] * [number] ) [EOL] print ( auth_resp . text ) [EOL] raise UnauthorizedAccess ( config [ [string] ] , auth_resp . text ) [EOL] auth_json = auth_resp . json ( ) [EOL] if len ( roles ) : [EOL] check_roles ( required = roles , given = auth_json [ [string] ] , auth_url = config [ [string] ] ) [EOL] [EOL] [EOL] def check_roles ( required , given , auth_url ) : [EOL] for role in required : [EOL] if role in given : [EOL] return [EOL] raise UnauthorizedAccess ( auth_url , [string] ) [EOL] [EOL] [EOL] def get_auth_header ( ) : [EOL] return flask . request . headers . get ( [string] , [string] ) . replace ( [string] , [string] ) . strip ( ) [EOL] [EOL] [EOL] def get_workspace_ids ( auth_token ) : [EOL] [docstring] [EOL] if not auth_token : [EOL] return [ ] [comment] [EOL] config = get_config ( ) [EOL] ws_url = config [ [string] ] [EOL] [comment] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] } ] } [EOL] headers = { [string] : auth_token } [EOL] resp = requests . post ( ws_url , data = json . dumps ( payload ) , headers = headers ) [EOL] if not resp . ok : [EOL] raise UnauthorizedAccess ( ws_url , resp . text ) [EOL] return resp . json ( ) [ [string] ] [ [number] ] [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import functools [EOL] from urllib . parse import urljoin [EOL] [EOL] [EOL] @ functools . lru_cache ( maxsize = [number] ) def get_config ( ) : [EOL] [docstring] [EOL] spec_path = os . environ . get ( [string] , [string] ) [EOL] spec_release_url = os . environ . get ( [string] ) [EOL] spec_release_path = os . environ . get ( [string] ) [EOL] spec_repo_path = os . path . join ( spec_path , [string] ) [comment] [EOL] spec_schemas_path = os . path . join ( spec_repo_path , [string] ) [comment] [EOL] stored_queries_path = os . path . join ( spec_repo_path , [string] ) [comment] [EOL] spec_views_path = os . path . join ( spec_repo_path , [string] ) [comment] [EOL] spec_url = [string] [EOL] kbase_endpoint = os . environ . get ( [string] , [string] ) [EOL] auth_url = os . environ . get ( [string] , urljoin ( kbase_endpoint + [string] , [string] ) ) [EOL] workspace_url = os . environ . get ( [string] , urljoin ( kbase_endpoint + [string] , [string] ) ) [EOL] db_url = os . environ . get ( [string] , [string] ) [EOL] db_name = os . environ . get ( [string] , [string] ) [EOL] db_user = os . environ . get ( [string] , [string] ) [EOL] db_pass = os . environ . get ( [string] , [string] ) [EOL] api_url = db_url + [string] + db_name + [string] [EOL] db_readonly_user = os . environ . get ( [string] , db_user ) [EOL] db_readonly_pass = os . environ . get ( [string] , db_pass ) [EOL] return { [string] : auth_url , [string] : workspace_url , [string] : kbase_endpoint , [string] : db_url , [string] : api_url , [string] : db_name , [string] : db_user , [string] : db_pass , [string] : db_readonly_user , [string] : db_readonly_pass , [string] : spec_url , [string] : spec_release_url , [string] : spec_release_path , [string] : { [string] : os . path . join ( spec_path , [string] ) , [string] : spec_path , [string] : spec_repo_path , [string] : spec_schemas_path , [string] : stored_queries_path , [string] : spec_views_path , [string] : os . path . join ( spec_schemas_path , [string] ) , [string] : os . path . join ( spec_repo_path , [string] ) , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from jsonschema import validators , Draft7Validator [EOL] [EOL] [EOL] def extend_with_default ( validator_class ) : [EOL] validate_properties = validator_class . VALIDATORS [ [string] ] [EOL] [EOL] def set_defaults ( validator , properties , instance , schema ) : [EOL] for property , subschema in properties . items ( ) : [EOL] if [string] in subschema : [EOL] instance . setdefault ( property , subschema [ [string] ] ) [EOL] for error in validate_properties ( validator , properties , instance , schema ) : [EOL] yield error [EOL] return validators . extend ( validator_class , { [string] : set_defaults } ) [EOL] [EOL] [EOL] Validator = extend_with_default ( Draft7Validator ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import requests [EOL] import sys [EOL] import os [EOL] import requests [EOL] import tarfile [EOL] import tempfile [EOL] import shutil [EOL] import json [EOL] import glob [EOL] import yaml [EOL] [EOL] [EOL] from . import arango_client [EOL] from . config import get_config [EOL] [EOL] _CONF = get_config ( ) [EOL] [EOL] [EOL] def download_specs ( init_collections = True , release_url = None , reset = False ) : [EOL] [docstring] [EOL] if reset or not os . path . exists ( _CONF [ [string] ] [ [string] ] ) : [EOL] [comment] [EOL] shutil . rmtree ( _CONF [ [string] ] [ [string] ] , ignore_errors = True ) [EOL] [comment] [EOL] os . makedirs ( _CONF [ [string] ] [ [string] ] ) [EOL] [comment] [EOL] if _CONF [ [string] ] : [EOL] _extract_tarball ( _CONF [ [string] ] , _CONF [ [string] ] [ [string] ] ) [EOL] else : [EOL] if release_url : [EOL] tarball_url = release_url [EOL] if _CONF [ [string] ] : [EOL] tarball_url = _CONF [ [string] ] [EOL] else : [EOL] tarball_url = _fetch_github_release_url ( ) [EOL] resp = requests . get ( tarball_url , stream = True ) [EOL] with tempfile . NamedTemporaryFile ( ) as temp_file : [EOL] [comment] [EOL] [comment] [EOL] _download_file ( resp , temp_file . name ) [EOL] [comment] [EOL] _extract_tarball ( temp_file . name , _CONF [ [string] ] [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] _rename_directories ( _CONF [ [string] ] [ [string] ] , _CONF [ [string] ] [ [string] ] ) [EOL] [comment] [EOL] if init_collections : [EOL] do_init_collections ( ) [EOL] do_init_views ( ) [EOL] [EOL] [EOL] def do_init_collections ( ) : [EOL] [docstring] [EOL] pattern = os . path . join ( _CONF [ [string] ] [ [string] ] , [string] , [string] ) [EOL] for path in glob . iglob ( pattern ) : [EOL] coll_name = os . path . basename ( os . path . splitext ( path ) [ [number] ] ) [EOL] with open ( path ) as fd : [EOL] config = yaml . safe_load ( fd ) [EOL] arango_client . create_collection ( coll_name , config ) [EOL] [EOL] [EOL] def do_init_views ( ) : [EOL] [docstring] [EOL] pattern = os . path . join ( _CONF [ [string] ] [ [string] ] , [string] , [string] ) [EOL] for path in glob . iglob ( pattern ) : [EOL] view_name = os . path . basename ( os . path . splitext ( path ) [ [number] ] ) [EOL] with open ( path ) as fd : [EOL] config = json . load ( fd ) [EOL] arango_client . create_view ( view_name , config ) [EOL] [EOL] [EOL] def _fetch_github_release_url ( ) : [EOL] [docstring] [EOL] [comment] [EOL] release_resp = requests . get ( _CONF [ [string] ] + [string] ) [EOL] release_info = release_resp . json ( ) [EOL] if release_resp . status_code != [number] : [EOL] [comment] [EOL] raise RuntimeError ( release_info [ [string] ] ) [EOL] return release_info [ [string] ] [EOL] [EOL] [EOL] def _download_file ( resp , path ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as tar_file : [EOL] for chunk in resp . iter_content ( chunk_size = [number] ) : [EOL] tar_file . write ( chunk ) [EOL] [EOL] [EOL] def _extract_tarball ( tar_path , dest_dir ) : [EOL] [docstring] [EOL] with tarfile . open ( tar_path , [string] ) as tar : [EOL] tar . extractall ( path = dest_dir ) [EOL] [EOL] [EOL] def _rename_directories ( dir_path , dest_path ) : [EOL] [docstring] [EOL] for file_name in os . listdir ( dir_path ) : [EOL] file_path = os . path . join ( dir_path , file_name ) [EOL] if os . path . isdir ( file_path ) : [EOL] os . rename ( file_path , dest_path ) [EOL] [EOL] [EOL] def _has_latest_spec ( info ) : [EOL] [docstring] [EOL] release_id = str ( info [ [string] ] ) [EOL] if os . path . exists ( _CONF [ [string] ] [ [string] ] ) : [EOL] with open ( _CONF [ [string] ] [ [string] ] , [string] ) as fd : [EOL] current_release_id = fd . read ( ) [EOL] if release_id == current_release_id : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _save_release_id ( info ) : [EOL] [docstring] [EOL] release_id = str ( info [ [string] ] ) [EOL] [comment] [EOL] with open ( _CONF [ [string] ] , [string] ) as fd : [EOL] fd . write ( release_id ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) > [number] : [EOL] if sys . argv [ [number] ] == [string] : [EOL] download_specs ( init_collections = True ) [EOL] download_specs ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import flask [EOL] import flask [EOL] from src . relation_engine_server . utils import ( json_validation , arango_client , spec_loader , load_data_sources , auth , bulk_import , pull_spec , config , parse_json ) [EOL] from src . relation_engine_server . exceptions import InvalidParameters [EOL] [EOL] api_v1 = flask . Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def list_data_sources ( ) : [EOL] data_sources = load_data_sources . list_all ( ) [EOL] return flask . jsonify ( { [string] : data_sources } ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def show_data_source ( name ) : [EOL] data_source = load_data_sources . fetch_one ( name ) [EOL] return flask . jsonify ( { [string] : data_source } ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def show_stored_queries ( ) : [EOL] [docstring] [EOL] name = flask . request . args . get ( [string] ) [EOL] if name : [EOL] return { [string] : spec_loader . get_stored_query ( name ) } [EOL] return flask . jsonify ( spec_loader . get_stored_query_names ( ) ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def show_schemas ( ) : [EOL] [docstring] [EOL] name = flask . request . args . get ( [string] ) [EOL] doc_id = flask . request . args . get ( [string] ) [EOL] if name : [EOL] return flask . jsonify ( spec_loader . get_schema ( name ) ) [EOL] elif doc_id : [EOL] return flask . jsonify ( spec_loader . get_schema_for_doc ( doc_id ) ) [EOL] else : [EOL] return flask . jsonify ( spec_loader . get_schema_names ( ) ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def run_query ( ) : [EOL] [docstring] [EOL] json_body = parse_json . get_json_body ( ) or { } [EOL] [comment] [EOL] json_body [ [string] ] = [ ] [EOL] auth_token = auth . get_auth_header ( ) [EOL] [comment] [EOL] ws_ids = auth . get_workspace_ids ( auth_token ) [EOL] [comment] [EOL] batch_size = int ( flask . request . args . get ( [string] , [number] ) ) [EOL] full_count = flask . request . args . get ( [string] , False ) [EOL] if [string] in json_body : [EOL] [comment] [EOL] auth . require_auth_token ( roles = [ [string] ] ) [EOL] query_text = json_body [ [string] ] [EOL] query_text = _preprocess_stored_query ( json_body [ [string] ] , json_body ) [EOL] del json_body [ [string] ] [EOL] json_body [ [string] ] = ws_ids [EOL] resp_body = arango_client . run_query ( query_text = query_text , bind_vars = json_body , batch_size = batch_size , full_count = full_count ) [EOL] return flask . jsonify ( resp_body ) [EOL] if ( [string] in flask . request . args ) or ( [string] in flask . request . args ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] query_name = flask . request . args . get ( [string] ) or flask . request . args . get ( [string] ) [EOL] stored_query = spec_loader . get_stored_query ( query_name ) [EOL] stored_query_source = _preprocess_stored_query ( stored_query [ [string] ] , stored_query ) [EOL] if [string] in stored_query : [EOL] [comment] [EOL] json_validation . Validator ( stored_query [ [string] ] ) . validate ( json_body ) [EOL] json_body [ [string] ] = ws_ids [EOL] resp_body = arango_client . run_query ( query_text = stored_query_source , bind_vars = json_body , batch_size = batch_size , full_count = full_count ) [EOL] return flask . jsonify ( resp_body ) [EOL] if [string] in flask . request . args : [EOL] [comment] [EOL] cursor_id = flask . request . args [ [string] ] [EOL] resp_body = arango_client . run_query ( cursor_id = cursor_id ) [EOL] return flask . jsonify ( resp_body ) [EOL] [comment] [EOL] raise InvalidParameters ( [string] ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def update_specs ( ) : [EOL] [docstring] [EOL] auth . require_auth_token ( [ [string] ] ) [EOL] init_collections = [string] in flask . request . args [EOL] release_url = flask . request . args . get ( [string] ) [EOL] pull_spec . download_specs ( init_collections , release_url , reset = True ) [EOL] return flask . jsonify ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def save_documents ( ) : [EOL] [docstring] [EOL] auth . require_auth_token ( [ [string] ] ) [EOL] collection_name = flask . request . args [ [string] ] [EOL] query = { [string] : collection_name , [string] : [string] } [EOL] if flask . request . args . get ( [string] ) : [EOL] [comment] [EOL] query [ [string] ] = [string] [EOL] if flask . request . args . get ( [string] ) : [EOL] query [ [string] ] = flask . request . args [ [string] ] [EOL] if flask . request . args . get ( [string] ) : [EOL] query [ [string] ] = [string] [EOL] resp = bulk_import . bulk_import ( query ) [EOL] if resp . get ( [string] ) > [number] : [EOL] return ( flask . jsonify ( resp ) , [number] ) [EOL] else : [EOL] return flask . jsonify ( resp ) [EOL] [EOL] [EOL] @ api_v1 . route ( [string] , methods = [ [string] ] ) def show_config ( ) : [EOL] [docstring] [EOL] conf = config . get_config ( ) [EOL] return flask . jsonify ( { [string] : conf [ [string] ] , [string] : conf [ [string] ] , [string] : conf [ [string] ] , [string] : conf [ [string] ] , [string] : conf [ [string] ] , [string] : conf [ [string] ] } ) [EOL] [EOL] [EOL] def _preprocess_stored_query ( query_text , config ) : [EOL] [docstring] [EOL] return ( config . get ( [string] , [string] ) + [string] + query_text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0