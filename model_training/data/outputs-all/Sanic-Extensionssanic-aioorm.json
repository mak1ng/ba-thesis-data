from typing import Any [EOL] import sanic_aioorm [EOL] import typing [EOL] from sanic import Sanic [EOL] from sanic . response import json [EOL] from sanic_aioorm import AioOrm [EOL] from ex_model import User , db [EOL] app = Sanic ( ) [EOL] AioOrm . SetConfig ( app , defaultdb = [string] ) [EOL] orm = AioOrm ( app ) [EOL] orm . init_proxys ( defaultdb = db ) [EOL] orm . create_tables ( User = [ { [string] : [string] } , { [string] : [string] } ] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def testget ( request ) : [EOL] try : [EOL] users = await User . select ( ) [EOL] except Exception as e : [EOL] return json ( { [string] : str ( e ) } ) [EOL] else : [EOL] return json ( { [string] : [ await u . to_dict ( ) for u in users ] } ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def testpost ( request ) : [EOL] try : [EOL] users = await User . create ( request . json ) [EOL] except Exception as e : [EOL] return json ( { [string] : str ( e ) } ) [EOL] else : [EOL] return json ( { [string] : [ u . to_dict ( ) for u in users ] } ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $sanic_aioorm.AioOrm$ 0 0 0 $typing.Any$ 0 0 $sanic_aioorm.AioOrm$ 0 0 0 0 0 0 0 0 $sanic_aioorm.AioOrm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import ex_model [EOL] from sanic_aioorm import AioOrm , AioModel [EOL] from peewee import Proxy , CharField [EOL] db = Proxy ( ) [EOL] [EOL] [EOL] @ AioOrm . regist class User ( AioModel ) : [EOL] username = CharField ( ) [EOL] [EOL] class Meta : [EOL] database = db [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[ex_model.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[ex_model.User.Meta]$ 0 $typing.Any$ 0
from typing import Any , List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] from aioorm import AioDbFactory [EOL] [EOL] [EOL] class Core : [EOL] def __init__ ( self , app = None ) : [EOL] self . sqldatabases = { } [EOL] if app : [EOL] self . init_app ( app ) [EOL] else : [EOL] pass [EOL] [EOL] def init_app ( self , app ) : [EOL] if app . config . SQLDBURLS and isinstance ( app . config . SQLDBURLS , dict ) : [EOL] self . SQLDBURLS = app . config . SQLDBURLS [EOL] self . app = app [EOL] for dbname , dburl in app . config . SQLDBURLS . items ( ) : [EOL] db = AioDbFactory ( dburl ) [EOL] self . sqldatabases [ dbname ] = db [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] @ app . listener ( [string] ) async def setup_db ( app , loop ) : [EOL] for name , db in self . sqldatabases . items ( ) : [EOL] tempdb = await db . connect ( loop ) [EOL] print ( name , [string] ) [EOL] [EOL] @ app . listener ( [string] ) async def notify_server_started ( app , loop ) : [EOL] print ( [string] ) [EOL] [EOL] @ app . listener ( [string] ) async def notify_server_stopping ( app , loop ) : [EOL] print ( [string] ) [EOL] [EOL] @ app . listener ( [string] ) async def close_db ( app , loop ) : [EOL] for name , db in self . sqldatabases . items ( ) : [EOL] await db . close ( ) [EOL] print ( name , [string] ) [EOL] [EOL] if [string] not in app . __dir__ ( ) : [EOL] app . extensions = { } [EOL] app . extensions [ [string] ] = self [EOL] [EOL] def init_proxys ( self , ** kwargs ) : [EOL] [docstring] [EOL] for name , proxy in kwargs . items ( ) : [EOL] try : [EOL] proxy . initialize ( self . sqldatabases [ name ] ) [EOL] except : [EOL] print ( [string] . format ( name ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] from aioorm import AioModel [EOL] from aioorm import model_to_dict [EOL] [EOL] [EOL] class ToDictMixin : [EOL] async def to_dict ( self , ** kws ) : [EOL] result = await model_to_dict ( self , ** kws ) [EOL] return result [EOL] [EOL] [EOL] class Model ( AioModel , ToDictMixin ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] __all__ = [ [string] , [string] ] [EOL] [EOL] from . core import Core [EOL] from . set_config_mixin import SetConfigMixin [EOL] from . regist_mixin import RegistMixin [EOL] from . aiomodel import Model as AioModel [EOL] [EOL] class AioOrm ( Core , SetConfigMixin , RegistMixin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] class SetConfigMixin : [EOL] @ staticmethod def SetConfig ( app , ** confs ) : [EOL] [docstring] [EOL] app . config . SQLDBURLS = confs [EOL] return app [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List [EOL] import sanic_aioorm [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] import peewee [EOL] [EOL] [EOL] class RegistMixin : [EOL] [docstring] [EOL] _regist_classes = { } [EOL] [EOL] @ classmethod def regist ( clz , target ) : [EOL] [docstring] [EOL] clz . _regist_classes [ target . __name__ ] = target [EOL] return target [EOL] [EOL] def create_tables ( self , ** kwargs ) : [EOL] [docstring] [EOL] app = self . app [EOL] @ app . listener ( [string] ) async def creat_db ( app , loop ) : [EOL] for name , target in type ( self ) . _regist_classes . items ( ) : [EOL] print ( [string] , name ) [EOL] try : [EOL] await target . create_table ( ) [EOL] except peewee . InternalError as ie : [EOL] print ( str ( ie ) ) [EOL] except AttributeError as ae : [EOL] raise ae [EOL] except Exception as e : [EOL] raise e [EOL] else : [EOL] print ( [string] , name , [string] ) [EOL] if kwargs : [EOL] if kwargs . get ( name ) and ( await target . select ( ) . count ( ) ) == [number] : [EOL] print ( name , [string] ) [EOL] iq = target . insert_many ( kwargs . get ( name ) ) [EOL] try : [EOL] result = await iq . execute ( ) [EOL] except Exception as e : [EOL] print ( name , [string] ) [EOL] print ( str ( e ) ) [EOL] else : [EOL] if result : [EOL] print ( name , [string] ) [EOL] else : [EOL] print ( name , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0