from typing import List [EOL] import typing [EOL] import invoke [EOL] import pathlib [EOL] [docstring] [EOL] import webbrowser [EOL] from pathlib import Path [EOL] [EOL] from invoke import Failure , Result , task [comment] [EOL] [EOL] ROOT_DIR = Path ( __file__ ) . parent [EOL] TEST_DIR = ROOT_DIR . joinpath ( [string] ) [EOL] SOURCE_DIR = ROOT_DIR . joinpath ( [string] ) [EOL] TASKS_PY = ROOT_DIR . joinpath ( [string] ) [EOL] COVERAGE_DIR = ROOT_DIR . joinpath ( [string] ) [EOL] COVERAGE_REPORT = COVERAGE_DIR . joinpath ( [string] ) [EOL] PYTHON_DIRS = [ str ( d ) for d in [ TASKS_PY , SOURCE_DIR , TEST_DIR ] ] [EOL] [EOL] [EOL] @ task ( help = { [string] : [string] } ) def style ( context , check = False ) : [EOL] [docstring] [EOL] for result in [ isort ( context , check ) , black ( context , check ) , ] : [EOL] if result . failed : [EOL] raise Failure ( result ) [EOL] [EOL] [EOL] def isort ( context , check = False ) : [EOL] [docstring] [EOL] isort_options = [string] . format ( [string] if check else [string] ) [EOL] return context . run ( [string] . format ( isort_options , [string] . join ( PYTHON_DIRS ) ) , warn = True ) [EOL] [EOL] [EOL] def black ( context , check = False ) : [EOL] [docstring] [EOL] black_options = [string] . format ( [string] if check else [string] ) [EOL] return context . run ( [string] . format ( black_options , [string] . join ( PYTHON_DIRS ) ) , warn = True ) [EOL] [EOL] [EOL] @ task ( help = { [string] : [string] , [string] : [string] } ) def coverage ( context , publish = False , xml = False ) : [EOL] [docstring] [EOL] context . run ( [string] . format ( SOURCE_DIR ) ) [EOL] context . run ( [string] ) [EOL] if publish : [EOL] [comment] [EOL] context . run ( [string] ) [EOL] return [EOL] [comment] [EOL] if xml : [EOL] context . run ( [string] ) [EOL] else : [EOL] context . run ( [string] ) [EOL] webbrowser . open ( COVERAGE_REPORT . as_uri ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $invoke.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $invoke.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] from zaimcsvconverter . zaim_csv_converter import ZaimCsvConverter [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] ZaimCsvConverter . execute ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] [EOL] class Error ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class LogicError ( Error ) : [EOL] [docstring] [EOL] [EOL] [EOL] class SkipRow ( Error ) : [EOL] [docstring] [EOL] [EOL] [EOL] class UndefinedContentError ( InvalidRecordError ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidInputCsvError ( Error ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import List [EOL] [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . datasources . data_source import DataSource [EOL] from zaimcsvconverter . error_handler import UndefinedContentErrorHandler [EOL] from zaimcsvconverter . exceptions import SkipRow [EOL] from zaimcsvconverter . row_processor import RecordProcessor [EOL] [EOL] [EOL] class InputData : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , datasource , account ) : [EOL] self . account = account [EOL] self . data_source = datasource [EOL] self . undefined_content_error_handler = UndefinedContentErrorHandler ( ) [EOL] [EOL] def export_as_zaim_csv ( self , writer_zaim ) : [EOL] [docstring] [EOL] for list_input_row_standard_type_value in self . data_source : [EOL] self . _process_record ( list_input_row_standard_type_value , writer_zaim ) [EOL] self . data_source . raise_error_if_invalid ( ) [EOL] [EOL] def _process_record ( self , list_input_row_standard_type_value , writer_zaim ) : [EOL] record_processor = RecordProcessor ( self . account ) [EOL] try : [EOL] zaim_row = record_processor . execute ( list_input_row_standard_type_value ) [EOL] except InvalidRecordError : [EOL] self . data_source . mark_current_record_as_error ( record_processor . list_error ) [EOL] self . undefined_content_error_handler . extend ( record_processor . undefined_content_error_handler ) [EOL] return [EOL] except SkipRow : [EOL] return [EOL] writer_zaim . writerow ( zaim_row . convert_to_list ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 $zaimcsvconverter.account.Account$ 0 0 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0
from typing import List , Union [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from __future__ import annotations [EOL] [EOL] from enum import Enum [EOL] from typing import List , Union [EOL] [EOL] import numpy [EOL] [EOL] from zaimcsvconverter . file_csv_convert import FileCsvConvert [EOL] from zaimcsvconverter . inputcsvformats import InputItemRow , InputStoreRow [EOL] [EOL] [EOL] class FileNameForError ( Enum ) : [EOL] INVALID_ROW = [string] [EOL] UNDEFINED_CONTENT = [string] [EOL] [EOL] [EOL] class UndefinedContentErrorHandler : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . list_error = [ ] [EOL] [EOL] def __iter__ ( self ) : [EOL] for error_row in self . list_error : [EOL] yield error_row [EOL] [EOL] def append ( self , file_csv_convert , input_row ) : [EOL] [docstring] [EOL] self . list_error . append ( input_row . get_report_undefined_content_error ( file_csv_convert ) ) [EOL] [EOL] def extend ( self , error_handler ) : [EOL] [docstring] [EOL] if not error_handler . is_presented : [EOL] return [EOL] error_handler . uniquify ( ) [EOL] self . list_error . extend ( error_handler . list_error ) [EOL] self . uniquify ( ) [EOL] [EOL] @ property def is_presented ( self ) : [EOL] [docstring] [EOL] return bool ( self . list_error ) [EOL] [EOL] def uniquify ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] self . list_error = numpy . unique ( numpy . array ( self . list_error ) , axis = [number] ) . tolist ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 $typing.Union[zaimcsvconverter.inputcsvformats.InputStoreRow,zaimcsvconverter.inputcsvformats.InputItemRow]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[zaimcsvconverter.inputcsvformats.InputStoreRow,zaimcsvconverter.inputcsvformats.InputItemRow]$ 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 0 0 0 0 $None$ 0 0 0 $UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 $UndefinedContentErrorHandler$ 0 0 0 0 0 0 $UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 0 0 0 0 $UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] from __future__ import annotations [EOL] [EOL] from dataclasses import dataclass [EOL] from enum import Enum [EOL] from pathlib import Path [EOL] from typing import List [EOL] [EOL] from zaimcsvconverter . models import ConvertTableRecordMixin , ConvertTableType , FileCsvConvertId [EOL] [EOL] [EOL] @ dataclass class FileCsvConvertContext : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] id = ... [EOL] name = ... [EOL] convert_table_type = ... [EOL] [EOL] def create_convert_table_row_instance ( self , list_convert_table_row_standard_type_value ) : [EOL] [docstring] [EOL] convert_table_type = self . convert_table_type . value [EOL] [comment] [EOL] return convert_table_type . model ( self . id , convert_table_type . row_data ( * list_convert_table_row_standard_type_value ) ) [EOL] [EOL] [EOL] class FileCsvConvert ( Enum ) : [EOL] [docstring] [EOL] [EOL] WAON = FileCsvConvertContext ( FileCsvConvertId . WAON , [string] , ConvertTableType . STORE , ) [EOL] GOLD_POINT_CARD_PLUS = FileCsvConvertContext ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , [string] , ConvertTableType . STORE , ) [EOL] MUFG = FileCsvConvertContext ( FileCsvConvertId . MUFG , [string] , ConvertTableType . STORE , ) [EOL] SF_CARD_VIEWER = FileCsvConvertContext ( FileCsvConvertId . SF_CARD_VIEWER , [string] , ConvertTableType . STORE , ) [EOL] AMAZON = FileCsvConvertContext ( FileCsvConvertId . AMAZON , [string] , ConvertTableType . ITEM , ) [EOL] VIEW_CARD = FileCsvConvertContext ( FileCsvConvertId . VIEW_CARD , [string] , ConvertTableType . STORE , ) [EOL] [EOL] @ property def value ( self ) : [EOL] [docstring] [EOL] return super ( ) . value [EOL] [EOL] @ staticmethod def create_by_path_csv_convert ( path ) : [EOL] [docstring] [EOL] for file_csv_convert in FileCsvConvert : [EOL] if path . name == file_csv_convert . value . name : [EOL] return file_csv_convert [EOL] raise ValueError ( [string] ) [EOL] [EOL] def create_convert_table_row_instance ( self , list_convert_table_row_standard_type_value ) : [EOL] [docstring] [EOL] return self . value . create_convert_table_row_instance ( list_convert_table_row_standard_type_value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.FileCsvConvertId$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.models.ConvertTableType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FileCsvConvertContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FileCsvConvert$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.ConvertTableRecordMixin$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
from typing import Any [EOL] import typing [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] from enum import Enum [EOL] from pathlib import Path [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] [EOL] from zaimcsvconverter . config import Config [EOL] [EOL] [comment] [EOL] Session = scoped_session ( sessionmaker ( bind = create_engine ( [string] ) , autoflush = False , autocommit = True , ) ) [EOL] CONFIG = Config ( ) [EOL] [EOL] [EOL] class DirectoryCsv ( Enum ) : [EOL] [docstring] [EOL] [EOL] CONVERT = Path ( __file__ ) . parent . parent / [string] [EOL] INPUT = Path ( __file__ ) . parent . parent / [string] [EOL] OUTPUT = Path ( __file__ ) . parent . parent / [string] [EOL] [EOL] @ property def value ( self ) : [EOL] [docstring] [EOL] return super ( ) . value [EOL] [EOL] [EOL] PATH_FILE_CONFIG = Path ( __file__ ) . parent . parent / [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Generator [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import Generator , List , Union [EOL] [EOL] from zaimcsvconverter . csv_exporter import CsvExporter [EOL] from zaimcsvconverter . error_handler import FileNameForError , UndefinedContentErrorHandler [EOL] from zaimcsvconverter . errorreporters . input_csv_error_reporter import DataSourceErrorReporterFactory [EOL] from zaimcsvconverter . input_csv import InputData [EOL] [EOL] [EOL] class ErrorTotalizer : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . list_invalid_input_data = [ ] [EOL] self . undefined_content_error_handler = UndefinedContentErrorHandler ( ) [EOL] [EOL] def __iter__ ( self ) : [EOL] for input_data in self . list_invalid_input_data : [EOL] data_source_error_reporter = DataSourceErrorReporterFactory . create ( input_data . data_source ) [EOL] yield from data_source_error_reporter [EOL] [EOL] def append ( self , input_data ) : [EOL] [docstring] [EOL] self . list_invalid_input_data . append ( input_data ) [EOL] self . undefined_content_error_handler . extend ( input_data . undefined_content_error_handler ) [EOL] [EOL] @ property def is_presented ( self ) : [EOL] return bool ( self . list_invalid_input_data ) [EOL] [EOL] def export_to_csv ( self , directory_csv_output ) : [EOL] [docstring] [EOL] csv_exporter = CsvExporter ( directory_csv_output ) [EOL] csv_exporter . export ( self , FileNameForError . INVALID_ROW . value ) [EOL] if self . undefined_content_error_handler . is_presented : [EOL] csv_exporter . export ( self . undefined_content_error_handler , FileNameForError . UNDEFINED_CONTENT . value ) [EOL] [EOL] @ property def message ( self ) : [EOL] [docstring] [EOL] message = [string] f" [string] { FileNameForError . INVALID_ROW . value }" [EOL] if self . undefined_content_error_handler . is_presented : [EOL] message = message + f" [string] { FileNameForError . UNDEFINED_CONTENT . value }" [EOL] return f"{ message } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.input_csv.InputData]$ 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 $typing.Generator[typing.List[typing.Union[builtins.int,builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.csv_exporter.CsvExporter$ 0 0 0 0 0 0 $zaimcsvconverter.csv_exporter.CsvExporter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.csv_exporter.CsvExporter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
from typing import Optional , Match [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] from typing import Optional [EOL] [EOL] [EOL] class Utility : [EOL] [docstring] [EOL] [EOL] @ staticmethod def convert_string_to_int_or_none ( string ) : [EOL] [docstring] [EOL] if string == [string] : [EOL] return None [EOL] return int ( string . replace ( [string] , [string] ) ) [EOL] [EOL] @ staticmethod def convert_yen_string_to_int ( yen_string ) : [EOL] [docstring] [EOL] if [string] in yen_string : [EOL] raise ValueError ( f" [string] { yen_string }" ) [EOL] matches = re . search ( [string] , yen_string ) [EOL] if matches is None : [EOL] raise ValueError ( f" [string] { yen_string }" ) [EOL] return int ( matches . group ( [number] ) . replace ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sqlalchemy [EOL] [docstring] [EOL] from sqlalchemy . orm . session import Session as SQLAlchemySession [EOL] [EOL] from zaimcsvconverter import Session [EOL] [EOL] [EOL] class SessionManager : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . _session = Session ( ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self . _session [EOL] [EOL] def __exit__ ( self , * exc ) : [EOL] self . _session . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.session.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from zaimcsvconverter import CONFIG , PATH_FILE_CONFIG , DirectoryCsv [EOL] from zaimcsvconverter . convert_table_importer import ConvertTableImporter [EOL] from zaimcsvconverter . input_csv_converter_iterator import InputCsvConverterIterator [EOL] from zaimcsvconverter . models import initialize_database [EOL] [EOL] [EOL] class ZaimCsvConverter : [EOL] [docstring] [EOL] [EOL] @ staticmethod def execute ( ) : [EOL] [docstring] [EOL] CONFIG . load ( PATH_FILE_CONFIG ) [EOL] initialize_database ( ) [EOL] ConvertTableImporter ( DirectoryCsv . CONVERT . value ) . execute ( ) [EOL] InputCsvConverterIterator ( DirectoryCsv . INPUT . value , DirectoryCsv . OUTPUT . value ) . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Iterable , Union [EOL] import builtins [EOL] import typing [EOL] import _csv [EOL] [docstring] [EOL] import csv [EOL] from typing import Iterable , List , Union [EOL] [EOL] [EOL] class CsvExporter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , directory_csv_output ) : [EOL] self . directory_csv_output = directory_csv_output [EOL] [EOL] def export ( self , iterable , file_name ) : [EOL] [docstring] [EOL] with ( self . directory_csv_output / file_name ) . open ( [string] , encoding = [string] , newline = [string] ) as file_error : [EOL] writer_error = csv . writer ( file_error ) [EOL] for error_row in iterable : [EOL] writer_error . writerow ( error_row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.List[typing.Union[builtins.str,builtins.int]]]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.List[typing.Union[builtins.str,builtins.int]]]$ 0 0 $_csv._writer$ 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import godslayer [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import List [EOL] [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . error_handler import UndefinedContentErrorHandler [EOL] from zaimcsvconverter . exceptions import SkipRow [EOL] from zaimcsvconverter . inputcsvformats import InputItemRow , InputRow , InputRowData , InputStoreRow [EOL] from zaimcsvconverter . zaim_row import ZaimRow [EOL] [EOL] [EOL] class RecordProcessor : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , account ) : [EOL] self . _account = account [EOL] self . undefined_content_error_handler = UndefinedContentErrorHandler ( ) [EOL] self . list_error = [ ] [EOL] [EOL] def execute ( self , list_input_row_standard_type_value ) : [EOL] [docstring] [EOL] input_row_data = self . _account . create_input_row_data_instance ( list_input_row_standard_type_value ) [EOL] if input_row_data . validate : [EOL] self . _stock_row_data_error ( input_row_data ) [EOL] raise InvalidRecordError ( ) [EOL] input_row = self . _account . create_input_row_instance ( input_row_data ) [EOL] if input_row . is_row_to_skip : [EOL] raise SkipRow ( ) [EOL] if input_row . validate : [EOL] self . _stock_row_error ( input_row ) [EOL] raise InvalidRecordError ( ) [EOL] return self . _account . convert_input_row_to_zaim_row ( input_row ) [EOL] [EOL] def _stock_row_data_error ( self , input_row_data ) : [EOL] self . list_error = input_row_data . list_error [EOL] [EOL] def _stock_row_error ( self , input_row ) : [EOL] self . list_error = input_row . list_error [EOL] if not isinstance ( input_row , ( InputStoreRow , InputItemRow ) ) or input_row . undefined_content_error is None : [EOL] return [EOL] self . undefined_content_error_handler . append ( self . _account . value . file_csv_convert , input_row ) [EOL] self . list_error . insert ( [number] , input_row . undefined_content_error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 $zaimcsvconverter.account.Account$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 $typing.List[godslayer.exceptions.InvalidRecordError]$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRowData$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow$ 0 0 0 0
import _csv [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] import csv [EOL] from pathlib import Path [EOL] [EOL] from zaimcsvconverter import DirectoryCsv [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . datasources . csv import Csv [EOL] from zaimcsvconverter . input_csv import InputData [EOL] from zaimcsvconverter . zaim_csv_format import ZaimCsvFormat [EOL] [EOL] [EOL] class InputCsvConverter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , path_csv_file , directory_csv_output = DirectoryCsv . OUTPUT . value ) : [EOL] account = Account . create_by_path_csv_input ( path_csv_file ) [EOL] data_source_csv = Csv ( account . value . god_slayer_factory . create ( path_csv_file ) ) [EOL] self . input_csv = InputData ( data_source_csv , account ) [EOL] self . path_to_output = directory_csv_output / path_csv_file . name [EOL] [EOL] def execute ( self ) : [EOL] [docstring] [EOL] with self . path_to_output . open ( [string] , encoding = [string] , newline = [string] ) as file_zaim : [EOL] writer_zaim = csv . writer ( file_zaim ) [EOL] writer_zaim . writerow ( ZaimCsvFormat . HEADER ) [EOL] self . input_csv . export_as_zaim_csv ( writer_zaim ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 $pathlib.Path$ 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0
[docstring] [EOL] from __future__ import annotations [EOL] [EOL] from dataclasses import dataclass , field [EOL] [EOL] from dataclasses_json import DataClassJsonMixin [EOL] from yamldataclassconfig . config import YamlDataClassConfig [EOL] [EOL] [EOL] @ dataclass class WaonConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] account_name = ... [EOL] auto_charge_source = ... [EOL] [EOL] [EOL] @ dataclass class GoldPointCardPlusConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] account_name = ... [EOL] skip_amazon_row = ... [EOL] [EOL] [EOL] @ dataclass class MufgConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] account_name = ... [EOL] transfer_account_name = ... [EOL] [EOL] [EOL] @ dataclass class SFCardViewerConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] account_name = ... [EOL] auto_charge_source = ... [EOL] skip_sales_goods_row = ... [EOL] [EOL] [EOL] @ dataclass class PasmoConfig ( SFCardViewerConfig ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class AmazonConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] store_name_zaim = ... [EOL] payment_account_name = ... [EOL] [EOL] [EOL] @ dataclass class ViewCardConfig ( DataClassJsonMixin ) : [EOL] [docstring] [EOL] [EOL] account_name = ... [EOL] skip_suica_row = ... [EOL] [EOL] [EOL] @ dataclass class SuicaConfig ( SFCardViewerConfig ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class Config ( YamlDataClassConfig ) : [EOL] [docstring] [EOL] [EOL] waon = field ( default = None , metadata = { [string] : { [string] : WaonConfig } } ) [EOL] gold_point_card_plus = field ( default = None , metadata = { [string] : { [string] : GoldPointCardPlusConfig } } ) [EOL] mufg = field ( default = None , metadata = { [string] : { [string] : MufgConfig } } ) [EOL] pasmo = field ( default = None , metadata = { [string] : { [string] : PasmoConfig } } ) [EOL] amazon = field ( default = None , metadata = { [string] : { [string] : AmazonConfig } } ) [EOL] view_card = field ( default = None , metadata = { [string] : { [string] : ViewCardConfig } } ) [EOL] suica = field ( default = None , metadata = { [string] : { [string] : SuicaConfig } } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $WaonConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GoldPointCardPlusConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $MufgConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PasmoConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $AmazonConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ViewCardConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PasmoConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class ZaimCsvFormat : [EOL] [docstring] [EOL] [EOL] HEADER = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] CATEGORY_LARGE_EMPTY = [string] [EOL] CATEGORY_SMALL_EMPTY = [string] [EOL] CASH_FLOW_SOURCE_EMPTY = [string] [EOL] CASH_FLOW_TARGET_EMPTY = [string] [EOL] AMOUNT_INCOME_EMPTY = [number] [EOL] AMOUNT_PAYMENT_EMPTY = [number] [EOL] AMOUNT_TRANSFER_EMPTY = [number] [EOL] STORE_NAME_EMPTY = [string] [EOL] ITEM_NAME_EMPTY = [string] [EOL] NOTE_EMPTY = [string] [EOL] CURRENCY_EMPTY = [string] [EOL] BALANCE_ADJUSTMENT_EMPTY = [string] [EOL] AMOUNT_BEFORE_CURRENCY_CONVERSION_EMPTY = [string] [EOL] SETTING_AGGREGATE_EMPTY = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] import csv [EOL] from pathlib import Path [EOL] from typing import List [EOL] [EOL] from zaimcsvconverter . file_csv_convert import FileCsvConvert [EOL] from zaimcsvconverter . models import ConvertTableRecordMixin [EOL] [EOL] [EOL] class ConvertTableImporter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , directory_csv_convert ) : [EOL] self . directory_csv_convert = directory_csv_convert [EOL] [EOL] def execute ( self ) : [EOL] [docstring] [EOL] for path in sorted ( self . directory_csv_convert . glob ( [string] ) ) : [EOL] self . _import_csv_to_database ( path ) [EOL] [EOL] @ classmethod def _import_csv_to_database ( cls , path ) : [EOL] file_csv_convert = FileCsvConvert . create_by_path_csv_convert ( path ) [EOL] list_convert_table = cls . _load_csv ( file_csv_convert , path ) [EOL] file_csv_convert . value . convert_table_type . value . model . save_all ( list_convert_table ) [EOL] [EOL] @ classmethod def _load_csv ( cls , file_csv_convert , path ) : [EOL] list_convert_table = [ ] [EOL] with path . open ( [string] , encoding = [string] ) as file_convert_table : [EOL] for list_convert_table_row_standard_type_value in csv . reader ( file_convert_table ) : [EOL] list_convert_table . append ( file_csv_convert . create_convert_table_row_instance ( list_convert_table_row_standard_type_value ) ) [EOL] return list_convert_table [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 0 0 0 0 $pathlib.Path$ 0 0 $typing.List[zaimcsvconverter.models.ConvertTableRecordMixin]$ 0 0 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 $pathlib.Path$ 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.ConvertTableRecordMixin]$ 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.ConvertTableRecordMixin]$ 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 $pathlib.Path$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $zaimcsvconverter.file_csv_convert.FileCsvConvert$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Generator [EOL] import typing [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] from pathlib import Path [EOL] from typing import Generator [EOL] [EOL] from zaimcsvconverter . error_totalizer import ErrorTotalizer [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError [EOL] from zaimcsvconverter . input_csv_converter import InputCsvConverter [EOL] [EOL] [EOL] class InputCsvConverterIterator : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , directory_csv_input , directory_csv_output ) : [EOL] self . directory_csv_input = directory_csv_input [EOL] self . directory_csv_output = directory_csv_output [EOL] [EOL] def execute ( self ) : [EOL] [docstring] [EOL] error_aggregator = ErrorTotalizer ( ) [EOL] for csv_converter in self . _list_csv_converter : [EOL] try : [EOL] csv_converter . execute ( ) [EOL] except InvalidInputCsvError : [EOL] error_aggregator . append ( csv_converter . input_csv ) [EOL] if error_aggregator . is_presented : [EOL] error_aggregator . export_to_csv ( self . directory_csv_output ) [EOL] raise InvalidInputCsvError ( error_aggregator . message ) [EOL] [EOL] @ property def _list_csv_converter ( self ) : [EOL] return ( InputCsvConverter ( path_csv_file , self . directory_csv_output ) for path_csv_file in sorted ( self . directory_csv_input . glob ( [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $None$ 0 0 0 0 0 0 0 $zaimcsvconverter.error_totalizer.ErrorTotalizer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_totalizer.ErrorTotalizer$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_totalizer.ErrorTotalizer$ 0 0 0 0 $zaimcsvconverter.error_totalizer.ErrorTotalizer$ 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_totalizer.ErrorTotalizer$ 0 0 0 0 0 0 0 0 $typing.Generator[zaimcsvconverter.input_csv_converter.InputCsvConverter,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Union [EOL] import builtins [EOL] import datetime [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from abc import abstractmethod [EOL] from datetime import datetime [EOL] from typing import List , Optional , Union [EOL] [EOL] from zaimcsvconverter . rowconverters import ( ZaimIncomeRowConverter , ZaimPaymentRowConverter , ZaimRowConverter , ZaimTransferRowConverter , ) [EOL] from zaimcsvconverter . zaim_csv_format import ZaimCsvFormat [EOL] [EOL] [EOL] class ZaimRow : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , zaim_row_converter ) : [EOL] self . _date = zaim_row_converter . input_row . date [EOL] [EOL] @ property def _date_string ( self ) : [EOL] return self . _date . strftime ( [string] ) [EOL] [EOL] @ abstractmethod def convert_to_list ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ZaimIncomeRow ( ZaimRow ) : [EOL] [docstring] [EOL] [EOL] METHOD = [string] [EOL] [EOL] def __init__ ( self , zaim_row_converter ) : [EOL] self . _category = zaim_row_converter . category [EOL] self . _cash_flow_target = zaim_row_converter . cash_flow_target [EOL] self . _store_name = zaim_row_converter . store_name [EOL] self . _amount_income = zaim_row_converter . amount [EOL] super ( ) . __init__ ( zaim_row_converter ) [EOL] [EOL] def convert_to_list ( self ) : [EOL] return [ self . _date_string , self . METHOD , self . _category , ZaimCsvFormat . CATEGORY_SMALL_EMPTY , ZaimCsvFormat . CASH_FLOW_SOURCE_EMPTY , self . _cash_flow_target , ZaimCsvFormat . ITEM_NAME_EMPTY , ZaimCsvFormat . NOTE_EMPTY , self . _store_name , ZaimCsvFormat . CURRENCY_EMPTY , self . _amount_income , ZaimCsvFormat . AMOUNT_PAYMENT_EMPTY , ZaimCsvFormat . AMOUNT_TRANSFER_EMPTY , ZaimCsvFormat . BALANCE_ADJUSTMENT_EMPTY , ZaimCsvFormat . AMOUNT_BEFORE_CURRENCY_CONVERSION_EMPTY , ZaimCsvFormat . SETTING_AGGREGATE_EMPTY , ] [EOL] [EOL] [EOL] class ZaimPaymentRow ( ZaimRow ) : [EOL] [docstring] [EOL] [EOL] METHOD = [string] [EOL] [EOL] def __init__ ( self , zaim_row_converter ) : [EOL] self . _category_large = zaim_row_converter . category_large [EOL] self . _category_small = zaim_row_converter . category_small [EOL] self . _cash_flow_source = zaim_row_converter . cash_flow_source [EOL] self . _item_name = zaim_row_converter . item_name [EOL] self . _note = zaim_row_converter . note [EOL] self . _store_name = zaim_row_converter . store_name [EOL] self . _amount_payment = zaim_row_converter . amount [EOL] super ( ) . __init__ ( zaim_row_converter ) [EOL] [EOL] def convert_to_list ( self ) : [EOL] return [ self . _date_string , self . METHOD , self . _category_large , self . _category_small , self . _cash_flow_source , ZaimCsvFormat . CASH_FLOW_TARGET_EMPTY , self . _item_name , self . _note , self . _store_name , ZaimCsvFormat . CURRENCY_EMPTY , ZaimCsvFormat . AMOUNT_INCOME_EMPTY , self . _amount_payment , ZaimCsvFormat . AMOUNT_TRANSFER_EMPTY , ZaimCsvFormat . BALANCE_ADJUSTMENT_EMPTY , ZaimCsvFormat . AMOUNT_BEFORE_CURRENCY_CONVERSION_EMPTY , ZaimCsvFormat . SETTING_AGGREGATE_EMPTY , ] [EOL] [EOL] [EOL] class ZaimTransferRow ( ZaimRow ) : [EOL] [docstring] [EOL] [EOL] METHOD = [string] [EOL] [EOL] def __init__ ( self , zaim_row_converter ) : [EOL] self . _cash_flow_source = zaim_row_converter . cash_flow_source [EOL] self . _cash_flow_target = zaim_row_converter . cash_flow_target [EOL] self . _amount_transfer = zaim_row_converter . amount [EOL] super ( ) . __init__ ( zaim_row_converter ) [EOL] [EOL] def convert_to_list ( self ) : [EOL] return [ self . _date_string , self . METHOD , ZaimCsvFormat . CATEGORY_LARGE_EMPTY , ZaimCsvFormat . CATEGORY_SMALL_EMPTY , self . _cash_flow_source , self . _cash_flow_target , ZaimCsvFormat . ITEM_NAME_EMPTY , ZaimCsvFormat . NOTE_EMPTY , ZaimCsvFormat . STORE_NAME_EMPTY , ZaimCsvFormat . CURRENCY_EMPTY , ZaimCsvFormat . AMOUNT_INCOME_EMPTY , ZaimCsvFormat . AMOUNT_PAYMENT_EMPTY , self . _amount_transfer , ZaimCsvFormat . BALANCE_ADJUSTMENT_EMPTY , ZaimCsvFormat . AMOUNT_BEFORE_CURRENCY_CONVERSION_EMPTY , ZaimCsvFormat . SETTING_AGGREGATE_EMPTY , ] [EOL] [EOL] [EOL] class ZaimRowFactory : [EOL] [docstring] [EOL] [EOL] @ staticmethod def create ( zaim_row_converter ) : [EOL] [docstring] [EOL] if isinstance ( zaim_row_converter , ZaimIncomeRowConverter ) : [EOL] return ZaimIncomeRow ( zaim_row_converter ) [EOL] if isinstance ( zaim_row_converter , ZaimPaymentRowConverter ) : [EOL] return ZaimPaymentRow ( zaim_row_converter ) [EOL] if isinstance ( zaim_row_converter , ZaimTransferRowConverter ) : [EOL] return ZaimTransferRow ( zaim_row_converter ) [EOL] raise ValueError ( f" [string] { zaim_row_converter . __class__ . __name__ }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Optional[typing.Union[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimIncomeRowConverter$ 0 0 0 0 $typing.List[typing.Optional[typing.Union[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimPaymentRowConverter$ 0 0 0 0 $typing.List[typing.Optional[typing.Union[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimTransferRowConverter$ 0 0 0 0 0 $builtins.str$ 0 $zaimcsvconverter.rowconverters.ZaimTransferRowConverter$ 0 0 0 0 0 $builtins.str$ 0 $zaimcsvconverter.rowconverters.ZaimTransferRowConverter$ 0 0 0 0 0 $builtins.int$ 0 $zaimcsvconverter.rowconverters.ZaimTransferRowConverter$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimTransferRowConverter$ 0 0 0 0 $typing.List[typing.Optional[typing.Union[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ZaimRow$ 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0
from typing import TypeVar , Optional [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from abc import ABC , abstractmethod [EOL] from typing import Generic , Optional , TypeVar [EOL] [EOL] from zaimcsvconverter . inputcsvformats import InputItemRow , InputRow , InputStoreRow [EOL] from zaimcsvconverter . zaim_csv_format import ZaimCsvFormat [EOL] [EOL] TypeVarInputRow = TypeVar ( [string] , bound = InputRow ) [EOL] TypeVarInputStoreRow = TypeVar ( [string] , bound = InputStoreRow ) [EOL] TypeVarInputItemRow = TypeVar ( [string] , bound = InputItemRow ) [EOL] [EOL] [EOL] [comment] [EOL] class ZaimRowConverter ( Generic [ TypeVarInputRow ] , ABC ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , input_row ) : [EOL] self . input_row = input_row [EOL] [EOL] [EOL] class ZaimIncomeRowConverter ( ZaimRowConverter [ TypeVarInputRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def category ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def store_name ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def cash_flow_target ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def amount ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] class ZaimIncomeRowStoreConverter ( ZaimIncomeRowConverter [ TypeVarInputStoreRow ] , ABC ) : [EOL] [docstring] [EOL] [EOL] @ property def category ( self ) : [EOL] [comment] [EOL] return self . input_row . store . category_income [EOL] [EOL] @ property def store_name ( self ) : [EOL] [comment] [EOL] return self . input_row . store . name_zaim [EOL] [EOL] [EOL] class ZaimPaymentRowConverter ( ZaimRowConverter [ TypeVarInputRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def category_large ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def category_small ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def item_name ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def store_name ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def cash_flow_source ( self ) : [EOL] [docstring] [EOL] [EOL] @ property def note ( self ) : [EOL] [docstring] [EOL] return ZaimCsvFormat . NOTE_EMPTY [EOL] [EOL] @ property @ abstractmethod def amount ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ZaimPaymentRowStoreConverter ( ZaimPaymentRowConverter [ TypeVarInputStoreRow ] , ABC ) : [EOL] [docstring] [EOL] [EOL] @ property def category_large ( self ) : [EOL] [comment] [EOL] return self . input_row . store . category_payment_large [EOL] [EOL] @ property def category_small ( self ) : [EOL] [comment] [EOL] return self . input_row . store . category_payment_small [EOL] [EOL] @ property def item_name ( self ) : [EOL] return ZaimCsvFormat . ITEM_NAME_EMPTY [EOL] [EOL] @ property def store_name ( self ) : [EOL] [comment] [EOL] return self . input_row . store . name_zaim [EOL] [EOL] [EOL] class ZaimPaymentRowItemConverter ( ZaimPaymentRowConverter [ TypeVarInputItemRow ] , ABC ) : [EOL] [docstring] [EOL] [EOL] @ property def category_large ( self ) : [EOL] [comment] [EOL] return self . input_row . item . category_payment_large [EOL] [EOL] @ property def category_small ( self ) : [EOL] [comment] [EOL] return self . input_row . item . category_payment_small [EOL] [EOL] @ property def item_name ( self ) : [EOL] [comment] [EOL] return self . input_row . item . name [EOL] [EOL] @ property def store_name ( self ) : [EOL] [comment] [EOL] return self . input_row . store . name_zaim [EOL] [EOL] [EOL] class ZaimTransferRowConverter ( ZaimRowConverter [ TypeVarInputRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def cash_flow_source ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def cash_flow_target ( self ) : [EOL] [docstring] [EOL] [EOL] @ property @ abstractmethod def amount ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ZaimRowConverterFactory ( Generic [ TypeVarInputRow ] ) : [EOL] [docstring] [EOL] [EOL] def create ( self , input_row ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $TypeVarInputRow$ 0 0 0 0 0 $TypeVarInputRow$ 0 $TypeVarInputRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ZaimRowConverter$ 0 0 0 $TypeVarInputRow$ 0 0 0 0 0
import builtins [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from zaimcsvconverter import CONFIG [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus import GoldPointCardPlusRow [EOL] from zaimcsvconverter . rowconverters import ZaimPaymentRowStoreConverter , ZaimRowConverter , ZaimRowConverterFactory [EOL] [EOL] [EOL] [comment] [EOL] class GoldPointCardPlusZaimPaymentRowConverter ( ZaimPaymentRowStoreConverter [ GoldPointCardPlusRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return CONFIG . gold_point_card_plus . account_name [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return self . input_row . used_amount [EOL] [EOL] [EOL] class GoldPointCardPlusZaimRowConverterFactory ( ZaimRowConverterFactory [ GoldPointCardPlusRow ] ) : [EOL] [docstring] [EOL] [EOL] def create ( self , input_row ) : [EOL] return GoldPointCardPlusZaimPaymentRowConverter ( input_row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus.GoldPointCardPlusRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus.GoldPointCardPlusRow$ 0 0
import builtins [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from zaimcsvconverter import CONFIG [EOL] from zaimcsvconverter . inputcsvformats . view_card import ViewCardRow [EOL] from zaimcsvconverter . rowconverters import ZaimPaymentRowStoreConverter , ZaimRowConverter , ZaimRowConverterFactory [EOL] [EOL] [EOL] [comment] [EOL] class ViewCardZaimPaymentRowConverter ( ZaimPaymentRowStoreConverter [ ViewCardRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return CONFIG . view_card . account_name [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return self . input_row . billing_amount_current_time [EOL] [EOL] [EOL] class ViewCardZaimRowConverterFactory ( ZaimRowConverterFactory [ ViewCardRow ] ) : [EOL] [docstring] [EOL] [EOL] def create ( self , input_row ) : [EOL] return ViewCardZaimPaymentRowConverter ( input_row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0
import builtins [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from zaimcsvconverter import CONFIG [EOL] from zaimcsvconverter . inputcsvformats . amazon import AmazonRow [EOL] from zaimcsvconverter . rowconverters import ZaimPaymentRowItemConverter , ZaimRowConverter , ZaimRowConverterFactory [EOL] [EOL] [EOL] [comment] [EOL] class AmazonZaimPaymentRowConverter ( ZaimPaymentRowItemConverter [ AmazonRow ] ) : [EOL] [docstring] [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return CONFIG . amazon . payment_account_name [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return self . input_row . price * self . input_row . number [EOL] [EOL] [EOL] class AmazonZaimRowConverterFactory ( ZaimRowConverterFactory [ AmazonRow ] ) : [EOL] [docstring] [EOL] [EOL] def create ( self , input_row ) : [EOL] return AmazonZaimPaymentRowConverter ( input_row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 $zaimcsvconverter.inputcsvformats.amazon.AmazonRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon.AmazonRow$ 0 0
from typing import Optional , Type , Callable [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import Callable , Optional [EOL] [EOL] from zaimcsvconverter . config import SFCardViewerConfig [EOL] from zaimcsvconverter . inputcsvformats . sf_card_viewer import ( SFCardViewerEnterExitRow , SFCardViewerEnterRow , SFCardViewerRow , ) [EOL] from zaimcsvconverter . rowconverters import ( ZaimPaymentRowConverter , ZaimPaymentRowStoreConverter , ZaimRowConverter , ZaimRowConverterFactory , ZaimTransferRowConverter , ) [EOL] from zaimcsvconverter . zaim_csv_format import ZaimCsvFormat [EOL] [EOL] [EOL] class SFCardViewerZaimPaymentOnSomewhereRowConverter ( ZaimPaymentRowConverter [ SFCardViewerRow ] ) : [EOL] [docstring] [EOL] [EOL] account_config = ... [EOL] [EOL] @ property def category_large ( self ) : [EOL] [comment] [EOL] return [string] if self . input_row . is_bus_tram else ZaimCsvFormat . CATEGORY_LARGE_EMPTY [EOL] [EOL] @ property def category_small ( self ) : [EOL] [comment] [EOL] return [string] if self . input_row . is_bus_tram else ZaimCsvFormat . CATEGORY_LARGE_EMPTY [EOL] [EOL] @ property def item_name ( self ) : [EOL] return ZaimCsvFormat . ITEM_NAME_EMPTY [EOL] [EOL] @ property def store_name ( self ) : [EOL] return ZaimCsvFormat . STORE_NAME_EMPTY [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return self . account_config . account_name [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return self . input_row . used_amount [EOL] [EOL] [EOL] [comment] [EOL] class SFCardViewerZaimPaymentOnStationRowConverter ( ZaimPaymentRowStoreConverter [ SFCardViewerEnterExitRow ] ) : [EOL] [docstring] [EOL] [EOL] account_config = ... [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return self . account_config . account_name [EOL] [EOL] @ property def note ( self ) : [EOL] [comment] [EOL] return ( f"{ self . input_row . railway_company_name_enter } [string] { self . input_row . station_name_enter }" f" [string] { self . input_row . railway_company_name_exit } [string] { self . input_row . store . name }" ) [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return self . input_row . used_amount [EOL] [EOL] [EOL] class SFCardViewerZaimTransferRowConverter ( ZaimTransferRowConverter [ SFCardViewerEnterRow ] ) : [EOL] [docstring] [EOL] [EOL] account_config = ... [EOL] [EOL] @ property def cash_flow_source ( self ) : [EOL] return self . account_config . auto_charge_source [EOL] [EOL] @ property def cash_flow_target ( self ) : [EOL] return self . account_config . account_name [EOL] [EOL] @ property def amount ( self ) : [EOL] [comment] [EOL] return - [number] * self . input_row . used_amount [EOL] [EOL] [EOL] class SFCardViewerZaimRowConverterFactory ( ZaimRowConverterFactory [ SFCardViewerRow ] ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , account_config ) : [EOL] self . _account_config = account_config [EOL] [EOL] def create ( self , input_row ) : [EOL] if isinstance ( input_row , SFCardViewerEnterExitRow ) : [EOL] [EOL] class ConcreteSFCardViewerZaimPaymentOnStationRowConverter ( SFCardViewerZaimPaymentOnStationRowConverter ) : [EOL] account_config = self . _account_config ( ) [EOL] [EOL] return ConcreteSFCardViewerZaimPaymentOnStationRowConverter ( input_row ) [EOL] if isinstance ( input_row , SFCardViewerEnterRow ) : [EOL] [EOL] class ConcreteSFCardViewerZaimTransferRowConverter ( SFCardViewerZaimTransferRowConverter ) : [EOL] account_config = self . _account_config ( ) [EOL] [EOL] return ConcreteSFCardViewerZaimTransferRowConverter ( input_row ) [EOL] if isinstance ( input_row , SFCardViewerRow ) : [EOL] [EOL] class ConcreteSFCardViewerZaimPaymentOnSomewhereRowConverter ( SFCardViewerZaimPaymentOnSomewhereRowConverter ) : [EOL] account_config = self . _account_config ( ) [EOL] [EOL] return ConcreteSFCardViewerZaimPaymentOnSomewhereRowConverter ( input_row ) [EOL] raise ValueError ( f" [string] { type ( input_row ) }" ) [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.SFCardViewerConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.SFCardViewerConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.SFCardViewerConfig$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Optional , Generator [EOL] import builtins [EOL] import godslayer [EOL] import typing [EOL] [docstring] [EOL] from typing import Any , Generator , List , Optional [EOL] [EOL] from godslayer . csv . god_slayer import GodSlayer [EOL] from godslayer . exceptions import InvalidFooterError , InvalidHeaderError , InvalidRecordError [EOL] [EOL] from zaimcsvconverter . datasources . data_source import DataSource [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError , LogicError [EOL] [EOL] [EOL] class Csv ( DataSource ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , god_slayer ) : [EOL] super ( ) . __init__ ( ) [EOL] self . god_slayer = god_slayer [EOL] self . invalid_header_error = None [EOL] self . invalid_footer_error = None [EOL] [EOL] def __iter__ ( self ) : [EOL] try : [EOL] yield from self . god_slayer [EOL] except InvalidHeaderError as error : [EOL] self . invalid_header_error = error [EOL] raise InvalidInputCsvError ( str ( error ) ) from error [EOL] except InvalidFooterError as error : [EOL] self . invalid_footer_error = error [EOL] raise InvalidInputCsvError ( str ( error ) ) from error [EOL] [EOL] @ property def is_invalid ( self ) : [EOL] return ( bool ( self . dictionary_invalid_record ) or self . invalid_header_error is not None or self . invalid_footer_error is not None ) [EOL] [EOL] def mark_current_record_as_error ( self , list_error ) : [EOL] if self . god_slayer . index is None : [EOL] raise LogicError ( [string] ) [comment] [EOL] self . dictionary_invalid_record [ self . god_slayer . index ] = list_error [EOL] [EOL] def raise_error_if_invalid ( self ) : [EOL] if self . is_invalid : [EOL] raise InvalidInputCsvError ( f" [string] { self . god_slayer . path_to_file . name } [string] " [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[godslayer.exceptions.InvalidHeaderError]$ 0 0 0 0 0 $typing.Optional[godslayer.exceptions.InvalidFooterError]$ 0 0 0 0 0 $typing.Generator[typing.List[typing.Any],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[godslayer.exceptions.InvalidRecordError]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[godslayer.exceptions.InvalidRecordError]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Generator [EOL] import builtins [EOL] import godslayer [EOL] import typing [EOL] [docstring] [EOL] from abc import ABC , abstractmethod [EOL] from typing import Any , Dict , Generator , List [EOL] [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] [EOL] class DataSource ( ABC ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . dictionary_invalid_record = { } [EOL] [EOL] @ abstractmethod def __iter__ ( self ) : [EOL] raise NotImplementedError ( ) [comment] [EOL] [EOL] @ abstractmethod def mark_current_record_as_error ( self , list_error ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [comment] [EOL] [EOL] @ property @ abstractmethod def is_invalid ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [comment] [EOL] [EOL] @ abstractmethod def raise_error_if_invalid ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.List[godslayer.exceptions.InvalidRecordError]]$ 0 0 0 0 0 0 0 0 $typing.Generator[typing.List[typing.Any],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[godslayer.exceptions.InvalidRecordError]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import datetime [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from dataclasses import dataclass [EOL] from datetime import datetime [EOL] [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from zaimcsvconverter import CONFIG [EOL] from zaimcsvconverter . inputcsvformats import InputRowFactory , InputStoreRow , InputStoreRowData [EOL] from zaimcsvconverter . models import FileCsvConvertId [EOL] [EOL] [EOL] @ dataclass class GoldPointCardPlus201912RowData ( InputStoreRowData ) : [EOL] [docstring] [EOL] [EOL] _used_date = ... [EOL] _used_store = ... [EOL] _used_amount = ... [EOL] _number_of_division = ... [EOL] _current_time_of_division = ... [EOL] _payed_amount = ... [EOL] _others = ... [EOL] [EOL] @ property def date ( self ) : [EOL] return datetime . strptime ( self . _used_date , [string] ) [EOL] [EOL] @ property def store_name ( self ) : [EOL] return self . _used_store [EOL] [EOL] @ property def payed_amount ( self ) : [EOL] return int ( self . _payed_amount ) [EOL] [EOL] @ property def validate ( self ) : [EOL] self . stock_error ( lambda : self . date , f" [string] { self . _used_date }" ) [EOL] self . stock_error ( lambda : self . payed_amount , f" [string] { self . _used_amount }" ) [EOL] return super ( ) . validate [EOL] [EOL] [EOL] class GoldPointCardPlus201912Row ( InputStoreRow ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , row_data ) : [EOL] super ( ) . __init__ ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , row_data ) [EOL] self . payed_amount = row_data . payed_amount [EOL] [EOL] @ property def is_row_to_skip ( self ) : [EOL] try : [EOL] store = self . store [EOL] except NoResultFound : [EOL] return False [EOL] return CONFIG . gold_point_card_plus . skip_amazon_row and store . is_amazon [EOL] [EOL] [EOL] class GoldPointCardPlus201912RowFactory ( InputRowFactory [ GoldPointCardPlus201912RowData , GoldPointCardPlus201912Row ] ) : [EOL] [docstring] [EOL] [EOL] def create ( self , input_row_data ) : [EOL] return GoldPointCardPlus201912Row ( input_row_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GoldPointCardPlus201912RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $GoldPointCardPlus201912RowData$ 0 0 0 0 $builtins.int$ 0 $GoldPointCardPlus201912RowData$ 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.Store$ 0 0 0 $zaimcsvconverter.models.Store$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.Store$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $GoldPointCardPlus201912Row$ 0 0 0 $GoldPointCardPlus201912RowData$ 0 0 0 0 0 0 $GoldPointCardPlus201912RowData$ 0 0
from typing import List , Union , Generator [EOL] import builtins [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import Generator , List , Union [EOL] [EOL] from zaimcsvconverter . datasources . csv import Csv [EOL] from zaimcsvconverter . datasources . data_source import DataSource [EOL] [EOL] [EOL] class InputCsvErrorReporter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , csv ) : [EOL] self . csv = csv [EOL] [EOL] def __iter__ ( self ) : [EOL] if self . csv . invalid_header_error is not None : [EOL] yield [ self . csv . god_slayer . path_to_file . name , [string] , str ( self . csv . invalid_header_error ) ] [EOL] if self . csv . invalid_footer_error is not None : [EOL] yield [ self . csv . god_slayer . path_to_file . name , [string] , str ( self . csv . invalid_footer_error ) ] [EOL] for index , list_error in self . csv . dictionary_invalid_record . items ( ) : [EOL] for error in list_error : [EOL] yield [ self . csv . god_slayer . path_to_file . name , index , str ( error ) ] [EOL] [EOL] [EOL] class DataSourceErrorReporterFactory : [EOL] [docstring] [EOL] [EOL] @ staticmethod def create ( data_source ) : [EOL] [docstring] [EOL] if isinstance ( data_source , Csv ) : [EOL] return InputCsvErrorReporter ( data_source ) [EOL] raise TypeError ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 0 0 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 $zaimcsvconverter.datasources.csv.Csv$ 0 0 0 $typing.Generator[typing.List[typing.Union[builtins.int,builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.datasources.data_source.DataSource$ 0 0 0 0 0 0 0
	0
from typing import List [EOL] import zaimcsvconverter [EOL] import typing [EOL] import _csv [EOL] import tests [EOL] import pathlib [EOL] [docstring] [EOL] from __future__ import annotations [EOL] [EOL] import csv [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from tests . testlibraries . row_data import ZaimRowData [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError [EOL] from zaimcsvconverter . input_csv_converter import InputCsvConverter [EOL] [EOL] [EOL] class TestInputCsvConverterForStore : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , ( [string] , ) , indirect = [ [string] ] ) def test_success ( yaml_config_load , database_session_basic_store_waon , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter = InputCsvConverter ( path_file_csv_input , tmp_path ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ ] [EOL] input_csv_converter . execute ( ) [EOL] with ( tmp_path / path_file_csv_input . name ) . open ( [string] , encoding = [string] , newline = [string] ) as file_zaim : [EOL] [comment] [EOL] assert sum ( [number] for row in file_zaim ) == [number] [EOL] file_zaim . seek ( [number] ) [EOL] reader_zaim = csv . reader ( file_zaim ) [EOL] list_zaim_row = reader_zaim . __next__ ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == [string] [EOL] assert zaim_row_data . method == [string] [EOL] assert zaim_row_data . category_large == [string] [EOL] assert zaim_row_data . category_small == [string] [EOL] assert zaim_row_data . cash_flow_source == [string] [EOL] assert zaim_row_data . cash_flow_target == [string] [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . note == [string] [EOL] assert zaim_row_data . store_name == [string] [EOL] assert zaim_row_data . currency == [string] [EOL] assert zaim_row_data . amount_income == [string] [EOL] assert zaim_row_data . amount_payment == [string] [EOL] assert zaim_row_data . amount_transfer == [string] [EOL] assert zaim_row_data . balance_adjustment == [string] [EOL] assert zaim_row_data . amount_before_currency_conversion == [string] [EOL] assert zaim_row_data . setting_aggregate == [string] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , ( [string] , ) , indirect = [ [string] ] ) def test_stop_iteration_header ( yaml_config_load , database_session_basic_store_waon , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter = InputCsvConverter ( path_file_csv_input , tmp_path ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ ] [EOL] with pytest . raises ( InvalidInputCsvError ) : [EOL] input_csv_converter . execute ( ) [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , ( [string] , ) , indirect = [ [string] ] ) def test_stop_iteration_footer ( yaml_config_load , database_session_stores_gold_point_card_plus , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter = InputCsvConverter ( path_file_csv_input , tmp_path ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ ] [EOL] with pytest . raises ( InvalidInputCsvError ) : [EOL] input_csv_converter . execute ( ) [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] ] , indirect = [ [string] ] , ) @ pytest . mark . parametrize ( [string] , ( [string] , ) , indirect = [ [string] ] ) def test_key_error ( yaml_config_load , database_session_with_schema , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter = InputCsvConverter ( path_file_csv_input , tmp_path ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ ] [EOL] with pytest . raises ( InvalidInputCsvError ) : [EOL] input_csv_converter . execute ( ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ [ [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] class TestInputCsvConverterForItem : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , ( [string] , ) , indirect = [ [string] ] ) def test_key_error ( yaml_config_load , database_session_with_schema , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter = InputCsvConverter ( path_file_csv_input , tmp_path ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ ] [EOL] with pytest . raises ( InvalidInputCsvError ) : [EOL] input_csv_converter . execute ( ) [EOL] assert input_csv_converter . input_csv . undefined_content_error_handler . list_error == [ [ [string] , [string] , [string] ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $_csv._reader$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter.InputCsvConverter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import zaimcsvconverter [EOL] [docstring] [EOL] from zaimcsvconverter import Config [EOL] [EOL] [EOL] class TestConfig : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_init ( ) : [EOL] [docstring] [EOL] config = Config ( ) [EOL] assert config . waon is None [EOL] assert config . gold_point_card_plus is None [EOL] assert config . mufg is None [EOL] assert config . pasmo is None [EOL] assert config . amazon is None [EOL] [EOL] [comment] [EOL] @ staticmethod def test_load ( resource_path_root ) : [EOL] [docstring] [EOL] config = Config ( ) [EOL] config . load ( resource_path_root / [string] ) [EOL] assert config . waon . account_name == [string] [EOL] assert config . waon . auto_charge_source == [string] [EOL] assert config . gold_point_card_plus . account_name == [string] [EOL] assert config . gold_point_card_plus . skip_amazon_row [EOL] assert config . mufg . account_name == [string] [EOL] assert config . mufg . transfer_account_name == [string] [EOL] assert config . pasmo . account_name == [string] [EOL] assert config . pasmo . auto_charge_source == [string] [EOL] assert config . pasmo . skip_sales_goods_row [EOL] assert config . amazon . store_name_zaim == [string] [EOL] assert config . amazon . payment_account_name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.config.Config$ 0 0 0 0 0 0 0
from typing import List , Any [EOL] import _csv [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] import csv [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . error_row_data_for_test import ErrorRowDataForTest [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError [EOL] from zaimcsvconverter . input_csv_converter_iterator import InputCsvConverterIterator [EOL] [EOL] [EOL] class TestInputCsvConverterIterator : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_success ( yaml_config_load , database_session_store_item , resource_path , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter_iterator = InputCsvConverterIterator ( resource_path , tmp_path ) [EOL] input_csv_converter_iterator . execute ( ) [EOL] files = sorted ( tmp_path . rglob ( [string] ) ) [EOL] assert len ( files ) == [number] [EOL] assert files [ [number] ] . name == [string] [EOL] assert files [ [number] ] . name == [string] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_fail ( yaml_config_load , database_session_store_item , resource_path , tmp_path ) : [EOL] [docstring] [EOL] input_csv_converter_iterator = InputCsvConverterIterator ( resource_path , tmp_path ) [EOL] with pytest . raises ( InvalidInputCsvError ) : [EOL] input_csv_converter_iterator . execute ( ) [EOL] files = sorted ( tmp_path . rglob ( [string] ) ) [EOL] assert len ( files ) == [number] , f" [string] { files }" [EOL] assert files [ [number] ] . name == [string] [EOL] assert files [ [number] ] . name == [string] [EOL] assert files [ [number] ] . name == [string] [EOL] assert files [ [number] ] . name == [string] [EOL] with files [ [number] ] . open ( [string] , encoding = [string] , newline = [string] ) as file_error : [EOL] reader_error = csv . reader ( file_error ) [EOL] error_row_data = ErrorRowDataForTest ( * ( reader_error . __next__ ( ) ) ) [EOL] assert error_row_data . convert_table == [string] [EOL] assert error_row_data . store_name == [string] [EOL] assert error_row_data . item_name == ( [string] ) [EOL] error_row_data = ErrorRowDataForTest ( * ( reader_error . __next__ ( ) ) ) [EOL] assert error_row_data . convert_table == [string] [EOL] assert error_row_data . store_name == [string] [EOL] assert error_row_data . item_name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter_iterator.InputCsvConverterIterator$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter_iterator.InputCsvConverterIterator$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter_iterator.InputCsvConverterIterator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv_converter_iterator.InputCsvConverterIterator$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0 0 $tests.testlibraries.error_row_data_for_test.ErrorRowDataForTest$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . error_handler import UndefinedContentErrorHandler [EOL] from zaimcsvconverter . file_csv_convert import FileCsvConvert [EOL] from zaimcsvconverter . inputcsvformats . amazon import AmazonRow [EOL] from zaimcsvconverter . inputcsvformats . waon import WaonRow [EOL] [EOL] [EOL] class TestErrorHandler : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_init_is_presented_false ( ) : [EOL] [docstring] [EOL] assert not UndefinedContentErrorHandler ( ) . is_presented [EOL] [EOL] [comment] [EOL] @ staticmethod def test_append_undefined_content_extend_is_presented_true_uniquify_iter ( yaml_config_load ) : [EOL] [docstring] [EOL] error_amazon = [ [string] , [string] , [string] ] [EOL] error_waon = [ [string] , [string] , [string] ] [EOL] error_handler_a = UndefinedContentErrorHandler ( ) [EOL] error_handler_a . append ( FileCsvConvert . WAON , WaonRow ( InstanceResource . ROW_DATA_WAON_PAYMENT_FAMILY_MART_KABUTOCHOEIDAIDORI ) ) [EOL] assert error_handler_a . list_error == [ error_waon ] [EOL] error_handler_b = UndefinedContentErrorHandler ( ) [EOL] error_handler_b . append ( FileCsvConvert . AMAZON , AmazonRow ( InstanceResource . ROW_DATA_AMAZON_ECHO_DOT ) ) [EOL] error_handler_b . append ( FileCsvConvert . AMAZON , AmazonRow ( InstanceResource . ROW_DATA_AMAZON_ECHO_DOT ) ) [EOL] assert error_handler_b . list_error == [ error_amazon , error_amazon ] [EOL] error_handler_a . extend ( error_handler_b ) [EOL] assert error_handler_a . list_error == [ error_amazon , error_waon ] [EOL] assert error_handler_a . is_presented [EOL] error_handler_a . uniquify ( ) [EOL] list_error = [ error_amazon , error_waon ] [EOL] index = [number] [EOL] for error_row in error_handler_a : [EOL] assert error_row == list_error [ index ] [EOL] index += [number] [EOL] assert index == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 $typing.List[builtins.str]$ 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 0 0 $zaimcsvconverter.error_handler.UndefinedContentErrorHandler$ 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from godslayer . god_slayer_factory import GodSlayerFactory [EOL] [EOL] from zaimcsvconverter . account import AccountContext [EOL] from zaimcsvconverter . file_csv_convert import FileCsvConvert [EOL] from zaimcsvconverter . inputcsvformats . waon import WaonRowData , WaonRowFactory [EOL] from zaimcsvconverter . rowconverters . waon import WaonZaimRowConverterFactory [EOL] [EOL] [EOL] class TestAccount : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_convert_string_to_int_or_none ( ) : [EOL] [docstring] [EOL] file_name_csv_convert = FileCsvConvert . WAON [EOL] regex_csv_file_name = [string] [EOL] god_slayer_factory = GodSlayerFactory ( ) [EOL] input_row_data_class = WaonRowData [EOL] input_row_factory = WaonRowFactory ( ) [EOL] zaim_row_factory_selector = WaonZaimRowConverterFactory ( ) [EOL] account_dependency = AccountContext ( file_name_csv_convert , regex_csv_file_name , god_slayer_factory , input_row_data_class , input_row_factory , zaim_row_factory_selector , ) [EOL] assert account_dependency . file_csv_convert == file_name_csv_convert [EOL] assert account_dependency . regex_csv_file_name == regex_csv_file_name [EOL] assert account_dependency . god_slayer_factory == god_slayer_factory [EOL] assert account_dependency . input_row_data_class == input_row_data_class [EOL] assert account_dependency . input_row_factory == input_row_factory [EOL] assert account_dependency . zaim_row_converter_selector == zaim_row_factory_selector [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Type[zaimcsvconverter.inputcsvformats.waon.WaonRowData]$ 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowFactory$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Type[zaimcsvconverter.inputcsvformats.waon.WaonRowData]$ 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowFactory$ 0 $typing.Any$ 0 0 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 $typing.Type[zaimcsvconverter.inputcsvformats.waon.WaonRowData]$ 0 $typing.Type[zaimcsvconverter.inputcsvformats.waon.WaonRowData]$ 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowFactory$ 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowFactory$ 0 0 $zaimcsvconverter.account.AccountContext[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0
import pathlib [EOL] [docstring] [EOL] import os [EOL] from enum import Enum [EOL] from pathlib import Path [EOL] [EOL] from zaimcsvconverter . file_csv_convert import FileCsvConvert [EOL] [EOL] [EOL] class FilePathConvertTable ( Enum ) : [EOL] [docstring] [EOL] [EOL] WAON = Path ( [string] ) [EOL] GOLD_POINT_CARD_PLUS = Path ( [string] ) [EOL] MUFG = Path ( [string] ) [EOL] SF_CARD_VIEWER = Path ( [string] ) [EOL] AMAZON = Path ( [string] ) [EOL] VIEW_CARD = Path ( [string] ) [EOL] [EOL] @ property def value ( self ) : [EOL] [docstring] [EOL] return super ( ) . value [EOL] [EOL] @ property def path ( self ) : [EOL] return ( [string] / self . value [EOL] if os . name == [string] [EOL] else [string] / self . value ) [EOL] [EOL] [EOL] class TestFileCsvConvert : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_create_by_path_csv_convert ( ) : [EOL] [docstring] [EOL] for file_csv_convert in FileCsvConvert : [EOL] assert isinstance ( FileCsvConvert . create_by_path_csv_convert ( FilePathConvertTable [ file_csv_convert . name ] . path ) , FileCsvConvert , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import zaimcsvconverter [EOL] [docstring] [EOL] import pytest [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . row_processor import RecordProcessor [EOL] [EOL] [EOL] class TestRowProcessor : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] ] , indirect = [ [string] ] , ) def test ( yaml_config_load , database_session_with_schema ) : [EOL] [docstring] [EOL] row_process = RecordProcessor ( Account . WAON ) [EOL] with pytest . raises ( InvalidRecordError ) : [EOL] row_process . execute ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] list_error = row_process . list_error [EOL] assert len ( list_error ) == [number] [EOL] assert str ( list_error [ [number] ] ) == [string] [EOL] assert not row_process . undefined_content_error_handler . is_presented [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.row_processor.RecordProcessor$ 0 0 0 0 0
from typing import List , Any , Optional [EOL] import typing [EOL] import builtins [EOL] import _csv [EOL] import tests [EOL] import fixturefilehandler [EOL] [docstring] [EOL] import csv [EOL] from pathlib import Path [EOL] from typing import Optional [EOL] [EOL] import pytest [EOL] from fixturefilehandler . file_paths import RelativeDeployFilePath [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from tests . testlibraries . output_csv_file_checker import ErrorCsvFileChecker , ZaimCsvFileChecker [EOL] from tests . testlibraries . row_data import InvalidRowErrorRowData , ZaimRowData [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError [EOL] from zaimcsvconverter . zaim_csv_converter import ZaimCsvConverter [EOL] [EOL] [EOL] def create_relative_deploy_file_path ( resource_path , directory_name , directory_name_resource = None ) : [EOL] [docstring] [EOL] if directory_name_resource is None : [EOL] directory_name_resource = directory_name [EOL] return RelativeDeployFilePath ( target = Path ( directory_name ) , backup = Path ( f"{ directory_name } [string] " ) , resource = resource_path . parent / Path ( directory_name_resource ) , base = InstanceResource . PATH_PROJECT_HOME_DIRECTORY , ) [EOL] [EOL] [EOL] class TestZaimCsvConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_success ( yaml_config_file , directory_csv_convert_table , directory_csv_input , directory_csv_output , database_session ) : [EOL] [docstring] [EOL] try : [EOL] ZaimCsvConverter . execute ( ) [EOL] except InvalidInputCsvError as error : [EOL] TestZaimCsvConverter . debug_csv ( [string] , directory_csv_output ) [EOL] TestZaimCsvConverter . debug_csv ( [string] , directory_csv_output ) [EOL] raise error [EOL] files = sorted ( directory_csv_output . target . rglob ( [string] ) ) [EOL] [EOL] assert len ( files ) == [number] [EOL] checker = ZaimCsvFileChecker ( directory_csv_output ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] , ) [EOL] [EOL] @ staticmethod def debug_csv ( csv_file_name , directory_csv_output ) : [EOL] with ( directory_csv_output . target / csv_file_name ) . open ( [string] , encoding = [string] , newline = [string] ) as file : [EOL] csv_reader = csv . reader ( file ) [EOL] for list_row_data in csv_reader : [EOL] print ( list_row_data ) [EOL] [EOL] [comment] [EOL] @ staticmethod def test_fail ( yaml_config_file , directory_csv_convert_table , directory_csv_input , directory_csv_output , database_session ) : [EOL] [docstring] [EOL] with pytest . raises ( InvalidInputCsvError ) as error : [EOL] ZaimCsvConverter . execute ( ) [EOL] assert str ( error . value ) == [string] [EOL] checker = ZaimCsvFileChecker ( directory_csv_output ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker . assert_file ( [string] , [ ZaimRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) [EOL] checker = ErrorCsvFileChecker ( directory_csv_output ) [EOL] checker . assert_file ( [string] , [ InvalidRowErrorRowData ( [string] , [string] , [string] [string] [string] , ) , InvalidRowErrorRowData ( [string] , [string] , ( [string] [string] [string] ) , ) , InvalidRowErrorRowData ( [string] , [string] , [string] , ) , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fixturefilehandler.file_paths.RelativeDeployFilePath$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ZaimCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ErrorCsvFileChecker$ 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ErrorCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ErrorCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ErrorCsvFileChecker$ 0 0 0 0 0 0 $tests.testlibraries.output_csv_file_checker.ErrorCsvFileChecker$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] from typing import List [EOL] [EOL] import pytest [EOL] [EOL] from zaimcsvconverter . models import Item , Store [EOL] [EOL] [EOL] class TestConvertTableImporter : [EOL] [docstring] [EOL] [EOL] def _prepare_fixture ( self ) : [EOL] pass [EOL] [EOL] def test_success ( self , database_session_with_schema , fixture_convert_table_importer ) : [EOL] [docstring] [EOL] fixture_convert_table_importer . execute ( ) [EOL] self . assert_store_equal ( [ [ [number] , [number] , [string] , None , None , None , None , [string] ] , [ [number] , [number] , [string] , [string] , [string] , [string] , None , None ] , [ [number] , [number] , [string] , None , None , None , None , [string] ] , [ [number] , [number] , [string] , [string] , [string] , [string] , None , None ] , [ [number] , [number] , [string] , [string] , [string] , [string] , None , None ] , [ [number] , [number] , [string] , [string] , [string] , [string] , [string] , None ] , ] , database_session_with_schema , ) [EOL] self . assert_item_equal ( [ [ [number] , [number] , [string] , [string] , [string] ] , [ [number] , [number] , [string] , [string] , [string] ] , [ [number] , [number] , [string] , [string] , [string] ] , [ [number] , [number] , [string] , [string] , [string] ] , [ [number] , [number] , [string] , [string] , [string] ] , [ [number] , [number] , [string] , [string] , [string] , ] , ] , database_session_with_schema , ) [EOL] [EOL] @ staticmethod def assert_store_equal ( expected_stores , database_session_with_schema ) : [EOL] [docstring] [EOL] stores = database_session_with_schema . query ( Store ) . order_by ( Store . id . asc ( ) ) . all ( ) [EOL] assert len ( stores ) == len ( expected_stores ) [EOL] index = [number] [EOL] for store in stores : [EOL] expected_store = expected_stores [ index ] [EOL] assert store . id == expected_store [ [number] ] [EOL] assert store . file_csv_convert_id == expected_store [ [number] ] [EOL] assert store . name == expected_store [ [number] ] [EOL] assert store . name_zaim == expected_store [ [number] ] [EOL] assert store . category_payment_large == expected_store [ [number] ] [EOL] assert store . category_payment_small == expected_store [ [number] ] [EOL] assert store . category_income == expected_store [ [number] ] [EOL] assert store . transfer_target == expected_store [ [number] ] [EOL] index += [number] [EOL] [EOL] @ staticmethod def assert_item_equal ( expected_items , database_session_with_schema ) : [EOL] [docstring] [EOL] items = database_session_with_schema . query ( Item ) . order_by ( Item . id . asc ( ) ) . all ( ) [EOL] assert len ( items ) == len ( expected_items ) [EOL] index = [number] [EOL] for item in items : [EOL] expected_item = expected_items [ index ] [EOL] assert item . id == expected_item [ [number] ] [EOL] assert item . file_csv_convert_id == expected_item [ [number] ] [EOL] assert item . name == expected_item [ [number] ] [EOL] assert item . category_payment_large == expected_item [ [number] ] [EOL] assert item . category_payment_small == expected_item [ [number] ] [EOL] index += [number] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_fail ( fixture_convert_table_importer , database_session_with_schema ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) : [EOL] fixture_convert_table_importer . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Store]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Store]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Store]$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Item]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[zaimcsvconverter.models.Item]$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] import pytest [EOL] [EOL] from zaimcsvconverter . utility import Utility [EOL] [EOL] [EOL] class TestUtility : [EOL] [docstring] [EOL] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [string] , None ) , ( [string] , [number] ) ] ) def test_convert_string_to_int_or_none ( argument , expected ) : [EOL] [docstring] [EOL] assert Utility . convert_string_to_int_or_none ( argument ) == expected [EOL] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] ) def test_convert_yen_string_to_int_success ( argument , expected ) : [EOL] [docstring] [EOL] assert Utility . convert_yen_string_to_int ( argument ) == expected [EOL] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_convert_yen_string_to_int_fail ( argument ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) : [EOL] Utility . convert_yen_string_to_int ( argument ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import _csv [EOL] import zaimcsvconverter [EOL] import pathlib [EOL] [docstring] [EOL] import csv [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . datasources . csv import Csv [EOL] from zaimcsvconverter . exceptions import InvalidInputCsvError [EOL] from zaimcsvconverter . input_csv import InputData [EOL] [EOL] [EOL] class TestInputCsv : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] , [string] ) ] , indirect = [ [string] , [string] ] , ) def test ( yaml_config_load , database_session_with_schema , path_file_csv_input , tmp_path ) : [EOL] [docstring] [EOL] account = Account . create_by_path_csv_input ( path_file_csv_input ) [EOL] csv_reader = Csv ( account . value . god_slayer_factory . create ( path_file_csv_input ) ) [EOL] input_data = InputData ( csv_reader , account ) [EOL] with ( tmp_path / [string] ) . open ( [string] , encoding = [string] , newline = [string] ) as file_zaim : [EOL] writer_zaim = csv . writer ( file_zaim ) [EOL] with pytest . raises ( InvalidInputCsvError ) as error : [EOL] input_data . export_as_zaim_csv ( writer_zaim ) [EOL] assert str ( error . value ) == ( [string] [string] ) [EOL] assert input_data . data_source . is_invalid [EOL] invalid_row_error = input_data . data_source . dictionary_invalid_record [ [number] ] [ [number] ] [EOL] assert isinstance ( invalid_row_error , InvalidRecordError ) [EOL] assert str ( invalid_row_error ) == [string] [EOL] assert not input_data . undefined_content_error_handler . is_presented [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 $pathlib.Path$ 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 $zaimcsvconverter.datasources.csv.Csv$ 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0 $typing.Any$ 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $zaimcsvconverter.input_csv.InputData$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] from fixturefilehandler import ResourceFileDeployer [EOL] from fixturefilehandler . factories import DeployerFactory [EOL] from fixturefilehandler . file_paths import YamlConfigFilePathBuilder [EOL] [EOL] from tests . test_zaim_csv_converter import create_relative_deploy_file_path [EOL] from tests . testlibraries . database_for_test import DatabaseForTest [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter import CONFIG , Session [EOL] from zaimcsvconverter . convert_table_importer import ConvertTableImporter [EOL] [EOL] [EOL] @ pytest . fixture def database_session ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session ( ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_with_schema ( request ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( getattr ( request , [string] , None ) ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_basic_store_waon ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_FAMILY_MART_KABUTOCHOEITAIDORI , InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_stores_gold_point_card_plus ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_TOKYO_ELECTRIC , InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP , InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_DOWNLOADS , InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AWS , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_stores_mufg ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_EMPTY , InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG , InstanceResource . FIXTURE_RECORD_STORE_MUFG_TOKYO_WATERWORKS , InstanceResource . FIXTURE_RECORD_STORE_MUFG_GOLD_POINT_MARKETING , InstanceResource . FIXTURE_RECORD_STORE_MUFG_OTHER_ACCOUNT , InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG_TRUST_AND_BANK , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_stores_sf_card_viewer ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_KOHRAKUEN_STATION , InstanceResource . FIXTURE_RECORD_STORE_PASMO_KITASENJU_STATION , InstanceResource . FIXTURE_RECORD_STORE_PASMO_AKIHABARA_STATION , InstanceResource . FIXTURE_RECORD_STORE_PASMO_EMPTY , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_stores_view_card ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_VIEW_CARD_VIEW_CARD ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_store_item ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_FAMILY_MART_KABUTOCHOEITAIDORI , InstanceResource . FIXTURE_RECORD_ITEM_AMAZON_ECHO_DOT , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_stores_item ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG , InstanceResource . FIXTURE_RECORD_STORE_PASMO_KOHRAKUEN_STATION , InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO , InstanceResource . FIXTURE_RECORD_ITEM_AMAZON_ECHO_DOT , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_item ( ) : [EOL] [docstring] [EOL] yield from DatabaseForTest . database_session_with_schema ( [ InstanceResource . FIXTURE_RECORD_ITEM_AMAZON_ECHO_DOT , InstanceResource . FIXTURE_RECORD_ITEM_AMAZON_AMAZON_POINT , ] ) [EOL] [EOL] [EOL] @ pytest . fixture def yaml_config_file ( resource_path_root ) : [EOL] [docstring] [EOL] yaml_config_file_path = YamlConfigFilePathBuilder ( path_target_directory = InstanceResource . PATH_PROJECT_HOME_DIRECTORY , path_test_directory = resource_path_root ) [EOL] [comment] [EOL] YamlConfigFileDeployer = DeployerFactory . create ( yaml_config_file_path ) [EOL] YamlConfigFileDeployer . setup ( ) [EOL] yield [EOL] YamlConfigFileDeployer . teardown ( ) [EOL] [EOL] [EOL] @ pytest . fixture def yaml_config_load ( request , resource_path , resource_path_root ) : [EOL] [docstring] [EOL] CONFIG . load ( get_config_file_path ( request , resource_path , resource_path_root ) ) [EOL] yield [EOL] [EOL] [EOL] def get_config_file_path ( request , resource_path , resource_path_root ) : [EOL] [docstring] [EOL] if hasattr ( request , [string] ) : [EOL] return resource_path . parent / request . param [EOL] return resource_path_root / [string] [EOL] [EOL] [EOL] @ pytest . fixture def path_file_csv_input ( request , resource_path ) : [EOL] [docstring] [EOL] yield get_input_csv_file_path ( request , resource_path ) [EOL] [EOL] [EOL] def get_input_csv_file_path ( request , resource_path ) : [EOL] [docstring] [EOL] suffix = getattr ( request , [string] , None ) [EOL] if suffix is None : [EOL] suffix = [string] [EOL] else : [EOL] suffix = f" [string] { suffix }" [EOL] file_name = f"{ request . function . __name__ }{ suffix } [string] " [EOL] return resource_path . parent / file_name [EOL] [EOL] [EOL] @ pytest . fixture def fixture_convert_table_importer ( resource_path ) : [EOL] [docstring] [EOL] return ConvertTableImporter ( resource_path ) [EOL] [EOL] [EOL] @ pytest . fixture def database_session_remove ( ) : [EOL] [docstring] [EOL] yield [EOL] [comment] [EOL] Session . remove ( ) [EOL] [EOL] [EOL] @ pytest . fixture def directory_csv_convert_table ( resource_path ) : [EOL] [docstring] [EOL] csv_convert_table_file_path = create_relative_deploy_file_path ( resource_path , [string] ) [EOL] ResourceFileDeployer . setup ( csv_convert_table_file_path ) [EOL] yield csv_convert_table_file_path [EOL] ResourceFileDeployer . teardown ( csv_convert_table_file_path ) [EOL] [EOL] [EOL] @ pytest . fixture def directory_csv_input ( request , resource_path ) : [EOL] [docstring] [EOL] csv_input_file_path = create_relative_deploy_file_path ( resource_path , [string] , f" [string] { request . node . name }" ) [EOL] ResourceFileDeployer . setup ( csv_input_file_path ) [EOL] yield csv_input_file_path [EOL] ResourceFileDeployer . teardown ( csv_input_file_path ) [EOL] [EOL] [EOL] @ pytest . fixture def directory_csv_output ( resource_path ) : [EOL] [docstring] [EOL] csv_output_file_path = create_relative_deploy_file_path ( resource_path , [string] ) [EOL] ResourceFileDeployer . setup ( csv_output_file_path ) [EOL] yield csv_output_file_path [EOL] ResourceFileDeployer . teardown ( csv_output_file_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . models import FileCsvConvertId , Store , StoreRowData [EOL] [EOL] [EOL] class TestModel : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_save_all ( database_session_with_schema ) : [EOL] [docstring] [EOL] stores = [ Store ( FileCsvConvertId . WAON , StoreRowData ( [string] , [string] ) ) ] [EOL] Store . save_all ( stores ) [EOL] stores = database_session_with_schema . query ( Store ) . filter ( Store . name == [string] ) . one ( ) [EOL] assert stores . name == [string] [EOL] assert stores . name_zaim == [string] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_MAKUHARISHINTOSHIN ] , Account . WAON , [string] , [string] , None , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_TOBU_CARD ] , Account . MUFG , [string] , None , [string] ) , ] , indirect = [ [string] ] , ) def test_try_to_find_success ( database_session_with_schema , account , store_name , expected_store_name_zaim , expected_transfer_target ) : [EOL] [docstring] [EOL] store = Store . try_to_find ( account . value . file_csv_convert . value . id , store_name ) [EOL] assert store . name == store_name [EOL] assert store . name_zaim == expected_store_name_zaim [EOL] assert store . transfer_target == expected_transfer_target [EOL] [EOL] @ staticmethod def test_try_to_find_failure ( database_session_with_schema ) : [EOL] [docstring] [EOL] with pytest . raises ( NoResultFound ) as error : [EOL] Store . try_to_find ( Account . WAON . value . file_csv_convert . value . id , [string] ) [EOL] assert str ( error ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] [docstring] [EOL] from enum import Enum [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] from zaimcsvconverter . account import Account [EOL] [EOL] [EOL] class FilePathInput ( Enum ) : [EOL] [docstring] [EOL] [EOL] WAON = Path ( [string] ) [EOL] GOLD_POINT_CARD_PLUS = Path ( [string] ) [EOL] GOLD_POINT_CARD_PLUS_201912 = Path ( [string] ) [EOL] MUFG = Path ( [string] ) [EOL] PASMO = Path ( [string] ) [EOL] AMAZON = Path ( [string] ) [EOL] AMAZON_201911 = Path ( [string] ) [EOL] VIEW_CARD = Path ( [string] ) [EOL] SUICA = Path ( [string] ) [EOL] [EOL] @ property def value ( self ) : [EOL] [docstring] [EOL] return super ( ) . value [EOL] [EOL] [EOL] class TestAccount : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_create_by_path_csv_input ( ) : [EOL] [docstring] [EOL] for account in Account : [EOL] assert isinstance ( Account . create_by_path_csv_input ( FilePathInput [ account . name ] . value ) , Account ) [EOL] [EOL] @ staticmethod def test_create_by_path_csv_input_error ( ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as error : [EOL] Account . create_by_path_csv_input ( Path ( [string] ) ) [EOL] assert str ( error . value ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from zaimcsvconverter . session_manager import SessionManager [EOL] [EOL] [EOL] class TestAccount : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_convert_string_to_int_or_none ( database_session_remove ) : [EOL] [docstring] [EOL] with SessionManager ( ) as session : [EOL] extracted_session = session [EOL] assert not extracted_session . is_active [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import List , Union [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from tests . testlibraries . row_data import ZaimRowData [EOL] from zaimcsvconverter . inputcsvformats . view_card import ViewCardRow , ViewCardRowFactory [EOL] from zaimcsvconverter . rowconverters . view_card import ViewCardZaimPaymentRowConverter , ViewCardZaimRowConverterFactory [EOL] from zaimcsvconverter . zaim_row import ZaimPaymentRow , ZaimRowFactory [EOL] [EOL] [EOL] class TestViewCardZaimPaymentRowConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_VIEW_CARD_ANNUAL_FEE , [string] , [string] , [number] , False ) ] , ) def test ( view_card_row_data , expected_date , expected_store_name_zaim , expected_use_amount , yaml_config_load , database_session_stores_view_card , ) : [EOL] [docstring] [EOL] row = ViewCardRow ( view_card_row_data ) [EOL] [comment] [EOL] zaim_row = ZaimRowFactory . create ( ViewCardZaimPaymentRowConverter ( row ) ) [EOL] assert isinstance ( zaim_row , ZaimPaymentRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == expected_date [EOL] assert zaim_row_data . store_name == expected_store_name_zaim [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == [string] [EOL] assert zaim_row_data . amount_payment == expected_use_amount [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912ZaimRowConverterFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_VIEW_CARD_VIEW_CARD ] , InstanceResource . ROW_DATA_VIEW_CARD_ANNUAL_FEE , ViewCardZaimPaymentRowConverter , ) , ] , indirect = [ [string] ] , ) def test_select_factory ( yaml_config_load , database_session_with_schema , input_row_data , expected ) : [EOL] [docstring] [EOL] input_row = ViewCardRowFactory ( ) . create ( input_row_data ) [EOL] assert isinstance ( ViewCardZaimRowConverterFactory ( ) . create ( input_row ) , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0
	0
from typing import List , Union [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from tests . testlibraries . row_data import ZaimRowData [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus_201912 import ( GoldPointCardPlus201912Row , GoldPointCardPlus201912RowFactory , ) [EOL] from zaimcsvconverter . rowconverters . gold_point_card_plus_201912 import ( GoldPointCardPlus201912ZaimPaymentRowConverter , GoldPointCardPlus201912ZaimRowConverterFactory , ) [EOL] from zaimcsvconverter . zaim_row import ZaimPaymentRow , ZaimRowFactory [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912ZaimPaymentRowConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_TOKYO_ELECTRIC , [string] , [string] , [number] , ) , ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AMAZON_DOWNLOADS , [string] , [string] , [number] , ) , ] , ) def test ( gold_point_card_plus_201912_row_data , expected_date , expected_store_name_zaim , expected_use_amount , yaml_config_load , database_session_stores_gold_point_card_plus , ) : [EOL] [docstring] [EOL] row = GoldPointCardPlus201912Row ( gold_point_card_plus_201912_row_data ) [EOL] [comment] [EOL] zaim_row = ZaimRowFactory . create ( GoldPointCardPlus201912ZaimPaymentRowConverter ( row ) ) [EOL] assert isinstance ( zaim_row , ZaimPaymentRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == expected_date [EOL] assert zaim_row_data . store_name == expected_store_name_zaim [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == [string] [EOL] assert zaim_row_data . amount_payment == expected_use_amount [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912ZaimRowConverterFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP ] , InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AMAZON_DOWNLOADS , GoldPointCardPlus201912ZaimPaymentRowConverter , ) , ] , indirect = [ [string] ] , ) def test_select_factory ( yaml_config_load , database_session_with_schema , input_row_data , expected ) : [EOL] [docstring] [EOL] input_row = GoldPointCardPlus201912RowFactory ( ) . create ( input_row_data ) [EOL] assert isinstance ( GoldPointCardPlus201912ZaimRowConverterFactory ( ) . create ( input_row ) , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import zaimcsvconverter [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . account import Account [EOL] from zaimcsvconverter . rowconverters . amazon import AmazonZaimPaymentRowConverter [EOL] from zaimcsvconverter . rowconverters . gold_point_card_plus import GoldPointCardPlusZaimPaymentRowConverter [EOL] from zaimcsvconverter . rowconverters . mufg import ( MufgIncomeZaimTransferRowConverter , MufgPaymentZaimTransferRowConverter , MufgTransferIncomeZaimTransferRowConverter , MufgTransferPaymentZaimTransferRowConverter , MufgZaimIncomeRowConverter , MufgZaimPaymentRowConverter , ) [EOL] from zaimcsvconverter . rowconverters . sf_card_viewer import ( SFCardViewerZaimPaymentOnSomewhereRowConverter , SFCardViewerZaimPaymentOnStationRowConverter , SFCardViewerZaimTransferRowConverter , ) [EOL] from zaimcsvconverter . rowconverters . waon import ( WaonZaimIncomeRowConverter , WaonZaimPaymentRowConverter , WaonZaimTransferRowConverter , ) [EOL] [EOL] [EOL] class TestZaimRowConverterFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_FAMILY_MART_KABUTOCHOEITAIDORI ] , Account . WAON , InstanceResource . ROW_DATA_WAON_PAYMENT_FAMILY_MART_KABUTOCHOEIDAIDORI , WaonZaimPaymentRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] , Account . WAON , InstanceResource . ROW_DATA_WAON_CHARGE_POINT_ITABASHIMAENOCHO , WaonZaimIncomeRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] , Account . WAON , InstanceResource . ROW_DATA_WAON_CHARGE_BANK_ACCOUNT_ITABASHIMAENOCHO , WaonZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] , Account . WAON , InstanceResource . ROW_DATA_WAON_AUTO_CHARGE_ITABASHIMAENOCHO , WaonZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP ] , Account . GOLD_POINT_CARD_PLUS , InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP , GoldPointCardPlusZaimPaymentRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_EMPTY ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_INCOME_CARD , MufgIncomeZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_OTHER_ACCOUNT ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_INCOME_NOT_CARD , MufgZaimIncomeRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_EMPTY ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_PAYMENT , MufgPaymentZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_NOT_OWN_ACCOUNT , MufgZaimIncomeRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG_TRUST_AND_BANK ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_OWN_ACCOUNT , MufgTransferIncomeZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_TOKYO_WATERWORKS ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_TOKYO_WATERWORKS , MufgZaimPaymentRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_GOLD_POINT_MARKETING ] , Account . MUFG , InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_GOLD_POINT_MARKETING , MufgTransferPaymentZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_KOHRAKUEN_STATION ] , Account . PASMO , InstanceResource . ROW_DATA_SF_CARD_VIEWER_TRANSPORTATION_KOHRAKUEN_STATION , SFCardViewerZaimPaymentOnStationRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_EMPTY ] , Account . PASMO , InstanceResource . ROW_DATA_SF_CARD_VIEWER_SALES_GOODS , SFCardViewerZaimPaymentOnSomewhereRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_EMPTY ] , Account . PASMO , InstanceResource . ROW_DATA_SF_CARD_VIEWER_AUTO_CHARGE_AKIHABARA_STATION , SFCardViewerZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_KITASENJU_STATION ] , Account . PASMO , InstanceResource . ROW_DATA_SF_CARD_VIEWER_EXIT_BY_WINDOW_KITASENJU_STATION , SFCardViewerZaimPaymentOnStationRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_PASMO_EMPTY ] , Account . PASMO , InstanceResource . ROW_DATA_SF_CARD_VIEWER_BUS_TRAM , SFCardViewerZaimPaymentOnSomewhereRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_ITEM_AMAZON_ECHO_DOT ] , Account . AMAZON , InstanceResource . ROW_DATA_AMAZON_ECHO_DOT , AmazonZaimPaymentRowConverter , ) , ] , indirect = [ [string] ] , ) def test_select_factory ( yaml_config_load , database_session_with_schema , account , input_row_data , expected ) : [EOL] [docstring] [EOL] input_row = account . create_input_row_instance ( input_row_data ) [EOL] factory_class = account . value . zaim_row_converter_selector . create ( input_row ) [EOL] [comment] [EOL] assert isinstance ( factory_class , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter[typing.Any]$ 0 $zaimcsvconverter.account.Account$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.InputRow[typing.Any]$ 0 0 0 0 0 0 0 $zaimcsvconverter.rowconverters.ZaimRowConverter[typing.Any]$ 0 0 0 0
from typing import List , Union [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from tests . testlibraries . row_data import ZaimRowData [EOL] from zaimcsvconverter . inputcsvformats . mufg import ( MufgIncomeFromOthersRow , MufgIncomeRow , MufgPaymentRow , MufgPaymentToSomeoneRow , MufgRowData , MufgRowFactory , ) [EOL] from zaimcsvconverter . rowconverters . mufg import ( MufgIncomeZaimTransferRowConverter , MufgPaymentZaimTransferRowConverter , MufgTransferIncomeZaimTransferRowConverter , MufgTransferPaymentZaimTransferRowConverter , MufgZaimIncomeRowConverter , MufgZaimPaymentRowConverter , MufgZaimRowConverterFactory , ) [EOL] from zaimcsvconverter . zaim_row import ZaimIncomeRow , ZaimPaymentRow , ZaimRowFactory , ZaimTransferRow [EOL] [EOL] [EOL] class TestMufgZaimIncomeRowConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( ( [string] [string] ) , [ ( InstanceResource . ROW_DATA_MUFG_INCOME_NOT_CARD , [string] , [string] , [string] , [string] , [number] ) , ( InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_NOT_OWN_ACCOUNT , [string] , [string] , None , [string] , [number] , ) , ] , ) def test ( mufg_row_data , expected_date , expected_store , config_transfer_account_name , expect_cash_flow_target , expected_amount , yaml_config_load , database_session_stores_mufg , ) : [EOL] [docstring] [EOL] mufg_row = MufgIncomeFromOthersRow ( mufg_row_data ) [EOL] [comment] [EOL] zaim_row = ZaimRowFactory . create ( MufgZaimIncomeRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimIncomeRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [comment] [EOL] assert zaim_row_data . date == expected_date [EOL] assert zaim_row_data . store_name == expected_store [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_target == expect_cash_flow_target [EOL] assert zaim_row_data . amount_income == expected_amount [EOL] [EOL] [EOL] class TestMufgZaimPaymentRowConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test ( yaml_config_load , database_session_stores_mufg ) : [EOL] [docstring] [EOL] expected_amount = [number] [EOL] config_account_name = [string] [EOL] store_name = [string] [EOL] mufg_row = MufgPaymentToSomeoneRow ( InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_TOKYO_WATERWORKS ) [EOL] [comment] [EOL] zaim_row = ZaimRowFactory . create ( MufgZaimPaymentRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimPaymentRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == [string] [EOL] assert zaim_row_data . store_name == store_name [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == config_account_name [EOL] assert zaim_row_data . note == [string] [EOL] assert zaim_row_data . amount_payment == expected_amount [EOL] [EOL] [EOL] class TestMufgZaimTransferRowConverter : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_MUFG_INCOME_CARD , [string] , [string] , [string] , [number] ) ] , ) def test_input_row ( mufg_row_data , expected_date , config_transfer_account_name , config_account_name , expected_amount , yaml_config_load , database_session_stores_mufg , ) : [EOL] [docstring] [EOL] mufg_row = MufgIncomeRow ( mufg_row_data ) [EOL] [comment] [EOL] zaim_row = ZaimRowFactory . create ( MufgIncomeZaimTransferRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimTransferRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == expected_date [EOL] assert zaim_row_data . store_name == [string] [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == config_transfer_account_name [EOL] assert zaim_row_data . cash_flow_target == config_account_name [EOL] assert zaim_row_data . amount_transfer == expected_amount [EOL] [EOL] [comment] [EOL] @ staticmethod def test_payment_row ( yaml_config_load , database_session_stores_mufg ) : [EOL] [docstring] [EOL] expected_amount = [number] [EOL] config_account_name = [string] [EOL] config_transfer_account_name = [string] [EOL] [comment] [EOL] mufg_row = MufgPaymentRow ( InstanceResource . ROW_DATA_MUFG_PAYMENT ) [EOL] zaim_row = ZaimRowFactory . create ( MufgPaymentZaimTransferRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimTransferRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == [string] [EOL] assert zaim_row_data . store_name == [string] [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == config_account_name [EOL] assert zaim_row_data . cash_flow_target == config_transfer_account_name [EOL] assert zaim_row_data . amount_transfer == expected_amount [EOL] [EOL] [comment] [EOL] @ staticmethod def test_transfer_income_row ( yaml_config_load , database_session_stores_mufg ) : [EOL] [docstring] [EOL] expected_amount = [number] [EOL] transfer_target = [string] [EOL] [comment] [EOL] mufg_row = MufgIncomeFromOthersRow ( InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_NOT_OWN_ACCOUNT ) [EOL] zaim_row = ZaimRowFactory . create ( MufgTransferIncomeZaimTransferRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimTransferRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == [string] [EOL] assert zaim_row_data . store_name == [string] [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source is None [EOL] assert zaim_row_data . cash_flow_target == transfer_target [EOL] assert zaim_row_data . amount_transfer == expected_amount [EOL] [EOL] [comment] [EOL] @ staticmethod def test_transfer_payment_row ( yaml_config_load , database_session_stores_mufg ) : [EOL] [docstring] [EOL] expected_amount = [number] [EOL] config_account_name = [string] [EOL] [comment] [EOL] mufg_row = MufgPaymentToSomeoneRow ( InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_TOKYO_WATERWORKS ) [EOL] zaim_row = ZaimRowFactory . create ( MufgTransferPaymentZaimTransferRowConverter ( mufg_row ) ) [EOL] assert isinstance ( zaim_row , ZaimTransferRow ) [EOL] list_zaim_row = zaim_row . convert_to_list ( ) [EOL] zaim_row_data = ZaimRowData ( * list_zaim_row ) [EOL] assert zaim_row_data . date == [string] [EOL] assert zaim_row_data . store_name == [string] [EOL] assert zaim_row_data . item_name == [string] [EOL] assert zaim_row_data . cash_flow_source == config_account_name [EOL] assert zaim_row_data . cash_flow_target is None [EOL] assert zaim_row_data . amount_transfer == expected_amount [EOL] [EOL] [EOL] class TestMufgZaimRowConverterFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_EMPTY ] , InstanceResource . ROW_DATA_MUFG_INCOME_CARD , MufgIncomeZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_OTHER_ACCOUNT ] , InstanceResource . ROW_DATA_MUFG_INCOME_NOT_CARD , MufgZaimIncomeRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_EMPTY ] , InstanceResource . ROW_DATA_MUFG_PAYMENT , MufgPaymentZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG ] , InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_NOT_OWN_ACCOUNT , MufgZaimIncomeRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_MUFG_TRUST_AND_BANK ] , InstanceResource . ROW_DATA_MUFG_TRANSFER_INCOME_OWN_ACCOUNT , MufgTransferIncomeZaimTransferRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_TOKYO_WATERWORKS ] , InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_TOKYO_WATERWORKS , MufgZaimPaymentRowConverter , ) , ( [ InstanceResource . FIXTURE_RECORD_STORE_MUFG_GOLD_POINT_MARKETING ] , InstanceResource . ROW_DATA_MUFG_TRANSFER_PAYMENT_GOLD_POINT_MARKETING , MufgTransferPaymentZaimTransferRowConverter , ) , ] , indirect = [ [string] ] , ) def test_success ( yaml_config_load , database_session_with_schema , input_row_data , expected ) : [EOL] [docstring] [EOL] input_row = MufgRowFactory ( ) . create ( input_row_data ) [EOL] assert isinstance ( MufgZaimRowConverterFactory ( ) . create ( input_row ) , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeFromOthersRow$ 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRowData$ 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeFromOthersRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentToSomeoneRow$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentToSomeoneRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeFromOthersRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgIncomeFromOthersRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentToSomeoneRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgPaymentToSomeoneRow$ 0 0 0 0 0 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 $zaimcsvconverter.zaim_row.ZaimRow$ 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 $typing.List[typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.str$ 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 0 0 0 $tests.testlibraries.row_data.ZaimRowData$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRowData$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRowData$ 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.mufg.MufgRow$ 0 0 0 0 0
	0
from typing import List , Any , Generator [EOL] import builtins [EOL] import godslayer [EOL] import typing [EOL] [docstring] [EOL] from typing import Any , Generator , List [EOL] [EOL] import pytest [EOL] from godslayer . exceptions import InvalidRecordError [EOL] [EOL] from zaimcsvconverter . datasources . data_source import DataSource [EOL] from zaimcsvconverter . errorreporters . input_csv_error_reporter import DataSourceErrorReporterFactory [EOL] [EOL] [EOL] class TestInputCsvErrorReporter : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_error ( ) : [EOL] [docstring] [EOL] [EOL] class Unexpected ( DataSource ) : [EOL] [docstring] [EOL] [EOL] def __iter__ ( self ) : [EOL] pass [EOL] [EOL] def mark_current_record_as_error ( self , list_error ) : [EOL] pass [EOL] [EOL] @ property def is_invalid ( self ) : [EOL] return False [EOL] [EOL] def raise_error_if_invalid ( self ) : [EOL] pass [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] DataSourceErrorReporterFactory . create ( Unexpected ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.List[typing.Any],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[godslayer.exceptions.InvalidRecordError]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import zaimcsvconverter [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus_201912 import ( GoldPointCardPlus201912Row , GoldPointCardPlus201912RowData , GoldPointCardPlus201912RowFactory , ) [EOL] from zaimcsvconverter . models import Store [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912RowData : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod [comment] [EOL] def test_init_and_property ( ) : [EOL] [docstring] [EOL] used_date = [string] [EOL] used_store = [string] [EOL] used_amount = [string] [EOL] number_of_division = [string] [EOL] current_time_of_division = [string] [EOL] payed_amount = [string] [EOL] others = [string] [EOL] gold_point_card_plus_row_data = GoldPointCardPlus201912RowData ( used_date , used_store , used_amount , number_of_division , current_time_of_division , payed_amount , others ) [EOL] assert gold_point_card_plus_row_data . date == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert gold_point_card_plus_row_data . store_name == used_store [EOL] assert gold_point_card_plus_row_data . payed_amount == [number] [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912Row : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_TOKYO_ELECTRIC , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , False , ) , ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AMAZON_DOWNLOADS , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , True , ) , ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AWS , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , False , ) , ] , ) def test_init ( yaml_config_load , database_session_stores_gold_point_card_plus , gold_point_card_plus_201912_row_data , expected_date , expected_store_name_zaim , expected_is_row_to_skip , ) : [EOL] [docstring] [EOL] row = GoldPointCardPlus201912Row ( gold_point_card_plus_201912_row_data ) [EOL] assert row . date == expected_date [EOL] assert isinstance ( row . store , Store ) [EOL] [comment] [EOL] assert row . store . name == gold_point_card_plus_201912_row_data . _used_store [EOL] assert row . store . name_zaim == expected_store_name_zaim [EOL] assert row . is_row_to_skip == expected_is_row_to_skip [EOL] [EOL] @ staticmethod def test_is_row_to_skip ( database_session_stores_gold_point_card_plus ) : [EOL] assert ( GoldPointCardPlus201912Row ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_YAHOO_JAPAN ) . is_row_to_skip is False ) [EOL] [EOL] [EOL] class TestGoldPointCardPlus201912RowFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_201912_TOKYO_ELECTRIC , GoldPointCardPlus201912Row ) ] , ) def test_create ( argument , expected , database_session_stores_gold_point_card_plus ) : [EOL] [docstring] [EOL] [comment] [EOL] gold_point_card_plus_row = GoldPointCardPlus201912RowFactory ( ) . create ( argument ) [EOL] assert isinstance ( gold_point_card_plus_row , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912RowData$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912RowData$ 0 0 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912RowData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.gold_point_card_plus_201912.GoldPointCardPlus201912Row$ 0 0 0 0
import zaimcsvconverter [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . inputcsvformats . view_card import ViewCardRow , ViewCardRowData , ViewCardRowFactory [EOL] from zaimcsvconverter . models import Store [EOL] [EOL] [EOL] class TestViewCardRowData : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod [comment] [EOL] def test_init_and_property ( ) : [EOL] [docstring] [EOL] used_date = [string] [EOL] used_place = [string] [EOL] used_amount = [string] [EOL] refund_amount = [string] [EOL] billing_amount = [string] [EOL] number_of_division = [string] [EOL] current_time_of_division = [string] [EOL] billing_amount_current_time = [string] [EOL] local_currency_amount = [string] [EOL] currency_abbreviation = [string] [EOL] exchange_rate = [string] [EOL] view_card_row_data = ViewCardRowData ( used_date , used_place , used_amount , refund_amount , billing_amount , number_of_division , current_time_of_division , billing_amount_current_time , local_currency_amount , currency_abbreviation , exchange_rate , ) [EOL] assert view_card_row_data . date == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert view_card_row_data . store_name == used_place [EOL] assert view_card_row_data . billing_amount_current_time == [number] [EOL] [EOL] [EOL] class TestViewCardRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_VIEW_CARD_ITABASHI_STATION_AUTO_CHARGE , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , None , True , ) , ( InstanceResource . ROW_DATA_VIEW_CARD_ANNUAL_FEE , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , False , ) , ] , ) def test_init ( yaml_config_load , database_session_stores_view_card , view_card_row_data , expected_date , expected_store_name_zaim , expected_is_row_to_skip , ) : [EOL] [docstring] [EOL] [comment] [EOL] row = ViewCardRow ( view_card_row_data ) [EOL] assert row . date == expected_date [EOL] [comment] [EOL] if expected_store_name_zaim is None : [EOL] with pytest . raises ( NoResultFound ) : [EOL] [comment] [EOL] store_name = row . store [comment] [EOL] else : [EOL] assert isinstance ( row . store , Store ) [EOL] [comment] [EOL] assert row . store . name == view_card_row_data . _used_place [EOL] assert row . store . name_zaim == expected_store_name_zaim [EOL] assert row . is_row_to_skip == expected_is_row_to_skip [EOL] [EOL] [EOL] class TestViewCardRowFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_VIEW_CARD_ANNUAL_FEE , ViewCardRow ) ] ) def test_create ( argument , expected , database_session_stores_view_card ) : [EOL] [docstring] [EOL] [comment] [EOL] view_card_row = ViewCardRowFactory ( ) . create ( argument ) [EOL] assert isinstance ( view_card_row , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 0 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.Store$ 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRow$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus import ( GoldPointCardPlusRow , GoldPointCardPlusRowData , GoldPointCardPlusRowFactory , ) [EOL] from zaimcsvconverter . models import Store [EOL] [EOL] [EOL] class TestGoldPointCardPlusRowData : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod [comment] [EOL] def test_init_and_property ( ) : [EOL] [docstring] [EOL] used_date = [string] [EOL] used_store = [string] [EOL] used_card = [string] [EOL] payment_kind = [string] [EOL] number_of_division = [string] [EOL] scheduled_payment_month = [string] [EOL] used_amount = [string] [EOL] unknown_1 = [string] [EOL] unknown_2 = [string] [EOL] unknown_3 = [string] [EOL] unknown_4 = [string] [EOL] unknown_6 = [string] [EOL] unknown_5 = [string] [EOL] gold_point_card_plus_row_data = GoldPointCardPlusRowData ( used_date , used_store , used_card , payment_kind , number_of_division , scheduled_payment_month , used_amount , unknown_1 , unknown_2 , unknown_3 , unknown_4 , unknown_5 , unknown_6 , ) [EOL] assert gold_point_card_plus_row_data . used_card == used_card [EOL] assert gold_point_card_plus_row_data . payment_kind == payment_kind [EOL] assert gold_point_card_plus_row_data . number_of_division == number_of_division [EOL] assert gold_point_card_plus_row_data . scheduled_payment_month == scheduled_payment_month [EOL] assert gold_point_card_plus_row_data . used_amount == [number] [EOL] assert gold_point_card_plus_row_data . unknown_1 == unknown_1 [EOL] assert gold_point_card_plus_row_data . unknown_2 == unknown_2 [EOL] assert gold_point_card_plus_row_data . unknown_3 == unknown_3 [EOL] assert gold_point_card_plus_row_data . unknown_4 == unknown_4 [EOL] assert gold_point_card_plus_row_data . unknown_5 == unknown_5 [EOL] assert gold_point_card_plus_row_data . unknown_6 == unknown_6 [EOL] assert gold_point_card_plus_row_data . date == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert gold_point_card_plus_row_data . store_name == used_store [EOL] [EOL] [EOL] class TestGoldPointCardPlusRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_TOKYO_ELECTRIC , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , False , ) , ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , True , ) , ] , ) def test_init ( yaml_config_load , database_session_stores_gold_point_card_plus , gold_point_card_plus_row_data , expected_date , expected_store_name_zaim , expected_is_row_to_skip , ) : [EOL] [docstring] [EOL] row = GoldPointCardPlusRow ( gold_point_card_plus_row_data ) [EOL] assert row . date == expected_date [EOL] assert isinstance ( row . store , Store ) [EOL] [comment] [EOL] assert row . store . name == gold_point_card_plus_row_data . _used_store [EOL] assert row . store . name_zaim == expected_store_name_zaim [EOL] assert row . is_row_to_skip == expected_is_row_to_skip [EOL] [EOL] [EOL] class TestGoldPointCardPlusRowFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_GOLD_POINT_CARD_PLUS_TOKYO_ELECTRIC , GoldPointCardPlusRow ) ] ) def test_create ( argument , expected , database_session_stores_gold_point_card_plus ) : [EOL] [docstring] [EOL] [comment] [EOL] gold_point_card_plus_row = GoldPointCardPlusRowFactory ( ) . create ( argument ) [EOL] assert isinstance ( gold_point_card_plus_row , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
import zaimcsvconverter [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . inputcsvformats . amazon_201911 import ( Amazon201911DiscountRow , Amazon201911PaymentRow , Amazon201911RowData , Amazon201911RowFactory , Amazon201911RowToSkip , Amazon201911ShippingHandlingRow , ) [EOL] from zaimcsvconverter . models import Item , Store [EOL] [EOL] [EOL] class TestAmazon201911RowData : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod [comment] [EOL] def test_init_and_property ( ) : [EOL] [docstring] [EOL] ordered_date = [string] [EOL] order_id = [string] [EOL] item_name = [string] [EOL] note = [string] [EOL] price = [string] [EOL] number = [string] [EOL] subtotal_price_item = [string] [EOL] total_order = [string] [EOL] destination = [string] [EOL] status = [string] [EOL] billing_address = [string] [EOL] billing_amount = [string] [EOL] credit_card_billing_date = [string] [EOL] credit_card_billing_amount = [string] [EOL] credit_card_identity = [string] [EOL] url_order_summary = [string] [EOL] url_receipt = ( [string] ) [EOL] url_item = [string] [EOL] row_data = Amazon201911RowData ( ordered_date , order_id , item_name , note , price , number , subtotal_price_item , total_order , destination , status , billing_address , billing_amount , credit_card_billing_date , credit_card_billing_amount , credit_card_identity , url_order_summary , url_receipt , url_item , ) [EOL] assert row_data . order_id == order_id [EOL] assert row_data . note == note [EOL] assert row_data . price == [number] [EOL] assert row_data . number == [number] [EOL] assert row_data . subtotal_price_item == [number] [EOL] assert row_data . destination == destination [EOL] assert row_data . status == status [EOL] assert row_data . billing_address == billing_address [EOL] assert row_data . billing_amount == billing_amount [EOL] assert row_data . credit_card_billing_date == credit_card_billing_date [EOL] assert row_data . credit_card_billing_amount == credit_card_billing_amount [EOL] assert row_data . credit_card_identity == credit_card_identity [EOL] assert row_data . url_order_summary == url_order_summary [EOL] assert row_data . url_receipt == url_receipt [EOL] assert row_data . url_item == url_item [EOL] assert row_data . date == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert row_data . total_order == [number] [EOL] assert row_data . item_name == item_name [EOL] [EOL] [EOL] class TestAmazon201911DiscountRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod def test_init ( yaml_config_load , database_session_item ) : [EOL] [docstring] [EOL] store_name = [string] [EOL] item_name = [string] [EOL] amazon_row = Amazon201911DiscountRow ( InstanceResource . ROW_DATA_AMAZON_201911_AMAZON_POINT ) [EOL] assert amazon_row . date == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert isinstance ( amazon_row . store , Store ) [EOL] assert amazon_row . store . name_zaim == store_name [EOL] assert isinstance ( amazon_row . item , Item ) [EOL] assert amazon_row . item . name == item_name [EOL] [EOL] @ staticmethod def test_total_order_fail ( ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as error : [EOL] [comment] [EOL] [comment] [EOL] Amazon201911DiscountRow ( InstanceResource . ROW_DATA_AMAZON_201911_HUMMING_FINE ) . total_order [EOL] assert str ( error . value ) == [string] [EOL] [EOL] [EOL] class TestAmazon201911ShippingHandlingRow : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_subtotal_price_item_fail ( ) : [EOL] with pytest . raises ( ValueError ) as error : [EOL] [comment] [EOL] [comment] [EOL] Amazon201911ShippingHandlingRow ( InstanceResource . ROW_DATA_AMAZON_201911_HUMMING_FINE ) . subtotal_price_item [EOL] assert str ( error . value ) == [string] [EOL] [EOL] [EOL] class TestAmazon201911PaymentRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod def test_init ( yaml_config_load , database_session_item ) : [EOL] [docstring] [EOL] store_name = [string] [EOL] item_name = [string] [EOL] amazon_row = Amazon201911PaymentRow ( InstanceResource . ROW_DATA_AMAZON_201911_ECHO_DOT ) [EOL] assert amazon_row . price == [number] [EOL] assert amazon_row . number == [number] [EOL] assert amazon_row . date == datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert isinstance ( amazon_row . store , Store ) [EOL] assert amazon_row . store . name_zaim == store_name [EOL] assert isinstance ( amazon_row . item , Item ) [EOL] assert amazon_row . item . name == item_name [EOL] [EOL] @ staticmethod def test_price_fail ( ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as error : [EOL] [comment] [EOL] [comment] [EOL] Amazon201911PaymentRow ( InstanceResource . ROW_DATA_AMAZON_201911_AMAZON_POINT ) . price [EOL] assert str ( error . value ) == [string] [EOL] [EOL] @ staticmethod def test_number_fail ( ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as error : [EOL] [comment] [EOL] [comment] [EOL] Amazon201911PaymentRow ( InstanceResource . ROW_DATA_AMAZON_201911_AMAZON_POINT ) . number [EOL] assert str ( error . value ) == [string] [EOL] [EOL] [EOL] class TestAmazon201911RowFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_AMAZON_201911_ECHO_DOT , Amazon201911PaymentRow ) , ( InstanceResource . ROW_DATA_AMAZON_201911_AMAZON_POINT , Amazon201911DiscountRow ) , ( InstanceResource . ROW_DATA_AMAZON_201911_SHIPPING_HANDLING , Amazon201911ShippingHandlingRow ) , ( InstanceResource . ROW_DATA_AMAZON_201911_MS_Learn_IN_MANGA , Amazon201911RowToSkip ) , ] , ) def test_create ( argument , expected , yaml_config_load , database_session_item ) : [EOL] [docstring] [EOL] [comment] [EOL] gold_point_card_plus_row = Amazon201911RowFactory ( ) . create ( argument ) [EOL] assert isinstance ( gold_point_card_plus_row , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911DiscountRow$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911PaymentRow$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911Row$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911Row$ 0 0 0 0
import zaimcsvconverter [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from tests . testlibraries . instance_resource import InstanceResource [EOL] from zaimcsvconverter . inputcsvformats . waon import WaonChargeRow , WaonRow , WaonRowData , WaonRowFactory [EOL] from zaimcsvconverter . models import Store [EOL] [EOL] [EOL] class TestWaonRowData : [EOL] [docstring] [EOL] [EOL] @ staticmethod def test_init_and_property ( ) : [EOL] [docstring] [EOL] date = [string] [EOL] used_store = [string] [EOL] used_amount = [string] [EOL] use_kind = [string] [EOL] charge_kind = [string] [EOL] waon_row_data = WaonRowData ( date , used_store , used_amount , use_kind , charge_kind ) [EOL] assert waon_row_data . date == datetime ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert waon_row_data . store_name == used_store [EOL] assert waon_row_data . used_amount == [number] [EOL] assert waon_row_data . use_kind == WaonRowData . UseKind . PAYMENT [EOL] assert waon_row_data . charge_kind == WaonRowData . ChargeKind . NULL [EOL] [EOL] @ staticmethod [comment] [EOL] def test_validate ( database_session_with_schema ) : [EOL] [docstring] [EOL] assert InstanceResource . ROW_DATA_WAON_UNSUPPORTED_USE_KIND . validate [EOL] assert ( str ( InstanceResource . ROW_DATA_WAON_UNSUPPORTED_USE_KIND . list_error [ [number] ] ) == [string] ) [EOL] [EOL] [EOL] class TestWaonRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_WAON_PAYMENT_FAMILY_MART_KABUTOCHOEIDAIDORI , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , [number] , ) , ( InstanceResource . ROW_DATA_WAON_PAYMENT_ITABASHIMAENOCHO , datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , [string] , [number] , ) , ] , ) def test_init_success ( yaml_config_load , database_session_basic_store_waon , waon_row_data , expected_date , expected_store_name_zaim , expected_amount , ) : [EOL] [docstring] [EOL] waon_row = WaonRow ( waon_row_data ) [EOL] assert waon_row . date == expected_date [EOL] assert isinstance ( waon_row . store , Store ) [EOL] assert waon_row . store . name_zaim == expected_store_name_zaim [EOL] [EOL] [comment] [EOL] @ staticmethod def test_is_row_to_skip ( database_session_basic_store_waon ) : [EOL] [docstring] [EOL] assert WaonRow ( WaonRowData ( [string] , [string] , [string] , [string] , [string] ) ) . is_row_to_skip [EOL] [EOL] [EOL] class TestWaonChargeRow : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ [ InstanceResource . FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO ] ] , indirect = [ [string] ] , ) def test_charge_kind_fail ( yaml_config_load , database_session_with_schema ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as error : [EOL] [comment] [EOL] [comment] [EOL] WaonChargeRow ( InstanceResource . ROW_DATA_WAON_DOWNLOAD_POINT_ITABASHIMAENOCHO ) . charge_kind [EOL] assert str ( error . value ) == [string] [EOL] [EOL] [EOL] class TestWaonRowFactory : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ staticmethod @ pytest . mark . parametrize ( [string] , [ ( InstanceResource . ROW_DATA_WAON_PAYMENT_FAMILY_MART_KABUTOCHOEIDAIDORI , True , False , False , False ) , ( InstanceResource . ROW_DATA_WAON_CHARGE_POINT_ITABASHIMAENOCHO , False , True , False , False ) , ( InstanceResource . ROW_DATA_WAON_AUTO_CHARGE_ITABASHIMAENOCHO , False , False , True , False ) , ( InstanceResource . ROW_DATA_WAON_DOWNLOAD_POINT_ITABASHIMAENOCHO , False , False , False , True ) , ] , ) def test_create ( database_session_basic_store_waon , argument , expected_is_payment , expected_is_charge , expected_is_auto_charge , expected_is_download_point , ) : [EOL] [docstring] [EOL] [comment] [EOL] waon_row = WaonRowFactory ( ) . create ( argument ) [EOL] assert isinstance ( waon_row , WaonRow ) [EOL] assert waon_row . is_payment == expected_is_payment [EOL] assert waon_row . is_charge == expected_is_charge [EOL] assert waon_row . is_auto_charge == expected_is_auto_charge [EOL] assert waon_row . is_download_point == expected_is_download_point [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 0 0 $builtins.str$ 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 $builtins.str$ 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRowData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.waon.WaonRow$ 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] from dataclasses import dataclass [EOL] from typing import List [EOL] [EOL] import factory [EOL] [EOL] from tests . testlibraries . database_engine_manager import DatabaseEngineManager [EOL] from zaimcsvconverter import Session [EOL] from zaimcsvconverter . models import Base , ConvertTableRowData , FileCsvConvertId , Item , Store [EOL] [EOL] [EOL] class StoreFactory ( factory . alchemy . SQLAlchemyModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [comment] [EOL] [docstring] [EOL] [EOL] model = Store [EOL] sqlalchemy_session = Session [EOL] [EOL] [EOL] class ItemFactory ( factory . alchemy . SQLAlchemyModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [comment] [EOL] [docstring] [EOL] [EOL] model = Item [EOL] sqlalchemy_session = Session [EOL] [EOL] [EOL] @ dataclass class FixtureRecord : [EOL] [docstring] [EOL] [EOL] file_csv_convert_id = ... [EOL] row_data = ... [EOL] [EOL] def define ( self ) : [EOL] [docstring] [EOL] if self . file_csv_convert_id is FileCsvConvertId . AMAZON : [EOL] ItemFactory ( file_csv_convert_id = self . file_csv_convert_id , row_data = self . row_data ) [EOL] elif self . file_csv_convert_id in ( FileCsvConvertId . WAON , FileCsvConvertId . GOLD_POINT_CARD_PLUS , FileCsvConvertId . MUFG , FileCsvConvertId . SF_CARD_VIEWER , FileCsvConvertId . VIEW_CARD , ) : [EOL] StoreFactory ( file_csv_convert_id = self . file_csv_convert_id , row_data = self . row_data ) [EOL] else : [EOL] raise ValueError ( f" [string] " f" [string] { self . file_csv_convert_id }" ) [EOL] [EOL] [EOL] class DatabaseForTest : [EOL] [docstring] [EOL] [EOL] @ classmethod def database_session ( cls ) : [EOL] [docstring] [EOL] with DatabaseEngineManager ( Session ) : [EOL] yield Session ( ) [EOL] [EOL] @ classmethod def database_session_with_schema ( cls , list_fixture_record = None ) : [EOL] [docstring] [EOL] with DatabaseEngineManager ( Session ) as engine : [EOL] session = Session ( ) [EOL] Base . metadata . create_all ( engine , checkfirst = False ) [EOL] if list_fixture_record is not None : [EOL] for fixture_record in list_fixture_record : [EOL] fixture_record . define ( ) [EOL] session . flush ( ) [EOL] yield session [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zaimcsvconverter.models.Item]$ 0 0 0 $typing.Type[tests.testlibraries.database_for_test.ItemFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zaimcsvconverter.models.Item]$ 0 0 0 $typing.Type[tests.testlibraries.database_for_test.ItemFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.models.FileCsvConvertId$ 0 0 0 $zaimcsvconverter.models.ConvertTableRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[FixtureRecord]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[FixtureRecord]$ 0 0 0 0 0 0 0 0 $typing.List[FixtureRecord]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0
import sqlalchemy [EOL] [docstring] [EOL] import contextlib [EOL] [EOL] import sqlalchemy [EOL] from sqlalchemy . orm import scoped_session [EOL] [EOL] [EOL] class DatabaseEngineManager ( contextlib . AbstractContextManager ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , argument_scoped_session ) : [EOL] self . scoped_session = argument_scoped_session [EOL] self . engine = sqlalchemy . create_engine ( [string] ) [EOL] [EOL] def __enter__ ( self ) : [EOL] self . scoped_session . configure ( bind = self . engine ) [EOL] return self . engine [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] [comment] [EOL] self . scoped_session . remove ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.scoped_session$ 0 0 0 0 0 0 0 $sqlalchemy.orm.scoped_session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] [docstring] [EOL] import os [EOL] from pathlib import Path [EOL] [EOL] from fixturefilehandler . file_paths import RelativeVacateFilePath [EOL] [EOL] [EOL] class CsvFilePathBuilder ( RelativeVacateFilePath ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , target = Path ( [string] ) , backup = None , base = Path ( os . getcwd ( ) ) , output = Path ( [string] ) , ) : [EOL] if backup is None : [EOL] backup = Path ( f"{ str ( target ) } [string] " ) [EOL] super ( ) . __init__ ( target , backup , base / output ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0
[docstring] [EOL] from dataclasses import dataclass [EOL] from typing import Optional , Union [EOL] [EOL] [EOL] @ dataclass class ZaimRowData : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] date = ... [EOL] method = ... [EOL] category_large = ... [EOL] category_small = ... [EOL] cash_flow_source = ... [EOL] cash_flow_target = ... [EOL] item_name = ... [EOL] note = ... [EOL] store_name = ... [EOL] currency = ... [EOL] amount_income = ... [EOL] amount_payment = ... [EOL] amount_transfer = ... [EOL] balance_adjustment = ... [EOL] amount_before_currency_conversion = ... [EOL] setting_aggregate = ... [EOL] [EOL] [EOL] @ dataclass class InvalidRowErrorRowData : [EOL] [docstring] [EOL] [EOL] input_file_name = ... [EOL] index = ... [EOL] error = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 $typing.Optional[typing.Union[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import tests [EOL] [docstring] [EOL] from pathlib import Path [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Specification : [EOL] [docstring] [EOL] [EOL] PATH_DIRECTORY_CSV_CONVERT_TABLE = Path ( __file__ ) . parent . parent . parent / [string] [EOL] PATH_DIRECTORY_CSV_INPUT = Path ( __file__ ) . parent . parent . parent / [string] [EOL] PATH_DIRECTORY_CSV_OUTPUT = Path ( __file__ ) . parent . parent . parent / [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class ErrorRowDataForTest : [EOL] [docstring] [EOL] [EOL] convert_table = ... [EOL] store_name = ... [EOL] item_name = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import zaimcsvconverter [EOL] import tests [EOL] [docstring] [EOL] from pathlib import Path [EOL] [EOL] from tests . testlibraries . database_for_test import FixtureRecord [EOL] from zaimcsvconverter . inputcsvformats . amazon import AmazonRowData [EOL] from zaimcsvconverter . inputcsvformats . amazon_201911 import Amazon201911RowData [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus import GoldPointCardPlusRowData [EOL] from zaimcsvconverter . inputcsvformats . gold_point_card_plus_201912 import GoldPointCardPlus201912RowData [EOL] from zaimcsvconverter . inputcsvformats . mufg import MufgRowData [EOL] from zaimcsvconverter . inputcsvformats . sf_card_viewer import SFCardViewerRowData [EOL] from zaimcsvconverter . inputcsvformats . view_card import ViewCardRowData [EOL] from zaimcsvconverter . inputcsvformats . waon import WaonRowData [EOL] from zaimcsvconverter . models import FileCsvConvertId , ItemRowData , StoreRowData [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class InstanceResource : [EOL] [docstring] [EOL] [EOL] PATH_PROJECT_HOME_DIRECTORY = Path ( __file__ ) . parent . parent . parent [EOL] ROW_DATA_WAON_PAYMENT_FAMILY_MART_KABUTOCHOEIDAIDORI = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_PAYMENT_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_UNSUPPORTED_CHARGE_KIND = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_CHARGE_POINT_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_CHARGE_BANK_ACCOUNT_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_CHARGE_CASH_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_AUTO_CHARGE_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_DOWNLOAD_POINT_ITABASHIMAENOCHO = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_WAON_UNSUPPORTED_USE_KIND = WaonRowData ( [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP = GoldPointCardPlusRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_TOKYO_ELECTRIC = GoldPointCardPlusRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AMAZON_DOWNLOADS = GoldPointCardPlus201912RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_201912_AWS = GoldPointCardPlus201912RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_201912_TOKYO_ELECTRIC = GoldPointCardPlus201912RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_GOLD_POINT_CARD_PLUS_201912_YAHOO_JAPAN = GoldPointCardPlus201912RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_INCOME_CARD = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_INCOME_NOT_CARD = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_PAYMENT = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_TRANSFER_INCOME_NOT_OWN_ACCOUNT = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_TRANSFER_INCOME_OWN_ACCOUNT = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_TRANSFER_PAYMENT_GOLD_POINT_MARKETING = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_TRANSFER_PAYMENT_TOKYO_WATERWORKS = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_MUFG_UNSUPPORTED_NOTE = MufgRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_TRANSPORTATION_KOHRAKUEN_STATION = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_SALES_GOODS = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_AUTO_CHARGE_AKIHABARA_STATION = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_EXIT_BY_WINDOW_KITASENJU_STATION = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_BUS_TRAM = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_SF_CARD_VIEWER_UNSUPPORTED_NOTE = SFCardViewerRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_AMAZON_ECHO_DOT = AmazonRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] , [string] , ) [EOL] ROW_DATA_AMAZON_201911_ECHO_DOT = Amazon201911RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] , [string] , ) [EOL] ROW_DATA_AMAZON_201911_AMAZON_POINT = Amazon201911RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] , [string] [string] , [string] , ) [EOL] ROW_DATA_AMAZON_201911_SHIPPING_HANDLING = Amazon201911RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] , [string] [string] , [string] , ) [EOL] ROW_DATA_AMAZON_201911_HUMMING_FINE = Amazon201911RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] ROW_DATA_AMAZON_201911_MS_Learn_IN_MANGA = Amazon201911RowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] ROW_DATA_VIEW_CARD_ITABASHI_STATION_AUTO_CHARGE = ViewCardRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] ROW_DATA_VIEW_CARD_ANNUAL_FEE = ViewCardRowData ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] FIXTURE_RECORD_STORE_WAON_MAKUHARISHINTOSHIN = FixtureRecord ( FileCsvConvertId . WAON , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_WAON_ITABASHIMAENOCHO = FixtureRecord ( FileCsvConvertId . WAON , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_WAON_FAMILY_MART_KABUTOCHOEITAIDORI = FixtureRecord ( FileCsvConvertId . WAON , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_TOKYO_ELECTRIC = FixtureRecord ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_CO_JP = FixtureRecord ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AMAZON_DOWNLOADS = FixtureRecord ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , StoreRowData ( [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_GOLD_POINT_CARD_PLUS_AWS = FixtureRecord ( FileCsvConvertId . GOLD_POINT_CARD_PLUS , StoreRowData ( [string] , [string] ) , ) [EOL] FIXTURE_RECORD_STORE_MUFG_TOBU_CARD = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_EMPTY = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_MUFG = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_MUFG_TRUST_AND_BANK = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_TOKYO_WATERWORKS = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_GOLD_POINT_MARKETING = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_MUFG_OTHER_ACCOUNT = FixtureRecord ( FileCsvConvertId . MUFG , StoreRowData ( [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_PASMO_KOHRAKUEN_STATION = FixtureRecord ( FileCsvConvertId . SF_CARD_VIEWER , StoreRowData ( [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_PASMO_KITASENJU_STATION = FixtureRecord ( FileCsvConvertId . SF_CARD_VIEWER , StoreRowData ( [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_PASMO_AKIHABARA_STATION = FixtureRecord ( FileCsvConvertId . SF_CARD_VIEWER , StoreRowData ( [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_PASMO_EMPTY = FixtureRecord ( FileCsvConvertId . SF_CARD_VIEWER , StoreRowData ( [string] , [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_ITEM_AMAZON_ECHO_DOT = FixtureRecord ( FileCsvConvertId . AMAZON , ItemRowData ( [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_ITEM_AMAZON_AMAZON_POINT = FixtureRecord ( FileCsvConvertId . AMAZON , ItemRowData ( [string] , [string] , [string] ) ) [EOL] FIXTURE_RECORD_STORE_VIEW_CARD_VIEW_CARD = FixtureRecord ( FileCsvConvertId . VIEW_CARD , StoreRowData ( [string] , [string] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.amazon_201911.Amazon201911RowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zaimcsvconverter.inputcsvformats.view_card.ViewCardRowData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.testlibraries.database_for_test.FixtureRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0