from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] def test_frame_exists ( hardware_VidCapture ) : [EOL] frame = hardware_VidCapture [EOL] h , w = frame . shape [ : [number] ] [EOL] [EOL] assert w > [number] [EOL] assert w > h [EOL] [EOL] [EOL] def test_frame_size ( hardware_VidCapture ) : [EOL] [docstring] [EOL] frame = hardware_VidCapture [EOL] h , w = frame . shape [ : [number] ] [EOL] assert h == [number] [EOL] assert w == [number] [EOL] [EOL] [EOL] def test_numpy_mask ( hardware_VidCapture ) : [EOL] [docstring] [EOL] frame = hardware_VidCapture [EOL] h , w = frame . shape [ : [number] ] [EOL] [EOL] mask = np . zeros_like ( frame ) [EOL] expectedH , expectedW = mask . shape [ : [number] ] [EOL] [EOL] assert expectedH == h [EOL] assert expectedW == w [EOL] [EOL] [EOL] def test_streamlink_exists ( streamlink_VidCapture ) : [EOL] frame = streamlink_VidCapture [EOL] h , w = frame . shape [ : [number] ] [EOL] [EOL] assert w > [number] [EOL] assert w > h [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import xcv . template_load [EOL] [EOL] def test_template_image_load ( ) : [EOL] assert Path ( [string] ) . is_dir ( ) [EOL] [EOL] def test_template_image_load_my_team_badge ( ) : [EOL] assert Path ( [string] ) . is_file ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import cv2 [EOL] import streamlink [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def hardware_VidCapture ( tmpdir_factory ) : [EOL] [comment] [EOL] cap = cv2 . VideoCapture ( [number] ) [EOL] ok , frame = cap . read ( ) [EOL] [EOL] [comment] [EOL] if ok : [EOL] [EOL] [comment] [EOL] yield frame [comment] [EOL] [comment] [EOL] else : [EOL] return [EOL] [EOL] [comment] [EOL] cap . release ( ) [EOL] cv2 . destroyAllWindows ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def streamlink_VidCapture ( tmpdir_factory ) : [EOL] url = [string] [EOL] quality = [string] [EOL] fps = [number] [EOL] [EOL] streams = streamlink . streams ( url ) [EOL] [EOL] if streams : [EOL] stream_url = streams [ quality ] . to_url ( ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] cap = cv2 . VideoCapture ( stream_url ) [EOL] [EOL] ok , frame = cap . read ( ) [EOL] [EOL] if ok : [EOL] [EOL] yield frame [EOL] [EOL] else : [EOL] return [EOL] [EOL] [EOL] [comment] [EOL] cap . release ( ) [EOL] cv2 . destroyAllWindows ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def test_emojis ( ) : [EOL] from xcv import emojis [EOL] import sys [EOL] [EOL] if sys . platform . startswith ( [string] ) : [EOL] assert emojis . STARS == [string] [EOL] assert emojis . ROBOT == [string] [EOL] assert emojis . BOO == [string] [EOL] assert emojis . HAZARD == [string] [EOL] assert emojis . JOYSTICK == [string] [EOL] assert emojis . XBOX_CONTROLLER == [string] [EOL] assert emojis . PYTHON == [string] [EOL] assert emojis . WORK == [string] [EOL] assert emojis . MAGIC == [string] [EOL] assert emojis . OPENCV == [string] [EOL] [EOL] else : [EOL] assert emojis . STARS == [string] [EOL] assert emojis . ROBOT == [string] [EOL] assert emojis . BOO == [string] [EOL] assert emojis . HAZARD == [string] [EOL] assert emojis . JOYSTICK == [string] [EOL] assert emojis . XBOX_CONTROLLER == [string] [EOL] assert emojis . PYTHON == [string] [EOL] assert emojis . WORK == [string] [EOL] assert emojis . MAGIC == [string] [EOL] assert emojis . OPENCV == [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def test_package_info ( ) : [EOL] import xcv [EOL] from xcv . version import XCV_VERSION [EOL] [EOL] assert XCV_VERSION == [string] [EOL] assert xcv . __email__ == [string] [EOL] assert xcv . __author__ == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] def test_imports ( ) : [EOL] try : [EOL] import cv2 [EOL] import numpy [EOL] import loguru [EOL] import mypy [EOL] import black [EOL] import serial [EOL] import click [EOL] import PyQt5 [EOL] import PySimpleGUIQt [EOL] import pytz [EOL] import streamlink [EOL] except : [EOL] raise [EOL] [EOL] assert True [EOL] [EOL] [EOL] def test_RaiseErrors ( ) : [EOL] with pytest . raises ( ImportError ) : [EOL] import cv [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from xcv . fps import fps [EOL] from time import sleep [EOL] [EOL] def test_fps_elapsed ( ) : [EOL] assert fps . elapsed is [number] [EOL] fps . start ( ) [EOL] sleep ( [number] ) [EOL] fps . update ( ) [EOL] sleep ( [number] ) [EOL] fps . update ( ) [EOL] fps . stop ( ) [EOL] assert fps . elapsed >= [number] [EOL] assert fps . fps > [number] [EOL] assert type ( fps . str_elapsed ) is str [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any [EOL] import typing [EOL] import pytest [EOL] from xcv . controller_button_press import press_button [EOL] [EOL] [EOL] def test_press_button_input_incorrect ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] bad_values = [ [string] , [number] , [number] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] for val in bad_values : [EOL] bd = press_button ( val ) [EOL] assert val not in bd [EOL] [EOL] [EOL] def test_press_button_input_lowercase ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ok_values = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] not_so_ok_values = [ [string] , [string] , [string] ] [EOL] expected_vals = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] for val in ok_values : [EOL] bd = press_button ( val ) [EOL] with pytest . raises ( KeyError ) : [EOL] x = bd [ val . lower ( ) ] [EOL] assert bd [ val . upper ( ) ] [EOL] [EOL] def test_press_button_input_multiple_values ( ) : [EOL] [comment] [EOL] assert True [EOL] [EOL] def test_press_button_input_list ( ) : [EOL] [comment] [EOL] assert True [EOL] [EOL] def test_press_button_input_keyword_args ( ) : [EOL] press_button ( A = [number] , j = [number] , b = [number] , x = [number] ) [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import click [EOL] [docstring] [EOL] [EOL] import pytest [EOL] [EOL] from click . testing import CliRunner [EOL] [EOL] import xcv [EOL] [EOL] from xcv import cli [EOL] [EOL] [EOL] @ pytest . fixture def response ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_content ( response ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_cli_no_options_passed ( ) : [EOL] no_options_passed_result = CliRunner ( ) . invoke ( xcv . cli . main_input ) [EOL] assert no_options_passed_result . exit_code == [number] [EOL] assert [string] in no_options_passed_result . output [EOL] [EOL] def test_cli_option_help ( ) : [EOL] help_result = CliRunner ( ) . invoke ( cli . main_input , [ [string] ] ) [EOL] assert help_result . exit_code == [number] [EOL] assert [string] in help_result . output [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import threading [EOL] import typing [EOL] from threading import Thread , Lock [EOL] import cv2 [EOL] from loguru import logger [EOL] [EOL] @ logger . catch class VideoStream : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , src = [number] , fps = [number] , use_streamlink_backup = True , streamlink_url = [string] , streamlink_quality = [string] ) : [EOL] [docstring] [EOL] logger . debug ( f" [string] { src }" ) [EOL] [EOL] self . stream = cv2 . VideoCapture ( src ) [EOL] ( _ok , self . frame ) = self . stream . read ( ) [EOL] [EOL] if not _ok : [EOL] logger . warning ( [string] ) [EOL] logger . debug ( [string] ) [EOL] [EOL] import streamlink [EOL] [EOL] streams = streamlink . streams ( streamlink_url ) [EOL] [EOL] if streams : [EOL] logger . debug ( f" [string] { streamlink_url } [string] { streams } [string] " ) [EOL] stream_url = streams [ streamlink_quality ] . to_url ( ) [EOL] else : [EOL] raise VideoStreamError ( [string] ) [EOL] [EOL] self . stream = cv2 . VideoCapture ( stream_url ) [EOL] [EOL] self . grabbed = None [EOL] self . thread = None [EOL] self . started = False [EOL] self . read_lock = Lock ( ) [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] self . stream . release ( ) [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] if self . started : [EOL] logger . warning ( [string] ) [EOL] return None [EOL] self . started = True [EOL] self . thread = Thread ( target = self . update , args = ( ) ) [EOL] self . thread . start ( ) [EOL] return self [EOL] [EOL] def update ( self ) : [EOL] [docstring] [EOL] while self . started : [EOL] ( grabbed , _frame ) = self . stream . read ( ) [EOL] self . read_lock . acquire ( ) [EOL] self . grabbed , self . frame = grabbed , _frame [EOL] self . read_lock . release ( ) [EOL] [EOL] def read ( self ) : [EOL] [docstring] [EOL] self . read_lock . acquire ( ) [EOL] _frame = self . frame . copy ( ) [EOL] self . read_lock . release ( ) [EOL] return _frame [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] self . started = False [EOL] self . thread . join ( ) [EOL] [EOL] [EOL] class VideoStreamError ( Exception ) : [EOL] pass [EOL] [EOL] if __name__ == [string] : [EOL] vs = VideoStream ( ) . start ( ) [EOL] while True : [EOL] frame = vs . read ( ) [EOL] cv2 . imshow ( [string] , frame ) [EOL] if cv2 . waitKey ( [number] ) == [number] : [EOL] break [EOL] [EOL] vs . stop ( ) [EOL] cv2 . destroyAllWindows ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $threading.Lock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
import xcv [EOL] from datetime import datetime , timedelta [EOL] import pytz [EOL] from loguru import logger [EOL] [EOL] [EOL] class Clock : [EOL] [docstring] [EOL] def __init__ ( self , timezone = [string] ) : [EOL] self . timezone = timezone [EOL] self . _start = self . now ( ) [EOL] [EOL] def now ( self ) : [EOL] return datetime . now ( tz = pytz . UTC ) . astimezone ( pytz . timezone ( self . timezone ) ) [EOL] [EOL] @ property def elapsed ( self ) : [EOL] return self . now ( ) - self . _start [EOL] [EOL] @ property def elapsed_no_microseconds ( self ) : [EOL] _e = self . elapsed [EOL] return _e - timedelta ( microseconds = _e . microseconds ) [EOL] [EOL] @ property def elapsed_seconds ( self ) : [EOL] _e = self . elapsed [EOL] return int ( _e . total_seconds ( ) ) [EOL] [EOL] def reset ( self ) : [EOL] logger . debug ( [string] ) [EOL] self . _start = self . now ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] from time import sleep [EOL] [EOL] c = Clock ( ) [EOL] sleep ( [number] ) [EOL] print ( f" [string] { c . elapsed }" ) [EOL] print ( f" [string] { c . elapsed_seconds }" ) [EOL] print ( f" [string] { c . elapsed_no_microseconds }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Type [EOL] import xcv [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] import sys [EOL] from pathlib import Path [EOL] from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class UserSettings : [EOL] path = Path ( __file__ ) . resolve ( ) . parent [EOL] timezone = [string] [EOL] countdown_timer = [number] [EOL] [comment] [EOL] [comment] [EOL] verbose = False [EOL] debug_serial = False [EOL] [comment] [EOL] [comment] [EOL] btn_utf_send_commands = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] class serial_api : [EOL] [docstring] [EOL] [EOL] BAUD = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] if sys . platform . startswith ( [string] ) : [EOL] self . _port = [string] [EOL] self . _ports = [ [string] , [string] , [string] , [string] ] [EOL] elif sys . platform . startswith ( [string] ) : [EOL] self . _port = [string] [EOL] self . _ports = [ [string] , [string] ] [EOL] else : [EOL] self . _port = input ( [string] ) [EOL] [EOL] @ property def port ( self ) : [EOL] return self . _port [EOL] [EOL] def port_next ( self ) : [EOL] try : [EOL] self . _port = self . _ports . pop ( ) [EOL] except IndexError : [EOL] logger . warning ( ( [string] ) ) [EOL] return self . _port [EOL] [EOL] def port_add ( self , ser ) : [EOL] self . _ports . append ( ser ) [EOL] [EOL] def port_set ( self , ser ) : [EOL] self . _port = ser [EOL] [EOL] def print_ports ( self ) : [EOL] [ print ( _sp ) for _sp in self . _ports ] [EOL] [EOL] def send ( self , ** kwargs ) : [EOL] [docstring] [EOL] print ( kwargs ) [EOL] [EOL] def _check_pending_send ( self , buttons ) : [EOL] pass [EOL] [EOL] def _send_pending_send ( self , checkedbuttons ) : [EOL] pass [EOL] [EOL] [EOL] serial_session = serial_api ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] from loguru import logger [EOL] [EOL] [comment] [EOL] [EOL] ser = serial_api ( ) [EOL] [EOL] ser . send ( key1 = [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int
from typing import Dict [EOL] import xcv [EOL] import typing [EOL] from xcv . clock import Clock [EOL] from loguru import logger [EOL] import cv2 [EOL] from datetime import datetime , timedelta [EOL] [EOL] [comment] [EOL] class GameSession : [EOL] def __init__ ( self ) : [EOL] self . game_session_clock = Clock ( ) [EOL] [EOL] self . menu_states = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] def check_video_source_size ( self , cap ) : [EOL] [EOL] _width = int ( cap . get ( cv2 . CAP_PROP_FRAME_WIDTH ) ) [EOL] _height = int ( cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT ) ) [EOL] [EOL] if not cap . isOpened ( ) : [EOL] logger . warning ( [string] ) [EOL] elif _width >= [number] or _height >= [number] : [EOL] logger . warning ( f" [string] { _width } [string] { _height }" ) [EOL] else : [EOL] logger . debug ( f" [string] { _width } [string] { _height }" ) [EOL] [EOL] def state ( self ) : [EOL] if True : [EOL] return [EOL] else : [EOL] return [EOL] [EOL] def clock ( self , print_it = False , as_string = False ) : [EOL] if print_it : [EOL] print ( f" [string] { self . game_session_clock . elapsed_no_microseconds ( ) }" ) [EOL] else : [EOL] return self . game_session_clock . elapsed_no_microseconds ( ) [EOL] [EOL] def reset_clock ( self ) : [EOL] self . game_session_clock . reset ( ) [EOL] [EOL] [EOL] [comment] [EOL] class FifaSession : [EOL] def __init__ ( self , game_session ) : [EOL] [comment] [EOL] self . fifa_session_clock = None [EOL] self . clock_is_started = False [EOL] [EOL] self . in_game = False [EOL] self . in_menu = False [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] self . fut_menu_states = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] self . menu_states = { [string] : self . fut_menu_states } [EOL] [EOL] def set_in_game ( self ) : [EOL] self . in_game = True [EOL] self . in_menu = False [EOL] self . start_clock ( ) [EOL] [EOL] def set_in_menu ( self ) : [EOL] self . in_game = False [EOL] self . in_menu = True [EOL] self . start_clock ( ) [EOL] [EOL] def display_status ( self ) : [EOL] if self . in_game : [EOL] return [string] [EOL] elif self . in_menu : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def state ( self ) : [EOL] if True : [EOL] return [EOL] else : [EOL] return [EOL] [EOL] def start_clock ( self ) : [EOL] if not self . clock_is_started : [EOL] if self . in_game or self . in_menu : [EOL] self . fifa_session_clock = Clock ( ) [EOL] self . clock_is_started = True [EOL] [EOL] def clock ( self , print_it = False ) : [EOL] if print_it : [EOL] print ( f" [string] { self . fifa_session_clock . elapsed_no_microseconds ( ) }" ) [EOL] else : [EOL] if self . fifa_session_clock is not None : [EOL] return self . fifa_session_clock . elapsed_no_microseconds ( ) [EOL] [EOL] def reset_clock ( self ) : [EOL] self . fifa_session_clock . reset ( ) [EOL] [EOL] [EOL] [comment] [EOL] class FifaMatch : [EOL] def __init__ ( self , fifa_session ) : [EOL] self . fifa_match_clock = Clock ( ) [EOL] self . fifa_session = fifa_session [EOL] [EOL] self . is_alive = False [EOL] [EOL] self . home = False [EOL] self . away = False [EOL] self . side_left = False [EOL] self . side_right = False [EOL] self . known_state = False [EOL] [EOL] [comment] [EOL] self . home_score = [number] [EOL] self . away_score = [number] [EOL] self . game_state = [number] [EOL] [EOL] @ classmethod def make_fifa_match ( cls ) : [EOL] FifaMatch ( ) [EOL] [EOL] def state ( self ) : [EOL] if self . known_state : [EOL] return self . known_state [EOL] else : [EOL] return [EOL] [EOL] def check_loop ( self ) : [EOL] return [EOL] [EOL] def show_screen_side ( self ) : [EOL] if self . side_left : [EOL] return [string] [EOL] elif self . side_right : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def set_side_left ( self ) : [EOL] self . fifa_session . set_in_game ( ) [EOL] self . side_left = True [EOL] self . side_right = False [EOL] [EOL] def set_side_right ( self ) : [EOL] self . fifa_session . set_in_game ( ) [EOL] self . side_left = False [EOL] self . side_right = True [EOL] [EOL] def show_home_or_away ( self ) : [EOL] if self . home : [EOL] return [string] [EOL] elif self . away : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def set_away_team ( self ) : [EOL] self . home = False [EOL] self . away = True [EOL] [EOL] def set_home_team ( self ) : [EOL] self . home = True [EOL] self . away = False [EOL] [EOL] def set_in_squad_menu ( self ) : [EOL] self . fifa_session . set_in_menu ( ) [EOL] [EOL] def set_found_zero ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def clock ( self , print_it = False ) : [EOL] if print_it : [EOL] print ( f" [string] { self . fifa_match_clock . elapsed_no_microseconds ( ) }" ) [EOL] else : [EOL] return self . fifa_match_clock . elapsed_no_microseconds ( ) [EOL] [EOL] def reset_clock ( self ) : [EOL] self . fifa_match_clock . reset ( ) [EOL] [EOL] def detected_clock ( self ) : [EOL] return [EOL] [EOL] def last_detected_clock ( self ) : [EOL] return [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class FifaPlayer : [EOL] def __init__ ( self ) : [EOL] self . controled_player_possession_states = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] self . controlled_player_off_ball_states = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] self . controlled_player_state = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class Scoreboard : [EOL] home_score = [number] [EOL] away_score = [number] [EOL] [EOL] def __init__ ( self , fifa_match ) : [EOL] self . fifa_match = fifa_match [EOL] [EOL] def find_score ( self ) : [EOL] return [EOL] [EOL] def last_known_score ( self ) : [EOL] return [EOL] [EOL] def find_clock ( self ) : [EOL] return [EOL] [EOL] def last_known_clock ( self ) : [EOL] return [EOL] [EOL] def home_away ( self ) : [EOL] return [EOL] [EOL] def found_digit ( self , found ) : [EOL] num , pos = found [EOL] print ( f" [string] { num } [string] { pos }" ) [EOL] [EOL] [comment] [EOL] class WinLossRecord : [EOL] def __init__ ( self , game_session ) : [EOL] self . _wins = [number] [EOL] self . _losses = [number] [EOL] self . _ties = [number] [EOL] [EOL] def add_win ( self ) : [EOL] _wins += [number] [EOL] [EOL] def add_loss ( self ) : [EOL] _losses += [number] [EOL] [EOL] def add_ties ( self ) : [EOL] _ties += [number] [EOL] [EOL] def as_string ( self ) : [EOL] return f"{ self . _wins } [string] { self . _losses } [string] { self . _ties }" [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] from time import sleep [EOL] [EOL] game_session = GameSession ( ) [EOL] fifa_session = FifaSession ( game_session ) [EOL] fifa_match = FifaMatch ( game_session , fifa_session ) [EOL] sleep ( [number] ) [EOL] [EOL] fifa_session . clock ( print_it = True ) [EOL] fifa_match . clock ( print_it = True ) [EOL] sleep ( [number] ) [EOL] fifa_match . clock ( print_it = True ) [EOL] sleep ( [number] ) [EOL] fifa_match . reset_clock ( ) [EOL] print ( fifa_match . clock ( ) ) [EOL] [EOL] [comment] [EOL] record = WinLossRecord ( game_session ) [EOL] print ( record . as_string ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.clock.Clock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.FifaSession$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.FifaSession$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.FifaSession$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.GameSession$ 0 0 0 0 0 $xcv.stats.FifaSession$ 0 0 0 $xcv.stats.GameSession$ 0 0 $xcv.stats.FifaMatch$ 0 0 0 $xcv.stats.GameSession$ 0 $xcv.stats.FifaSession$ 0 0 0 0 0 0 0 0 $xcv.stats.FifaSession$ 0 0 0 0 0 0 0 0 $xcv.stats.FifaMatch$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.FifaMatch$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.stats.FifaMatch$ 0 0 0 0 0 0 0 $xcv.stats.FifaMatch$ 0 0 0 0 0 0 0 0 0 $xcv.stats.WinLossRecord$ 0 0 0 $xcv.stats.GameSession$ 0 0 0 0 $xcv.stats.WinLossRecord$ 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] from time import sleep [EOL] import click [EOL] from loguru import logger [EOL] [EOL] import xcv . settings [EOL] from xcv . emojis import ( HAZARD , STARS , ROBOT , BOO , HAZARD , JOYSTICK , XBOX_CONTROLLER , PYTHON , WORK , MAGIC , OPENCV , ) [EOL] [EOL] [EOL] [comment] [EOL] _btnList = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , [string] , is_flag = True , help = [string] ) @ click . option ( [string] , default = xcv . settings . serial_api . port , help = f" [string] " , ) @ click . option ( [string] , type = click . Choice ( _btnList ) , help = [string] , ) @ click . option ( [string] , is_flag = True , help = [string] ) @ click . option ( [string] , is_flag = True , help = [string] ) def main_input ( verbose = False , port = None , autopilot = False , push = None , count = None , debug = None , gui = None , ) : [EOL] [docstring] [EOL] [EOL] if verbose : [EOL] print ( f" [string] { JOYSTICK } [string] { OPENCV } [string] { PYTHON } [string] { WORK } [string] { MAGIC } [string] { ROBOT } [string] { XBOX_CONTROLLER } [string] " ) [EOL] click . echo ( f" [string] { port }" ) [EOL] click . echo ( f"{ ROBOT } [string] { BOO } [string] " ) [EOL] [EOL] elif debug : [EOL] from tools import list_usb_ports [EOL] [EOL] list_usb_ports . list_usb_ports ( ) [EOL] [EOL] elif push : [EOL] import xcv . xcontroller [EOL] [EOL] xcv . xcontroller . single_btn_press ( push ) [EOL] [EOL] elif gui : [EOL] from xcv . gui import GUI [EOL] [EOL] GUI ( ) [EOL] [EOL] else : [EOL] click . echo ( f"{ HAZARD } [string] " ) [EOL] [EOL] return [number] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main_input ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL] __version__ = [string] [EOL] [EOL] import sys [EOL] [EOL] if sys . version_info >= ( [number] , [number] , [number] ) : [EOL] pass [EOL] [EOL] else : [EOL] sys . exit ( [string] ) [EOL]	0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any [EOL] import xcv [EOL] import typing [EOL] import pickle [EOL] [EOL] [comment] [EOL] import serial [EOL] [EOL] [EOL] [comment] [EOL] from colorama import Fore , Style [EOL] [EOL] from loguru import logger [EOL] [EOL] from xcv . emojis import HAZARD [EOL] [EOL] import sys [EOL] [EOL] class XcvError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class serial_api : [EOL] [docstring] [EOL] [EOL] BAUD = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] [EOL] [EOL] if sys . platform . startswith ( [string] ) : [EOL] self . _port = [string] [EOL] self . _ports = [ [string] , [string] , [string] , [string] ] [EOL] elif sys . platform . startswith ( [string] ) : [EOL] self . _port = [string] [EOL] self . _ports = [ [string] , [string] ] [EOL] else : [EOL] self . _port = input ( [string] ) [EOL] [EOL] @ property def port ( self ) : [EOL] return self . _port [EOL] [EOL] def port_next ( self ) : [EOL] try : [EOL] self . _port = self . _ports . pop ( ) [EOL] except IndexError : [EOL] logger . warning ( ( [string] ) ) [EOL] return self . _port [EOL] [EOL] def port_add ( self , ser ) : [EOL] self . _ports . append ( ser ) [EOL] [EOL] def port_set ( self , ser ) : [EOL] self . _port = ser [EOL] [EOL] def print_ports ( self ) : [EOL] [ print ( _sp ) for _sp in self . _ports ] [EOL] [EOL] def send ( self , ** kwargs ) : [EOL] [docstring] [EOL] print ( kwargs ) [EOL] [EOL] def _check_pending_send ( self , buttons ) : [EOL] pass [EOL] [EOL] def _send_pending_send ( self , checkedbuttons ) : [EOL] pass [EOL] [EOL] def serial_send ( self , btns_sending ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] serial_error = ( Fore . RED + f" [string] { HAZARD }" + Fore . WHITE + [string] + Fore . YELLOW + f" [string] " + Fore . CYAN + f"{ str ( self . _port ) }" + Style . RESET_ALL ) [EOL] [EOL] try : [EOL] [comment] [EOL] with serial . Serial ( self . _port , self . BAUD ) as ser : [EOL] pickle . dump ( btns_sending . make_string ( ) , ser ) [EOL] except serial . serialutil . SerialException as e : [EOL] raise XcvError ( serial_error ) [EOL] except Exception as e : [EOL] raise XcvError ( f" [string] { HAZARD } [string] { str ( e ) }" ) [EOL] [EOL] [comment] [EOL] [EOL] serial_session = serial_api ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.serial_sender.serial_api$ 0 0 0 0 0
import xcv [EOL] import numpy as np [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ROI : [EOL] [EOL] def __init__ ( self , frame_w = [number] , frame_h = [number] ) : [EOL] self . frame_w = frame_w [EOL] self . frame_h = frame_h [EOL] [comment] [EOL] self . _letterbox ( ) [EOL] self . _scoreboard_clock ( ) [EOL] self . _scoreboard_score ( ) [EOL] [EOL] def make ( self , x1 , y1 , x2 , y2 ) : [EOL] return np . array ( [ [ ( x1 , y1 ) , ( x2 , y1 ) , ( x2 , y2 ) , ( x1 , y2 ) ] ] ) [EOL] [EOL] def _letterbox ( self , is_letterboxed = True ) : [EOL] if is_letterboxed : [EOL] self . without_letterbox = self . make ( [number] , [number] , self . frame_w , [number] ) [EOL] [EOL] def _scoreboard_score ( self ) : [EOL] _score_y1 = [number] [EOL] _score_y2 = [number] [EOL] self . score_home = self . make ( [number] , _score_y1 , [number] , _score_y2 ) [EOL] self . score_away = self . make ( [number] , _score_y1 , [number] , _score_y2 ) [EOL] [EOL] def _scoreboard_clock ( self ) : [EOL] _clock_y1 = [number] [EOL] _clock_y2 = [number] [EOL] self . clock_digit_hour = self . make ( [number] , _clock_y1 , [number] , _clock_y2 ) [EOL] self . clock_mins_tens = self . make ( [number] , _clock_y1 , [number] , _clock_y2 ) [EOL] self . clock_mins_ones = self . make ( [number] , _clock_y1 , [number] , _clock_y2 ) [EOL] [EOL] def show_all ( self ) : [EOL] return [EOL] [EOL] def _WIP_stuff ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return [EOL] [EOL] [EOL] roi = ROI ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.roi.ROI$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import cv2 [EOL] [comment] [EOL] from loguru import logger [EOL] [comment] [EOL] from xcv . stats import GameSession , FifaSession , FifaMatch [EOL] from xcv . video_stream import VideoStream [EOL] from xcv . roi import ROI [EOL] [EOL] class TemplateMatcher : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , video_stream ) : [EOL] self . threshold = [number] [EOL] self . state = [number] [EOL] self . template = None [EOL] self . ROI = None [EOL] self . if_is_found = None [EOL] self . video_stream = video_stream [EOL] self . frame = None [EOL] [EOL] [comment] [EOL] self . game_clock_hour_ones = None [EOL] self . game_clock_mins_tens = None [EOL] self . game_clock_mins_ones = None [EOL] self . game_clock_secs_tens = None [EOL] self . game_clock_secs_ones = None [EOL] [EOL] def __repr__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . ROI } [string] { self . threshold } [string] { self . state } [string] { self . func } [string] " [EOL] [EOL] def __str__ ( self ) : [EOL] return f""" [string] { self . threshold } [string] { self . state } [string] { self . func } [string] """ [EOL] [EOL] def useless_function ( self , num ) : [EOL] self . game_clock_secs_ones = num [EOL] print ( f" [string] { num }" ) [EOL] [EOL] def find_all ( self , fifa_match , scoreboard ) : [EOL] self . frame = self . video_stream . read ( ) [EOL] testing_it_out_frame = self . frame . copy ( ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def find_pending_game ( self , fifa_session , fifa_match ) : [EOL] self . find ( cv2 . imread ( [string] , [number] ) , self . ROI_SquadManage , fifa_match . set_in_squad_menu ) [EOL] [EOL] def find_scoreboard_team_badge ( self , fifa_session , fifa_match ) : [EOL] self . find ( cv2 . imread ( [string] , [number] ) , self . ROI_TeamBadgeLeft , fifa_match . set_side_left ) [EOL] self . find ( cv2 . imread ( [string] , [number] ) , self . ROI_TeamBadgeRight , fifa_match . set_side_right ) [EOL] [EOL] def find ( self , template , roi , if_is_found = None , value_if_found = None ) : [EOL] [EOL] if template is not None : [EOL] [comment] [EOL] _tplateH , _tplateW = template . shape [ : [number] ] [EOL] else : [EOL] logger . debug ( [string] ) [EOL] return self . frame [EOL] [EOL] if self . frame is not None : [EOL] _find_frame = cv2 . cvtColor ( self . frame , cv2 . COLOR_BGR2GRAY ) [EOL] [EOL] [comment] [EOL] _mask = np . zeros_like ( _find_frame ) [EOL] [EOL] [comment] [EOL] cv2 . fillPoly ( _mask , roi , [number] ) [EOL] [EOL] [comment] [EOL] masked_image = cv2 . bitwise_and ( _find_frame , _mask ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] res = cv2 . matchTemplate ( masked_image , template , cv2 . TM_CCOEFF_NORMED ) [EOL] [EOL] [comment] [EOL] loc = np . where ( res >= self . threshold ) [EOL] [EOL] for pt in zip ( * loc [ : : - [number] ] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if if_is_found : [EOL] if value_if_found is not None : [EOL] if_is_found ( value_if_found ) [EOL] else : [EOL] if_is_found ( ) [EOL] [EOL] return _find_frame [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] [EOL] import cli [EOL] import sys [EOL] [EOL] sys . exit ( cli . main_input ( ) ) [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
from typing import Dict , Any [EOL] import typing [EOL] from loguru import logger [EOL] import time [EOL] from functools import wraps [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class button_timer : [EOL] def __init__ ( self , original_function ) : [EOL] self . original_function = original_function [EOL] self . t1 = time . time ( ) [EOL] [EOL] def __call__ ( self , * args , ** kwargs ) : [EOL] logger . debug ( f" [string] { self . t1 - time . time ( ) }" ) [EOL] logger . debug ( [string] . format ( self . original_function . __name__ ) ) [EOL] return self . original_function ( * args , ** kwargs ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def controller_pots ( * args ) : [EOL] [EOL] return [EOL] [EOL] @ button_timer def press_button ( * args , ** kwargs ) : [EOL] logger . info ( [string] . format ( args ) ) [EOL] _parsed = parse_button_press_input ( * args , ** kwargs ) [EOL] time . sleep ( [number] ) [EOL] return _parsed [EOL] [EOL] def parse_button_press_input ( * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] button_dict = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] for kwarg in kwargs : [EOL] kwarg = kwarg . upper ( ) [EOL] if kwarg in button_dict . keys ( ) : [EOL] button_dict [ kwarg ] = [number] [EOL] [EOL] for arg in args : [EOL] arg = str ( arg ) . upper ( ) [EOL] [EOL] if arg . startswith ( [string] ) : [EOL] button_dict [ [string] ] = [number] [EOL] logger . info ( [string] ) [EOL] elif arg . startswith ( [string] ) : [EOL] button_dict [ [string] ] = [number] [EOL] logger . info ( [string] ) [EOL] elif arg . startswith ( [string] ) : [EOL] button_dict [ [string] ] = [number] [EOL] logger . info ( [string] ) [EOL] elif arg in button_dict : [EOL] button_dict [ arg ] = [number] [EOL] logger . info ( f" [string] { arg }" ) [EOL] else : [EOL] logger . warning ( [string] ) [EOL] [EOL] logger . debug ( f" [string] { button_dict }" ) [EOL] return button_dict [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] press_button ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] import cv2 [EOL] [EOL] path = Path ( [string] ) [EOL] [EOL] my_team_badge_path = path / [string] [EOL] [EOL] print ( path . exists ( ) ) [EOL] print ( my_team_badge_path . is_file ( ) ) [EOL] [EOL] my_team_badge = cv2 . imread ( my_team_badge_path ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0
[EOL] from typing import Dict [EOL] import typing [EOL] class MenuManager : [EOL] [EOL] _detected_menu = [string] [EOL] [EOL] def __init__ ( self ) : [EOL] self . menu_states = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : self . fut_menu_states , } [EOL] [EOL] self . fut_menu_states = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] @ classmethod def menu_state ( cls ) : [EOL] return cls . _detected_menu [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] def countdown ( t ) : [EOL] [docstring] [EOL] [EOL] import time [EOL] [EOL] while t : [EOL] mins , secs = divmod ( t , [number] ) [EOL] timer = [string] . format ( mins , secs ) [EOL] print ( timer , end = [string] ) [EOL] time . sleep ( [number] ) [EOL] t -= [number] [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] t = input ( [string] ) [EOL] countdown ( int ( t ) ) [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List [EOL] import io [EOL] import typing [EOL] import PySimpleGUIQt as sg [EOL] import os [EOL] import base64 [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def main ( ) : [EOL] OUTPUT_FILENAME = [string] [EOL] try : [EOL] namesonly = [ f for f in os . listdir ( [string] ) if f . endswith ( [string] ) or f . endswith ( [string] ) ] [EOL] except : [EOL] print ( [string] ) [EOL] return [EOL] [EOL] outfile = open ( os . path . join ( [string] , OUTPUT_FILENAME ) , [string] ) [EOL] [EOL] for i , file in enumerate ( namesonly ) : [EOL] contents = open ( os . path . join ( [string] , file ) , [string] ) . read ( ) [EOL] encoded = base64 . b64encode ( contents ) [EOL] outfile . write ( [string] . format ( file [ : file . index ( [string] ) ] , encoded ) ) [EOL] sg . OneLineProgressMeter ( [string] , i + [number] , len ( namesonly ) , key = [string] ) [EOL] [EOL] outfile . close ( ) [EOL] sg . Popup ( [string] , [string] % ( i + [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import PySimpleGUIQt as sg [EOL] [EOL] class NewGUI : [EOL] def __init__ ( self ) : [EOL] sg . SetOptions ( font = [string] , element_padding = ( [number] , [number] ) , scrollbar_color = None , background_color = [string] , text_color = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def list_usb_ports ( ) : [EOL] import serial . tools . list_ports [EOL] [EOL] ports = serial . tools . list_ports . comports ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] for port , desc , hwid in sorted ( ports ) : [EOL] if desc != [string] : [EOL] print ( f" [string] { port } [string] { desc } [string] { hwid }" ) [EOL] else : [EOL] if not port . startswith ( [string] ) and not port . startswith ( [string] ) : [EOL] print ( [string] , port ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] list_usb_ports ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import xcv [EOL] import typing [EOL] import pathlib [EOL] import os [EOL] import sys [EOL] [EOL] from xcv . fps import fps [EOL] import xcv . base64_icons as b64 [EOL] import xcv . version [EOL] [EOL] [comment] [EOL] import PySimpleGUIQt as sg [EOL] import cv2 [EOL] import numpy as np [EOL] from loguru import logger [EOL] [EOL] import random [EOL] import string [EOL] [EOL] from pathlib import Path [EOL] [EOL] [EOL] [EOL] def randomString ( stringLength = [number] ) : [EOL] [docstring] [EOL] letters = string . ascii_lowercase [EOL] return [string] . join ( random . choice ( letters ) for i in range ( stringLength ) ) [EOL] [EOL] @ logger . catch ( ) class VideoCapture : [EOL] [EOL] def __init__ ( self , gui = True ) : [EOL] path = Path ( __file__ ) . resolve ( ) . parent [EOL] self . clock_image_path = path / [string] [EOL] self . score_image_path = path / [string] [EOL] [EOL] [comment] [EOL] self . FONT = [string] [EOL] self . TEXT_COLOR = [string] [EOL] self . BKG_COLOR = [string] [EOL] [EOL] self . button_a = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_A_ON , [string] : b64 . BTN_A_OFF , } [EOL] self . button_b = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_B_ON , [string] : b64 . BTN_B_OFF , } [EOL] self . button_x = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_X_ON , [string] : b64 . BTN_X_OFF , } [EOL] self . button_y = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_Y_ON , [string] : b64 . BTN_Y_OFF , } [EOL] self . button_start = { [string] : [string] , [string] : [string] , [string] : b64 . START_ON , [string] : b64 . START_OFF , } [EOL] self . button_select = { [string] : [string] , [string] : [string] , [string] : b64 . SELECT_ON , [string] : b64 . SELECT_OFF , } [EOL] self . button_lb = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_LB_ON , [string] : b64 . BTN_LB_OFF , } [EOL] self . button_lt = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_LT_ON , [string] : b64 . BTN_LT_OFF , } [EOL] self . button_rb = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_RB_ON , [string] : b64 . BTN_RB_OFF , } [EOL] self . button_rt = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_RT_ON , [string] : b64 . BTN_RT_OFF , } [EOL] self . _all_buttons = [ self . button_a , self . button_b , self . button_x , self . button_y , self . button_select , self . button_start , self . button_lb , self . button_lt , self . button_rb , self . button_rt ] [EOL] [EOL] self . gui_switch = gui [EOL] [EOL] if self . gui_switch : [EOL] sg . SetOptions ( scrollbar_color = None , text_color = self . TEXT_COLOR , font = self . FONT , element_padding = ( [number] , [number] ) , background_color = self . BKG_COLOR , message_box_line_width = [number] , text_justification = [string] , margins = ( [number] , [number] ) , border_width = [number] , ) [EOL] [EOL] from xcv . version import XCV_VERSION [EOL] _gui_layout = GUILayout ( ) [EOL] [EOL] self . window = sg . Window ( f" [string] { XCV_VERSION }" , layout = _gui_layout . full_layout ( ) , location = ( [number] , [number] ) , icon = b64 . Microsoft_Xbox_Emoji_Icon , border_depth = [number] , ) [EOL] [EOL] self . cap = cv2 . VideoCapture ( [number] ) [EOL] self . check_video_stream ( ) [EOL] fps . start ( ) [EOL] self . event_loop ( ) [EOL] [EOL] [EOL] def check_video_stream ( self ) : [EOL] [docstring] [EOL] if not self . cap . isOpened ( ) : [EOL] logger . warning ( [string] ) [EOL] else : [EOL] [comment] [EOL] self . frame_width = int ( self . cap . get ( cv2 . CAP_PROP_FRAME_WIDTH ) ) [EOL] self . frame_height = int ( self . cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT ) ) [EOL] logger . debug ( f" [string] { self . frame_width } [string] { self . frame_height } [string] " ) [EOL] if self . frame_width >= [number] : [EOL] logger . warning ( [string] ) [EOL] [EOL] def scoreboard_processor ( self , gray_frame , save = False ) : [EOL] _clock_y1 = [number] [EOL] _clock_y2 = [number] [EOL] [EOL] _digit1_x1 = [number] [EOL] _digit1_x2 = [number] [EOL] _digit2_x1 = [number] [EOL] _digit2_x2 = [number] [EOL] _digit3_x1 = [number] [EOL] _digit3_x2 = [number] [EOL] _digit4_x1 = [number] [EOL] _digit4_x2 = [number] [EOL] [EOL] _score_y1 = [number] [EOL] _score_y2 = [number] [EOL] [EOL] _score1_x1 = [number] [EOL] _score1_x2 = [number] [EOL] [EOL] _score2_x1 = [number] [EOL] _score2_x2 = [number] [EOL] roi_game_clock_digit1 = gray_frame [ _clock_y1 : _clock_y2 , _digit1_x1 : _digit1_x2 ] [EOL] [EOL] roi_game_clock_digit2 = gray_frame [ _clock_y1 : _clock_y2 , _digit2_x1 : _digit2_x2 ] [EOL] [EOL] roi_game_clock_digit3 = gray_frame [ _clock_y1 : _clock_y2 , _digit3_x1 : _digit3_x2 ] [EOL] roi_game_clock_digit4 = gray_frame [ _clock_y1 : _clock_y2 , _digit4_x1 : _digit4_x2 ] [EOL] [EOL] roi_game_score1_digit1 = gray_frame [ _score_y1 : _score_y2 , _score1_x1 : _score1_x2 ] [EOL] roi_game_score2_digit1 = gray_frame [ _score_y1 : _score_y2 , _score2_x1 : _score2_x2 ] [EOL] [EOL] if save : [EOL] filename = randomString ( ) + [string] [EOL] [EOL] cv2 . imwrite ( os . path . join ( self . clock_image_path , filename ) , roi_game_clock_digit1 ) [EOL] cv2 . imwrite ( os . path . join ( self . clock_image_path , filename ) , roi_game_clock_digit2 ) [EOL] cv2 . imwrite ( os . path . join ( self . clock_image_path , filename ) , roi_game_clock_digit3 ) [EOL] cv2 . imwrite ( os . path . join ( self . clock_image_path , filename ) , roi_game_clock_digit4 ) [EOL] [EOL] cv2 . imwrite ( os . path . join ( self . score_image_path , filename ) , roi_game_score1_digit1 ) [EOL] cv2 . imwrite ( os . path . join ( self . score_image_path , filename ) , roi_game_score2_digit1 ) [EOL] [EOL] cropped_imgbytes = cv2 . imencode ( [string] , roi_game_clock_digit1 ) [ [number] ] . tobytes ( ) [EOL] cropped_imgbytes2 = cv2 . imencode ( [string] , roi_game_clock_digit2 ) [ [number] ] . tobytes ( ) [EOL] cropped_imgbytes3 = cv2 . imencode ( [string] , roi_game_clock_digit3 ) [ [number] ] . tobytes ( ) [EOL] cropped_imgbytes4 = cv2 . imencode ( [string] , roi_game_clock_digit4 ) [ [number] ] . tobytes ( ) [EOL] cropped_imgbytes5 = cv2 . imencode ( [string] , roi_game_score1_digit1 ) [ [number] ] . tobytes ( ) [EOL] cropped_imgbytes6 = cv2 . imencode ( [string] , roi_game_score2_digit1 ) [ [number] ] . tobytes ( ) [EOL] [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes ) [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes2 ) [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes3 ) [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes4 ) [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes5 ) [EOL] self . window . Element ( [string] ) . Update ( data = cropped_imgbytes6 ) [EOL] [EOL] def event_loop ( self ) : [EOL] [EOL] while True : [EOL] fps . update ( ) [EOL] [EOL] _event , _values = self . window . Read ( timeout = [number] , timeout_key = [string] ) [EOL] [EOL] ok , frame = self . cap . read ( ) [EOL] gray_frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) [EOL] [EOL] self . scoreboard_processor ( gray_frame ) [EOL] [EOL] [EOL] [EOL] [EOL] if ok : [EOL] self . _event_checker ( _event ) [EOL] [EOL] mins , secs = divmod ( fps . elapsed , [number] ) [EOL] str_elapsed = [string] . format ( mins , secs ) [EOL] [EOL] imgbytes = cv2 . imencode ( [string] , frame ) [ [number] ] . tobytes ( ) [EOL] [EOL] [EOL] [EOL] _event , _values = self . window . Read ( timeout = [number] , timeout_key = [string] ) [EOL] self . window . Element ( [string] ) . Update ( data = imgbytes ) [EOL] [EOL] self . window . Element ( [string] ) . Update ( str_elapsed ) [EOL] self . window . Element ( [string] ) . Update ( fps . fps ) [EOL] [EOL] [EOL] def _event_checker ( self , _event ) : [EOL] if _event == [string] or _event is None : [EOL] self . close_all ( self . window ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if _event != [string] : [EOL] logger . debug ( _event ) [EOL] [EOL] for b in self . _all_buttons : [EOL] if _event == b [ [string] ] : [EOL] print ( f"{ b [ [string] ] } [string] " ) [EOL] self . window . FindElement ( b [ [string] ] ) . Update ( data_base64 = b [ [string] ] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] for b in self . _all_buttons : [EOL] if _event != b [ [string] ] : [EOL] self . window . FindElement ( b [ [string] ] ) . Update ( data_base64 = b [ [string] ] ) [EOL] [EOL] [EOL] def close_all ( self , window ) : [EOL] [docstring] [EOL] fps . stop ( ) [EOL] logger . debug ( f" [string] { fps . fps } [string] { fps . elapsed }" ) [EOL] self . cap . release ( ) [EOL] cv2 . destroyAllWindows ( ) [EOL] window . Close ( ) [EOL] logger . debug ( [string] ) [EOL] [EOL] [EOL] class GUILayout : [EOL] [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] self . FONT = [string] [EOL] self . TEXT_COLOR = [string] [EOL] self . BKG_COLOR = [string] [EOL] self . GREEN = [string] [EOL] self . YELLOW = [string] [EOL] self . RED = [string] [EOL] self . GREY = [string] [EOL] self . GREY2 = [string] [EOL] [EOL] self . button_a = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_A_ON , [string] : b64 . BTN_A_OFF , } [EOL] self . button_b = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_B_ON , [string] : b64 . BTN_B_OFF , } [EOL] self . button_x = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_X_ON , [string] : b64 . BTN_X_OFF , } [EOL] self . button_y = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_Y_ON , [string] : b64 . BTN_Y_OFF , } [EOL] self . button_start = { [string] : [string] , [string] : [string] , [string] : b64 . START_ON , [string] : b64 . START_OFF , } [EOL] self . button_select = { [string] : [string] , [string] : [string] , [string] : b64 . SELECT_ON , [string] : b64 . SELECT_OFF , } [EOL] self . button_lb = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_LB_ON , [string] : b64 . BTN_LB_OFF , } [EOL] self . button_lt = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_LT_ON , [string] : b64 . BTN_LT_OFF , } [EOL] self . button_rb = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_RB_ON , [string] : b64 . BTN_RB_OFF , } [EOL] self . button_rt = { [string] : [string] , [string] : [string] , [string] : b64 . BTN_RT_ON , [string] : b64 . BTN_RT_OFF , } [EOL] self . _all_buttons = [ self . button_a , self . button_b , self . button_x , self . button_y , self . button_select , self . button_start , self . button_lb , self . button_lt , self . button_rb , self . button_rt ] [EOL] [EOL] def _layout_mainttab_row3_buttons ( self ) : [EOL] [docstring] [EOL] _row3_xcontroller_action_buttons = [ [ sg . Image ( data_base64 = self . button_y [ [string] ] , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) ] , [ sg . Image ( data_base64 = self . button_x [ [string] ] , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) , sg . Image ( data_base64 = self . button_b [ [string] ] , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) , ] , [ sg . Image ( data_base64 = self . button_a [ [string] ] , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) , ] , ] [EOL] [EOL] [docstring] [EOL] _row3_xcontroller_dpad = [ [ sg . Image ( data_base64 = b64 . DU_WHITE , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) ] , [ sg . Image ( data_base64 = b64 . DL_WHITE , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) ) , sg . Image ( data_base64 = b64 . DR_WHITE , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) , ] , [ sg . Image ( data_base64 = b64 . DU_WHITE , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) ] , ] [EOL] [EOL] _row3_xcontroller_other = [ [ sg . Image ( data_base64 = self . button_lt [ [string] ] , key = [string] , enable_events = True ) , sg . Image ( data_base64 = b64 . XBOX_LOADING , key = [string] , enable_events = True , pad = ( [number] , [number] , [number] , [number] ) , ) , sg . Image ( data_base64 = self . button_rt [ [string] ] , key = [string] , enable_events = True ) , ] , [ sg . Image ( data_base64 = self . button_lb [ [string] ] , key = [string] , enable_events = True ) , sg . Image ( data_base64 = self . button_start [ [string] ] , key = [string] , enable_events = True ) , sg . Image ( data_base64 = self . button_select [ [string] ] , key = [string] , enable_events = True ) , sg . Image ( data_base64 = self . button_rb [ [string] ] , key = [string] , enable_events = True ) , ] , [ sg . Image ( data_base64 = b64 . JOYSTICK_GIF ) , sg . Text ( [string] ) , sg . Image ( data_base64 = b64 . JOYSTICK_GIF ) , sg . Text ( [string] ) , ] ] [EOL] [EOL] [EOL] return [ sg . Column ( _row3_xcontroller_dpad ) , sg . Column ( _row3_xcontroller_other ) , sg . Column ( _row3_xcontroller_action_buttons ) , ] [EOL] [EOL] def _layout_maintab_row4_connection_status ( self ) : [EOL] [docstring] [EOL] return [ sg . Image ( data_base64 = b64 . GAMEPAD_GREY , key = [string] ) , sg . Text ( [string] , key = [string] , text_color = self . TEXT_COLOR , justification = [string] , ) , sg . Image ( data_base64 = b64 . FILM_GREY , key = [string] ) , sg . Text ( [string] ) , sg . Text ( [string] , key = [string] , text_color = self . TEXT_COLOR ) , sg . Text ( [string] ) , sg . Text ( [string] , key = [string] ) , ] [EOL] [EOL] def _output_console ( selfs ) : [EOL] return [ sg . Output ( size = ( [number] , [number] ) , background_color = [string] , text_color = [string] ) ] [EOL] [EOL] def _row0_video_frame ( self ) : [EOL] return [ sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) , sg . Image ( filename = [string] , key = [string] ) ] [EOL] [EOL] def _row2_game_stats ( self ) : [EOL] [docstring] [EOL] return [ sg . Text ( [string] ) , sg . Text ( [string] , key = [string] , text_color = self . GREEN , font = [string] ) , sg . Text ( [string] , key = [string] ) , sg . Image ( data_base64 = b64 . goal ) , sg . Text ( [string] , key = [string] ) , sg . Text ( [string] , key = [string] ) , sg . Text ( [string] ) , ] [EOL] [EOL] def _row1_detected_state ( self ) : [EOL] return [ sg . Text ( [string] ) , sg . Text ( [string] , key = [string] , font = [string] , justification = [string] , ) , sg . Text ( [string] ) , ] [EOL] [EOL] def _row5_gui_menu_buttons ( self ) : [EOL] return [ sg . Text ( [string] ) , sg . Image ( data_base64 = b64 . CHECK_SERIAL_OFF , key = [string] , enable_events = True , ) , sg . Image ( data_base64 = b64 . SCREENSHOT_OFF , key = [string] , enable_events = True , ) , sg . Image ( data_base64 = b64 . RECORD_OFF , key = [string] , enable_events = True ) , sg . Image ( data_base64 = b64 . EXIT_OFF , key = [string] , enable_events = True ) , sg . Text ( [string] ) , ] [EOL] [EOL] def _layout_maintab ( self ) : [EOL] [EOL] [comment] [EOL] _full_layout = [ self . _row0_video_frame ( ) , self . _row1_detected_state ( ) , self . _row2_game_stats ( ) , self . _layout_mainttab_row3_buttons ( ) , self . _layout_maintab_row4_connection_status ( ) , self . _output_console ( ) , self . _row5_gui_menu_buttons ( ) , ] [EOL] return _full_layout [EOL] [EOL] def _layout_about_tab ( self ) : [EOL] return [ [ sg . Text ( [string] ) ] , [ sg . Image ( data_base64 = b64 . BOO , pad = ( [number] , [number] ) ) ] , [ sg . Text ( f"{ xcv . __author__ } [string] " , justification = [string] ) ] , [ sg . Text ( f"{ xcv . __email__ } [string] " , justification = [string] ) ] , [ sg . Text ( f" [string] { xcv . version . XCV_VERSION } [string] " , justification = [string] ) ] , [ sg . Text ( [string] , font = ( [string] , [number] ) , justification = [string] , ) ] , [ sg . Text ( f" [string] " ) ] , [ sg . Text ( f" [string] " ) ] , [ sg . Text ( f" [string] " ) ] , ] [EOL] [EOL] def full_layout ( self ) : [EOL] return [ [ sg . TabGroup ( [ [ sg . Tab ( [string] , layout = self . _layout_maintab ( ) ) , sg . Tab ( [string] , layout = self . _layout_about_tab ( ) ) , ] ] , background_color = self . BKG_COLOR , title_color = self . TEXT_COLOR , selected_title_color = self . GREY2 , border_width = [number] , ) ] ] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] video_capture = VideoCapture ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.tools.record_roi.GUILayout$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.tools.record_roi.GUILayout$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xcv.tools.record_roi.VideoCapture$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import serial [EOL] from loguru import logger [EOL] from time import sleep [EOL] [EOL] def serialSend ( charToSend , port = [string] , baudrate = [number] ) : [EOL] def send ( ) : [EOL] try : [EOL] with serial . Serial ( port = port , baudrate = baudrate , bytesize = [number] , parity = [string] , stopbits = [number] , timeout = [number] ) as s : [EOL] s . write ( charToSend . encode ( [string] ) ) [EOL] logger . info ( f" [string] { charToSend }" ) [EOL] except : [EOL] logger . warning ( f" [string] { charToSend } [string] { port } [string] { baudrate }" ) [EOL] [EOL] return send [EOL] [EOL] def checkSerial ( ) : [EOL] a = serialSend ( [string] ) [EOL] b = serialSend ( [string] ) [EOL] x = serialSend ( [string] ) [EOL] y = serialSend ( [string] ) [EOL] [EOL] logger . info ( [string] ) [EOL] a ( ) [EOL] sleep ( [number] ) [EOL] logger . info ( [string] ) [EOL] b ( ) [EOL] sleep ( [number] ) [EOL] logger . info ( [string] ) [EOL] x ( ) [EOL] sleep ( [number] ) [EOL] logger . info ( [string] ) [EOL] y ( ) [EOL] sleep ( [number] ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] checkSerial ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0