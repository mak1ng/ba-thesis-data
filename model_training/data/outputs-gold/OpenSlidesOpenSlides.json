[comment] [EOL] [EOL] import sys [EOL] [EOL] from openslides . __main__ import main [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) == [number] : [EOL] sys . argv . append ( [string] ) [EOL] exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import argparse [EOL] from argparse import ArgumentParser [EOL] from subprocess import call as _call [EOL] [EOL] parser = ArgumentParser ( description = [string] ) [EOL] subparsers = parser . add_subparsers ( ) [EOL] [EOL] [EOL] def command ( * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] class decorator : [EOL] def __init__ ( self , func ) : [EOL] self . parser = subparsers . add_parser ( * args , ** kwargs ) [EOL] self . parser . set_defaults ( func = func ) [EOL] self . func = func [EOL] [EOL] def __call__ ( self , * args , ** kwargs ) : [EOL] return self . func ( * args , ** kwargs ) [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def argument ( * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] def decorator ( func ) : [EOL] func . parser . add_argument ( * args , ** kwargs ) [EOL] [EOL] def wrapper ( * func_args , ** func_kwargs ) : [EOL] return func ( * func_args , ** func_kwargs ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def call ( * args , ** kwargs ) : [EOL] [docstring] [EOL] return _call ( shell = True , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from parser import command , argument , call [EOL] import yaml [EOL] import requirements [EOL] [EOL] FAIL = [string] [EOL] SUCCESS = [string] [EOL] RESET = [string] [EOL] [EOL] [EOL] @ command ( [string] , help = [string] ) def check ( args = None ) : [EOL] [docstring] [EOL] value = call ( [string] ) [EOL] value += call ( [string] ) [EOL] return value [EOL] [EOL] [EOL] @ command ( [string] , help = [string] ) def travis ( args = None ) : [EOL] [docstring] [EOL] return_codes = [ ] [EOL] with open ( [string] ) as f : [EOL] travis = yaml . load ( f ) [EOL] for line in travis [ [string] ] : [EOL] print ( f" [string] { line }" ) [EOL] return_code = call ( line ) [EOL] return_codes . append ( return_code ) [EOL] if return_code : [EOL] print ( FAIL + [string] + RESET ) [EOL] else : [EOL] print ( SUCCESS + [string] + RESET ) [EOL] [EOL] [comment] [EOL] return bool ( list ( filter ( bool , return_codes ) ) ) [EOL] [EOL] [EOL] @ argument ( [string] , [string] , nargs = [string] , default = [string] ) @ command ( [string] , help = [string] [string] , ) def min_requirements ( args = None ) : [EOL] [docstring] [EOL] [EOL] def get_lowest_versions ( requirements_file ) : [EOL] with open ( requirements_file ) as f : [EOL] for req in requirements . parse ( f ) : [EOL] if req . specifier : [EOL] for spec , version in req . specs : [EOL] if spec == [string] : [EOL] yield f"{ req . name } [string] { version }" [EOL] [EOL] print ( [string] . join ( get_lowest_versions ( args . requirements ) ) ) [EOL] [EOL] [EOL] @ command ( [string] , help = [string] ) def clean ( args = None ) : [EOL] [docstring] [EOL] call ( [string] ) [EOL] call ( [string] ) [EOL] call ( [string] ) [EOL] [EOL] [EOL] @ command ( [string] , help = [string] ) def isort ( args = None ) : [EOL] call ( [string] ) [EOL] call ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] [EOL] import commands [comment] [EOL] from parser import parser [EOL] [EOL] [EOL] if len ( sys . argv ) < [number] : [EOL] args = parser . parse_args ( [ [string] ] ) [EOL] else : [EOL] args = parser . parse_args ( ) [EOL] [EOL] [comment] [EOL] exit ( args . func ( args ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] [EOL] from openslides . saml import SAML_ENABLED [EOL] from openslides . utils . plugins import get_all_plugin_urlpatterns [EOL] [EOL] [EOL] urlpatterns = get_all_plugin_urlpatterns ( ) [EOL] [EOL] urlpatterns += [ url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , ] [EOL] [EOL] if SAML_ENABLED : [EOL] urlpatterns += [ url ( [string] , include ( [string] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Literal , Any , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] import os [EOL] import sys [EOL] from typing import Dict [EOL] [EOL] import django [EOL] from django . core . management import call_command , execute_from_command_line [EOL] [EOL] import openslides [EOL] from openslides . utils . arguments import arguments [EOL] from openslides . utils . main import ( ExceptionArgumentParser , UnknownCommand , get_default_settings_dir , get_local_settings_dir , is_local_installation , open_browser , setup_django_settings_module , write_settings , ) [EOL] from openslides . utils . startup import run_startup_hooks [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] parser = get_parser ( ) [EOL] try : [EOL] known_args , unknown_args = parser . parse_known_args ( ) [EOL] except UnknownCommand : [EOL] unknown_command = True [EOL] else : [EOL] unknown_command = False [EOL] [EOL] if unknown_command : [EOL] [comment] [EOL] local_installation = is_local_installation ( ) [EOL] setup_django_settings_module ( local_installation = local_installation ) [EOL] execute_from_command_line ( sys . argv ) [EOL] else : [EOL] [comment] [EOL] if unknown_args : [EOL] joined_unknown_args = [string] . join ( unknown_args ) [EOL] parser . error ( f" [string] { joined_unknown_args }" ) [EOL] [EOL] [comment] [EOL] arguments . set_arguments ( known_args ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] known_args . callback ( known_args ) [EOL] [EOL] [EOL] def get_parser ( ) : [EOL] [docstring] [EOL] if len ( sys . argv ) == [number] : [EOL] [comment] [EOL] [comment] [EOL] sys . argv . append ( [string] ) [EOL] [EOL] [comment] [EOL] description = [string] [EOL] if [string] not in sys . argv [ [number] ] : [EOL] description += [string] [EOL] epilog = [string] [EOL] parser = ExceptionArgumentParser ( description = description , epilog = epilog ) [EOL] [EOL] [comment] [EOL] parser . add_argument ( [string] , action = [string] , version = openslides . __version__ , help = [string] , ) [EOL] [EOL] [comment] [EOL] subparsers = parser . add_subparsers ( dest = [string] , title = [string] , description = [string] [string] % parser . prog , help = [string] , metavar = [string] , ) [EOL] [EOL] [comment] [EOL] start_help = ( [string] [string] [string] ) [EOL] subcommand_start = subparsers . add_parser ( [string] , description = start_help , help = start_help ) [EOL] subcommand_start . set_defaults ( callback = start ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , default = False , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , default = [string] , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , default = [string] , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , default = None , help = [string] ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , default = [string] , help = [string] , ) [EOL] subcommand_start . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] [EOL] [comment] [EOL] createsettings_help = [string] [EOL] subcommand_createsettings = subparsers . add_parser ( [string] , description = createsettings_help , help = createsettings_help ) [EOL] subcommand_createsettings . set_defaults ( callback = createsettings ) [EOL] subcommand_createsettings . add_argument ( [string] , action = [string] , default = None , help = [string] , ) [EOL] subcommand_createsettings . add_argument ( [string] , action = [string] , default = [string] , help = [string] , ) [EOL] subcommand_createsettings . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] [EOL] [comment] [EOL] django_subcommands = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] for django_subcommand , help_text in django_subcommands : [EOL] subparsers . _choices_actions . append ( subparsers . _ChoicesPseudoAction ( django_subcommand , ( ) , help_text ) ) [EOL] [EOL] return parser [EOL] [EOL] [EOL] def start ( args ) : [EOL] [docstring] [EOL] settings_dir = args . settings_dir [EOL] settings_filename = args . settings_filename [EOL] local_installation = is_local_installation ( ) [EOL] [EOL] if settings_dir is None : [EOL] if local_installation : [EOL] settings_dir = get_local_settings_dir ( ) [EOL] else : [EOL] settings_dir = get_default_settings_dir ( ) [EOL] [EOL] [comment] [EOL] settings_path = os . path . join ( settings_dir , settings_filename ) [EOL] if not os . path . isfile ( settings_path ) : [EOL] createsettings ( args ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] setup_django_settings_module ( settings_path , local_installation = local_installation ) [EOL] django . setup ( ) [EOL] from django . conf import settings [EOL] [EOL] if args . debug_email : [EOL] settings . EMAIL_BACKEND = [string] [EOL] [EOL] [comment] [EOL] call_command ( [string] ) [EOL] [EOL] [comment] [EOL] if not args . no_browser : [EOL] open_browser ( args . host , args . port ) [EOL] [EOL] run_startup_hooks ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] call_command ( [string] , f"{ args . host } [string] { args . port }" , noreload = False , insecure = True , ) [EOL] [EOL] [EOL] def createsettings ( args ) : [EOL] [docstring] [EOL] settings_dir = args . settings_dir [EOL] local_installation = is_local_installation ( ) [EOL] context = { } [EOL] [EOL] if local_installation : [EOL] if settings_dir is None : [EOL] settings_dir = get_local_settings_dir ( ) [EOL] context = { [string] : repr ( os . path . join ( os . getcwd ( ) , [string] , [string] ) ) , [string] : [string] , } [EOL] [EOL] settings_path = write_settings ( settings_dir , args . settings_filename , ** context ) [EOL] print ( f" [string] { settings_path }" ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict , Union , Tuple [EOL] import typing [EOL] import os [EOL] [EOL] from openslides . utils . plugins import collect_plugins [EOL] [EOL] [EOL] MODULE_DIR = os . path . realpath ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] INSTALLED_PLUGINS = collect_plugins ( ) [comment] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , } ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] EMAIL_TIMEOUT = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] LANGUAGES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] LOCALE_PATHS = [ os . path . join ( MODULE_DIR , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( MODULE_DIR , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] AUTH_GROUP_MODEL = [string] [EOL] [EOL] SESSION_COOKIE_NAME = [string] [EOL] [EOL] SESSION_EXPIRE_AT_BROWSER_CLOSE = True [EOL] [EOL] CSRF_COOKIE_NAME = [string] [EOL] [EOL] CSRF_COOKIE_AGE = None [EOL] [EOL] PASSWORD_HASHERS = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] MEDIA_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] ASGI_APPLICATION = [string] [EOL] [EOL] CHANNEL_LAYERS = { [string] : { [string] : [string] } } [EOL] [EOL] [EOL] [comment] [EOL] ENABLE_LAST_LOGIN_FIELD = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import django [EOL] from channels . routing import get_default_application [EOL] [EOL] from . utils . main import setup_django_settings_module [EOL] from . utils . startup import run_startup_hooks [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] setup_django_settings_module ( ) [EOL] django . setup ( ) [EOL] run_startup_hooks ( ) [EOL] application = get_default_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
__author__ = [string] [EOL] __description__ = [string] [EOL] __version__ = [string] [EOL] __license__ = [string] [EOL] __url__ = [string] [EOL] [EOL] args = None [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . contrib . auth . models import Permission [EOL] from django . db import migrations , models [EOL] [EOL] from openslides . utils . migrations import ( add_permission_to_groups_based_on_existing_permission , ) [EOL] [EOL] [EOL] def delete_old_can_see_hidden_permission ( apps , schema_editor ) : [EOL] perm = Permission . objects . filter ( codename = [string] ) [EOL] if len ( perm ) : [EOL] perm = perm . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( ) , [string] : ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] , ) , ) , } , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . IntegerField ( choices = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] , default = [number] , ) , ) , migrations . RunPython ( add_permission_to_groups_based_on_existing_permission ( [string] , [string] , [string] , [string] , [string] , ) ) , migrations . RunPython ( delete_old_can_see_hidden_permission ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def move_speakers_to_own_model ( apps , schema_editor ) : [EOL] [docstring] [EOL] Item = apps . get_model ( [string] , [string] ) [EOL] Speaker = apps . get_model ( [string] , [string] ) [EOL] ListOfSpeakers = apps . get_model ( [string] , [string] ) [EOL] [EOL] for item in Item . objects . all ( ) : [EOL] los = ListOfSpeakers ( content_type = item . content_type , object_id = item . object_id , closed = item . speaker_list_closed , ) [EOL] los . save ( skip_autoupdate = True ) [EOL] [EOL] for speaker in Speaker . objects . all ( ) : [EOL] speaker . list_of_speakers = ListOfSpeakers . objects . get ( object_id = speaker . item . object_id , content_type = speaker . item . content_type ) [EOL] speaker . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def add_speakers_to_mediafiles ( apps , schema_editor ) : [EOL] [docstring] [EOL] ListOfSpeakers = apps . get_model ( [string] , [string] ) [EOL] ContentType = apps . get_model ( [string] , [string] ) [EOL] Mediafile = apps . get_model ( [string] , [string] ) [EOL] [EOL] mediafile_content_type = ContentType . objects . get_for_model ( Mediafile ) [EOL] for mediafile in Mediafile . objects . all ( ) : [EOL] los = ListOfSpeakers ( content_type = mediafile_content_type , object_id = mediafile . pk ) [EOL] los . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( move_speakers_to_own_model ) , migrations . RunPython ( add_speakers_to_mediafiles ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] def convert_duration ( apps , schema_editor ) : [EOL] [docstring] [EOL] Item = apps . get_model ( [string] , [string] ) [EOL] for item in Item . objects . all ( ) : [EOL] duration = item . duration [EOL] item . duration_tmp = None [EOL] if is_int ( duration ) : [EOL] [comment] [EOL] item . duration_tmp = int ( duration ) [EOL] elif isinstance ( duration , str ) : [EOL] [comment] [EOL] split = duration . split ( [string] ) [EOL] if len ( split ) == [number] and is_int ( split [ [number] ] ) and is_int ( split [ [number] ] ) : [EOL] [comment] [EOL] item . duration_tmp = int ( split [ [number] ] ) * [number] + int ( split [ [number] ] ) [EOL] item . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def is_int ( s ) : [EOL] [docstring] [EOL] try : [EOL] int ( s ) [EOL] except ( ValueError , TypeError ) : [EOL] return False [EOL] else : [EOL] return True [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . IntegerField ( blank = True , null = True ) , ) , migrations . RunPython ( convert_duration ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL]	0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def remove_deprecated_slides ( apps , schema_editor ) : [EOL] Projector = apps . get_model ( [string] , [string] ) [EOL] for projector in Projector . objects . all ( ) : [EOL] new_history = [ ] [EOL] for entry in projector . elements_history : [EOL] new_entry = [ ] [EOL] for subentry in entry : [EOL] if subentry [ [string] ] != [string] : [EOL] new_entry . append ( subentry ) [EOL] if len ( new_entry ) : [EOL] new_history . append ( new_entry ) [EOL] projector . elements_history = new_history [EOL] projector . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( remove_deprecated_slides ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] from decimal import Decimal [EOL] [EOL] from django . db import migrations , transaction [EOL] [EOL] [EOL] def change_pollmethods ( apps , schema_editor ) : [EOL] [docstring] [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] pollmethod_map = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] poll . pollmethod = pollmethod_map . get ( poll . pollmethod , [string] ) [EOL] poll . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def set_poll_titles ( apps , schema_editor ) : [EOL] [docstring] [EOL] Assignment = apps . get_model ( [string] , [string] ) [EOL] for assignment in Assignment . objects . all ( ) : [EOL] for i , poll in enumerate ( assignment . polls . order_by ( [string] ) . all ( ) ) : [EOL] poll . title = str ( i + [number] ) [EOL] poll . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def set_onehunderd_percent_bases ( apps , schema_editor ) : [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] base_map = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] try : [EOL] config = ConfigStore . objects . get ( key = [string] ) [EOL] value = base_map [ config . value ] [EOL] except ( ConfigStore . DoesNotExist , KeyError ) : [EOL] value = [string] [EOL] [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] if poll . pollmethod == [string] and value in ( [string] , [string] ) : [EOL] poll . onehundred_percent_base = [string] [EOL] elif poll . pollmethod == [string] and value == [string] : [EOL] poll . onehundred_percent_base = [string] [EOL] else : [EOL] poll . onehundred_percent_base = value [EOL] poll . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def set_majority_methods ( apps , schema_editor ) : [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] majority_map = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] try : [EOL] config = ConfigStore . objects . get ( key = [string] ) [EOL] value = majority_map [ config . value ] [EOL] except ( ConfigStore . DoesNotExist , KeyError ) : [EOL] value = [string] [EOL] [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] poll . majority_method = value [EOL] poll . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def convert_votes ( apps , schema_editor ) : [EOL] AssignmentVote = apps . get_model ( [string] , [string] ) [EOL] value_map = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] for vote in AssignmentVote . objects . all ( ) : [EOL] vote . value = value_map [ vote . value ] [EOL] vote . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def convert_votesabstain ( apps , schema_editor ) : [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] AssignmentVote = apps . get_model ( [string] , [string] ) [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] if poll . votesabstain is not None and poll . votesabstain > Decimal ( [number] ) : [EOL] with transaction . atomic ( ) : [EOL] option = poll . options . first ( ) [EOL] vote = AssignmentVote ( option = option , value = [string] , weight = poll . votesabstain ) [EOL] vote . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def convert_votesno ( apps , schema_editor ) : [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] AssignmentVote = apps . get_model ( [string] , [string] ) [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] if poll . votesno is not None and poll . votesno > Decimal ( [number] ) : [EOL] with transaction . atomic ( ) : [EOL] option = poll . options . first ( ) [EOL] vote = AssignmentVote ( option = option , value = [string] , weight = poll . votesno ) [EOL] vote . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def set_correct_state ( apps , schema_editor ) : [EOL] [docstring] [EOL] AssignmentPoll = apps . get_model ( [string] , [string] ) [EOL] AssignmentVote = apps . get_model ( [string] , [string] ) [EOL] for poll in AssignmentPoll . objects . all ( ) : [EOL] [comment] [EOL] [comment] [EOL] if AssignmentVote . objects . filter ( option__poll__pk = poll . pk ) . exists ( ) : [EOL] if poll . published : [EOL] poll . state = [number] [comment] [EOL] else : [EOL] poll . state = [number] [comment] [EOL] poll . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( change_pollmethods ) , migrations . RunPython ( set_poll_titles ) , migrations . RunPython ( set_onehunderd_percent_bases ) , migrations . RunPython ( set_majority_methods ) , migrations . RunPython ( convert_votes ) , migrations . RunPython ( convert_votesabstain ) , migrations . RunPython ( convert_votesno ) , migrations . RunPython ( set_correct_state ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from PyPDF2 import PdfFileReader [EOL] from PyPDF2 . utils import PdfReadError [EOL] [EOL] [EOL] def bytes_to_human ( size ) : [EOL] [comment] [EOL] if size < [number] : [EOL] size_string = [string] [EOL] elif size >= [number] * [number] : [EOL] mB = size / [number] / [number] [EOL] size_string = [string] % mB [EOL] else : [EOL] kB = size / [number] [EOL] size_string = [string] % kB [EOL] return size_string [EOL] [EOL] [EOL] def get_pdf_information ( mediafile ) : [EOL] result = { } [EOL] try : [EOL] pdf = PdfFileReader ( mediafile ) [EOL] result [ [string] ] = pdf . getNumPages ( ) [EOL] except PdfReadError : [EOL] [comment] [EOL] result [ [string] ] = [number] [EOL] result [ [string] ] = True [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import jsonfield . encoder [EOL] import jsonfield . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( default = [string] , max_length = [number] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( default = [string] , max_length = [number] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = jsonfield . fields . JSONField ( default = dict , dump_kwargs = { [string] : jsonfield . encoder . JSONEncoder , [string] : ( [string] , [string] ) , } , load_kwargs = { } , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import os . path [EOL] from typing import List [EOL] [EOL] from django . contrib . auth . models import Permission [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db import migrations [EOL] [EOL] [EOL] def change_logo_and_font_configs ( apps , schema_editor ) : [EOL] [docstring] [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] [EOL] logo_font_keys = [ ] [EOL] try : [EOL] logo_font_keys . extend ( ConfigStore . objects . get ( key = [string] ) . value ) [EOL] logo_font_keys . extend ( ConfigStore . objects . get ( key = [string] ) . value ) [EOL] except ConfigStore . DoesNotExist : [EOL] pass [EOL] [EOL] for key in logo_font_keys : [EOL] try : [EOL] config = ConfigStore . objects . get ( key = key ) [EOL] except ConfigStore . DoesNotExist : [EOL] continue [EOL] logo = config . value [EOL] path = logo . get ( [string] ) [EOL] if path and path . startswith ( [string] ) : [EOL] logo [ [string] ] = path . replace ( [string] , [string] , [number] ) [EOL] config . value = logo [EOL] config . save ( ) [EOL] [EOL] [EOL] def copy_filename ( apps , schema_editor ) : [EOL] Mediafile = apps . get_model ( [string] , [string] ) [EOL] [EOL] for mediafile in Mediafile . objects . all ( ) : [EOL] filename = os . path . basename ( mediafile . mediafile . name ) [EOL] mediafile . original_filename = filename [EOL] mediafile . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def set_groups_and_delete_old_permissions ( apps , schema_editor ) : [EOL] Mediafile = apps . get_model ( [string] , [string] ) [EOL] mediafile_content_type = ContentType . objects . get ( model = [string] ) [EOL] try : [EOL] can_see_hidden = Permission . objects . get ( codename = [string] , content_type = mediafile_content_type ) [EOL] group_ids = [ group . id for group in can_see_hidden . group_set . all ( ) ] [EOL] for mediafile in Mediafile . objects . filter ( hidden = True ) : [EOL] mediafile . access_groups . set ( group_ids ) [EOL] mediafile . save ( skip_autoupdate = True ) [EOL] [EOL] [comment] [EOL] can_see_hidden . delete ( ) [EOL] Permission . objects . filter ( codename = [string] , content_type = mediafile_content_type ) . delete ( ) [EOL] except Permission . DoesNotExist : [EOL] pass [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( change_logo_and_font_configs ) , migrations . RunPython ( copy_filename ) , migrations . RunPython ( set_groups_and_delete_old_permissions ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] import mimetypes [EOL] [EOL] from django . db import migrations [EOL] [EOL] from . . utils import bytes_to_human , get_pdf_information [EOL] [EOL] [EOL] def fill_new_values ( apps , schema_editor ) : [EOL] Mediafile = apps . get_model ( [string] , [string] ) [EOL] for mediafile in Mediafile . objects . all ( ) : [EOL] if not mediafile . is_directory : [EOL] mediafile . filesize = bytes_to_human ( mediafile . mediafile . size ) [EOL] mediafile . mimetype = mimetypes . guess_type ( mediafile . mediafile . name ) [ [number] ] [EOL] if mediafile . mimetype == [string] : [EOL] mediafile . pdf_information = get_pdf_information ( mediafile . mediafile ) [EOL] else : [EOL] mediafile . pdf_information = { } [EOL] mediafile . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( fill_new_values ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . apps import apps [EOL] [EOL] [EOL] def get_permission_change_data ( sender , permissions , ** kwargs ) : [EOL] [docstring] [EOL] topics_app = apps . get_app_config ( app_label = [string] ) [EOL] for permission in permissions : [EOL] [comment] [EOL] if ( permission . content_type . app_label == [string] [EOL] and permission . codename == [string] ) : [EOL] yield from topics_app . get_startup_elements ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from openslides . utils . exceptions import OpenSlidesError [EOL] [EOL] [EOL] class TagException ( OpenSlidesError ) : [EOL] pass [EOL] [EOL] [EOL] class ConfigError ( OpenSlidesError ) : [EOL] pass [EOL] [EOL] [EOL] class ConfigNotFound ( ConfigError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def delete_old_countdowns ( apps , schema_editor ) : [EOL] Countdowns = apps . get_model ( [string] , [string] ) [EOL] Countdowns . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( delete_old_countdowns ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import jsonfield . encoder [EOL] import jsonfield . fields [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . AddField ( model_name = [string] , name = [string] , field = jsonfield . fields . JSONField ( default = list , dump_kwargs = { [string] : jsonfield . encoder . JSONEncoder , [string] : ( [string] , [string] ) , } , load_kwargs = { } , ) , preserve_default = False , ) , migrations . AddField ( model_name = [string] , name = [string] , field = jsonfield . fields . JSONField ( default = list , dump_kwargs = { [string] : jsonfield . encoder . JSONEncoder , [string] : ( [string] , [string] ) , } , load_kwargs = { } , ) , preserve_default = False , ) , migrations . AddField ( model_name = [string] , name = [string] , field = jsonfield . fields . JSONField ( default = list , dump_kwargs = { [string] : jsonfield . encoder . JSONEncoder , [string] : ( [string] , [string] ) , } , load_kwargs = { } , ) , preserve_default = False , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . contrib . auth . models import Permission [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db import migrations [EOL] [EOL] [EOL] def remove_chatmessage_permissions ( apps , schema_editor ) : [EOL] content_type = ContentType . objects . filter ( model = [string] , app_label = [string] ) [EOL] Permission . objects . filter ( content_type__in = content_type ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( remove_chatmessage_permissions ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . DeleteModel ( name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def set_reference_projector ( apps , schema_editor ) : [EOL] [docstring] [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] Projector = apps . get_model ( [string] , [string] ) [EOL] [EOL] try : [EOL] config = ConfigStore . objects . get ( key = [string] ) [EOL] reference_id = config . value [EOL] config . delete ( ) [comment] [EOL] reference_projector = Projector . objects . get ( pk = reference_id ) [EOL] except ( ConfigStore . DoesNotExist , Projector . DoesNotExist ) : [EOL] reference_projector = Projector . objects . first ( ) [EOL] [EOL] for projector in Projector . objects . all ( ) : [EOL] projector . reference_projector = reference_projector [EOL] projector . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( set_reference_projector ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def add_poll_projection_defaults ( apps , schema_editor ) : [EOL] [docstring] [EOL] Projector = apps . get_model ( [string] , [string] ) [EOL] ProjectionDefault = apps . get_model ( [string] , [string] ) [EOL] default_projector = Projector . objects . order_by ( [string] ) . first ( ) [EOL] [EOL] projectiondefaults = [ ] [EOL] [EOL] projectiondefaults . append ( ProjectionDefault ( name = [string] , display_name = [string] , projector = default_projector ) ) [EOL] projectiondefaults . append ( ProjectionDefault ( name = [string] , display_name = [string] , projector = default_projector ) ) [EOL] [EOL] [comment] [EOL] ProjectionDefault . objects . bulk_create ( projectiondefaults ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( add_poll_projection_defaults ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] import jsonfield . encoder [EOL] import jsonfield . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] def clear_history ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] History = apps . get_model ( [string] , [string] ) [EOL] History . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = False ) , ) , migrations . RunPython ( clear_history ) , migrations . AlterField ( model_name = [string] , name = [string] , field = jsonfield . fields . JSONField ( dump_kwargs = { [string] : jsonfield . encoder . JSONEncoder , [string] : ( [string] , [string] ) , } , load_kwargs = { } , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] def remove_session_content_type ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] ContentType = apps . get_model ( [string] , [string] ) [EOL] Session = apps . get_model ( [string] , [string] ) [EOL] ContentType . objects . get_for_model ( Session ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( remove_session_content_type ) , migrations . DeleteModel ( name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( ) , [string] : ( ( [string] , [string] ) , ) , } , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def calculate_aspect_ratios ( apps , schema_editor ) : [EOL] [docstring] [EOL] Projector = apps . get_model ( [string] , [string] ) [EOL] ratio_environment = [number] [EOL] aspect_ratios = { [number] / [number] : ( [number] , [number] ) , [number] / [number] : ( [number] , [number] ) , [number] / [number] : ( [number] , [number] ) , [number] / [number] : ( [number] , [number] ) , } [EOL] [EOL] for projector in Projector . objects . all ( ) : [EOL] projector_ratio = projector . width / projector . height [EOL] ratio = ( [number] , [number] ) [comment] [EOL] [comment] [EOL] for value , _ratio in aspect_ratios . items ( ) : [EOL] if ( value >= projector_ratio - ratio_environment [EOL] and value <= projector_ratio + ratio_environment ) : [EOL] ratio = _ratio [EOL] break [EOL] projector . aspect_ratio_numerator = ratio [ [number] ] [EOL] projector . aspect_ratio_denominator = ratio [ [number] ] [EOL] projector . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( calculate_aspect_ratios ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] from openslides . utils . migrations import ( add_permission_to_groups_based_on_existing_permission , ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( ) , [string] : ( ( [string] , [string] ) , ( [string] , [string] ) , ) , } , ) , migrations . RunPython ( add_permission_to_groups_based_on_existing_permission ( [string] , [string] , [string] , [string] , [string] , ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] def rename_projector_message_slides ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] Projector = apps . get_model ( [string] , [string] ) [EOL] for projector in Projector . objects . all ( ) : [EOL] new_config = { } [EOL] for key , value in projector . config . items ( ) : [EOL] new_config [ key ] = value [EOL] if value [ [string] ] == [string] : [EOL] new_config [ key ] [ [string] ] = [string] [EOL] projector . config = new_config [EOL] projector . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( rename_projector_message_slides ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . contrib . auth . models import Permission [EOL] from django . db import migrations [EOL] [EOL] [EOL] def delete_old_logo_permission ( apps , schema_editor ) : [EOL] [docstring] [EOL] perm = Permission . objects . filter ( codename = [string] ) [EOL] [EOL] if len ( perm ) : [EOL] perm = perm . get ( ) [EOL] [comment] [EOL] content_type = perm . content_type [EOL] [EOL] [comment] [EOL] groups = list ( perm . group_set . all ( ) ) [EOL] [EOL] [comment] [EOL] perm . delete ( ) [EOL] [EOL] [comment] [EOL] perm = Permission . objects . create ( codename = [string] , name = [string] , content_type = content_type , ) [EOL] [EOL] for group in groups : [EOL] group . permissions . add ( perm ) [EOL] group . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( ) , [string] : ( ( [string] , [string] ) , ( [string] , [string] ) , ) , } , ) , migrations . RunPython ( delete_old_logo_permission ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . DateTimeField ( ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import shutil [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . db import connection , transaction [EOL] [EOL] from openslides . utils . main import get_database_path_from_settings [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [docstring] [EOL] [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , default = [string] , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] path = options . get ( [string] ) [EOL] [EOL] @ transaction . atomic def do_backup ( src_path , dest_path ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cursor = connection . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] [comment] [EOL] try : [EOL] shutil . copy ( src_path , dest_path ) [EOL] except IOError : [EOL] [comment] [EOL] raise CommandError ( [string] ) [EOL] [EOL] database_path = get_database_path_from_settings ( ) [EOL] if database_path : [EOL] do_backup ( database_path , path ) [EOL] self . stdout . write ( self . style . SUCCESS ( f" [string] { database_path } [string] { path } [string] " ) ) [EOL] else : [EOL] raise CommandError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import builtins [EOL] import server [EOL] from typing import Dict [EOL] [EOL] from typing_extensions import Protocol [EOL] [EOL] from . redis import use_redis [EOL] [EOL] [EOL] if use_redis : [EOL] from . redis import get_connection [EOL] [EOL] [EOL] class LockProtocol ( Protocol ) : [EOL] async def set ( self , lock_name ) : [EOL] ... [EOL] [EOL] async def get ( self , lock_name ) : [EOL] ... [EOL] [EOL] async def delete ( self , lock_name ) : [EOL] ... [EOL] [EOL] [EOL] class RedisLockProvider : [EOL] lock_prefix = [string] [EOL] [EOL] async def set ( self , lock_name ) : [EOL] [docstring] [EOL] [comment] [EOL] async with get_connection ( ) as redis : [EOL] return await redis . setnx ( f"{ self . lock_prefix }{ lock_name }" , [number] ) [EOL] [EOL] async def get ( self , lock_name ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] async with get_connection ( ) as redis : [EOL] return await redis . get ( f"{ self . lock_prefix }{ lock_name }" ) [EOL] [EOL] async def delete ( self , lock_name ) : [EOL] [docstring] [EOL] async with get_connection ( ) as redis : [EOL] await redis . delete ( f"{ self . lock_prefix }{ lock_name }" ) [EOL] [EOL] [EOL] class MemoryLockProvider : [EOL] def __init__ ( self ) : [EOL] self . locks = { } [EOL] [EOL] async def set ( self , lock_name ) : [EOL] if lock_name in self . locks : [EOL] return False [EOL] self . locks [ lock_name ] = [string] [EOL] return True [EOL] [EOL] async def get ( self , lock_name ) : [EOL] return lock_name in self . locks [EOL] [EOL] async def delete ( self , lock_name ) : [EOL] try : [EOL] del self . locks [ lock_name ] [EOL] except KeyError : [EOL] pass [EOL] [EOL] [EOL] def load_lock_provider ( ) : [EOL] [docstring] [EOL] if use_redis : [EOL] lock_provider = RedisLockProvider ( ) [EOL] else : [EOL] lock_provider = MemoryLockProvider ( ) [EOL] [EOL] return lock_provider [EOL] [EOL] [EOL] locking = load_lock_provider ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $LockProtocol$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.locking.LockProtocol$ 0 0 0 0 0
from typing import Optional , Any , List [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from typing import Any , List , Optional [EOL] [EOL] from django . db . models import Manager , QuerySet [EOL] [EOL] [EOL] class BaseManager ( Manager ) : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self , ids = None ) : [EOL] queryset = super ( ) . get_queryset ( ) [EOL] if ids : [EOL] queryset = queryset . filter ( pk__in = ids ) [EOL] return queryset [EOL] [EOL] def get_prefetched_queryset ( self , * args , ** kwargs ) : [EOL] return self . get_queryset ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.QuerySet$ 0 0 0 $typing.Optional[typing.List[builtins.int]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[typing.List[builtins.int]]$ 0 0 0 $typing.Any$ 0 0 0 $django.db.models.QuerySet$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0
from typing import Optional , Any [EOL] import typing [EOL] import builtins [EOL] import server [EOL] import argparse [EOL] from argparse import Namespace [EOL] from typing import Any , Optional [EOL] [EOL] [EOL] class OpenSlidesArguments : [EOL] args = None [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] if not self . args : [EOL] raise KeyError ( [string] ) [EOL] if not hasattr ( self . args , key ) : [EOL] raise KeyError ( f" [string] { key } [string] " ) [EOL] return getattr ( self . args , key ) [EOL] [EOL] def get ( self , key , default ) : [EOL] if not self . args or not hasattr ( self . args , key ) : [EOL] return default [EOL] else : [EOL] return getattr ( self . args , key ) [EOL] [EOL] def set_arguments ( self , args ) : [EOL] self . args = args [EOL] [EOL] [EOL] arguments = OpenSlidesArguments ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[argparse.Namespace]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $typing.Optional[argparse.Namespace]$ 0 0 0 0 0 $typing.Optional[argparse.Namespace]$ 0 $typing.Optional[argparse.Namespace]$ 0 0 0 $server.openslides.utils.arguments.OpenSlidesArguments$ 0 0 0 0 0
from typing import MutableMapping , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging as python_logging [EOL] from typing import Any , MutableMapping , Tuple [EOL] [EOL] from . utils import get_worker_id [EOL] [EOL] [EOL] class LoggerAdapter ( python_logging . LoggerAdapter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , prefix , logger ) : [EOL] super ( ) . __init__ ( logger , { } ) [EOL] self . prefix = prefix [EOL] [EOL] def process ( self , msg , kwargs ) : [EOL] return f" [string] { self . prefix } [string] { msg }" , kwargs [EOL] [EOL] [EOL] def getLogger ( name ) : [EOL] [docstring] [EOL] logger = python_logging . getLogger ( name ) [EOL] return LoggerAdapter ( get_worker_id ( ) , logger ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,typing.MutableMapping[builtins.str,typing.Any]]$ 0 0 0 $builtins.str$ 0 $typing.MutableMapping[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.MutableMapping[builtins.str,typing.Any]$ 0 0 0 0 $LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable , List [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Callable [EOL] [EOL] from django . contrib . auth . models import Permission [EOL] from django . contrib . contenttypes . models import ContentType [EOL] [EOL] [EOL] def add_permission_to_groups_based_on_existing_permission ( codename , model , app_label , new_codename , new_name ) : [EOL] [docstring] [EOL] [EOL] def function ( apps , schema_editor ) : [EOL] content_type = ContentType . objects . filter ( model = model , app_label = app_label ) [EOL] base_perm = Permission . objects . filter ( codename = codename , content_type__in = content_type ) [EOL] [EOL] if len ( base_perm ) == [number] and len ( content_type ) == [number] : [EOL] [comment] [EOL] base_perm = base_perm . get ( ) [EOL] content_type = content_type . get ( ) [EOL] [EOL] [comment] [EOL] groups = list ( base_perm . group_set . all ( ) ) [EOL] [EOL] [comment] [EOL] perm = Permission . objects . create ( codename = new_codename , name = new_name , content_type = content_type ) [EOL] [EOL] [comment] [EOL] for group in groups : [EOL] group . permissions . add ( perm ) [EOL] group . save ( ) [EOL] [EOL] return function [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any,typing.Any],None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from django . db import connection [EOL] [EOL] [EOL] def restart_id_sequence ( table_name ) : [EOL] [docstring] [EOL] if connection . vendor == [string] : [EOL] with connection . cursor ( ) as cursor : [EOL] cursor . execute ( f" [string] { table_name } [string] " ) [EOL] max_id = cursor . fetchone ( ) [ [number] ] [EOL] if max_id is not None : [EOL] cursor . execute ( f" [string] { table_name } [string] { max_id } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Dict [EOL] [EOL] from django . apps import apps [EOL] [EOL] [EOL] def get_constants_from_apps ( ) : [EOL] out = { } [EOL] for app in apps . get_app_configs ( ) : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] get_angular_constants = app . get_angular_constants [EOL] except AttributeError : [EOL] [comment] [EOL] continue [EOL] out . update ( get_angular_constants ( ) ) [EOL] return out [EOL] [EOL] [EOL] constants = None [EOL] [EOL] [EOL] def get_constants ( ) : [EOL] [docstring] [EOL] if constants is None : [EOL] raise RuntimeError ( [string] ) [EOL] return constants [EOL] [EOL] [EOL] def set_constants ( value ) : [EOL] [docstring] [EOL] global constants [EOL] constants = value [EOL] [EOL] [EOL] def set_constants_from_apps ( ) : [EOL] set_constants ( get_constants_from_apps ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Type , Any , List , Union [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import server [EOL] import asyncio [EOL] import time [EOL] from typing import List , Optional [EOL] [EOL] from . import logging [EOL] [EOL] [EOL] class WebsocketLatencyLogger : [EOL] [docstring] [EOL] [EOL] lock = asyncio . Lock ( ) [EOL] [docstring] [EOL] [EOL] instance = None [EOL] [docstring] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . reset ( ) [EOL] [EOL] @ classmethod async def add_latency ( cls , latency ) : [EOL] [docstring] [EOL] [comment] [EOL] if cls . instance is None : [EOL] cls . instance = cls ( ) [EOL] await cls . instance . _add_latency ( latency ) [EOL] [EOL] async def _add_latency ( self , latency ) : [EOL] async with self . lock : [EOL] self . latencies . append ( latency ) [EOL] [EOL] [comment] [EOL] current_time = time . time ( ) [EOL] if current_time > ( self . time + [number] ) : [EOL] self . flush ( ) [EOL] return [EOL] [EOL] [comment] [EOL] if len ( self . latencies ) > [number] : [EOL] self . flush ( ) [EOL] [EOL] def flush ( self ) : [EOL] [docstring] [EOL] N = len ( self . latencies ) [EOL] mean = sum ( self . latencies ) / N [EOL] std = sum ( ( latency - mean ) ** [number] for latency in self . latencies ) [EOL] self . logger . debug ( f" [string] { N } [string] { mean : [string] } [string] { std : [string] }" ) [EOL] [EOL] self . reset ( ) [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] self . latencies = [ ] [EOL] self . time = time . time ( ) [EOL] [EOL] [EOL] class WebsocketThroughputLogger : [EOL] [docstring] [EOL] [EOL] lock = asyncio . Lock ( ) [EOL] [docstring] [EOL] [EOL] instance = None [EOL] [docstring] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . reset ( ) [EOL] [EOL] @ classmethod async def send ( cls , uncompressed , compressed = None ) : [EOL] [comment] [EOL] async with cls . lock : [EOL] if cls . instance is None : [EOL] cls . instance = cls ( ) [EOL] if compressed is None : [EOL] compressed = uncompressed [EOL] cls . instance . send_uncompressed += int ( uncompressed / [number] ) [EOL] cls . instance . send_compressed += int ( compressed / [number] ) [EOL] await cls . instance . check_and_flush ( ) [EOL] [EOL] @ classmethod async def receive ( cls , uncompressed , compressed = None ) : [EOL] [comment] [EOL] async with cls . lock : [EOL] if cls . instance is None : [EOL] cls . instance = cls ( ) [EOL] if compressed is None : [EOL] compressed = uncompressed [EOL] cls . instance . receive_uncompressed += uncompressed [EOL] cls . instance . receive_compressed += compressed [EOL] await cls . instance . check_and_flush ( ) [EOL] [EOL] async def check_and_flush ( self ) : [EOL] [comment] [EOL] current_time = time . time ( ) [EOL] if current_time > ( self . time + [number] ) : [EOL] [EOL] send_ratio = receive_ratio = [number] [EOL] if self . send_compressed > [number] : [EOL] send_ratio = self . send_uncompressed / self . send_compressed [EOL] if self . receive_compressed > [number] : [EOL] receive_ratio = self . receive_uncompressed / self . receive_compressed [EOL] [EOL] self . logger . debug ( f" [string] { self . send_uncompressed } [string] " f" [string] { self . send_compressed } [string] " f" [string] { send_ratio : [string] } [string] " f" [string] { self . receive_uncompressed } [string] " f" [string] { self . receive_compressed } [string] " f" [string] { receive_ratio : [string] }" ) [EOL] self . reset ( ) [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] self . send_compressed = [number] [EOL] self . send_uncompressed = [number] [EOL] self . receive_compressed = [number] [EOL] self . receive_uncompressed = [number] [EOL] self . time = time . time ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import builtins [EOL] import aioredis [EOL] import server [EOL] import asyncio [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] import aioredis [EOL] from channels_redis . core import ConnectionPool as ChannelRedisConnectionPool [EOL] from django . conf import settings [EOL] [EOL] from . import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] connection_pool_limit = getattr ( settings , [string] , [number] ) [EOL] logger . info ( f" [string] { connection_pool_limit }" ) [EOL] [EOL] [EOL] class InvalidConnection ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ConnectionPool ( ChannelRedisConnectionPool ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , host ) : [EOL] self . counter = [number] [EOL] super ( ) . __init__ ( host ) [EOL] [EOL] async def pop ( self , * args , ** kwargs ) : [EOL] while self . counter > connection_pool_limit : [EOL] await asyncio . sleep ( [number] ) [EOL] self . counter += [number] [EOL] [EOL] return await self . pop_ensured_connection ( * args , ** kwargs ) [EOL] [EOL] async def pop_ensured_connection ( self , * args , ** kwargs ) : [EOL] redis = None [EOL] [EOL] while redis is None : [EOL] redis = await super ( ) . pop ( * args , ** kwargs ) [EOL] [EOL] try : [EOL] await self . try_ping ( redis ) [EOL] except InvalidConnection : [EOL] if redis is not None : [EOL] super ( ) . conn_error ( redis ) [EOL] redis = None [EOL] [EOL] return redis [EOL] [EOL] async def try_ping ( self , redis ) : [EOL] try : [EOL] pong = await redis . ping ( ) [EOL] if pong != [string] : [EOL] logger . info ( [string] ) [EOL] raise InvalidConnection ( ) [EOL] except ( ConnectionRefusedError , ConnectionResetError ) : [EOL] logger . info ( [string] ) [EOL] raise InvalidConnection ( ) [EOL] [EOL] def push ( self , conn ) : [EOL] super ( ) . push ( conn ) [EOL] self . counter -= [number] [EOL] [EOL] def conn_error ( self , conn ) : [EOL] super ( ) . conn_error ( conn ) [EOL] self . counter -= [number] [EOL] [EOL] def reset ( self ) : [EOL] super ( ) . reset ( ) [EOL] self . counter = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 $typing.Any$ 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 0 0 0 $aioredis.commands.Redis$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
class OpenSlidesError ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Callable , List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] import os [EOL] from collections import defaultdict [EOL] from typing import Callable , Dict , List [EOL] [EOL] from django . apps import apps [EOL] [EOL] from . import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def run_startup_hooks ( ) : [EOL] [docstring] [EOL] if os . environ . get ( [string] ) : [EOL] return [EOL] [EOL] startup_hooks = defaultdict ( list ) [EOL] for app in apps . get_app_configs ( ) : [EOL] try : [EOL] get_startup_hooks = app . get_startup_hooks [EOL] except AttributeError : [EOL] [comment] [EOL] continue [EOL] app_hooks = get_startup_hooks ( ) [EOL] for weight , hooks in app_hooks . items ( ) : [EOL] if not isinstance ( hooks , list ) : [EOL] hooks = [ hooks ] [EOL] startup_hooks [ weight ] . extend ( hooks ) [EOL] [EOL] for weight in sorted ( startup_hooks . keys ( ) ) : [EOL] for hook in startup_hooks [ weight ] : [EOL] logger . debug ( f' [string] { hook . __name__ } [string] ' ) [EOL] hook ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import server [EOL] from typing import Any [EOL] [EOL] from django . conf import settings [EOL] [EOL] from . import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] use_redis = False [EOL] use_read_only_redis = False [EOL] read_only_redis_amount_replicas = None [EOL] read_only_redis_wait_timeout = None [EOL] [EOL] try : [EOL] import aioredis [EOL] except ImportError : [EOL] pass [EOL] else : [EOL] from . redis_connection_pool import ConnectionPool [EOL] [EOL] [comment] [EOL] redis_address = getattr ( settings , [string] , [string] ) [EOL] use_redis = bool ( redis_address ) [EOL] [EOL] if use_redis : [EOL] logger . info ( f" [string] { redis_address }" ) [EOL] pool = ConnectionPool ( { [string] : redis_address } ) [EOL] [EOL] redis_read_only_address = getattr ( settings , [string] , [string] ) [EOL] use_read_only_redis = bool ( redis_read_only_address ) [EOL] if use_read_only_redis : [EOL] logger . info ( f" [string] { redis_read_only_address }" ) [EOL] read_only_pool = ConnectionPool ( { [string] : redis_read_only_address } ) [EOL] [EOL] read_only_redis_amount_replicas = getattr ( settings , [string] , [number] ) [EOL] logger . info ( f" [string] { read_only_redis_amount_replicas }" ) [EOL] read_only_redis_wait_timeout = getattr ( settings , [string] , [number] ) [EOL] logger . info ( f" [string] { read_only_redis_wait_timeout }" ) [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] class RedisConnectionContextManager : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , read_only ) : [EOL] self . pool = read_only_pool if read_only and use_read_only_redis else pool [EOL] [EOL] async def __aenter__ ( self ) : [EOL] self . conn = await self . pool . pop ( ) [EOL] return self . conn [EOL] [EOL] async def __aexit__ ( self , exc_type , exc , tb ) : [EOL] if exc : [EOL] logger . warn ( f" [string] { exc } [string] " ) [EOL] self . pool . conn_error ( self . conn ) [EOL] else : [EOL] self . pool . push ( self . conn ) [EOL] self . conn = None [EOL] [EOL] [EOL] def get_connection ( read_only = False ) : [EOL] [docstring] [EOL] return RedisConnectionContextManager ( read_only ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.bool$ 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 $"aioredis.RedisConnection"$ 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.redis_connection_pool.ConnectionPool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $RedisConnectionContextManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] import time [EOL] from typing import List , Optional [EOL] [EOL] from . import logging [EOL] [EOL] [EOL] timelogger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Timing : [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] self . times = [ time . time ( ) ] [EOL] [EOL] def __call__ ( self , done = False ) : [EOL] self . times . append ( time . time ( ) ) [EOL] if done : [EOL] self . printtime ( ) [EOL] [EOL] def printtime ( self ) : [EOL] s = f"{ self . name } [string] " [EOL] for i in range ( [number] , len ( self . times ) ) : [EOL] diff = self . times [ i ] - self . times [ i - [number] ] [EOL] s += f"{ i } [string] { diff : [string] } [string] " [EOL] diff = self . times [ - [number] ] - self . times [ [number] ] [EOL] s += f" [string] { diff : [string] }" [EOL] timelogger . info ( s ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.float$ 0 0 0 0 $server.openslides.utils.logging.LoggerAdapter$ 0 0 0 $builtins.str$ 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import pkgutil [EOL] import sys [EOL] from typing import Any , List , Tuple [EOL] [EOL] from django . apps import apps [EOL] from django . conf import settings [EOL] from pkg_resources import iter_entry_points [EOL] [EOL] from openslides . utils . main import ( WINDOWS_PORTABLE_VERSION , detect_openslides_type , get_win32_portable_user_data_dir , ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def collect_plugins_from_entry_points ( ) : [EOL] [docstring] [EOL] return tuple ( entry_point . module_name for entry_point in iter_entry_points ( [string] ) ) [EOL] [EOL] [EOL] def collect_plugins_from_dir ( plugin_dir ) : [EOL] [docstring] [EOL] return tuple ( x [ [number] ] for x in pkgutil . iter_modules ( [ plugin_dir ] ) ) [EOL] [EOL] [EOL] def collect_plugins ( ) : [EOL] [docstring] [EOL] [comment] [EOL] collected_plugins = collect_plugins_from_entry_points ( ) [EOL] [EOL] [comment] [EOL] if detect_openslides_type ( ) == WINDOWS_PORTABLE_VERSION : [EOL] plugins_dir = os . path . join ( get_win32_portable_user_data_dir ( ) , [string] ) [EOL] if plugins_dir not in sys . path : [EOL] sys . path . append ( plugins_dir ) [EOL] collected_plugins += collect_plugins_from_dir ( plugins_dir ) [EOL] [EOL] return collected_plugins [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def get_plugin_verbose_name ( plugin ) : [EOL] [docstring] [EOL] return apps . get_app_config ( plugin ) . verbose_name [EOL] [EOL] [EOL] def get_plugin_description ( plugin ) : [EOL] [docstring] [EOL] plugin_app_config = apps . get_app_config ( plugin ) [EOL] try : [EOL] description = plugin_app_config . get_description ( ) [EOL] except AttributeError : [EOL] try : [EOL] description = plugin_app_config . description [EOL] except AttributeError : [EOL] description = [string] [EOL] return description [EOL] [EOL] [EOL] def get_plugin_version ( plugin ) : [EOL] [docstring] [EOL] plugin_app_config = apps . get_app_config ( plugin ) [EOL] try : [EOL] version = plugin_app_config . get_version ( ) [EOL] except AttributeError : [EOL] try : [EOL] version = plugin_app_config . version [EOL] except AttributeError : [EOL] version = [string] [EOL] return version [EOL] [EOL] [EOL] def get_plugin_license ( plugin ) : [EOL] [docstring] [EOL] plugin_app_config = apps . get_app_config ( plugin ) [EOL] try : [EOL] license = plugin_app_config . get_license ( ) [EOL] except AttributeError : [EOL] try : [EOL] license = plugin_app_config . license [EOL] except AttributeError : [EOL] license = [string] [EOL] return license [EOL] [EOL] [EOL] def get_plugin_url ( plugin ) : [EOL] [docstring] [EOL] plugin_app_config = apps . get_app_config ( plugin ) [EOL] try : [EOL] url = plugin_app_config . get_url ( ) [EOL] except AttributeError : [EOL] try : [EOL] url = plugin_app_config . url [EOL] except AttributeError : [EOL] url = [string] [EOL] return url [EOL] [EOL] [EOL] def get_plugin_urlpatterns ( plugin ) : [EOL] [docstring] [EOL] plugin_app_config = apps . get_app_config ( plugin ) [EOL] try : [EOL] urlpatterns = plugin_app_config . get_urlpatterns ( ) [EOL] except AttributeError : [EOL] try : [EOL] urlpatterns = plugin_app_config . urlpatterns [EOL] except AttributeError : [EOL] urlpatterns = None [EOL] return urlpatterns [EOL] [EOL] [EOL] def get_all_plugin_urlpatterns ( ) : [EOL] [docstring] [EOL] urlpatterns = [ ] [EOL] for plugin in settings . INSTALLED_PLUGINS : [EOL] plugin_urlpatterns = get_plugin_urlpatterns ( plugin ) [EOL] if plugin_urlpatterns : [EOL] urlpatterns += plugin_urlpatterns [EOL] return urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from openslides . utils . exceptions import OpenSlidesError [EOL] [EOL] [EOL] class WorkflowError ( OpenSlidesError ) : [EOL] [docstring] [EOL] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] def change_motions_comments ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] Motion = apps . get_model ( [string] , [string] ) [EOL] [EOL] try : [EOL] config_comments_fields = ConfigStore . objects . get ( key = [string] ) . value [EOL] except ConfigStore . DoesNotExist : [EOL] config_comments_fields = [ ] [comment] [EOL] [EOL] comments_fields = { } [EOL] for index , field in enumerate ( config_comments_fields ) : [EOL] comments_fields [ index + [number] ] = field [EOL] [EOL] max_index = len ( config_comments_fields ) - [number] [EOL] [EOL] try : [EOL] db_value = ConfigStore . objects . get ( key = [string] ) [EOL] except ConfigStore . DoesNotExist : [EOL] db_value = ConfigStore ( key = [string] ) [EOL] db_value . value = comments_fields [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] db_value . save ( ) [EOL] [EOL] for motion in Motion . objects . all ( ) : [EOL] comments = { } [EOL] for index , comment in enumerate ( motion . comments or [ ] ) : [EOL] if index > max_index : [EOL] break [EOL] comments [ index + [number] ] = comment [EOL] motion . comments = comments [EOL] motion . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( change_motions_comments ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def transform_required_permission_to_see_field ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] State = apps . get_model ( [string] , [string] ) [EOL] for state in State . objects . all ( ) : [EOL] if state . required_permission_to_see : [EOL] state . access_level = [number] [EOL] state . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( transform_required_permission_to_see_field ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def copy_motion_version_content_to_motion ( apps , schema_editor ) : [EOL] [docstring] [EOL] Motion = apps . get_model ( [string] , [string] ) [EOL] [EOL] for motion in Motion . objects . all ( ) : [EOL] motion . title = motion . active_version . title [EOL] motion . text = motion . active_version . text [EOL] motion . reason = motion . active_version . reason [EOL] motion . modified_final_version = motion . active_version . modified_final_version [EOL] motion . amendment_paragraphs = motion . active_version . amendment_paragraphs [EOL] motion . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] def migrate_active_change_recommendations ( apps , schema_editor ) : [EOL] [docstring] [EOL] MotionChangeRecommendation = apps . get_model ( [string] , [string] ) [EOL] to_delete = [ ] [EOL] for cr in MotionChangeRecommendation . objects . all ( ) : [EOL] [comment] [EOL] if cr . motion_version . id == cr . motion_version . motion . active_version . id : [EOL] cr . motion = cr . motion_version . motion [EOL] cr . save ( skip_autoupdate = True ) [EOL] else : [EOL] to_delete . append ( cr ) [EOL] [EOL] [comment] [EOL] for cr in to_delete : [EOL] cr . delete ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( copy_motion_version_content_to_motion ) , migrations . RunPython ( migrate_active_change_recommendations ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] import django . db . models . deletion [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import Permission [EOL] from django . db import migrations , models [EOL] [EOL] import openslides [EOL] [EOL] [EOL] def create_comment_sections_from_config_and_move_comments_to_own_model ( apps , schema_editor ) : [EOL] ConfigStore = apps . get_model ( [string] , [string] ) [EOL] Motion = apps . get_model ( [string] , [string] ) [EOL] MotionComment = apps . get_model ( [string] , [string] ) [EOL] MotionCommentSection = apps . get_model ( [string] , [string] ) [EOL] Group = apps . get_model ( settings . AUTH_GROUP_MODEL ) [EOL] [EOL] [comment] [EOL] try : [EOL] motions_comments = ConfigStore . objects . get ( key = [string] ) [EOL] except ConfigStore . DoesNotExist : [EOL] return [EOL] comments_sections = motions_comments . value [EOL] [EOL] [comment] [EOL] motions_comments . delete ( ) [EOL] [EOL] [comment] [EOL] can_see_comments = Permission . objects . filter ( codename = [string] ) [EOL] if len ( can_see_comments ) == [number] : [EOL] [comment] [EOL] can_see_groups = list ( can_see_comments . get ( ) . group_set . all ( ) ) [EOL] else : [EOL] can_see_groups = Group . objects . all ( ) [EOL] [EOL] can_manage_comments = Permission . objects . filter ( codename = [string] ) [EOL] if len ( can_manage_comments ) == [number] : [EOL] [comment] [EOL] can_manage_groups = list ( can_manage_comments . get ( ) . group_set . all ( ) ) [EOL] else : [EOL] can_manage_groups = Group . objects . all ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] old_id_mapping = { } [EOL] [comment] [EOL] [comment] [EOL] forStateId = None [EOL] forRecommendationId = None [EOL] for id , section in comments_sections . items ( ) : [EOL] if section is None : [EOL] continue [EOL] if section . get ( [string] , False ) : [EOL] forStateId = id [EOL] elif section . get ( [string] , False ) : [EOL] forRecommendationId = id [EOL] else : [EOL] comment_section = MotionCommentSection ( name = section [ [string] ] ) [EOL] comment_section . save ( skip_autoupdate = True ) [EOL] comment_section . read_groups . add ( * [ group . id for group in can_see_groups ] ) [EOL] comment_section . write_groups . add ( * [ group . id for group in can_manage_groups ] ) [EOL] old_id_mapping [ id ] = comment_section [EOL] [EOL] [comment] [EOL] comments = [ ] [EOL] for motion in Motion . objects . all ( ) : [EOL] if not isinstance ( motion . comments , dict ) : [EOL] continue [EOL] [EOL] for section_id , comment_value in motion . comments . items ( ) : [EOL] [comment] [EOL] comment_value = comment_value . strip ( ) [EOL] if comment_value == [string] : [EOL] continue [EOL] [comment] [EOL] if section_id == forStateId : [EOL] motion . state_extension = comment_value [EOL] motion . save ( skip_autoupdate = True ) [EOL] elif section_id == forRecommendationId : [EOL] motion . recommendation_extension = comment_value [EOL] motion . save ( skip_autoupdate = True ) [EOL] else : [EOL] comment = MotionComment ( comment = comment_value , motion = motion , section = old_id_mapping [ section_id ] , ) [EOL] comments . append ( comment ) [EOL] MotionComment . objects . bulk_create ( comments ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . TextField ( blank = True , null = True ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . TextField ( blank = True , null = True ) , ) , migrations . AlterModelOptions ( name = [string] , options = { [string] : ( ) , [string] : ( [string] , ) , [string] : ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , [string] : [string] , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . TextField ( ) ) , ] , options = { [string] : ( ) } , bases = ( openslides . utils . models . RESTModelMixin , models . Model , ) , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . ManyToManyField ( blank = True , related_name = [string] , to = settings . AUTH_GROUP_MODEL , ) , ) , ( [string] , models . ManyToManyField ( blank = True , related_name = [string] , to = settings . AUTH_GROUP_MODEL , ) , ) , ] , options = { [string] : ( ) } , bases = ( openslides . utils . models . RESTModelMixin , models . Model , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . PROTECT , related_name = [string] , to = [string] , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } ) , migrations . RunPython ( create_comment_sections_from_config_and_move_comments_to_own_model ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def rename_manager_restriction ( apps , schema_editor ) : [EOL] [docstring] [EOL] State = apps . get_model ( [string] , [string] ) [EOL] for state in State . objects . all ( ) : [EOL] for i in range ( len ( state . restriction ) ) : [EOL] if state . restriction [ i ] == [string] : [EOL] state . restriction [ i ] = [string] [EOL] state . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( rename_manager_restriction ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] def copy_access_level ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] State = apps . get_model ( [string] , [string] ) [EOL] for state in State . objects . all ( ) : [EOL] if state . access_level == [number] : [EOL] state . restriction = [ [string] ] [EOL] elif state . access_level == [number] : [EOL] state . restriction = [ [string] , [string] , ] [EOL] elif state . access_level == [number] : [EOL] state . restriction = [ [string] , [string] , [string] , ] [EOL] state . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( copy_access_level ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from decimal import Decimal [EOL] [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . DecimalField ( blank = True , decimal_places = [number] , max_digits = [number] , null = True , validators = [ django . core . validators . MinValueValidator ( Decimal ( [string] ) ) ] , ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . DecimalField ( blank = True , decimal_places = [number] , max_digits = [number] , null = True , validators = [ django . core . validators . MinValueValidator ( Decimal ( [string] ) ) ] , ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . DecimalField ( blank = True , decimal_places = [number] , max_digits = [number] , null = True , validators = [ django . core . validators . MinValueValidator ( Decimal ( [string] ) ) ] , ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . DecimalField ( decimal_places = [number] , default = Decimal ( [string] ) , max_digits = [number] , null = True , validators = [ django . core . validators . MinValueValidator ( Decimal ( [string] ) ) ] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] LABEL_MAPPING = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def rename_css_classes ( apps , schema_editor ) : [EOL] State = apps . get_model ( [string] , [string] ) [EOL] [EOL] for state in State . objects . all ( ) : [EOL] old_class = state . css_class [EOL] state . css_class = LABEL_MAPPING . get ( old_class , [string] ) [EOL] state . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( rename_css_classes ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from openslides . users . user_backend import BaseUserBackend [EOL] [EOL] from . settings import get_saml_settings [EOL] [EOL] [EOL] class SamlUserBackend ( BaseUserBackend ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . disallowed_update_keys = [ os_attribute for os_attribute , _ in get_saml_settings ( ) . attribute_mapping . values ( ) ] [EOL] [EOL] @ property def name ( self ) : [EOL] return [string] [EOL] [EOL] def get_disallowed_update_keys ( self ) : [EOL] return self . disallowed_update_keys [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import json [EOL] import logging [EOL] import os [EOL] from typing import Dict , Tuple [EOL] [EOL] from django . conf import settings [EOL] from onelogin . saml2 . settings import OneLogin_Saml2_Settings [EOL] [EOL] from . exceptions import SamlException [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] README = [string] [EOL] [EOL] [EOL] def get_settings_dir_and_path ( ) : [EOL] [docstring] [EOL] try : [EOL] settings_dir = os . path . dirname ( os . path . abspath ( settings . SETTINGS_FILEPATH ) ) [EOL] except AttributeError : [EOL] raise SamlException ( [string] + [string] ) [EOL] settings_path = os . path . join ( settings_dir , [string] ) [EOL] return settings_dir , settings_path [EOL] [EOL] [EOL] def create_saml_settings ( settings_path = None , template = None , ** context ) : [EOL] [docstring] [EOL] [comment] [EOL] if settings_path is None : [EOL] [comment] [EOL] _ , settings_path = get_settings_dir_and_path ( ) [EOL] if os . path . isfile ( settings_path ) : [EOL] return [comment] [EOL] [EOL] [comment] [EOL] settings_path = os . path . realpath ( settings_path ) [EOL] if template is None : [EOL] with open ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) as template_file : [EOL] template = template_file . read ( ) [EOL] content = template % context [EOL] with open ( settings_path , [string] ) as settings_file : [EOL] settings_file . write ( content ) [EOL] [EOL] [comment] [EOL] cert_dir = os . path . join ( os . path . dirname ( settings_path ) , [string] ) [EOL] os . makedirs ( cert_dir , exist_ok = True ) [EOL] [EOL] [comment] [EOL] readme_path = os . path . join ( cert_dir , [string] ) [EOL] if not os . path . isfile ( readme_path ) : [EOL] with open ( readme_path , [string] ) as readme : [EOL] readme . write ( README ) [EOL] logger . info ( f" [string] { cert_dir }" ) [EOL] logger . info ( f" [string] { settings_path }" ) [EOL] [EOL] [EOL] class SamlSettings : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] create_saml_settings ( ) [EOL] self . load_settings ( ) [EOL] [EOL] def load_settings ( self ) : [EOL] [comment] [EOL] content = None [EOL] settings_dir , settings_path = get_settings_dir_and_path ( ) [EOL] try : [EOL] with open ( settings_path , [string] ) as settings_file : [EOL] content = json . load ( settings_file ) [EOL] except IOError : [EOL] raise SamlException ( f" [string] { settings_path }" ) [EOL] except json . JSONDecodeError : [EOL] raise SamlException ( f" [string] { settings_path } [string] " ) [EOL] logger . info ( f" [string] { settings_path }" ) [EOL] [EOL] [comment] [EOL] self . load_general_settings ( content ) [EOL] self . load_attribute_mapping ( content ) [EOL] self . load_request_settings ( content ) [EOL] self . load_default_group_ids ( content ) [EOL] [EOL] [comment] [EOL] self . saml_settings = OneLogin_Saml2_Settings ( content , custom_base_path = settings_dir ) [EOL] [EOL] def load_general_settings ( self , content ) : [EOL] if [string] not in content : [EOL] raise SamlException ( [string] ) [EOL] self . general_settings = content . pop ( [string] ) [EOL] [EOL] if not isinstance ( self . general_settings , dict ) : [EOL] raise SamlException ( [string] ) [EOL] if [string] not in self . general_settings : [EOL] raise SamlException ( [string] ) [EOL] if not isinstance ( self . general_settings [ [string] ] , str ) : [EOL] raise SamlException ( [string] ) [EOL] if [string] not in self . general_settings : [EOL] raise SamlException ( [string] ) [EOL] if not isinstance ( self . general_settings [ [string] ] , str ) : [EOL] raise SamlException ( [string] ) [EOL] [EOL] def load_attribute_mapping ( self , content ) : [EOL] if [string] not in content : [EOL] raise SamlException ( [string] ) [EOL] self . attribute_mapping = content . pop ( [string] ) [EOL] [EOL] allowed_attributes = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] one_lookup_true = False [EOL] if not isinstance ( self . attribute_mapping , dict ) : [EOL] raise SamlException ( [string] ) [EOL] for key , value in self . attribute_mapping . items ( ) : [EOL] if not isinstance ( key , str ) : [EOL] raise SamlException ( f' [string] { key } [string] ' ) [EOL] if not isinstance ( value , list ) : [EOL] raise SamlException ( f' [string] { key } [string] ' ) [EOL] if not len ( value ) == [number] : [EOL] raise SamlException ( f' [string] { key } [string] ' ) [EOL] os_attribute , lookup = value [EOL] if not isinstance ( os_attribute , str ) : [EOL] raise SamlException ( f' [string] { key } [string] ' ) [EOL] if os_attribute not in allowed_attributes : [EOL] all_attrs = [string] . join ( allowed_attributes ) [EOL] raise SamlException ( f" [string] { os_attribute } [string] { all_attrs }" ) [EOL] if not isinstance ( value [ [number] ] , bool ) : [EOL] raise SamlException ( f' [string] { key } [string] ' ) [EOL] if value [ [number] ] : [EOL] one_lookup_true = True [EOL] [EOL] if not one_lookup_true : [EOL] raise SamlException ( [string] ) [EOL] [EOL] def load_request_settings ( self , content ) : [EOL] self . request_settings = { } [EOL] if [string] in content : [EOL] self . request_settings = content . pop ( [string] ) [EOL] [EOL] if not isinstance ( self . request_settings , dict ) : [EOL] raise SamlException ( [string] ) [EOL] if [string] in self . request_settings and self . request_settings [ [string] ] not in ( [string] , [string] ) : [EOL] raise SamlException ( [string] ) [EOL] [EOL] def load_default_group_ids ( self , content ) : [EOL] self . default_group_ids = content . pop ( [string] , None ) [EOL] if self . default_group_ids is None : [EOL] return [EOL] if not isinstance ( self . default_group_ids , list ) : [EOL] raise SamlException ( [string] ) [EOL] for id in self . default_group_ids : [EOL] if not isinstance ( id , int ) : [EOL] raise SamlException ( [string] ) [EOL] [EOL] [EOL] saml_settings = None [EOL] [EOL] [EOL] def get_saml_settings ( ) : [EOL] global saml_settings [EOL] return saml_settings [EOL] [EOL] [EOL] def load_settings ( ) : [EOL] global saml_settings [EOL] saml_settings = SamlSettings ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] [EOL] from . exceptions import SamlException [EOL] [EOL] [EOL] default_app_config = [string] [EOL] [EOL] [EOL] SAML_ENABLED = getattr ( settings , [string] , False ) [EOL] [EOL] if SAML_ENABLED : [EOL] try : [EOL] import onelogin . saml2 [comment] [EOL] except ImportError : [EOL] raise SamlException ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import logging [EOL] import server [EOL] import logging [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] from . import SAML_ENABLED [EOL] from . user_backend import SamlUserBackend [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class SamlAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] user_backend_class = SamlUserBackend [EOL] [EOL] def get_angular_constants ( self ) : [EOL] from . settings import get_saml_settings [EOL] [EOL] return { [string] : get_saml_settings ( ) . general_settings } [EOL] [EOL] def get_startup_hooks ( self ) : [EOL] return { [number] : saml_startup } [EOL] [EOL] [EOL] def saml_startup ( ) : [EOL] [comment] [EOL] from . settings import load_settings [EOL] [EOL] if not SAML_ENABLED : [EOL] logger . info ( [string] ) [EOL] return [EOL] [EOL] load_settings ( ) [EOL] [EOL] logger . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[server.openslides.saml.user_backend.SamlUserBackend]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
from openslides . utils . exceptions import OpenSlidesError [EOL] [EOL] [EOL] class SamlException ( OpenSlidesError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from . . . settings import create_saml_settings , get_settings_dir_and_path [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [docstring] [EOL] [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , default = None , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] settings_dir = options . get ( [string] ) [EOL] [EOL] if settings_dir is not None : [EOL] settings_path = os . path . join ( settings_dir , [string] ) [EOL] if not os . path . isdir ( settings_path ) : [EOL] print ( f" [string] { settings_dir } [string] " ) [EOL] return [EOL] else : [EOL] _ , settings_path = get_settings_dir_and_path ( ) [EOL] create_saml_settings ( settings_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Optional , Any , List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] from django . apps import apps [EOL] [EOL] from openslides . utils import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class UserBackendException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class BaseUserBackend : [EOL] [docstring] [EOL] [EOL] @ property def name ( self ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def get_disallowed_update_keys ( self ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def for_client ( self ) : [EOL] return { [string] : self . get_disallowed_update_keys ( ) } [EOL] [EOL] [EOL] class DefaultUserBackend ( BaseUserBackend ) : [EOL] [docstring] [EOL] [EOL] @ property def name ( self ) : [EOL] return [string] [EOL] [EOL] def get_disallowed_update_keys ( self ) : [EOL] return [ ] [EOL] [EOL] [EOL] class UserBackendManager : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . backends = { } [EOL] [EOL] def collect_backends_from_apps ( self ) : [EOL] [docstring] [EOL] for app in apps . get_app_configs ( ) : [EOL] user_backend_class = getattr ( app , [string] , None ) [EOL] if user_backend_class : [EOL] self . register_user_backend ( user_backend_class ( ) ) [EOL] [EOL] def register_user_backend ( self , backend ) : [EOL] [docstring] [EOL] if backend . name in self . backends : [EOL] raise UserBackendException ( f" [string] { backend . name } [string] " ) [EOL] self . backends [ backend . name ] = backend [EOL] logger . debug ( f' [string] { backend . name } [string] ' ) [EOL] [EOL] def get_backend ( self , name ) : [EOL] if name not in self . backends : [EOL] all_backend_names = [string] . join ( self . backends . keys ( ) ) [EOL] raise UserBackendException ( f' [string] { name } [string] { all_backend_names } [string] ' ) [EOL] return self . backends [ name ] [EOL] [EOL] def get_backends_for_client ( self ) : [EOL] [docstring] [EOL] return { name : backend . for_client ( ) for name , backend in self . backends . items ( ) } [EOL] [EOL] [EOL] user_backend_manager = UserBackendManager ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,BaseUserBackend]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $BaseUserBackend$ 0 0 0 0 0 0 $BaseUserBackend$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $BaseUserBackend$ 0 0 0 0 0 0 0 0 0 0 0 $BaseUserBackend$ 0 0 0 0 $BaseUserBackend$ 0 $typing.Any$ 0 0 0 0 0 0 $BaseUserBackend$ 0 0 0 0 0 0 0 0 0 $typing.Optional[BaseUserBackend]$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.openslides.users.user_backend.UserBackendManager$ 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] def migrate_groups_and_user_permissions ( apps , schema_editor ) : [EOL] [docstring] [EOL] User = apps . get_model ( [string] , [string] ) [EOL] Group = apps . get_model ( [string] , [string] ) [EOL] [EOL] try : [EOL] group_default = Group . objects . get ( pk = [number] ) [EOL] group_registered = Group . objects . get ( pk = [number] ) [EOL] except Group . DoesNotExist : [EOL] [comment] [EOL] pass [EOL] else : [EOL] if ( group_default . name == [string] [EOL] and group_registered . name == [string] ) : [EOL] [comment] [EOL] group_default . name = [string] [EOL] group_default . save ( ) [EOL] group_registered . name = [string] [EOL] group_registered . save ( ) [EOL] [EOL] [comment] [EOL] users = User . objects . all ( ) [EOL] for user in users : [EOL] if not user . groups . exists ( ) : [EOL] user . groups . add ( group_registered ) [EOL] [EOL] [comment] [EOL] groups = Group . objects . filter ( pk__gt = [number] ) [EOL] for group in groups : [EOL] for permission in group_registered . permissions . all ( ) : [EOL] group . permissions . add ( permission ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = False ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , default = [string] , max_length = [number] ) , ) , migrations . RunPython ( migrate_groups_and_user_permissions ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from decimal import Decimal [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . DecimalField ( blank = True , decimal_places = [number] , default = Decimal ( [string] ) , max_digits = [number] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] from openslides . utils . postgres import restart_id_sequence [EOL] [EOL] [EOL] def postgres_restart_auth_group_id_sequence ( * args , ** kwargs ) : [EOL] restart_id_sequence ( [string] ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [docstring] [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( postgres_restart_auth_group_id_sequence ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] def create_superadmin_group ( apps , schema_editor ) : [EOL] [docstring] [EOL] Group = apps . get_model ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if Group . objects . count ( ) == [number] : [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] superadmin = Group . objects . get ( pk = [number] ) [EOL] created_superadmin_group = False [EOL] except Group . DoesNotExist : [EOL] superadmin = Group ( pk = [number] , name = [string] ) [EOL] superadmin . save ( skip_autoupdate = True ) [EOL] created_superadmin_group = True [EOL] [EOL] if not created_superadmin_group : [EOL] new_delegate = Group ( name = [string] ) [EOL] new_delegate . save ( skip_autoupdate = True ) [EOL] new_delegate . permissions . set ( superadmin . permissions . all ( ) ) [EOL] superadmin . permissions . set ( [ ] ) [EOL] [EOL] for user in superadmin . user_set . all ( ) : [EOL] user . groups . add ( new_delegate ) [EOL] user . groups . remove ( superadmin ) [EOL] [EOL] finished_moving_users = False [EOL] try : [EOL] admin = Group . objects . get ( name = [string] ) [EOL] for user in admin . user_set . all ( ) : [EOL] user . groups . add ( superadmin ) [EOL] user . groups . remove ( admin ) [EOL] admin . delete ( skip_autoupdate = True ) [EOL] finished_moving_users = True [EOL] except Group . DoesNotExist : [EOL] pass [EOL] [EOL] if not finished_moving_users : [EOL] try : [EOL] staff = Group . objects . get ( name = [string] ) [EOL] for user in staff . user_set . all ( ) : [EOL] user . groups . add ( superadmin ) [EOL] except Group . DoesNotExist : [EOL] pass [EOL] [EOL] superadmin . name = [string] [EOL] superadmin . save ( skip_autoupdate = True ) [EOL] if not created_superadmin_group : [EOL] new_delegate . name = [string] [EOL] new_delegate . save ( skip_autoupdate = True ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RunPython ( create_superadmin_group ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] GROUP_DEFAULT_PK = [number] [EOL] GROUP_ADMIN_PK = [number] [EOL] GROUP_DELEGATE_PK = [number] [EOL] GROUP_STAFF_PK = [number] [EOL]	0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from typing import Dict , Union , List [EOL] import typing [EOL] import traceback [EOL] [docstring] [EOL] import os [EOL] [EOL] from openslides . global_settings import * [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] OPENSLIDES_USER_DATA_PATH = os . path . realpath ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_PLUGINS += ( [string] , ) [comment] [EOL] [EOL] INSTALLED_APPS += INSTALLED_PLUGINS [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] DEBUG = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : { [string] : os . path . join ( OPENSLIDES_USER_DATA_PATH , [string] ) } , } } [EOL] [EOL] SESSION_ENGINE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATICFILES_DIRS . insert ( [number] , os . path . join ( OPENSLIDES_USER_DATA_PATH , [string] ) ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] MEDIA_ROOT = os . path . join ( OPENSLIDES_USER_DATA_PATH , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] PASSWORD_HASHERS = [ [string] ] [EOL] [EOL] [comment] [EOL] RESTRICTED_DATA_CACHE = False [EOL] [EOL] REST_FRAMEWORK = { [string] : [string] } [EOL] [EOL] ENABLE_ELECTRONIC_VOTING = True [EOL] [EOL] [EOL] [comment] [EOL] if os . environ . get ( [string] ) : [EOL] import traceback [EOL] [EOL] from django . db . backends import utils as bakutils [EOL] [EOL] cursor_debug_wrapper_orig = bakutils . CursorDebugWrapper [EOL] [EOL] def print_stack_in_project ( sql ) : [EOL] stack = traceback . extract_stack ( ) [EOL] for path , lineno , func , line in stack : [EOL] if [string] in path or [string] in path : [EOL] continue [EOL] print ( f' [string] { path } [string] { lineno } [string] { func }' ) [EOL] print ( f" [string] { line }" ) [EOL] print ( sql ) [EOL] print ( [string] ) [EOL] [EOL] class CursorDebugWrapperLoud ( cursor_debug_wrapper_orig ) : [comment] [EOL] def execute ( self , sql , params = None ) : [EOL] try : [EOL] return super ( ) . execute ( sql , params ) [EOL] finally : [EOL] sql = self . db . ops . last_executed_query ( self . cursor , sql , params ) [EOL] print_stack_in_project ( sql ) [EOL] [EOL] def executemany ( self , sql , param_list ) : [EOL] try : [EOL] return super ( ) . executemany ( sql , param_list ) [EOL] finally : [EOL] print_stack_in_project ( sql ) [EOL] [EOL] bakutils . CursorDebugWrapper = CursorDebugWrapperLoud [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Callable [EOL] import typing [EOL] import builtins [EOL] from typing import Callable [EOL] [EOL] from django . db import DEFAULT_DB_ALIAS , connections [EOL] from django . test . utils import CaptureQueriesContext [EOL] [EOL] [EOL] def count_queries ( func , verbose = False ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] context = CaptureQueriesContext ( connections [ DEFAULT_DB_ALIAS ] ) [EOL] with context : [EOL] func ( * args , ** kwargs ) [EOL] [EOL] if verbose : [EOL] print ( get_verbose_queries ( context ) ) [EOL] [EOL] return len ( context ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] class AssertNumQueriesContext ( CaptureQueriesContext ) : [EOL] def __init__ ( self , test_case , num , verbose ) : [EOL] self . test_case = test_case [EOL] self . num = num [EOL] self . verbose = verbose [EOL] super ( ) . __init__ ( connections [ DEFAULT_DB_ALIAS ] ) [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] super ( ) . __exit__ ( exc_type , exc_value , traceback ) [EOL] if exc_type is not None : [EOL] return [EOL] executed = len ( self ) [EOL] verbose_queries = get_verbose_queries ( self ) [EOL] if self . verbose : [EOL] print ( verbose_queries ) [EOL] self . test_case . assertEqual ( executed , self . num ) [EOL] else : [EOL] self . test_case . assertEqual ( executed , self . num , verbose_queries ) [EOL] [EOL] [EOL] def get_verbose_queries ( context ) : [EOL] queries = [string] . join ( f"{ i } [string] { query [ [string] ] }" for i , query in enumerate ( context . captured_queries , start = [number] ) ) [EOL] return f"{ len ( context ) } [string] { queries }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[...,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ExampleDataGeneratorAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL] verbose_name = [string] [EOL] version = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] import lz4 . frame [EOL] from channels . testing import WebsocketCommunicator as ChannelsWebsocketCommunicator [EOL] [EOL] [EOL] class WebsocketCommunicator ( ChannelsWebsocketCommunicator ) : [EOL] [docstring] [EOL] [EOL] async def receive_json_from ( self , timeout = [number] ) : [EOL] [docstring] [EOL] payload = await self . receive_from ( timeout ) [EOL] if isinstance ( payload , bytes ) : [EOL] [comment] [EOL] uncompressed_data = lz4 . frame . decompress ( payload ) [EOL] text_data = uncompressed_data . decode ( [string] ) [EOL] else : [EOL] text_data = payload [EOL] [EOL] assert isinstance ( text_data , str ) , [string] [EOL] return json . loads ( text_data ) [EOL] [EOL] async def assert_receive_error ( self , timeout = [number] , in_response = None , ** kwargs ) : [EOL] response = await self . receive_json_from ( timeout ) [EOL] assert response [ [string] ] == [string] [EOL] [EOL] content = response . get ( [string] ) [EOL] if kwargs : [EOL] assert content [EOL] for key , value in kwargs . items ( ) : [EOL] assert content . get ( key ) == value [EOL] [EOL] if in_response : [EOL] assert response [ [string] ] == in_response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
from typing import Type [EOL] import typing [EOL] import server [EOL] from django . apps import AppConfig [EOL] [EOL] from . import __description__ , __license__ , __verbose_name__ [EOL] [EOL] [EOL] class TestPluginAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] label = [string] [EOL] verbose_name = __verbose_name__ [EOL] description = __description__ [EOL] license = __license__ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__verbose_name__ = [string] [EOL] __description__ = [string] [EOL] __license__ = [string] [EOL] [EOL] default_app_config = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
	0
	0
	0
	0
from typing import Dict , Union , Any , List [EOL] import typing [EOL] import jsonschema [EOL] import pytest [EOL] [EOL] from openslides . utils . websocket import schema [EOL] [EOL] [EOL] def test_notify_schema_validation ( ) : [EOL] [comment] [EOL] message = { [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [ [string] ] } , } [EOL] jsonschema . validate ( message , schema ) [EOL] [EOL] [EOL] def test_notify_schema_invalid_str_in_list ( ) : [EOL] message = { [string] : [string] , [string] : [ { } , [string] ] , [string] : [string] , } [EOL] with pytest . raises ( jsonschema . ValidationError ) : [EOL] jsonschema . validate ( message , schema ) [EOL] [EOL] [EOL] def test_notify_schema_invalid_no_elements ( ) : [EOL] message = { [string] : [string] , [string] : [ ] , [string] : [string] , } [EOL] with pytest . raises ( jsonschema . ValidationError ) : [EOL] jsonschema . validate ( message , schema ) [EOL] [EOL] [EOL] def test_notify_schema_invalid_not_a_list ( ) : [EOL] message = { [string] : [string] , [string] : { [string] : [string] } , [string] : [string] , } [EOL] with pytest . raises ( jsonschema . ValidationError ) : [EOL] jsonschema . validate ( message , schema ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] from typing import List [EOL] from unittest import TestCase [EOL] [EOL] from openslides . users . user_backend import ( BaseUserBackend , UserBackendException , UserBackendManager , ) [EOL] [EOL] [EOL] class TUserBackend ( BaseUserBackend ) : [EOL] [EOL] disallowed_update_keys = [ [string] , [string] ] [EOL] [EOL] @ property def name ( self ) : [EOL] return [string] [EOL] [EOL] def get_disallowed_update_keys ( self ) : [EOL] return self . disallowed_update_keys [EOL] [EOL] [EOL] class UserManagerTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . manager = UserBackendManager ( ) [EOL] [EOL] def test_register_backend ( self ) : [EOL] self . manager . register_user_backend ( TUserBackend ( ) ) [EOL] self . assertTrue ( [string] in self . manager . backends ) [EOL] [EOL] def test_get_backend ( self ) : [EOL] backend = TUserBackend ( ) [EOL] self . manager . register_user_backend ( backend ) [EOL] self . assertEqual ( self . manager . get_backend ( [string] ) , backend ) [EOL] [EOL] def test_format_backends ( self ) : [EOL] self . manager . register_user_backend ( TUserBackend ( ) ) [EOL] self . assertEqual ( self . manager . get_backends_for_client ( ) , { [string] : { [string] : TUserBackend . disallowed_update_keys } } , ) [EOL] [EOL] def test_register_backend_twice ( self ) : [EOL] self . manager . register_user_backend ( TUserBackend ( ) ) [EOL] self . assertRaises ( UserBackendException , self . manager . register_user_backend , TUserBackend ( ) ) [EOL] [EOL] def test_get_unknown_backend ( self ) : [EOL] self . assertRaises ( UserBackendException , self . manager . get_backend , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.tests.unit.users.test_user_backend.TUserBackend$ 0 0 0 0 0 0 0 0 0 0 0 $server.tests.unit.users.test_user_backend.TUserBackend$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.tests.unit.users.test_user_backend.TUserBackend$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
	0
	0
	0
	0
	0