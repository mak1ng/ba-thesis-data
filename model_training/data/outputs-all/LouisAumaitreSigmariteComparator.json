from typing import List , Any , Dict , Union [EOL] import sigmar [EOL] import typing [EOL] import time [EOL] [EOL] from sigmar . basics . base import infantry_base [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . string_constants import ( CHARGING , ENEMY_BASE , ENEMY_NUMBERS , ENEMY_KEYWORDS , RANGE , ENEMY_SAVE , ENEMY_WOUNDS , SELF_NUMBERS , ENEMY_BRAVERY , ) [EOL] from sigmar . basics . warscroll import formatted_scrolls [EOL] from sigmar . basics . weapon import Weapon [EOL] from sigmar . basics . weapon_rules import deal_x_mortal_wound_on_roll [EOL] from sigmar . compendium . generic_keywords import DAEMON , CHAOS , WIZARD [EOL] from sigmar . compendium . tzeench_arcanites import TZEENTCH_WS [EOL] [EOL] warscrolls = TZEENTCH_WS [EOL] [EOL] test_armour = Roll ( [number] ) [EOL] context = { CHARGING : False , ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_WOUNDS : [number] , ENEMY_BRAVERY : [number] , ENEMY_KEYWORDS : [ ] , RANGE : [number] , ENEMY_SAVE : test_armour , } [EOL] [EOL] start = time . time ( ) [EOL] formatted_scrolls ( warscrolls , context , front_size = [number] , max_variants = [number] ) [EOL] print ( f' [string] { time . time ( ) - start } [string] ' ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.float,builtins.int,sigmar.basics.base.Base,sigmar.basics.roll.Roll]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.float,builtins.int,sigmar.basics.base.Base,sigmar.basics.roll.Roll]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] import os [EOL] [EOL] myPath = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] sys . path . insert ( [number] , myPath + [string] ) [EOL]	0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
from typing import Any [EOL] import sigmar [EOL] import typing [EOL] from sigmar . basics . value import DiceValue , value [EOL] [EOL] [EOL] def test_average_1_is_1 ( ) : [EOL] [comment] [EOL] random_value = value ( [number] ) [EOL] [comment] [EOL] assert random_value . average ( { } , mod = [number] ) == [number] [EOL] [EOL] [EOL] def test_max_1_is_1 ( ) : [EOL] [comment] [EOL] random_value = value ( [number] ) [EOL] [comment] [EOL] assert random_value . max ( { } , mod = - [number] ) == [number] [EOL] [EOL] [EOL] def test_average_d6_is_35 ( ) : [EOL] [comment] [EOL] random_value = value ( [string] ) [EOL] [comment] [EOL] assert random_value . average ( { } , mod = [number] ) == [number] [EOL] [EOL] [EOL] def test_max_d6_is_6 ( ) : [EOL] [comment] [EOL] random_value = value ( [string] ) [EOL] [comment] [EOL] assert random_value . max ( { } , mod = - [number] ) == [number] [EOL] [EOL] [EOL] def test_max_apply_extras_on_context ( ) : [EOL] [comment] [EOL] [EOL] def bonus ( context ) : [EOL] return context . get ( [string] , [number] ) [EOL] [EOL] random_value = DiceValue ( [number] ) [EOL] random_value . rules . append ( bonus ) [EOL] [comment] [EOL] assert random_value . max ( { [string] : [number] } , mod = - [number] ) == [number] [EOL] [EOL] [EOL] def test_average_apply_extras_on_context ( ) : [EOL] [comment] [EOL] [EOL] def bonus ( context ) : [EOL] return context . get ( [string] , [number] ) [EOL] [EOL] random_value = value ( [number] ) [EOL] random_value . rules . append ( bonus ) [EOL] [comment] [EOL] assert random_value . average ( { [string] : [number] } , mod = [number] ) == [number] [EOL] [EOL] [EOL] def test_rv_create_rv ( ) : [EOL] [comment] [EOL] a = value ( [number] ) [EOL] b = value ( [string] ) [EOL] c = value ( DiceValue ( [number] ) ) [EOL] [comment] [EOL] assert a . max ( { } ) == b . max ( { } ) == c . max ( { } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import math [EOL] [EOL] from sigmar . basics . base import infantry_base [EOL] [EOL] [EOL] def test_base_surface ( ) : [EOL] [comment] [EOL] assert infantry_base . surface ( ) == math . pi * [number] * [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sigmar [EOL] from sigmar . basics . roll import Roll [EOL] [EOL] [EOL] def test_4plus_is_fifty_fifty ( ) : [EOL] [comment] [EOL] roll = Roll ( [number] ) [EOL] [comment] [EOL] success , crit = roll . chances ( { } ) [EOL] assert success + crit == [number] [EOL] assert - [number] < success - [number] / [number] < [number] [EOL] assert - [number] < crit - [number] / [number] < [number] [EOL] [EOL] [EOL] def test_average_of_3_5plus_is_one ( ) : [EOL] [comment] [EOL] roll = Roll ( [number] ) [EOL] [comment] [EOL] success , crit = roll . average ( [number] , { } ) [EOL] assert success + crit == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union [EOL] import sigmar [EOL] import typing [EOL] from sigmar . basics . base import infantry_base [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . string_constants import CHARGING , ENEMY_BASE , ENEMY_NUMBERS , ENEMY_SAVE , SELF_NUMBERS [EOL] from sigmar . compendium . sylvaneth import sylvaneth_by_name [EOL] [EOL] [EOL] def test_dryad_stats ( ) : [EOL] [comment] [EOL] context = { CHARGING : False , ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , } [EOL] dryads = sylvaneth_by_name [ [string] ] . units [ [string] ] [EOL] [comment] [EOL] assert round ( dryads . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( dryads . average_health ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] assert round ( dryads . average_health ( context ) , [number] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union [EOL] import sigmar [EOL] import typing [EOL] from sigmar . basics . base import infantry_base [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . string_constants import CHARGING , ENEMY_BASE , ENEMY_NUMBERS , ENEMY_WOUNDS , ENEMY_SAVE , SELF_NUMBERS [EOL] from sigmar . compendium . stormcast_eternals import stormcasts_by_name [EOL] [EOL] [EOL] def test_liberators_stats ( ) : [EOL] [comment] [EOL] context = { CHARGING : False , ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , } [EOL] context2 = { CHARGING : False , ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_WOUNDS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , } [EOL] shield_libs = stormcasts_by_name [ [string] ] . units [ [string] ] [EOL] [comment] [EOL] assert round ( shield_libs . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( shield_libs . average_damage ( context2 ) , [number] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union [EOL] import sigmar [EOL] import typing [EOL] from sigmar . basics . base import infantry_base [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . string_constants import ENEMY_BASE , ENEMY_NUMBERS , ENEMY_SAVE , SELF_NUMBERS , RANGE [EOL] from sigmar . compendium . seraphon import seraphons_by_name [EOL] [EOL] [EOL] def test_saurus_stats ( ) : [EOL] [comment] [EOL] context = { ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , } [EOL] clubs = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] spears = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] [comment] [EOL] assert round ( clubs . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( spears . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] assert round ( clubs . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( spears . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] assert round ( clubs . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( spears . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] assert round ( clubs . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( spears . average_damage ( context ) , [number] ) == [number] [EOL] [EOL] [EOL] def test_skinks_stats ( ) : [EOL] [comment] [EOL] context = { ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , } [EOL] jav = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] bolt = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] bolt_club = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] club = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] [comment] [EOL] assert round ( jav . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( bolt . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] assert round ( bolt_club . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( club . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] context [ RANGE ] = [number] [EOL] assert round ( jav . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( bolt . average_damage ( context ) , [number] ) == [number] [EOL] context [ SELF_NUMBERS ] = [number] [EOL] context [ RANGE ] = [number] [EOL] assert round ( jav . average_damage ( context ) , [number] ) == [number] [EOL] assert round ( bolt . average_damage ( context ) , [number] ) == [number] [EOL] [EOL] [EOL] def test_kroxigor_stats ( ) : [EOL] [comment] [EOL] context = { ENEMY_BASE : infantry_base , ENEMY_NUMBERS : [number] , ENEMY_SAVE : Roll ( [number] ) , SELF_NUMBERS : [number] , RANGE : [number] } [EOL] krok = seraphons_by_name [ [string] ] . units [ [string] ] [EOL] [comment] [EOL] assert round ( krok . average_damage ( context ) , [number] ) == [number] [EOL] context [ RANGE ] = [number] [EOL] assert round ( krok . average_damage ( context ) , [number] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] import sigmar [EOL] from sigmar . basics . base import monster_base , large_infantry_base , infantry_base [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . rules import Rule , Spell , CommandAbility , TodoRule , CommentRule [EOL] from sigmar . basics . string_constants import UNBIND_RANGE , DEPLOYMENT , SELF_NUMBERS , FEAR , ENEMY_BRAVERY , ENEMY_WOUNDS , SELF_WOUNDS [EOL] from sigmar . basics . unit import Unit [EOL] from sigmar . basics . unit_rules import fly , can_reroll_x_dice_during_game , can_steal_spells , copy_spells , extra_save , regeneration , run_and_charge , FLIGHT [EOL] from sigmar . basics . value import value , RandomValue , OncePerGame [EOL] from sigmar . basics . warscroll import Warscroll [EOL] from sigmar . basics . weapon import Weapon [EOL] from sigmar . basics . weapon_rules import extra_damage_on_keyword , deal_x_mortal_wound_on_roll , d3_mw_on_4_if_wounded , impact_x_mortal_wound , deal_x_mortal_wound_crit_tohit [EOL] from sigmar . compendium . generic_keywords import CHAOS , DAEMON , TZEENTCH , WIZARD , HERO , MONSTER , GOR , MORTAL , EVERCHOSEN [EOL] [EOL] TZEENTCH_WS = [ ] [EOL] [EOL] HORROR = [string] [EOL] FLAMER = [string] [EOL] ARCANITE = [string] [EOL] [EOL] [EOL] def mastery_of_magic ( u ) : [EOL] [comment] [EOL] u . casting_value = RandomValue ( { [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] } ) [EOL] u . unbinding_value = RandomValue ( { [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] } ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [string] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , [number] , [number] , monster_base , rules = [ FLIGHT , Rule ( [string] , mastery_of_magic ) , Rule ( [string] , can_steal_spells ( UNBIND_RANGE , RandomValue ( { [number] : [number] / [number] , [number] : [number] / [number] } ) , [number] ) ) , CommandAbility ( [string] , None ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , TZEENTCH , WIZARD , HERO , MONSTER ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , [number] , [number] , monster_base , rules = [ FLIGHT , Rule ( [string] , mastery_of_magic ) , Rule ( [string] , can_reroll_x_dice_during_game ( [number] ) ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , TZEENTCH , WIZARD , HERO , MONSTER , [string] ] , cast = [number] , unbind = [number] , named = True ) ) [EOL] [EOL] [EOL] def arcane_tome ( u ) : [EOL] u . casting_value = u . casting_value + OncePerGame ( [string] ) [EOL] [EOL] [EOL] sky_sharks = Rule ( [string] , extra_damage_on_keyword ( value ( [string] ) - [number] , MONSTER ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [string] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , deal_x_mortal_wound_on_roll ( [string] , Roll ( [number] ) ) ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ sky_sharks ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [string] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , deal_x_mortal_wound_on_roll ( [string] , Roll ( [number] ) ) ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ sky_sharks ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ FLIGHT , Rule ( [string] , arcane_tome ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , WIZARD , HERO , [string] ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , Rule ( [string] , arcane_tome ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , WIZARD , HERO , [string] ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ CommentRule ( [string] , DEPLOYMENT ) , TodoRule ( [string] ) , TodoRule ( [string] ) , Rule ( [string] , copy_spells ( [number] ) ) ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] , named = True ) ) [EOL] [EOL] [EOL] def fortune_and_fate ( u ) : [EOL] [comment] [EOL] potential_cast = u . casting_value . potential_values ( { } ) [EOL] one = sum ( [ proba for cast , proba in potential_cast if cast < [number] ] ) [EOL] two = sum ( [ proba for cast , proba in potential_cast if cast >= [number] ] ) [EOL] three = two * two [EOL] u . spells_per_turn = RandomValue ( { [number] : one , [number] : two - three , [number] : three } ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ Rule ( [string] , arcane_tome ) , Rule ( [string] , fortune_and_fate ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] def scrolls_of_sorcery ( u ) : [EOL] u . casting_value = RandomValue ( { [number] : [number] / [number] , [number] : [number] / [number] } ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , Rule ( [string] , can_steal_spells ( [number] , RandomValue ( { [number] : [number] , [number] : [number] } ) , [number] ) ) , Rule ( [string] , scrolls_of_sorcery ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] , named = True ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ sky_sharks ] ) , Weapon ( [string] , [string] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , deal_x_mortal_wound_on_roll ( [number] , Roll ( [number] ) ) ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , TodoRule ( [string] ) , ] , keywords = [ CHAOS , DAEMON , TZEENTCH , [string] ] , max_size = [number] ) ) [EOL] [EOL] capricious_warpflame = Rule ( [string] , d3_mw_on_4_if_wounded ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ capricious_warpflame ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [string] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , deal_x_mortal_wound_on_roll ( [string] , Roll ( [number] ) ) ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ sky_sharks ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ FLIGHT , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , FLAMER ] , max_size = [number] ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ capricious_warpflame ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , ] , keywords = [ CHAOS , DAEMON , FLAMER , TZEENTCH ] , max_size = [number] ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ capricious_warpflame ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ FLIGHT , TodoRule ( [string] ) , ] , keywords = [ CHAOS , DAEMON , FLAMER , TZEENTCH ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ capricious_warpflame ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } ] ) ) [EOL] [EOL] [EOL] def flickering_flames ( w ) : [EOL] def buff ( data ) : [EOL] if data . get ( SELF_NUMBERS , [number] ) >= [number] : [EOL] return [number] , [number] [EOL] return [number] , [number] [EOL] w . tohit . rules . append ( buff ) [EOL] [EOL] [EOL] def deamon_icon_bearer ( u ) : [EOL] u . morale_roll = RandomValue ( { [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , [number] : [number] / [number] , - [number] : [number] / [number] , - [number] : [number] / [number] , - [number] : [number] / [number] , - [number] : [number] / [number] , - [number] : [number] / [number] , - [number] : [number] / [number] } ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , flickering_flames ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ Rule ( [string] , deamon_icon_bearer ) , CommentRule ( [string] , FEAR ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , [string] ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , flickering_flames ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } ] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ TodoRule ( [string] ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , [string] ] , max_size = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ TodoRule ( [string] ) , ] , keywords = [ CHAOS , DAEMON , HORROR , TZEENTCH , [string] ] , max_size = [number] ) ) [EOL] [EOL] [EOL] def sorcerous_elixir ( u ) : [EOL] u . spells_per_turn = u . spells_per_turn + OncePerGame ( [number] ) [EOL] [comment] [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , Rule ( [string] , sorcerous_elixir ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , GOR , ARCANITE , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ CommentRule ( [string] , [string] ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , MORTAL , ARCANITE , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] , named = True ) ) [EOL] [EOL] [EOL] def magic_touched ( u ) : [EOL] [comment] [EOL] one = [number] / [number] [EOL] two = [number] / [number] [EOL] three = two * two [EOL] u . spells_per_turn = RandomValue ( { [number] : one , [number] : two - three , [number] : three } ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ Rule ( [string] , magic_touched ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , MORTAL , ARCANITE , TZEENTCH , WIZARD , HERO ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] def warptongue_blade ( w ) : [EOL] [comment] [EOL] [comment] [EOL] def buff ( data ) : [EOL] enemy_wounds = data . get ( ENEMY_WOUNDS , [number] ) [EOL] if enemy_wounds <= [number] : [EOL] return [number] [EOL] bravery = data . get ( ENEMY_BRAVERY , [number] ) [EOL] roll_higher = sum ( [ proba for val , proba in value ( [string] ) . potential_values ( data ) if val > bravery ] ) [EOL] return RandomValue ( { [number] : [number] - roll_higher , enemy_wounds - [number] : roll_higher } ) [EOL] w . damage . rules . append ( buff ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , warptongue_blade ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ CommentRule ( [string] , [string] ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , MORTAL , DAEMON , ARCANITE , EVERCHOSEN , TZEENTCH , WIZARD , HERO , [string] ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , Rule ( [string] , extra_save ( [number] ) ) , CommentRule ( [string] , [string] ) , CommandAbility ( [string] , None ) , ] , keywords = [ CHAOS , MORTAL , DAEMON , ARCANITE , TZEENTCH , HERO ] ) ) [EOL] [EOL] [EOL] def brutal_rage ( u ) : [EOL] def buff ( data ) : [EOL] if data . get ( SELF_WOUNDS , [number] ) <= [number] : [EOL] return [number] , [number] [EOL] return [number] , [number] [EOL] for w in u . weapons : [EOL] w . tohit . rules . append ( buff ) [EOL] [EOL] def debuff ( data ) : [EOL] if data . get ( SELF_WOUNDS , [number] ) <= [number] : [EOL] return - [number] [EOL] return [number] [EOL] u . casting_value . rules . append ( debuff ) [EOL] u . unbinding_value . rules . append ( debuff ) [EOL] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , impact_x_mortal_wound ( [string] ) ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , brutal_rage ) , Rule ( [string] , regeneration ( [number] ) ) , Spell ( [string] , [number] , None ) , ] , keywords = [ CHAOS , MORTAL , ARCANITE , TZEENTCH , HERO , WIZARD ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] def savagery_unleashed_func ( w ) : [EOL] def buff ( data ) : [EOL] nb = data . get ( SELF_NUMBERS ) [EOL] return min ( [number] , nb // [number] ) [EOL] w . attacks . rules . append ( buff ) [EOL] [EOL] [EOL] savagery_unleashed = Rule ( [string] , savagery_unleashed_func ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Rule ( [string] , extra_save ( [number] ) ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ TodoRule ( [string] ) , Rule ( [string] , run_and_charge ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , GOR , ARCANITE , TZEENTCH ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [string] , [string] : [ Rule ( [string] , extra_save ( [number] ) ) ] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ savagery_unleashed ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } ] ) ) [EOL] [EOL] sorcerous_bolt = Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) [comment] [EOL] sorcerous_bolt_2 = Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) [comment] [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ sorcerous_bolt , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [ sorcerous_bolt , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Rule ( [string] , extra_save ( [number] ) ) ] , [ sorcerous_bolt , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ TodoRule ( [string] ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , MORTAL , ARCANITE , TZEENTCH ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [string] , [string] : [ sorcerous_bolt_2 , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , } , { [string] : [string] , [string] : [string] , [string] : [ sorcerous_bolt_2 , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [string] : [ Rule ( [string] , extra_save ( [number] ) ) ] , } , { [string] : [string] , [string] : [string] , [string] : [ sorcerous_bolt_2 , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , } , { [string] : [string] , [string] : [ sorcerous_bolt , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , } ] ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ CommentRule ( [string] , FEAR ) , TodoRule ( [string] ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , GOR , ARCANITE , TZEENTCH ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , } ] ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , CommentRule ( [string] , FEAR ) , TodoRule ( [string] ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , GOR , ARCANITE , TZEENTCH , DAEMON ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , } ] ) ) [EOL] [EOL] TZEENTCH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ Rule ( [string] , deal_x_mortal_wound_crit_tohit ( [string] ) ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ FLIGHT , CommentRule ( [string] , FEAR ) , TodoRule ( [string] ) , TodoRule ( [string] ) , ] , keywords = [ CHAOS , GOR , ARCANITE , TZEENTCH , DAEMON ] , max_size = [number] , special_options = [ { [string] : [string] , [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ Rule ( [string] , deal_x_mortal_wound_crit_tohit ( [string] ) ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [string] , [ ] ) ] , } ] ) ) [EOL] [EOL] [EOL] tzeentchites_by_name = { unit . name : unit for unit in TZEENTCH_WS } [EOL]	
from typing import List , Any , Dict [EOL] import sigmar [EOL] import builtins [EOL] import typing [EOL] from sigmar . basics . base import large_infantry_base , monster_base [EOL] from sigmar . basics . rules import Rule , CommandAbility [EOL] from sigmar . basics . string_constants import ( MW_ON_HIT_CRIT , CHARGING , ENEMY_KEYWORDS , ENEMY_NUMBERS , DID_MOVE , MORTAL_WOUNDS_PER_ATTACK , ) [EOL] from sigmar . basics . unit import WeaponRule [EOL] from sigmar . basics . unit_rules import reroll_1_save , fly , charge_at_3d6 [EOL] from sigmar . basics . value import value , RandomValue [EOL] from sigmar . basics . warscroll import Warscroll [EOL] from sigmar . basics . weapon import Weapon [EOL] from sigmar . basics . weapon_rules import ( reroll_1_tohit , extra_attacks_in_charge , d6_dmg_on_crit , extra_3_rend_on_crit_hit , plus_x_tohit_y_wounds , multiple_hits ) [EOL] from sigmar . compendium . generic_keywords import ORDER , HUMAN , CELESTIAL , HERO , TOTEM , CHAOS , MONSTER [EOL] [EOL] STORMCAST_WS = [ ] [EOL] [EOL] STORMCAST_ETERNAL = [string] [EOL] REDEEMER = [string] [EOL] JUSTICAR = [string] [EOL] ANGELOS = [string] [EOL] [EOL] sigmarite_shields = Rule ( [string] , reroll_1_save ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ Rule ( [string] , fly ) , Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] dracoth_claws_and_fangs = Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ Rule ( [string] , d6_dmg_on_crit ) ] ) [EOL] [EOL] [EOL] def lightning_hammer ( w ) : [EOL] [comment] [EOL] def buff ( data ) : [EOL] data [ MW_ON_HIT_CRIT ] = data . get ( MW_ON_HIT_CRIT , [number] ) + [number] [EOL] w . attack_rules . append ( buff ) [EOL] [EOL] [EOL] def stormstrike_glaive ( w ) : [EOL] def extra_damage ( data ) : [EOL] if data . get ( CHARGING , False ) : [EOL] return [number] [EOL] return [number] [EOL] [EOL] def extra_rend ( data ) : [EOL] if data . get ( CHARGING , False ) : [EOL] return - [number] [EOL] return [number] [EOL] w . damage . rules . append ( extra_damage ) [EOL] w . rend . rules . append ( extra_rend ) [EOL] [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ Rule ( [string] , stormstrike_glaive ) ] ) , dracoth_claws_and_fangs ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ Rule ( [string] , lightning_hammer ) ] ) , dracoth_claws_and_fangs ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ Rule ( [string] , lambda x : None ) ] ) , dracoth_claws_and_fangs ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [string] , [ Rule ( [string] , extra_attacks_in_charge ( [string] ) ) ] ) , dracoth_claws_and_fangs ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , CommandAbility ( [string] , None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ WeaponRule ( [string] , extra_attacks_in_charge ( [number] ) ) , Rule ( [string] , lambda x : None ) , CommandAbility ( [string] , None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , fly ) , Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , extra_3_rend_on_crit_hit ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , extra_3_rend_on_crit_hit ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , fly ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Rule ( [string] , lambda x : None ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Rule ( [string] , lambda x : None ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO , TOTEM ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , HERO ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , sigmarite_shields ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , sigmarite_shields ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ WeaponRule ( [string] , plus_x_tohit_y_wounds ( [number] , [number] ) ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , REDEEMER ] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [string] : [ sigmarite_shields ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [string] : [ sigmarite_shields ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] } , ] ) ) [EOL] [EOL] storm_gladius = Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) [EOL] [EOL] [EOL] def plus_1_tohit_chaos ( w ) : [EOL] def buff ( data ) : [EOL] if CHAOS in data . get ( ENEMY_KEYWORDS , [ ] ) : [EOL] return [number] , [number] [EOL] return [number] , [number] [EOL] w . tohit . rules . append ( buff ) [EOL] [EOL] [EOL] def rapid_fire ( w ) : [EOL] def buff ( data ) : [EOL] if not data . get ( DID_MOVE , True ) : [EOL] return [number] [EOL] return [number] [EOL] w . attacks . rules . append ( buff ) [EOL] [EOL] [EOL] def thunderbolt ( w ) : [EOL] def buff ( data ) : [EOL] [comment] [EOL] mod = [number] [EOL] if MONSTER in data . get ( ENEMY_KEYWORDS , [ ] ) : [EOL] mod = - [number] [EOL] possibilities = { val : proba for val , proba in value ( [string] ) . potential_values ( data , mod ) } [EOL] nb_enemies = data . get ( ENEMY_NUMBERS , [number] ) [EOL] possible_success = sum ( [ proba for val , proba in possibilities . items ( ) if val <= nb_enemies ] ) [EOL] possible_damage = { val : proba * possible_success for val , proba in value ( [string] ) . potential_values ( data ) } [EOL] possible_damage [ [number] ] = [number] - possible_success [EOL] data [ MORTAL_WOUNDS_PER_ATTACK ] = RandomValue ( possible_damage ) [EOL] w . attack_rules . append ( buff ) [EOL] [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , storm_gladius ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , rapid_fire ) ] ) , storm_gladius ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ WeaponRule ( [string] , plus_1_tohit_chaos ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , JUSTICAR ] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) , storm_gladius ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , rapid_fire ) ] ) , storm_gladius ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ Rule ( [string] , multiple_hits ( [string] ) ) ] ) , storm_gladius ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , thunderbolt ) ] ) , storm_gladius ] } , ] ) ) [EOL] [EOL] STORMCAST_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , sigmarite_shields ] , [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , large_infantry_base , rules = [ Rule ( [string] , fly ) , Rule ( [string] , charge_at_3d6 ) , ] , keywords = [ ORDER , CELESTIAL , HUMAN , STORMCAST_ETERNAL , ANGELOS ] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , [string] : [ sigmarite_shields ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) , Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ Rule ( [string] , reroll_1_tohit ) ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] } , { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [string] , [number] , [number] , - [number] , [number] , [ ] ) ] } , ] ) ) [EOL] [EOL] [comment] [EOL] stormcasts_by_name = { unit . name : unit for unit in STORMCAST_WS } [EOL]	
ORDER = [string] [EOL] CHAOS = [string] [EOL] [EOL] WIZARD = [string] [EOL] HERO = [string] [EOL] MONSTER = [string] [EOL] PRIEST = [string] [EOL] TOTEM = [string] [EOL] [EOL] CELESTIAL = [string] [EOL] TZEENTCH = [string] [EOL] EVERCHOSEN = [string] [EOL] [EOL] HUMAN = [string] [EOL] DAEMON = [string] [EOL] GOR = [string] [EOL] MORTAL = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any , Dict [EOL] import sigmar [EOL] import typing [EOL] import builtins [EOL] from sigmar . basics . base import monster_base , infantry_base [EOL] from sigmar . basics . rules import Rule , Spell [EOL] from sigmar . basics . string_constants import ENEMY_WOUNDS , MW_ON_DAMAGE , SELF_NUMBERS [EOL] from sigmar . basics . unit import Unit [EOL] from sigmar . basics . warscroll import Warscroll [EOL] from sigmar . basics . weapon import Weapon [EOL] from sigmar . compendium . generic_keywords import ORDER , WIZARD , HERO , MONSTER [EOL] [EOL] SYLVANETH_WS = [ ] [EOL] [EOL] SYLVANETH = [string] [EOL] [EOL] [EOL] def impale ( w ) : [EOL] def buff ( data ) : [EOL] enemy_wounds = data . get ( ENEMY_WOUNDS , [number] ) [EOL] if [number] < enemy_wounds < [number] : [EOL] data [ MW_ON_DAMAGE ] = enemy_wounds * ( [number] - enemy_wounds ) / [number] [EOL] [EOL] w . attack_rules . append ( buff ) [EOL] [EOL] [EOL] SYLVANETH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , - [number] , [number] , [ Rule ( [string] , impale ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , Spell ( [string] , [number] , None ) , ] , keywords = [ ORDER , SYLVANETH , WIZARD , HERO , MONSTER ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] SYLVANETH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } , [number] , - [number] , [number] , [ ] ) , Weapon ( [string] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , [number] , [number] , - [number] , [string] , [ ] ) , Weapon ( [string] , [number] , [number] , [number] , { [number] : [number] , [number] : [number] , [number] : [number] } , - [number] , [number] , [ Rule ( [string] , impale ) ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , monster_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , ] , keywords = [ ORDER , SYLVANETH , MONSTER ] ) ) [EOL] [EOL] [EOL] SYLVANETH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , - [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ Rule ( [string] , lambda x : None ) , Spell ( [string] , [number] , None ) , ] , keywords = [ ORDER , SYLVANETH , HERO , WIZARD ] , cast = [number] , unbind = [number] ) ) [EOL] [EOL] [EOL] def impenetrable_thicket ( u ) : [EOL] def buff ( data ) : [EOL] if SELF_NUMBERS in data and data [ SELF_NUMBERS ] >= [number] : [EOL] return [number] , [number] [EOL] return [number] , [number] [EOL] u . save . rules . append ( buff ) [EOL] [EOL] [EOL] SYLVANETH_WS . append ( Warscroll ( [string] , [ [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] , ] , [number] , [number] , [number] , [number] , [number] , infantry_base , rules = [ Rule ( [string] , lambda x : None ) , Rule ( [string] , lambda x : None ) , Rule ( [string] , impenetrable_thicket ) , ] , keywords = [ ORDER , SYLVANETH ] , special_options = [ { [string] : [string] , [string] : [ Weapon ( [string] , [number] , [number] , [number] , [number] , [number] , [number] , [ ] ) ] } ] ) ) [EOL] [EOL] [EOL] sylvaneth_by_name = { unit . name : unit for unit in SYLVANETH_WS } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union [EOL] import typing [EOL] import sigmar [EOL] import builtins [EOL] from typing import Union [EOL] [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . rules import Rule [EOL] from sigmar . basics . unit import Unit [EOL] from sigmar . basics . value import value , Value [EOL] [EOL] [EOL] def can_reroll_x_dice_during_game ( amount = [number] ) : [EOL] def rule_func ( u ) : [EOL] u . notes . append ( f' [string] { value ( amount ) }' ) [EOL] return rule_func [EOL] [EOL] [EOL] def extra_save ( roll ) : [EOL] def rule_func ( u ) : [EOL] u . extra_save = Roll ( roll ) [EOL] return rule_func [EOL] [EOL] [EOL] def regeneration ( amount = [number] ) : [EOL] def rule_func ( u ) : [EOL] u . notes . append ( f' [string] { value ( amount ) }' ) [EOL] return rule_func [EOL] [EOL] [EOL] def can_steal_spells ( range_ = [number] , chances = [number] , tries_per_turn = [number] ) : [EOL] def rule_func ( u ) : [EOL] value ( range_ ) [EOL] u . notes . append ( f' [string] { round ( value ( chances ) . average ( { } ) * value ( tries_per_turn ) . average ( { } ) , [number] ) } [string] ' ) [EOL] return rule_func [EOL] [EOL] [EOL] def copy_spells ( range_ = [number] , ) : [EOL] def rule_func ( u ) : [EOL] value ( range_ ) [EOL] pass [EOL] return rule_func [EOL] [EOL] [EOL] def fly ( u ) : [EOL] u . can_fly = True [EOL] [EOL] [EOL] FLIGHT = Rule ( [string] , fly ) [EOL] [EOL] [EOL] def reroll_1_save ( u ) : [EOL] u . save . rerolls = [number] [EOL] [EOL] [EOL] def ignore_1_rend ( u ) : [EOL] u . save . mod_ignored . append ( - [number] ) [EOL] [EOL] [EOL] def ignore_2_rend ( u ) : [EOL] u . save . mod_ignored . append ( - [number] ) [EOL] u . save . mod_ignored . append ( - [number] ) [EOL] [EOL] [EOL] def march_double ( u ) : [EOL] u . run_distance = u . move [EOL] [EOL] [EOL] def charge_at_3d6 ( u ) : [EOL] u . charge_range = value ( [string] ) [EOL] [EOL] [EOL] def run_and_charge ( u ) : [EOL] u . can_run_and_charge = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Literal , Dict , Set , Any [EOL] import sigmar [EOL] import builtins [EOL] import typing_extensions [EOL] import typing [EOL] from typing import Union , List [EOL] [EOL] from copy import copy , deepcopy [EOL] [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . rules import Rule [EOL] from sigmar . basics . string_constants import SELF_WOUNDS , RANGE , SELF_NUMBERS [EOL] from sigmar . basics . unit import Unit , SpecialUser [EOL] from sigmar . basics . weapon import Weapon [EOL] [EOL] [EOL] def weapon_choice_id ( weapon_list ) : [EOL] new_list = [ ] [EOL] for item in weapon_list : [EOL] if item . name not in new_list : [EOL] new_list . append ( item . name ) [EOL] return str ( new_list ) [ [number] : - [number] ] . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def selective_weapon_choice_id ( weapon_list , all_choices ) : [EOL] new_list = [ ] [EOL] for item in weapon_list : [EOL] if all ( [ item . name in [ i . name for i in choice ] for choice in all_choices ] ) : [EOL] continue [EOL] [EOL] if item . name not in new_list : [EOL] new_list . append ( item . name ) [EOL] return str ( new_list ) [ [number] : - [number] ] . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def option_combinations ( all_options , all_variants , variant_id ) : [EOL] if all_options is None or not len ( all_options ) : [EOL] return [ [ { } ] ] [EOL] all_variant_ids = [ selective_weapon_choice_id ( variant , all_variants ) for variant in all_variants ] [EOL] option_types = set ( option . get ( [string] , [string] ) for option in all_options ) [EOL] current_type = list ( option_types ) [ [number] ] [EOL] [EOL] [comment] [EOL] combinations = option_combinations ( [ o for o in all_options if o . get ( [string] , [string] ) != current_type ] , all_variants , variant_id ) [EOL] [comment] [EOL] for version in [ opt for opt in all_options if opt . get ( [string] , [string] ) == current_type ] : [EOL] version_short_id = option_version_short_id ( version , all_options , all_variants ) [EOL] if version_short_id not in all_variant_ids or version_short_id == variant_id or current_type != [string] : [EOL] [comment] [EOL] for sub_combo in option_combinations ( [ o for o in all_options if o . get ( [string] , [string] ) != current_type ] , all_variants , variant_id ) : [EOL] combinations . append ( [ version , * sub_combo ] ) [EOL] return combinations [EOL] [EOL] [EOL] def option_version_short_id ( option , all_options , all_variants ) : [EOL] special_variant = [ * option . get ( [string] , [ ] ) , * option . get ( [string] , [ ] ) ] [EOL] special_all_variants = [ [ * _option . get ( [string] , [ ] ) , * _option . get ( [string] , [ ] ) ] for _option in all_options if _option . get ( [string] , [string] ) == option . get ( [string] , [string] ) ] [EOL] version_id = selective_weapon_choice_id ( special_variant , special_all_variants ) [EOL] [EOL] if version_id == [string] : [comment] [EOL] return selective_weapon_choice_id ( special_variant , all_variants ) [EOL] return version_id [EOL] [EOL] [EOL] def option_version_id ( option , all_options , all_variants , current_id ) : [EOL] version_id = option_version_short_id ( option , all_options , all_variants ) [EOL] [EOL] [comment] [EOL] if len ( [ o for o in all_options if o . get ( [string] , [string] ) == option . get ( [string] , [string] ) ] ) == [number] : [EOL] return option . get ( [string] , version_id ) [EOL] option_name = option . get ( [string] , [string] ) [EOL] if option_name == [string] : [EOL] return version_id [EOL] if version_id == current_id : [EOL] return option_name [EOL] return f'{ option_name } [string] { version_id }' [EOL] [EOL] [EOL] class Warscroll : [EOL] def __init__ ( self , name , weapon_options , * args , rules , special_options = None , ** kwargs ) : [EOL] combinations = [ { [string] : [ w for w in variant if isinstance ( w , Weapon ) ] , [string] : [ * rules , * [ r for r in variant if isinstance ( r , Rule ) ] ] , [string] : selective_weapon_choice_id ( variant , weapon_options ) , [string] : option_combo } for variant in weapon_options for option_combo in option_combinations ( special_options , weapon_options , selective_weapon_choice_id ( variant , weapon_options ) ) ] [EOL] [EOL] self . units = { } [EOL] for combo in combinations : [EOL] u = Unit ( name , [ deepcopy ( w ) for w in combo [ [string] ] ] , * args , rules = combo [ [string] ] , ** kwargs ) [EOL] complete_id = combo [ [string] ] [EOL] for o in combo [ [string] ] : [EOL] if not len ( o ) : [EOL] continue [EOL] option_name = o . get ( [string] , [string] ) [EOL] option_id = option_version_id ( o , special_options , weapon_options , combo [ [string] ] ) [EOL] u . special_users . append ( SpecialUser ( args , combo [ [string] ] , kwargs , option_name , [ deepcopy ( w ) for w in o . get ( [string] , [ ] ) ] , o . get ( [string] , [ ] ) , o . get ( [string] , [number] ) , ** { k : v for k , v in kwargs . items ( ) if k not in [ [string] , [string] , [string] , [string] ] } ) ) [EOL] complete_id += [string] if complete_id != [string] else [string] [EOL] complete_id += option_id [EOL] [EOL] self . units [ complete_id ] = u [EOL] [EOL] self . name = name [EOL] [EOL] def average_damage ( self , armour , data , front_size = [number] , nb = None ) : [EOL] return { key : unit . average_damage ( armour , data , front_size , nb ) for key , unit in self . units . items ( ) } [EOL] [EOL] def average_health ( self , context , nb = None ) : [EOL] return { key : unit . average_health ( context , nb ) for key , unit in self . units . items ( ) } [EOL] [EOL] def stats ( self , armour , context , front_size = [number] , nb = None ) : [EOL] return { key : ( unit . average_damage ( armour , context , front_size , nb ) , unit . average_health ( context ) ) for key , unit in self . units . items ( ) } [EOL] [EOL] def simplest_stats ( self , context , front_size = [number] , max_variants = [number] , keyword = None , do_print = True ) : [EOL] amount = [number] [EOL] variants = [ ] [EOL] for k , v in self . units . items ( ) : [EOL] if keyword is not None and keyword not in v . keywords : [EOL] continue [EOL] amount += [number] [EOL] if amount > max_variants : [EOL] if do_print : [EOL] print ( [string] ) [EOL] break [EOL] unit_context = copy ( context ) [EOL] numbers = max ( min ( context . get ( SELF_NUMBERS , v . size ) , v . max_size ) , v . min_size ) [EOL] unit_context [ SELF_NUMBERS ] = numbers [EOL] health = unit_context . get ( SELF_WOUNDS , v . wounds ) [EOL] health = f' [string] { health } [string] { v . wounds } [string] ' if health != v . wounds else [string] [EOL] equip = f' [string] { k }' if k not in [ v . name , [string] ] else [string] [EOL] [EOL] ranged_context = copy ( unit_context ) [EOL] ranged_context [ RANGE ] = max ( [number] , unit_context . get ( RANGE , [number] ) ) [EOL] ranged = str ( int ( round ( v . average_damage ( ranged_context , front_size ) * [number] ) ) ) [EOL] [EOL] flight = [string] if v . can_fly else [string] [EOL] spell_power = v . magic_power ( context ) [EOL] unbind_power = v . unbind_power ( context ) [EOL] comments = str ( v . notes ) . replace ( [string] , [string] ) [ [number] : - [number] ] [EOL] elements = [ f'{ numbers }' if numbers > [number] else [string] , f'{ v . name }{ health }{ equip } [string] ' , [string] if ranged == [string] else ranged , str ( int ( round ( v . average_damage ( unit_context , front_size ) * [number] ) ) ) , str ( int ( round ( v . average_health ( unit_context ) ) ) ) , v . describe_formation ( unit_context , front_size ) , f'{ int ( spell_power ) } [string] { int ( unbind_power ) }' if spell_power or unbind_power else [string] , f'{ flight }{ v . speed_grade ( unit_context ) }' , str ( int ( round ( v . morale_grade ( unit_context ) , [number] ) ) ) , comments , ] [EOL] if do_print : [EOL] out = [string] [EOL] for e in elements : [EOL] out += e + [string] [EOL] print ( out ) [EOL] variants . append ( elements ) [EOL] return variants [EOL] [EOL] [EOL] def formatted_scrolls ( warscroll_list , context , * args , ** kwargs ) : [EOL] all_variants = [ [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ] [EOL] for warscroll in warscroll_list : [EOL] all_variants . extend ( warscroll . simplest_stats ( context , * args , ** kwargs , do_print = False ) ) [EOL] max_lengths = [ ] [EOL] for i in range ( len ( all_variants [ [number] ] ) ) : [EOL] max_lengths . append ( max ( [ len ( var [ i ] ) for var in all_variants ] ) ) [EOL] for var in all_variants : [EOL] print ( f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] : [string] { max_lengths [ [number] ] }} [string] ' f'{ var [ [number] ] }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Type [EOL] import builtins [EOL] import sigmar [EOL] import typing [EOL] class Rule : [EOL] name = [string] [EOL] effect = None [EOL] [EOL] def __init__ ( self , name , effect ) : [EOL] self . name = name [EOL] self . effect = effect [EOL] [EOL] def apply ( self , item ) : [EOL] self . effect ( item ) [EOL] [EOL] [EOL] class Spell ( Rule ) : [EOL] def __init__ ( self , name , power , effect ) : [EOL] Rule . __init__ ( self , name , effect ) [EOL] self . power = power [EOL] [EOL] def apply ( self , item ) : [EOL] try : [EOL] item . spells . append ( self ) [EOL] except Exception : [EOL] raise ValueError ( f' [string] { item . __class__ }' ) [EOL] [EOL] [EOL] ARCANE_BOLT = Spell ( [string] , [number] , None ) [EOL] MAGIC_SHIELD = Spell ( [string] , [number] , None ) [EOL] [EOL] [EOL] class CommandAbility ( Rule ) : [EOL] def apply ( self , item ) : [EOL] try : [EOL] item . command_abilities . append ( self ) [EOL] except Exception : [EOL] raise ValueError ( f' [string] { item . __class__ }' ) [EOL] [EOL] [EOL] class CommentRule ( Rule ) : [EOL] def __init__ ( self , name , comment ) : [EOL] Rule . __init__ ( self , name , None ) [EOL] self . comment = comment [EOL] [EOL] def apply ( self , item ) : [EOL] item . notes . append ( self . comment ) [EOL] [EOL] [EOL] class TodoRule ( Rule ) : [EOL] def __init__ ( self , name ) : [EOL] Rule . __init__ ( self , name , None ) [EOL] [EOL] def apply ( self , item ) : [EOL] item . notes . append ( self . name ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str
from typing import Tuple , Union , List , Dict , Callable , Any [EOL] import sigmar [EOL] import builtins [EOL] import typing [EOL] from typing import Union , List , Callable , Dict [EOL] [EOL] from sigmar . basics . string_constants import WEAPON_RANGE , SELF_BASE , ENEMY_BASE , ENEMY_NUMBERS , INCH , SELF_WOUNDS , SELF_MOVE , DID_MOVE [EOL] [EOL] [EOL] class Value : [EOL] def __init__ ( self ) : [EOL] self . rules = [ ] [comment] [EOL] [EOL] def average ( self , context , mod = [number] ) : [EOL] mod = value ( mod ) [EOL] for bonus in self . rules : [EOL] add_mod = bonus ( context ) [EOL] mod += add_mod [EOL] [EOL] if isinstance ( mod , FixedValue ) and mod . defined_value == [number] : [EOL] return self . _average ( context ) [EOL] return self . _average ( context ) + mod . average ( context ) [EOL] [EOL] def _average ( self , context ) : [EOL] raise NotImplementedError [EOL] [EOL] def max ( self , context , mod = [number] ) : [EOL] mod = value ( mod ) [EOL] for bonus in self . rules : [EOL] add_mod = bonus ( context ) [EOL] mod += add_mod [EOL] [EOL] if isinstance ( mod , FixedValue ) and mod . defined_value == [number] : [EOL] return self . _max ( context ) [EOL] return self . _max ( context ) + mod . max ( context ) [EOL] [EOL] def _max ( self , context ) : [EOL] raise NotImplementedError [EOL] [EOL] def potential_values ( self , context , mod = [number] ) : [EOL] mod = value ( mod ) [EOL] for bonus in self . rules : [EOL] add_mod = bonus ( context ) [EOL] mod += add_mod [EOL] [EOL] if isinstance ( mod , FixedValue ) and mod . defined_value == [number] : [EOL] return [ ( potential , proba ) for ( potential , proba ) in self . _potential_values ( context ) ] [EOL] return [ ( potential + potential_mod , proba * proba_mod ) for ( potential , proba ) in self . _potential_values ( context ) for ( potential_mod , proba_mod ) in mod . potential_values ( context ) ] [EOL] [EOL] def _potential_values ( self , context ) : [EOL] raise NotImplementedError [EOL] [EOL] def __add__ ( self , other ) : [EOL] if other == [number] : [EOL] return self [EOL] return SumValue ( self , value ( other ) ) [EOL] [EOL] def __mul__ ( self , other ) : [EOL] if other == [number] : [EOL] return self [EOL] if self == [number] : [EOL] return value ( other ) [EOL] if other == [number] : [EOL] return FixedValue ( [number] ) [EOL] return MultValue ( self , value ( other ) ) [EOL] [EOL] def __sub__ ( self , other ) : [EOL] if other == [number] : [EOL] return self [EOL] return SumValue ( self , MultValue ( FixedValue ( - [number] ) , value ( other ) ) ) [EOL] [EOL] [EOL] class SumValue ( Value ) : [EOL] def __init__ ( self , val_1 , val_2 ) : [EOL] Value . __init__ ( self ) [EOL] self . val_1 = val_1 [EOL] self . val_2 = val_2 [EOL] [EOL] def _average ( self , context ) : [EOL] return self . val_1 . average ( context ) + self . val_2 . average ( context ) [EOL] [EOL] def _max ( self , context ) : [EOL] return self . val_1 . max ( context ) + self . val_2 . max ( context ) [EOL] [EOL] def _potential_values ( self , context ) : [EOL] pot_1 = self . val_1 . potential_values ( context ) [EOL] pot_2 = self . val_2 . potential_values ( context ) [EOL] values = [ ( a + b , p_a * p_b ) for ( a , p_a ) in pot_1 for ( b , p_b ) in pot_2 ] [EOL] return [ ( a , sum ( [ p_b for b , p_b in values if b == a ] ) ) for a in set ( a for a , _ in values ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . val_1 } [string] { self . val_2 } [string] ' [EOL] [EOL] [EOL] class MultValue ( Value ) : [EOL] def __init__ ( self , val_1 , val_2 ) : [EOL] Value . __init__ ( self ) [EOL] self . val_1 = val_1 [EOL] self . val_2 = val_2 [EOL] [EOL] def _average ( self , context ) : [EOL] return self . val_1 . average ( context ) * self . val_2 . average ( context ) [EOL] [EOL] def _max ( self , context ) : [EOL] return self . val_1 . max ( context ) * self . val_2 . max ( context ) [EOL] [EOL] def _potential_values ( self , context ) : [EOL] pot_1 = self . val_1 . potential_values ( context ) [EOL] pot_2 = self . val_2 . potential_values ( context ) [EOL] values = [ ( a * b , p_a * p_b ) for ( a , p_a ) in pot_1 for ( b , p_b ) in pot_2 ] [EOL] return [ ( a , sum ( [ p_b for b , p_b in values if b == a ] ) ) for a in set ( a for a , _ in values ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . val_1 } [string] { self . val_2 } [string] ' [EOL] [EOL] [EOL] class RandomValue ( Value ) : [EOL] def __init__ ( self , probas ) : [EOL] Value . __init__ ( self ) [EOL] self . probas = probas [EOL] [EOL] def _average ( self , context , mod = [number] ) : [EOL] return sum ( [ k * v for k , v in self . probas . items ( ) ] ) [EOL] [EOL] def _max ( self , context , mod = [number] ) : [EOL] return max ( self . probas . keys ( ) ) [EOL] [EOL] def _potential_values ( self , context , mod = [number] ) : [EOL] return [ ( k , v ) for k , v in self . probas . items ( ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] short_probas = [ ( f'{ int ( round ( v , [number] ) * [number] ) } [string] ' , k ) for k , v in self . probas . items ( ) ] [EOL] return f' [string] { short_probas } [string] ' [EOL] [EOL] [EOL] class FixedValue ( Value ) : [EOL] def __init__ ( self , defined_value ) : [EOL] Value . __init__ ( self ) [EOL] self . defined_value = defined_value [EOL] [EOL] def _average ( self , context ) : [EOL] return self . defined_value [EOL] [EOL] def _max ( self , context ) : [EOL] return self . defined_value [EOL] [EOL] def _potential_values ( self , context ) : [EOL] return [ ( self . defined_value , [number] ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . defined_value } [string] ' [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if other == self . defined_value or ( isinstance ( other , FixedValue ) and self . defined_value == other . defined_value ) : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] class DiceValue ( Value ) : [EOL] def __init__ ( self , defined_value ) : [EOL] Value . __init__ ( self ) [EOL] self . defined_value = defined_value [EOL] [EOL] def _average ( self , context ) : [EOL] return sum ( [ i + [number] for i in range ( self . defined_value ) ] ) / self . defined_value [EOL] [EOL] def _max ( self , context ) : [EOL] return self . defined_value [EOL] [EOL] def _potential_values ( self , context ) : [EOL] return [ ( i + [number] , [number] / self . defined_value ) for i in range ( self . defined_value ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . defined_value } [string] ' [EOL] [EOL] [EOL] class AllInRangeValue ( Value ) : [EOL] [EOL] def _average ( self , context ) : [EOL] swing = context [ WEAPON_RANGE ] * INCH + context [ SELF_BASE ] . width [EOL] hits = swing * [number] / context [ ENEMY_BASE ] . width + [number] [EOL] hits += max ( [number] , context [ WEAPON_RANGE ] * INCH - context [ ENEMY_BASE ] . depth ) / context [ ENEMY_BASE ] . width [EOL] return max ( [number] , min ( hits , context [ ENEMY_NUMBERS ] ) ) [EOL] [EOL] def _max ( self , context ) : [EOL] swing = context [ WEAPON_RANGE ] * INCH + context [ SELF_BASE ] . width [EOL] hits = swing * [number] / context [ ENEMY_BASE ] . width + [number] [EOL] hits += max ( [number] , context [ WEAPON_RANGE ] * INCH - context [ ENEMY_BASE ] . depth ) / context [ ENEMY_BASE ] . width [EOL] return max ( [number] , min ( hits , context [ ENEMY_NUMBERS ] ) ) [EOL] [EOL] def _potential_values ( self , context ) : [EOL] m = int ( self . max ( context ) ) [EOL] return [ ( i + [number] , [number] / m ) for i in range ( m ) ] [EOL] [EOL] [EOL] class MoveAcrossValue ( Value ) : [EOL] def _average ( self , context ) : [EOL] if not context . get ( DID_MOVE , True ) : [EOL] return [number] [EOL] return context . get ( SELF_MOVE , [number] ) // [number] [EOL] [EOL] def _max ( self , context ) : [EOL] if not context . get ( DID_MOVE , True ) : [EOL] return [number] [EOL] return context . get ( SELF_MOVE , [number] ) // [number] [EOL] [EOL] def _potential_values ( self , context ) : [EOL] if not context . get ( DID_MOVE , True ) : [EOL] return [number] [EOL] return [ ( context . get ( SELF_MOVE , [number] ) // [number] , [number] ) ] [EOL] [EOL] [EOL] def make_dice_value ( amount , val ) : [EOL] if amount == [number] : [EOL] return DiceValue ( val ) [EOL] else : [EOL] return SumValue ( make_dice_value ( amount - [number] , val ) , DiceValue ( val ) ) [EOL] [EOL] [EOL] def _value ( defined_value ) : [EOL] if isinstance ( defined_value , Value ) : [EOL] return defined_value [EOL] if isinstance ( defined_value , int ) : [EOL] return FixedValue ( defined_value ) [EOL] if isinstance ( defined_value , str ) and [string] in defined_value : [EOL] try : [EOL] nb = [number] if defined_value [ [number] ] == [string] else int ( defined_value . split ( [string] ) [ [number] ] ) [EOL] val = int ( defined_value . split ( [string] ) [ - [number] ] ) [EOL] return make_dice_value ( nb , val ) [EOL] except TypeError : [EOL] pass [EOL] if defined_value == [string] or defined_value == [string] : [EOL] return AllInRangeValue ( ) [EOL] if defined_value == [string] : [EOL] return MoveAcrossValue ( ) [EOL] raise ValueError ( f'{ defined_value } [string] { type ( defined_value ) } [string] ' ) [EOL] [EOL] [EOL] class MonsterValue ( Value ) : [EOL] def __init__ ( self , values ) : [EOL] Value . __init__ ( self ) [EOL] self . defined_value = { k : _value ( v ) for k , v in values . items ( ) } [EOL] [EOL] def _average ( self , context ) : [EOL] if SELF_WOUNDS in context : [EOL] possible = [ key for key in self . defined_value . keys ( ) if key <= context [ SELF_WOUNDS ] ] [EOL] return self . defined_value [ max ( possible ) ] . average ( context , [number] ) [EOL] return self . defined_value [ max ( self . defined_value . keys ( ) ) ] . average ( context , [number] ) [EOL] [EOL] def _max ( self , context ) : [EOL] if SELF_WOUNDS in context : [EOL] possible = [ key for key in self . defined_value . keys ( ) if key <= context [ SELF_WOUNDS ] ] [EOL] return self . defined_value [ max ( possible ) ] . max ( context , [number] ) [EOL] return self . defined_value [ max ( self . defined_value . keys ( ) ) ] . max ( context , [number] ) [EOL] [EOL] def _potential_values ( self , context ) : [EOL] if SELF_WOUNDS in context : [EOL] possible = [ key for key in self . defined_value . keys ( ) if key <= context [ SELF_WOUNDS ] ] [EOL] return self . defined_value [ max ( possible ) ] . max ( context , [number] ) [EOL] return self . defined_value [ max ( self . defined_value . keys ( ) ) ] . potential_values ( context , [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . defined_value } [string] ' [EOL] [EOL] [EOL] def value ( defined_value ) : [EOL] if isinstance ( defined_value , dict ) : [EOL] return MonsterValue ( defined_value ) [EOL] return _value ( defined_value ) [EOL] [EOL] [EOL] ONCE_PER_GAME_MULT = [number] [EOL] [EOL] [EOL] class OncePerGame ( Value ) : [EOL] def __init__ ( self , defined_value ) : [EOL] Value . __init__ ( self ) [EOL] self . defined_value = value ( defined_value ) [EOL] [EOL] def _average ( self , context ) : [EOL] return self . defined_value . average ( context , [number] ) * ONCE_PER_GAME_MULT [EOL] [EOL] def _max ( self , context ) : [EOL] return self . defined_value . max ( context , [number] ) [EOL] [EOL] def _potential_values ( self , context ) : [EOL] possibilities = { val : proba * ONCE_PER_GAME_MULT for val , proba in self . defined_value . potential_values ( context , [number] ) } [EOL] possibilities [ [number] ] = possibilities . get ( [number] , [number] ) + [number] - ONCE_PER_GAME_MULT [EOL] return [ ( val , proba ) for val , proba in possibilities . items ( ) ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . defined_value } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Callable]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 $sigmar.basics.value.Value$ 0 $sigmar.basics.value.Value$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.float]$ 0 $typing.Dict[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Value$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[builtins.str,builtins.int,Value]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[builtins.str,builtins.int,Value]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import sigmar [EOL] import builtins [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] import math [EOL] [EOL] [EOL] class Base : [EOL] def __init__ ( self , depth , width = None ) : [EOL] self . depth = depth [EOL] self . width = width if width is not None else depth [EOL] [EOL] def surface ( self ) : [EOL] return math . pi * self . width * self . width [EOL] [EOL] [EOL] infantry_base = Base ( [number] ) [EOL] large_infantry_base = Base ( [number] ) [EOL] cavalry_base = Base ( [number] , [number] ) [EOL] monster_base = Base ( [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.base.Base$ 0 0 0 0 0 0 $sigmar.basics.base.Base$ 0 0 0 0 0 0 $sigmar.basics.base.Base$ 0 0 0 0 0 0 0 0 $sigmar.basics.base.Base$ 0 0 0 0 0 0 0 0
from typing import Tuple , Union , List , Dict , Callable , Any [EOL] import sigmar [EOL] import builtins [EOL] import typing [EOL] from typing import List , Union , Tuple , Callable , Dict [EOL] from math import factorial [EOL] from copy import copy [EOL] [EOL] from sigmar . basics . value import Value , value [EOL] from sigmar . basics . roll import Roll [EOL] from sigmar . basics . rules import Rule [EOL] from sigmar . basics . string_constants import ( WEAPON_RANGE , RANGE , ENEMY_SAVE , AUTO_WOUND_ON_CRIT , CRIT_BONUS_REND , TOWOUND_MOD_ON_CRIT_HIT , EXTRA_HIT_ON_CRIT , EXTRA_ATTACK_ON_HIT , EXTRA_WOUND_ON_CRIT , MW_ON_WOUND_CRIT , MW_ON_HIT_CRIT , MW_ON_DAMAGE , MW_IF_DAMAGE , EXTRA_DAMAGE_ON_CRIT_WOUND , NUMBER_OF_HITS , MORTAL_WOUNDS , MORTAL_WOUNDS_PER_ATTACK , STOP_ON_CRIT_HIT ) [EOL] [EOL] [EOL] class Weapon : [EOL] def __init__ ( self , name , range_ , attacks , tohit , towound , rend , damage , rules , ) : [EOL] self . name = name [EOL] self . range = value ( range_ ) [EOL] self . attacks = value ( attacks ) [EOL] self . tohit = Roll ( tohit ) [EOL] self . towound = Roll ( towound ) [EOL] self . rend = value ( rend ) [EOL] self . damage = value ( damage ) [EOL] [EOL] self . attack_rules = [ ] [EOL] [EOL] self . rules = rules [EOL] for r in rules : [EOL] r . apply ( self ) [EOL] [EOL] def average_hits ( self , dices , extra_data , mod = [number] ) : [EOL] return self . tohit . average ( dices , extra_data , mod ) [EOL] [EOL] def average_wounds ( self , dices , extra_data , mod = [number] ) : [EOL] return self . towound . average ( dices , extra_data , mod ) [EOL] [EOL] def unsaved_chances ( self , extra_data , extra_rend = [number] ) : [EOL] chances , crit = extra_data [ ENEMY_SAVE ] . chances ( { } , mod = self . rend . average ( extra_data , extra_rend ) ) [EOL] return [number] - chances - crit [EOL] [EOL] def average_damage ( self , context , users = [number] ) : [EOL] if context . get ( RANGE , [number] ) > self . range . average ( context ) or self . range . average ( context ) > [number] >= context . get ( RANGE , [number] ) : [EOL] return [number] [EOL] context [ WEAPON_RANGE ] = self . range . average ( context ) [EOL] dmg = self . attack_round ( copy ( context ) , users ) [EOL] return sum ( [ e [ [string] ] * e [ [string] ] for e in dmg ] ) [EOL] [EOL] def attack_round ( self , context , users = [number] ) : [EOL] my_context = copy ( context ) [EOL] for r in self . attack_rules : [EOL] r ( my_context ) [EOL] [EOL] potential_attacks = { } [EOL] potential_hits = { } [EOL] potential_wounds = { } [EOL] potential_unsaved = { } [EOL] potential_damage = { } [EOL] cleaned_damage = [ ] [EOL] try : [EOL] potential_attacks = [ { [string] : nb * users , [string] : proba , [string] : my_context . get ( MORTAL_WOUNDS , value ( [number] ) ) + my_context . get ( MORTAL_WOUNDS_PER_ATTACK , [number] ) * nb * users , } for ( nb , proba ) in self . attacks . potential_values ( my_context ) ] [EOL] assert abs ( sum ( [ att [ [string] ] for att in potential_attacks ] ) - [number] ) <= pow ( [number] , [number] ) [EOL] potential_attacks = cleaned_dict_list ( potential_attacks , [ [string] , [string] ] ) [EOL] [EOL] potential_hits = compute_potential_hits ( my_context , potential_attacks , self . tohit ) [EOL] assert abs ( sum ( [ hit [ [string] ] for hit in potential_hits ] ) - [number] ) <= pow ( [number] , [number] ) [EOL] potential_hits = cleaned_dict_list ( potential_hits , [ [string] , [string] , [string] ] ) [EOL] [EOL] potential_wounds = compute_potential_wounds ( my_context , potential_hits , self . towound ) [EOL] assert abs ( sum ( [ wnd [ [string] ] for wnd in potential_wounds ] ) - [number] ) <= pow ( [number] , [number] ) [EOL] potential_wounds = cleaned_dict_list ( potential_wounds , [ [string] , [string] , [string] ] ) [EOL] [EOL] potential_unsaved = [ { ** wnd , [string] : nb , [string] : nb_crit , [string] : wnd [ [string] ] * probability_of_save_fail ( wnd [ [string] ] , nb , nb_crit , my_context [ ENEMY_SAVE ] , my_context , rend = self . rend . average ( my_context ) , crit_wnd = wnd [ [string] ] ) } for wnd in potential_wounds for nb in range ( wnd [ [string] ] + [number] ) for nb_crit in range ( max ( [number] , wnd [ [string] ] - ( wnd [ [string] ] - nb ) ) , min ( wnd [ [string] ] , nb ) + [number] ) ] [EOL] assert abs ( sum ( [ unsvd [ [string] ] for unsvd in potential_unsaved ] ) - [number] ) <= pow ( [number] , [number] ) [EOL] potential_unsaved = cleaned_dict_list ( potential_unsaved , [ [string] , [string] , [string] ] ) [EOL] [EOL] potential_damage = compute_potential_damage ( self . damage , my_context , potential_unsaved ) [EOL] assert abs ( sum ( [ dmg [ [string] ] for dmg in potential_damage ] ) - [number] ) <= pow ( [number] , [number] ) [EOL] [EOL] potential_full_damage = [ { ** dmg , [string] : dmg [ [string] ] + nb , [string] : nb , [string] : dmg [ [string] ] * proba , } for dmg in potential_damage for ( nb , proba ) in dmg [ [string] ] . potential_values ( my_context ) ] [EOL] potential_full_damage = cleaned_dict_list ( potential_full_damage , [ [string] ] ) [EOL] [EOL] cleaned_damage = [ { [string] : pick * ( [number] + context . get ( MW_ON_DAMAGE , [number] ) ) , [string] : sum ( [ dmg [ [string] ] for dmg in potential_full_damage if dmg [ [string] ] == pick ] ) } for pick in set ( dmg [ [string] ] for dmg in potential_full_damage ) ] [EOL] [comment] [EOL] except AssertionError : [EOL] info = { [string] : potential_attacks , [string] : potential_hits , [string] : potential_wounds , [string] : potential_unsaved , [string] : potential_damage , [string] : cleaned_damage , } [EOL] print ( self . name ) [EOL] for k , potent in info . items ( ) : [EOL] print ( f' [string] { k } [string] ' ) [EOL] for e in potent : [EOL] print ( str ( { k : str ( v ) for k , v in e . items ( ) } ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) ) [EOL] sum_proba = sum ( e [ [string] ] for e in potent ) [EOL] print ( f' [string] { sum_proba }' ) [EOL] average = sum ( d . get ( [string] ) * d . get ( [string] ) for d in cleaned_damage ) [EOL] print ( f' [string] { average }' ) [EOL] [EOL] return cleaned_damage [EOL] [EOL] [EOL] def cleaned_dict_list ( list_of_dicts , keys_to_keep ) : [EOL] new_list = [ ] [EOL] for d in list_of_dicts : [EOL] ok = False [EOL] for already_in in new_list : [EOL] if len ( [ k for k in keys_to_keep if d [ k ] == already_in [ k ] ] ) == len ( keys_to_keep ) : [comment] [EOL] already_in [ [string] ] += d [ [string] ] [EOL] ok = True [EOL] break [EOL] if not ok : [EOL] new_list . append ( { k : d [ k ] for k in [ * keys_to_keep , [string] ] } ) [EOL] return new_list [EOL] [EOL] [EOL] def compute_potential_damage ( damage , context , potential_unsaved ) : [EOL] potential_damage = [ ] [EOL] for unsvd in potential_unsaved : [EOL] potential_results = { [number] : [number] } [EOL] crit_damage = damage + context . get ( EXTRA_DAMAGE_ON_CRIT_WOUND , [number] ) [EOL] for att in range ( min ( unsvd [ [string] ] , unsvd [ [string] ] ) ) : [EOL] new_results = { } [EOL] for ( val , val_proba ) in crit_damage . potential_values ( context ) : [EOL] for total , total_proba in potential_results . items ( ) : [EOL] new_results [ total + val ] = val_proba * total_proba + new_results . get ( total + val , [number] ) [EOL] potential_results = new_results [EOL] for att in range ( max ( unsvd [ [string] ] - unsvd [ [string] ] , [number] ) ) : [EOL] new_results = { } [EOL] for ( val , val_proba ) in damage . potential_values ( context ) : [EOL] for total , total_proba in potential_results . items ( ) : [EOL] new_results [ total + val ] = val_proba * total_proba + new_results . get ( total + val , [number] ) [EOL] potential_results = new_results [EOL] potential_results = [ ( k , v ) for k , v in potential_results . items ( ) ] [EOL] [EOL] potential_damage . extend ( [ { ** unsvd , [string] : nb , [string] : unsvd [ [string] ] + ( context . get ( MW_ON_DAMAGE , [number] ) * nb ) + ( context . get ( MW_IF_DAMAGE , [number] ) if nb else [number] ) , [string] : unsvd [ [string] ] * proba , } for ( nb , proba ) in potential_results ] ) [EOL] return potential_damage [EOL] [EOL] [EOL] def compute_potential_wounds ( context , potential_hits , towound ) : [EOL] potential_wounds = [ { ** hit , [string] : value ( nb ) + context . get ( EXTRA_WOUND_ON_CRIT , [number] ) * nb_crit , [string] : nb_crit , [string] : hit [ [string] ] + context . get ( MW_ON_WOUND_CRIT , [number] ) * nb_crit , [string] : hit [ [string] ] * probability_of_wound_and_crit ( hit [ [string] ] , nb , nb_crit , towound , context , crit_hit = hit [ [string] ] ) } for hit in potential_hits for nb in range ( hit [ [string] ] + [number] ) for nb_crit in range ( nb + [number] ) ] [EOL] potential_wounds = [ { ** wnd , [string] : nb , [string] : wnd [ [string] ] * proba , } for wnd in potential_wounds for ( nb , proba ) in wnd [ [string] ] . potential_values ( context ) ] [EOL] return potential_wounds [EOL] [EOL] [EOL] def compute_potential_hits ( context , potential_attacks , tohit ) : [EOL] potential_hits = [ { ** att , [string] : value ( nb ) * context . get ( NUMBER_OF_HITS , [number] ) + context . get ( EXTRA_HIT_ON_CRIT , [number] ) * nb_crit , [string] : nb_crit , [string] : nb * context . get ( EXTRA_ATTACK_ON_HIT , [number] ) , [string] : att [ [string] ] * probability_of_hit_and_crit ( att [ [string] ] , nb , nb_crit , tohit , context ) } for att in potential_attacks for nb in range ( att [ [string] ] + [number] ) for nb_crit in range ( nb + [number] ) ] [EOL] potential_hits = [ { ** att , [string] : att [ [string] ] + value ( nb ) + context . get ( EXTRA_HIT_ON_CRIT , [number] ) * nb_crit , [string] : nb_crit + att [ [string] ] , [string] : att [ [string] ] * probability_of_hit_and_crit ( att [ [string] ] , nb , nb_crit , tohit , context ) } for att in potential_hits for nb in range ( att [ [string] ] + [number] ) for nb_crit in range ( nb + [number] ) ] [EOL] potential_hits = [ { ** hit , [string] : nb , [string] : hit [ [string] ] + context . get ( MW_ON_HIT_CRIT , [number] ) * hit [ [string] ] , [string] : hit [ [string] ] * proba , } for hit in potential_hits for ( nb , proba ) in hit [ [string] ] . potential_values ( context ) ] [EOL] if context . get ( STOP_ON_CRIT_HIT , False ) : [EOL] potential_hits = [ { ** hit , [string] : hit [ [string] ] - hit [ [string] ] , [string] : [number] , } for hit in potential_hits ] [EOL] return potential_hits [EOL] [EOL] [EOL] def binomial ( n , k ) : [EOL] [comment] [EOL] if k > n : [EOL] raise ValueError ( f' [string] { k } [string] { n }' ) [EOL] return factorial ( n ) / ( factorial ( k ) * factorial ( n - k ) ) [EOL] [EOL] [EOL] def probability_of_hit_and_crit ( dices , success , crit , roll , context ) : [EOL] success_rate = binomial ( dices , success ) [EOL] success_rate *= pow ( roll . success ( context ) , success ) * pow ( roll . fail ( context ) , dices - success ) [EOL] crit_rate = binomial ( success , crit ) * pow ( roll . critic_given_success ( context ) , crit ) * pow ( roll . no_critic_given_success ( context ) , success - crit ) [EOL] return success_rate * crit_rate [EOL] [EOL] [EOL] def probability_of_wound_and_crit ( dices , success , crit , roll , context , crit_hit = [number] ) : [EOL] succ_crit_hit = min ( crit_hit , success ) [EOL] failed_crit_hit = crit_hit - succ_crit_hit [EOL] if context . get ( AUTO_WOUND_ON_CRIT , False ) and ( failed_crit_hit or crit > success - succ_crit_hit ) : [EOL] [comment] [EOL] return [number] [EOL] success_rate = binomial ( dices , success ) [EOL] [comment] [EOL] if not context . get ( AUTO_WOUND_ON_CRIT , False ) : [EOL] success_rate *= pow ( roll . success ( context , context . get ( TOWOUND_MOD_ON_CRIT_HIT , [number] ) ) , succ_crit_hit ) [EOL] [comment] [EOL] success_rate *= pow ( roll . success ( context ) , success - succ_crit_hit ) [EOL] [comment] [EOL] success_rate *= pow ( roll . fail ( context , context . get ( TOWOUND_MOD_ON_CRIT_HIT , [number] ) ) , failed_crit_hit ) [EOL] [comment] [EOL] success_rate *= pow ( roll . fail ( context ) , dices - success - failed_crit_hit ) [EOL] [EOL] [comment] [EOL] crit_rate = binomial ( success , crit ) [EOL] [comment] [EOL] crit_rate *= pow ( roll . critic_given_success ( context ) , crit ) [EOL] if not ( context . get ( AUTO_WOUND_ON_CRIT , False ) and crit_hit ) : [EOL] crit_rate *= pow ( roll . no_critic_given_success ( context ) , success - crit ) [EOL] return success_rate * crit_rate [EOL] [EOL] [EOL] def probability_of_save_fail ( dices , success , after_crit_wound , roll , context , rend , crit_wnd = [number] ) : [EOL] if after_crit_wound > success : [EOL] raise ValueError ( f' [string] { after_crit_wound } [string] { success } [string] ' ) [EOL] if after_crit_wound > crit_wnd : [EOL] raise ValueError ( f' [string] { after_crit_wound } [string] { crit_wnd } [string] ' ) [EOL] [EOL] regular_pass_rate = binomial ( dices - crit_wnd , success - after_crit_wound ) [EOL] regular_pass_rate *= pow ( roll . fail ( context , rend ) , success - after_crit_wound ) [EOL] regular_pass_rate *= pow ( roll . success ( context , rend ) , ( dices - crit_wnd ) - ( success - after_crit_wound ) ) [EOL] [EOL] crit_pass_rate = binomial ( crit_wnd , after_crit_wound ) [EOL] crit_pass_rate *= pow ( roll . fail ( context , rend + context . get ( CRIT_BONUS_REND , [number] ) ) , after_crit_wound ) [EOL] crit_pass_rate *= pow ( roll . success ( context , rend + context . get ( CRIT_BONUS_REND , [number] ) ) , crit_wnd - after_crit_wound ) [EOL] [EOL] return regular_pass_rate * crit_pass_rate [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Union[builtins.int,builtins.str,sigmar.basics.value.Value,typing.Dict[builtins.int,typing.Union[builtins.int,builtins.str,sigmar.basics.value.Value]]]$ 0 0 0 $sigmar.basics.roll.Roll$ 0 $sigmar.basics.roll.Roll$ 0 0 0 0 0 $typing.List[sigmar.basics.rules.Rule]$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.str,sigmar.basics.value.Value,typing.Dict[builtins.int,typing.Union[builtins.int,builtins.str,sigmar.basics.value.Value]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 $sigmar.basics.roll.Roll$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Callable]$ 0 0 0 0 0 0 0 $typing.List[sigmar.basics.rules.Rule]$ 0 $typing.List[sigmar.basics.rules.Rule]$ 0 0 0 0 $typing.List[sigmar.basics.rules.Rule]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Anybuiltins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
SELF_NUMBERS = [string] [comment] [EOL] SELF_BASE = [string] [EOL] SELF_WOUNDS = [string] [EOL] SELF_MOVE = [string] [EOL] [EOL] ENEMY_NUMBERS = [string] [EOL] ENEMY_BASE = [string] [EOL] ENEMY_WOUNDS = [string] [EOL] ENEMY_KEYWORDS = [string] [EOL] ENEMY_SAVE = [string] [EOL] ENEMY_BRAVERY = [string] [EOL] [EOL] CHARGING = [string] [EOL] DID_MOVE = [string] [EOL] [EOL] REND = [string] [EOL] RANGE = [string] [comment] [EOL] WEAPON_RANGE = [string] [comment] [EOL] [EOL] MORTAL_WOUNDS = [string] [EOL] MORTAL_WOUNDS_PER_ATTACK = [string] [EOL] [EOL] [comment] [EOL] AUTO_WOUND_ON_CRIT = [string] [EOL] CRIT_BONUS_REND = [string] [EOL] EXTRA_ATTACK_ON_HIT = [string] [EOL] EXTRA_DAMAGE_ON_CRIT_WOUND = [string] [EOL] EXTRA_HIT_ON_CRIT = [string] [EOL] EXTRA_WOUND_ON_CRIT = [string] [EOL] MW_IF_DAMAGE = [string] [comment] [EOL] MW_ON_DAMAGE = [string] [comment] [EOL] MW_ON_HIT_CRIT = [string] [EOL] MW_ON_WOUND_CRIT = [string] [EOL] NUMBER_OF_HITS = [string] [EOL] TOWOUND_MOD_ON_CRIT_HIT = [string] [EOL] STOP_ON_CRIT_HIT = [string] [EOL] [EOL] [comment] [EOL] DEPLOYMENT = [string] [EOL] FEAR = [string] [EOL] [EOL] INCH = [number] [EOL] UNBIND_RANGE = [number] [EOL]	$builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0
from typing import List , Any , Tuple , Callable [EOL] import builtins [EOL] import typing [EOL] from typing import Tuple , List , Callable [EOL] [EOL] from sigmar . basics . value import value , FixedValue [EOL] [EOL] [EOL] class Roll : [EOL] def __init__ ( self , base_value ) : [EOL] if isinstance ( base_value , Roll ) : [EOL] self . base_value = base_value . base_value [EOL] else : [EOL] self . base_value = value ( base_value ) [EOL] self . rerolled = [number] [EOL] self . rules = [ ] [comment] [EOL] self . mod_ignored = [ ] [EOL] [EOL] def chances ( self , context , mod = [number] ) : [EOL] if isinstance ( self . base_value , FixedValue ) and self . base_value . defined_value == [number] : [EOL] return [number] , [number] [EOL] rerolled = self . rerolled [EOL] if mod in self . mod_ignored or [string] in self . mod_ignored : [EOL] mod = [number] [EOL] [EOL] for bonus in self . rules : [EOL] add_mod , add_reroll = bonus ( context ) [EOL] mod += add_mod [EOL] rerolled = max ( rerolled , add_reroll ) [EOL] [EOL] base_value = self . base_value . average ( context ) - mod [EOL] chances = ( [number] - base_value ) / [number] [EOL] rerolls_chance = [number] + min ( rerolled , base_value - [number] ) / [number] [EOL] chances *= rerolls_chance [EOL] sixes = rerolls_chance * max ( [number] , [number] + mod ) / [number] if base_value <= [number] else [number] [EOL] return max ( [number] , chances - sixes ) , sixes [EOL] [EOL] def success ( self , context , mod = [number] ) : [EOL] hit , crit = self . chances ( context , mod ) [EOL] return hit + crit [EOL] [EOL] def fail ( self , context , mod = [number] ) : [EOL] hit , crit = self . chances ( context , mod ) [EOL] return [number] - hit - crit [EOL] [EOL] def critic_given_success ( self , context , mod = [number] ) : [EOL] hit , crit = self . chances ( context , mod ) [EOL] if hit + crit == [number] : [EOL] return [number] [EOL] return crit / ( hit + crit ) [EOL] [EOL] def no_critic_given_success ( self , context , mod = [number] ) : [EOL] hit , crit = self . chances ( context , mod ) [EOL] if hit + crit == [number] : [EOL] return [number] [EOL] return [number] - ( crit / ( hit + crit ) ) [EOL] [EOL] def average ( self , dices , context , mod = [number] ) : [EOL] chances , sixes = self . chances ( context , mod ) [EOL] return chances * dices , sixes * dices [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . base_value } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Callable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 $builtins.dict$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0