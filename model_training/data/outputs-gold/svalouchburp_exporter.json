[comment] [EOL] from setuptools import find_packages , setup [comment] [EOL] [EOL] with open ( [string] , [string] ) as fh : [EOL] long_description = fh . read ( ) [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = [string] , long_description = long_description , packages = find_packages ( where = [string] ) , package_dir = { [string] : [string] } , include_package_data = True , zip_safe = False , license = [string] , url = [string] , platforms = [string] , python_requires = [string] , install_requires = [ [string] , [string] , [string] , ] , extras_require = { [string] : [ [string] , [string] , ] , [string] : [ [string] , ] } , entry_points = { [string] : [ [string] , ] , } , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] import pytest [EOL] [EOL] from burp_exporter . parser import Parser [EOL] [EOL] [EOL] data_3c = [string] [EOL] data_2c = [string] [EOL] [EOL] [EOL] class TestParser : [EOL] [EOL] def test_init ( self ) : [EOL] p = Parser ( ) [EOL] assert len ( p . clients ) == [number] [EOL] [EOL] def test_parser_3clients ( self ) : [EOL] p = Parser ( ) [EOL] p . parse_message ( json . loads ( data_3c ) ) [EOL] assert len ( p . clients ) == [number] [EOL] [EOL] def test_parser_remove_client ( self ) : [EOL] [docstring] [EOL] p = Parser ( ) [EOL] p . parse_message ( json . loads ( data_3c ) ) [EOL] assert len ( p . clients ) == [number] [EOL] p . parse_message ( json . loads ( data_2c ) ) [EOL] assert len ( p . clients ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[EOL] [EOL] from typing import Dict , List , Any , Tuple [EOL] import prometheus_client [EOL] import logging [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import threading [EOL] from pkg_resources import get_distribution [EOL] from prometheus_client import CollectorRegistry , generate_latest , MetricsHandler , CONTENT_TYPE_LATEST [EOL] from prometheus_client . exposition import _ThreadingSimpleServer [EOL] from prometheus_client . metrics_core import Metric [EOL] from prometheus_client . utils import floatToGoString [EOL] from typing import List , Optional [EOL] from urllib . parse import parse_qs , urlparse [EOL] [EOL] DAEMON = None [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def generate ( registries ) : [EOL] [docstring] [EOL] [EOL] def sample_line ( line ) : [EOL] if line . labels : [EOL] labelstr = [string] . format ( [string] . join ( [ [string] . format ( k , v . replace ( [string] , [string] ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) ) for k , v in sorted ( line . labels . items ( ) ) ] ) ) [EOL] else : [EOL] labelstr = [string] [EOL] timestamp = [string] [EOL] if line . timestamp is not None : [EOL] [comment] [EOL] timestamp = [string] . format ( int ( float ( line . timestamp ) * [number] ) ) [EOL] return [string] . format ( line . name , labelstr , floatToGoString ( line . value ) , timestamp ) [EOL] [EOL] output = list ( ) [EOL] for registry in registries : [EOL] for metric in registry . collect ( ) : [EOL] try : [EOL] mname = metric . name [EOL] mtype = metric . type [EOL] [comment] [EOL] if mtype == [string] : [EOL] mname += [string] [EOL] elif mtype == [string] : [EOL] mname += [string] [EOL] mtype = [string] [EOL] elif mtype == [string] : [EOL] mtype = [string] [EOL] elif mtype == [string] : [EOL] [comment] [EOL] [comment] [EOL] mtype = [string] [EOL] elif mtype == [string] : [EOL] mtype = [string] [EOL] [EOL] output . append ( [string] . format ( mname , metric . documentation . replace ( [string] , [string] ) . replace ( [string] , [string] ) ) ) [EOL] output . append ( f' [string] { mname } [string] { mtype } [string] ' ) [EOL] [EOL] om_samples = { } [EOL] for s in metric . samples : [EOL] for suffix in [ [string] , [string] , [string] ] : [EOL] if s . name == metric . name + suffix : [EOL] [comment] [EOL] om_samples . setdefault ( suffix , [ ] ) . append ( sample_line ( s ) ) [EOL] break [EOL] else : [EOL] output . append ( sample_line ( s ) ) [EOL] except Exception as exception : [EOL] exception . args = ( exception . args or ( [string] , ) ) + ( metric , ) [EOL] raise [EOL] [EOL] for suffix , lines in sorted ( om_samples . items ( ) ) : [EOL] output . append ( f' [string] { metric . name }{ suffix } [string] ' ) [EOL] output . extend ( lines ) [EOL] return [string] . join ( output ) . encode ( [string] ) [EOL] [EOL] [EOL] class BurpHandler ( MetricsHandler ) : [EOL] [EOL] def do_GET ( self ) : [EOL] log . debug ( f' [string] { self . path }' ) [EOL] path = urlparse ( self . path ) . path [EOL] params = parse_qs ( urlparse ( self . path ) . query ) [EOL] output = [string] [EOL] try : [EOL] if path == [string] : [EOL] self . send_welcome ( ) [EOL] elif DAEMON is None : [EOL] raise Exception ( [string] ) [EOL] elif path == [string] : [EOL] if [string] in params : [EOL] names = params [ [string] ] [EOL] registries = list ( ) [EOL] for clnt in DAEMON . clients : [EOL] if clnt . name in names : [EOL] registries . append ( clnt . registry ) [EOL] output = generate ( registries = registries ) [EOL] else : [EOL] output = generate ( registries = [ DAEMON . registry ] ) [EOL] elif path == [string] : [EOL] output = generate_latest ( self . registry ) [EOL] else : [EOL] self . send_error ( [number] , [string] ) [EOL] except Exception as e : [EOL] self . send_error ( [number] , str ( e ) ) [EOL] if output != [string] : [EOL] self . send_response ( [number] ) [EOL] self . send_header ( [string] , CONTENT_TYPE_LATEST ) [EOL] self . end_headers ( ) [EOL] self . wfile . write ( output ) [EOL] [EOL] def send_welcome ( self ) : [EOL] log . debug ( [string] ) [EOL] self . send_response ( [number] ) [EOL] self . send_header ( [string] , [string] ) [EOL] self . end_headers ( ) [EOL] content = f''' [string] { get_distribution ( [string] ) . version } [string] ''' [EOL] self . wfile . write ( content . encode ( [string] ) ) [EOL] [EOL] def send_by_server ( self , names ) : [EOL] [docstring] [EOL] if not DAEMON : [EOL] return [EOL] registries = list ( ) [EOL] for clnt in DAEMON . clients : [EOL] if clnt . name in names : [EOL] registries . add ( clnt ) [EOL] output = generate ( registries = registries ) [EOL] self . send_response ( [number] ) [EOL] self . send_headers ( [string] , CONTENT_TYPE_LATEST ) [EOL] self . end_headers ( ) [EOL] self . wfile . write ( output ) [EOL] [EOL] [EOL] def start_http_server ( port , addr = [string] ) : [EOL] httpd = _ThreadingSimpleServer ( ( addr , port ) , BurpHandler ) [EOL] t = threading . Thread ( target = httpd . serve_forever ) [EOL] t . daemon = True [EOL] t . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 $typing.List[builtins.str]$ 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $typing.List[prometheus_client.CollectorRegistry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[prometheus_client.CollectorRegistry]$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.List[prometheus_client.CollectorRegistry]$ 0 $typing.List[prometheus_client.CollectorRegistry]$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.List[prometheus_client.CollectorRegistry]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import builtins [EOL] from pydantic import BaseModel [EOL] from typing import Dict , List , Optional [EOL] [EOL] [EOL] class BackupInfo ( BaseModel ) : [EOL] [docstring] [EOL] [comment] [EOL] number = ... [EOL] [comment] [EOL] timestamp = ... [EOL] [comment] [EOL] flags = ... [EOL] [comment] [EOL] logs = ... [EOL] [EOL] [EOL] class ClientInfo ( BaseModel ) : [EOL] [docstring] [EOL] [comment] [EOL] name = ... [EOL] [comment] [EOL] labels = ... [EOL] [comment] [EOL] run_status = ... [EOL] [comment] [EOL] protocol = ... [EOL] [comment] [EOL] backups = ... [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if type ( other ) == ClientInfo : [EOL] return self . name == other . name [EOL] elif type ( other ) == str : [EOL] return self . name == other [EOL] return False [EOL] [EOL] [EOL] class ClientSettings ( BaseModel ) : [EOL] [EOL] [comment] [EOL] name = ... [EOL] [comment] [EOL] cname = ... [EOL] [comment] [EOL] password = ... [EOL] [comment] [EOL] refresh_interval_seconds = [number] [EOL] [comment] [EOL] version = [string] [EOL] [EOL] [comment] [EOL] burp_host = ... [EOL] [comment] [EOL] burp_port = ... [EOL] [comment] [EOL] burp_cname = ... [EOL] [EOL] [comment] [EOL] tls_ca_cert = ... [EOL] [comment] [EOL] tls_cert = ... [EOL] [comment] [EOL] tls_key = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.List[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[BackupInfo]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0
[EOL] from typing import List , Any , Optional [EOL] import prometheus_client [EOL] import types [EOL] import socket [EOL] import ssl [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] import src [EOL] import datetime [EOL] import json [EOL] import logging [EOL] import select [EOL] import socket as sock [EOL] import ssl [EOL] [EOL] from prometheus_client . core import CollectorRegistry , CounterMetricFamily , GaugeMetricFamily [EOL] from pydantic import ValidationError [EOL] from typing import List , Optional , Set [EOL] [EOL] from . types import ClientSettings , ClientInfo [EOL] [EOL] [EOL] class Client : [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . _config = config [EOL] self . _log = logging . getLogger ( f' [string] { self . _config . name }' ) [EOL] self . _socket = None [EOL] self . _buf = [string] [EOL] self . _connected = False [EOL] self . _clients = list ( ) [EOL] self . _ts_last_query = datetime . datetime . utcnow ( ) - datetime . timedelta ( seconds = self . _config . refresh_interval_seconds ) [EOL] self . _ts_last_connect_attempt = datetime . datetime . utcnow ( ) - datetime . timedelta ( seconds = self . _config . refresh_interval_seconds ) [EOL] self . _parse_errors = [number] [EOL] [comment] [EOL] self . _in_flight = False [EOL] self . _registry = CollectorRegistry ( ) [EOL] [EOL] self . _registry . register ( self ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . _config . name } [string] ' [EOL] [EOL] @ property def name ( self ) : [EOL] return self . _config . name [EOL] [EOL] @ property def socket ( self ) : [EOL] return self . _socket [EOL] [EOL] @ property def connected ( self ) : [EOL] return self . _connected [EOL] [EOL] @ property def last_connect_attempt ( self ) : [EOL] return self . _ts_last_connect_attempt [EOL] [EOL] @ property def last_query ( self ) : [EOL] return self . _ts_last_query [EOL] [EOL] @ property def refresh_interval ( self ) : [EOL] return self . _config . refresh_interval_seconds [EOL] [EOL] @ property def client_count ( self ) : [EOL] return len ( self . _clients ) [EOL] [EOL] @ property def registry ( self ) : [EOL] return self . _registry [EOL] [EOL] def refresh ( self ) : [EOL] [docstring] [EOL] if self . _connected and self . _ts_last_query < datetime . datetime . utcnow ( ) - datetime . timedelta ( seconds = self . _config . refresh_interval_seconds ) : [EOL] if self . _in_flight : [EOL] self . _log . warning ( [string] ) [EOL] else : [EOL] self . _ts_last_query = datetime . datetime . utcnow ( ) [EOL] self . write_command ( [string] , [string] ) [EOL] [EOL] def collect ( self ) : [EOL] [docstring] [EOL] self . _log . debug ( f' [string] { len ( self . _clients ) } [string] ' ) [EOL] burp_last_contact = GaugeMetricFamily ( [string] , [string] , labels = [ [string] ] ) [EOL] burp_last_contact . add_metric ( [ self . name ] , self . _ts_last_query . replace ( tzinfo = datetime . timezone . utc ) . timestamp ( ) ) [EOL] yield burp_last_contact [EOL] [EOL] burp_up = GaugeMetricFamily ( [string] , [string] , labels = [ [string] ] ) [EOL] burp_up . add_metric ( [ self . name ] , [number] if self . _connected else [number] ) [EOL] yield burp_up [EOL] [EOL] burp_parse_errors = CounterMetricFamily ( [string] , [string] , labels = [ [string] ] ) [EOL] burp_parse_errors . add_metric ( [ self . name ] , self . _parse_errors ) [EOL] yield burp_parse_errors [EOL] [EOL] burp_clients = GaugeMetricFamily ( [string] , [string] , labels = [ [string] ] ) [EOL] burp_clients . add_metric ( [ self . name ] , len ( self . _clients ) ) [EOL] yield burp_clients [EOL] [EOL] cl_backup_num = GaugeMetricFamily ( [string] , [string] , labels = [ [string] , [string] ] ) [EOL] cl_backup_ts = GaugeMetricFamily ( [string] , [string] , labels = [ [string] , [string] ] ) [EOL] cl_backup_has_in_progress = GaugeMetricFamily ( [string] , [string] , labels = [ [string] , [string] ] ) [EOL] cl_run_status = GaugeMetricFamily ( [string] , [string] , labels = [ [string] , [string] , [string] ] ) [EOL] [EOL] for clnt in self . _clients : [EOL] has_working = False [EOL] [EOL] for b in clnt . backups : [EOL] if [string] in b . flags : [EOL] cl_backup_num . add_metric ( [ self . name , clnt . name ] , b . number ) [EOL] cl_backup_ts . add_metric ( [ self . name , clnt . name ] , b . timestamp ) [EOL] elif [string] in b . flags : [EOL] [comment] [EOL] has_working = True [EOL] [comment] [EOL] cl_backup_has_in_progress . add_metric ( [ self . name , clnt . name ] , [number] if has_working else [number] ) [EOL] cl_run_status . add_metric ( [ self . name , clnt . name , [string] ] , clnt . run_status == [string] ) [EOL] cl_run_status . add_metric ( [ self . name , clnt . name , [string] ] , clnt . run_status == [string] ) [EOL] [EOL] yield cl_backup_num [EOL] yield cl_backup_ts [EOL] yield cl_backup_has_in_progress [EOL] yield cl_run_status [EOL] [EOL] def setup_socket ( self ) : [EOL] [docstring] [EOL] if not self . _socket : [EOL] self . _ts_last_connect_attempt = datetime . datetime . utcnow ( ) [EOL] self . _log . debug ( f' [string] { self . _config . burp_host } [string] { self . _config . burp_port }' ) [EOL] self . _connected = False [EOL] sck = sock . socket ( sock . AF_INET , sock . SOCK_STREAM ) [EOL] sck . setblocking ( True ) [EOL] try : [EOL] sck . connect ( ( self . _config . burp_host , self . _config . burp_port ) ) [EOL] except ConnectionRefusedError : [EOL] self . _log . warning ( [string] ) [EOL] raise [EOL] [EOL] self . _log . debug ( f' [string] { self . _config . tls_ca_cert } [string] { self . _config . tls_cert } [string] { self . _config . tls_key }' ) [EOL] context = ssl . SSLContext ( ssl . PROTOCOL_TLSv1_2 ) [EOL] context . verify_mode = ssl . CERT_REQUIRED [EOL] context . load_verify_locations ( cafile = self . _config . tls_ca_cert ) [EOL] context . load_cert_chain ( certfile = self . _config . tls_cert , keyfile = self . _config . tls_key ) [EOL] context . check_hostname = True [EOL] [EOL] self . _log . debug ( [string] ) [EOL] self . _socket = context . wrap_socket ( sck , server_side = False , server_hostname = self . _config . burp_cname ) [EOL] [EOL] cert = self . _socket . getpeercert ( ) [EOL] if not cert : [EOL] raise Exception ( [string] ) [EOL] ssl . match_hostname ( cert , self . _config . burp_cname ) [EOL] self . _log . debug ( [string] ) [EOL] [EOL] def teardown_socket ( self ) : [EOL] [docstring] [EOL] self . _connected = False [EOL] self . _in_flight = False [EOL] self . _buf = [string] [EOL] if self . _socket : [EOL] [comment] [EOL] self . _socket . shutdown ( sock . SHUT_RDWR ) [EOL] self . _socket . close ( ) [EOL] del self . _socket [EOL] self . _socket = None [EOL] self . _log . info ( [string] ) [EOL] [EOL] def write_command ( self , cmd , data ) : [EOL] [docstring] [EOL] if not self . _socket : [comment] [EOL] raise IOError ( [string] ) [EOL] [comment] [EOL] if len ( cmd ) > [number] : [EOL] raise IOError ( [string] ) [EOL] wstring = [string] % ( cmd , len ( data ) + [number] , data ) [EOL] self . _socket . write ( wstring . encode ( [string] ) ) [EOL] [EOL] def read ( self , bufsize = [number] ) : [EOL] [docstring] [EOL] if not self . _socket : [EOL] raise IOError ( [string] ) [EOL] rec_data = self . _socket . read ( bufsize ) [EOL] reclen = len ( rec_data ) [EOL] if reclen == [number] : [EOL] self . _log . warning ( [string] ) [EOL] self . teardown_socket ( ) [EOL] else : [EOL] self . _log . debug ( f' [string] { reclen } [string] ' ) [EOL] self . _buf += rec_data [EOL] if reclen < bufsize : [EOL] self . handle_data ( ) [EOL] self . _in_flight = False [EOL] [EOL] def raw_read ( self , bufsize = [number] ) : [EOL] [docstring] [EOL] if not self . _socket : [EOL] raise IOError ( [string] ) [EOL] data = [string] [EOL] while [number] : [EOL] r , _ , _ = select . select ( [ self . _socket ] , [ ] , [ ] , [number] ) [EOL] if self . _socket not in r : [EOL] self . _log . debug ( [string] ) [EOL] break [EOL] rec_data = self . _socket . read ( bufsize ) [EOL] reclen = len ( rec_data ) [EOL] if reclen == [number] : [EOL] self . _log . warning ( [string] ) [EOL] self . teardown_socket ( ) [EOL] break [EOL] self . _log . debug ( f' [string] { reclen } [string] ' ) [EOL] data += rec_data [EOL] if reclen < bufsize : [EOL] break [EOL] if len ( data ) == [number] : [EOL] self . _log . debug ( [string] ) [EOL] return data . decode ( [string] ) [EOL] [EOL] def connect ( self ) : [EOL] [docstring] [EOL] if not self . _socket : [EOL] raise IOError ( [string] ) [EOL] if self . _connected : [EOL] raise Exception ( [string] ) [EOL] [EOL] self . write_command ( [string] , f' [string] { self . _config . version }' ) [EOL] data = self . raw_read ( ) [EOL] if data and [string] in data : [EOL] if [string] in data : [EOL] self . _server_version = data . split ( [string] ) [ - [number] ] [EOL] else : [EOL] raise IOError ( [string] ) [EOL] [EOL] self . write_command ( [string] , self . _config . cname ) [EOL] data = self . raw_read ( ) [EOL] if not data or [string] not in data : [EOL] raise IOError ( f' [string] { data }' ) [EOL] [EOL] [comment] [EOL] self . write_command ( [string] , self . _config . password ) [EOL] [EOL] data = self . raw_read ( ) [EOL] if not data : [EOL] raise IOError ( [string] ) [EOL] if data . startswith ( [string] ) : [EOL] self . _log . warning ( f' [string] { data [ [number] : ] }' ) [EOL] data = self . raw_read ( ) [EOL] if not data or [string] not in data : [EOL] raise IOError ( [string] ) [EOL] [EOL] self . write_command ( [string] , [string] ) [EOL] data = self . raw_read ( ) [EOL] if not data or [string] not in data : [EOL] raise IOError ( [string] ) [EOL] [EOL] self . write_command ( [string] , [string] ) [EOL] data = self . raw_read ( ) [EOL] if not data or [string] not in data : [EOL] raise IOError ( [string] ) [EOL] [EOL] if [string] in data : [EOL] self . write_command ( [string] , [string] ) [EOL] if [string] in data : [EOL] self . write_command ( [string] , [string] ) [EOL] if [string] in data : [EOL] self . write_command ( [string] , [string] ) [EOL] [EOL] self . write_command ( [string] , [string] ) [EOL] data = self . raw_read ( ) [EOL] if not data or [string] not in data : [EOL] raise IOError ( f' [string] { data }' ) [EOL] [EOL] [comment] [EOL] self . write_command ( [string] , [string] ) [EOL] self . raw_read ( ) [EOL] [comment] [EOL] [comment] [EOL] self . raw_read ( ) [EOL] self . _connected = True [EOL] [EOL] def handle_data ( self ) : [EOL] [docstring] [EOL] buf = self . _buf . decode ( [string] ) [EOL] if buf [ [number] ] not in [ [string] , [string] ] : [EOL] raise IOError ( f' [string] { buf [ [number] ] } [string] { buf }' ) [EOL] [comment] [EOL] while True : [EOL] mtype = buf [ [number] ] [EOL] dlen = len ( buf ) [EOL] [comment] [EOL] if dlen == [number] and buf == [string] : [EOL] break [EOL] if dlen < [number] : [EOL] raise Exception ( [string] ) [EOL] try : [EOL] mlen = int ( buf [ [number] : [number] ] , [number] ) [EOL] except ValueError as e : [EOL] raise Exception ( [string] ) from e [EOL] if not dlen == mlen + [number] : [EOL] raise Exception ( f' [string] { mlen } [string] { dlen - [number] }' ) [EOL] [EOL] mdata = buf [ [number] : mlen + [number] ] [EOL] if mtype == [string] : [EOL] try : [EOL] json_data = json . loads ( mdata ) [EOL] except json . JSONDecodeError as e : [EOL] self . _log . warning ( [string] + str ( e ) ) [EOL] raise [EOL] self . parse_message ( json_data ) [EOL] elif mtype == [string] : [EOL] self . _log . warning ( f' [string] { mdata }' ) [EOL] else : [EOL] raise Exception ( f' [string] { mtype }' ) [EOL] [EOL] data = buf [ mlen + [number] : - [number] ] [EOL] if len ( data ) < [number] : [EOL] self . _log . debug ( [string] ) [EOL] break [EOL] self . _buf = [string] [EOL] [EOL] def parse_message ( self , message ) : [EOL] [docstring] [EOL] self . _log . debug ( f' [string] { message }' ) [EOL] if [string] in message : [EOL] clients = set ( ) [EOL] for client in message [ [string] ] : [EOL] try : [EOL] info = ClientInfo ( ** client ) [EOL] except ValidationError as e : [EOL] self . _log . warning ( f' [string] { str ( e ) }' ) [EOL] self . _parse_errors += [number] [EOL] else : [EOL] [comment] [EOL] clients . add ( info . name ) [EOL] if info . name not in self . _clients : [EOL] self . _log . debug ( f' [string] { info . name }' ) [EOL] self . _clients . append ( info ) [EOL] else : [EOL] self . _log . debug ( f' [string] { info . name }' ) [EOL] [comment] [EOL] self . _clients = [ info if cl . name == info . name else cl for cl in self . _clients ] [EOL] [EOL] self . _log . debug ( f' [string] { self . _clients } [string] { clients }' ) [EOL] [comment] [EOL] self . _clients = [ x for x in self . _clients if x . name in clients ] [EOL] self . _log . debug ( f' [string] { self . _clients }' ) [EOL] [EOL] else : [EOL] self . _log . warning ( f' [string] { message }' ) [EOL] raise Exception ( [string] ) [EOL]	one$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 $src.burp_exporter.types.ClientInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] from typing import Any [EOL] import typing [EOL] from prometheus_client import Counter , Enum , Gauge [EOL] [EOL] [EOL] [comment] [EOL] SERVER_LAST_CONTACT = Gauge ( [string] , [string] ) [EOL] SERVER_CONTACT_ATTEMPTS = Counter ( [string] , [string] ) [EOL] SERVER_UP = Gauge ( [string] , [string] ) [EOL] PARSE_ERRORS = Counter ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] CLIENT_COUNT = Gauge ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] CLIENT_BACKUP_NUM = Gauge ( [string] , [string] , [ [string] ] ) [EOL] CLIENT_BACKUP_TIMESTAMP = Gauge ( [string] , [string] , [ [string] ] ) [EOL] CLIENT_BACKUP_LOGS = Gauge ( [string] , [string] , [ [string] , [string] ] ) [EOL] CLIENT_BACKUP_HAS_IN_PROGRESS = Gauge ( [string] , [string] , [ [string] ] ) [EOL] CLIENT_RUN_STATUS = Enum ( [string] , [string] , [ [string] ] , states = [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import pydantic [EOL] import builtins [EOL] from pydantic import BaseSettings , IPvAnyAddress [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] burp_host = [string] [EOL] [comment] [EOL] burp_port = [number] [EOL] [comment] [EOL] burp_cname = [string] [EOL] [comment] [EOL] timeout_seconds = [number] [EOL] [EOL] [comment] [EOL] cname = [string] [EOL] [comment] [EOL] password = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] tls_ca_cert = [string] [EOL] [comment] [EOL] tls_cert = [string] [EOL] [comment] [EOL] tls_key = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] bind_address = [string] [EOL] [comment] [EOL] bind_port = [number] [EOL] [EOL] class Config : [EOL] env_prefix = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $pydantic.IPvAnyAddress$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0