from typing import Optional , Match , List [EOL] import typing [EOL] import builtins [EOL] import configparser [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] [EOL] import re [EOL] from configparser import ConfigParser [EOL] from functools import lru_cache [EOL] from pathlib import Path [EOL] from typing import List , Optional [comment] [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] [EOL] PROJECT_NAME = [string] [EOL] [EOL] [EOL] def get_version ( ) : [comment] [EOL] [docstring] [EOL] info_path = Path ( __file__ ) . parent / PROJECT_NAME / [string] [EOL] with open ( info_path , [string] ) as info_handle : [EOL] info = info_handle . read ( ) [EOL] pattern = [string] [EOL] version_match = re . search ( pattern , info , re . MULTILINE ) [EOL] if version_match is not None : [EOL] return version_match . group ( [number] ) [EOL] else : [EOL] raise RuntimeError ( [string] . format ( path = info_path . as_posix ( ) ) ) [EOL] [EOL] [EOL] @ lru_cache ( [number] ) def parse_pipfile ( ) : [comment] [EOL] [docstring] [EOL] pipfile_path = Path ( __file__ ) . parent / [string] [EOL] if not pipfile_path . exists ( ) : [EOL] return None [EOL] config = ConfigParser ( ) [EOL] config . read ( pipfile_path . as_posix ( ) ) [EOL] return config [EOL] [EOL] [EOL] def get_python_version_from_pipfile ( ) : [comment] [EOL] [docstring] [EOL] pipfile_config = parse_pipfile ( ) [EOL] if ( pipfile_config is not None [EOL] and [string] in pipfile_config . sections ( ) [EOL] and [string] in pipfile_config [ [string] ] . keys ( ) ) : [EOL] return [string] . format ( min_ver = pipfile_config [ [string] ] [ [string] ] ) [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_packages_from_pipfile ( ) : [comment] [EOL] [docstring] [EOL] pipfile_config = parse_pipfile ( ) [EOL] if pipfile_config is None : [EOL] return [ ] [EOL] else : [EOL] return [ k . strip ( [string] ) if v . strip ( [string] ) == [string] else k . strip ( [string] ) + v . strip ( [string] ) for k , v in pipfile_config . items ( [string] ) ] [EOL] [EOL] [EOL] setup ( name = PROJECT_NAME , version = get_version ( ) , description = [string] , packages = find_packages ( exclude = [ [string] ] ) , py_modules = [ ] , python_requires = get_python_version_from_pipfile ( ) , install_requires = get_packages_from_pipfile ( ) , entry_points = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[configparser.ConfigParser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0