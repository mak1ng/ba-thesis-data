	0
from typing import Union , Dict , Any , List , Optional , Tuple [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] import os [EOL] from pathlib import Path [EOL] [EOL] [comment] [EOL] PROJECT_PACKAGE = Path ( __file__ ) . resolve ( ) . parent [EOL] [EOL] BASE_DIR = PROJECT_PACKAGE . parent [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . getenv ( [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , [string] : [number] , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] REST_FRAMEWORK = { [string] : [string] , [string] : [number] , [string] : ( [string] , ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] OAUTH_SETTINGS = { [string] : { [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , [string] : os . getenv ( [string] ) , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[None,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any , Dict [EOL] import typing [EOL] import builtins [EOL] import rest_framework [EOL] import requests [EOL] from typing import Optional [EOL] from urllib . parse import urlencode , urljoin [EOL] from uuid import uuid4 [EOL] [EOL] import requests [EOL] from django . contrib . auth . models import User [EOL] from django . shortcuts import redirect [EOL] from rest_framework import status [EOL] from rest_framework . authtoken . models import Token [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] from me_watch . settings import OAUTH_SETTINGS [EOL] [EOL] from core . models import SocialInformation [EOL] [EOL] [EOL] def vk_api_call ( token , method , params = None ) : [EOL] [docstring] [EOL] API_VERSION = [string] [EOL] BASE_API_URL = [string] [EOL] [EOL] if not params : [EOL] params = { } [EOL] params . update ( { [string] : token , [string] : API_VERSION , } ) [EOL] [EOL] response = requests . get ( urljoin ( BASE_API_URL , method ) , params = params ) [EOL] return dict ( response . json ( ) ) [EOL] [EOL] [EOL] class BaseSocialIntegration : [EOL] config_option = ... [EOL] social_type = ... [EOL] client_id = ... [EOL] client_secret = ... [EOL] auth_url = ... [EOL] client_token_url = ... [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] configs = OAUTH_SETTINGS . get ( self . config_option ) [EOL] for config , value in configs . items ( ) : [EOL] setattr ( self , config , value ) [EOL] self . social_type = self . config_option [EOL] [EOL] def get_redirect_uri ( self , request ) : [EOL] [docstring] [EOL] return request . build_absolute_uri ( f" [string] { self . social_type } [string] " ) [EOL] [EOL] def get_redirect_params ( self , request ) : [EOL] [docstring] [EOL] return urlencode ( { [string] : self . client_id , [string] : self . get_redirect_uri ( request ) , [string] : [string] , } ) [EOL] [EOL] def get_auth_params ( self , request , code ) : [EOL] [docstring] [EOL] return urlencode ( { [string] : self . client_id , [string] : self . client_secret , [string] : self . get_redirect_uri ( request ) , [string] : code , } ) [EOL] [EOL] def get_personal_info ( self , external_token , user_id ) : [EOL] [docstring] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class BaseOAuth2InitView ( APIView ) : [EOL] integration = ... [EOL] [EOL] def get ( self , request ) : [EOL] params = self . integration . get_redirect_params ( request ) [EOL] return redirect ( f"{ self . integration . auth_url } [string] { params }" ) [EOL] [EOL] [EOL] class BaseOAuth2CallbackView ( APIView ) : [EOL] integration = ... [EOL] [EOL] def generate_token ( self , external_token , user_id ) : [EOL] [docstring] [EOL] social_info = SocialInformation . objects . filter ( social_type = self . integration . social_type , social_user_id = user_id ) [EOL] if social_info . exists ( ) : [EOL] user = social_info . last ( ) . user [EOL] else : [EOL] user = User . objects . create ( username = uuid4 ( ) , ** self . integration . get_personal_info ( external_token , user_id ) ) [EOL] SocialInformation . objects . create ( social_type = self . integration . social_type , social_user_id = user_id , user = user ) [EOL] token , _ = Token . objects . get_or_create ( user = user ) [EOL] return Response ( { [string] : token . key , [string] : user . pk , } ) [EOL] [EOL] def authorize ( self , request ) : [EOL] [docstring] [EOL] auth_response = requests . get ( self . integration . client_token_url , params = self . integration . get_auth_params ( request , request . query_params [ [string] ] ) , ) [EOL] auth_data = auth_response . json ( ) [EOL] if [string] in auth_data : [EOL] return self . generate_token ( auth_data [ [string] ] , auth_data [ [string] ] , ) [EOL] else : [EOL] return Response ( auth_data , auth_response . status_code ) [EOL] [EOL] def get ( self , request ) : [EOL] [docstring] [EOL] if [string] in request . query_params : [EOL] return self . authorize ( request ) [EOL] else : [EOL] return Response ( request . query_params , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class VkIntegration ( BaseSocialIntegration ) : [EOL] config_option = [string] [EOL] [EOL] def get_personal_info ( self , external_token , user_id ) : [EOL] [docstring] [EOL] user_info = vk_api_call ( external_token , [string] ) [ [string] ] [ [number] ] [EOL] return { [string] : user_info [ [string] ] , [string] : user_info [ [string] ] } [EOL] [EOL] [EOL] class ShikimoriIntegration ( BaseSocialIntegration ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $BaseSocialIntegration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $BaseSocialIntegration$ 0 0 0 0 0 $rest_framework.response.Response$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $rest_framework.response.Response$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . test import APITestCase , APIClient [EOL] from rest_framework . authtoken . models import Token [EOL] from django . contrib . auth . models import User [EOL] [EOL] TEST_USERNAME = [string] [EOL] TEST_PASSWORD = [string] [EOL] [EOL] [EOL] class BaseAuthorizedTestCase ( APITestCase ) : [EOL] [docstring] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . client = APIClient ( HTTP_AUTHORIZATION = f" [string] { self . token . key }" ) [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] super ( BaseAuthorizedTestCase , cls ) . setUpClass ( ) [EOL] cls . user , _ = User . objects . get_or_create ( username = TEST_USERNAME ) [EOL] cls . token , _ = Token . objects . get_or_create ( user = cls . user ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import core [EOL] from core . utils import ( BaseOAuth2CallbackView , BaseOAuth2InitView , VkIntegration ) [EOL] [EOL] [EOL] class VKInitOauth ( BaseOAuth2InitView ) : [EOL] [docstring] [EOL] integration = VkIntegration ( ) [EOL] [EOL] [EOL] class VKCallbackOAuth ( BaseOAuth2CallbackView ) : [EOL] [docstring] [EOL] integration = VkIntegration ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $core.utils.VkIntegration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $core.utils.VkIntegration$ 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] from rest_framework . authtoken . views import obtain_auth_token [EOL] [EOL] from core import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , obtain_auth_token , name = [string] ) , path ( [string] , views . VKInitOauth . as_view ( ) , name = [string] ) , path ( [string] , views . VKCallbackOAuth . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import core [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] [EOL] [EOL] class SocialInformation ( models . Model ) : [EOL] [docstring] [EOL] user = models . ForeignKey ( to = User , on_delete = models . CASCADE ) [EOL] social_type = models . CharField ( max_length = [number] ) [EOL] social_user_id = models . CharField ( max_length = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.SocialInformation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.SocialInformation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.SocialInformation]$ 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import pictures [EOL] from django . db import models [EOL] from django . core . validators import MinValueValidator [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class Status ( models . Model ) : [EOL] [docstring] [EOL] episode = models . SmallIntegerField ( validators = [ MinValueValidator ( [number] ) ] , default = [number] ) [EOL] season = models . SmallIntegerField ( validators = [ MinValueValidator ( [number] ) ] , default = [number] ) [EOL] picture = models . ForeignKey ( to = [string] , on_delete = models . CASCADE ) [EOL] user = models . ForeignKey ( to = User , on_delete = models . CASCADE ) [EOL] finished = models . BooleanField ( default = False ) [EOL] [EOL] [EOL] class Picture ( models . Model ) : [EOL] [docstring] [EOL] FILM = [string] [EOL] SERIES = [string] [EOL] PICTURE_TYPE_CHOICES = ( ( FILM , [string] ) , ( SERIES , [string] ) , ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] user = models . ManyToManyField ( User , through = Status ) [EOL] type = models . CharField ( max_length = [number] , choices = PICTURE_TYPE_CHOICES , default = FILM , ) [EOL] [EOL] [EOL] class Link ( models . Model ) : [EOL] [docstring] [EOL] source = models . URLField ( ) [EOL] season = models . SmallIntegerField ( validators = [ MinValueValidator ( [number] ) ] , default = [number] ) [EOL] episode = models . SmallIntegerField ( validators = [ MinValueValidator ( [number] ) ] , default = [number] ) [EOL] picture = models . ForeignKey ( to = Picture , on_delete = models . CASCADE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Picture]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Picture]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Picture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Link]$ 0 0 0 0 0 0 0 $typing.Type[pictures.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import pictures [EOL] from rest_framework import serializers [EOL] [EOL] from pictures . models import Link , Picture [EOL] [EOL] [EOL] class LinkSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] picture = serializers . SlugRelatedField ( queryset = Picture . objects , slug_field = [string] ) [EOL] [EOL] class Meta : [EOL] model = Link [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.serializers.LinkSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pictures.models.Link]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Dict , Any , List , Type , Tuple [EOL] import typing [EOL] import pictures [EOL] from rest_framework import generics , views [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from django . shortcuts import redirect , reverse [EOL] [EOL] from pictures . models import Link , Picture [EOL] from pictures . serializers import LinkSerializer [EOL] from pictures . utils import YandexParser [EOL] [EOL] [EOL] class BasePictureListView ( generics . ListAPIView ) : [EOL] [docstring] [EOL] serializer_class = LinkSerializer [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Link . objects . filter ( picture__name = self . kwargs [ [string] ] ) [EOL] [EOL] [EOL] class FilmListView ( BasePictureListView ) : [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return super ( ) . get_queryset ( ) . filter ( picture__type = Picture . FILM ) [EOL] [EOL] [EOL] class SeriesListView ( BasePictureListView ) : [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] queryset = super ( ) . get_queryset ( ) [EOL] return queryset . filter ( picture__type = Picture . SERIES , season = self . kwargs [ [string] ] , episode = self . kwargs [ [string] ] , ) [EOL] [EOL] [EOL] class PictureSearchView ( views . APIView ) : [EOL] [docstring] [EOL] picture_parsers = ( YandexParser ( ) , ) [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get ( self , request , picture_name ) : [EOL] [docstring] [EOL] links = Link . objects . filter ( picture__name = picture_name ) [EOL] if not links . exists ( ) : [EOL] links = self . parse_links ( picture_name = picture_name ) [EOL] else : [EOL] links = links . all ( ) [EOL] return self . redirect ( links [ [number] ] . picture ) [EOL] [EOL] def redirect ( self , picture ) : [EOL] [docstring] [EOL] base_kwargs = { [string] : Picture . name } [EOL] if picture . type == Picture . SERIES : [EOL] base_kwargs . update ( { [string] : [number] , [string] : [number] } ) [EOL] return redirect ( reverse ( [string] , kwargs = base_kwargs ) ) [EOL] else : [EOL] return redirect ( reverse ( [string] , kwargs = base_kwargs ) ) [EOL] [EOL] def parse_links ( self , picture_name ) : [EOL] [docstring] [EOL] sources = [ source for parser in self . picture_parsers for source in parser . get_sources ( picture_name ) ] [EOL] picture , _ = Picture . objects . get_or_create ( name = sources [ [number] ] . name , type = sources [ [number] ] . type ) [EOL] links = [ Link ( source = link . source_url , season = link . season , episode = link . episode , picture = picture ) for link in sources ] [EOL] return Link . objects . bulk_create ( links ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 0 0 0 0 $typing.List[pictures.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 0 0 0 0 0 0 $typing.List[pictures.models.Link]$ 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import pictures [EOL] import typing [EOL] import bs4 [EOL] import requests [EOL] import builtins [EOL] from typing import List , Optional [EOL] from urllib . parse import urljoin [EOL] [EOL] import requests [EOL] from bs4 import BeautifulSoup [EOL] [EOL] from pictures import models [EOL] from pictures . types import Picture [EOL] [EOL] [EOL] class BaseParser : [EOL] def get_sources ( self , name ) : [EOL] [docstring] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class YandexParser ( BaseParser ) : [EOL] [comment] [EOL] initial_name = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . base_url = [string] [EOL] self . search_url = urljoin ( self . base_url , [string] ) [EOL] self . series_url_pattern = urljoin ( self . base_url , [string] , ) [EOL] [EOL] def get_sources ( self , name ) : [EOL] [docstring] [EOL] page = requests . get ( self . search_url , params = { [string] : name } ) [EOL] soup = BeautifulSoup ( page . text , [string] ) [EOL] self . initial_name = name [EOL] if self . _get_type_of_soup ( soup ) == models . Picture . SERIES : [EOL] return self . _parse_series ( soup ) [EOL] else : [EOL] return self . _parse_films ( name , soup ) [EOL] [EOL] def _get_type_of_soup ( self , soup ) : [EOL] if soup . find ( [string] , class_ = [string] ) : [EOL] return models . Picture . SERIES [EOL] else : [EOL] return models . Picture . FILM [EOL] [EOL] def _parse_films ( self , name , initial_page ) : [EOL] [docstring] [EOL] source = initial_page . find ( [string] ) . get ( [string] ) [EOL] return [ Picture ( name = name , source_url = f" [string] { source }" , type = models . Picture . FILM , episode = [number] , season = [number] ) ] [EOL] [EOL] def _parse_series ( self , initial_page ) : [EOL] [docstring] [EOL] season_selector = [string] [EOL] seasons_count = len ( initial_page . select ( season_selector ) ) [EOL] internal_name = self . _get_internal_series_name ( initial_page ) [EOL] parsed_series = [ episode for season in range ( [number] , seasons_count + [number] ) for episode in self . _series_parser ( internal_name , season ) ] [EOL] return parsed_series [EOL] [EOL] @ staticmethod def _get_internal_series_name ( initial_page ) : [EOL] [docstring] [EOL] name_selector = [string] [EOL] name_tag = initial_page . select ( name_selector ) [ [number] ] [EOL] return name_tag . get_text ( ) . strip ( ) . replace ( [string] , [string] ) . lower ( ) [EOL] [EOL] def _parse_source ( self , internal_name , season , episode ) : [EOL] [docstring] [EOL] sources_url = self . series_url_pattern . format ( film_name = internal_name , season = season , episode = episode ) [EOL] source = requests . get ( sources_url ) [EOL] soup = BeautifulSoup ( source . text , [string] ) [EOL] source_url = soup . find ( [string] ) . get ( [string] ) [EOL] return Picture ( name = internal_name , source_url = f" [string] { source_url }" , type = models . Picture . SERIES , season = season , episode = episode , ) [EOL] [EOL] def _series_parser ( self , internal_name , season ) : [EOL] [docstring] [EOL] episode_selector = [string] [EOL] start_url = self . series_url_pattern . format ( film_name = internal_name , season = season , episode = [number] ) [EOL] start_page = requests . get ( start_url ) [EOL] soup = BeautifulSoup ( start_page . text , [string] ) [EOL] for episode_tag in soup . select ( episode_selector ) : [EOL] try : [EOL] episode = int ( episode_tag . get_text ( ) ) [EOL] yield self . _parse_source ( internal_name , season , episode ) [EOL] except ValueError : [EOL] break [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 $builtins.str$ 0 $bs4.BeautifulSoup$ 0 0 0 0 0 $typing.Any$ 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pictures.types.Picture]$ 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $bs4.BeautifulSoup$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $bs4.BeautifulSoup$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $bs4.BeautifulSoup$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $bs4.BeautifulSoup$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pictures.types.Picture$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import pictures [EOL] from django . urls import reverse_lazy [EOL] from rest_framework import status [EOL] [EOL] from core . tests import BaseAuthorizedTestCase [EOL] from pictures . models import Picture , Link [EOL] [EOL] FILM_NAME = [string] [EOL] SERIES_NAME = [string] [EOL] [EOL] [EOL] class BasePictureTestSuite ( object ) : [EOL] [docstring] [EOL] success_url = ... [EOL] wrong_url = ... [EOL] right_name = ... [EOL] [EOL] def test_success_get_with_right_names ( self ) : [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( self . success_url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] results = response . json ( ) [ [string] ] [EOL] self . assertNotEqual ( len ( results ) , [number] ) [EOL] for result in results : [EOL] self . assertEqual ( result [ [string] ] , self . right_name ) [EOL] [EOL] def test_fail_get_with_wrong_name ( self ) : [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( self . wrong_url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( len ( response . json ( ) [ [string] ] ) , [number] ) [EOL] [EOL] [EOL] class BasePictureTestCase ( BaseAuthorizedTestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . film = Picture . objects . create ( name = FILM_NAME , type = Picture . FILM ) [EOL] self . series = Picture . objects . create ( name = SERIES_NAME , type = Picture . SERIES ) [EOL] for i in range ( [number] ) : [EOL] Link . objects . create ( source = [string] , season = [number] , episode = [number] , picture = self . series ) [EOL] Link . objects . create ( source = [string] , picture = self . film ) [EOL] [EOL] [EOL] class ListSeriesTestCase ( BasePictureTestCase , BasePictureTestSuite ) : [EOL] success_url = reverse_lazy ( [string] , kwargs = { [string] : SERIES_NAME , [string] : [number] , [string] : [number] } ) [EOL] wrong_url = reverse_lazy ( [string] , kwargs = { [string] : FILM_NAME , [string] : [number] , [string] : [number] } ) [EOL] right_name = SERIES_NAME [EOL] [EOL] [EOL] class ListFilmsTestCase ( BasePictureTestCase , BasePictureTestSuite ) : [EOL] success_url = reverse_lazy ( [string] , kwargs = { [string] : FILM_NAME } ) [EOL] wrong_url = reverse_lazy ( [string] , kwargs = { [string] : SERIES_NAME } ) [EOL] right_name = FILM_NAME [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PicturesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . SmallIntegerField ( default = [number] , validators = [ django . core . validators . MinValueValidator ( [number] ) ] ) ) , ( [string] , models . SmallIntegerField ( default = [number] , validators = [ django . core . validators . MinValueValidator ( [number] ) ] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] , default = [string] , max_length = [number] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . SmallIntegerField ( default = [number] , validators = [ django . core . validators . MinValueValidator ( [number] ) ] ) ) , ( [string] , models . SmallIntegerField ( default = [number] , validators = [ django . core . validators . MinValueValidator ( [number] ) ] ) ) , ( [string] , models . BooleanField ( default = False ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( through = [string] , to = settings . AUTH_USER_MODEL ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0