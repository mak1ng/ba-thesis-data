	0
	0
import src [EOL] import injector [EOL] import builtins [EOL] import sys [EOL] from collections import Callable [EOL] [EOL] from injector import inject , Injector [EOL] [EOL] from src . main . core . services . state_service import StateService [EOL] from src . main . core . services . window_service import WindowService [EOL] from src . main . core . utils . constants import Constants [EOL] [EOL] [EOL] class Application : [EOL] @ inject def __init__ ( self , window_service , state_service ) : [EOL] self . _window_service = window_service [EOL] self . _state_service = state_service [EOL] [EOL] def process_commands ( self ) : [EOL] arg = sys . argv [ [number] ] [EOL] [comment] [EOL] { [string] : lambda : print ( [string] ) , [string] : lambda : print ( Constants . VERSION ) , [string] : lambda : self . _window_service . tile ( ) , [string] : lambda : self . _window_service . cycle ( ) , [string] : lambda : self . _window_service . cycle_backward ( ) } . get ( arg , lambda : print ( [string] ) ) ( ) [EOL] [EOL] def run ( self ) : [EOL] if len ( sys . argv ) <= [number] : [EOL] sys . exit ( [number] ) [EOL] [EOL] self . _state_service . update_states ( ) [EOL] self . process_commands ( ) [EOL] self . _state_service . write_state_to_file ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] injector = Injector ( ) [EOL] app = injector . get ( Application ) [EOL] app . run ( ) [EOL]	0 0 0 0 $injector.Injector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $injector.Injector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $src.main.core.services.window_service.WindowService$ 0 $src.main.core.services.state_service.StateService$ 0 0 0 0 0 0 0 $src.main.core.services.window_service.WindowService$ 0 0 0 0 0 $src.main.core.services.state_service.StateService$ 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $injector.Injector$ 0 0 0 0 0 $Application$ 0 $injector.Injector$ 0 0 0 0 0 0 $Application$ 0 0 0 0 0
	0
from typing import List [EOL] import src [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from typing import List [EOL] [EOL] from dataclasses_json import dataclass_json [EOL] [EOL] from src . main . core . models . area import Area [EOL] from src . main . core . models . window_state import WindowState [EOL] [EOL] [EOL] @ dataclass @ dataclass_json class State : [EOL] area = ... [EOL] windows = field ( default_factory = list ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $typing.List[src.main.core.models.window_state.WindowState]$ 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] [EOL] from dataclasses_json import dataclass_json [EOL] [EOL] from src . main . boilerplate_mixins . eq_mixin import EqMixin [EOL] from src . main . boilerplate_mixins . hash_mixin import HashMixin [EOL] from src . main . boilerplate_mixins . repr_mixin import ReprMixin [EOL] from src . main . boilerplate_mixins . str_mixin import StrMixin [EOL] [EOL] [EOL] @ dataclass @ dataclass_json class Geometry ( EqMixin , HashMixin , ReprMixin , StrMixin ) : [EOL] w = ... [EOL] h = ... [EOL] x = ... [EOL] y = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class Mouse : [EOL] x = ... [EOL] y = ... [EOL] screen = ... [EOL] window = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from typing import List [EOL] import src [EOL] import typing [EOL] import builtins [EOL] from dataclasses import field , dataclass [EOL] from typing import List [EOL] [EOL] from dataclasses_json import dataclass_json [EOL] [EOL] from src . main . core . models . area import Area [EOL] [EOL] [EOL] @ dataclass @ dataclass_json class Config : [EOL] areas = field ( default_factory = list ) [EOL] area_default_margin_top = [number] [EOL] area_default_margin_right = [number] [EOL] area_default_margin_bottom = [number] [EOL] area_default_margin_left = [number] [EOL] window_title_bar_size = [number] [EOL] window_footer_bar_size = [number] [EOL] window_top_margin = [number] [EOL] window_right_margin = [number] [EOL] window_bottom_margin = [number] [EOL] window_left_margin = [number] [EOL] master_window_size = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0
import builtins [EOL] from dataclasses import dataclass [EOL] [EOL] from dataclasses_json import dataclass_json [EOL] [EOL] [EOL] @ dataclass @ dataclass_json class WindowState : [EOL] id = ... [EOL] offset_y = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass [EOL] from typing import Optional [EOL] [EOL] from dataclasses_json import dataclass_json [EOL] [EOL] from src . main . boilerplate_mixins . eq_mixin import EqMixin [EOL] from src . main . boilerplate_mixins . hash_mixin import HashMixin [EOL] from src . main . boilerplate_mixins . repr_mixin import ReprMixin [EOL] from src . main . boilerplate_mixins . str_mixin import StrMixin [EOL] [EOL] [EOL] @ dataclass @ dataclass_json class Identity ( EqMixin , HashMixin , ReprMixin , StrMixin ) : [EOL] display_port = None [EOL] x = None [EOL] y = None [EOL] width = None [EOL] height = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0
from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class Display : [EOL] display_port = ... [EOL] width = ... [EOL] height = ... [EOL] x = ... [EOL] y = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
	0
from typing import List , Optional [EOL] import src [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , List [EOL] [EOL] from injector import inject [EOL] [EOL] from src . main . core . data_sources . state_data_source import StateDataSource [EOL] from src . main . core . models . area import Area [EOL] from src . main . core . models . state import State [EOL] [EOL] [EOL] class StateRepository : [EOL] @ inject def __init__ ( self , state_data_source ) : [EOL] self . _state_data_source = state_data_source [EOL] [EOL] def get_states ( self ) : [EOL] return self . _state_data_source . states [EOL] [EOL] def update_state ( self , states ) : [EOL] self . _state_data_source . states = states [EOL] [EOL] def get_state_index_by_area ( self , area ) : [EOL] for i , v in enumerate ( [ x . area for x in self . _state_data_source . states ] ) : [EOL] if area == v : [EOL] return i [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $src.main.core.data_sources.state_data_source.StateDataSource$ 0 0 0 0 0 0 0 $src.main.core.data_sources.state_data_source.StateDataSource$ 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Optional [EOL] import src [EOL] import subprocess [EOL] import typing [EOL] import builtins [EOL] import re [EOL] import subprocess [EOL] from typing import Optional , List [EOL] [EOL] from injector import inject [EOL] [EOL] from src . main . core . data_sources . config_data_source import ConfigDataSource [EOL] from src . main . core . data_sources . displays_data_source import DisplaysDataSource [EOL] from src . main . core . data_sources . windows_data_source import WindowsDataSource [EOL] from src . main . core . models . area import Area [EOL] from src . main . core . models . config import Config [EOL] from src . main . core . models . display import Display [EOL] from src . main . core . models . geometry import Geometry [EOL] from src . main . core . models . identity import Identity [EOL] from src . main . core . models . point import Point [EOL] from src . main . core . models . window import Window [EOL] [EOL] [EOL] class WindowRepository : [EOL] @ inject def __init__ ( self , windows_data_source , displays_data_source , config_data_source ) : [EOL] self . _displays_data_source = displays_data_source [EOL] self . _windows_data_source = windows_data_source [EOL] self . _config_data_source = config_data_source [EOL] [EOL] def get_window_geometry ( self , window_id ) : [EOL] proc_xwininfo = subprocess . Popen ( [ [string] , [string] , window_id ] , stdout = subprocess . PIPE ) [EOL] proc_grep = subprocess . Popen ( [ [string] , [string] ] , stdin = proc_xwininfo . stdout , stdout = subprocess . PIPE ) [EOL] binary_stdout = proc_grep . communicate ( ) [ [number] ] [EOL] stdout = binary_stdout . decode ( [string] ) [EOL] geometry = re . findall ( [string] , stdout ) [ [number] ] . split ( [string] ) [EOL] position = re . findall ( [string] , stdout ) [EOL] return Geometry ( w = int ( geometry [ [number] ] ) , h = int ( geometry [ [number] ] ) , x = int ( position [ [number] ] ) , y = int ( position [ [number] ] ) ) [EOL] [EOL] def get_area_by_window ( self , window ) : [EOL] area = ... [EOL] for area in self . get_areas_related_to_displays ( ) : [EOL] if self . is_window_in_area ( window , area ) : [EOL] return area [EOL] return None [EOL] [EOL] def is_window_in_area ( self , window , area ) : [EOL] return area . x <= window . x + ( window . width / [number] ) < area . x + area . width and area . y <= window . y + ( window . height / [number] ) < area . y + area . height [EOL] [EOL] def get_all_windows_from_area ( self , area ) : [EOL] return [ x for x in self . _windows_data_source . visible_windows if self . is_window_in_area ( x , area ) ] [EOL] [EOL] def get_window_by_id ( self , window_id ) : [EOL] for window in self . _windows_data_source . visible_windows : [EOL] if window . id == window_id : [EOL] return window [EOL] return None [EOL] [EOL] def get_active_window_id ( self ) : [EOL] proc = subprocess . run ( [ [string] , [string] ] , stdout = subprocess . PIPE ) [EOL] window_id = [string] + hex ( int ( proc . stdout ) ) [ [number] : ] . rjust ( [number] , [string] ) [EOL] return window_id [EOL] [EOL] def get_area_by_display ( self , display ) : [EOL] config = self . _config_data_source . config [EOL] [EOL] area = ... [EOL] for area in config . areas : [EOL] if ( area . identity . display_port == display . display_port or area . identity . display_port is None ) \ [EOL] and ( area . identity . width == display . width or area . identity . width is None ) \ [EOL] and ( area . identity . height == display . height or area . identity . height is None ) \ [EOL] and ( area . identity . x == display . x or area . identity . x is None ) \ [EOL] and ( area . identity . y == display . y or area . identity . y is None ) : [EOL] return area [EOL] return None [EOL] [EOL] def get_display_by_position ( self , point ) : [EOL] for display in self . _displays_data_source . displays : [EOL] if ( point . x <= display . x + display . width ) and ( point . x >= display . x ) \ [EOL] and ( point . y <= display . y + display . height ) and ( point . y >= display . y ) : [EOL] return display [EOL] return None [EOL] [EOL] def get_areas_related_to_displays ( self ) : [EOL] config = self . _config_data_source . config [EOL] displays = self . _displays_data_source . displays [EOL] [EOL] output = [ ] [EOL] for display in displays : [EOL] area_from_config = False [EOL] for area in config . areas : [EOL] if ( area . identity . display_port == display . display_port or area . identity . display_port is None ) \ [EOL] and ( area . identity . width == display . width or area . identity . width is None ) \ [EOL] and ( area . identity . height == display . height or area . identity . height is None ) \ [EOL] and ( area . identity . x == display . x or area . identity . x is None ) \ [EOL] and ( area . identity . y == display . y or area . identity . y is None ) : [EOL] output . append ( area ) [EOL] area_from_config = True [EOL] break [EOL] if not area_from_config : [EOL] [comment] [EOL] identity = Identity ( display_port = display . display_port ) [EOL] output . append ( Area ( x = display . x , y = display . y , width = display . width , height = display . height , margin_top = config . area_default_margin_top , margin_right = config . area_default_margin_right , margin_bottom = config . area_default_margin_bottom , margin_left = config . area_default_margin_left , identity = identity ) , ) [EOL] return output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $src.main.core.data_sources.windows_data_source.WindowsDataSource$ 0 $src.main.core.data_sources.displays_data_source.DisplaysDataSource$ 0 $src.main.core.data_sources.config_data_source.ConfigDataSource$ 0 0 0 0 0 0 0 $src.main.core.data_sources.displays_data_source.DisplaysDataSource$ 0 0 0 0 0 $src.main.core.data_sources.windows_data_source.WindowsDataSource$ 0 0 0 0 0 $src.main.core.data_sources.config_data_source.ConfigDataSource$ 0 0 0 $src.main.core.models.geometry.Geometry$ 0 0 0 $builtins.str$ 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bytes$ 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.area.Area]$ 0 0 0 $src.main.core.models.window.Window$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.window.Window$ 0 $src.main.core.models.area.Area$ 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $src.main.core.models.window.Window$ 0 $src.main.core.models.area.Area$ 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $src.main.core.models.window.Window$ 0 0 0 0 $src.main.core.models.window.Window$ 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $src.main.core.models.window.Window$ 0 0 0 0 $src.main.core.models.window.Window$ 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $typing.List[src.main.core.models.window.Window]$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $typing.Optional[src.main.core.models.window.Window]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[src.main.core.models.area.Area]$ 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 $src.main.core.models.area.Area$ 0 0 0 0 $src.main.core.models.area.Area$ 0 $src.main.core.models.config.Config$ 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 $src.main.core.models.display.Display$ 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.area.Area$ 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 $src.main.core.models.point.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.point.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.point.Point$ 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.point.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.point.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 $typing.List[src.main.core.models.display.Display]$ 0 0 0 0 0 $typing.List[src.main.core.models.display.Display]$ 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 $typing.List[src.main.core.models.display.Display]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0
from typing import Optional [EOL] import src [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] from injector import inject [EOL] [EOL] from src . main . core . data_sources . displays_data_source import DisplaysDataSource [EOL] from src . main . core . data_sources . mouse_data_source import MouseDataSource [EOL] from src . main . core . models . point import Point [EOL] [EOL] [EOL] class MouseRepository : [EOL] @ inject def __init__ ( self , mouse_data_source , displays_data_source ) : [EOL] self . _mouse_data_source = mouse_data_source [EOL] self . _displays_data_source = displays_data_source [EOL] [EOL] def get_mouse_position ( self ) : [EOL] data = self . _mouse_data_source . mouse_data [EOL] if not data : [EOL] return None [EOL] return Point ( data . x , data . y ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $src.main.core.data_sources.mouse_data_source.MouseDataSource$ 0 $src.main.core.data_sources.displays_data_source.DisplaysDataSource$ 0 0 0 0 0 0 0 $src.main.core.data_sources.mouse_data_source.MouseDataSource$ 0 0 0 0 0 $src.main.core.data_sources.displays_data_source.DisplaysDataSource$ 0 0 0 $typing.Optional[src.main.core.models.point.Point]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Tuple , Any , Optional [EOL] import src [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from threading import Thread [EOL] from typing import List , Optional , Tuple [EOL] [EOL] from injector import inject [EOL] [EOL] from src . main . core . data_sources . config_data_source import ConfigDataSource [EOL] from src . main . core . models . area import Area [EOL] from src . main . core . models . config import Config [EOL] from src . main . core . models . display import Display [EOL] from src . main . core . models . window import Window [EOL] from src . main . core . repositories . mouse_repository import MouseRepository [EOL] from src . main . core . repositories . state_repository import StateRepository [EOL] from src . main . core . repositories . window_repository import WindowRepository [EOL] [EOL] [EOL] class WindowService : [EOL] @ inject def __init__ ( self , window_repository , mouse_repository , state_repository , config_data_source ) : [EOL] self . _window_repository = window_repository [EOL] self . _mouse_repository = mouse_repository [EOL] self . _state_repository = state_repository [EOL] self . _config_data_source = config_data_source [EOL] [EOL] def activate_window ( self , window_id ) : [EOL] os . system ( [string] + window_id ) [EOL] [EOL] def control_window ( self , window_id , x , y , w , h ) : [EOL] def run ( twindow_id , tx , ty , tw , th ) : [EOL] os . system ( f' [string] { twindow_id } [string] ' ) [EOL] window = self . _window_repository . get_window_by_id ( window_id ) [EOL] if window is None : [EOL] return [EOL] [EOL] area = self . _window_repository . get_area_by_window ( window ) [EOL] if area is None : [EOL] return [EOL] [EOL] state_hierarchy = self . _state_repository . get_state_index_by_area ( area ) [EOL] if state_hierarchy is None : [EOL] return [EOL] [EOL] state_window_index = next ( ( i for i , v in enumerate ( self . _state_repository . get_states ( ) [ state_hierarchy ] . windows ) if v . id == window_id ) ) [EOL] offset_y = self . _state_repository . get_states ( ) [ state_hierarchy ] . windows [ state_window_index ] . offset_y [EOL] if offset_y is None : [EOL] os . system ( f' [string] { twindow_id } [string] { tx } [string] ' ) [EOL] geometry = self . _window_repository . get_window_geometry ( twindow_id ) [EOL] ty += geometry . y [EOL] self . _state_repository . get_states ( ) [ state_hierarchy ] . windows [ state_window_index ] . offset_y = geometry . y [EOL] else : [EOL] ty += offset_y [EOL] os . system ( f' [string] { twindow_id } [string] { tw } [string] { th }' ) [EOL] os . system ( f' [string] { twindow_id } [string] { tx } [string] { ty }' ) [EOL] [comment] [EOL] os . system ( f' [string] { twindow_id } [string] { tw } [string] { th }' ) [EOL] os . system ( f' [string] { twindow_id } [string] { tx } [string] { ty }' ) [EOL] [EOL] thread = Thread ( target = run , args = ( window_id , x , y , w , h ) ) [EOL] thread . start ( ) [EOL] [EOL] def tall ( self , area , windows ) : [EOL] config = self . _config_data_source . config [EOL] window_decorators_y = config . window_title_bar_size + config . window_footer_bar_size [EOL] position = ( area . x + area . margin_left , area . y + area . margin_top ) [EOL] width = int ( area . width - area . margin_right - area . margin_left ) [EOL] height = int ( area . height - area . margin_bottom - area . margin_top ) [EOL] master_height = height - window_decorators_y [EOL] if len ( windows ) == [number] : [EOL] self . control_window ( window_id = windows [ [number] ] . id , x = position [ [number] ] + config . window_left_margin , y = position [ [number] ] + config . window_top_margin , w = width - config . window_right_margin - config . window_left_margin , h = master_height - config . window_bottom_margin - config . window_top_margin ) [EOL] return [EOL] [EOL] master_width = int ( width * config . master_window_size ) [EOL] self . control_window ( window_id = windows [ [number] ] . id , x = position [ [number] ] + config . window_left_margin , y = position [ [number] ] + config . window_top_margin , w = master_width - config . window_right_margin - config . window_left_margin , h = master_height - config . window_bottom_margin - config . window_top_margin ) [EOL] [EOL] del windows [ [number] ] [EOL] slave_height = int ( height / len ( windows ) ) [EOL] slave_width = int ( width - master_width ) [EOL] slave_positions = [ position [ [number] ] + master_width , position [ [number] ] ] [EOL] for slave in windows : [EOL] self . control_window ( window_id = slave . id , x = slave_positions [ [number] ] + config . window_left_margin , y = slave_positions [ [number] ] + config . window_top_margin , w = slave_width - config . window_right_margin - config . window_left_margin , h = slave_height - config . window_bottom_margin - config . window_top_margin - window_decorators_y ) [EOL] slave_positions [ [number] ] += int ( slave_height ) [EOL] [EOL] def tile ( self ) : [EOL] active_window_id = self . _window_repository . get_active_window_id ( ) [EOL] window = self . _window_repository . get_window_by_id ( active_window_id ) [EOL] area = ... [EOL] if window is None : [EOL] display = self . _window_repository . get_display_by_position ( self . _mouse_repository . get_mouse_position ( ) ) [EOL] if display is None : [EOL] return [EOL] area = self . _window_repository . get_area_by_display ( display ) [EOL] else : [EOL] area = self . _window_repository . get_area_by_window ( window ) [EOL] [EOL] if area is None : [EOL] return [EOL] [EOL] state_hierarchy = self . _state_repository . get_state_index_by_area ( area ) [EOL] if state_hierarchy is None : [EOL] return [EOL] [EOL] state = self . _state_repository . get_states ( ) [ state_hierarchy ] [EOL] [EOL] if window is None : [EOL] window = self . _window_repository . get_window_by_id ( state . windows [ [number] ] . id ) [EOL] [EOL] if window is None : [EOL] return [EOL] [EOL] state_of_selected_window = next ( ( x for x in state . windows if x . id == window . id ) , None ) [EOL] if state_of_selected_window is None : [EOL] return [EOL] [EOL] master_index = state . windows . index ( state . windows [ [number] ] ) [EOL] selected_index = state . windows . index ( state_of_selected_window ) [EOL] state . windows [ master_index ] , state . windows [ selected_index ] = state . windows [ selected_index ] , state . windows [ master_index ] [EOL] windows = self . _window_repository . get_all_windows_from_area ( area ) [EOL] windows = [ [ w for w in windows if x . id == w . id ] [ [number] ] for x in state . windows ] [EOL] self . activate_window ( window . id ) [EOL] self . tall ( area , windows ) [EOL] [EOL] def cycle_backward ( self ) : [EOL] active_window_id = self . _window_repository . get_active_window_id ( ) [EOL] window = self . _window_repository . get_window_by_id ( active_window_id ) [EOL] area = ... [EOL] if window is None : [EOL] display = self . _window_repository . get_display_by_position ( self . _mouse_repository . get_mouse_position ( ) ) [EOL] if display is None : [EOL] return [EOL] area = self . _window_repository . get_area_by_display ( display ) [EOL] else : [EOL] area = self . _window_repository . get_area_by_window ( window ) [EOL] [EOL] if area is None : [EOL] return [EOL] [EOL] state_hierarchy = self . _state_repository . get_state_index_by_area ( area ) [EOL] if state_hierarchy is None : [EOL] return [EOL] [EOL] state = self . _state_repository . get_states ( ) [ state_hierarchy ] [EOL] [EOL] if window is None : [EOL] window = self . _window_repository . get_window_by_id ( state . windows [ [number] ] . id ) [EOL] [EOL] if window is None : [EOL] return [EOL] [EOL] state . windows . append ( state . windows [ [number] ] ) [EOL] del state . windows [ [number] ] [EOL] windows = self . _window_repository . get_all_windows_from_area ( area ) [EOL] windows = [ [ w for w in windows if x . id == w . id ] [ [number] ] for x in state . windows ] [EOL] self . activate_window ( state . windows [ [number] ] . id ) [EOL] self . tall ( area , windows ) [EOL] [EOL] def cycle ( self ) : [EOL] active_window_id = self . _window_repository . get_active_window_id ( ) [EOL] window = self . _window_repository . get_window_by_id ( active_window_id ) [EOL] area = ... [EOL] if window is None : [EOL] display = self . _window_repository . get_display_by_position ( self . _mouse_repository . get_mouse_position ( ) ) [EOL] if display is None : [EOL] return [EOL] area = self . _window_repository . get_area_by_display ( display ) [EOL] else : [EOL] area = self . _window_repository . get_area_by_window ( window ) [EOL] [EOL] if area is None : [EOL] return [EOL] [EOL] state_hierarchy = self . _state_repository . get_state_index_by_area ( area ) [EOL] if state_hierarchy is None : [EOL] return [EOL] [EOL] state = self . _state_repository . get_states ( ) [ state_hierarchy ] [EOL] [EOL] if window is None : [EOL] window = self . _window_repository . get_window_by_id ( state . windows [ [number] ] . id ) [EOL] [EOL] if window is None : [EOL] return [EOL] [EOL] state . windows . insert ( [number] , state . windows [ len ( state . windows ) - [number] ] ) [EOL] del state . windows [ len ( state . windows ) - [number] ] [EOL] windows = self . _window_repository . get_all_windows_from_area ( area ) [EOL] [EOL] windows = [ [ w for w in windows if x . id == w . id ] [ [number] ] for x in state . windows ] [EOL] self . activate_window ( state . windows [ [number] ] . id ) [EOL] self . tall ( area , windows ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.display.Display]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0
from typing import List , Any [EOL] import src [EOL] import typing [EOL] import json [EOL] from typing import List [EOL] [EOL] from injector import inject [EOL] [EOL] from src . main . core . models . area import Area [EOL] from src . main . core . models . state import State [EOL] from src . main . core . models . window_state import WindowState [EOL] from src . main . core . repositories . state_repository import StateRepository [EOL] from src . main . core . repositories . window_repository import WindowRepository [EOL] from src . main . core . utils . constants import Constants [EOL] [EOL] [EOL] class StateService : [EOL] @ inject def __init__ ( self , state_repository , window_repository ) : [EOL] self . _state_repository = state_repository [EOL] self . _window_repository = window_repository [EOL] [EOL] def write_state_to_file ( self ) : [EOL] with open ( Constants . STATE_FILE_PATH , [string] ) as f : [EOL] [comment] [EOL] json_states = State . schema ( ) . dump ( self . _state_repository . get_states ( ) , many = True ) [EOL] f . write ( json . dumps ( json_states ) ) [EOL] [EOL] def update_states ( self ) : [EOL] if len ( self . _state_repository . get_states ( ) ) == [number] : [EOL] self . _state_repository . update_state ( self . _get_actual_state ( ) ) [EOL] self . _state_repository . update_state ( self . _get_updated_state ( ) ) [EOL] [EOL] def _get_updated_state ( self ) : [EOL] states = self . _state_repository . get_states ( ) [EOL] actual_areas = self . _window_repository . get_areas_related_to_displays ( ) [EOL] [EOL] for state in states : [EOL] if state . area not in actual_areas : [EOL] states . remove ( state ) [EOL] [EOL] for actual_area in actual_areas : [EOL] if actual_area not in [ x . area for x in states ] : [EOL] states . append ( State ( area = actual_area ) ) [EOL] [EOL] for state in states : [EOL] area = state . area [EOL] actual_windows_id = list ( map ( lambda x : x . id , self . _window_repository . get_all_windows_from_area ( area ) ) ) [EOL] [EOL] for i in range ( len ( state . windows ) - [number] , - [number] , - [number] ) : [EOL] if state . windows [ i ] . id in actual_windows_id : [EOL] continue [EOL] del state . windows [ i ] [EOL] [EOL] for actual_window_id in actual_windows_id : [EOL] if actual_window_id in [ window . id for window in state . windows ] : [EOL] continue [EOL] state . windows . append ( WindowState ( id = actual_window_id ) ) [EOL] return states [EOL] [EOL] def _get_actual_state ( self ) : [EOL] actual_areas = self . _window_repository . get_areas_related_to_displays ( ) [EOL] states = [ ] [EOL] for i in range ( len ( actual_areas ) ) : [EOL] windows = list ( map ( lambda w : WindowState ( id = w . id ) , self . _window_repository . get_all_windows_from_area ( actual_areas [ i ] ) ) ) [EOL] state = State ( area = actual_areas [ i ] , windows = windows ) [EOL] states . append ( state ) [EOL] return states [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 $typing.List[src.main.core.models.state.State]$ 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[src.main.core.models.area.Area]$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0
	0
import json [EOL] [EOL] from injector import singleton [EOL] [EOL] from src . main . core . models . config import Config [EOL] from src . main . core . utils . constants import Constants [EOL] [EOL] [EOL] @ singleton class ConfigDataSource : [EOL] config = ... [EOL] [EOL] def __init__ ( self ) : [EOL] try : [EOL] with open ( Constants . CONFIG_FILE_PATH , [string] ) as f : [EOL] jsonconfig = f . read ( ) [EOL] if len ( jsonconfig ) == [number] : [EOL] raise Exception ( [string] ) [EOL] except : [EOL] with open ( Constants . CONFIG_FILE_PATH , [string] ) as f : [EOL] [comment] [EOL] jsonconfig = json . dumps ( Config ( ) . to_dict ( ) ) [EOL] f . write ( jsonconfig ) [EOL] [EOL] [comment] [EOL] self . config = Config . from_json ( jsonconfig ) [EOL] [EOL] for area in self . config . areas : [EOL] if area . x is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if area . y is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if area . width is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if area . height is None : [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.models.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import src [EOL] import subprocess [EOL] import typing [EOL] import subprocess [EOL] from typing import Optional [EOL] [EOL] from injector import singleton [EOL] [EOL] from src . main . core . models . mouse import Mouse [EOL] [EOL] [EOL] @ singleton class MouseDataSource : [EOL] mouse_data = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . mouse_data = self . _get_mouse ( ) [EOL] [EOL] def _get_mouse ( self ) : [EOL] proc = subprocess . run ( [ [string] , [string] , [string] ] , stdout = subprocess . PIPE ) [EOL] data = proc . stdout . decode ( [string] ) [EOL] try : [EOL] return Mouse ( * [ int ( x . split ( [string] , [number] ) [ - [number] ] ) for x in data . split ( ) ] ) [EOL] except TypeError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.mouse.Mouse]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[src.main.core.models.mouse.Mouse]$ 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import src [EOL] import subprocess [EOL] import typing [EOL] import builtins [EOL] import subprocess [EOL] from typing import List [EOL] [EOL] from injector import singleton [EOL] [EOL] from src . main . core . models . window import Window [EOL] [EOL] [EOL] @ singleton class WindowsDataSource : [EOL] windows = [ ] [EOL] visible_windows = [ ] [EOL] [EOL] def __init__ ( self ) : [EOL] proc = subprocess . run ( [ [string] , [string] ] , stdout = subprocess . PIPE ) [EOL] stdout = proc . stdout . decode ( [string] ) [EOL] for line in stdout . split ( [string] ) : [EOL] line = line . split ( ) [EOL] if not line or int ( line [ [number] ] ) < [number] : [EOL] continue [EOL] [EOL] self . windows . append ( Window ( id = line [ [number] ] , x = int ( line [ [number] ] ) , y = int ( line [ [number] ] ) , width = int ( line [ [number] ] ) , height = int ( line [ [number] ] ) ) ) [EOL] self . visible_windows = [ window for window in self . windows if self . _is_window_visible ( window . id ) ] [EOL] [EOL] [comment] [EOL] def _is_window_visible ( self , window_id ) : [EOL] proc_xwininfo = subprocess . Popen ( [ [string] , [string] , window_id ] , stdout = subprocess . PIPE ) [EOL] proc_grep = subprocess . Popen ( [ [string] , [string] ] , stdin = proc_xwininfo . stdout , stdout = subprocess . PIPE ) [EOL] stdout = proc_grep . communicate ( ) [ [number] ] . decode ( [string] ) [EOL] return bool ( stdout == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Any [EOL] import src [EOL] import subprocess [EOL] import typing [EOL] import subprocess [EOL] from typing import List [EOL] [EOL] from injector import singleton [EOL] [EOL] from src . main . core . models . display import Display [EOL] [EOL] [EOL] @ singleton class DisplaysDataSource : [EOL] displays = [ ] [EOL] [EOL] def __init__ ( self ) : [EOL] proc_xrandr = subprocess . Popen ( [ [string] ] , stdout = subprocess . PIPE ) [EOL] proc_grep = subprocess . Popen ( [ [string] , [string] ] , stdin = proc_xrandr . stdout , stdout = subprocess . PIPE ) [EOL] stdout = proc_grep . communicate ( ) [ [number] ] . decode ( [string] ) [EOL] displays = [ ] [EOL] for line in stdout . split ( [string] ) : [EOL] line = line . split ( ) [EOL] if not line : [EOL] continue [EOL] dimensions_raw = line [ [number] ] . split ( [string] ) [EOL] dimensions_raw [ [number] ] = dimensions_raw [ [number] ] . split ( [string] ) [EOL] display_port = line [ [number] ] [EOL] width = int ( dimensions_raw [ [number] ] ) [EOL] height = int ( dimensions_raw [ [number] ] [ [number] ] ) [EOL] x = int ( dimensions_raw [ [number] ] [ [number] ] ) [EOL] y = int ( dimensions_raw [ [number] ] [ [number] ] ) [EOL] [EOL] displays . append ( Display ( display_port , width , height , x , y ) ) [EOL] self . displays = displays [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.main.core.models.display.Display]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import src [EOL] import typing [EOL] from typing import List [EOL] [EOL] from injector import singleton [EOL] [EOL] from src . main . core . models . state import State [EOL] from src . main . core . utils . constants import Constants [EOL] [EOL] [EOL] @ singleton class StateDataSource : [EOL] states = [ ] [EOL] [EOL] def __init__ ( self ) : [EOL] json_state = ... [EOL] try : [EOL] with open ( Constants . STATE_FILE_PATH , [string] ) as f : [EOL] json_state = f . read ( ) [EOL] if len ( json_state ) == [number] : [EOL] raise FileExistsError ( [string] ) [EOL] [comment] [EOL] self . states = State . schema ( ) . loads ( json_state , many = True ) [EOL] except ( IOError , FileExistsError ) as e : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] class StrMixin : [EOL] def __str__ ( self ) : [EOL] attributes = [ attr for attr in dir ( self ) if not attr . startswith ( [string] ) and not ( hasattr ( self . __dict__ [ attr ] , [string] ) ) ] [EOL] [EOL] formatted_vars = [ [string] . format ( attr , self . __dict__ [ attr ] ) for attr in attributes ] [EOL] [EOL] return [string] . format ( [string] . join ( formatted_vars ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0
import builtins [EOL] class ReprMixin : [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( name = type ( self ) . __name__ , values = [string] . join ( map ( repr , vars ( self ) . values ( ) ) ) ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] class HashMixin : [EOL] def __hash__ ( self ) : [EOL] return hash ( tuple ( sorted ( vars ( self ) . items ( ) ) ) ) [EOL]	0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] class EqMixin : [EOL] def __eq__ ( self , other ) : [EOL] return ( self is other or ( type ( self ) == type ( other ) [EOL] and self . __dict__ == other . __dict__ ) ) [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not ( self == other ) [EOL]	0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0
	0
from typing import Any [EOL] import src [EOL] import injector [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] import pytest [EOL] from injector import Injector [EOL] [EOL] from src . main . core . models . mouse import Mouse [EOL] from src . main . core . models . point import Point [EOL] from src . main . core . repositories . mouse_repository import MouseRepository [EOL] [EOL] [EOL] class TestWindowRepository : [EOL] @ pytest . fixture def mouse_repository ( self ) : [EOL] injector = Injector ( ) [EOL] return injector . get ( MouseRepository ) [EOL] [EOL] def test_get_mouse_position ( self , mouse_repository ) : [EOL] mouse_repository . _mouse_data_source . mouse_data = Mouse ( x = [number] , y = [number] , screen = [number] , window = [number] ) [EOL] result = mouse_repository . get_mouse_position ( ) [EOL] assert result is not None and result . x == [number] and result . y == [number] [EOL] [EOL] mouse_repository . _mouse_data_source . mouse_data = None [EOL] result = mouse_repository . get_mouse_position ( ) [EOL] assert result is None [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 0 0 0 0 $typing.Any$ 0 $src.main.core.repositories.mouse_repository.MouseRepository$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0