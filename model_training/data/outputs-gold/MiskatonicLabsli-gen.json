from django . test import TestCase [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def index ( license , version ) : [EOL] return f' [string] { license } [string] { version } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . db import models [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0
	0
	0
import unittest [EOL] [EOL] [EOL] class MainTests ( unittest . TestCase ) : [EOL] def test_auto_fail ( self ) : [EOL] self . fail ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Dict [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Category , License [EOL] [EOL] [EOL] @ admin . register ( Category ) class CategoryAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] @ admin . register ( License ) class LicenseAdmin ( admin . ModelAdmin ) : [EOL] prepopulated_fields = { [string] : ( [string] , ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . LicenseView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import license [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . text import slugify [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { str ( self ) } [string] ' [EOL] [EOL] [EOL] class License ( models . Model ) : [EOL] category = models . ForeignKey ( Category , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] version = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( max_length = [number] ) [EOL] text = models . TextField ( ) [EOL] details = models . URLField ( max_length = [number] ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . slug = slugify ( f'{ self . category . name } [string] { self . title }' ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . category . name } [string] { self . title }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { str ( self ) } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.license]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 $typing.Type[license.models.License]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render [EOL] from django . template import Context , Template [EOL] from django . views . generic import TemplateView [EOL] [EOL] from . models import License [EOL] [EOL] [EOL] class LicenseView ( TemplateView ) : [EOL] def get ( self , request ) : [EOL] return render ( request , [string] , { [string] : License . objects . all ( ) , [string] : datetime . now ( ) . year } ) [EOL] [EOL] def post ( self , request ) : [EOL] license_template = Template ( f' [string] { License . objects . get ( slug = request . POST [ [string] ] ) . text } [string] ' ) [EOL] context = Context ( { k : v for k , v in request . POST . items ( ) if not k == [string] } ) [EOL] return HttpResponse ( license_template . render ( context ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LicenseConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import li_gen [EOL] from django . shortcuts import render [EOL] from rest_framework import permissions , viewsets [EOL] [EOL] from license . models import Category , License [EOL] from license . serializers import CategorySerializer , LicenseSerializer [EOL] [EOL] [EOL] class CategoryViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = Category . objects . all ( ) . order_by ( [string] ) [EOL] permission_classes = ( permissions . IsAuthenticatedOrReadOnly , ) [EOL] serializer_class = CategorySerializer [EOL] [EOL] [EOL] class LicenseViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = License . objects . all ( ) . order_by ( [string] ) [EOL] permission_classes = ( permissions . IsAuthenticatedOrReadOnly , ) [EOL] serializer_class = LicenseSerializer [EOL] [EOL] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[li_gen.views.LicenseViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from rest_framework import routers [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . CategoryViewSet ) [EOL] router . register ( [string] , views . LicenseViewSet ) [EOL] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) , path ( [string] , include ( [string] ) , name = [string] ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( router . urls ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] [EOL] from decouple import config [EOL] [EOL] from . base import * [comment] [EOL] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] SECRET_KEY = config ( [string] ) [EOL] DEBUG = config ( [string] ) [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
	0