[docstring] [EOL] ARGS = [string] [EOL] ATTR_ID = [string] [EOL] ATTRIBUTE_ID = [string] [EOL] ATTRIBUTE_NAME = [string] [EOL] BUTTON = [string] [EOL] BUTTON_1 = [string] [EOL] BUTTON_2 = [string] [EOL] BUTTON_3 = [string] [EOL] BUTTON_4 = [string] [EOL] BUTTON_5 = [string] [EOL] BUTTON_6 = [string] [EOL] CLICK_TYPE = [string] [EOL] CLOSE = [string] [EOL] CLUSTER_COMMAND = [string] [EOL] CLUSTER_ID = [string] [EOL] COMMAND = [string] [EOL] COMMAND_ATTRIBUTE_UPDATED = [string] [EOL] COMMAND_BUTTON_DOUBLE = [string] [EOL] COMMAND_BUTTON_HOLD = [string] [EOL] COMMAND_BUTTON_SINGLE = [string] [EOL] COMMAND_CLICK = [string] [EOL] COMMAND_DOUBLE = [string] [EOL] COMMAND_FURIOUS = [string] [EOL] COMMAND_HOLD = [string] [EOL] COMMAND_ID = [string] [EOL] COMMAND_MOVE = [string] [EOL] COMMAND_MOVE_COLOR_TEMP = [string] [EOL] COMMAND_MOVE_ON_OFF = [string] [EOL] COMMAND_MOVE_TO_LEVEL_ON_OFF = [string] [EOL] COMMAND_OFF = [string] [EOL] COMMAND_OFF_WITH_EFFECT = [string] [EOL] COMMAND_ON = [string] [EOL] COMMAND_PRESS = [string] [EOL] COMMAND_QUAD = [string] [EOL] COMMAND_RELEASE = [string] [EOL] COMMAND_SHAKE = [string] [EOL] COMMAND_SINGLE = [string] [EOL] COMMAND_STEP = [string] [EOL] COMMAND_STEP_COLOR_TEMP = [string] [EOL] COMMAND_STEP_ON_OFF = [string] [EOL] COMMAND_STOP = [string] [EOL] COMMAND_TILT = [string] [EOL] COMMAND_TOGGLE = [string] [EOL] COMMAND_TRIPLE = [string] [EOL] DESCRIPTION = [string] [EOL] DEVICE_TYPE = [string] [EOL] DIM_DOWN = [string] [EOL] DIM_UP = [string] [EOL] DOUBLE_PRESS = [string] [EOL] ALT_DOUBLE_PRESS = [string] [EOL] ENDPOINT_ID = [string] [EOL] ENDPOINTS = [string] [EOL] INPUT_CLUSTERS = [string] [EOL] LEFT = [string] [EOL] LONG_PRESS = [string] [EOL] LONG_RELEASE = [string] [EOL] ALT_LONG_PRESS = [string] [EOL] ALT_LONG_RELEASE = [string] [EOL] MODELS_INFO = [string] [EOL] MOTION_EVENT = [string] [EOL] NODE_DESCRIPTOR = [string] [EOL] OFF = [number] [EOL] ON = [number] [EOL] OPEN = [string] [EOL] OUTPUT_CLUSTERS = [string] [EOL] PRESS_TYPE = [string] [EOL] PROFILE_ID = [string] [EOL] QUADRUPLE_PRESS = [string] [EOL] QUINTUPLE_PRESS = [string] [EOL] RELATIVE_DEGREES = [string] [EOL] RIGHT = [string] [EOL] SHAKEN = [string] [EOL] SHORT_PRESS = [string] [EOL] ALT_SHORT_PRESS = [string] [EOL] SKIP_CONFIGURATION = [string] [EOL] SHORT_RELEASE = [string] [EOL] TRIPLE_PRESS = [string] [EOL] TURN_OFF = [string] [EOL] TURN_ON = [string] [EOL] UNKNOWN = [string] [EOL] VALUE = [string] [EOL] ZHA_SEND_EVENT = [string] [EOL] ZONE_STATE = [number] [EOL]	0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
[docstring] [EOL]	0 0
import builtins [EOL] from typing import Any , Type , Dict , Tuple [EOL] import typing [EOL] import logging [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . quirks import CustomCluster [EOL] import zigpy . types as t [EOL] from zigpy . zcl . clusters . general import Basic , OnOff [EOL] [EOL] from . . const import ( ARGS , BUTTON , COMMAND , COMMAND_ID , DIM_DOWN , DIM_UP , LONG_PRESS , LONG_RELEASE , PRESS_TYPE , SHORT_PRESS , SHORT_RELEASE , TURN_OFF , TURN_ON , ZHA_SEND_EVENT , ) [EOL] [EOL] DIAGNOSTICS_CLUSTER_ID = [number] [comment] [EOL] PHILIPS = [string] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] HUE_REMOTE_DEVICE_TRIGGERS = { ( SHORT_PRESS , TURN_ON ) : { COMMAND : [string] } , ( SHORT_PRESS , TURN_OFF ) : { COMMAND : [string] } , ( SHORT_PRESS , DIM_UP ) : { COMMAND : [string] } , ( SHORT_PRESS , DIM_DOWN ) : { COMMAND : [string] } , ( LONG_PRESS , TURN_ON ) : { COMMAND : [string] } , ( LONG_PRESS , TURN_OFF ) : { COMMAND : [string] } , ( LONG_PRESS , DIM_UP ) : { COMMAND : [string] } , ( LONG_PRESS , DIM_DOWN ) : { COMMAND : [string] } , ( SHORT_RELEASE , TURN_ON ) : { COMMAND : [string] } , ( SHORT_RELEASE , TURN_OFF ) : { COMMAND : [string] } , ( SHORT_RELEASE , DIM_UP ) : { COMMAND : [string] } , ( SHORT_RELEASE , DIM_DOWN ) : { COMMAND : [string] } , ( LONG_RELEASE , TURN_ON ) : { COMMAND : [string] } , ( LONG_RELEASE , TURN_OFF ) : { COMMAND : [string] } , ( LONG_RELEASE , DIM_UP ) : { COMMAND : [string] } , ( LONG_RELEASE , DIM_DOWN ) : { COMMAND : [string] } , } [EOL] [EOL] [EOL] class PowerOnState ( t . enum8 ) : [EOL] [docstring] [EOL] [EOL] Off = [number] [EOL] On = [number] [EOL] LastState = [number] [EOL] [EOL] [EOL] class PhilipsOnOffCluster ( CustomCluster , OnOff ) : [EOL] [docstring] [EOL] [EOL] attributes = OnOff . attributes . copy ( ) [EOL] attributes . update ( { [number] : ( [string] , PowerOnState ) } ) [EOL] [EOL] [EOL] class PhilipsBasicCluster ( CustomCluster , Basic ) : [EOL] [docstring] [EOL] [EOL] manufacturer_attributes = { [number] : ( [string] , t . bitmap16 ) } [EOL] [EOL] attr_config = { [number] : [number] } [EOL] [EOL] async def bind ( self ) : [EOL] [docstring] [EOL] result = await super ( ) . bind ( ) [EOL] await self . write_attributes ( self . attr_config , manufacturer = [number] ) [EOL] return result [EOL] [EOL] [EOL] class PhilipsRemoteCluster ( CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = [number] [EOL] name = [string] [EOL] ep_attribute = [string] [EOL] manufacturer_client_commands = { [number] : ( [string] , ( t . uint8_t , t . uint24_t , t . uint8_t , t . uint8_t , t . uint8_t , t . uint8_t ) , False , ) } [EOL] BUTTONS = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } [EOL] PRESS_TYPES = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } [EOL] [EOL] def handle_cluster_request ( self , tsn , command_id , args ) : [EOL] [docstring] [EOL] _LOGGER . debug ( [string] , tsn , command_id , args , ) [EOL] button = self . BUTTONS . get ( args [ [number] ] , args [ [number] ] ) [EOL] press_type = self . PRESS_TYPES . get ( args [ [number] ] , args [ [number] ] ) [EOL] [EOL] event_args = { BUTTON : button , PRESS_TYPE : press_type , COMMAND_ID : command_id , ARGS : args , } [EOL] action = [string] . format ( button , press_type ) [EOL] self . listener_event ( ZHA_SEND_EVENT , action , event_args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0
import builtins [EOL] [docstring] [EOL] [EOL] from . . import LocalDataCluster , MotionWithReset , OccupancyOnEvent [EOL] [EOL] ORVIBO = [string] [EOL] ORVIBO_LATIN = [string] [EOL] [EOL] [EOL] class OccupancyCluster ( LocalDataCluster , OccupancyOnEvent ) : [EOL] [docstring] [EOL] [EOL] [EOL] class MotionCluster ( MotionWithReset ) : [EOL] [docstring] [EOL] [EOL] reset_s = [number] [EOL] send_occupancy_event = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0
from typing import Type [EOL] import logging [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . quirks import CustomCluster [EOL] import zigpy . types as t [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] CENTRALITE = [string] [EOL] [EOL] [EOL] class CentraLiteAccelCluster ( CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = [number] [EOL] name = [string] [EOL] ep_attribute = [string] [EOL] manufacturer_attributes = { [number] : ( [string] , t . uint8_t ) , [number] : ( [string] , t . uint16_t ) , [number] : ( [string] , t . bitmap8 ) , [number] : ( [string] , t . int16s ) , [number] : ( [string] , t . int16s ) , [number] : ( [string] , t . int16s ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from . . import PowerConfigurationCluster [EOL] [EOL] ZEN = [string] [EOL] [EOL] [EOL] class ZenPowerConfiguration ( PowerConfigurationCluster ) : [EOL] [docstring] [EOL] [EOL] MIN_VOLTS = [number] [EOL] MAX_VOLTS = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomDevice [EOL] from zigpy . zcl . clusters . general import Basic , Identify , Ota , PowerConfiguration [EOL] from zigpy . zcl . clusters . measurement import RelativeHumidity , TemperatureMeasurement [EOL] [EOL] from . import PLAID_SYSTEMS [EOL] from . . import PowerConfigurationCluster [EOL] from . . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] [EOL] [EOL] class PowerConfigurationClusterMains ( PowerConfigurationCluster ) : [EOL] [docstring] [EOL] [EOL] MAINS_VOLTAGE_ATTR = [number] [EOL] ATTR_ID_BATT_SIZE = [number] [EOL] ATTR_ID_BATT_QTY = [number] [EOL] _CONSTANT_ATTRIBUTES = { ATTR_ID_BATT_SIZE : [number] , ATTR_ID_BATT_QTY : [number] } [EOL] [EOL] def _update_attribute ( self , attrid , value ) : [EOL] super ( ) . _update_attribute ( attrid , value ) [EOL] if attrid == self . MAINS_VOLTAGE_ATTR : [EOL] super ( ) . _update_attribute ( self . BATTERY_VOLTAGE_ATTR , round ( value / [number] ) ) [EOL] [EOL] def _remap ( self , attr ) : [EOL] [docstring] [EOL] if attr in ( self . BATTERY_VOLTAGE_ATTR , [string] ) : [EOL] return self . MAINS_VOLTAGE_ATTR [EOL] return attr [EOL] [EOL] def read_attributes ( self , attributes , * args , ** kwargs ) : [comment] [EOL] [docstring] [EOL] return super ( ) . read_attributes ( [ self . _remap ( attr ) for attr in attributes ] , * args , ** kwargs ) [EOL] [EOL] def configure_reporting ( self , attribute , * args , ** kwargs ) : [comment] [EOL] [docstring] [EOL] return super ( ) . configure_reporting ( self . _remap ( attribute ) , * args , ** kwargs ) [EOL] [EOL] [EOL] class SoilMoisture ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( PLAID_SYSTEMS , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : [number] , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , TemperatureMeasurement . cluster_id , RelativeHumidity . cluster_id , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : [number] , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfigurationClusterMains , Identify . cluster_id , TemperatureMeasurement . cluster_id , RelativeHumidity . cluster_id , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] PLAID_SYSTEMS = [string] [EOL]	0 0 $builtins.str$ 0 0 0
[docstring] [EOL]	0 0
from typing import Any , Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [comment] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomCluster , CustomDevice [EOL] import zigpy . types as t [EOL] from zigpy . zcl . clusters . general import ( Basic , Identify , Ota , PollControl , PowerConfiguration , ) [EOL] from zigpy . zcl . clusters . homeautomation import ApplianceEventAlerts [EOL] from zigpy . zcl . clusters . measurement import TemperatureMeasurement [EOL] from zigpy . zcl . clusters . security import IasZone [EOL] [EOL] from . import WAXMAN [EOL] from . . import Bus , LocalDataCluster [EOL] from . . const import ( CLUSTER_COMMAND , DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] [EOL] MANUFACTURER_SPECIFIC_CLUSTER_ID = [number] [comment] [EOL] MOISTURE_TYPE = [number] [EOL] WAXMAN_CMDID = [number] [EOL] ZONE_STATE = [number] [EOL] ZONE_TYPE = [number] [EOL] [EOL] [EOL] class EmulatedIasZone ( LocalDataCluster , IasZone ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . endpoint . device . ias_bus . add_listener ( self ) [EOL] super ( ) . _update_attribute ( ZONE_TYPE , MOISTURE_TYPE ) [EOL] [EOL] async def bind ( self ) : [EOL] [docstring] [EOL] result = await self . endpoint . device . app_cluster . bind ( ) [EOL] return result [EOL] [EOL] async def write_attributes ( self , attributes , manufacturer = None ) : [EOL] [docstring] [EOL] return ( [number] , ) [EOL] [EOL] def update_state ( self , value ) : [EOL] [docstring] [EOL] super ( ) . listener_event ( CLUSTER_COMMAND , None , ZONE_STATE , [ value ] ) [EOL] [EOL] [EOL] class WAXMANApplianceEventAlerts ( CustomCluster , ApplianceEventAlerts ) : [EOL] [docstring] [EOL] [EOL] manufacturer_client_commands = { WAXMAN_CMDID : ( [string] , ( t . uint8_t , t . bitmap24 ) , False ) } [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . endpoint . device . app_cluster = self [EOL] [EOL] def handle_cluster_request ( self , tsn , command_id , args ) : [EOL] [docstring] [EOL] if command_id == WAXMAN_CMDID : [EOL] state = bool ( args [ [number] ] & [number] ) [EOL] [EOL] self . endpoint . device . ias_bus . listener_event ( [string] , state ) [EOL] [EOL] [EOL] class WAXMANleakSMARTv2 ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . ias_bus = Bus ( ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] signature = { MODELS_INFO : [ ( WAXMAN , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , PollControl . cluster_id , TemperatureMeasurement . cluster_id , ApplianceEventAlerts . cluster_id , MANUFACTURER_SPECIFIC_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , PollControl . cluster_id , TemperatureMeasurement . cluster_id , WAXMANApplianceEventAlerts , EmulatedIasZone , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } } [EOL] [EOL] [EOL] class WAXMANleakSMARTv2NOPOLL ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . ias_bus = Bus ( ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] signature = { MODELS_INFO : [ ( WAXMAN , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , TemperatureMeasurement . cluster_id , ApplianceEventAlerts . cluster_id , MANUFACTURER_SPECIFIC_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , TemperatureMeasurement . cluster_id , WAXMANApplianceEventAlerts , EmulatedIasZone , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zhaquirks.Bus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] WAXMAN = [string] [EOL]	0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomDevice [EOL] from zigpy . zcl . clusters . general import Basic , Ota [EOL] [EOL] from . . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] from . import SMART_THINGS , SmartThingsIasZone [EOL] [EOL] SMARTSENSE_MULTI_DEVICE_TYPE = [number] [comment] [EOL] [EOL] [EOL] class IasZoneContactSwitchCluster ( SmartThingsIasZone ) : [EOL] [docstring] [EOL] [EOL] ZONE_TYPE = [number] [EOL] CONTACT_SWITCH_TYPE = [number] [EOL] _CONSTANT_ATTRIBUTES = { ZONE_TYPE : CONTACT_SWITCH_TYPE } [EOL] [EOL] [EOL] class SmartthingsSmartSenseMultiSensor ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( SMART_THINGS , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : SMARTSENSE_MULTI_DEVICE_TYPE , INPUT_CLUSTERS : [ Basic . cluster_id ] , OUTPUT_CLUSTERS : [ Ota . cluster_id ] , } , [number] : { PROFILE_ID : [number] , DEVICE_TYPE : SMARTSENSE_MULTI_DEVICE_TYPE , INPUT_CLUSTERS : [ ] , OUTPUT_CLUSTERS : [ ] , } , } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { INPUT_CLUSTERS : [ Basic . cluster_id , IasZoneContactSwitchCluster ] , OUTPUT_CLUSTERS : [ Ota . cluster_id ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomDevice [EOL] from zigpy . zcl . clusters . general import Basic , Ota [EOL] [EOL] from . . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] from . import SMART_THINGS , SmartThingsIasZone [EOL] [EOL] SMARTSENSE_MOTION_DEVICE_TYPE = [number] [comment] [EOL] [EOL] [EOL] class IasZoneMotionCluster ( SmartThingsIasZone ) : [EOL] [docstring] [EOL] [EOL] ZONE_TYPE = [number] [EOL] MOTION_TYPE = [number] [EOL] _CONSTANT_ATTRIBUTES = { ZONE_TYPE : MOTION_TYPE } [EOL] [EOL] [EOL] class SmartthingsSmartSenseMotionSensor ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( SMART_THINGS , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : SMARTSENSE_MOTION_DEVICE_TYPE , INPUT_CLUSTERS : [ Basic . cluster_id ] , OUTPUT_CLUSTERS : [ Ota . cluster_id ] , } , [number] : { PROFILE_ID : [number] , DEVICE_TYPE : SMARTSENSE_MOTION_DEVICE_TYPE , INPUT_CLUSTERS : [ ] , OUTPUT_CLUSTERS : [ ] , } , } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { INPUT_CLUSTERS : [ Basic . cluster_id , IasZoneMotionCluster ] , OUTPUT_CLUSTERS : [ Ota . cluster_id ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [EOL] import zigpy . types as t [EOL] from zigpy . quirks import CustomCluster [EOL] from zigpy . zcl . clusters . security import IasZone [EOL] [EOL] SMART_THINGS = [string] [EOL] MANUFACTURER_SPECIFIC_CLUSTER_ID = [number] [comment] [EOL] [EOL] [EOL] class SmartThingsAccelCluster ( CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = MANUFACTURER_SPECIFIC_CLUSTER_ID [EOL] name = [string] [EOL] ep_attribute = [string] [EOL] manufacturer_attributes = { [number] : ( [string] , t . uint8_t ) , [number] : ( [string] , t . uint16_t ) , [number] : ( [string] , t . bitmap8 ) , [number] : ( [string] , t . int16s ) , [number] : ( [string] , t . int16s ) , [number] : ( [string] , t . int16s ) , } [EOL] [EOL] [EOL] class SmartThingsIasZone ( CustomCluster , IasZone ) : [EOL] [docstring] [EOL] [EOL] manufacturer_client_commands = { [number] : ( [string] , ( IasZone . ZoneStatus , t . bitmap8 , t . Optional ( t . uint8_t ) , t . Optional ( t . uint16_t ) , ) , False , ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] LEGRAND = [string] [EOL]	0 0 $builtins.str$ 0 0 0
from typing import Dict , Tuple [EOL] import typing [EOL] [docstring] [EOL] from zigpy . quirks import CustomCluster [EOL] [EOL] LEDVANCE = [string] [EOL] [EOL] [EOL] class LedvanceLightCluster ( CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = [number] [EOL] ep_attribute = [string] [EOL] name = [string] [EOL] manufacturer_server_commands = { [number] : ( [string] , ( ) , False ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . quirks import CustomCluster [EOL] from zigpy . zcl . clusters . lightlink import LightLink [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] MANUFACTURER = [string] [EOL] [EOL] [EOL] class LightLinkCluster ( CustomCluster , LightLink ) : [EOL] [docstring] [EOL] [EOL] async def bind ( self ) : [EOL] [docstring] [EOL] application = self . _endpoint . device . application [EOL] try : [EOL] coordinator = application . get_device ( application . ieee ) [EOL] except KeyError : [EOL] _LOGGER . warning ( [string] ) [EOL] return [EOL] group_list = await self . get_group_identifiers ( [number] ) [EOL] group_record = group_list [ [number] ] [EOL] group_id = group_record [ [number] ] . group_id [EOL] status = await coordinator . add_to_group ( group_id ) [EOL] return [ status ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[docstring] [EOL]	0 0
import builtins [EOL] [docstring] [EOL] [EOL] from . . import MotionWithReset [EOL] [EOL] HIVEHOME = [string] [EOL] [EOL] [EOL] class MotionCluster ( MotionWithReset ) : [EOL] [docstring] [EOL] [EOL] reset_s = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL] GLEDOPTO = [string] [EOL]	0 0 $builtins.str$ 0 0 0
[docstring] [EOL] [EOL] BOSCH = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
[docstring] [EOL]	0 0
from typing import Type , List [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomDevice , CustomCluster [EOL] from zigpy . zcl . clusters . general import ( Basic , Identify , Groups , Scenes , OnOff , LevelControl , Ota , ) [EOL] from zigpy . zcl . clusters . hvac import Fan [EOL] [EOL] [EOL] class NoReplyMixin : [EOL] [docstring] [EOL] [EOL] void_input_commands = [ ] [EOL] [EOL] def command ( self , command , * args , manufacturer = None , expect_reply = None ) : [EOL] [docstring] [EOL] if expect_reply is None : [EOL] expect_reply = command not in self . void_input_commands [EOL] [EOL] return super ( NoReplyMixin , self ) . command ( command , * args , manufacturer = manufacturer , expect_reply = expect_reply ) [EOL] [EOL] [EOL] class KofBasic ( NoReplyMixin , CustomCluster , Basic ) : [EOL] [docstring] [EOL] [EOL] void_input_commands = [ [number] ] [EOL] [EOL] [EOL] class KofIdentify ( NoReplyMixin , CustomCluster , Identify ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] void_input_commands = [ [number] , [number] ] [EOL] [EOL] [EOL] class KofGroups ( NoReplyMixin , CustomCluster , Groups ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] void_input_commands = [ [number] , [number] ] [EOL] [EOL] [EOL] class KofScenes ( NoReplyMixin , CustomCluster , Scenes ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] void_input_commands = [ [number] ] [EOL] [EOL] [EOL] class KofOnOff ( NoReplyMixin , CustomCluster , OnOff ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] void_input_commands = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] class KofLevelControl ( NoReplyMixin , CustomCluster , LevelControl ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] void_input_commands = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] class CeilingFan ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { [string] : { [number] : { [string] : zha . PROFILE_ID , [string] : [number] , [string] : [ Basic . cluster_id , Identify . cluster_id , Groups . cluster_id , Scenes . cluster_id , OnOff . cluster_id , LevelControl . cluster_id , Fan . cluster_id , ] , [string] : [ Identify . cluster_id , Ota . cluster_id ] , } } , [string] : [string] , } [EOL] [EOL] replacement = { [string] : { [number] : { [string] : zha . DeviceType . DIMMABLE_LIGHT , [string] : [ KofBasic , KofIdentify , KofGroups , KofScenes , KofOnOff , KofLevelControl , Fan , ] , [string] : [ Identify , Ota ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL] SERCOMM = [string] [EOL]	0 0 $builtins.str$ 0 0 0
[docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import typing [EOL] import logging [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomCluster , CustomDevice [EOL] from zigpy . zcl . clusters . general import ( Basic , Identify , Ota , PollControl , PowerConfiguration , ) [EOL] from zigpy . zcl . clusters . measurement import TemperatureMeasurement [EOL] from zigpy . zcl . clusters . security import IasZone [EOL] [EOL] from . import CLICK_TYPES , SAMJIN [EOL] from . . const import ( ARGS , BUTTON , COMMAND , COMMAND_BUTTON_DOUBLE , COMMAND_BUTTON_HOLD , COMMAND_BUTTON_SINGLE , COMMAND_ID , DEVICE_TYPE , DOUBLE_PRESS , ENDPOINTS , INPUT_CLUSTERS , LONG_PRESS , MODELS_INFO , OUTPUT_CLUSTERS , PRESS_TYPE , PROFILE_ID , SHORT_PRESS , ZHA_SEND_EVENT , ) [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] DIAGNOSTICS_CLUSTER_ID = [number] [comment] [EOL] [EOL] [EOL] class SamjinButton ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] class IASCluster ( CustomCluster , IasZone ) : [EOL] [docstring] [EOL] [EOL] cluster_id = IasZone . cluster_id [EOL] [EOL] def handle_cluster_request ( self , tsn , command_id , args ) : [EOL] [docstring] [EOL] if command_id == [number] : [EOL] state = args [ [number] ] & [number] [EOL] event_args = { PRESS_TYPE : CLICK_TYPES [ state ] , COMMAND_ID : command_id , ARGS : args , } [EOL] action = [string] . format ( CLICK_TYPES [ state ] ) [EOL] self . listener_event ( ZHA_SEND_EVENT , action , event_args ) [EOL] [EOL] signature = { MODELS_INFO : [ ( SAMJIN , BUTTON ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . IAS_ZONE , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , PollControl . cluster_id , TemperatureMeasurement . cluster_id , IASCluster . cluster_id , DIAGNOSTICS_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , PollControl . cluster_id , TemperatureMeasurement . cluster_id , IASCluster , DIAGNOSTICS_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id , Ota . cluster_id ] , } } } [EOL] [EOL] device_automation_triggers = { ( DOUBLE_PRESS , DOUBLE_PRESS ) : { COMMAND : COMMAND_BUTTON_DOUBLE } , ( SHORT_PRESS , SHORT_PRESS ) : { COMMAND : COMMAND_BUTTON_SINGLE } , ( LONG_PRESS , LONG_PRESS ) : { COMMAND : COMMAND_BUTTON_HOLD } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] DOUBLE = [number] [EOL] HOLD = [number] [EOL] SAMJIN = [string] [EOL] SINGLE = [number] [EOL] [EOL] CLICK_TYPES = { SINGLE : [string] , DOUBLE : [string] , HOLD : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [EOL] from zigpy . profiles import zha [EOL] [EOL] from . import XBEE_PROFILE_ID , XBeeAnalogInput , XBeeCommon , XBeeOnOff , XBeePWM [EOL] from . . const import DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , OUTPUT_CLUSTERS , PROFILE_ID [EOL] [EOL] [EOL] class XBee3Sensor ( XBeeCommon ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , application , ieee , nwk , replaces ) : [EOL] [docstring] [EOL] self . replacement [ ENDPOINTS ] . update ( { [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeeAnalogInput ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeeAnalogInput ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeeAnalogInput ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeeAnalogInput ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeeAnalogInput ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeePWM ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff , XBeePWM ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { [string] : [string] , [string] : [string] , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , PROFILE_ID : XBEE_PROFILE_ID , INPUT_CLUSTERS : [ XBeeOnOff ] , OUTPUT_CLUSTERS : [ ] , } , } ) [EOL] [EOL] super ( ) . __init__ ( application , ieee , nwk , replaces ) [EOL] [EOL] signature = { ENDPOINTS : { [number] : { PROFILE_ID : XBEE_PROFILE_ID , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , INPUT_CLUSTERS : [ ] , OUTPUT_CLUSTERS : [ ] , } , [number] : { PROFILE_ID : XBEE_PROFILE_ID , DEVICE_TYPE : zha . DeviceType . LEVEL_CONTROL_SWITCH , INPUT_CLUSTERS : [ ] , OUTPUT_CLUSTERS : [ ] , } , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] SINOPE = [string] [EOL]	0 0 $builtins.str$ 0 0 0
[docstring] [EOL] THIRD_REALITY = [string] [EOL]	0 0 $builtins.str$ 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import logging [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] import zigpy . types as t [EOL] from zigpy . quirks import CustomCluster [EOL] from zigpy . zcl . clusters . general import Scenes [EOL] from zigpy . zcl . clusters . lightlink import LightLink [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] IKEA = [string] [EOL] [EOL] [EOL] class LightLinkCluster ( CustomCluster , LightLink ) : [EOL] [docstring] [EOL] [EOL] async def bind ( self ) : [EOL] [docstring] [EOL] application = self . _endpoint . device . application [EOL] try : [EOL] coordinator = application . get_device ( application . ieee ) [EOL] except KeyError : [EOL] _LOGGER . warning ( [string] ) [EOL] return [EOL] group_list = await self . get_group_identifiers ( [number] ) [EOL] try : [EOL] group_record = group_list [ [number] ] [EOL] group_id = group_record [ [number] ] . group_id [EOL] except IndexError : [EOL] _LOGGER . warning ( [string] ) [EOL] group_id = [number] [EOL] status = await coordinator . add_to_group ( group_id ) [EOL] return [ status ] [EOL] [EOL] [EOL] class ScenesCluster ( CustomCluster , Scenes ) : [EOL] [docstring] [EOL] [EOL] manufacturer_server_commands = { [number] : ( [string] , ( t . int16s , t . int8s , t . int8s ) , False ) , [number] : ( [string] , ( t . int16s , t . int8s ) , False ) , [number] : ( [string] , ( t . int16s , ) , False ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
import builtins [EOL] from typing import Any , Type , Dict [EOL] import typing [EOL] import logging [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . zcl . clusters . general import ( Basic , Groups , Identify , LevelControl , OnOff , Ota , Scenes , ) [EOL] [EOL] from . . import LUMI , BasicCluster , PowerConfigurationCluster , XiaomiCustomDevice [EOL] from . . . import CustomCluster [EOL] from . . . const import ( ARGS , CLICK_TYPE , COMMAND , COMMAND_CLICK , COMMAND_DOUBLE , COMMAND_FURIOUS , COMMAND_QUAD , COMMAND_SINGLE , COMMAND_TRIPLE , DEVICE_TYPE , DOUBLE_PRESS , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , QUADRUPLE_PRESS , QUINTUPLE_PRESS , SHORT_PRESS , SKIP_CONFIGURATION , TRIPLE_PRESS , UNKNOWN , ZHA_SEND_EVENT , ) [EOL] [EOL] XIAOMI_CLUSTER_ID = [number] [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] CLICK_TYPE_MAP = { [number] : COMMAND_DOUBLE , [number] : COMMAND_TRIPLE , [number] : COMMAND_QUAD , [number] : COMMAND_FURIOUS , } [EOL] [EOL] [EOL] class MijaButton ( XiaomiCustomDevice ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . battery_size = [number] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] class MijaOnOff ( CustomCluster , OnOff ) : [EOL] [docstring] [EOL] [EOL] cluster_id = OnOff . cluster_id [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . _current_state = { } [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def _update_attribute ( self , attrid , value ) : [EOL] click_type = False [EOL] [EOL] [comment] [EOL] if attrid == [number] : [EOL] value = not value [EOL] click_type = COMMAND_SINGLE if value is True else False [EOL] [EOL] [comment] [EOL] elif attrid == [number] : [EOL] click_type = CLICK_TYPE_MAP . get ( value , UNKNOWN ) [EOL] [EOL] if click_type : [EOL] self . listener_event ( ZHA_SEND_EVENT , COMMAND_CLICK , { CLICK_TYPE : click_type } ) [EOL] [EOL] super ( ) . _update_attribute ( attrid , value ) [EOL] [EOL] signature = { MODELS_INFO : [ ( LUMI , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . DIMMER_SWITCH , INPUT_CLUSTERS : [ Basic . cluster_id , Identify . cluster_id , Ota . cluster_id , XIAOMI_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Basic . cluster_id , Identify . cluster_id , Groups . cluster_id , Scenes . cluster_id , OnOff . cluster_id , LevelControl . cluster_id , Ota . cluster_id , ] , } } , } [EOL] [EOL] replacement = { SKIP_CONFIGURATION : True , ENDPOINTS : { [number] : { DEVICE_TYPE : zha . DeviceType . REMOTE_CONTROL , INPUT_CLUSTERS : [ Identify . cluster_id , BasicCluster , PowerConfigurationCluster , ] , OUTPUT_CLUSTERS : [ BasicCluster , Scenes . cluster_id , Groups . cluster_id , MijaOnOff , LevelControl . cluster_id , Ota . cluster_id , ] , } } , } [EOL] [EOL] device_automation_triggers = { ( SHORT_PRESS , SHORT_PRESS ) : { COMMAND : COMMAND_CLICK , ARGS : { CLICK_TYPE : COMMAND_SINGLE } , } , ( DOUBLE_PRESS , DOUBLE_PRESS ) : { COMMAND : COMMAND_CLICK , ARGS : { CLICK_TYPE : COMMAND_DOUBLE } , } , ( TRIPLE_PRESS , TRIPLE_PRESS ) : { COMMAND : COMMAND_CLICK , ARGS : { CLICK_TYPE : COMMAND_TRIPLE } , } , ( QUADRUPLE_PRESS , QUADRUPLE_PRESS ) : { COMMAND : COMMAND_CLICK , ARGS : { CLICK_TYPE : COMMAND_QUAD } , } , ( QUINTUPLE_PRESS , QUINTUPLE_PRESS ) : { COMMAND : COMMAND_CLICK , ARGS : { CLICK_TYPE : COMMAND_FURIOUS } , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Type [EOL] import logging [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . zcl . clusters . general import Basic , Identify [EOL] from zigpy . zcl . clusters . measurement import IlluminanceMeasurement [EOL] from zigpy . zdo . types import NodeDescriptor [EOL] [EOL] from . . import LUMI , BasicCluster , XiaomiCustomDevice [EOL] from . . . import PowerConfigurationCluster [EOL] from . . . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , NODE_DESCRIPTOR , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Illumination ( XiaomiCustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( LUMI , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . LIGHT_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , Identify . cluster_id , IlluminanceMeasurement . cluster_id , PowerConfigurationCluster . cluster_id , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id ] , } } , } [EOL] [EOL] replacement = { NODE_DESCRIPTOR : NodeDescriptor ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . LIGHT_SENSOR , INPUT_CLUSTERS : [ BasicCluster , Identify . cluster_id , IlluminanceMeasurement . cluster_id , PowerConfigurationCluster , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id ] , } } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import logging [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . zcl . clusters . general import Basic , Groups , OnOff [EOL] [EOL] from . . import LUMI , BasicCluster , PowerConfigurationCluster , XiaomiCustomDevice [EOL] from . . . const import ( ARGS , ATTRIBUTE_ID , ATTRIBUTE_NAME , CLUSTER_ID , COMMAND , COMMAND_ATTRIBUTE_UPDATED , COMMAND_TRIPLE , DEVICE_TYPE , DOUBLE_PRESS , ENDPOINT_ID , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , SHORT_PRESS , SKIP_CONFIGURATION , TRIPLE_PRESS , UNKNOWN , VALUE , ) [EOL] [EOL] BUTTON_DEVICE_TYPE = [number] [EOL] ON_OFF = [string] [EOL] XIAOMI_CLUSTER_ID = [number] [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class SwitchAQ2 ( XiaomiCustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( LUMI , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : BUTTON_DEVICE_TYPE , INPUT_CLUSTERS : [ Basic . cluster_id , OnOff . cluster_id , XIAOMI_CLUSTER_ID ] , OUTPUT_CLUSTERS : [ Basic . cluster_id , Groups . cluster_id , XIAOMI_CLUSTER_ID , ] , } } , } [EOL] [EOL] replacement = { SKIP_CONFIGURATION : True , ENDPOINTS : { [number] : { DEVICE_TYPE : zha . DeviceType . REMOTE_CONTROL , INPUT_CLUSTERS : [ BasicCluster , PowerConfigurationCluster , XIAOMI_CLUSTER_ID , ] , OUTPUT_CLUSTERS : [ Basic . cluster_id , Groups . cluster_id , XIAOMI_CLUSTER_ID , OnOff . cluster_id , ] , } } , } [EOL] [EOL] device_automation_triggers = { ( SHORT_PRESS , SHORT_PRESS ) : { COMMAND : COMMAND_ATTRIBUTE_UPDATED , CLUSTER_ID : [number] , ENDPOINT_ID : [number] , ARGS : { ATTRIBUTE_ID : [number] , ATTRIBUTE_NAME : ON_OFF , VALUE : [number] } , } , ( DOUBLE_PRESS , DOUBLE_PRESS ) : { COMMAND : COMMAND_ATTRIBUTE_UPDATED , CLUSTER_ID : [number] , ENDPOINT_ID : [number] , ARGS : { ATTRIBUTE_ID : [number] , ATTRIBUTE_NAME : UNKNOWN , VALUE : [number] } , } , ( TRIPLE_PRESS , TRIPLE_PRESS ) : { COMMAND : COMMAND_TRIPLE , CLUSTER_ID : [number] , ENDPOINT_ID : [number] , ARGS : { ATTRIBUTE_ID : [number] , ATTRIBUTE_NAME : UNKNOWN , VALUE : [number] } , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Type [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] [EOL] from zigpy . profiles import zha [EOL] from zigpy . quirks import CustomDevice [EOL] from zigpy . zcl . clusters . general import Basic , Identify , PowerConfiguration [EOL] from zigpy . zcl . clusters . measurement import RelativeHumidity , TemperatureMeasurement [EOL] [EOL] from . import KONKE [EOL] from . . import PowerConfigurationCluster [EOL] from . . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] [EOL] [EOL] class KonkeTempHumidity ( CustomDevice ) : [EOL] [docstring] [EOL] [EOL] signature = { MODELS_INFO : [ ( KONKE , [string] ) , ( KONKE , [string] ) ] , ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfiguration . cluster_id , Identify . cluster_id , TemperatureMeasurement . cluster_id , RelativeHumidity . cluster_id , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id ] , } } , } [EOL] [EOL] replacement = { ENDPOINTS : { [number] : { PROFILE_ID : zha . PROFILE_ID , DEVICE_TYPE : zha . DeviceType . TEMPERATURE_SENSOR , INPUT_CLUSTERS : [ Basic . cluster_id , PowerConfigurationCluster , Identify . cluster_id , TemperatureMeasurement . cluster_id , RelativeHumidity . cluster_id , ] , OUTPUT_CLUSTERS : [ Identify . cluster_id ] , } } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] [docstring] [EOL] [EOL] from . . import MotionWithReset , OccupancyOnEvent , LocalDataCluster [EOL] [EOL] KONKE = [string] [EOL] [EOL] [EOL] class OccupancyCluster ( LocalDataCluster , OccupancyOnEvent ) : [EOL] [docstring] [EOL] [EOL] reset_s = [number] [EOL] [EOL] [EOL] class MotionCluster ( MotionWithReset ) : [EOL] [docstring] [EOL] [EOL] reset_s = [number] [EOL] send_occupancy_event = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0
from typing import Dict , Tuple [EOL] import typing [EOL] [docstring] [EOL] from zigpy . quirks import CustomCluster [EOL] [EOL] OSRAM = [string] [EOL] [EOL] [EOL] class OsramLightCluster ( CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = [number] [EOL] ep_attribute = [string] [EOL] name = [string] [EOL] manufacturer_server_commands = { [number] : ( [string] , ( ) , False ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] [docstring] [EOL] from . . import MotionWithReset [EOL] [EOL] TRUST = [string] [EOL] [EOL] [EOL] class MotionCluster ( MotionWithReset ) : [EOL] [docstring] [EOL] [EOL] reset_s = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
from typing import Type [EOL] import logging [EOL] import typing [EOL] import zhaquirks [EOL] [docstring] [EOL] import logging [EOL] [EOL] from zigpy . quirks import CustomCluster [EOL] from zigpy . zcl . clusters . smartenergy import Metering [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class MeteringCluster ( CustomCluster , Metering ) : [EOL] [docstring] [EOL] [EOL] MULTIPLIER = [number] [EOL] DIVISOR = [number] [EOL] _CONSTANT_ATTRIBUTES = { MULTIPLIER : [number] , DIVISOR : [number] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] ZCL_IAS_MOTION_COMMAND = [string] [EOL] ZCL_OCC_ATTR_RPT_OCC = [string] [EOL] [EOL] [EOL] class ClusterListener : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , cluster ) : [EOL] [docstring] [EOL] self . cluster_commands = [ ] [EOL] self . attribute_updates = [ ] [EOL] cluster . add_listener ( self ) [EOL] [EOL] def attribute_updated ( self , attr_id , value ) : [EOL] [docstring] [EOL] self . attribute_updates . append ( ( attr_id , value ) ) [EOL] [EOL] def cluster_command ( self , tsn , commdand_id , args ) : [EOL] [docstring] [EOL] self . cluster_commands . append ( ( tsn , commdand_id , args ) ) [EOL]	0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal [EOL] import tests [EOL] import unittest [EOL] import zhaquirks [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] import asyncio [EOL] from unittest import mock [EOL] [EOL] import pytest [EOL] [EOL] from zhaquirks . const import OFF , ON , ZONE_STATE [EOL] from zhaquirks . xiaomi import BasicCluster [EOL] import zhaquirks . xiaomi . aqara . motion_aq2 [EOL] import zhaquirks . xiaomi . aqara . motion_aq2b [EOL] import zhaquirks . xiaomi . mija . motion [EOL] [EOL] from tests . common import ZCL_OCC_ATTR_RPT_OCC , ClusterListener [EOL] [EOL] [EOL] def test_basic_cluster_deserialize_wrong_len ( ) : [EOL] [docstring] [EOL] cluster = BasicCluster ( mock . MagicMock ( ) ) [EOL] [EOL] data = [string] [EOL] data += [string] [EOL] data += [string] [EOL] data += [string] [EOL] [EOL] deserialized = cluster . deserialize ( data ) [EOL] assert deserialized [ [number] ] [EOL] [EOL] [EOL] def test_basic_cluster_deserialize_wrong_len_2 ( ) : [EOL] [docstring] [EOL] cluster = BasicCluster ( mock . MagicMock ( ) ) [EOL] [EOL] data = [string] [EOL] data += [string] [EOL] data += [string] [EOL] [EOL] deserialized = cluster . deserialize ( data ) [EOL] assert deserialized [ [number] ] [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . parametrize ( [string] , ( zhaquirks . xiaomi . aqara . motion_aq2 . MotionAQ2 , zhaquirks . xiaomi . aqara . motion_aq2b . MotionAQ2 , zhaquirks . xiaomi . mija . motion . Motion , ) , ) async def test_konke_motion ( zigpy_device_from_quirk , quirk ) : [EOL] [docstring] [EOL] [EOL] motion_dev = zigpy_device_from_quirk ( quirk ) [EOL] [EOL] motion_cluster = motion_dev . endpoints [ [number] ] . ias_zone [EOL] motion_listener = ClusterListener ( motion_cluster ) [EOL] [EOL] occupancy_cluster = motion_dev . endpoints [ [number] ] . occupancy [EOL] occupancy_listener = ClusterListener ( occupancy_cluster ) [EOL] [EOL] p1 = mock . patch . object ( motion_cluster , [string] , [number] ) [EOL] p2 = mock . patch . object ( occupancy_cluster , [string] , [number] ) [EOL] [comment] [EOL] hdr , args = occupancy_cluster . deserialize ( ZCL_OCC_ATTR_RPT_OCC ) [EOL] with p1 , p2 : [EOL] occupancy_cluster . handle_message ( hdr , args ) [EOL] [EOL] assert len ( motion_listener . cluster_commands ) == [number] [EOL] assert len ( motion_listener . attribute_updates ) == [number] [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] == ZONE_STATE [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] [ [number] ] == ON [EOL] [EOL] assert len ( occupancy_listener . cluster_commands ) == [number] [EOL] assert len ( occupancy_listener . attribute_updates ) == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert len ( motion_listener . cluster_commands ) == [number] [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] == ZONE_STATE [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] [ [number] ] == OFF [EOL] [EOL] assert len ( occupancy_listener . cluster_commands ) == [number] [EOL] assert len ( occupancy_listener . attribute_updates ) == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Any , Literal [EOL] import typing [EOL] import unittest [EOL] import typing_extensions [EOL] import tests [EOL] [docstring] [EOL] [EOL] import asyncio [EOL] from unittest import mock [EOL] [EOL] import pytest [EOL] [EOL] from zhaquirks . const import OFF , ON , ZONE_STATE [EOL] import zhaquirks . konke . motion [EOL] [EOL] from tests . common import ZCL_IAS_MOTION_COMMAND , ClusterListener [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . parametrize ( [string] , ( zhaquirks . konke . motion . KonkeMotion , zhaquirks . konke . motion . KonkeMotionB ) ) async def test_konke_motion ( zigpy_device_from_quirk , quirk ) : [EOL] [docstring] [EOL] [EOL] motion_dev = zigpy_device_from_quirk ( quirk ) [EOL] [EOL] motion_cluster = motion_dev . endpoints [ [number] ] . ias_zone [EOL] motion_listener = ClusterListener ( motion_cluster ) [EOL] [EOL] occupancy_cluster = motion_dev . endpoints [ [number] ] . occupancy [EOL] occupancy_listener = ClusterListener ( occupancy_cluster ) [EOL] [EOL] p1 = mock . patch . object ( motion_cluster , [string] , [number] ) [EOL] p2 = mock . patch . object ( occupancy_cluster , [string] , [number] ) [EOL] [comment] [EOL] hdr , args = motion_cluster . deserialize ( ZCL_IAS_MOTION_COMMAND ) [EOL] with p1 , p2 : [EOL] motion_cluster . handle_message ( hdr , args ) [EOL] [EOL] assert len ( motion_listener . cluster_commands ) == [number] [EOL] assert len ( motion_listener . attribute_updates ) == [number] [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] == ZONE_STATE [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] [ [number] ] == ON [EOL] [EOL] assert len ( occupancy_listener . cluster_commands ) == [number] [EOL] assert len ( occupancy_listener . attribute_updates ) == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert len ( motion_listener . cluster_commands ) == [number] [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] == ZONE_STATE [EOL] assert motion_listener . cluster_commands [ [number] ] [ [number] ] [ [number] ] == OFF [EOL] [EOL] assert len ( occupancy_listener . cluster_commands ) == [number] [EOL] assert len ( occupancy_listener . attribute_updates ) == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL] assert occupancy_listener . attribute_updates [ [number] ] [ [number] ] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] import tests [EOL] [docstring] [EOL] from unittest import mock [EOL] [EOL] import zigpy . device [EOL] import zigpy . endpoint [EOL] import zigpy . quirks [EOL] import zhaquirks . kof . kof_mr101z [EOL] [EOL] [EOL] def test_kof_no_reply ( ) : [EOL] [docstring] [EOL] [EOL] class TestCluster ( zhaquirks . kof . kof_mr101z . NoReplyMixin , zigpy . quirks . CustomCluster ) : [EOL] [docstring] [EOL] [EOL] cluster_id = [number] [EOL] void_input_commands = [ [number] ] [EOL] server_commands = { [number] : ( [string] , ( ) , False ) , [number] : ( [string] , ( ) , False ) , } [EOL] client_commands = { } [EOL] [EOL] end_point = mock . MagicMock ( ) [EOL] cluster = TestCluster ( end_point ) [EOL] [EOL] cluster . command ( [number] ) [EOL] end_point . request . assert_called_with ( mock . ANY , mock . ANY , mock . ANY , expect_reply = True , command_id = mock . ANY ) [EOL] end_point . reset_mock ( ) [EOL] [EOL] cluster . command ( [number] , expect_reply = False ) [EOL] end_point . request . assert_called_with ( mock . ANY , mock . ANY , mock . ANY , expect_reply = False , command_id = mock . ANY ) [EOL] end_point . reset_mock ( ) [EOL] [EOL] cluster . command ( [number] ) [EOL] end_point . request . assert_called_with ( mock . ANY , mock . ANY , mock . ANY , expect_reply = False , command_id = mock . ANY ) [EOL] end_point . reset_mock ( ) [EOL] [EOL] cluster . command ( [number] , expect_reply = True ) [EOL] end_point . request . assert_called_with ( mock . ANY , mock . ANY , mock . ANY , expect_reply = True , command_id = mock . ANY ) [EOL] end_point . reset_mock ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from unittest import mock [EOL] [EOL] from zhaquirks . xiaomi . aqara . ctrl_neutral import CtrlNeutral [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_ctrl_neutral ( zigpy_device_from_quirk ) : [EOL] [docstring] [EOL] data = [string] [EOL] cluster = [number] [EOL] src_ep = [number] [EOL] dst_ep = [number] [EOL] [EOL] dev = zigpy_device_from_quirk ( CtrlNeutral ) [EOL] dev . request = mock . MagicMock ( ) [EOL] [EOL] dev [ [number] ] . in_clusters [ cluster ] . command ( [number] ) [EOL] [EOL] assert dev . request . call_args [ [number] ] [ [number] ] == [number] [EOL] assert dev . request . call_args [ [number] ] [ [number] ] == cluster [EOL] assert dev . request . call_args [ [number] ] [ [number] ] == src_ep [EOL] assert dev . request . call_args [ [number] ] [ [number] ] == dst_ep [EOL] assert dev . request . call_args [ [number] ] [ [number] ] == data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import tests [EOL] [docstring] [EOL] [EOL] from asynctest import CoroutineMock [EOL] import pytest [EOL] import zigpy . device [EOL] import zigpy . application [EOL] import zigpy . types [EOL] [EOL] from zhaquirks . const import ( DEVICE_TYPE , ENDPOINTS , INPUT_CLUSTERS , MODELS_INFO , OUTPUT_CLUSTERS , PROFILE_ID , ) [EOL] [EOL] [EOL] class MockApp ( zigpy . application . ControllerApplication ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . _ieee = zigpy . types . EUI64 ( [string] ) [EOL] self . _nwk = zigpy . types . NWK ( [number] ) [EOL] [EOL] async def probe ( self , * args ) : [EOL] [docstring] [EOL] return True [EOL] [EOL] async def shutdown ( self ) : [EOL] [docstring] [EOL] [EOL] async def startup ( self , * args ) : [EOL] [docstring] [EOL] [EOL] async def permit_ncp ( self , * args ) : [EOL] [docstring] [EOL] [EOL] mrequest = CoroutineMock ( ) [EOL] request = CoroutineMock ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def app_controller_mock ( ) : [EOL] [docstring] [EOL] config = { [string] : { [string] : [string] } , [string] : None } [EOL] config = MockApp . SCHEMA ( config ) [EOL] app = MockApp ( config ) [EOL] return app [EOL] [EOL] [EOL] @ pytest . fixture def ieee_mock ( ) : [EOL] [docstring] [EOL] return zigpy . types . EUI64 ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] @ pytest . fixture def zigpy_device_mock ( MockAppController , ieee_mock ) : [EOL] [docstring] [EOL] [EOL] def _dev ( ieee = None , nwk = zigpy . types . NWK ( [number] ) ) : [EOL] if ieee is None : [EOL] ieee = ieee_mock [EOL] device = MockAppController . add_device ( ieee , nwk ) [EOL] return device [EOL] [EOL] return _dev [EOL] [EOL] [EOL] @ pytest . fixture def zigpy_device_from_quirk ( MockAppController , ieee_mock ) : [EOL] [docstring] [EOL] [EOL] def _dev ( quirk , ieee = None , nwk = zigpy . types . NWK ( [number] ) ) : [EOL] if ieee is None : [EOL] ieee = ieee_mock [EOL] models_info = quirk . signature . get ( MODELS_INFO , ( ( [string] , [string] ) , ) ) [EOL] manufacturer , model = models_info [ [number] ] [EOL] [EOL] raw_device = zigpy . device . Device ( MockAppController , ieee , nwk ) [EOL] raw_device . manufacturer = manufacturer [EOL] raw_device . model = model [EOL] [EOL] endpoints = quirk . signature . get ( ENDPOINTS , { } ) [EOL] for ep_id , ep_data in endpoints . items ( ) : [EOL] ep = raw_device . add_endpoint ( ep_id ) [EOL] ep . profile_id = ep_data . get ( PROFILE_ID , [number] ) [EOL] ep . device_type = ep_data . get ( DEVICE_TYPE , [number] ) [EOL] in_clusters = ep_data . get ( INPUT_CLUSTERS , [ ] ) [EOL] for cluster_id in in_clusters : [EOL] ep . add_input_cluster ( cluster_id ) [EOL] out_clusters = ep_data . get ( OUTPUT_CLUSTERS , [ ] ) [EOL] for cluster_id in out_clusters : [EOL] ep . add_output_cluster ( cluster_id ) [EOL] device = quirk ( MockAppController , ieee , nwk , raw_device ) [EOL] MockAppController . devices [ ieee ] = device [EOL] [EOL] return device [EOL] [EOL] return _dev [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.MockApp]$ 0 0 0 0 0 $typing.Type[tests.conftest.MockApp]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0