[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import subprocess [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import subprocess [EOL] import json [EOL] from datetime import datetime [EOL] [EOL] configfile = [string] [EOL] [EOL] def load_config ( configfile ) : [EOL] with open ( configfile ) as fid : [EOL] config = json . loads ( [string] . join ( fid . readlines ( ) ) ) [EOL] config [ [string] ] [ [string] ] = [ os . sep , [string] , config [ [string] ] [ [string] ] ] [EOL] config [ [string] ] = datetime . today ( ) . strftime ( [string] ) [EOL] return config [EOL] [EOL] def log ( func ) : [EOL] def setlog ( * args , ** kwargs ) : [EOL] r = func ( * args , ** kwargs ) [EOL] if r : [EOL] with open ( config [ [string] ] [ [string] ] , [string] ) as fid : [EOL] fid . write ( config [ [string] ] + [string] + func . __name__ + [string] + decode ( r ) ) [EOL] return r [EOL] return setlog [EOL] [EOL] @ log def run_cmd ( cmd ) : [EOL] output = subprocess . Popen ( cmd , shell = True , stdout = subprocess . PIPE , executable = [string] ) [EOL] content , status = output . communicate ( ) [EOL] [EOL] if content : [EOL] return content [EOL] [EOL] [EOL] def exists ( fname ) : [EOL] return os . path . exists ( fname ) [EOL] [EOL] [EOL] def make_fstruct ( config ) : [EOL] [docstring] [EOL] for fname in config [ [string] ] [ [string] ] : [EOL] curr_fname = ( os . path . join ( * config [ [string] ] [ [string] ] ) + os . sep + [string] + fname ) [EOL] dotfname = os . path . join ( * [ os . sep ] + config [ [string] ] [ [string] ] ) + os . sep + fname [EOL] [EOL] if exists ( curr_fname ) : [EOL] run_cmd ( [string] . format ( curr_fname ) ) [EOL] run_cmd ( [string] . format ( dotfname , curr_fname ) ) [EOL] else : [EOL] run_cmd ( [string] . format ( dotfname , curr_fname ) ) [EOL] [EOL] [EOL] def decode ( string ) : [EOL] if string : [EOL] return string . decode ( [string] ) [EOL] else : [EOL] return [string] [EOL] [EOL] def getuser ( ) : [EOL] username = run_cmd ( [string] ) [EOL] if username : [EOL] return decode ( username ) . strip ( ) [EOL] else : [EOL] return None [EOL] [EOL] def getkernel ( ) : [EOL] kernel = run_cmd ( [string] ) [EOL] if kernel : [EOL] return decode ( kernel ) . strip ( ) [EOL] else : [EOL] return None [EOL] [EOL] def sethostname ( hostname ) : [EOL] _ = run_cmd ( [string] . format ( hostname ) ) [EOL] [EOL] def read_packages ( pfname ) : [EOL] with open ( pfname , [string] ) as fid : [EOL] return [ pack . strip ( ) for pack in fid . readlines ( ) ] [EOL] [EOL] def update ( ) : [EOL] _ = run_cmd ( [string] ) [EOL] [EOL] def check_package ( packagename ) : [EOL] return decode ( run_cmd ( [string] . format ( packagename ) ) ) [EOL] [EOL] def check_and_install_packages ( config ) : [EOL] packages = read_packages ( config [ [string] ] [ [string] ] ) [EOL] update ( ) [EOL] [comment] [EOL] for package in packages : [EOL] curr_pcheck = check_package ( package ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if package in curr_pcheck : [EOL] continue [EOL] else : [EOL] if [string] not in package : [EOL] run_cmd ( [string] . format ( package ) ) [EOL] [comment] [EOL] else : [EOL] [comment] [EOL] kernel = getkernel ( ) [EOL] run_cmd ( [string] . format ( package , kernel ) ) [EOL] [EOL] def add_group ( username , groupname ) : [EOL] run_cmd ( [string] . format ( username , groupname ) ) [EOL] [EOL] def install_python37 ( versionnumber ) : [EOL] pyfname = [string] . format ( version = versionnumber ) [EOL] if not exists ( pyfname ) : [EOL] run_cmd ( [string] + [string] + [string] . format ( version = versionnumber , pyfname = pyfname ) ) [EOL] run_cmd ( [string] . format ( pyfname ) ) [EOL] os . chdir ( [string] . format ( version = versionnumber ) ) [EOL] run_cmd ( [string] ) [EOL] run_cmd ( [string] ) [EOL] run_cmd ( [string] ) [EOL] run_cmd ( [string] . format ( pyfname ) ) [EOL] run_cmd ( [string] . format ( version = versionnumber ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def lsdirs ( path ) : [EOL] allfiles = os . listdir ( path ) [EOL] alldirs = [ item for item in allfiles if os . path . isdir ( os . path . join ( path , item ) ) ] [EOL] return alldirs [EOL] [EOL] [EOL] def setup_virtualenvs ( config ) : [EOL] rootdir = os . path . join ( * config [ [string] ] [ [string] ] + config [ [string] ] [ [string] ] ) [EOL] existingvirtualenvs = lsdirs ( rootdir ) [EOL] for virtenv , settings in config [ [string] ] [ [string] ] . items ( ) : [EOL] if virtenv in existingvirtualenvs : [EOL] print ( [string] . format ( virtenv ) ) [EOL] else : [EOL] source = [string] [EOL] interpreterpath = os . path . join ( * [ os . sep ] + settings [ [string] ] ) [EOL] pipcachedir = os . path . join ( * config [ [string] ] [ [string] ] + [ [string] , [string] ] ) [EOL] arguments = [string] . format ( interpreterpath ) [EOL] packages = [string] . join ( settings [ [string] ] ) [EOL] run_cmd ( [string] . format ( source , arguments , virtenv ) ) [EOL] pipcmd = [string] . format ( packages ) [EOL] print ( pipcmd ) [EOL] run_cmd ( [string] . format ( source , virtenv , pipcmd ) ) [EOL] run_cmd ( [string] . format ( config [ [string] ] [ [string] ] , rootdir + os . sep + virtenv ) ) [EOL] run_cmd ( [string] . format ( config [ [string] ] [ [string] ] , pipcachedir ) ) [EOL] [EOL] [EOL] def setgitconfig ( gitusername , gitemail ) : [EOL] run_cmd ( [string] . format ( gitemail ) ) [EOL] run_cmd ( [string] . format ( gitusername ) ) [EOL] [EOL] if __name__ == [string] : [EOL] config = load_config ( configfile ) [comment] [EOL] [comment] [EOL] [comment] [EOL] sethostname ( config [ [string] ] [ [string] ] ) [EOL] add_group ( config [ [string] ] [ [string] ] , [string] ) [EOL] [comment] [EOL] make_fstruct ( config ) [comment] [EOL] check_and_install_packages ( config ) [EOL] install_python37 ( config [ [string] ] [ [string] ] ) [EOL] setgitconfig ( config [ [string] ] [ [string] ] , config [ [string] ] [ [string] ] ) [EOL] [comment] [EOL] setup_virtualenvs ( config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0