from typing import List [EOL] import typing [EOL] from glob import glob [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] long_descr = f . read ( ) . decode ( ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] requirements = f . read ( ) . decode ( ) . splitlines ( ) [EOL] [EOL] setup ( name = [string] , packages = find_packages ( ) , version = [string] , description = [string] , long_description = long_descr , author = [string] , author_email = [string] , url = [string] , license = [string] , install_requires = requirements , setup_requires = [ [string] ] , tests_require = [ [string] ] , data_files = [ ( [string] , [ [string] , [string] ] ) , ( [string] , glob ( [string] ) ) , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import pytest [EOL] from flask import Flask [EOL] [EOL] [EOL] @ pytest . fixture def app ( ) : [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = True [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Callable , Any , List , TypeVar [EOL] import typing [EOL] import unittest [EOL] import flask [EOL] import builtins [EOL] from typing import Any , Callable , Dict , List , TypeVar [EOL] from unittest . mock import Mock [EOL] [EOL] from flask import Flask [EOL] from flask_jwt_extended import JWTManager , create_access_token [EOL] [EOL] RT = TypeVar ( [string] ) [EOL] [EOL] [EOL] def build_authorization_headers ( app , is_admin = False ) : [EOL] app . config [ [string] ] = [string] [EOL] jwt = JWTManager ( app ) [EOL] [EOL] @ jwt . user_claims_loader def add_claims_to_access_token ( data ) : [EOL] nonlocal is_admin [EOL] return { [string] : is_admin } [EOL] [EOL] with app . test_request_context ( ) : [EOL] access_token = create_access_token ( [string] ) [EOL] [EOL] return { [string] : [string] . format ( access_token ) } [EOL] [EOL] [EOL] def get_validator_schema ( mock ) : [EOL] mock . assert_called_once ( ) [EOL] args , kwargs = mock . call_args_list [ [number] ] [EOL] [EOL] assert len ( args ) == [number] [EOL] assert kwargs == { } [EOL] [EOL] return args [ [number] ] [EOL] [EOL] [EOL] def validator_call_through ( schema , wrapped , args , kwargs ) : [EOL] return wrapped ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $RT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0