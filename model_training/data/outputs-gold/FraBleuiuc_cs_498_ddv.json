[comment] [EOL] from typing import List , Any [EOL] import mmap [EOL] import typing [EOL] import pathlib [EOL] import csv [EOL] import json [EOL] from mmap import mmap [EOL] from collections import defaultdict [EOL] from pathlib import Path [EOL] from pprint import pprint [EOL] [EOL] import click [EOL] import click_pathlib [EOL] from loguru import logger [EOL] from tqdm import tqdm [EOL] [EOL] ROOT = Path ( __file__ ) . resolve ( ) . parent . parent [EOL] INPUT_PATH = ROOT / [string] [EOL] OUTPUT_PATH = ROOT / [string] [EOL] COLUMNS = [ [string] , [string] , [string] , [string] , ] [EOL] SPLIT_COLUMNS = [ [string] , [string] , ] [EOL] [EOL] def get_num_lines ( file_path ) : [EOL] lines = [number] [EOL] with open ( file_path , [string] ) as input_file : [EOL] buffer = mmap ( input_file . fileno ( ) , [number] ) [EOL] while buffer . readline ( ) : [EOL] lines += [number] [EOL] return lines [EOL] [EOL] def filter_empty_fields ( line ) : [EOL] if line . get ( [string] ) == [string] or line . get ( [string] ) == [string] or line . get ( [string] ) == [string] or line . get ( [string] ) == [string] or line . get ( [string] ) == [ [string] ] or line . get ( [string] ) == [ [string] ] or line . get ( [string] ) == [ [string] ] : [EOL] return [EOL] return line [EOL] [EOL] @ click . option ( [string] , [string] , default = INPUT_PATH , type = click_pathlib . Path ( exists = True ) , ) @ click . command ( ) def preprocess ( developer_survey_path ) : [EOL] [docstring] [EOL] [EOL] chart_data = [ ] [EOL] csv_path = developer_survey_path / [string] [EOL] entries = get_num_lines ( csv_path ) - [number] [EOL] [EOL] with open ( csv_path , newline = [string] ) as survey_results : [EOL] for row in tqdm ( csv . DictReader ( survey_results ) , total = entries ) : [EOL] result = filter_empty_fields ( { ** { key : row [ key ] for key in COLUMNS } , ** { key : row [ key ] . split ( [string] ) for key in SPLIT_COLUMNS } } ) [EOL] if result : [EOL] chart_data . append ( result ) [EOL] [EOL] [comment] [EOL] Path ( OUTPUT_PATH ) . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] with open ( OUTPUT_PATH / [string] , [string] ) as output_file : [EOL] json . dump ( chart_data , output_file ) [EOL] [EOL] logger . info ( [string] , filtered_length = len ( chart_data ) , total_length = entries ) [EOL] [EOL] if __name__ == [string] : [EOL] preprocess ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0