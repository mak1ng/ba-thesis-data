from typing import List , Any [EOL] import typing [EOL] import _csv [EOL] import csv [EOL] lineas = [ ] [EOL] k = [number] [EOL] with open ( [string] , [string] , encoding = [string] ) as hoteles : [EOL] reader = csv . reader ( hoteles , delimiter = [string] ) [EOL] for row in reader : [EOL] k += [number] [EOL] if k % [number] == [number] : [EOL] print ( k ) [EOL] if len ( row ) > [number] : [EOL] lineas . append ( row ) [EOL] print ( len ( lineas ) ) [EOL] hoteles . close ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import _csv [EOL] import csv [EOL] n = [number] [EOL] lineas = [ ] [EOL] with open ( [string] , [string] , encoding = [string] ) as file : [EOL] reader = csv . reader ( file , delimiter = [string] ) [EOL] for row in reader : [EOL] n += [number] [EOL] if n % [number] == [number] : [EOL] print ( n ) [EOL] if len ( row ) == [number] : [EOL] filina = row [EOL] elif len ( row ) > [number] : [EOL] filina = row [EOL] if [string] in filina [ [number] ] : [EOL] filina [ [number] ] = filina [ [number] ] + filina . pop ( [number] ) [EOL] if len ( filina ) != [number] : [EOL] print ( [string] , filina ) [EOL] else : [EOL] filina [ [number] ] = filina [ [number] ] + filina . pop ( [number] ) [EOL] if len ( filina ) != [number] : [EOL] print ( [string] , filina ) [EOL] else : [EOL] filina = row [ [number] ] . split ( [string] ) [EOL] if [string] in filina [ [number] ] : [EOL] filina [ [number] ] = filina [ [number] ] + filina . pop ( [number] ) [EOL] if len ( filina ) != [number] : [EOL] print ( [string] , filina ) [EOL] else : [EOL] filina [ [number] ] = filina [ [number] ] + [string] + filina . pop ( [number] ) [EOL] if len ( filina ) != [number] : [EOL] if [string] in filina [ [number] ] : [EOL] filina [ [number] ] = filina [ [number] ] + filina . pop ( [number] ) [EOL] if len ( filina ) != [number] : [EOL] print ( [string] , filina ) [EOL] lineas . append ( filina ) [EOL] [EOL] csv . register_dialect ( [string] , delimiter = [string] , lineterminator = [string] ) [EOL] [EOL] with open ( [string] , [string] , encoding = [string] ) as hoteles : [EOL] writer = csv . writer ( hoteles , dialect = [string] ) [EOL] writer . writerows ( lineas ) [EOL] hoteles . close ( ) [EOL] file . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import subprocess [EOL] from pymongo import MongoClient [EOL] import pandas as pd [EOL] import os [EOL] import atexit [EOL] import subprocess [EOL] import json [EOL] from bson import ObjectId , json_util [EOL] [EOL] USER_KEYS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] uri = [string] [EOL] mongod = subprocess . Popen ( [string] , stdout = subprocess . DEVNULL ) [EOL] [comment] [EOL] atexit . register ( mongod . kill ) [EOL] [EOL] [comment] [EOL] client = MongoClient ( uri ) [EOL] [comment] [EOL] db = client . get_database ( ) [EOL] [comment] [EOL] usuarios = db . usuarios [EOL] mensajes = db . mensajes [EOL] [EOL] dele = mensajes . delete_many ( { } ) [EOL] with open ( [string] , [string] , encoding = [string] ) as m : [EOL] file_data = json . load ( m ) [EOL] result = db . mensajes . insert_many ( file_data ) [EOL] m . close ( ) [EOL] [EOL] dele = usuarios . delete_many ( { } ) [EOL] with open ( [string] , [string] , encoding = [string] ) as u : [EOL] file_data = json . load ( u ) [EOL] result = db . usuarios . insert_many ( file_data ) [EOL] u . close ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Any [EOL] import typing [EOL] import io [EOL] import subprocess [EOL] from pymongo import MongoClient [EOL] import pandas as pd [EOL] import os [EOL] import atexit [EOL] import subprocess [EOL] import json [EOL] from bson import ObjectId , json_util [EOL] [EOL] USER_KEYS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] mongod = subprocess . Popen ( [string] , stdout = subprocess . DEVNULL ) [EOL] [comment] [EOL] atexit . register ( mongod . kill ) [EOL] [EOL] [comment] [EOL] client = MongoClient ( [string] ) [EOL] [comment] [EOL] db = client [ [string] ] [EOL] [comment] [EOL] usuarios = db . usuarios [EOL] df = pd . read_csv ( [string] , sep = [string] ) [EOL] records_ = df . to_dict ( orient = [string] ) [EOL] [EOL] dele = usuarios . delete_many ( { } ) [EOL] result = db . usuarios . insert_many ( records_ ) [EOL] [EOL] [EOL] [EOL] cursor = usuarios . find ( { } , { [string] : [number] } ) [EOL] file = open ( [string] , [string] , encoding = [string] ) [EOL] file . write ( [string] ) [EOL] [EOL] qnt_cursor = [number] [EOL] for document in cursor : [EOL] qnt_cursor += [number] [EOL] num_max = cursor . count ( ) [EOL] if ( num_max == [number] ) : [EOL] file . write ( json . dumps ( document , indent = [number] , default = json_util . default ) ) [EOL] elif ( num_max >= [number] and qnt_cursor <= num_max - [number] ) : [EOL] file . write ( json . dumps ( document , indent = [number] , default = json_util . default ) ) [EOL] file . write ( [string] ) [EOL] elif ( qnt_cursor == num_max ) : [EOL] file . write ( json . dumps ( document , indent = [number] , default = json_util . default ) ) [EOL] file . write ( [string] ) [EOL] file . close ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] with open ( [string] , [string] , encoding = [string] ) as file : [EOL] lines = file . readlines ( ) [EOL] [EOL] k = [number] [EOL] with open ( [string] , [string] , encoding = [string] ) as new_file : [EOL] for line in lines : [EOL] if [string] in line : [EOL] new_file . write ( [string] + line . strip ( ) + [string] ) [EOL] new_file . write ( [string] . format ( k ) ) [EOL] k += [number] [EOL] else : [EOL] new_file . write ( line ) [EOL] file . close ( ) [EOL] new_file . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Literal , Any , Dict [EOL] import typing [EOL] import typing_extensions [EOL] import flask [EOL] from flask import Flask , render_template , request , abort , json [EOL] from pymongo import MongoClient [EOL] import pandas as pd [EOL] import matplotlib . pyplot as plt [EOL] import os [EOL] import atexit [EOL] import subprocess [EOL] from datetime import datetime [EOL] [EOL] USER_KEYS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] MENSAJE_KEYS = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] uri = [string] [EOL] [comment] [EOL] client = MongoClient ( uri ) [EOL] [comment] [EOL] db = client . get_database ( ) [EOL] [comment] [EOL] usuarios = db . usuarios [EOL] mensajes = db . mensajes [EOL] [comment] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def home ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def plot ( ) : [EOL] [comment] [EOL] users = usuarios . find ( { } , { [string] : [number] } ) [EOL] [EOL] [comment] [EOL] df = pd . DataFrame ( list ( users ) ) . set_index ( [string] ) [EOL] [EOL] [comment] [EOL] df . plot . pie ( y = [string] ) [EOL] [EOL] [comment] [EOL] pth = os . path . join ( [string] , [string] ) [EOL] plt . savefig ( pth ) [EOL] [EOL] [comment] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_users ( ) : [EOL] resultados = [ u for u in usuarios . find ( { } , { [string] : [number] } ) ] [EOL] [comment] [EOL] [EOL] return render_template ( [string] , result = resultados ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_mensajes ( ) : [EOL] resultados = [ u for u in mensajes . find ( { } , { [string] : [number] } ) ] [EOL] [comment] [EOL] [EOL] return render_template ( [string] , result = resultados ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_mensajes_entre ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_user ( uid ) : [EOL] users = list ( usuarios . find ( { [string] : uid } , { [string] : [number] } ) ) [EOL] mens = list ( mensajes . find ( { [string] : uid } , { [string] : [number] } ) ) [EOL] return json . jsonify ( users + mens ) [EOL] [EOL] @ app . route ( [string] ) def get_inbox ( uid ) : [EOL] mens = list ( mensajes . find ( { [string] : uid } , { [string] : [number] } ) ) [EOL] return json . jsonify ( mens ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_mensajesentre ( ) : [EOL] uid1 , uid2 = int ( request . form [ [string] ] ) , int ( request . form [ [string] ] ) [EOL] user1 = list ( usuarios . find ( { [string] : uid1 } , { [string] : [number] } ) ) [EOL] user2 = list ( usuarios . find ( { [string] : uid2 } , { [string] : [number] } ) ) [EOL] mens1 = list ( mensajes . find ( { [string] : uid1 , [string] : uid2 } , { [string] : [number] } ) ) [EOL] mens2 = list ( mensajes . find ( { [string] : uid2 , [string] : uid1 } , { [string] : [number] } ) ) [EOL] res = mens1 + mens2 [EOL] return render_template ( [string] , result = res ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_mensaje ( ) : [EOL] cuenta = int ( mensajes . count_documents ( { } ) ) [EOL] numerin = cuenta [EOL] new_mens = { [string] : request . form [ [string] ] , [string] : int ( request . form [ [string] ] ) , [string] : int ( request . form [ [string] ] ) , [string] : float ( request . form [ [string] ] ) , [string] : float ( request . form [ [string] ] ) , [string] : str ( datetime . today ( ) ) . split ( ) [ [number] ] , [string] : numerin } [EOL] result = mensajes . insert_one ( new_mens ) [EOL] [comment] [EOL] if (result) : [EOL] message = [string] [EOL] success = True [EOL] else : [EOL] message = [string] [EOL] success = False [EOL] [comment] [EOL] return json . jsonify ( success ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def search_mensaje ( ) : [EOL] musts = request . form [ [string] ] . split ( [string] ) [EOL] maybes = request . form [ [string] ] . split ( [string] ) [EOL] notbes = request . form [ [string] ] . split ( [string] ) [EOL] pid = request . form [ [string] ] [EOL] query = [ ] [EOL] [comment] [EOL] if pid : [EOL] query . append ( { [string] : int ( pid ) } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( musts ) > [number] : [EOL] for each in musts : [EOL] if each != [string] : [EOL] query . append ( { [string] : { [string] : [string] . format ( each . strip ( ) ) } } ) [EOL] [comment] [EOL] if len ( notbes ) > [number] : [EOL] for each in notbes : [EOL] if each != [string] : [EOL] query . append ( { [string] : { [string] : [string] . format ( each . strip ( ) ) } } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( query ) > [number] : [EOL] resultados = [ u for u in mensajes . find ( { [string] : query } , { [string] : [number] } ) ] [EOL] elif len ( query ) == [number] : [EOL] resultados = [ u for u in mensajes . find ( query [ [number] ] , { [string] : [number] } ) ] [EOL] else : [EOL] resultados = [ u for u in mensajes . find ( { } , { [string] : [number] } ) ] [EOL] return render_template ( [string] , result = resultados ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def search_mensaje_json ( ) : [EOL] musts = request . form [ [string] ] . split ( [string] ) [EOL] maybes = request . form [ [string] ] . split ( [string] ) [EOL] notbes = request . form [ [string] ] . split ( [string] ) [EOL] pid = request . form [ [string] ] [EOL] query = [ ] [EOL] [comment] [EOL] if pid : [EOL] query . append ( { [string] : int ( pid ) } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( musts ) > [number] : [EOL] for each in musts : [EOL] if each != [string] : [EOL] query . append ( { [string] : { [string] : [string] . format ( each . strip ( ) ) } } ) [EOL] [comment] [EOL] if len ( notbes ) > [number] : [EOL] for each in notbes : [EOL] if each != [string] : [EOL] query . append ( { [string] : { [string] : [string] . format ( each . strip ( ) ) } } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( query ) > [number] : [EOL] resultados = [ u for u in mensajes . find ( { [string] : query } , { [string] : [number] } ) ] [EOL] elif len ( query ) == [number] : [EOL] resultados = [ u for u in mensajes . find ( query [ [number] ] , { [string] : [number] } ) ] [EOL] else : [EOL] resultados = [ u for u in mensajes . find ( { } , { [string] : [number] } ) ] [EOL] return json . jsonify ( resultados ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_mensaje ( ) : [EOL] mid = int ( request . form [ [string] ] ) [EOL] result = mensajes . delete_one ( { [string] : mid } ) [EOL] [EOL] message = f' [string] { mid } [string] ' if result . deleted_count > [number] \ [EOL] else f' [string] { mid } [string] ' [EOL] [comment] [EOL] return render_template ( [string] , deleted = result . deleted_count , success = True , message = message ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_search ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_create ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_delete ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_user ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] data = { key : request . json [ key ] for key in USER_KEYS } [EOL] [EOL] [comment] [EOL] count = usuarios . count_documents ( { } ) [EOL] data [ [string] ] = count + [number] [EOL] [EOL] [comment] [EOL] result = usuarios . insert_one ( data ) [EOL] [EOL] [comment] [EOL] if (result) : [EOL] message = [string] [EOL] success = True [EOL] else : [EOL] message = [string] [EOL] success = False [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : success , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_user ( uid ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] usuarios . delete_one ( { [string] : uid } ) [EOL] [EOL] message = f' [string] { uid } [string] ' [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : [string] , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_many_user ( ) : [EOL] [docstring] [EOL] [EOL] if not request . json : [EOL] [comment] [EOL] abort ( [number] ) [comment] [EOL] [EOL] all_uids = request . json [ [string] ] [EOL] [EOL] if not all_uids : [EOL] [comment] [EOL] abort ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] result = usuarios . delete_many ( { [string] : { [string] : all_uids } } ) [EOL] [EOL] [comment] [EOL] message = f'{ result . deleted_count } [string] ' [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : [string] , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def test ( ) : [EOL] [comment] [EOL] param = request . args . get ( [string] , False ) [EOL] print ( [string] , param ) [EOL] [EOL] [comment] [EOL] param2 = request . headers . get ( [string] , False ) [EOL] print ( [string] , param2 ) [EOL] [EOL] [comment] [EOL] body = request . data [EOL] print ( [string] , body ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0