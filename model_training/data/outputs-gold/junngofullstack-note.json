from typing import List , Any [EOL] import typing [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] import django [EOL] django . setup ( ) [EOL] [EOL] import random [EOL] from first_app . models import AccessRecord , Webpage , Topic [EOL] from faker import Faker [EOL] [EOL] fakegen = Faker ( ) [EOL] topics = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def add_topic ( ) : [EOL] t = Topic . objects . get_or_create ( top_name = random . choice ( topics ) ) [ [number] ] [EOL] t . save ( ) [EOL] return t [EOL] [EOL] def populate ( N = [number] ) : [EOL] [EOL] for entry in range ( N ) : [EOL] [comment] [EOL] top = add_topic ( ) [EOL] [EOL] [comment] [EOL] fake_url = fakegen . url ( ) [EOL] fake_date = fakegen . date ( ) [EOL] fake_name = fakegen . company ( ) [EOL] [EOL] [comment] [EOL] webpg = Webpage . objects . get_or_create ( topic = top , url = fake_url , name = fake_name ) [ [number] ] [EOL] [EOL] [comment] [EOL] acc_rec = AccessRecord . objects . get_or_create ( name = webpg , date = fake_date ) [ [number] ] [EOL] [EOL] if __name__ == [string] : [EOL] print ( [string] ) [EOL] populate ( [number] ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
	0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Question , Choice [EOL] [EOL] [comment] [EOL] [EOL] admin . site . register ( Question ) [EOL] admin . site . register ( Choice )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . http import HttpResponse , HttpResponseRedirect [EOL] from django . template import loader [EOL] from . models import Question [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . urls import reverse [EOL] from django . views import generic [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class IndexView ( generic . ListView ) : [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return Question . objects . order_by ( [string] ) [ : [number] ] [EOL] [EOL] [EOL] class DetailView ( generic . DetailView ) : [EOL] model = Question [EOL] template_name = [string] [EOL] [EOL] [EOL] class ResultsView ( generic . DetailView ) : [EOL] model = Question [EOL] template_name = [string] [EOL] [EOL] [EOL] def vote ( request , question_id ) : [EOL] [comment] [EOL] question = get_object_or_404 ( Question , pk = question_id ) [EOL] try : [EOL] selected_choice = question . choice_set . get ( pk = request . POST [ [string] ] ) [EOL] except ( KeyError , Choice . DoesNotExist ) : [EOL] [comment] [EOL] return render ( request , [string] , { [string] : question , [string] : [string] , } ) [EOL] else : [EOL] selected_choice . votes += [number] [EOL] selected_choice . save ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return HttpResponseRedirect ( reverse ( [string] , args = ( question . id , ) ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.polls.polls.polls.views.DetailView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.polls.polls.polls.views.ResultsView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PollsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] from first_app . models import Topic , Webpage , AccessRecord [EOL] [comment] [EOL] [EOL] def index ( request ) : [EOL] weppgages_list = AccessRecord . objects . order_by ( [string] ) [EOL] date_dict = { [string] : weppgages_list } [EOL] my_dict = { [string] : [string] } [EOL] [comment] [EOL] return render ( request , [string] , context = date_dict ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] from first_app . models import AccessRecord , Topic , Webpage [EOL] [comment] [EOL] admin . site . register ( AccessRecord ) [EOL] admin . site . register ( Topic ) [EOL] admin . site . register ( Webpage ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from first_app import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . index , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class Topic ( models . Model ) : [EOL] top_name = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . top_name [EOL] [EOL] class Webpage ( models . Model ) : [EOL] topic = models . ForeignKey ( Topic ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] url = models . URLField ( unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class AccessRecord ( models . Model ) : [EOL] name = models . ForeignKey ( Webpage ) [EOL] date = models . DateField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . date ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.Webpage]$ 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.Webpage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.Webpage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.AccessRecord]$ 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.first_app.models.AccessRecord]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FirstAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url , include [EOL] from django . contrib import admin [EOL] from basic_app import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . index , name = [string] ) , url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] ) ) , url ( [string] , views . user_logout , name = [string] ) , url ( [string] , views . special , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BasicAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import render [EOL] from basic_app . forms import UserForm , UserProfileInfoForm [EOL] [EOL] [comment] [EOL] from django . contrib . auth import authenticate , login , logout [EOL] from django . http import HttpResponseRedirect , HttpResponse [EOL] from django . core . urlresolvers import reverse [EOL] from django . contrib . auth . decorators import login_required [EOL] [EOL] [comment] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] @ login_required def special ( request ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] @ login_required def user_logout ( request ) : [EOL] logout ( request ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] [EOL] def register ( request ) : [EOL] registered = False [EOL] [EOL] if request . method == [string] : [EOL] user_form = UserForm ( data = request . POST ) [EOL] profile_form = UserProfileInfoForm ( data = request . POST ) [EOL] [EOL] if user_form . is_valid ( ) and profile_form . is_valid ( ) : [EOL] user = user_form . save ( ) [EOL] user . set_password ( user . password ) [EOL] user . save ( ) [EOL] [EOL] profile = profile_form . save ( commit = False ) [EOL] profile . user = user [EOL] [EOL] if [string] in request . FILES : [EOL] profile . profile_pic = request . FILES [ [string] ] [EOL] [EOL] profile . save ( ) [EOL] [EOL] registered = True [EOL] else : [EOL] print ( user_form . errors , profile_form . errors ) [EOL] else : [EOL] user_form = UserForm ( ) [EOL] profile_form = UserProfileInfoForm ( ) [EOL] [EOL] return render ( request , [string] , { [string] : user_form , [string] : profile_form , [string] : registered } ) [EOL] [EOL] def user_login ( request ) : [EOL] [EOL] if request . method == [string] : [EOL] username = request . POST . get ( [string] ) [EOL] password = request . POST . get ( [string] ) [EOL] [EOL] user = authenticate ( username = username , password = password ) [EOL] [EOL] if user : [EOL] if user . is_active : [EOL] login ( request , user ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] print ( [string] . format ( username , password ) ) [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] return render ( request , [string] , { } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from basic_app . models import UserProfileInfo , User [EOL] [EOL] [comment] [EOL] admin . site . register ( UserProfileInfo ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from basic_app import views [EOL] [EOL] [comment] [EOL] app_name = [string] [EOL] urlpatterns = [ url ( [string] , views . register , name = [string] ) , url ( [string] , views . user_login , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import fullstack_stuff [EOL] from django import forms [EOL] from django . contrib . auth . models import User [EOL] from basic_app . models import UserProfileInfo [EOL] [EOL] class UserForm ( forms . ModelForm ) : [EOL] password = forms . CharField ( widget = forms . PasswordInput ( ) ) [EOL] [EOL] class Meta ( ) : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] class UserProfileInfoForm ( forms . ModelForm ) : [EOL] class Meta ( ) : [EOL] model = UserProfileInfo [EOL] fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.learning_users.basic_app.forms.UserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.learning_users.basic_app.forms.UserProfileInfoForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.learning_users.basic_app.forms.UserProfileInfoForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url , include [EOL] from django . contrib import admin [EOL] from basic_app import views [EOL] [EOL] urlpatterns = [ url ( [string] , admin . site . urls , name = [string] ) , url ( [string] , views . IndexView . as_view ( ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . db import models [EOL] from django . core . urlresolvers import reverse [EOL] [EOL] [comment] [EOL] class School ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] principal = models . CharField ( max_length = [number] ) [EOL] location = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . pk } ) [EOL] [EOL] class Student ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] age = models . PositiveIntegerField ( ) [EOL] school = models . ForeignKey ( School , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.Student]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.Student]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.Student]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from basic_app . models import School , Student [EOL] [comment] [EOL] admin . site . register ( School ) [EOL] admin . site . register ( Student ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , Any [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . shortcuts import render [EOL] from django . core . urlresolvers import reverse_lazy [EOL] from django . http import HttpResponse [EOL] from django . views . generic import ( View , TemplateView , ListView , DetailView , CreateView , DeleteView , UpdateView ) [EOL] from . import models [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] class IndexView ( TemplateView ) : [EOL] [comment] [EOL] [comment] [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = [string] [EOL] return context [EOL] [EOL] class SchoolListView ( ListView ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] model = models . School [EOL] [EOL] [EOL] class SchoolDetailView ( DetailView ) : [EOL] context_object_name = [string] [EOL] model = models . School [EOL] template_name = [string] [EOL] [EOL] [EOL] class SchoolCreateView ( CreateView ) : [EOL] fields = ( [string] , [string] , [string] ) [EOL] model = models . School [EOL] [EOL] [EOL] class SchoolUpdateView ( UpdateView ) : [EOL] fields = ( [string] , [string] ) [EOL] model = models . School [EOL] [EOL] [EOL] class SchoolDeleteView ( DeleteView ) : [EOL] model = models . School [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class CBView ( View ) : [EOL] def get ( self , request ) : [EOL] return HttpResponse ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.models.School]$ 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.advcbv.basic_app.views.SchoolDeleteView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BasicAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] import django [EOL] django . setup ( ) [EOL] [EOL] from appTwo . models import User [EOL] from faker import Faker [EOL] [EOL] fakegen = Faker ( ) [EOL] [EOL] def populate ( N = [number] ) : [EOL] for entry in range ( N ) : [EOL] fake_name = fakegen . name ( ) . split ( ) [EOL] fake_first_name = fake_name [ [number] ] [EOL] fake_last_name = fake_name [ [number] ] [EOL] fake_email = fakegen . email ( ) [EOL] [EOL] [comment] [EOL] user = User . objects . get_or_create ( first_name = fake_first_name , last_name = fake_last_name , email = fake_email ) [ [number] ] [EOL] [EOL] if __name__ == [string] : [EOL] print ( [string] ) [EOL] populate ( [number] ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from appTwo . models import User [EOL] [comment] [EOL] admin . site . register ( User ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApptwoConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [comment] [EOL] from appTwo . forms import NewUserForm [EOL] [comment] [EOL] [EOL] def index ( request ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] def help ( request ) : [EOL] helpdict = { [string] : [string] } [EOL] return render ( request , [string] , context = helpdict ) [EOL] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def users ( request ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] form = NewUserForm ( ) [EOL] [EOL] if request . method == [string] : [EOL] form = NewUserForm ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] form . save ( commit = True ) [EOL] return index ( request ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class User ( models . Model ) : [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( max_length = [number] , unique = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.ProTwo.appTwo.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.ProTwo.appTwo.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.ProTwo.appTwo.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from appTwo import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . help , name = [string] ) , url ( [string] , views . users , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import fullstack_stuff [EOL] from django import forms [EOL] from appTwo . models import User [EOL] [EOL] class NewUserForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.ProTwo.appTwo.forms.NewUserForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from blog import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . PostListView . as_view ( ) , name = [string] ) , url ( [string] , views . AboutView . as_view ( ) , name = [string] ) , url ( [string] , views . PostDetailView . as_view ( ) , name = [string] ) , url ( [string] , views . CreatePostView . as_view ( ) , name = [string] ) , url ( [string] , views . PostUpdateView . as_view ( ) , name = [string] ) , url ( [string] , views . DraftListView . as_view ( ) , name = [string] ) , url ( [string] , views . PostDeleteView . as_view ( ) , name = [string] ) , url ( [string] , views . post_publish , name = [string] ) , url ( [string] , views . add_comment_to_post , name = [string] ) , url ( [string] , views . comment_approve , name = [string] ) , url ( [string] , views . comment_remove , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . shortcuts import render , get_object_or_404 , redirect [EOL] from django . utils import timezone [EOL] from blog . models import Post , Comment [EOL] from blog . forms import PostForm , CommentForm [EOL] from django . urls import reverse_lazy [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . views . generic import ( TemplateView , ListView , DetailView , CreateView , UpdateView , DeleteView ) [EOL] [comment] [EOL] [EOL] class AboutView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] class PostListView ( ListView ) : [EOL] model = Post [EOL] [EOL] def get_queryset ( self ) : [EOL] return Post . objects . filter ( published_date__lte = timezone . now ( ) ) . order_by ( [string] ) [EOL] [EOL] class PostDetailView ( DetailView ) : [EOL] model = Post [EOL] [EOL] class CreatePostView ( LoginRequiredMixin , CreateView ) : [EOL] login_url = [string] [EOL] redirect_field_name = [string] [EOL] form_class = PostForm [EOL] model = Post [EOL] [EOL] class PostUpdateView ( LoginRequiredMixin , UpdateView ) : [EOL] login_url = [string] [EOL] redirect_field_name = [string] [EOL] form_class = PostForm [EOL] model = Post [EOL] [EOL] class PostDeleteView ( LoginRequiredMixin , DeleteView ) : [EOL] model = Post [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] class DraftListView ( LoginRequiredMixin , ListView ) : [EOL] login_url = [string] [EOL] redirect_field_name = [string] [EOL] [EOL] model = Post [EOL] [EOL] def get_queryset ( self ) : [EOL] return Post . objects . filter ( published_date__isnull = True ) . order_by ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ login_required def post_publish ( reqest , pk ) : [EOL] post = get_object_or_404 ( Post , pk = pk ) [EOL] post . publish [EOL] return redirect ( [string] , pk = pk ) [EOL] [EOL] @ login_required def add_comment_to_post ( request , pk ) : [EOL] post = get_object_or_404 ( Post , pk = pk ) [EOL] [EOL] if request . method == [string] : [EOL] form = CommentForm ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] comment = form . save ( commit = False ) [EOL] comment . post = post [EOL] comment . save ( ) [EOL] return redirect ( [string] , pk = post . pk ) [EOL] [EOL] else : [EOL] form = CommentForm ( ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] @ login_required def comment_approve ( request , pk ) : [EOL] comment = get_object_or_404 ( Comment , pk = pk ) [EOL] comment . approve ( ) [EOL] [EOL] return redirect ( [string] , pk = comment . post . pk ) [EOL] [EOL] @ login_required def comment_remove ( request , pk ) : [EOL] comment = get_object_or_404 ( Comment , pk = pk ) [EOL] post_pk = comment . post . pk [EOL] comment . delete ( ) [EOL] return redirect ( [string] , pk = post_pk ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostListView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.CreatePostView]$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.CreatePostView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostUpdateView]$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostUpdateView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostDeleteView]$ 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.PostDeleteView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.views.DraftListView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from blog . models import Post , Comment [EOL] [comment] [EOL] [EOL] admin . site . register ( Post ) [EOL] admin . site . register ( Comment ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple [EOL] import typing [EOL] import fullstack_stuff [EOL] from django import forms [EOL] from blog . models import Post , Comment [EOL] [EOL] class PostForm ( forms . ModelForm ) : [EOL] [EOL] class Meta ( ) : [EOL] model = Post [EOL] fields = ( [string] , [string] , [string] , ) [EOL] [EOL] widgets = { [string] : forms . TextInput ( attrs = { [string] : [string] } ) , [string] : forms . Textarea ( attrs = { [string] : [string] } ) , } [EOL] [EOL] class CommentForm ( forms . ModelForm ) : [EOL] [EOL] class Meta ( ) : [EOL] model = Comment [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] widgets = { [string] : forms . TextInput ( attrs = { [string] : [string] } ) , [string] : forms . Textarea ( attrs = { [string] : [string] } ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import fullstack_stuff [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] from django . core . urlresolvers import reverse [EOL] [comment] [EOL] [EOL] class Post ( models . Model ) : [EOL] author = models . ForeignKey ( [string] ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] text = models . TextField ( ) [EOL] created_date = models . DateTimeField ( default = timezone . now ( ) ) [EOL] published_date = models . DateTimeField ( blank = True , null = True ) [EOL] [EOL] def publish ( self ) : [EOL] self . published_date = timezone . now ( ) [EOL] self . save ( ) [EOL] [EOL] def approve_comments ( self ) : [EOL] return self . comments . filter ( approved_comment = True ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . pk } ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] class Comment ( models . Model ) : [EOL] post = models . ForeignKey ( [string] , related_name = [string] ) [EOL] author = models . CharField ( max_length = [number] ) [EOL] text = models . TextField ( ) [EOL] create_date = models . DateTimeField ( default = timezone . now ( ) ) [EOL] approved_comment = models . BooleanField ( default = False ) [EOL] [EOL] def approve ( self ) : [EOL] self . approved_comment = True [EOL] self . save ( ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Post]$ 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Post]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Comment]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.mysite.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] import datetime [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] from django . utils . timezone import utc [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . DateTimeField ( default = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = utc ) ) ) , ( [string] , models . BooleanField ( default = False ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . DateTimeField ( default = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = utc ) ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url , include [EOL] from django . contrib import admin [EOL] from django . contrib . auth import views [EOL] [EOL] urlpatterns = [ url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] ) ) , url ( [string] , views . login , name = [string] ) , url ( [string] , views . logout , name = [string] , kwargs = { [string] : [string] } ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url , include [EOL] from django . contrib import admin [EOL] from basic_app import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . index , name = [string] ) , url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Union [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] def index ( request ) : [EOL] context_dict = { [string] : [string] , [string] : [number] } [EOL] return render ( request , [string] , context_dict ) [EOL] [EOL] def other ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def relative ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from basic_app import views [EOL] [EOL] [comment] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , views . relative , name = [string] ) , url ( [string] , views . other , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BasicAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . library ( ) [EOL] [EOL] @ register . filter ( name = [string] ) def cut ( value , arg ) : [EOL] [docstring] [EOL] return value . replace ( arg , [string] ) [EOL] [EOL] register . filter ( [string] , cut ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[EOL]	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import fullstack_stuff [EOL] from django . shortcuts import render [EOL] from . import forms [EOL] [comment] [EOL] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def form_name_view ( request ) : [EOL] form = forms . FormName ( ) [EOL] [EOL] if request . method == [string] : [EOL] form = forms . FormName ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( [string] + form . cleaned_data [ [string] ] ) [EOL] print ( [string] + form . cleaned_data [ [string] ] ) [EOL] print ( [string] + form . cleaned_data [ [string] ] ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BasicappConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import fullstack_stuff [EOL] from django import forms [EOL] from django . core import validators [EOL] [EOL] def check_for_z ( value ) : [EOL] if value [ [number] ] . lower ( ) != [string] : [EOL] raise forms . ValidationError ( [string] ) [EOL] [EOL] [EOL] class FormName ( forms . Form ) : [EOL] [comment] [EOL] name = forms . CharField ( ) [EOL] email = forms . EmailField ( ) [EOL] verify_email = forms . EmailField ( label = [string] ) [EOL] text = forms . CharField ( widget = forms . Textarea ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def clean ( self ) : [EOL] all_clean_data = super ( ) . clean ( ) [EOL] email = all_clean_data [ [string] ] [EOL] vmail = all_clean_data [ [string] ] [EOL] [EOL] if email != vmail : [EOL] raise forms . ValidationError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.basicform.basicapp.forms.FormName]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.basicform.basicapp.forms.FormName]$ 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.basicform.basicapp.forms.FormName]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[fullstack_stuff.django_stuff.basicform.basicapp.forms.FormName]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url [EOL] from django . contrib import admin [EOL] from django . conf . urls import include [EOL] from first_app import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . index , name = [string] ) , url ( [string] , include ( [string] ) ) , url ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0