from typing import Any [EOL] import typing [EOL] import aiohttp [EOL] from multidict import CIMultiDict [EOL] from bs4 import BeautifulSoup [EOL] from src . html_processing import prepare_html , rewrite_url [EOL] from aiohttp import web , RequestInfo [EOL] [EOL] [EOL] async def process_text ( request , remote_response , response_headers ) : [EOL] response_headers . popone ( [string] , [string] ) [EOL] response_headers . popone ( [string] , [string] ) [EOL] text = await remote_response . text ( ) [EOL] processed_html = prepare_html ( text ) [EOL] return web . Response ( status = remote_response . status , text = processed_html , headers = response_headers , ) [EOL] [EOL] [EOL] async def process_binary ( request , remote_response , response_headers ) : [EOL] response_headers . popone ( [string] , [string] ) [EOL] response = aiohttp . web . StreamResponse ( status = remote_response . status , headers = response_headers , ) [EOL] await response . prepare ( request ) [EOL] try : [EOL] while True : [EOL] chunk = await remote_response . content . read ( [number] ) [EOL] if not chunk : [EOL] break [EOL] await response . write ( chunk ) [EOL] except Exception as e : [EOL] print ( e . args ) [EOL] return response [EOL] [EOL] [EOL] async def handle ( request ) : [EOL] async with aiohttp . ClientSession ( ) as session : [EOL] new_url = rewrite_url ( str ( request . url ) , [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] , ) [EOL] request_headers = request . headers . copy ( ) [EOL] request_headers [ [string] ] = [string] [EOL] async with session . get ( new_url ) as habr_resp : [EOL] response_headers = habr_resp . headers . copy ( ) [EOL] content_type = response_headers . getone ( [string] , [string] ) . split ( [string] ) [ [number] ] [EOL] if content_type == [string] : [EOL] return await process_text ( request , habr_resp , response_headers , ) [EOL] else : [EOL] return await process_binary ( request , habr_resp , response_headers , ) [EOL] [EOL] [EOL] app = web . Application ( ) [EOL] app . add_routes ( [ web . get ( [string] , handle ) , ] ) [EOL] [EOL] web . run_app ( app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
from typing import Any , List , Pattern , Dict [EOL] import builtins [EOL] import typing [EOL] import urllib [EOL] import re [EOL] from typing import List , Dict [EOL] from urllib . parse import urlparse [EOL] from bs4 import BeautifulSoup [EOL] from bs4 . element import NavigableString [EOL] [EOL] [EOL] SIX_CHARACTER_WORD = re . compile ( [string] ) [EOL] [EOL] TAGS_WITH_LINKS = { [string] : [string] , [string] : [string] , } [EOL] [EOL] TAGS_PROTECTED_FROM_SUBSTITUTION = [ [string] , [string] ] [EOL] [EOL] LINK_TRANSLATIONS = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] [EOL] [EOL] TM_SYMBOL = [string] [EOL] [EOL] [EOL] def prepare_html ( text , link_translations = LINK_TRANSLATIONS , tags_with_links = TAGS_WITH_LINKS , tags_protected_from_substitution = TAGS_PROTECTED_FROM_SUBSTITUTION ) : [EOL] [docstring] [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] for tag , attr in tags_with_links . items ( ) : [EOL] page_tags = soup . find_all ( tag ) [EOL] for page_tag in page_tags : [EOL] attr_value = page_tag . get ( attr ) [EOL] if attr_value is not None : [EOL] new_url = rewrite_url ( attr_value , link_translations ) [EOL] page_tag [ attr ] = new_url [EOL] body_tags = soup . find_all ( [string] ) [EOL] if len ( body_tags ) > [number] : [EOL] body = body_tags [ [number] ] [EOL] text_nodes = [ ] [EOL] for tag in body . descendants : [EOL] if isinstance ( tag , NavigableString ) and tag . parent . name not in tags_protected_from_substitution : [comment] [EOL] text_nodes . append ( tag ) [EOL] for text_node in text_nodes : [EOL] text_node . replace_with ( convert_six_length_words ( str ( text_node ) ) ) [EOL] return str ( soup ) [EOL] [EOL] [EOL] def rewrite_url ( url , link_translations , ) : [EOL] o = urlparse ( url ) [EOL] scheme = o . scheme [EOL] netloc = o . netloc [EOL] for link in link_translations : [EOL] if o . scheme == link [ [string] ] and o . netloc == link [ [string] ] : [EOL] scheme = link [ [string] ] [EOL] netloc = link [ [string] ] [EOL] break [EOL] path = o . path [EOL] params = o . params [EOL] if o . query == [string] : [EOL] query = [string] [EOL] else : [EOL] query = [string] . format ( o . query ) [EOL] if o . fragment == [string] : [EOL] fragment = [string] [EOL] else : [EOL] fragment = [string] . format ( o . fragment ) [EOL] return [string] . format ( scheme = scheme , netloc = netloc , path = path , params = params , query = query , fragment = fragment , ) [EOL] [EOL] [EOL] def convert_six_length_words ( text ) : [EOL] word_list = text . split ( [string] ) [EOL] for idx , word in enumerate ( word_list ) : [EOL] if len ( word ) == [number] and SIX_CHARACTER_WORD . match ( word ) : [EOL] word_list [ idx ] = [string] . format ( word = word , symbol = TM_SYMBOL , ) [EOL] return [string] . join ( word_list ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
from src . html_processing import rewrite_url , LINK_TRANSLATIONS [EOL] [EOL] [EOL] def test_rewrite_url ( ) : [EOL] new_url = rewrite_url ( [string] , LINK_TRANSLATIONS , ) [EOL] assert new_url == [string] [EOL] [comment] [EOL] new_url = rewrite_url ( [string] , LINK_TRANSLATIONS , ) [EOL] assert new_url == [string] [EOL] [comment] [EOL] new_url = rewrite_url ( [string] , LINK_TRANSLATIONS , ) [EOL] assert new_url == [string] [EOL] [comment] [EOL] new_url = rewrite_url ( [string] , LINK_TRANSLATIONS , ) [EOL] assert new_url == [string] [EOL] [comment] [EOL] new_url = rewrite_url ( [string] , LINK_TRANSLATIONS , ) [EOL] assert new_url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import re [EOL] from src . html_processing import convert_six_length_words , TM_SYMBOL [EOL] [EOL] [EOL] def test_convert_six_length_words ( ) : [EOL] res = convert_six_length_words ( [string] ) [EOL] assert res == [string] . format ( TM_SYMBOL , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from src . html_processing import prepare_html , TM_SYMBOL [EOL] [EOL] [EOL] def test_html_not_processed ( ) : [EOL] text = [string] [EOL] result = prepare_html ( text ) [EOL] assert result == text [EOL] [EOL] [EOL] def test_html_with_single_tag ( ) : [EOL] result = prepare_html ( [string] ) [EOL] assert result == [string] [EOL] [EOL] [EOL] def test_html_processed ( ) : [EOL] result = prepare_html ( [string] ) [EOL] assert result == [string] . format ( symbol = TM_SYMBOL , ) [EOL] [EOL] [EOL] def test_links_converting ( ) : [EOL] result = prepare_html ( [string] ) [comment] [EOL] assert result == [string] [comment] [EOL] [EOL] [EOL] def test_use_converting ( ) : [EOL] result = prepare_html ( [string] ) [comment] [EOL] assert result == [string] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0