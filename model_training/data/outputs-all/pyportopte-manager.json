from typing import Tuple , List [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import dotenv [EOL] [EOL] dotenv . load_dotenv ( dotenv . find_dotenv ( ) ) [EOL] [EOL] MODEL_STORAGE_ROOT = [string] [EOL] MEETUP_API_KEY = os . environ [ [string] ] [EOL] EVENTBRITE_API_TOKEN = os . environ [ [string] ] [EOL] [EOL] GCAL_ID = [string] [EOL] MISC_GCAL_ID = [string] [EOL] GCAL_OAUTH_REDIRECT_URI = [string] [EOL] GCAL_OAUTH_CLIENT_ID = os . environ [ [string] ] [EOL] GCAL_OAUTH_CLIENT_SECRET = os . environ [ [string] ] [EOL] GCAL_OAUTH_REFRESH_TOKEN_FILE = [string] [EOL] [EOL] [comment] [EOL] FACEBOOK_PAGES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MEETUP_COMMUNITIES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] ICAL_FEEDS = [ ( [string] , [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sh [EOL] from pte import settings [EOL] [EOL] [EOL] git = sh . git . bake ( _cwd = settings . MODEL_STORAGE_ROOT ) [EOL] [EOL] [EOL] def commit ( message = [string] ) : [EOL] git . add ( [string] , [string] , [string] ) [EOL] ret = git . status ( [string] , [string] , [string] , [string] ) [EOL] if ret . strip ( ) : [EOL] git . commit ( message = message ) [EOL] [EOL] [EOL] def push ( ) : [EOL] git . push ( ) [EOL] [EOL] [EOL] def status ( ) : [EOL] print ( git . status ( [string] , [string] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Iterator , Dict [EOL] import builtins [EOL] import typing [EOL] import os [EOL] import json [EOL] import datetime [EOL] from dataclasses import dataclass , field , asdict [EOL] from pte import settings [EOL] from typing import Iterator , List , Text [EOL] [EOL] from pte . utils import get_date [EOL] [EOL] [EOL] @ dataclass class GenericEvent : [EOL] [docstring] [EOL] id = ... [EOL] url = ... [EOL] name = ... [EOL] description = ... [EOL] start_date = ... [EOL] end_date = ... [EOL] location = None [EOL] rrule = None [EOL] relevant = True [EOL] model_root = field ( init = False ) [EOL] [EOL] def get_description ( self ) : [EOL] return [string] . join ( self . description ) [EOL] [EOL] def get_dict ( self ) : [EOL] ret = asdict ( self ) [EOL] ret . pop ( [string] ) [EOL] ret . pop ( [string] ) [EOL] ret [ [string] ] = ret [ [string] ] . strftime ( [string] ) [EOL] ret [ [string] ] = ret [ [string] ] . strftime ( [string] ) [EOL] if self . relevant : [EOL] ret . pop ( [string] ) [EOL] return ret [EOL] [EOL] def save ( self ) : [EOL] filename = self . get_filename ( ) [EOL] os . makedirs ( os . path . dirname ( filename ) , exist_ok = True ) [EOL] with open ( filename , [string] ) as fd : [EOL] json . dump ( self . get_dict ( ) , fd , indent = [number] , sort_keys = True ) [EOL] [EOL] def get_filename ( self ) : [EOL] return os . path . join ( self . get_model_root ( ) , self . id + [string] ) [EOL] [EOL] @ classmethod def get_by_id ( cls , event_id ) : [EOL] full_filename = os . path . join ( cls . get_model_root ( ) , event_id + [string] ) [EOL] if os . path . isfile ( full_filename ) : [EOL] return cls . _read_from_file ( full_filename ) [EOL] [EOL] @ classmethod def get_all ( cls ) : [EOL] for filename in os . listdir ( cls . get_model_root ( ) ) : [EOL] if not filename . endswith ( [string] ) : [EOL] continue [EOL] ev_id , _ = os . path . splitext ( filename ) [EOL] yield cls . get_by_id ( ev_id ) [EOL] [EOL] @ classmethod def get_model_root ( cls ) : [EOL] return os . path . join ( settings . MODEL_STORAGE_ROOT , cls . model_root ) [EOL] [EOL] @ classmethod def _read_from_file ( cls , filename ) : [EOL] event_id = os . path . basename ( filename ) [EOL] event_id , _ = os . path . splitext ( event_id ) [EOL] with open ( filename ) as fd : [EOL] ev = json . load ( fd ) [EOL] ev [ [string] ] = event_id [EOL] ev [ [string] ] = get_date ( ev [ [string] ] ) [EOL] ev [ [string] ] = get_date ( ev [ [string] ] ) [EOL] return cls ( ** ev ) [EOL] [EOL] [EOL] class Event ( GenericEvent ) : [EOL] model_root = [string] [EOL] [EOL] [EOL] class MiscEvent ( GenericEvent ) : [EOL] model_root = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Text$ 0 0 0 $typing.Text$ 0 0 0 $typing.Text$ 0 0 0 $typing.List[typing.Text]$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Iterator[GenericEvent]'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'GenericEvent'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] import logging [EOL] import colorlog [EOL] [EOL] [EOL] def get_date ( s ) : [EOL] [docstring] [EOL] return datetime . datetime . strptime ( s , [string] ) . date ( ) [EOL] [EOL] [EOL] def configure_logging ( log_level = [string] ) : [EOL] fmt = [string] [EOL] handler = colorlog . StreamHandler ( ) [EOL] handler . setFormatter ( colorlog . ColoredFormatter ( fmt ) ) [EOL] logging . basicConfig ( level = log_level , format = fmt , handlers = [ handler ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import requests [EOL] import typing [EOL] import requests [EOL] from pte import settings [EOL] [EOL] [EOL] def get_access_token ( ) : [EOL] url = [string] [EOL] data = { [string] : get_refresh_token ( ) , [string] : settings . GCAL_OAUTH_CLIENT_ID , [string] : settings . GCAL_OAUTH_CLIENT_SECRET , [string] : [string] , } [EOL] resp = requests . post ( url , data = data ) [EOL] resp . raise_for_status ( ) [EOL] return resp . json ( ) [ [string] ] [EOL] [EOL] [EOL] def get_refresh_token ( ) : [EOL] with open ( settings . GCAL_OAUTH_REFRESH_TOKEN_FILE ) as fd : [EOL] return fd . read ( ) . strip ( ) [EOL] [EOL] [EOL] def set_refresh_token ( token ) : [EOL] with open ( settings . GCAL_OAUTH_REFRESH_TOKEN_FILE , [string] ) as fd : [EOL] fd . write ( token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any , Dict [EOL] import requests [EOL] import typing [EOL] import threading [EOL] import flask [EOL] import os [EOL] import base64 [EOL] from urllib . parse import urlencode [EOL] import flask [EOL] import requests [EOL] from pte import settings [EOL] from pte . gcal . access import set_refresh_token [EOL] [EOL] [EOL] app = flask . Flask ( __name__ ) [EOL] state = None [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] global state [EOL] state = base64 . b64encode ( os . urandom ( [number] ) ) . decode ( [string] ) [EOL] url = [string] [EOL] oauth_scope = [string] [EOL] params = { [string] : settings . GCAL_OAUTH_CLIENT_ID , [string] : settings . GCAL_OAUTH_REDIRECT_URI , [string] : oauth_scope , [string] : [string] , [string] : state , [string] : [string] , [string] : [string] , } [EOL] full_url = f'{ url } [string] { urlencode ( params ) }' [EOL] return flask . redirect ( full_url ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def redirect ( ) : [EOL] auth_code = flask . request . args . get ( [string] ) [EOL] resp_state = flask . request . args . get ( [string] ) [EOL] if auth_code is None : [EOL] return flask . abort ( [number] ) [EOL] if state is None or resp_state != state : [EOL] return flask . abort ( [number] ) [EOL] [EOL] url = [string] [EOL] data = { [string] : auth_code , [string] : settings . GCAL_OAUTH_CLIENT_ID , [string] : settings . GCAL_OAUTH_CLIENT_SECRET , [string] : settings . GCAL_OAUTH_REDIRECT_URI , [string] : [string] , } [EOL] [EOL] resp = requests . post ( url , data = data ) [EOL] if resp . status_code != [number] : [EOL] return resp . text , [string] [EOL] [EOL] set_refresh_token ( resp . json ( ) [ [string] ] ) [EOL] return [string] [EOL] [EOL] [EOL] def open_browser ( ) : [EOL] import threading [EOL] [EOL] def _target ( ) : [EOL] import time [EOL] import webbrowser [EOL] print ( [string] , end = [string] ) [EOL] time . sleep ( [number] ) [EOL] webbrowser . open ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] th = threading . Thread ( target = _target ) [EOL] th . start ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] open_browser ( ) [EOL] app . run ( [string] , [number] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0