from typing import Tuple , Union , List , Any , Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import json [EOL] import pydoc [EOL] import shlex [EOL] import inspect [EOL] from random import randint [EOL] from urllib import request [EOL] from pathlib import Path [EOL] from getpass import getpass [EOL] from tempfile import TemporaryDirectory [EOL] from contextlib import contextmanager [EOL] [EOL] from invoke import task , Program , Collection [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] TWINE_CMD = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ contextmanager def _cd ( path ) : [EOL] [docstring] [EOL] path = Path ( path ) [EOL] cwd = Path . cwd ( ) [EOL] os . chdir ( path ) [EOL] try : [EOL] yield path [EOL] finally : [EOL] os . chdir ( cwd ) [EOL] [EOL] [EOL] def _documentation ( inv ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] doc = Path ( [string] ) . read_text ( ) + [string] [EOL] [EOL] [comment] [EOL] assert doc . count ( [string] ) == [number] [EOL] doc = doc . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] import npmenv [EOL] doc += f" [string] { npmenv . HELP } [string] " [EOL] [EOL] [comment] [EOL] doc += [string] [EOL] for name , value in inspect . getmembers ( npmenv ) : [EOL] [comment] [EOL] [comment] [EOL] if getattr ( value , [string] , None ) != [string] : [EOL] continue [EOL] [comment] [EOL] if name . startswith ( [string] ) : [EOL] continue [EOL] [comment] [EOL] if name == [string] : [EOL] exc_doc = value . __doc__ . strip ( ) [EOL] doc += f' [string] { exc_doc } [string] ' [EOL] continue [EOL] [comment] [EOL] doc += pydoc . plaintext . document ( value ) + [string] [EOL] [EOL] [comment] [EOL] doc += [string] [EOL] [EOL] [comment] [EOL] versions_cmd = [string] [EOL] history = inv . run ( versions_cmd , hide = [string] ) . stdout [EOL] doc += f' [string] { history } [string] ' [EOL] [EOL] [comment] [EOL] return doc [EOL] [EOL] [EOL] def _get_ci_status ( commit ) : [EOL] [docstring] [EOL] url = f' [string] { commit } [string] ' [EOL] headers = { [string] : [string] } [EOL] resp = request . urlopen ( request . Request ( url , headers = headers ) ) [EOL] state = json . loads ( resp . read ( ) . decode ( ) ) [ [string] ] [EOL] return None if state == [string] else state == [string] [EOL] [EOL] [EOL] def _get_new_version ( last_str ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if not last_str : [EOL] print ( [string] ) [EOL] version = input ( [string] ) [EOL] assert len ( version . split ( [string] ) ) == [number] [EOL] return version [EOL] [EOL] [comment] [EOL] print ( f" [string] { last_str }" ) [EOL] [EOL] [comment] [EOL] last_digits = tuple ( int ( n ) for n in last_str . split ( [string] ) ) [EOL] assert len ( last_digits ) == [number] [EOL] [EOL] [comment] [EOL] while True : [EOL] digits = list ( last_digits ) [EOL] [EOL] [comment] [EOL] levels = ( [string] , [string] , [string] ) [EOL] level = input ( f" [string] { [string] . join ( levels ) } [string] " ) [EOL] if level not in levels : [EOL] print ( [string] ) [EOL] continue [EOL] digits [ levels . index ( level ) ] += [number] [EOL] [comment] [EOL] if level != [string] : [EOL] digits [ [number] ] = [number] [EOL] if level == [string] : [EOL] digits [ [number] ] = [number] [EOL] [comment] [EOL] version = [string] . join ( str ( n ) for n in digits ) [EOL] [EOL] [comment] [EOL] if input ( f" [string] { version } [string] " ) == [string] : [EOL] return version [EOL] [EOL] [EOL] @ contextmanager def _set_version_in_module ( version ) : [EOL] [docstring] [EOL] path = Path ( [string] ) [EOL] original = path . read_text ( ) [EOL] version_line_old = [string] [EOL] version_line_new = f" [string] { version } [string] " [EOL] versioned = original . replace ( version_line_old , version_line_new , [number] ) [EOL] assert version_line_new in versioned [EOL] path . write_text ( versioned ) [EOL] try : [EOL] yield [EOL] finally : [EOL] path . write_text ( original ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ task def test ( inv , python = None ) : [EOL] [docstring] [EOL] if python : [EOL] [comment] [EOL] [comment] [EOL] python = tuple ( int ( n ) for n in python . split ( [string] ) ) [EOL] if sys . version_info [ : len ( python ) ] != python : [EOL] sys . exit ( f" [string] { python } [string] { sys . version_info } [string] " ) [EOL] test_lint ( inv ) [EOL] test_unit ( inv ) [EOL] [EOL] [EOL] @ task def test_lint ( inv ) : [EOL] [docstring] [EOL] [comment] [EOL] inv . run ( [string] ) [EOL] for file in Path ( ) . glob ( [string] ) : [comment] [EOL] [comment] [EOL] module_args = [string] if file . stem == [string] else [string] [EOL] [comment] [EOL] mypy_args = [string] [EOL] inv . run ( f' [string] { mypy_args } [string] { module_args } [string] { file }' ) [EOL] [EOL] [EOL] @ task def test_unit ( inv , pdb = False , failed = False ) : [EOL] [docstring] [EOL] cmd = f' [string] ' [EOL] if pdb : [EOL] cmd += [string] [EOL] if failed : [EOL] cmd += [string] [comment] [EOL] inv . run ( f'{ cmd } [string] ' ) [EOL] [EOL] [EOL] @ task def doc ( inv ) : [EOL] [docstring] [EOL] print ( _documentation ( inv ) ) [EOL] [EOL] [EOL] @ task def package ( inv , version = None ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if not version : [EOL] version = inv . run ( [string] ) . stdout . strip ( ) [EOL] [EOL] [comment] [EOL] env_override = { [string] : version , [string] : [string] , } [EOL] [EOL] [comment] [EOL] for file in Path ( [string] ) . iterdir ( ) : [EOL] if file . suffix in ( [string] , [string] , [string] ) : [EOL] file . unlink ( ) [EOL] assert len ( list ( Path ( [string] ) . iterdir ( ) ) ) == [number] [EOL] [EOL] [comment] [EOL] with _set_version_in_module ( version ) : [EOL] inv . run ( [string] , env = env_override ) [EOL] [EOL] [comment] [EOL] inv . run ( [string] , env = env_override ) [EOL] inv . run ( [string] ) [EOL] [EOL] [comment] [EOL] assert len ( list ( Path ( [string] ) . iterdir ( ) ) ) == [number] [EOL] [EOL] [EOL] @ task def release ( inv ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] def git_out ( cmd ) : [EOL] result = inv . run ( f' [string] { cmd }' , warn = True , pty = False , hide = [string] ) [EOL] if result . failed : [EOL] return None [EOL] return result . stdout . strip ( ) [EOL] [EOL] [comment] [EOL] if git_out ( [string] ) : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] if git_out ( [string] ) != [string] : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] if git_out ( [string] ) : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] if git_out ( [string] ) : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] ci_status = _get_ci_status ( git_out ( [string] ) ) [EOL] if ci_status is None : [EOL] sys . exit ( [string] ) [EOL] if ci_status is False : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] last_version = git_out ( [string] ) [EOL] version = _get_new_version ( last_version ) [EOL] [EOL] [comment] [EOL] test_version = f'{ version } [string] { randint ( [number] , [number] ) }' [comment] [EOL] package ( inv , test_version ) [EOL] [EOL] [comment] [EOL] os . environ [ [string] ] = getpass ( [string] ) [EOL] inv . run ( TWINE_CMD + [string] ) [EOL] [EOL] [comment] [EOL] path_without_venv = os . environ [ [string] ] . split ( os . pathsep ) [EOL] assert [string] in path_without_venv [ [number] ] [EOL] del path_without_venv [ [number] ] [EOL] path_without_venv = os . pathsep . join ( path_without_venv ) [EOL] [EOL] [comment] [EOL] def sub_pipenv ( cmd , ** kwargs ) : [EOL] sub_env = { [string] : path_without_venv , [string] : [string] , [string] : [string] , } [EOL] return inv . run ( f' [string] { cmd }' , env = sub_env , ** kwargs ) [EOL] [EOL] [comment] [EOL] tests_path = Path ( [string] ) . resolve ( ) [EOL] with TemporaryDirectory ( ) as tmpdir : [EOL] [EOL] [comment] [EOL] tmpdir = Path ( tmpdir ) / [string] [EOL] tmpdir . mkdir ( ) [EOL] with _cd ( tmpdir ) : [EOL] [EOL] [comment] [EOL] import_npmenv = [string] [EOL] assert sub_pipenv ( import_npmenv , warn = True , hide = [string] ) . failed [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] install_args = [string] [EOL] install_cmd = f' [string] { test_version } [string] { install_args }' [EOL] while True : [EOL] if sub_pipenv ( install_cmd , warn = True ) . ok : [EOL] break [EOL] if input ( [string] ) != [string] : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] sub_pipenv ( import_npmenv ) [EOL] [EOL] [comment] [EOL] assert sub_pipenv ( [string] ) . ok [EOL] [EOL] [comment] [EOL] Path ( [string] ) . write_text ( tests_path . read_text ( ) ) [EOL] sub_pipenv ( [string] ) [EOL] sub_pipenv ( [string] ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] inv . run ( [string] . format ( last_version or [string] ) ) [comment] [EOL] while True : [EOL] msg = input ( [string] ) [EOL] print ( msg ) [EOL] if input ( [string] ) == [string] : [EOL] break [EOL] [EOL] [comment] [EOL] if input ( f" [string] " ) != [string] : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] release_real ( inv , version , msg , True ) [EOL] [EOL] [EOL] @ task def release_real ( inv , version , msg , iknowwhatimdoing = False ) : [EOL] [docstring] [EOL] [EOL] if not iknowwhatimdoing : [EOL] sys . exit ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] inv . run ( f' [string] { version } [string] { shlex . quote ( msg ) }' ) [EOL] inv . run ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] package ( inv , version ) [EOL] inv . run ( TWINE_CMD ) [EOL] print ( f" [string] { version } [string] " ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] Program ( namespace = Collection . from_module ( sys . modules [ __name__ ] ) ) . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import os [EOL] from setuptools import setup [EOL] [EOL] from invoke import run [EOL] from pipenv . utils import convert_deps_to_pip [EOL] from pipenv . project import Project [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] pipfile = Project ( chdir = False ) . parsed_pipfile [EOL] [EOL] [EOL] setup ( name = [string] , version = os . environ [ [string] ] , py_modules = [ [string] ] , install_requires = convert_deps_to_pip ( pipfile [ [string] ] , r = False ) , package_data = { [string] : [ [string] ] } , python_requires = [string] . format ( pipfile [ [string] ] [ [string] ] ) , entry_points = { [string] : [ [string] ] } , author = [string] , author_email = [string] , description = ( [string] ) , long_description = run ( [string] ) . stdout , long_description_content_type = [string] , license = [string] , url = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Union , Tuple , List , Optional , Any , Set [EOL] import typing [EOL] import pathlib [EOL] import sys [EOL] import json [EOL] import platform [EOL] from pathlib import Path [EOL] from contextlib import contextmanager [EOL] [EOL] import pytest [EOL] [EOL] import npmenv [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] EXAMPLE_PACKAGE = [string] [comment] [EOL] EXAMPLE_PACKAGE_WITH_SCRIPT = [string] [comment] [EOL] PACKAGE_JSON = [string] [EOL] LOCK_JSON = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ contextmanager def assert_exit_with_success ( success ) : [EOL] [docstring] [EOL] with pytest . raises ( SystemExit ) as exc : [EOL] yield [EOL] assert success == ( exc . value . code in ( None , [number] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def sandbox ( request , tmpdir_factory , monkeypatch ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in request . keywords : [EOL] return [EOL] [EOL] [comment] [EOL] proj_dir = tmpdir_factory . mktemp ( [string] ) [EOL] proj_dir = Path ( str ( proj_dir ) ) [EOL] [EOL] [comment] [EOL] envs = tmpdir_factory . mktemp ( [string] ) [EOL] envs = Path ( str ( envs ) ) [EOL] [EOL] [comment] [EOL] monkeypatch . setattr ( npmenv , [string] , envs ) [EOL] monkeypatch . chdir ( str ( proj_dir ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] env_dir = envs / npmenv . _get_env_id ( proj_dir ) [EOL] return { [string] : envs , [string] : proj_dir , [string] : proj_dir / [string] , [string] : proj_dir / [string] , [string] : env_dir , [string] : env_dir / [string] , [string] : env_dir / [string] , [string] : env_dir / [string] , } [EOL] [EOL] [EOL] @ pytest . fixture ( ) def insert_project_files ( sandbox ) : [EOL] [docstring] [EOL] def inner ( package = False , lock = False ) : [EOL] if package : [EOL] sandbox [ [string] ] . write_text ( PACKAGE_JSON ) [EOL] if lock : [EOL] sandbox [ [string] ] . write_text ( LOCK_JSON ) [EOL] return sandbox [comment] [EOL] return inner [EOL] [EOL] [EOL] @ pytest . fixture ( ) def fake_project ( ) : [EOL] [docstring] [EOL] proj_dir = [string] [EOL] env_id = [string] [EOL] data_dir = [string] [EOL] if platform . system ( ) == [string] : [EOL] data_dir = [string] [EOL] if platform . system ( ) == [string] : [EOL] proj_dir = [string] + proj_dir [EOL] env_id = [string] [EOL] data_dir = [string] [EOL] return { [string] : Path ( proj_dir ) , [string] : env_id , [string] : Path ( Path . home ( ) , data_dir , [string] , env_id ) , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test__cd ( sandbox ) : [EOL] assert Path . cwd ( ) != sandbox [ [string] ] [EOL] with npmenv . _cd ( sandbox [ [string] ] ) : [EOL] assert Path . cwd ( ) == sandbox [ [string] ] [EOL] assert Path . cwd ( ) != sandbox [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . sandbox_disable def test__get_env_id ( fake_project ) : [EOL] assert npmenv . _get_env_id ( fake_project [ [string] ] ) == fake_project [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . sandbox_disable def test__get_env_dir ( fake_project ) : [EOL] assert npmenv . _get_env_dir ( fake_project [ [string] ] ) == fake_project [ [string] ] [EOL] [EOL] [EOL] def test__resolve_proj_dir ( sandbox ) : [EOL] [comment] [EOL] assert npmenv . _resolve_proj_dir ( ) == sandbox [ [string] ] [EOL] [comment] [EOL] with npmenv . _cd ( sandbox [ [string] ] . parent ) : [EOL] relative_to_parent = sandbox [ [string] ] . relative_to ( sandbox [ [string] ] . parent ) [EOL] assert npmenv . _resolve_proj_dir ( relative_to_parent ) == sandbox [ [string] ] [EOL] [EOL] [EOL] class TestCli : [EOL] [docstring] [EOL] [EOL] def _patch_argv ( self , monkeypatch , args ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( sys , [string] , [ None , * args ] ) [EOL] [EOL] def test_env_list ( self , sandbox , monkeypatch , capfd ) : [EOL] [comment] [EOL] npmenv . env_npm ( ) [EOL] capfd . readouterr ( ) [EOL] [comment] [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] npmenv . _cli ( ) [EOL] assert str ( sandbox [ [string] ] ) in capfd . readouterr ( ) . out [EOL] [EOL] def test_env_cleanup ( self , monkeypatch , sandbox , insert_project_files , tmpdir , capfd ) : [EOL] [comment] [EOL] proj1 = str ( sandbox [ [string] ] ) [EOL] proj2 = str ( tmpdir ) [EOL] insert_project_files ( package = True ) [comment] [EOL] npmenv . env_npm ( proj_dir = proj1 ) [EOL] npmenv . env_npm ( proj_dir = proj2 ) [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] npmenv . _cli ( ) [EOL] stdout = capfd . readouterr ( ) . out [EOL] assert proj1 not in stdout [EOL] assert proj2 in stdout [EOL] [EOL] def test_env_location ( self , monkeypatch , sandbox , capfd ) : [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] npmenv . _cli ( ) [EOL] assert str ( sandbox [ [string] ] ) == capfd . readouterr ( ) . out [EOL] [EOL] def test_env_modules ( self , monkeypatch , sandbox , capfd ) : [EOL] npmenv . env_npm ( f' [string] { EXAMPLE_PACKAGE } [string] ' ) . check_returncode ( ) [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] npmenv . _cli ( ) [EOL] assert [string] in capfd . readouterr ( ) . out [EOL] self . _patch_argv ( monkeypatch , [ [string] , [string] ] ) [EOL] npmenv . _cli ( ) [EOL] assert [string] in capfd . readouterr ( ) . out [EOL] [EOL] def test_env_rm ( self , monkeypatch ) : [EOL] [comment] [EOL] self . _patch_argv ( monkeypatch , [ [string] , [string] ] ) [EOL] with pytest . raises ( SystemExit ) : [EOL] npmenv . _cli ( ) [EOL] [comment] [EOL] npmenv . env_npm ( ) [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] npmenv . _cli ( ) [EOL] [EOL] def test_env_run ( self , monkeypatch ) : [EOL] npmenv . env_npm ( f' [string] { EXAMPLE_PACKAGE_WITH_SCRIPT } [string] ' ) . check_returncode ( ) [EOL] self . _patch_argv ( monkeypatch , [ [string] , [string] , [string] ] ) [EOL] with assert_exit_with_success ( True ) : [EOL] npmenv . _cli ( ) [EOL] [EOL] def test_npm ( self , monkeypatch , capfd ) : [EOL] [comment] [EOL] self . _patch_argv ( monkeypatch , [ [string] ] ) [EOL] with assert_exit_with_success ( True ) : [EOL] npmenv . _cli ( ) [EOL] stdout = capfd . readouterr ( ) . out [EOL] assert [string] in stdout [comment] [EOL] assert [string] in stdout [comment] [EOL] [EOL] def test_args ( self , monkeypatch ) : [EOL] [comment] [EOL] wrong = [ [ [string] , [number] ] , [ [string] , [number] ] , [ [string] , [number] , [number] ] , [ [string] ] , [ [string] , [number] , [number] ] ] [EOL] for args in wrong : [EOL] self . _patch_argv ( monkeypatch , args ) [EOL] with pytest . raises ( SystemExit ) : [EOL] npmenv . _cli ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class TestEnvNpm : [EOL] [docstring] [EOL] [EOL] def test_no_files_init ( self , sandbox ) : [EOL] [docstring] [EOL] npmenv . env_npm ( [string] ) . check_returncode ( ) [EOL] assert sandbox [ [string] ] . resolve ( strict = True ) == sandbox [ [string] ] [EOL] assert not sandbox [ [string] ] . is_symlink ( ) [EOL] [EOL] def test_no_files_install ( self , sandbox ) : [EOL] [docstring] [EOL] npmenv . env_npm ( f' [string] { EXAMPLE_PACKAGE } [string] ' ) . check_returncode ( ) [EOL] assert sandbox [ [string] ] . resolve ( strict = True ) == sandbox [ [string] ] [EOL] assert sandbox [ [string] ] . is_dir ( ) [EOL] [EOL] def test_only_package ( self , insert_project_files ) : [EOL] [docstring] [EOL] sandbox = insert_project_files ( package = True ) [EOL] npmenv . env_npm ( [string] ) . check_returncode ( ) [EOL] [comment] [EOL] assert json . loads ( sandbox [ [string] ] . read_text ( ) ) == json . loads ( PACKAGE_JSON ) [EOL] [comment] [EOL] assert sandbox [ [string] ] . resolve ( strict = True ) == sandbox [ [string] ] [EOL] assert sandbox [ [string] ] . resolve ( strict = True ) == sandbox [ [string] ] [EOL] [comment] [EOL] assert sandbox [ [string] ] . is_dir ( ) [EOL] [EOL] def test_both_files ( self , insert_project_files ) : [EOL] [docstring] [EOL] sandbox = insert_project_files ( package = True , lock = True ) [EOL] npmenv . env_npm ( [string] ) . check_returncode ( ) [EOL] [comment] [EOL] assert json . loads ( sandbox [ [string] ] . read_text ( ) ) == json . loads ( PACKAGE_JSON ) [EOL] assert json . loads ( sandbox [ [string] ] . read_text ( ) ) == json . loads ( LOCK_JSON ) [EOL] [comment] [EOL] assert sandbox [ [string] ] . resolve ( ) == sandbox [ [string] ] [EOL] assert sandbox [ [string] ] . resolve ( ) == sandbox [ [string] ] [EOL] [comment] [EOL] assert sandbox [ [string] ] . is_dir ( ) [EOL] [EOL] def test_unlink ( self , insert_project_files ) : [EOL] [docstring] [EOL] sandbox = insert_project_files ( package = True , lock = True ) [EOL] [comment] [EOL] npmenv . env_npm ( ) [EOL] assert sandbox [ [string] ] . is_symlink ( ) [EOL] assert sandbox [ [string] ] . is_symlink ( ) [EOL] [comment] [EOL] sandbox [ [string] ] . unlink ( ) [EOL] sandbox [ [string] ] . unlink ( ) [EOL] [comment] [EOL] npmenv . env_npm ( ) [EOL] assert not sandbox [ [string] ] . is_symlink ( ) [EOL] assert not sandbox [ [string] ] . is_symlink ( ) [EOL] [EOL] [EOL] def test_env_rm ( sandbox ) : [EOL] [comment] [EOL] def rm_with_checks ( * args ) : [EOL] assert not npmenv . env_list ( ) [EOL] npmenv . env_npm ( ) [EOL] assert npmenv . env_list ( ) [EOL] npmenv . env_rm ( * args ) [EOL] assert not npmenv . env_list ( ) [EOL] [EOL] [comment] [EOL] rm_with_checks ( ) [EOL] rm_with_checks ( sandbox [ [string] ] ) [EOL] rm_with_checks ( npmenv . _get_env_id ( sandbox [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] assert not npmenv . env_list ( ) [EOL] with pytest . raises ( npmenv . NpmenvException ) : [EOL] npmenv . env_rm ( ) [EOL] [EOL] [EOL] def test_env_list ( ) : [EOL] [comment] [EOL] assert not npmenv . env_list ( ) [EOL] [comment] [EOL] npmenv . env_npm ( ) [EOL] [comment] [EOL] assert npmenv . env_list ( ) [ [number] ] [ [number] ] == Path . cwd ( ) [EOL] [EOL] [EOL] def test_env_cleanup ( sandbox , insert_project_files , tmpdir_factory ) : [EOL] [comment] [EOL] insert_project_files ( lock = True ) [EOL] npmenv . env_npm ( ) [EOL] [EOL] [comment] [EOL] npmenv . env_npm ( proj_dir = str ( tmpdir_factory . mktemp ( [string] ) ) ) [EOL] [EOL] [comment] [EOL] proj3 = Path ( str ( tmpdir_factory . mktemp ( [string] ) ) ) [EOL] npmenv . env_npm ( proj_dir = proj3 ) [EOL] proj3 . rmdir ( ) [EOL] [EOL] [comment] [EOL] issues = set ( [ env [ [number] ] for env in npmenv . env_list ( ) ] ) [EOL] assert issues == set ( [ None , [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] removed = npmenv . env_cleanup ( ) [EOL] [EOL] [comment] [EOL] assert len ( removed ) == [number] [EOL] assert None not in ( env [ [number] ] for env in removed ) [EOL] [EOL] [EOL] def test_env_location ( sandbox ) : [EOL] [comment] [EOL] env_dir = npmenv . env_location ( ) [EOL] env_dir . relative_to ( sandbox [ [string] ] ) [comment] [EOL] assert env_dir . name . startswith ( sandbox [ [string] ] . parent . name + [string] ) [EOL] [EOL] [EOL] def test_env_run ( sandbox , capfd ) : [EOL] [comment] [EOL] with pytest . raises ( npmenv . NpmenvException ) : [EOL] npmenv . env_run ( [string] ) [EOL] npmenv . env_npm ( ) [EOL] with pytest . raises ( npmenv . NpmenvException ) : [EOL] npmenv . env_run ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] npmenv . env_npm ( f' [string] { EXAMPLE_PACKAGE_WITH_SCRIPT } [string] ' ) . check_returncode ( ) [EOL] capfd . readouterr ( ) [EOL] npmenv . env_run ( [string] ) . check_returncode ( ) [EOL] assert [string] in capfd . readouterr ( ) . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],typing.List[typing.Union[builtins.int,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],typing.List[typing.Union[builtins.int,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0