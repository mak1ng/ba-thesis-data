from setuptools import setup [EOL] [EOL] setup ( name = [string] , packages = [ [string] ] , version = [string] , author = [string] , author_email = [string] , description = [string] [string] , long_description = open ( [string] ) . read ( ) , url = [string] , license = [string] , tests_require = [ ] , test_suite = [string] , classifiers = [ [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import subprocess [EOL] import builtins [EOL] import datetime [EOL] import os [EOL] import shutil [EOL] import subprocess [EOL] [EOL] from blog import logger [EOL] [EOL] deploy_dir = [string] [EOL] repository = [string] [EOL] [EOL] [EOL] def deploy ( ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] shutil . rmtree ( [string] , ignore_errors = True ) [EOL] [EOL] execute ( [string] ) [EOL] execute ( [string] ) [EOL] now = datetime . datetime . utcnow ( ) . strftime ( [string] ) [EOL] commit_message = [string] . format ( now ) [EOL] logger . info ( [string] . format ( commit_message ) ) [EOL] execute ( [string] . format ( commit_message ) ) [EOL] [EOL] logger . info ( [string] . format ( repository ) ) [EOL] execute ( [string] % repository ) [EOL] logger . info ( [string] ) [EOL] execute ( [string] ) [EOL] except Exception as e : [EOL] logger . error ( str ( e ) ) [EOL] [EOL] [EOL] def execute ( cmd ) : [EOL] proc = subprocess . Popen ( cmd , shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] ( out , err ) = proc . communicate ( ) [EOL] if err : [EOL] logger . warn ( out ) [EOL] raise Exception ( err ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] pwd = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] os . chdir ( os . path . join ( pwd , deploy_dir ) ) [EOL] deploy ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import post [EOL] import jinja2 [EOL] import blog [EOL] import typing [EOL] from typing import List [EOL] [EOL] from jinja2 import Environment , PackageLoader [EOL] [EOL] from . blog import Blog [EOL] from . post import Post [EOL] [EOL] env = Environment ( loader = PackageLoader ( [string] , [string] ) , ) [EOL] [EOL] [EOL] def render_top ( blog , post ) : [EOL] template = env . get_template ( [string] ) [EOL] html = template . render ( blog = blog , post = post ) [EOL] return html [EOL] [EOL] [EOL] def render_post ( blog , post ) : [EOL] template = env . get_template ( [string] ) [EOL] html = template . render ( blog = blog , post = post ) [EOL] return html [EOL] [EOL] [EOL] def render_archives ( blog , posts ) : [EOL] template = env . get_template ( [string] ) [EOL] html = template . render ( blog = blog , posts = posts ) [EOL] return html [EOL] [EOL] [EOL] def render_feed ( blog , posts ) : [EOL] template = env . get_template ( [string] ) [EOL] html = template . render ( blog = blog , posts = posts ) [EOL] return html [EOL] [EOL] [EOL] def render_pages_top ( blog ) : [EOL] template = env . get_template ( [string] ) [EOL] html = template . render ( blog = blog ) [EOL] return html [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import NamedTuple [EOL] [EOL] [EOL] class Blog ( NamedTuple ) : [EOL] url = ... [EOL] old_url = ... [EOL] title = ... [EOL] description = ... [EOL] author = ... [EOL] posts_path = ... [EOL] pages_path = ... [EOL] [EOL] [EOL] class Theme ( NamedTuple ) : [EOL] path = ... [EOL] name = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Callable , Any , Pattern , Match , List , Dict , Generator , Optional [EOL] import builtins [EOL] import typing [EOL] import blog [EOL] import datetime [EOL] import datetime [EOL] import os [EOL] import re [EOL] from typing import Any , Dict , Generator , List , NamedTuple [EOL] from typing import Callable [comment] [EOL] [EOL] import markdown [EOL] [EOL] from . blog import Blog [EOL] [EOL] [EOL] class Headers ( NamedTuple ) : [EOL] title = ... [EOL] date = ... [EOL] categories = ... [EOL] old_post = ... [EOL] [EOL] [EOL] class Post ( NamedTuple ) : [EOL] filename = ... [EOL] path = ... [EOL] url = ... [EOL] headers = ... [EOL] contents = ... [EOL] [EOL] [EOL] default_headers = Headers ( [string] , datetime . datetime . now ( ) , [ ] , False ) [EOL] [EOL] [EOL] def _create_headers ( ** kwargs ) : [EOL] return default_headers . _replace ( ** kwargs ) [EOL] [EOL] [EOL] def _load_file ( filename ) : [EOL] with open ( filename , [string] ) as lines : [EOL] for line in lines : [EOL] yield line . rstrip ( ) [EOL] [EOL] [EOL] def load_post ( blog , filename ) : [EOL] g = _load_file ( os . path . join ( blog . posts_path , filename ) ) [EOL] next ( g ) [comment] [EOL] headers = _create_headers ( ** parse_headers ( g ) ) [EOL] path = post_path ( filename ) [EOL] return Post ( filename = filename , path = path , url = _post_url ( blog , path , headers . old_post ) , headers = headers , contents = parse_content ( g ) ) [EOL] [EOL] [EOL] def load_page ( blog , filename ) : [EOL] g = _load_file ( os . path . join ( blog . pages_path , filename ) ) [EOL] next ( g ) [comment] [EOL] headers = _create_headers ( ** parse_headers ( g ) ) [EOL] path = post_path ( filename ) [EOL] return Post ( filename = filename , path = path , url = _post_url ( blog , path , headers . old_post ) , headers = headers , contents = parse_content ( g ) ) [EOL] [EOL] [EOL] def _post_url ( blog , path , is_old_post ) : [EOL] root = blog . old_url if is_old_post else blog . url [EOL] return [string] . join ( ( root , path ) ) [EOL] [EOL] [EOL] def parse_headers ( g ) : [EOL] def parse_title ( x ) : [EOL] return x . strip ( [string] ) [EOL] [EOL] def parse_date ( x ) : [EOL] return datetime . datetime . strptime ( x , [string] ) [EOL] [EOL] def parse_categories ( x ) : [EOL] return x . split ( [string] ) [EOL] [EOL] def parse_old_post ( x ) : [EOL] return x == [string] [EOL] [EOL] filter = { [string] : parse_title , [string] : parse_date , [string] : parse_categories , [string] : parse_old_post , } [EOL] h = { } [EOL] for x in g : [EOL] if x == [string] : [EOL] break [EOL] ( k , v ) = tuple ( map ( str . strip , x . split ( [string] , [number] ) ) ) [EOL] if k in filter . keys ( ) : [EOL] f = filter [ k ] [EOL] h [ k ] = f ( v ) [EOL] return h [EOL] [EOL] [EOL] def parse_content ( g ) : [EOL] return str ( markdown . markdown ( [string] . join ( g ) , extensions = [ [string] ] ) ) [EOL] [EOL] [EOL] post_filename_rule = re . compile ( [string] ) [EOL] [EOL] [EOL] def post_path ( filename ) : [EOL] basename = os . path . basename ( filename ) [EOL] m = re . match ( post_filename_rule , basename ) [EOL] if bool ( m ) : [EOL] url = [string] % ( m . group ( [number] ) , m . group ( [number] ) , m . group ( [number] ) , m . group ( [number] ) , ) [EOL] return url [EOL] return [string] . format ( basename . replace ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $Headers$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import blog [EOL] import post [EOL] import os [EOL] import shutil [EOL] from typing import List [EOL] [EOL] from . blog import Blog , Theme [EOL] from . logging import logger [EOL] from . render import ( render_top , render_post , render_archives , render_feed , render_pages_top , ) [EOL] from . post import Post , load_post , load_page [EOL] [EOL] THEMES_PATH = [string] [EOL] [EOL] [EOL] def clean ( path ) : [EOL] clean_dist ( path ) [EOL] [EOL] [EOL] def build ( dist_path , blog , theme ) : [EOL] build_theme ( theme , dist_path ) [EOL] copy_static_files ( dist_path ) [EOL] posts = find_all_posts ( blog ) [EOL] pages = find_all_pages ( blog ) [EOL] [EOL] build_top ( dist_path , blog , posts [ - [number] ] ) [EOL] build_archives ( dist_path , blog , sorted ( posts , reverse = True ) ) [EOL] build_pages_top ( dist_path , blog ) [EOL] [ publish_post ( dist_path , blog , x ) for x in pages ] [EOL] build_atom_feed ( dist_path , blog , sorted ( posts , reverse = True ) ) [EOL] [ publish_post ( dist_path , blog , x ) for x in posts ] [EOL] [EOL] [EOL] def find_all_posts ( blog ) : [EOL] all = [ ] [EOL] for ( root , dirs , files ) in os . walk ( blog . posts_path ) : [EOL] relpath = os . path . relpath ( root , blog . posts_path ) [EOL] all . extend ( [ os . path . join ( relpath , x ) for x in files ] ) [EOL] return [ load_post ( blog , x ) for x in sorted ( all ) ] [EOL] [EOL] [EOL] def find_all_pages ( blog ) : [EOL] all = [ ] [EOL] for ( root , dirs , files ) in os . walk ( blog . pages_path ) : [EOL] relpath = os . path . relpath ( root , blog . pages_path ) [EOL] all . extend ( [ os . path . join ( relpath , x ) for x in files ] ) [EOL] return [ load_page ( blog , x ) for x in sorted ( all ) ] [EOL] [EOL] [EOL] def _write_file ( filename , content ) : [EOL] with open ( filename , [string] ) as f : [EOL] f . write ( content ) [EOL] [EOL] [EOL] def clean_dist ( path ) : [EOL] logger . info ( [string] . format ( path ) ) [EOL] shutil . rmtree ( path , ignore_errors = True ) [EOL] [EOL] [EOL] def publish_post ( dist_path , blog , post ) : [EOL] post_path = os . path . join ( dist_path , post . path ) [EOL] os . makedirs ( post_path , exist_ok = True ) [EOL] dest_file = os . path . join ( post_path , [string] ) [EOL] html = render_post ( blog , post ) [EOL] logger . info ( [string] . format ( post . path ) ) [EOL] _write_file ( dest_file , html ) [EOL] return True [EOL] [EOL] [EOL] def build_theme ( theme , dist ) : [EOL] logger . info ( [string] . format ( theme . name ) ) [EOL] theme_dir = os . path . join ( theme . path , theme . name ) [EOL] shutil . copytree ( theme_dir , dist , ignore = shutil . ignore_patterns ( [string] ) ) [EOL] [EOL] [EOL] def copy_static_files ( dist ) : [EOL] logger . info ( [string] ) [EOL] for target in ( [string] , ) : [EOL] src_dir = os . path . join ( [string] , [string] , target ) [EOL] dst_dir = os . path . join ( dist , target ) [EOL] shutil . copytree ( src_dir , dst_dir ) [EOL] [EOL] [EOL] def build_top ( dist_path , blog , post ) : [EOL] logger . info ( [string] ) [EOL] _build_page ( dist_path , [string] , render_top ( blog , post ) ) [EOL] [EOL] [EOL] def build_archives ( dist_path , blog , posts ) : [EOL] logger . info ( [string] ) [EOL] archives_path = os . path . join ( dist_path , [string] , [string] ) [EOL] _build_page ( archives_path , [string] , render_archives ( blog , posts ) ) [EOL] [EOL] [EOL] def build_atom_feed ( dist_path , blog , posts ) : [EOL] logger . info ( [string] ) [EOL] _build_page ( dist_path , [string] , render_feed ( blog , posts ) ) [EOL] [EOL] [EOL] def build_pages_top ( dist_path , blog ) : [EOL] logger . info ( [string] ) [EOL] pages_path = os . path . join ( dist_path , [string] ) [EOL] _build_page ( pages_path , [string] , render_pages_top ( blog ) ) [EOL] [EOL] [EOL] def _build_page ( dist_path , filename , content ) : [EOL] os . makedirs ( dist_path , exist_ok = True ) [EOL] dest_file = os . path . join ( dist_path , filename ) [EOL] _write_file ( dest_file , content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . blog import Blog , Theme [EOL] from . builder import clean , build [EOL] from . logging import logger [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0