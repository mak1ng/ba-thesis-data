	0
from typing import Iterable [EOL] import typing [EOL] import builtins [EOL] import aiohttp [EOL] import asyncio [EOL] import datetime [EOL] import hashlib [EOL] import io [EOL] import time [EOL] from collections import namedtuple [EOL] from contextlib import redirect_stdout [EOL] from typing import Iterable [EOL] [EOL] from aiohttp import ClientSession [EOL] from aiohttp import web [EOL] from aiohttp . web import Application , StreamResponse , run_app , Request , Response [EOL] [EOL] START = time . time ( ) [EOL] [EOL] render_webpage = [string] . format [EOL] DEFAULT_TTL = [number] * [number] * [number] [EOL] [EOL] [EOL] class Store : [EOL] _cache = { } [EOL] _expires = { } [EOL] _max_objects = [number] [EOL] [EOL] async def set ( self , key , value , ttl = DEFAULT_TTL ) : [EOL] self . _cache [ key ] = value [EOL] self . _expires [ key ] = time . time ( ) + ttl [EOL] return value [EOL] [EOL] async def get ( self , key ) : [EOL] value = self . _cache . get ( key , None ) [EOL] [EOL] if value is None : [EOL] return [EOL] [EOL] exp = self . _expires . get ( key , - [number] ) [EOL] [EOL] print ( exp , [string] , time . time ( ) ) [EOL] [EOL] if exp is None or exp <= time . time ( ) : [EOL] del self . _cache [ key ] [EOL] del self . _expires [ key ] [EOL] return None [EOL] [EOL] return value [EOL] [EOL] [EOL] def render_table ( rows ) : [EOL] out = io . StringIO ( ) [EOL] with redirect_stdout ( out ) : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] for row in rows : [EOL] print ( [string] ) [EOL] for cell in row : [EOL] print ( [string] . format ( cell ) ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] return out . getvalue ( ) [EOL] [EOL] [EOL] async def landing_view ( request ) : [EOL] rows = map ( lambda n : ( n , n , n ) , range ( [number] ) ) [EOL] delta = datetime . timedelta ( seconds = time . time ( ) - START ) [EOL] binary = render_webpage ( header = f' [string] { delta }' , body = render_table ( rows ) ) . encode ( [string] ) [EOL] resp = StreamResponse ( ) [EOL] resp . content_length = len ( binary ) [EOL] resp . content_type = [string] [EOL] await resp . prepare ( request ) [EOL] resp . write ( binary ) [EOL] return resp [EOL] [EOL] [EOL] def hash_request ( request ) : [EOL] sha1 = hashlib . sha1 ( ) [EOL] sha1 . update ( request . method . encode ( ) ) [EOL] sha1 . update ( str ( request . rel_url ) . encode ( ) ) [EOL] return sha1 . digest ( ) [EOL] [EOL] [EOL] store = Store ( ) [EOL] [EOL] ItemResponse = namedtuple ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] async def relay_stream ( request ) : [EOL] host , port = request . rel_url . path . split ( [string] ) [EOL] port = int ( port ) [EOL] reader , writer = await asyncio . open_connection ( host = host , port = port , ssl = True ) [EOL] [EOL] while True : [EOL] await writer . drain ( ) [EOL] [EOL] data = await reader . read ( [number] * [number] ) [EOL] if not data : [EOL] break [EOL] print ( [string] , data ) [EOL] writer . write ( data ) [EOL] await writer . drain ( ) [EOL] [EOL] writer . close ( ) [EOL] [EOL] [EOL] async def proxy_handler ( request ) : [EOL] hash_key = hash_request ( request ) [EOL] response = await store . get ( hash_key ) [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] if request . method == [string] : [EOL] asyncio . ensure_future ( relay_stream ( request ) , loop = loop ) [EOL] [EOL] return Response ( status = [number] , reason = [string] , headers = { [string] : [string] } ) [EOL] [EOL] if response : [EOL] print ( [string] ) [EOL] stream = StreamResponse ( status = response . status , reason = response . reason , headers = response . headers ) [EOL] stream . headers [ [string] ] = [string] [EOL] [EOL] await stream . prepare ( request ) [EOL] stream . write ( response . body ) [EOL] [EOL] return stream [EOL] else : [EOL] [EOL] with ClientSession ( ) as session : [EOL] headers = request . headers . copy ( ) [EOL] [EOL] async with session . request ( request . method , request . rel_url , headers = headers ) as resp : [EOL] response = ItemResponse ( resp . status , resp . reason , request . method , request . rel_url , headers , await resp . read ( ) ) [EOL] [EOL] loop . create_task ( store . set ( hash_key , response ) ) [EOL] [EOL] stream = StreamResponse ( status = response . status , reason = response . reason , headers = response . headers ) [EOL] stream . headers [ [string] ] = [string] [EOL] [EOL] await stream . prepare ( request ) [EOL] stream . write ( response . body ) [EOL] [EOL] return stream [EOL] [EOL] [EOL] async def init_proxy ( loop ) : [EOL] server = web . Server ( proxy_handler ) [EOL] await loop . create_server ( server , [string] , [number] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] async def init_web ( loop ) : [EOL] app = Application ( loop = loop ) [EOL] app . router . add_get ( [string] , landing_view ) [EOL] [EOL] return app [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] loop = asyncio . get_event_loop ( ) [EOL] proxy = loop . run_until_complete ( init_proxy ( loop ) ) [EOL] app = loop . run_until_complete ( init_web ( loop ) ) [EOL] run_app ( app , host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0