[docstring] [EOL] [EOL] import version [EOL] from setuptools import find_packages , setup [EOL] [EOL] with open ( [string] , [string] , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] setup ( name = [string] , version = version . get_version ( ) , url = [string] , description = [string] , long_description = long_description , long_description_content_type = [string] , author = [string] , author_email = [string] , keywords = ( [string] , ) , license = [string] , zip_safe = False , packages = find_packages ( ) , include_package_data = True , classifiers = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , install_requires = ( [string] , [string] , [string] ) , setup_requires = ( [string] , ) , tests_require = ( [string] , [string] , [string] , [string] , [string] ) , entry_points = { [string] : ( [string] , ) } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Optional , Any [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import graphql [EOL] [docstring] [EOL] [EOL] import json [EOL] from typing import Optional [EOL] [EOL] import click [EOL] import requests [EOL] from graphql import build_client_schema , get_introspection_query , GraphQLSchema [EOL] [EOL] from graphql_validate . logging import logger [EOL] [EOL] [EOL] def resolve_schema_cli ( ctx , param , value ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] if value . startswith ( [string] ) : [EOL] return _resolve_url ( ctx , value ) [EOL] [EOL] with open ( value , [string] ) as f : [EOL] filecontents = f . read ( ) . decode ( [string] ) [EOL] [EOL] try : [EOL] json . loads ( filecontents ) [EOL] is_json = True [EOL] except json . decoder . JSONDecodeError : [EOL] is_json = False [EOL] [EOL] if is_json : [EOL] return _resolve_json ( ctx , filecontents ) [EOL] [EOL] return _resolve_sdl ( ctx , filecontents ) [EOL] [EOL] except ValueError as e : [EOL] logger . exception ( e ) [EOL] raise click . BadParameter ( str ( e ) ) [EOL] except IOError as e : [EOL] logger . exception ( e ) [EOL] raise click . BadParameter ( [string] . format ( filename = value ) ) [EOL] [EOL] [EOL] def _resolve_url ( ctx , url ) : [EOL] query = get_introspection_query ( descriptions = True ) [EOL] [EOL] try : [EOL] response = requests . post ( url , data = { [string] : query } , headers = { [string] : [string] } ) [EOL] response . raise_for_status ( ) [EOL] except requests . RequestException : [EOL] raise ValueError ( [string] ) [EOL] [EOL] try : [EOL] data = response . json ( ) [EOL] except json . decoder . JSONDecodeError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] try : [EOL] return build_client_schema ( data [ [string] ] ) [EOL] except Exception : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def _resolve_sdl ( ctx , filecontents ) : [EOL] pass [EOL] [EOL] [EOL] def _resolve_json ( ctx , filecontents ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[graphql.GraphQLSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[graphql.GraphQLSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[graphql.GraphQLSchema]$ 0 0 0 0 0 0 0 0 0
import logging [EOL] [docstring] [EOL] [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def set_verbosity ( ctx , param , verbose ) : [EOL] [docstring] [EOL] [EOL] level = logging . DEBUG if verbose else logging . CRITICAL [EOL] logging . basicConfig ( level = level , format = [string] ) [EOL] logger . debug ( [string] . format ( level = level ) ) [EOL] return verbose [EOL]	0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def test_run ( ) : [EOL] assert True , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0