[comment] [EOL] [comment] [EOL] from typing import Tuple , Literal [EOL] import typing_extensions [EOL] import typing [EOL] [docstring] [EOL] import io [EOL] import os [EOL] import re [EOL] import sys [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] [EOL] def get_version ( ) : [EOL] [docstring] [EOL] regex = [string] [EOL] path = ( [string] , [string] ) [EOL] return re . search ( regex , read ( * path ) ) . group ( [string] ) [EOL] [EOL] [EOL] def read ( * parts ) : [EOL] [docstring] [EOL] filename = os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , * parts ) [EOL] sys . stdout . write ( filename ) [EOL] with io . open ( filename , encoding = [string] , mode = [string] ) as fp : [EOL] return fp . read ( ) [EOL] [EOL] [EOL] with open ( [string] ) as readme_file : [EOL] readme = readme_file . read ( ) [EOL] [EOL] setup ( author = [string] , author_email = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , description = [string] , include_package_data = True , install_requires = [ [string] , [string] ] , keywords = [ [string] , [string] , [string] , [string] , [string] ] , license = [string] , long_description_content_type = [string] , long_description = readme , name = [string] , packages = find_packages ( include = [ [string] ] ) , test_suite = [string] , url = [string] , version = get_version ( ) , zip_safe = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Optional [EOL] import datetime [EOL] import asyncio [EOL] import typing [EOL] [docstring] [EOL] [EOL] import asyncio [EOL] [EOL] from twentemilieu import ( WASTE_TYPE_NON_RECYCLABLE , WASTE_TYPE_ORGANIC , WASTE_TYPE_PAPER , WASTE_TYPE_PLASTIC , TwenteMilieu , ) [EOL] [EOL] [EOL] async def main ( loop ) : [EOL] [docstring] [EOL] async with TwenteMilieu ( post_code = [string] , house_number = [number] , loop = loop ) as tw : [EOL] print ( tw ) [EOL] unique_id = await tw . unique_id ( ) [EOL] print ( [string] , unique_id ) [EOL] await tw . update ( ) [EOL] pickup = await tw . next_pickup ( WASTE_TYPE_ORGANIC ) [EOL] print ( [string] , pickup ) [EOL] pickup = await tw . next_pickup ( WASTE_TYPE_PLASTIC ) [EOL] print ( [string] , pickup ) [EOL] pickup = await tw . next_pickup ( WASTE_TYPE_PAPER ) [EOL] print ( [string] , pickup ) [EOL] pickup = await tw . next_pickup ( WASTE_TYPE_NON_RECYCLABLE ) [EOL] print ( [string] , pickup ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] loop = asyncio . get_event_loop ( ) [EOL] loop . run_until_complete ( main ( loop ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0
[comment] [EOL] [docstring] [EOL]	0 0 0 0