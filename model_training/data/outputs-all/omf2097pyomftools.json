	0
from typing import Tuple , List [EOL] import builtins [EOL] import jinja2 [EOL] import argparse [EOL] import typing [EOL] import omftools [EOL] import argparse [EOL] import os [EOL] import typing [EOL] import copy [EOL] from glob import glob [EOL] from dataclasses import dataclass [EOL] from shutil import copyfile [EOL] [EOL] from jinja2 import Environment , PackageLoader , select_autoescape [EOL] [EOL] from omftools . pyshadowdive . af import AFFile [EOL] from omftools . pyshadowdive . bk import BKFile [EOL] from omftools . pyshadowdive . tournament import TournamentFile [EOL] from omftools . pyshadowdive . sounds import SoundFile [EOL] from omftools . pyshadowdive . pic import PicFile [EOL] from omftools . pyshadowdive . altpals import AltPaletteFile [EOL] from omftools . pyshadowdive . utils . exceptions import OMFInvalidDataException [EOL] from omftools . pyshadowdive . palette import Palette [EOL] from omftools . pyshadowdive . language import LanguageFile [EOL] [EOL] env = Environment ( loader = PackageLoader ( __name__ ) , autoescape = select_autoescape ( [ [string] ] ) ) [EOL] [EOL] [EOL] @ dataclass class Filenames : [EOL] af = ... [EOL] bk = ... [EOL] trn = ... [EOL] pic = ... [EOL] alt_pals = ... [EOL] sounds = ... [EOL] english = ... [EOL] [EOL] [EOL] har_names = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def generate_language ( file , files , output_dir ) : [EOL] filename = [string] [EOL] language = LanguageFile . load_native ( file ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( language = language , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_sounds ( file , files , output_dir ) : [EOL] filename = [string] [EOL] sounds = SoundFile . load_native ( file ) [EOL] [EOL] for idx , sound in enumerate ( sounds . sounds ) : [EOL] if sound . data : [EOL] sound . save_wav ( os . path . join ( output_dir , f"{ filename } [string] { idx } [string] " ) ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( sounds = sounds , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_pics ( file , files , output_dir , src_pal ) : [EOL] filename = os . path . basename ( file ) [EOL] pic = PicFile . load_native ( file ) [EOL] [EOL] for idx , photo in enumerate ( pic . photos ) : [EOL] sprite_file = os . path . join ( output_dir , f"{ filename } [string] { idx } [string] " ) [EOL] try : [EOL] photo . sprite . save_png ( sprite_file , src_pal ) [EOL] except OMFInvalidDataException : [EOL] print ( f" [string] { sprite_file }" ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( pic = pic , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_altpals ( alt_pals , files , output_dir ) : [EOL] filename = [string] [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( alt_pals = alt_pals , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_trn ( file , files , output_dir ) : [EOL] filename = os . path . basename ( file ) [EOL] trn = TournamentFile . load_native ( file ) [EOL] [EOL] for idx , sprite in enumerate ( trn . locale_logos ) : [EOL] sprite_file = os . path . join ( output_dir , f"{ filename } [string] { idx } [string] " ) [EOL] try : [EOL] sprite . save_png ( sprite_file , trn . palette ) [EOL] except OMFInvalidDataException : [EOL] print ( f" [string] { sprite_file }" ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( trn = trn , files = files , filename = filename , har_names = har_names ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_bk ( file , files , output_dir , alt_pals ) : [EOL] filename = os . path . basename ( file ) [EOL] bk = BKFile . load_native ( file ) [EOL] [EOL] bk . save_background ( os . path . join ( output_dir , f"{ filename } [string] " ) ) [EOL] [EOL] pal = copy . deepcopy ( bk . palettes [ [number] ] . colors ) [EOL] [EOL] names = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] if any ( [ filename . startswith ( t ) for t in names ] ) : [EOL] c1 = pal . data [ [number] ] [EOL] for m in range ( [number] ) : [EOL] pal . data [ m ] = alt_pals . palettes [ [number] ] . data [ m ] [EOL] pal . data [ [number] ] = c1 [EOL] [EOL] for key , animation in bk . animations . items ( ) : [EOL] for idx , sprite in enumerate ( animation . sprites ) : [EOL] sprite_file = os . path . join ( output_dir , f"{ filename } [string] { key } [string] { idx } [string] " ) [EOL] try : [EOL] sprite . save_png ( sprite_file , pal ) [EOL] except OMFInvalidDataException : [EOL] print ( f" [string] { sprite_file }" ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( bk = bk , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def generate_af ( file , files , output_dir , alt_pals ) : [EOL] filename = os . path . basename ( file ) [EOL] af = AFFile . load_native ( file ) [EOL] [EOL] for key , animation in af . moves . items ( ) : [EOL] for idx , sprite in enumerate ( animation . sprites ) : [EOL] sprite_file = os . path . join ( output_dir , f"{ filename } [string] { key } [string] { idx } [string] " ) [EOL] try : [EOL] sprite . save_png ( sprite_file , alt_pals . palettes [ [number] ] ) [EOL] except OMFInvalidDataException : [EOL] print ( f" [string] { sprite_file }" ) [EOL] [EOL] with open ( os . path . join ( output_dir , f"{ filename } [string] " ) , [string] ) as fd : [EOL] tpl = env . get_template ( [string] ) [EOL] content = tpl . render ( af = af , files = files , filename = filename ) [EOL] fd . write ( content . encode ( ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] af_files = glob ( os . path . join ( args . input_dir , [string] ) ) [EOL] bk_files = glob ( os . path . join ( args . input_dir , [string] ) ) [EOL] trn_files = glob ( os . path . join ( args . input_dir , [string] ) ) [EOL] pic_files = glob ( os . path . join ( args . input_dir , [string] ) ) [EOL] alt_pals_file = os . path . join ( args . input_dir , [string] ) [EOL] sounds_file = os . path . join ( args . input_dir , [string] ) [EOL] english_file = os . path . join ( args . input_dir , [string] ) [EOL] [EOL] files = Filenames ( af = [ os . path . basename ( v ) for v in af_files ] , bk = [ os . path . basename ( v ) for v in bk_files ] , trn = [ os . path . basename ( v ) for v in trn_files ] , pic = [ os . path . basename ( v ) for v in pic_files ] , alt_pals = os . path . basename ( alt_pals_file ) , sounds = os . path . basename ( sounds_file ) , english = os . path . basename ( english_file ) , ) [EOL] [EOL] [comment] [EOL] alt_pals = AltPaletteFile . load_native ( alt_pals_file ) [EOL] src_pal = copy . deepcopy ( BKFile . load_native ( bk_files [ [number] ] ) . palettes [ [number] ] . colors ) [EOL] [EOL] print ( [string] ) [EOL] generate_altpals ( alt_pals , files , args . output_dir ) [EOL] [EOL] print ( [string] ) [EOL] generate_sounds ( sounds_file , files , args . output_dir ) [EOL] [EOL] print ( [string] ) [EOL] generate_language ( english_file , files , args . output_dir ) [EOL] [EOL] for pic_file in pic_files : [EOL] print ( f" [string] { pic_file }" ) [EOL] generate_pics ( pic_file , files , args . output_dir , src_pal ) [EOL] [EOL] for trn_file in trn_files : [EOL] print ( f" [string] { trn_file }" ) [EOL] generate_trn ( trn_file , files , args . output_dir ) [EOL] [EOL] for af_file in af_files : [EOL] print ( f" [string] { af_file }" ) [EOL] generate_af ( af_file , files , args . output_dir , alt_pals ) [EOL] [EOL] for bk_file in bk_files : [EOL] print ( f" [string] { bk_file }" ) [EOL] generate_bk ( bk_file , files , args . output_dir , alt_pals ) [EOL] [EOL] copyfile ( os . path . join ( args . output_dir , f" [string] " ) , os . path . join ( args . output_dir , [string] ) , ) [EOL] [EOL] exit ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str
from typing import Pattern , Tuple , List [EOL] import typing [EOL] import omftools [EOL] import argparse [EOL] import builtins [EOL] import argparse [EOL] import re [EOL] [EOL] from omftools . pyshadowdive . language import LanguageFile [EOL] [EOL] re_non_alphanumeric = re . compile ( [string] ) [EOL] [EOL] [EOL] def txt ( text ) : [EOL] o = text . strip ( ) [EOL] o = o . replace ( [string] , [string] ) [EOL] o = re . sub ( re_non_alphanumeric , [string] , o ) [EOL] o = o . upper ( ) [EOL] return o [EOL] [EOL] [EOL] def generate_enum ( in_file , out_file ) : [EOL] language = LanguageFile . load_native ( in_file ) [EOL] assert len ( language . titles ) == len ( language . strings ) [EOL] [EOL] pairs = [ ( title , text ) for title , text in zip ( language . titles , language . strings ) ] [EOL] with open ( out_file , [string] ) as fd : [EOL] fd . write ( [string] . encode ( ) ) [EOL] [EOL] for index , pair in enumerate ( pairs , start = [number] ) : [EOL] title , text = pair [EOL] title = txt ( title ) if title else [string] [EOL] text = txt ( text ) if text else f' [string] ' [EOL] [EOL] name = f" [string] { index } [string] { title [ : [number] ] } [string] { text [ : [number] ] }" [EOL] fd . write ( f" [string] { name } [string] { index } [string] " . encode ( ) ) [EOL] [EOL] fd . write ( [string] . encode ( ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] generate_enum ( args . input_file , args . output_file ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Tuple , List [EOL] import sprite [EOL] import builtins [EOL] import pilot [EOL] import typing [EOL] import omftools [EOL] import palette [EOL] import typing [EOL] [EOL] from . protos import Entrypoint [EOL] from . sprite import Sprite [EOL] from . palette import Palette [EOL] from . pilot import Pilot [EOL] [EOL] [EOL] class TournamentFile ( Entrypoint ) : [EOL] MAX_ENEMIES = [number] [EOL] MAX_LOCALES = [number] [EOL] [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . bk_name = [string] [EOL] self . winnings_multiplier = [number] [EOL] self . unknown_a = [number] [EOL] self . registration_fee = [number] [EOL] self . assumed_initial_value = [number] [EOL] self . tournament_id = [number] [EOL] self . pic_filename = [string] [EOL] self . palette = Palette ( ) [EOL] self . locale_logos = [ ] [EOL] self . locale_descriptions = [ ] [EOL] self . locale_titles = [ ] [EOL] self . locale_end_texts = [ ] [EOL] self . pilots = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . bk_name , [string] : self . winnings_multiplier , [string] : self . unknown_a , [string] : self . registration_fee , [string] : self . assumed_initial_value , [string] : self . tournament_id , [string] : self . pic_filename , [string] : [ logo . serialize ( ) for logo in self . locale_logos ] , [string] : self . locale_descriptions , [string] : self . locale_titles , [string] : self . locale_end_texts , [string] : self . palette . serialize ( ) , [string] : [ p . serialize ( ) for p in self . pilots ] , } [EOL] [EOL] def read ( self , parser ) : [EOL] enemy_count = parser . get_uint32 ( ) [EOL] victory_text_offset = parser . get_uint32 ( ) [EOL] [EOL] self . bk_name = parser . get_null_padded_str ( [number] ) [EOL] self . winnings_multiplier = parser . get_float ( ) [EOL] self . unknown_a = parser . get_uint32 ( ) [EOL] self . registration_fee = parser . get_uint32 ( ) [EOL] self . assumed_initial_value = parser . get_uint32 ( ) [EOL] self . tournament_id = parser . get_uint32 ( ) [EOL] [EOL] [comment] [EOL] parser . set_pos ( [number] ) [EOL] offsets = [ parser . get_uint32 ( ) for _ in range ( enemy_count + [number] ) ] [EOL] [EOL] [comment] [EOL] for m in range ( enemy_count ) : [EOL] parser . set_pos ( offsets [ m ] ) [EOL] self . pilots . append ( Pilot ( ) . read ( parser ) ) [EOL] [EOL] [comment] [EOL] parser . set_pos ( offsets [ enemy_count ] ) [EOL] [EOL] [comment] [EOL] self . locale_logos = [ Sprite ( ) . read ( parser ) for _ in range ( self . MAX_LOCALES ) ] [EOL] [EOL] [comment] [EOL] self . palette = Palette ( ) . read_range ( parser , [number] , [number] ) [EOL] [EOL] [comment] [EOL] self . pic_filename = parser . get_var_str ( size_includes_zero = True ) [EOL] [EOL] [comment] [EOL] for m in range ( self . MAX_LOCALES ) : [EOL] self . locale_titles . append ( parser . get_var_str ( size_includes_zero = True ) ) [EOL] self . locale_descriptions . append ( parser . get_var_str ( size_includes_zero = True ) ) [EOL] [EOL] [comment] [EOL] parser . set_pos ( victory_text_offset ) [EOL] [EOL] [comment] [EOL] for t in range ( self . MAX_LOCALES ) : [EOL] pilots = [ ] [EOL] for h in range ( [number] ) : [EOL] pilots . append ( [ parser . get_var_str ( size_includes_zero = True ) for _ in range ( [number] ) ] ) [EOL] self . locale_end_texts . append ( pilots ) [EOL] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $palette.Palette$ 0 0 0 0 0 0 0 $typing.List[sprite.Sprite]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.List[typing.List[builtins.str]]]$ 0 0 0 0 0 0 $typing.List[pilot.Pilot]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[sprite.Sprite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.palette.Palette$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0
	0
from typing import Tuple , Type , List [EOL] import utils [EOL] import builtins [EOL] import typing [EOL] import omftools [EOL] import palette [EOL] from validx import Dict , List [EOL] [EOL] from . protos import DataObject [EOL] from . palette import Palette [EOL] from . utils . parser import BinaryParser [EOL] from . utils . validator import UInt8 [EOL] from . utils . types import Remappings , Remapping [EOL] [EOL] [EOL] class PaletteMapping ( DataObject ) : [EOL] __slots__ = ( [string] , [string] , ) [EOL] [EOL] schema = Dict ( { [string] : Palette . schema , [string] : List ( List ( UInt8 ) ) } ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . colors = Palette ( ) [EOL] self . remaps = [ ] [EOL] [EOL] def remap ( self , remap_id ) : [EOL] return self . colors . remap ( self . remaps [ remap_id ] ) [EOL] [EOL] def read ( self , parser ) : [EOL] self . colors = Palette ( ) . read ( parser ) [EOL] for k in range ( [number] , [number] ) : [EOL] remap = [ ] [EOL] for m in range ( [number] , [number] ) : [EOL] remap . append ( parser . get_uint8 ( ) ) [EOL] self . remaps . append ( remap ) [EOL] return self [EOL] [EOL] def write ( self , parser ) : [EOL] self . colors . write ( parser ) [EOL] for k in range ( [number] , [number] ) : [EOL] for m in range ( [number] , [number] ) : [EOL] parser . put_uint8 ( self . remaps [ k ] [ m ] ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . colors . serialize ( ) , [string] : self . remaps } [EOL] [EOL] def unserialize ( self , data ) : [EOL] self . colors = Palette ( ) . unserialize ( data [ [string] ] ) [EOL] self . remaps = data [ [string] ] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Type[omftools.pyshadowdive.palette_mapping.PaletteMapping]$ 0 0 0 0 0 0 0 0 $typing.Type[omftools.pyshadowdive.palette_mapping.PaletteMapping]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $palette.Palette$ 0 0 0 0 0 0 0 $utils.types.Remapping.s$ 0 0 0 0 0 0 $palette.Palette$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $omftools.pyshadowdive.palette.Palette$ 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.types.Remapping$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.types.Remapping$ 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $utils.types.Remapping$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $omftools.pyshadowdive.palette.Palette$ 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 $builtins.dict$ 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import sprite [EOL] import builtins [EOL] import typing [EOL] import omftools [EOL] import palette [EOL] import typing [EOL] from enum import IntEnum [EOL] from copy import deepcopy [EOL] [EOL] from . protos import Entrypoint , DataObject [EOL] from . sprite import Sprite [EOL] from . palette import Palette [EOL] [EOL] [EOL] class Sex ( IntEnum ) : [EOL] MALE = [number] [EOL] FEMALE = [number] [EOL] [EOL] [EOL] class Photo ( DataObject ) : [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . is_player = False [EOL] self . sex = Sex . MALE [EOL] self . palette = Palette ( ) [EOL] self . has_photo = True [EOL] self . sprite = Sprite ( ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . is_player , [string] : self . sex . value , [string] : self . palette . serialize ( ) , [string] : self . has_photo , [string] : self . sprite . serialize ( ) , } [EOL] [EOL] def read ( self , parser ) : [EOL] self . is_player = parser . get_uint8 ( ) > [number] [EOL] self . sex = Sex ( parser . get_uint16 ( ) ) [EOL] self . palette = Palette ( ) . read_range ( parser , [number] , [number] ) [EOL] self . has_photo = parser . get_boolean ( ) [EOL] if self . has_photo : [EOL] self . sprite = Sprite ( ) . read ( parser ) [EOL] self . sprite . width += [number] [comment] [EOL] self . sprite . height += [number] [comment] [EOL] return self [EOL] [EOL] def write ( self , parser ) : [EOL] parser . put_uint8 ( self . is_player ) [EOL] parser . put_uint16 ( self . sex . value ) [EOL] self . palette . write_range ( parser , [number] , [number] ) [EOL] parser . put_boolean ( self . has_photo ) [EOL] if self . has_photo : [EOL] new = deepcopy ( self . sprite ) [EOL] new . width -= [number] [EOL] new . height -= [number] [EOL] new . write ( parser ) [EOL] [EOL] [EOL] class PicFile ( Entrypoint ) : [EOL] __slots__ = ( [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . photos = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : [ p . serialize ( ) for p in self . photos ] , } [EOL] [EOL] def read ( self , parser ) : [EOL] photo_count = parser . get_uint32 ( ) [EOL] assert [number] <= photo_count <= [number] [EOL] [EOL] parser . set_pos ( [number] ) [EOL] offsets = [ parser . get_uint32 ( ) for _ in range ( photo_count ) ] [EOL] [EOL] self . photos = [ ] [EOL] for offset in offsets : [EOL] parser . set_pos ( offset ) [EOL] self . photos . append ( Photo ( ) . read ( parser ) ) [EOL] [EOL] return self [EOL] [EOL] def write ( self , parser ) : [EOL] photos_count = len ( self . photos ) [EOL] catalog_offset = [number] [EOL] [EOL] [comment] [EOL] parser . put_uint32 ( photos_count ) [EOL] parser . put_padding ( catalog_offset - [number] ) [EOL] [EOL] [comment] [EOL] for m in range ( photos_count ) : [EOL] parser . put_uint32 ( [number] ) [EOL] [EOL] [comment] [EOL] for m , photo in enumerate ( self . photos ) : [EOL] current = parser . get_pos ( ) [EOL] [comment] [EOL] parser . set_pos ( catalog_offset + m * [number] ) [EOL] parser . put_uint32 ( current ) [EOL] [comment] [EOL] parser . set_pos ( current ) [EOL] photo . write ( parser ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $Sex$ 0 0 0 0 0 0 0 $palette.Palette$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $sprite.Sprite$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.pic.Sex$ 0 0 0 0 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.palette.Palette$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $omftools.pyshadowdive.sprite.Sprite$ 0 0 0 0 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.sprite.Sprite$ 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.sprite.Sprite$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sprite.Sprite$ 0 0 0 0 0 0 0 0 $sprite.Sprite$ 0 0 0 0 0 $sprite.Sprite$ 0 0 0 0 0 $sprite.Sprite$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Photo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.pic.Photo]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.pic.Photo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] import omftools [EOL] import palette [EOL] import typing [EOL] [EOL] from . protos import Entrypoint [EOL] from . palette import Palette [EOL] [EOL] [EOL] class AltPaletteFile ( Entrypoint ) : [EOL] __slots__ = ( [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . palettes = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : [ p . serialize ( ) for p in self . palettes ] , } [EOL] [EOL] def read ( self , parser ) : [EOL] self . palettes = [ Palette ( ) . read ( parser ) for _ in range ( [number] ) ] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[palette.Palette]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.palette.Palette]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import utils [EOL] import builtins [EOL] import typing [EOL] import omftools [EOL] import palette [EOL] import typing [EOL] from enum import IntEnum [EOL] [EOL] from . protos import DataObject [EOL] from . palette import Palette [EOL] from . utils . parser import BinaryParser [EOL] [EOL] [EOL] class Har ( IntEnum ) : [EOL] JAGUAR = [number] [EOL] SHADOW = [number] [EOL] THORN = [number] [EOL] PYROS = [number] [EOL] ELECTRA = [number] [EOL] KATANA = [number] [EOL] SHREDDER = [number] [EOL] FLAIL = [number] [EOL] GARGOYLE = [number] [EOL] CHRONOS = [number] [EOL] NOVA = [number] [EOL] RANDOM = [number] [EOL] [EOL] [EOL] class Difficulty ( IntEnum ) : [EOL] ALUMINUM = [number] [EOL] IRON = [number] [EOL] STEEL = [number] [EOL] HEAVY_METAL = [number] [EOL] [EOL] [EOL] class Pilot ( DataObject ) : [EOL] PILOT_BLOCK_LENGTH = [number] [EOL] [EOL] PILOT_GROUP = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] TOURNAMENT_GROUP = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] ENHANCEMENTS_GROUP = ( [string] , ) [EOL] [EOL] REQUIREMENTS_GROUP = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] AI_OPTS_GROUP = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] OTHER_GROUP = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] QUOTES_BLOCK = ( [string] , ) [EOL] [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . unknown_a = [number] [comment] [EOL] self . name = [string] [comment] [EOL] self . wins = [number] [comment] [EOL] self . losses = [number] [comment] [EOL] self . rank = [number] [comment] [EOL] self . har_id = Har . JAGUAR [comment] [EOL] self . arm_power = [number] [comment] [EOL] self . leg_power = [number] [comment] [EOL] self . arm_speed = [number] [comment] [EOL] self . leg_speed = [number] [comment] [EOL] self . armor = [number] [comment] [EOL] self . stun_resistance = [number] [comment] [EOL] self . power = [number] [comment] [EOL] self . agility = [number] [comment] [EOL] self . endurance = [number] [comment] [EOL] self . offense = [number] [comment] [EOL] self . defense = [number] [comment] [EOL] self . money = [number] [comment] [EOL] self . color_1 = [number] [comment] [EOL] self . color_2 = [number] [comment] [EOL] self . color_3 = [number] [comment] [EOL] [EOL] self . trn_name = [string] [comment] [EOL] self . trn_desc = [string] [comment] [EOL] self . trn_image = [string] [comment] [EOL] self . unk_f_c = [number] [comment] [EOL] self . unk_f_d = [number] [comment] [EOL] self . pilot_id = [number] [comment] [EOL] self . unknown_k = [number] [comment] [EOL] self . force_arena = [number] [comment] [EOL] self . difficulty = Difficulty . ALUMINUM [comment] [EOL] self . unk_block_b = [ ] [comment] [EOL] self . movement = [number] [comment] [EOL] self . unk_block_c = [ ] [comment] [EOL] self . enhancements = [ ] [comment] [EOL] [EOL] self . secret = [number] [comment] [EOL] self . only_fight_once = [number] [comment] [EOL] self . req_enemy = [number] [comment] [EOL] self . req_difficulty = [number] [comment] [EOL] self . req_rank = [number] [comment] [EOL] self . req_vitality = [number] [comment] [EOL] self . req_fighter = [number] [comment] [EOL] self . req_accuracy = [number] [comment] [EOL] self . req_avg_dmg = [number] [comment] [EOL] self . req_max_rank = [number] [comment] [EOL] self . req_scrap = [number] [comment] [EOL] self . req_destroy = [number] [comment] [EOL] [EOL] self . att_normal = [number] [comment] [EOL] self . att_hyper = [number] [comment] [EOL] self . att_jump = [number] [comment] [EOL] self . att_def = [number] [comment] [EOL] self . att_sniper = [number] [comment] [EOL] [EOL] self . unk_block_d = [ ] [comment] [EOL] self . ap_throw = [number] [comment] [EOL] self . ap_special = [number] [comment] [EOL] self . ap_jump = [number] [comment] [EOL] self . ap_high = [number] [comment] [EOL] self . ap_low = [number] [comment] [EOL] self . ap_middle = [number] [comment] [EOL] self . pref_jump = [number] [comment] [EOL] self . pref_fwd = [number] [comment] [EOL] self . pref_back = [number] [comment] [EOL] self . unknown_e = [number] [comment] [EOL] self . learning = [number] [comment] [EOL] self . forget = [number] [comment] [EOL] self . unk_block_f = [ ] [comment] [EOL] self . enemies_inc_unranked = [number] [comment] [EOL] self . enemies_ex_unranked = [number] [comment] [EOL] [EOL] self . unk_d_a = [number] [comment] [EOL] self . unk_d_b = [number] [comment] [EOL] [EOL] self . winnings = [number] [comment] [EOL] self . total_value = [number] [comment] [EOL] self . unk_f_a = [number] [comment] [EOL] self . unk_f_b = [number] [comment] [EOL] self . palette = Palette ( ) [comment] [EOL] self . unk_block_i = [number] [comment] [EOL] self . photo_id = [number] [comment] [EOL] [EOL] self . quotes = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . unknown_a , [string] : self . name , [string] : self . wins , [string] : self . losses , [string] : self . rank , [string] : self . har_id . value , [string] : self . arm_power , [string] : self . leg_power , [string] : self . arm_speed , [string] : self . leg_speed , [string] : self . armor , [string] : self . stun_resistance , [string] : self . power , [string] : self . agility , [string] : self . endurance , [string] : self . offense , [string] : self . defense , [string] : self . money , [string] : self . color_1 , [string] : self . color_2 , [string] : self . color_3 , [string] : self . trn_name , [string] : self . trn_desc , [string] : self . trn_image , [string] : self . unk_f_c , [string] : self . unk_f_d , [string] : self . pilot_id , [string] : self . unknown_k , [string] : self . force_arena , [string] : self . difficulty . value , [string] : self . unk_block_b , [string] : self . movement , [string] : self . unk_block_c , [string] : self . enhancements , [string] : self . secret , [string] : self . only_fight_once , [string] : self . req_enemy , [string] : self . req_difficulty , [string] : self . req_rank , [string] : self . req_vitality , [string] : self . req_fighter , [string] : self . req_accuracy , [string] : self . req_avg_dmg , [string] : self . req_max_rank , [string] : self . req_scrap , [string] : self . req_destroy , [string] : self . att_normal , [string] : self . att_hyper , [string] : self . att_jump , [string] : self . att_def , [string] : self . att_sniper , [string] : self . unk_block_d , [string] : self . ap_throw , [string] : self . ap_special , [string] : self . ap_jump , [string] : self . ap_high , [string] : self . ap_low , [string] : self . ap_middle , [string] : self . pref_jump , [string] : self . pref_fwd , [string] : self . pref_back , [string] : self . unknown_e , [string] : self . learning , [string] : self . forget , [string] : self . unk_block_f , [string] : self . enemies_inc_unranked , [string] : self . enemies_ex_unranked , [string] : self . unk_d_a , [string] : self . unk_d_b , [string] : self . winnings , [string] : self . total_value , [string] : self . unk_f_a , [string] : self . unk_f_b , [string] : self . palette , [string] : self . unk_block_i , [string] : self . photo_id , [string] : self . quotes , } [EOL] [EOL] def read_player_block ( self , parser ) : [EOL] self . name = parser . get_null_padded_str ( [number] ) [EOL] self . wins = parser . get_uint16 ( ) [EOL] self . losses = parser . get_uint16 ( ) [EOL] self . rank = parser . get_uint8 ( ) [EOL] self . har_id = Har ( parser . get_uint8 ( ) ) [EOL] [EOL] stats_a = parser . get_uint16 ( ) [EOL] stats_b = parser . get_uint16 ( ) [EOL] stats_c = parser . get_uint16 ( ) [EOL] stats_d = parser . get_uint8 ( ) [EOL] [EOL] self . arm_power = ( stats_a >> [number] ) & [number] [EOL] self . leg_power = ( stats_a >> [number] ) & [number] [EOL] self . arm_speed = ( stats_a >> [number] ) & [number] [EOL] self . leg_speed = ( stats_b >> [number] ) & [number] [EOL] self . armor = ( stats_b >> [number] ) & [number] [EOL] self . stun_resistance = ( stats_b >> [number] ) & [number] [EOL] self . agility = ( stats_c >> [number] ) & [number] [EOL] self . power = ( stats_c >> [number] ) & [number] [EOL] self . endurance = ( stats_d >> [number] ) & [number] [EOL] parser . skip ( [number] ) [comment] [EOL] [EOL] self . offense = parser . get_uint16 ( ) [EOL] self . defense = parser . get_uint16 ( ) [EOL] self . money = parser . get_uint32 ( ) [EOL] self . color_1 = parser . get_uint8 ( ) [EOL] self . color_2 = parser . get_uint8 ( ) [EOL] self . color_3 = parser . get_uint8 ( ) [EOL] [EOL] def read_pilot_block ( self , parser ) : [EOL] self . trn_name = parser . get_null_padded_str ( [number] ) [EOL] self . trn_desc = parser . get_null_padded_str ( [number] ) [EOL] self . trn_image = parser . get_null_padded_str ( [number] ) [EOL] [EOL] self . unk_f_c = parser . get_float ( ) [EOL] self . unk_f_d = parser . get_float ( ) [EOL] parser . skip ( [number] ) [EOL] self . pilot_id = parser . get_uint8 ( ) [EOL] self . unknown_k = parser . get_uint8 ( ) [EOL] self . force_arena = parser . get_uint16 ( ) [EOL] self . difficulty = Difficulty ( ( parser . get_uint8 ( ) >> [number] ) & [number] ) [EOL] self . unk_block_b = [ parser . get_uint8 ( ) for _ in range ( [number] ) ] [EOL] self . movement = parser . get_uint8 ( ) [EOL] self . unk_block_c = [ parser . get_uint16 ( ) for _ in range ( [number] ) ] [EOL] [EOL] self . enhancements = [ parser . get_uint8 ( ) for _ in range ( [number] ) ] [EOL] [EOL] parser . skip ( [number] ) [comment] [EOL] flags = parser . get_uint8 ( ) [EOL] self . secret = bool ( flags & [number] ) [EOL] self . only_fight_once = bool ( flags & [number] ) [EOL] parser . skip ( [number] ) [comment] [EOL] [EOL] reqs = [ parser . get_uint16 ( ) for _ in range ( [number] ) ] [EOL] self . req_rank = reqs [ [number] ] & [number] [EOL] self . req_max_rank = ( reqs [ [number] ] >> [number] ) & [number] [EOL] self . req_fighter = reqs [ [number] ] & [number] [EOL] self . req_difficulty = ( reqs [ [number] ] >> [number] ) & [number] [EOL] self . req_enemy = reqs [ [number] ] & [number] [EOL] self . req_vitality = reqs [ [number] ] & [number] [EOL] self . req_accuracy = ( reqs [ [number] ] >> [number] ) & [number] [EOL] self . req_avg_dmg = reqs [ [number] ] & [number] [EOL] self . req_scrap = bool ( reqs [ [number] ] & [number] ) [EOL] self . req_destroy = bool ( ( reqs [ [number] ] >> [number] ) & [number] ) [EOL] [EOL] att = [ parser . get_uint16 ( ) for _ in range ( [number] ) ] [EOL] self . att_normal = ( att [ [number] ] >> [number] ) & [number] [EOL] self . att_hyper = att [ [number] ] & [number] [EOL] self . att_jump = ( att [ [number] ] >> [number] ) & [number] [EOL] self . att_def = att [ [number] ] & [number] [EOL] self . att_sniper = ( att [ [number] ] >> [number] ) & [number] [EOL] [EOL] self . unk_block_d = [ parser . get_uint16 ( ) for _ in range ( [number] ) ] [EOL] [EOL] self . ap_throw = parser . get_int16 ( ) [EOL] self . ap_special = parser . get_int16 ( ) [EOL] self . ap_jump = parser . get_int16 ( ) [EOL] self . ap_high = parser . get_int16 ( ) [EOL] self . ap_low = parser . get_int16 ( ) [EOL] self . ap_middle = parser . get_int16 ( ) [EOL] self . pref_jump = parser . get_int16 ( ) [EOL] self . pref_fwd = parser . get_int16 ( ) [EOL] self . pref_back = parser . get_int16 ( ) [EOL] [EOL] self . unknown_e = parser . get_uint32 ( ) [EOL] self . learning = parser . get_float ( ) [EOL] self . forget = parser . get_float ( ) [EOL] [EOL] self . unk_block_f = [ parser . get_uint8 ( ) for _ in range ( [number] ) ] [EOL] [EOL] self . enemies_inc_unranked = parser . get_uint16 ( ) [EOL] self . enemies_ex_unranked = parser . get_uint16 ( ) [EOL] self . unk_d_a = parser . get_uint16 ( ) [EOL] self . unk_d_b = parser . get_uint32 ( ) [EOL] self . winnings = parser . get_uint32 ( ) [EOL] self . total_value = parser . get_uint32 ( ) [EOL] [EOL] self . unk_f_a = parser . get_float ( ) [EOL] self . unk_f_b = parser . get_float ( ) [EOL] parser . skip ( [number] ) [EOL] [EOL] self . palette = Palette ( ) . read_range ( parser , [number] , [number] ) [EOL] [EOL] self . unk_block_i = parser . get_uint16 ( ) [EOL] self . photo_id = parser . get_uint16 ( ) & [number] [EOL] [EOL] def read ( self , parser ) : [EOL] parser . set_xor_key ( self . PILOT_BLOCK_LENGTH & [number] ) [EOL] self . unknown_a = parser . get_uint32 ( ) [EOL] self . read_player_block ( parser ) [EOL] self . read_pilot_block ( parser ) [EOL] parser . set_xor_key ( None ) [EOL] self . quotes = [ parser . get_var_str ( size_includes_zero = True ) for _ in range ( [number] ) ] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $Har$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $Difficulty$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $palette.Palette$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $builtins.str$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $omftools.pyshadowdive.pilot.Har$ 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $builtins.str$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $omftools.pyshadowdive.pilot.Difficulty$ 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.float$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 $omftools.pyshadowdive.palette.Palette$ 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 $utils.parser.BinaryParser$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $utils.parser.BinaryParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , TypeVar , Any , ClassVar , Tuple , Type [EOL] import typing [EOL] import utils [EOL] import builtins [EOL] import validx [EOL] import json [EOL] import typing [EOL] from enum import Enum [EOL] from abc import ABCMeta , abstractmethod [EOL] import validx [EOL] import validx . exc [EOL] [EOL] from . utils . parser import BinaryParser [EOL] from . utils . exceptions import OMFInvalidDataException [EOL] [EOL] PropertyDict = typing . List [ typing . Tuple [ str , typing . Union [ str , float , int ] , typing . Union [ str , float , int , None ] , ] ] [EOL] [EOL] DataObjectType = typing . TypeVar ( [string] , bound = [string] ) [EOL] EntrypointType = typing . TypeVar ( [string] , bound = [string] ) [EOL] [EOL] [EOL] class DataObject ( metaclass = ABCMeta ) : [EOL] __slots__ = ( ) [EOL] [EOL] @ abstractmethod def read ( self , parser ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def write ( self , parser ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def unserialize ( self , data ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def serialize ( self ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def get_selected_props ( self , prop_names ) : [EOL] content = [ ] [EOL] for attr in prop_names : [EOL] content . append ( ( attr , getattr ( self , attr , None ) , getattr ( self , f" [string] { attr }" , None ) ) ) [EOL] return content [EOL] [EOL] def get_props ( self ) : [EOL] content = [ ] [EOL] for slots in [ getattr ( cls , [string] , [ ] ) for cls in type ( self ) . __mro__ ] : [EOL] for attr in slots : [EOL] var = getattr ( self , attr , None ) [EOL] if type ( var ) in [ float , int , str ] or issubclass ( type ( var ) , Enum ) : [EOL] dec_var = getattr ( self , f" [string] { attr }" , None ) [EOL] content . append ( ( attr , var , dec_var ) ) [EOL] return content [EOL] [EOL] [EOL] class Entrypoint ( DataObject , metaclass = ABCMeta ) : [EOL] __slots__ = ( ) [EOL] [EOL] schema = validx . Dict ( ) [EOL] [EOL] @ classmethod def load_native ( cls , filename ) : [EOL] obj = cls ( ) [EOL] with open ( filename , [string] , buffering = [number] ) as handle : [EOL] obj . read ( BinaryParser ( handle ) ) [EOL] return obj [EOL] [EOL] def save_native ( self , filename ) : [EOL] with open ( filename , [string] , buffering = [number] ) as handle : [EOL] self . write ( BinaryParser ( handle ) ) [EOL] [EOL] @ classmethod def load_json ( cls , filename ) : [EOL] obj = cls ( ) [EOL] with open ( filename , [string] , buffering = [number] ) as handle : [EOL] obj . from_json ( handle . read ( ) . decode ( ) ) [EOL] return obj [EOL] [EOL] def save_json ( self , filename , ** kwargs ) : [EOL] with open ( filename , [string] , buffering = [number] ) as handle : [EOL] handle . write ( self . to_json ( ** kwargs ) . encode ( ) ) [EOL] [EOL] def to_json ( self , ** kwargs ) : [EOL] return json . dumps ( self . serialize ( ) , ** kwargs ) [EOL] [EOL] @ classmethod def from_json ( cls , data ) : [EOL] obj = cls ( ) [EOL] decoded_data = json . loads ( data ) [EOL] [EOL] try : [EOL] obj . schema ( decoded_data ) [EOL] except validx . exc . ValidationError as e : [EOL] e . sort ( ) [EOL] rows = [ f"{ c } [string] { m }" for c , m in validx . exc . format_error ( e ) ] [EOL] raise OMFInvalidDataException ( [string] . join ( rows ) ) [EOL] [EOL] return obj . unserialize ( decoded_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[validx.Validator]$ 0 0 0 0 0 0 0 0 0 0 0 $EntrypointType$ 0 $typing.Type[EntrypointType]$ 0 $builtins.str$ 0 0 0 0 0 $typing.Type[EntrypointType]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EntrypointType$ 0 $typing.Type[EntrypointType]$ 0 $builtins.str$ 0 0 0 0 0 $typing.Type[EntrypointType]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EntrypointType$ 0 $typing.Type[EntrypointType]$ 0 $builtins.str$ 0 0 0 0 0 $typing.Type[EntrypointType]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import omftools [EOL] import builtins [EOL] import typing [EOL] [EOL] from . protos import Entrypoint , DataObject [EOL] from . utils . audio import save_wav [EOL] [EOL] [EOL] class Sound ( DataObject ) : [EOL] __slots__ = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . data = [ ] [EOL] self . unknown = [number] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . unknown , [string] : self . data , } [EOL] [EOL] def read ( self , parser ) : [EOL] length = parser . get_uint16 ( ) [EOL] if length > [number] : [EOL] self . unknown = parser . get_uint8 ( ) [EOL] self . data = [ parser . get_uint8 ( ) for _ in range ( length ) ] [EOL] else : [EOL] self . unknown = [number] [EOL] self . data = [ ] [EOL] [EOL] return self [EOL] [EOL] def save_wav ( self , filename ) : [EOL] save_wav ( self . data , filename ) [EOL] [EOL] [EOL] class SoundFile ( Entrypoint ) : [EOL] __slots__ = ( [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . sounds = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : [ s . serialize ( ) for s in self . sounds ] , } [EOL] [EOL] def read ( self , parser ) : [EOL] first = parser . get_uint32 ( ) [EOL] assert first == [number] [EOL] [EOL] header_size = parser . get_uint32 ( ) [EOL] block_count , remainder = divmod ( header_size , [number] ) [EOL] assert remainder == [number] [EOL] block_count = block_count - [number] [EOL] [EOL] [comment] [EOL] offsets = [ [number] ] [EOL] for m in range ( block_count ) : [EOL] offsets . append ( parser . get_uint32 ( ) ) [EOL] [EOL] self . sounds = [ ] [EOL] for m in range ( block_count ) : [EOL] assert parser . get_pos ( ) == offsets [ m ] [EOL] self . sounds . append ( Sound ( ) . read ( parser ) ) [EOL] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Sound]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.sounds.Sound]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.sounds.Sound]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import typing [EOL] [EOL] from . protos import Entrypoint [EOL] [EOL] [EOL] class LanguageFile ( Entrypoint ) : [EOL] __slots__ = ( [string] , [string] , ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . titles = [ ] [EOL] self . strings = [ ] [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . titles , [string] : self . strings , } [EOL] [EOL] def read ( self , parser ) : [EOL] file_size = parser . get_file_size ( ) [EOL] [EOL] [comment] [EOL] offsets = [ ] [EOL] while True : [EOL] offset = parser . get_uint32 ( ) [EOL] if offset >= file_size : [EOL] break [EOL] offsets . append ( offset ) [EOL] self . titles . append ( parser . get_null_padded_str ( [number] ) ) [EOL] offsets . append ( file_size ) [EOL] [EOL] for m in range ( len ( offsets ) - [number] ) : [EOL] block_size = offsets [ m + [number] ] - offsets [ m ] [EOL] parser . set_pos ( offsets [ m ] ) [EOL] parser . set_xor_key ( block_size & [number] ) [EOL] self . strings . append ( parser . get_null_padded_str ( block_size ) ) [EOL] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0
	0
class OMFException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class OMFInvalidDataException ( OMFException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , Tuple , Type , List [EOL] import typing [EOL] import typing [EOL] [EOL] Color = typing . Tuple [ int , int , int ] [EOL] Remapping = typing . List [ int ] [EOL] Remappings = typing . List [ Remapping ] [EOL] EncodedImage = typing . List [ int ] [EOL] RawImage = typing . List [ int ] [EOL] HitCoordinate = typing . Dict [ str , int ] [EOL] TransparencyMask = typing . List [ int ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 $typing.Type[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 $typing.Type[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] import wave [EOL] import typing [EOL] [EOL] [EOL] def save_wav ( data , filename ) : [EOL] with wave . open ( filename , [string] ) as fd : [EOL] fd . setnchannels ( [number] ) [EOL] fd . setsampwidth ( [number] ) [EOL] fd . setframerate ( [number] ) [EOL] fd . writeframes ( bytes ( data ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , BinaryIO , Optional [EOL] import typing [EOL] import builtins [EOL] import struct [EOL] from typing import BinaryIO , Optional [EOL] import os [EOL] [EOL] from . exceptions import OMFInvalidDataException [EOL] [EOL] [EOL] class BinaryParser : [EOL] __slots__ = ( [string] , [string] , ) [EOL] [EOL] def __init__ ( self , handle ) : [EOL] self . handle = handle [EOL] self . xor_key = None [EOL] [EOL] def get_file_size ( self ) : [EOL] pos = self . get_pos ( ) [EOL] self . handle . seek ( [number] , os . SEEK_END ) [EOL] size = self . handle . tell ( ) [EOL] self . set_pos ( pos ) [EOL] return size [EOL] [EOL] def xor_data ( self , data ) : [EOL] assert self . xor_key is None or [number] <= self . xor_key <= [number] [EOL] c = bytearray ( data ) [EOL] for m in range ( len ( c ) ) : [EOL] c [ m ] = self . xor_key ^ c [ m ] [EOL] [EOL] self . xor_key += [number] [EOL] if self . xor_key > [number] : [EOL] self . xor_key = [number] [EOL] return c [EOL] [EOL] def write ( self , data ) : [EOL] if self . xor_key is not None : [EOL] self . handle . write ( self . xor_data ( data ) ) [EOL] else : [EOL] self . handle . write ( data ) [EOL] [EOL] def read ( self , size ) : [EOL] data = self . handle . read ( size ) [EOL] if self . xor_key is not None : [EOL] return bytes ( self . xor_data ( data ) ) [EOL] else : [EOL] return data [EOL] [EOL] def set_xor_key ( self , key = None ) : [EOL] assert key is None or [number] <= key <= [number] [EOL] self . xor_key = key [EOL] [EOL] def skip ( self , size ) : [EOL] self . read ( size ) [EOL] [EOL] def get_pos ( self ) : [EOL] return self . handle . tell ( ) [EOL] [EOL] def set_pos ( self , pos ) : [EOL] self . handle . seek ( pos , os . SEEK_SET ) [EOL] [EOL] def check_uint8 ( self , compare_to ) : [EOL] got = self . get_uint8 ( ) [EOL] if got != compare_to : [EOL] raise OMFInvalidDataException ( f" [string] { got } [string] { compare_to }" ) [EOL] [EOL] def check_uint16 ( self , compare_to ) : [EOL] got = self . get_uint16 ( ) [EOL] if got != compare_to : [EOL] raise OMFInvalidDataException ( f" [string] { got } [string] { compare_to }" ) [EOL] [EOL] def check_uint32 ( self , compare_to ) : [EOL] got = self . get_uint32 ( ) [EOL] if got != compare_to : [EOL] raise OMFInvalidDataException ( f" [string] { got } [string] { compare_to }" ) [EOL] [EOL] def get_null_padded_str ( self , max_length ) : [EOL] chars = bytearray ( ) [EOL] ended = False [EOL] for k in range ( max_length ) : [EOL] c = self . read ( [number] ) [EOL] if c [ [number] ] == [number] : [EOL] ended = True [EOL] if ended : [EOL] continue [EOL] chars . append ( c [ [number] ] ) [EOL] return chars . decode ( [string] ) [EOL] [EOL] def get_str ( self , length ) : [EOL] return self . read ( length ) . decode ( [string] ) if length > [number] else [string] [EOL] [EOL] def get_bytes ( self , length ) : [EOL] return self . read ( length ) [EOL] [EOL] def get_int8 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_uint8 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_int16 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_uint16 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_int32 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_uint32 ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_float ( self ) : [EOL] return struct . unpack ( [string] , self . read ( [number] ) ) [ [number] ] [EOL] [EOL] def get_boolean ( self ) : [EOL] return self . get_uint8 ( ) == [number] [EOL] [EOL] def get_var_str ( self , size_includes_zero = False ) : [EOL] m_len = self . get_uint16 ( ) [EOL] if m_len == [number] and size_includes_zero : [EOL] return [string] [EOL] data = self . get_str ( m_len - ( [number] if size_includes_zero else [number] ) ) [EOL] self . check_uint8 ( [number] ) [EOL] return data [EOL] [EOL] def put_null_padded_str ( self , data , max_length ) : [EOL] buf = data . encode ( [string] ) [ : max_length ] [EOL] left = max_length - len ( buf ) [EOL] self . write ( buf ) [EOL] for _ in range ( left ) : [EOL] self . write ( [string] ) [EOL] [EOL] def put_padding ( self , length ) : [EOL] for m in range ( length ) : [EOL] self . put_uint8 ( [number] ) [EOL] [EOL] def put_str ( self , data ) : [EOL] self . write ( data . encode ( [string] ) ) [EOL] [EOL] def put_bytes ( self , data ) : [EOL] self . write ( data ) [EOL] [EOL] def put_int8 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_uint8 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_int16 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_uint16 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_int32 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_uint32 ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_float ( self , data ) : [EOL] self . write ( struct . pack ( [string] , data ) ) [EOL] [EOL] def put_boolean ( self , data ) : [EOL] self . put_uint8 ( [number] if data else [number] ) [EOL] [EOL] def put_var_str ( self , data , size_includes_zero = False ) : [EOL] m_data = data . encode ( ) [EOL] m_len = len ( m_data ) [EOL] if m_len == [number] and size_includes_zero : [EOL] self . put_uint16 ( [number] ) [EOL] return [EOL] self . put_uint16 ( m_len + ( [number] if size_includes_zero else [number] ) ) [EOL] self . write ( m_data ) [EOL] self . put_uint8 ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bytearray$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bytearray$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $builtins.bytearray$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 $builtins.bytearray$ 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bytearray$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytearray$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import types [EOL] import builtins [EOL] import typing [EOL] import palette [EOL] import PIL [EOL] from PIL import Image [EOL] from typing import List [EOL] [EOL] from . types import RawImage [EOL] from . . palette import Palette [EOL] [EOL] [EOL] def generate_png ( data , w , h , palette ) : [EOL] n_pal = [ ] [EOL] for triplet in palette . data : [EOL] n_pal . extend ( triplet ) [EOL] img = Image . new ( [string] , ( w , h ) , color = [number] ) [EOL] img . putdata ( data ) [EOL] img . putpalette ( n_pal ) [EOL] return img [EOL] [EOL] [EOL] def save_png ( img , filename , transparency = None ) : [EOL] with open ( filename , [string] ) as fd : [EOL] img . save ( fd , [string] , transparency = transparency ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PIL.Image$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from validx import Int [EOL] [EOL] Int8 = Int ( min = - [number] , max = [number] ) [EOL] UInt8 = Int ( min = [number] , max = [number] ) [EOL] Int16 = Int ( min = - [number] , max = [number] ) [EOL] UInt16 = Int ( min = [number] , max = [number] ) [EOL] Int32 = Int ( min = - [number] , max = [number] ) [EOL] UInt32 = Int ( min = [number] , max = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict , Tuple , Type [EOL] import utils [EOL] import sprite [EOL] import builtins [EOL] import typing [EOL] import omftools [EOL] import typing [EOL] from validx import Dict , Int , List , Str [EOL] [EOL] from . protos import DataObject [EOL] from . sprite import Sprite [EOL] from . utils . validator import Int16 [EOL] from . utils . types import HitCoordinate [EOL] [EOL] [EOL] class Animation ( DataObject ) : [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] schema = Dict ( { [string] : Int16 , [string] : Int16 , [string] : Str ( ) , [string] : List ( Dict ( { [string] : Int ( min = - [number] , max = [number] ) , [string] : Int ( min = [number] , max = [number] ) , [string] : Int ( min = - [number] , max = [number] ) , [string] : Int ( min = [number] , max = [number] ) , } ) ) , [string] : List ( Str ( ) ) , [string] : List ( Sprite . schema ) , } ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . start_x = [number] [EOL] self . start_y = [number] [EOL] self . hit_coords = [ ] [EOL] self . sprites = [ ] [EOL] self . base_string = [string] [EOL] self . extra_strings = [ ] [EOL] [EOL] def read ( self , parser ) : [EOL] self . start_x = parser . get_int16 ( ) [EOL] self . start_y = parser . get_int16 ( ) [EOL] assert parser . get_uint32 ( ) == [number] [EOL] coord_count = parser . get_uint16 ( ) [EOL] sprite_count = parser . get_uint8 ( ) [EOL] [EOL] self . hit_coords = [ ] [EOL] for m in range ( [number] , coord_count ) : [EOL] a = parser . get_uint16 ( ) [EOL] b = parser . get_uint16 ( ) [EOL] x = [number] & a [EOL] y = [number] & b [EOL] self . hit_coords . append ( { [string] : x if x < [number] else x - [number] , [string] : ( a >> [number] ) , [string] : y if y < [number] else y - [number] , [string] : ( b >> [number] ) , } ) [EOL] [EOL] self . base_string = parser . get_var_str ( ) [EOL] extra_str_count = parser . get_uint8 ( ) [EOL] [EOL] self . extra_strings = [ parser . get_var_str ( ) for _ in range ( extra_str_count ) ] [EOL] self . sprites = [ Sprite ( ) . read ( parser ) for _ in range ( sprite_count ) ] [EOL] [EOL] return self [EOL] [EOL] def write ( self , parser ) : [EOL] parser . put_int16 ( self . start_x ) [EOL] parser . put_int16 ( self . start_y ) [EOL] parser . put_uint32 ( [number] ) [EOL] parser . put_uint16 ( len ( self . hit_coords ) ) [EOL] parser . put_uint8 ( len ( self . sprites ) ) [EOL] [EOL] for coord in self . hit_coords : [EOL] frame_id = coord [ [string] ] [EOL] null = coord [ [string] ] [EOL] x = coord [ [string] ] [EOL] y = coord [ [string] ] [EOL] tmp = frame_id & [number] [EOL] tmp <<= [number] [EOL] tmp |= y & [number] [EOL] tmp <<= [number] [EOL] tmp |= null & [number] [EOL] tmp <<= [number] [EOL] tmp |= x & [number] [EOL] parser . put_uint32 ( tmp ) [EOL] [EOL] parser . put_var_str ( self . base_string ) [EOL] [EOL] parser . put_uint8 ( len ( self . extra_strings ) ) [EOL] for extra_string in self . extra_strings : [EOL] parser . put_var_str ( extra_string ) [EOL] [EOL] for sprite in self . sprites : [EOL] sprite . write ( parser ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . start_x , [string] : self . start_y , [string] : self . hit_coords , [string] : [ sprite . serialize ( ) for sprite in self . sprites ] , [string] : self . base_string , [string] : self . extra_strings , } [EOL] [EOL] def unserialize ( self , data ) : [EOL] self . start_x = data [ [string] ] [EOL] self . start_y = data [ [string] ] [EOL] self . hit_coords = data [ [string] ] [EOL] self . sprites = [ Sprite ( ) . unserialize ( sprite ) for sprite in data [ [string] ] ] [EOL] self . base_string = data [ [string] ] [EOL] self . extra_strings = data [ [string] ] [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[utils.types.HitCoordinate]$ 0 0 0 0 0 0 $typing.List[sprite.Sprite]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[omftools.pyshadowdive.sprite.Sprite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 $typing.List[omftools.pyshadowdive.sprite.Sprite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0