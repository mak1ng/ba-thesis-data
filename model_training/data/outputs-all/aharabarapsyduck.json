[comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple , Any , Type [EOL] import socket [EOL] import typing [EOL] import server [EOL] import socket [EOL] import struct [EOL] import sys [EOL] from collections import namedtuple [EOL] [EOL] NATTYPE = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def addr2bytes ( addr , nat_type_id ) : [EOL] [docstring] [EOL] host , port = addr [EOL] try : [EOL] host = socket . gethostbyname ( host ) [EOL] except ( socket . gaierror , socket . error ) : [EOL] raise ValueError ( [string] ) [EOL] try : [EOL] port = int ( port ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] try : [EOL] nat_type_id = int ( nat_type_id ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] bytes = socket . inet_aton ( host ) [EOL] bytes += struct . pack ( [string] , port ) [EOL] bytes += struct . pack ( [string] , nat_type_id ) [EOL] return bytes [EOL] [EOL] def main ( ) : [EOL] port = sys . argv [ [number] ] [EOL] try : [EOL] port = int ( sys . argv [ [number] ] ) [EOL] except ( IndexError , ValueError ) : [EOL] pass [EOL] [EOL] sockfd = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] sockfd . bind ( ( [string] , port ) ) [EOL] print ( [string] % port ) [EOL] [EOL] poolqueue = { } [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] symmetric_chat_clients = { } [EOL] ClientInfo = namedtuple ( [string] , [ [string] , [string] ] ) [EOL] while True : [EOL] [EOL] data , addr = sockfd . recvfrom ( [number] ) [EOL] data = data . decode ( [string] ) [EOL] if data . startswith ( [string] ) : [EOL] [comment] [EOL] try : [EOL] sockfd . sendto ( bytes ( data [ [number] : ] , [string] ) , symmetric_chat_clients [ addr ] ) [EOL] print ( [string] . format ( symmetric_chat_clients [ addr ] ) ) [EOL] print ( data [ [number] : ] ) [EOL] except KeyError : [EOL] print ( [string] ) [EOL] else : [EOL] [comment] [EOL] print ( [string] % addr ) [EOL] pool , nat_type_id = data . strip ( ) . split ( ) [EOL] sockfd . sendto ( bytes ( [string] . format ( pool ) , [string] ) , addr ) [EOL] print ( [string] . format ( pool , NATTYPE [ int ( nat_type_id ) ] ) ) [EOL] data , addr = sockfd . recvfrom ( [number] ) [EOL] data = data . decode ( [string] ) [EOL] if data != [string] : [EOL] continue [EOL] [EOL] print ( [string] , pool ) [EOL] [EOL] try : [EOL] a , b = poolqueue [ pool ] . addr , addr [EOL] nat_type_id_a , nat_type_id_b = poolqueue [ pool ] . nat_type_id , nat_type_id [EOL] sockfd . sendto ( addr2bytes ( a , nat_type_id_a ) , b ) [EOL] sockfd . sendto ( addr2bytes ( b , nat_type_id_b ) , a ) [EOL] print ( [string] , pool ) [EOL] del poolqueue [ pool ] [EOL] except KeyError : [EOL] poolqueue [ pool ] = ClientInfo ( addr , nat_type_id ) [EOL] [EOL] if pool in symmetric_chat_clients : [EOL] if nat_type_id == [string] or symmetric_chat_clients [ pool ] [ [number] ] == [string] : [EOL] [comment] [EOL] recorded_client_addr = symmetric_chat_clients [ pool ] [ [number] ] [EOL] symmetric_chat_clients [ addr ] = recorded_client_addr [EOL] symmetric_chat_clients [ recorded_client_addr ] = addr [EOL] print ( [string] ) [EOL] del symmetric_chat_clients [ pool ] [EOL] else : [EOL] del symmetric_chat_clients [ pool ] [comment] [EOL] else : [EOL] symmetric_chat_clients [ pool ] = ( nat_type_id , addr ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] assert sys . argv [ [number] ] . isdigit ( ) , [string] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional [EOL] import tui [EOL] import threading [EOL] import psy [EOL] import typing [EOL] import builtins [EOL] import curses [EOL] import sys [EOL] import npyscreen [EOL] [EOL] from threading import Thread [EOL] from typing import List , Optional [EOL] [EOL] from psy import network [EOL] from psy . client import Client , Contact [EOL] from psy . client . config import bus [EOL] [EOL] from psy . client . user import User [EOL] from psy . client . message import Message [EOL] from psy . client . ui import Contacts , MessagesHistory , MessageBox [EOL] [EOL] [EOL] class MainForm ( npyscreen . FormBaseNew ) : [EOL] [comment] [EOL] messages_history = ... [EOL] message_box = ... [EOL] contacts_box = ... [EOL] [EOL] [comment] [EOL] user = ... [EOL] current_contact = ... [EOL] current_pool = ... [EOL] [EOL] [comment] [EOL] def create ( self ) : [EOL] self . user = User ( [string] , [string] , [number] ) [EOL] self . current_contact = self . user [EOL] [EOL] y , x = self . useable_space ( ) [EOL] [EOL] [comment] [EOL] self . contacts_box = self . add ( Contacts , name = [string] , values = self . user . contact_list , width = x // [number] - [number] ) [EOL] self . messages_history = self . add ( MessagesHistory , name = [string] , values = [ ] , editable = False , relx = x // [number] , rely = [number] , max_height = y // [number] * [number] , max_width = x // [number] * [number] ) [EOL] [EOL] self . message_box = self . add ( MessageBox , name = [string] , value = [string] , relx = x // [number] , max_width = x // [number] * [number] ) [EOL] [EOL] self . setup_keyboard_handlers ( ) [EOL] [EOL] self . contacts_box . value_changed_callback = self . select_contact [EOL] [EOL] def setup_keyboard_handlers ( self ) : [EOL] self . add_handlers ( { [string] : self . quit , } ) [EOL] self . message_box . add_handlers ( { curses . KEY_IC : self . send , } ) [EOL] [EOL] def select_contact ( self , widget ) : [EOL] selected = self . contacts_box . get_value ( ) [EOL] if len ( selected ) : [EOL] index = self . contacts_box . get_value ( ) . pop ( ) [EOL] self . current_contact = self . contacts_box . get_values ( ) [ index ] [EOL] self . messages_history . values = self . current_contact . messages [EOL] master_ip = [string] [EOL] port = [number] [EOL] pool = str ( self . current_contact . pool ) [EOL] [EOL] client = Client ( master_ip , port , pool , self . current_contact . messages ) [EOL] nat_type = None [EOL] try : [EOL] nat_type = network . NATTYPE [ int ( sys . argv [ [number] ] ) ] [EOL] except IndexError : [EOL] pass [EOL] [comment] [EOL] [comment] [EOL] self . current_pool = Thread ( target = client . main , args = [ nat_type ] ) [EOL] self . current_pool . setDaemon ( True ) [EOL] self . current_pool . start ( ) [EOL] [EOL] def quit ( self , number ) : [EOL] quit ( ) [EOL] [EOL] def send ( self , number ) : [EOL] message = Message ( self . user , self . message_box . value ) [EOL] self . messages_history . values . append ( message ) [EOL] self . message_box . value = [string] [EOL] bus . emit ( [string] , message ) [EOL] [EOL] [EOL] class App ( npyscreen . StandardApp ) : [EOL] form = ... [EOL] [EOL] def onStart ( self ) : [EOL] self . form = self . addForm ( [string] , MainForm , name = [string] ) [EOL] [EOL] def refresh ( self ) : [EOL] self . form . messages_history . display ( ) [EOL] self . form . message_box . display ( ) [EOL] [EOL] [EOL] app = App ( ) [EOL] [EOL] [EOL] @ bus . on ( [string] ) @ bus . on ( [string] ) def on_change ( * args ) : [EOL] app . refresh ( ) [EOL] [EOL] [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.ui.MessagesHistory$ 0 0 0 $psy.client.ui.MessageBox$ 0 0 0 $psy.client.ui.Contacts$ 0 0 0 0 0 0 $psy.client.user.User$ 0 0 0 $psy.client.Contact$ 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.contact.Contact$ 0 0 0 $psy.client.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.ui.Contacts$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.ui.MessagesHistory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.ui.MessageBox$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.ui.Contacts$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.contact.Contact$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $psy.client.contact.Contact$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $psy.client.contact.Contact$ 0 $builtins.str$ 0 0 0 $psy.client.Client$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 $psy.client.contact.Contact$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 $psy.client.Client$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $MainForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tui.MainForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tui.App$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tui.App$ 0 0 0 0 0 0 0 $tui.App$ 0 0 0 0 0
from typing import Dict , Tuple , Literal [EOL] import typing_extensions [EOL] import optparse [EOL] import typing [EOL] import builtins [EOL] import optparse [EOL] from typing import List , Tuple , Dict [EOL] [EOL] import stun [EOL] import struct [EOL] import socket [EOL] [EOL] FullCone = [string] [comment] [EOL] RestrictNAT = [string] [comment] [EOL] RestrictPortNAT = [string] [comment] [EOL] SymmetricNAT = [string] [comment] [EOL] UnknownNAT = [string] [comment] [EOL] NATTYPE = ( FullCone , RestrictNAT , RestrictPortNAT , SymmetricNAT , UnknownNAT ) [EOL] [EOL] [EOL] def get_nat_type ( ) : [EOL] parser = optparse . OptionParser ( version = stun . __version__ ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , action = [string] , default = False , help = [string] ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , default = None , help = [string] ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , type = [string] , default = [number] , help = [string] [string] ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , default = [string] , help = [string] ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , type = [string] , default = [number] , help = [string] [string] ) [EOL] ( options , args ) = parser . parse_args ( ) [EOL] [EOL] kwargs = dict ( source_ip = options . source_ip , source_port = int ( options . source_port ) , stun_host = options . stun_host , stun_port = options . stun_port ) [EOL] nat_type , external_ip , external_port = stun . get_ip_info ( ** kwargs ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return nat_type , external_ip , external_port [EOL] [EOL] [EOL] def bytes2address ( bytes_data ) : [EOL] [docstring] [EOL] if len ( bytes_data ) != [number] : [EOL] raise ValueError ( [string] ) [EOL] [comment] [EOL] host = socket . inet_ntoa ( bytes_data [ : [number] ] ) [EOL] port = struct . unpack ( [string] , bytes_data [ - [number] : - [number] ] ) [ [number] ] [EOL] nat_type_id = struct . unpack ( [string] , bytes_data [ - [number] : ] ) [ [number] ] [EOL] [EOL] return ( host , port ) , nat_type_id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import psy [EOL] import builtins [EOL] from psy . client . contact import Contact [EOL] [EOL] [EOL] class Message : [EOL] sender = ... [EOL] content = ... [EOL] was_sent = ... [EOL] [EOL] def __init__ ( self , sender , content ) : [EOL] self . sender = sender [EOL] self . content = content [EOL] self . was_sent = False [EOL] [EOL] def __str__ ( self ) : [EOL] return self . sender . nickname + [string] + self . content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psy.client.contact.Contact$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 $psy.client.contact.Contact$ 0 $builtins.str$ 0 0 0 0 0 $psy.client.contact.Contact$ 0 $psy.client.contact.Contact$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import psy [EOL] import typing [EOL] import logging [EOL] import os [EOL] from datetime import datetime [EOL] [EOL] from event_bus import EventBus [EOL] [EOL] from psy . client . message import Message [EOL] [EOL] bus = EventBus ( ) [EOL] [EOL] [comment] [EOL] path = [string] [EOL] os . makedirs ( path , exist_ok = True ) [EOL] logging . basicConfig ( filename = path + [string] + str ( datetime . now ( ) ) + [string] , level = logging . DEBUG ) [EOL] [EOL] [EOL] @ bus . on ( [string] ) @ bus . on ( [string] ) def log ( message ) : [EOL] logging . info ( message ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] class Contact : [EOL] messages = ... [EOL] nickname = ... [EOL] name = ... [EOL] pool = ... [EOL] [EOL] def __init__ ( self , name , nickname , pool ) : [EOL] self . messages = [ ] [EOL] self . nickname = nickname [EOL] self . name = name [EOL] self . pool = pool [EOL] [EOL] def __str__ ( self ) : [EOL] return self . nickname [EOL] [EOL] def add_msg ( self , message ) : [EOL] self . messages . append ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from psy . client . client import Client [EOL] from psy . client . contact import Contact [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from typing import List [EOL] [EOL] from psy . client import Contact [EOL] [EOL] [EOL] [comment] [EOL] class User ( Contact ) : [EOL] contact_list = [ Contact ( name = [string] , nickname = [string] , pool = [number] ) , Contact ( name = [string] , nickname = [string] , pool = [number] ) , Contact ( name = [string] , nickname = [string] , pool = [number] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import psy [EOL] import typing [EOL] import npyscreen [EOL] [EOL] [EOL] class MessagesHistory ( npyscreen . BoxTitle ) : [EOL] _contained_widget = npyscreen . Pager [EOL] [EOL] [EOL] class Contacts ( npyscreen . BoxTitle ) : [EOL] _contained_widget = npyscreen . SelectOne [EOL] [EOL] [EOL] class MessageBox ( npyscreen . BoxTitle ) : [EOL] _contained_widget = npyscreen . MultiLineEdit [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[psy.client.ui.MessagesHistory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[psy.client.ui.Contacts]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[psy.client.ui.MessageBox]$ 0 0 0 0 0