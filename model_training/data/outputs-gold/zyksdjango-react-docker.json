from typing import Union , Dict [EOL] import typing [EOL] [docstring] [EOL] from celery . schedules import crontab [EOL] [EOL] [EOL] CELERYBEAT_SCHEDULE = { [string] : { [string] : [string] , [string] : [number] , [string] : { [string] : [string] } , } , [string] : { [string] : [string] , [string] : [number] , [string] : { [string] : [string] } , } , [string] : { [string] : [string] , [string] : [number] , [string] : { [string] : [string] } , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict , Union [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] from . beat import CELERYBEAT_SCHEDULE [EOL] [EOL] [EOL] APP_NAME = [string] [EOL] BROKER_HOST = [string] [EOL] BROKER_PORT = [number] [EOL] BROKER_URL = f' [string] { BROKER_HOST } [string] { BROKER_PORT }' [EOL] config = { [string] : BROKER_URL , [string] : BROKER_URL , [string] : ( [string] , ) , [string] : [number] , [string] : [number] , } [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] celery_app = Celery ( APP_NAME , broker = BROKER_URL ) [EOL] celery_app . conf . update ( config ) [EOL] celery_app . conf . CELERYBEAT_SCHEDULE = CELERYBEAT_SCHEDULE [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str]]]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str]]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . app import celery_app [EOL] [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . conf . urls import url , include [EOL] import api . urls [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , admin . site . urls ) , url ( [string] , include ( api . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from . base import * [EOL] [EOL] [EOL] DEBUG = True [EOL]	0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [comment] [EOL]	0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from main . models import Article , Comment [EOL] [EOL] [EOL] def get_article_data ( author = [string] , title = [string] , content = [string] ) : [EOL] return { [string] : author , [string] : title , [string] : content , } [EOL] [EOL] [EOL] def get_comment_data ( author = [string] , content = [string] , ** kwargs ) : [EOL] return { [string] : author , [string] : content , [string] : get_article_data ( ** kwargs ) , } [EOL] [EOL] [EOL] def create_article ( ** kwargs ) : [EOL] return Article . objects . create ( ** get_article_data ( ** kwargs ) ) [EOL] [EOL] [EOL] def create_comment ( article = None , ** kwargs ) : [EOL] data = get_comment_data ( ** kwargs ) [EOL] article_data = data . pop ( [string] ) [EOL] if article is None : [EOL] article = create_article ( ** article_data ) [EOL] return Comment . objects . create ( ** data , article = article ) [EOL] [EOL] [EOL] def get_values_set ( response , key ) : [EOL] return set ( map ( lambda a : a . get ( key , None ) , response . data ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . db . utils import DataError [EOL] from main . models import Article , Comment [EOL] from . . utils import create_article , create_comment [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ArticleModelTest ( TestCase ) : [EOL] [EOL] def test_objects_create_adds_table_row ( self ) : [EOL] create_article ( ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] [EOL] def test_author_constraint_valid ( self ) : [EOL] create_article ( author = [string] * [number] ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] [EOL] def test_author_constraint_invalid ( self ) : [EOL] with self . assertRaises ( DataError ) : [EOL] create_article ( author = [string] * [number] ) [EOL] [EOL] def test_title_constraint_valid ( self ) : [EOL] create_article ( title = [string] * [number] ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] [EOL] def test_title_constraint_invalid ( self ) : [EOL] with self . assertRaises ( DataError ) : [EOL] create_article ( title = [string] * [number] ) [EOL] [EOL] def test_content_constraint_valid ( self ) : [EOL] create_article ( content = [string] * [number] ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] [EOL] def test_content_constraint_invalid ( self ) : [EOL] with self . assertRaises ( DataError ) : [EOL] create_article ( content = [string] * [number] ) [EOL] [EOL] def test_deleting_article_deletes_comments ( self ) : [EOL] article = create_article ( ) [EOL] create_comment ( article = article ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL] article . delete ( ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] from main . models import Article , Comment [EOL] from . . utils import get_comment_data , get_values_set , create_article , get_article_data [EOL] [EOL] [EOL] class ArticleAPITestCase ( APITestCase ) : [EOL] [EOL] url = [string] [EOL] [EOL] [EOL] class ArticleAPIFormatTest ( ArticleAPITestCase ) : [EOL] [EOL] def test_api_returns_200 ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_api_returns_json_list ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertIsInstance ( response . data , list ) [EOL] [EOL] def test_api_returns_empty_list ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( len ( response . data ) , [number] ) [EOL] [EOL] [EOL] class ArticleAPIContentTest ( ArticleAPITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . article1 = create_article ( title = [string] ) [EOL] self . article2 = create_article ( title = [string] ) [EOL] [EOL] def test_api_returns_2_articles ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( len ( response . data ) , [number] ) [EOL] [EOL] def test_api_returns_correct_articles ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertSetEqual ( get_values_set ( response , [string] ) , { [string] , [string] } , ) [EOL] [EOL] def test_api_returns_newly_created_article ( self ) : [EOL] create_article ( title = [string] ) [EOL] response = self . client . get ( self . url ) [EOL] self . assertSetEqual ( get_values_set ( response , [string] ) , { [string] , [string] , [string] } , ) [EOL] [EOL] [EOL] class ArticleAPICreateTest ( ArticleAPITestCase ) : [EOL] [EOL] def test_valid_post_creates_db_record ( self ) : [EOL] data = get_article_data ( ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] response = self . client . post ( self . url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] [EOL] def test_article_post_does_not_create_comment ( self ) : [EOL] data = get_article_data ( ) [EOL] comment = get_comment_data ( ) [EOL] comment . pop ( [string] ) [EOL] data [ [string] ] = [ comment ] [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] response = self . client . post ( self . url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . db . utils import DataError [EOL] from main . models import Comment , Article [EOL] from . . utils import create_comment [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class CommentModelTest ( TestCase ) : [EOL] [EOL] def test_objects_create_adds_table_row ( self ) : [EOL] create_comment ( ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL] [EOL] def test_author_constraint_valid ( self ) : [EOL] create_comment ( author = [string] * [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL] [EOL] def test_author_constraint_invalid ( self ) : [EOL] with self . assertRaises ( DataError ) : [EOL] create_comment ( author = [string] * [number] ) [EOL] [EOL] def test_content_constraint_valid ( self ) : [EOL] create_comment ( content = [string] * [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL] [EOL] def test_content_constraint_invalid ( self ) : [EOL] with self . assertRaises ( DataError ) : [EOL] create_comment ( content = [string] * [number] ) [EOL] [EOL] def test_deleting_comment_does_not_delete_article ( self ) : [EOL] comment = create_comment ( ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL] comment . delete ( ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] from main . models import Article , Comment [EOL] from . . utils import create_comment , get_comment_data , get_values_set [EOL] [EOL] [EOL] class CommentAPITestCase ( APITestCase ) : [EOL] [EOL] url = [string] [EOL] [EOL] [EOL] class CommentAPIFormatTest ( CommentAPITestCase ) : [EOL] [EOL] def test_api_returns_200 ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_api_returns_json_list ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertIsInstance ( response . data , list ) [EOL] [EOL] def test_api_returns_empty_list ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( len ( response . data ) , [number] ) [EOL] [EOL] [EOL] class CommentAPIContentTest ( CommentAPITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . comment1 = create_comment ( content = [string] ) [EOL] self . comment2 = create_comment ( content = [string] ) [EOL] [EOL] def test_api_returns_2_comments ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( len ( response . data ) , [number] ) [EOL] [EOL] def test_api_returns_correct_comments ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertSetEqual ( get_values_set ( response , [string] ) , { [string] , [string] } , ) [EOL] [EOL] def test_api_returns_newly_created_comment ( self ) : [EOL] create_comment ( content = [string] ) [EOL] response = self . client . get ( self . url ) [EOL] self . assertSetEqual ( get_values_set ( response , [string] ) , { [string] , [string] , [string] } , ) [EOL] [EOL] [EOL] class CommentAPICreateTest ( CommentAPITestCase ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_valid_post_creates_db_record ( self ) : [EOL] data = get_comment_data ( ) [EOL] article_url = [string] [EOL] response = self . client . post ( article_url , data = data . pop ( [string] ) ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] data [ [string] ] = response . data . get ( [string] ) [EOL] response = self . client . post ( self . url , data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( Article . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Comment . objects . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from rest_framework import routers [EOL] from . views import ArticleViewSet , CommentViewSet [EOL] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , ArticleViewSet ) [EOL] router . register ( [string] , CommentViewSet ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from . models import * [EOL]	0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import backend [EOL] from django . db import models [EOL] [EOL] [EOL] class Article ( models . Model ) : [EOL] author = models . CharField ( max_length = [number] ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] content = models . CharField ( max_length = [number] ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] author = models . CharField ( max_length = [number] ) [EOL] content = models . CharField ( max_length = [number] ) [EOL] article = models . ForeignKey ( Article , null = False , related_name = [string] , on_delete = models . CASCADE ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Article]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Article]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Article]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.main.models.models.Comment]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from celery import shared_task [EOL] from faker import Faker [EOL] from . . models import Article , Comment [EOL] [EOL] [EOL] fake = Faker ( [string] ) [EOL] [EOL] [EOL] @ shared_task ( ) def create_article ( ) : [EOL] Article . objects . create ( author = fake . name ( ) [ : [number] ] , title = fake . sentence ( ) [ : [number] ] , content = fake . text ( max_nb_chars = [number] ) , ) [EOL] [EOL] [EOL] @ shared_task ( ) def create_comment ( ) : [EOL] article = Article . objects . order_by ( [string] ) . first ( ) [EOL] Comment . objects . create ( author = fake . name ( ) [ : [number] ] , content = fake . sentence ( ) [ : [number] ] , article = article , ) [EOL] [EOL] [EOL] @ shared_task def delete_all_articles ( ) : [EOL] Article . objects . all ( ) . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . model import create_article , create_comment , delete_all_articles [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import main . api . urls [EOL] from django . conf . urls import include , url [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( main . api . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0