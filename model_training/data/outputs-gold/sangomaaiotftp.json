	0
import aiotftp [EOL] import asyncio [EOL] import asyncio [EOL] import logging [EOL] [EOL] from aiotftp import Server , FileResponse , Response [EOL] [EOL] [EOL] async def read ( request ) : [EOL] if request . filename == [string] : [EOL] return Response ( [string] ) [EOL] return FileResponse ( request . filename ) [EOL] [EOL] [EOL] async def write ( request ) : [EOL] with open ( request . filename , [string] ) as fp : [EOL] async for chunk in await request . accept ( ) : [EOL] fp . write ( chunk ) [EOL] [EOL] [EOL] async def main ( loop ) : [EOL] server = Server ( read , write ) [EOL] await loop . create_datagram_endpoint ( server , local_addr = ( [string] , [number] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] try : [EOL] loop . run_until_complete ( main ( loop ) ) [EOL] loop . run_forever ( ) [EOL] except KeyboardInterrupt : [EOL] pass [EOL] loop . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0
from typing import Any [EOL] import argparse [EOL] import asyncio [EOL] import typing [EOL] import asyncio [EOL] import argparse [EOL] import logging [EOL] [EOL] import aiotftp [EOL] [EOL] [EOL] async def main ( loop ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , metavar = [string] , type = str ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] async with aiotftp . read ( args . url ) as response : [EOL] contents = await response . data ( ) [EOL] print ( contents . decode ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] try : [EOL] loop . run_until_complete ( main ( loop ) ) [EOL] except KeyboardInterrupt : [EOL] pass [EOL] loop . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0
import asyncio [EOL] import argparse [EOL] import asyncio [EOL] import argparse [EOL] import logging [EOL] [EOL] import aiotftp [EOL] [EOL] [EOL] async def main ( loop ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] with open ( args . file , [string] ) as fobj : [EOL] await aiotftp . write ( args . url , data = fobj ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] try : [EOL] loop . run_until_complete ( main ( loop ) ) [EOL] except KeyboardInterrupt : [EOL] pass [EOL] loop . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0