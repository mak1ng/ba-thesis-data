	0
	0
[comment] [EOL]	0 0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Collection , Type [EOL] import paper [EOL] import typing [EOL] import sys [EOL] from io import BytesIO [EOL] import base64 [EOL] import PIL [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . core . files . uploadedfile import InMemoryUploadedFile [EOL] from . enums import Relationship , CollectionPermission [EOL] [EOL] class User ( AbstractUser ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] name = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] bio = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True , null = True ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] linksProposed = models . IntegerField ( default = [number] ) [EOL] linksAccepted = models . IntegerField ( default = [number] ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL] [EOL] [EOL] class Following ( models . Model ) : [EOL] created = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] creator = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] following = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Collection ( models . Model ) : [EOL] created = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] author = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] name = models . CharField ( blank = True , max_length = [number] ) [EOL] description = models . CharField ( blank = True , max_length = [number] ) [EOL] permission = models . CharField ( blank = True , max_length = [number] , choices = [ ( permission . name , permission . value ) for permission in CollectionPermission ] ) [EOL] [EOL] def __str__ ( self ) : [comment] [EOL] return [string] + self . name + [string] + str ( self . id ) [EOL] [EOL] [EOL] class Topic ( models . Model ) : [EOL] created = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] name = models . CharField ( blank = True , max_length = [number] ) [EOL] collection = models . ForeignKey ( Collection , blank = True , null = True , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Link ( models . Model ) : [EOL] created = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] owner = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] url = models . CharField ( blank = True , max_length = [number] ) [EOL] collection = models . ForeignKey ( Collection , blank = True , null = True , related_name = [string] , on_delete = models . CASCADE ) [EOL] description = models . CharField ( blank = True , max_length = [number] ) [EOL] inReadingList = models . BooleanField ( default = False ) [EOL] [EOL] [EOL] class CollectionRelationship ( models . Model ) : [EOL] created = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] start = models . ForeignKey ( Collection , related_name = [string] , blank = True , null = True , on_delete = models . CASCADE ) [EOL] end = models . ForeignKey ( Collection , related_name = [string] , blank = True , null = True , on_delete = models . CASCADE ) [EOL] relationship = models . CharField ( blank = True , max_length = [number] , choices = [ ( tag . name , tag . value ) for tag in Relationship ] ) [EOL] approved = models . BooleanField ( default = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Following]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Following]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Following]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 $typing.Type[paper.users.models.Collection]$ 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 $typing.Type[paper.users.models.Collection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Link]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.CollectionRelationship]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.CollectionRelationship]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.CollectionRelationship]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.CollectionRelationship]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.CollectionRelationship]$ 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Tuple , Dict , Collection , Type [EOL] import paper [EOL] import typing [EOL] from rest_framework import serializers [EOL] from django . forms . models import model_to_dict [EOL] from django . contrib . auth . models import User [EOL] from . models import User , Following , Link , Collection , CollectionRelationship , Topic [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] [comment] [EOL] [EOL] class Meta : [EOL] model = User [EOL] [comment] [EOL] fields = [string] [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] class UserPartSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] [EOL] class FollowingSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Following [EOL] fields = [string] [EOL] [EOL] [EOL] class LinkSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Link [EOL] fields = [string] [EOL] [EOL] [EOL] class CollectionSerializer ( serializers . ModelSerializer ) : [EOL] author = UserPartSerializer ( ) [EOL] class Meta : [EOL] model = Collection [EOL] fields = [string] [EOL] [EOL] [EOL] class CollectionRelationshipSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = CollectionRelationship [EOL] fields = [string] [EOL] [EOL] [EOL] class TopicSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Topic [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paper.users.serializers.UserPartSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[paper.users.models.Topic]$ 0 0 0 $builtins.str$ 0 0 0
from enum import Enum [EOL] [EOL] class Relationship ( Enum ) : [comment] [EOL] Explains = [string] [EOL] Opposes = [string] [EOL] Subcategory = [string] [EOL] [EOL] class CollectionPermission ( Enum ) : [EOL] Private = [string] [EOL] Public = [string] [EOL] Network = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from paper . users . views import ( user_information_view , user_picture_view , edit_user_view , search_users_view , search_collections_view , users_collections_view , user_reading_list_view , users_following_view , users_followers_view , topic_view , create_topic_view , search_topics_view , all_topics_view , collection_view , edit_collection_view , link_view , edit_link_view , collection_connected_view , collection_relationship_view , signup_view , login_view , logout_view ) [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , view = login_view , name = [string] ) , path ( [string] , view = signup_view , name = [string] ) , path ( [string] , view = logout_view , name = [string] ) , url ( [string] , users_collections_view , name = [string] ) , url ( [string] , user_reading_list_view , name = [string] ) , url ( [string] , user_picture_view , name = [string] ) , url ( [string] , users_following_view , name = [string] ) , url ( [string] , users_followers_view , name = [string] ) , url ( [string] , user_reading_list_view , name = [string] ) , url ( [string] , edit_user_view , name = [string] ) , url ( [string] , search_users_view , name = [string] ) , url ( [string] , user_information_view , name = [string] ) , url ( [string] , collection_connected_view , name = [string] ) , url ( [string] , collection_relationship_view , name = [string] ) , url ( [string] , edit_collection_view , name = [string] ) , url ( [string] , collection_view , name = [string] ) , url ( [string] , search_collections_view , name = [string] ) , url ( [string] , edit_link_view , name = [string] ) , url ( [string] , link_view , name = [string] ) , url ( [string] , collection_view , name = [string] ) , url ( [string] , topic_view , name = [string] ) , url ( [string] , search_topics_view , name = [string] ) , url ( [string] , all_topics_view , name = [string] ) , url ( [string] , create_topic_view , name = [string] ) ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pytest [EOL] from django . conf import settings [EOL] from django . test import RequestFactory [EOL] [EOL] from paper . users . views import UserRedirectView , UserUpdateView [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from django . conf import settings [EOL] from django . urls import reverse , resolve [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from paper . users . forms import UserCreationForm [EOL] from paper . users . tests . factories import UserFactory [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] class TestUserCreationForm : [EOL] [comment] [EOL] def test_clean_username ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert True == True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0