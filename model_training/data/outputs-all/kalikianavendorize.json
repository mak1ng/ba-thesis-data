	0
from typing import List [EOL] import typing [EOL] import unittest [EOL] import subprocess [EOL] [EOL] [EOL] class StaticTestCase ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . paths = [ [string] , [string] ] [EOL] [EOL] def run_checker ( self , cmd ) : [EOL] try : [EOL] subprocess . check_output ( cmd ) [EOL] except subprocess . CalledProcessError as e : [EOL] self . fail ( [string] . format ( [string] . join ( e . cmd ) , e . output . decode ( ) ) ) [EOL] [EOL] def test_flake8 ( self ) : [EOL] self . run_checker ( [ [string] , [string] ] + self . paths ) [EOL] [EOL] def test_mypy ( self ) : [EOL] options = [ [string] , [string] , ] [EOL] self . run_checker ( [ [string] ] + options + self . paths ) [EOL] [EOL] def test_codespell ( self ) : [EOL] skip = [string] [EOL] self . run_checker ( [ [string] , [string] , skip , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
import fixture_setup [EOL] from unittest . mock import patch , call [EOL] [EOL] [EOL] class GitTestCase ( fixture_setup . ProcessorBaseTestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . git = self . make_processor ( ) . git [EOL] [EOL] @ patch ( [string] ) def test_clone ( self , mock_check_call ) : [EOL] self . git . clone ( [string] , [string] ) [EOL] mock_check_call . assert_has_calls ( [ call ( [ [string] , [string] , [string] , [string] , [string] ] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import urllib [EOL] import contextlib [EOL] import os [EOL] from urllib . parse import urlparse [EOL] [EOL] [EOL] @ contextlib . contextmanager def chdir ( path ) : [EOL] cwd = os . getcwd ( ) [EOL] os . chdir ( path ) [EOL] try : [EOL] yield path [EOL] finally : [EOL] os . chdir ( cwd ) [EOL] [EOL] [EOL] def host_not_vendorized ( location , allowed_hosts ) : [EOL] url = urlparse ( location ) [EOL] host = url . netloc [EOL] return bool ( host and host not in allowed_hosts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional [EOL] import typing [EOL] import builtins [EOL] import vendorize [EOL] import logging [EOL] import logging [EOL] import sys [EOL] [EOL] [EOL] class ColoredLogFormatter ( logging . Formatter ) : [EOL] colors = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] def format ( self , record ) : [EOL] message = super ( ) . format ( record ) [EOL] color = self . colors . get ( record . levelname ) [EOL] if color : [EOL] return [string] . format ( color = color , message = message ) [EOL] return message [EOL] [EOL] [EOL] def get_logger ( name ) : [EOL] logger = logging . getLogger ( name ) [EOL] formatter = ColoredLogFormatter ( ) [EOL] for stream in [ sys . stdout ] : [EOL] handler = logging . StreamHandler ( stream = stream ) [EOL] handler . setFormatter ( formatter ) [EOL] logger . addHandler ( handler ) [EOL] return logger [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] import click [EOL] import os [EOL] import subprocess [EOL] [EOL] [EOL] import vendorize . util [EOL] [EOL] [EOL] class Git : [EOL] def __init__ ( self ) : [EOL] name = os . getenv ( [string] ) [EOL] email = os . getenv ( [string] ) [EOL] if not ( name and email ) : [EOL] name = None [EOL] email = None [EOL] try : [EOL] name = subprocess . check_output ( [ [string] , [string] , [string] ] ) . decode ( ) [EOL] email = subprocess . check_output ( [ [string] , [string] , [string] ] ) . decode ( ) [EOL] except subprocess . CalledProcessError : [EOL] [comment] [EOL] pass [EOL] if name and email : [EOL] self . name = name [EOL] self . email = email [EOL] else : [EOL] raise click . ClickException ( [string] ) [EOL] [EOL] try : [EOL] os . listdir ( [string] . format ( os . getenv ( [string] ) ) ) [EOL] except PermissionError : [EOL] if os . getenv ( [string] ) == [string] : [EOL] raise click . ClickException ( [string] . format ( os . getenv ( [string] ) ) ) [EOL] else : [EOL] raise click . ClickException ( [string] ) [EOL] [EOL] def clone ( self , source , folder , branch = None ) : [EOL] try : [EOL] cmd = [ [string] , [string] , [string] , source , folder ] [EOL] if branch : [EOL] cmd += [ [string] , branch ] [EOL] subprocess . check_call ( cmd ) [EOL] except subprocess . CalledProcessError as e : [EOL] raise click . ClickException ( [string] . join ( e . cmd ) ) [EOL] [EOL] def prepare_branch ( self , folder , branch , * , init = False , commit = None ) : [EOL] try : [EOL] with vendorize . util . chdir ( folder ) : [EOL] if init : [EOL] subprocess . check_call ( [ [string] , [string] ] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , branch ] ) [EOL] if commit : [EOL] self . set_identity ( ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] ] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , commit ] ) [EOL] except subprocess . CalledProcessError as e : [EOL] raise click . ClickException ( [string] . join ( e . cmd ) ) [EOL] [EOL] def upload_branch ( self , folder , branch , target ) : [EOL] try : [EOL] with vendorize . util . chdir ( folder ) : [EOL] subprocess . check_call ( [ [string] , [string] , [string] , target , branch ] ) [EOL] except subprocess . CalledProcessError as e : [EOL] raise click . ClickException ( [string] . join ( e . cmd ) ) [EOL] [EOL] def set_identity ( self ) : [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , self . name ] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , self . email ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0