from setuptools import setup [EOL] [EOL] setup ( name = [string] , packages = [ [string] ] , include_package_data = True , install_requires = [ [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Tuple [EOL] import builtins [EOL] import typing [EOL] from typing import List , Tuple [EOL] [EOL] [EOL] class FifthStack : [EOL] def __init__ ( self ) : [EOL] self . _data = [ ] [EOL] self . _copy = [ ] [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . _data ) [EOL] [EOL] def push ( self , item ) : [EOL] self . _data . append ( item ) [EOL] [EOL] def pop ( self ) : [EOL] return self . _data . pop ( ) [EOL] [EOL] def pop2 ( self ) : [EOL] item1 = self . _data . pop ( ) [EOL] item2 = self . _data . pop ( ) [EOL] return ( item1 , item2 ) [EOL] [EOL] def save_snapshot ( self ) : [EOL] self . _copy = self . _data . copy ( ) [EOL] [EOL] def rollback ( self ) : [EOL] self . _data = self . _copy . copy ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from core . stack import FifthStack [EOL] [EOL] [EOL] @ pytest . fixture def stack ( ) : [EOL] yield FifthStack ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from fifth import ( CMDError , cmd_push , cmd_pop , cmd_add , cmd_divide ) [EOL] [EOL] [EOL] def test_cmd_push ( stack ) : [EOL] cmd_push ( stack , [string] ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_cmd_push_raises_cmderror_when_non_int_args ( stack ) : [EOL] with pytest . raises ( CMDError ) : [EOL] cmd_push ( stack , [string] ) [EOL] [EOL] [EOL] def test_cmd_pop ( stack ) : [EOL] cmd_push ( stack , [string] ) [EOL] cmd_pop ( stack , [string] ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_cmd_add ( stack ) : [EOL] cmd_push ( stack , [string] ) [EOL] cmd_add ( stack , [string] ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_cmd_divide_raises_cmderror_when_division_by_zero ( stack ) : [EOL] cmd_push ( stack , [string] ) [EOL] with pytest . raises ( CMDError ) : [EOL] cmd_divide ( stack , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] def test_stack_push ( stack ) : [EOL] stack . push ( [number] ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_stack_pop ( stack ) : [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . pop ( ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_stack_pop2 ( stack ) : [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . pop2 ( ) [EOL] assert str ( stack ) == [string] [EOL] [EOL] [EOL] def test_rollback ( stack ) : [EOL] stack . push ( [number] ) [EOL] stack . save_snapshot ( ) [EOL] stack . push ( [number] ) [EOL] stack . rollback ( ) [EOL] assert str ( stack ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0