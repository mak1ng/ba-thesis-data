from typing import List [EOL] import typing [EOL] import sys [EOL] from distutils . core import setup [EOL] [EOL] if not ( sys . version_info . major >= [number] and sys . version_info . minor >= [number] ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] VERSION = [string] [EOL] [EOL] DEPENDENCIES = [ [string] , [string] , [string] ] [EOL] [EOL] setup ( name = [string] , author = [string] , version = VERSION , packages = [ [string] ] , platforms = [string] , url = [string] , install_requires = DEPENDENCIES , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0
from typing import Any , Dict , Callable , List [EOL] import sanic [EOL] import jab [EOL] import typing [EOL] import example [EOL] import builtins [EOL] from typing import Callable , Dict , List [EOL] [EOL] from sanic import Sanic [EOL] from sanic . request import Request [EOL] from sanic . response import HTTPResponse , text [EOL] from typing_extensions import Protocol [EOL] [EOL] import jab [EOL] [EOL] [EOL] class API : [EOL] def __init__ ( self ) : [EOL] self . _sanic = Sanic ( __name__ ) [EOL] [EOL] def add_route ( self , handler , uri , methods ) : [EOL] self . _sanic . add_route ( handler , uri , methods = methods ) [EOL] [EOL] async def run ( self ) : [EOL] server = await self . _sanic . create_server ( ) [EOL] await server . wait_closed ( ) [EOL] [EOL] async def asgi ( self , scope , receive , send ) : [EOL] print ( scope ) [EOL] await send ( { [string] : [string] , [string] : [number] , [string] : [ [ [string] , [string] ] ] } ) [EOL] [EOL] await send ( { [string] : [string] , [string] : [string] } ) [EOL] return [EOL] [EOL] [EOL] class GetSetter ( Protocol ) : [EOL] def get ( self , key ) : [EOL] pass [EOL] [EOL] def set ( self , key , value ) : [EOL] pass [EOL] [EOL] [EOL] class RouteAdder ( Protocol ) : [EOL] def add_route ( self , handler , uri , methods ) : [EOL] pass [EOL] [EOL] [EOL] class Routes : [EOL] def __init__ ( self , db ) : [EOL] self . db = db [EOL] self . added = False [EOL] [EOL] async def get_secret ( self , request , name ) : [EOL] value = self . db . get ( name ) [EOL] return text ( [string] . format ( name , value ) ) [EOL] [EOL] async def post_secret ( self , request ) : [EOL] incoming = request . json [EOL] self . db . set ( incoming [ [string] ] , incoming [ [string] ] ) [EOL] return text ( [string] ) [EOL] [EOL] async def on_start ( self , app ) : [EOL] self . added = True [EOL] app . add_route ( self . get_secret , [string] , [ [string] ] ) [EOL] app . add_route ( self . post_secret , [string] , [ [string] ] ) [EOL] [EOL] [EOL] class Database : [EOL] def __init__ ( self ) : [EOL] self . _internal = { } [EOL] [EOL] def get ( self , key ) : [EOL] return self . _internal . get ( key , [string] ) [EOL] [EOL] def set ( self , key , value ) : [EOL] self . _internal [ key ] = value [EOL] [EOL] [EOL] app = jab . Harness ( ) . provide ( API , Database , Routes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable$ 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.dict$ 0 $jab.Receive$ 0 $jab.Send$ 0 0 0 0 0 $builtins.dict$ 0 0 0 $jab.Send$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jab.Send$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable$ 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $example.GetSetter$ 0 0 0 0 0 $example.GetSetter$ 0 $example.GetSetter$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 $sanic.request.Request$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $sanic.response.HTTPResponse$ 0 0 0 $sanic.request.Request$ 0 0 0 0 0 $sanic.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $RouteAdder$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $RouteAdder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $RouteAdder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import test [EOL] from inspect import isfunction [EOL] from typing import get_type_hints [EOL] [EOL] import pytest [EOL] [EOL] import jab [EOL] from dataclasses import dataclass [EOL] [EOL] [EOL] @ jab . closure class SampleClass : [EOL] def __init__ ( self , name ) : [EOL] self . _name = name [EOL] [EOL] def get_name ( self ) : [EOL] return self . _name [EOL] [EOL] [EOL] def test_closure_func ( ) : [EOL] t = SampleClass ( [string] ) [EOL] assert isfunction ( t . jab ) [EOL] [EOL] [EOL] def test_closure_return ( ) : [EOL] u = SampleClass ( [string] ) [EOL] assert get_type_hints ( u . jab ) [ [string] ] == SampleClass [EOL] [EOL] [EOL] def test_closure_pass ( ) : [EOL] v = SampleClass ( [string] ) [EOL] s = v . jab ( ) [EOL] [EOL] assert s . get_name ( ) == [string] [EOL] assert s is v [EOL] [EOL] [EOL] def test_closure_jab_flag ( ) : [EOL] a = SampleClass ( [string] ) [EOL] b = a . jab ( ) [EOL] [EOL] x = SampleClass ( [string] ) [EOL] y = x . jab ( ) [EOL] [EOL] assert b . _jab != y . _jab [EOL] assert b is not y [EOL] [EOL] with pytest . raises ( jab . Exceptions . DuplicateProvide ) : [EOL] jab . Harness ( ) . provide ( y . jab , y . jab ) [EOL] [EOL] [EOL] def test_play_well_with_others ( ) : [EOL] @ jab . closure @ dataclass class User : [EOL] name = ... [EOL] email = ... [EOL] password = ... [EOL] [EOL] user_one = User ( name = [string] , email = [string] , password = [string] ) [EOL] [EOL] assert user_one is user_one . jab ( ) [EOL] assert user_one . name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] from typing import Any [EOL] [EOL] from typing_extensions import Protocol [EOL] [EOL] [EOL] class Logger ( Protocol ) : [EOL] def debug ( self , msg ) : [EOL] pass [comment] [EOL] [EOL] def info ( self , msg ) : [EOL] pass [comment] [EOL] [EOL] def warning ( self , msg ) : [EOL] pass [comment] [EOL] [EOL] def error ( self , msg ) : [EOL] pass [comment] [EOL] [EOL] def critical ( self , msg ) : [EOL] pass [comment] [EOL] [EOL] [EOL] class DefaultJabLogger : [EOL] def __init__ ( self ) : [EOL] self . _log = logging . getLogger ( __name__ ) [EOL] ch = logging . StreamHandler ( ) [EOL] ch . setLevel ( logging . DEBUG ) [EOL] formatter = logging . Formatter ( [string] ) [EOL] ch . setFormatter ( formatter ) [EOL] self . _log . addHandler ( ch ) [EOL] [EOL] def debug ( self , msg ) : [EOL] self . _log . debug ( msg ) [EOL] [EOL] def info ( self , msg ) : [EOL] self . _log . info ( msg ) [EOL] [EOL] def warning ( self , msg ) : [EOL] self . _log . warning ( msg ) [EOL] [EOL] def error ( self , msg ) : [EOL] self . _log . error ( msg ) [EOL] [EOL] def critical ( self , msg ) : [EOL] self . _log . critical ( msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any , Type , Awaitable , Dict , Callable [EOL] import builtins [EOL] import typing [EOL] from typing import Any , Awaitable , Callable , Dict [EOL] [EOL] from typing_extensions import Protocol [EOL] [EOL] Receive = Callable [ [ ] , Awaitable [ Dict [ str , Any ] ] ] [EOL] Send = Callable [ [ Dict [ str , Any ] ] , Awaitable [ None ] ] [EOL] Handler = Callable [ [ Receive , Send ] , Awaitable [ None ] ] [EOL] [EOL] [EOL] class EventHandler ( Protocol ) : [EOL] async def asgi ( self , scope , receive , send ) : [EOL] pass [EOL] [EOL] [EOL] class NoopHandler : [EOL] async def asgi ( self , scope , receive , send ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $Receive$ 0 $Send$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $Receive$ 0 $Send$ 0 0 0 0 0
class NoConstructor ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class NoAnnotation ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class MissingDependency ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidLifecycleMethod ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class UnknownConstructor ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class DuplicateProvide ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import jab [EOL] from jab . exceptions import ( InvalidLifecycleMethod , MissingDependency , NoAnnotation , NoConstructor , DuplicateProvide , ) [EOL] from jab . harness import Harness [comment] [EOL] from jab . logging import DefaultJabLogger , Logger [comment] [EOL] from jab . asgi import Receive , Send , Handler [comment] [EOL] from jab . closures import closure [comment] [EOL] [EOL] [EOL] class Exceptions : [EOL] NoAnnotation = NoAnnotation [EOL] NoConstructor = NoConstructor [EOL] MissingDependency = MissingDependency [EOL] InvalidLifecycleMethod = InvalidLifecycleMethod [EOL] DuplicateProvide = DuplicateProvide [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jab.exceptions.NoAnnotation]$ 0 $typing.Type[jab.exceptions.NoAnnotation]$ 0 $typing.Type[jab.exceptions.NoConstructor]$ 0 $typing.Type[jab.exceptions.NoConstructor]$ 0 $typing.Type[jab.exceptions.MissingDependency]$ 0 $typing.Type[jab.exceptions.MissingDependency]$ 0 $typing.Type[jab.exceptions.InvalidLifecycleMethod]$ 0 $typing.Type[jab.exceptions.InvalidLifecycleMethod]$ 0 $typing.Type[jab.exceptions.DuplicateProvide]$ 0 $typing.Type[jab.exceptions.DuplicateProvide]$ 0
from typing import List [EOL] import typing [EOL] from typing import Any , List [EOL] [EOL] from dataclasses import dataclass , field [EOL] [EOL] [EOL] @ dataclass class Provided : [EOL] name = ... [EOL] constructor = ... [EOL] obj = ... [EOL] dependencies = field ( default_factory = list ) [EOL] [EOL] [EOL] @ dataclass class Dependency : [EOL] parameter = ... [EOL] type = ... [EOL] provided = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.List["Dependency"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $Provided$ 0 0 0
from typing import Optional , Any , Union , Type , Literal , Dict , Callable , List [EOL] import builtins [EOL] import typing [EOL] import jab [EOL] import typing_extensions [EOL] from __future__ import annotations [EOL] [EOL] import asyncio [EOL] from inspect import isclass , iscoroutinefunction , isfunction , ismethod [EOL] from typing import Any , Callable , Dict , List , Optional , Type , Union , get_type_hints , overload [EOL] [EOL] import toposort [EOL] import uvloop [EOL] from typing_extensions import Protocol [EOL] [EOL] from jab . asgi import EventHandler , Handler , Receive , Send , NoopHandler [EOL] from jab . exceptions import ( DuplicateProvide , InvalidLifecycleMethod , MissingDependency , NoAnnotation , NoConstructor , UnknownConstructor , ) [EOL] from jab . inspect import Dependency , Provided [EOL] from jab . logging import DefaultJabLogger , Logger [EOL] from jab . search import isimplementation [EOL] [EOL] DEFAULT_LOGGER = [string] [EOL] [EOL] [EOL] class Harness : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ( ) ) [EOL] [EOL] self . _provided = { } [EOL] self . _dep_graph = { } [EOL] self . _env = { } [EOL] self . _exec_order = [ ] [EOL] self . _loop = asyncio . get_event_loop ( ) [EOL] self . _logger = DefaultJabLogger ( ) [EOL] self . _asgi_handler = NoopHandler ( ) [EOL] [EOL] @ overload def inspect ( self ) : [EOL] pass [comment] [EOL] [EOL] @ overload def inspect ( self , arg ) : [EOL] pass [comment] [EOL] [EOL] def inspect ( self , arg = None ) : [EOL] [docstring] [EOL] if arg : [EOL] return self . _build_inspect ( arg ) [EOL] [EOL] return [ self . _build_inspect ( x ) for x in self . _provided . values ( ) ] [EOL] [EOL] def _build_inspect ( self , arg ) : [EOL] [docstring] [EOL] t = arg [EOL] [EOL] if isfunction ( arg ) : [EOL] deps = get_type_hints ( arg ) [EOL] t = deps [ [string] ] [EOL] [EOL] closures = arg . __closure__ or [ ] [EOL] for free_var in closures : [EOL] try : [EOL] t = free_var . cell_contents . _jab [EOL] except AttributeError : [EOL] pass [EOL] [EOL] else : [EOL] deps = get_type_hints ( arg . __init__ ) [EOL] [EOL] if isinstance ( t , str ) : [EOL] name = t [EOL] obj = self . _env [ t ] [EOL] else : [EOL] name , obj = next ( ( ( name , obj ) for name , obj in self . _env . items ( ) if isinstance ( obj , t ) ) , ( None , None ) ) [EOL] [EOL] if not name or not obj : [EOL] raise UnknownConstructor ( f"{ arg } [string] " ) [EOL] [EOL] matched = self . _dep_graph [ name ] [EOL] [EOL] dependencies = [ Dependency ( provided = self . _build_inspect ( self . _provided [ x ] ) , parameter = p , type = deps [ p ] ) for p , x in matched . items ( ) ] [EOL] [EOL] return Provided ( name = name , constructor = arg , obj = obj , dependencies = dependencies ) [EOL] [EOL] def provide ( self , * args ) : [comment] [EOL] [docstring] [EOL] for arg in args : [EOL] [EOL] if isinstance ( arg , Harness ) : [EOL] self . provide ( * arg . _provided . values ( ) ) [EOL] continue [EOL] [EOL] self . _check_provide ( arg ) [EOL] name = arg . __name__ [EOL] [EOL] if isfunction ( arg ) : [EOL] name = get_type_hints ( arg ) [ [string] ] . __name__ [EOL] [EOL] closures = arg . __closure__ or [ ] [EOL] for free_var in closures : [EOL] try : [EOL] name = free_var . cell_contents . _jab [EOL] except AttributeError : [EOL] pass [EOL] [EOL] if self . _provided . get ( name ) : [EOL] raise DuplicateProvide ( f' [string] { arg } [string] { name } [string] { self . _provided [ name ] }' ) [EOL] self . _provided [ name ] = arg [EOL] [EOL] return self [EOL] [EOL] def _build_graph ( self ) : [EOL] [docstring] [EOL] for name , obj in self . _provided . items ( ) : [EOL] if isfunction ( obj ) : [EOL] dependencies = get_type_hints ( obj ) [EOL] else : [EOL] dependencies = get_type_hints ( obj . __init__ ) [EOL] [EOL] concrete = { } [EOL] [EOL] for key , dep in dependencies . items ( ) : [EOL] if key == [string] : [EOL] continue [EOL] [EOL] if issubclass ( dep , Protocol ) : [comment] [EOL] match = self . _search_protocol ( dep ) [EOL] if match is None : [EOL] raise MissingDependency ( f" [string] { name } [string] { key } [string] { str ( dep ) } [string] " ) [EOL] else : [EOL] match = self . _search_concrete ( dep ) [EOL] if match is None : [EOL] raise MissingDependency ( f" [string] { name } [string] { key } [string] { str ( dep ) } [string] " ) [EOL] [EOL] concrete [ key ] = match [EOL] self . _dep_graph [ name ] = concrete [EOL] [EOL] def build ( self ) : [EOL] self . _build_env ( ) [EOL] [EOL] def _build_env ( self ) : [EOL] [docstring] [EOL] self . _build_graph ( ) [EOL] [EOL] deps = { } [EOL] [EOL] for k , v in self . _dep_graph . items ( ) : [EOL] deps [ k ] = { i for _ , i in v . items ( ) } [EOL] [EOL] execution_order = toposort . toposort_flatten ( deps ) [EOL] self . _exec_order = execution_order [EOL] for x in execution_order : [EOL] [EOL] if x == DEFAULT_LOGGER : [EOL] continue [EOL] [EOL] reqs = self . _dep_graph [ x ] [EOL] kwargs = { k : self . _env [ v ] for k , v in reqs . items ( ) } [EOL] [EOL] if iscoroutinefunction ( self . _provided [ x ] ) : [EOL] self . _env [ x ] = self . _loop . run_until_complete ( self . _provided [ x ] ( ** kwargs ) ) [EOL] else : [EOL] self . _env [ x ] = self . _provided [ x ] ( ** kwargs ) [EOL] [EOL] def _search_protocol ( self , dep ) : [EOL] [docstring] [EOL] for name , obj in self . _provided . items ( ) : [EOL] if isfunction ( obj ) : [EOL] obj = get_type_hints ( obj ) [ [string] ] [EOL] [EOL] if isimplementation ( obj , dep ) : [EOL] return name [EOL] [EOL] if dep is Logger : [EOL] self . _env [ DEFAULT_LOGGER ] = self . _logger [EOL] return DEFAULT_LOGGER [EOL] [EOL] return None [EOL] [EOL] def _search_concrete ( self , dep ) : [EOL] [docstring] [EOL] for name , obj in self . _provided . items ( ) : [EOL] if isfunction ( obj ) : [EOL] obj = get_type_hints ( obj ) [ [string] ] [EOL] [EOL] if obj . __module__ == dep . __module__ and obj . __name__ == dep . __name__ : [EOL] return name [EOL] [EOL] return None [EOL] [EOL] def _check_provide ( self , arg ) : [EOL] [docstring] [EOL] _is_func = False [EOL] if not isclass ( arg ) : [EOL] if not isfunction ( arg ) : [EOL] msg = f" [string] { str ( arg ) } [string] " [EOL] if ismethod ( arg ) : [EOL] if get_type_hints ( arg ) [ [string] ] == Callable : [EOL] raise NoConstructor ( msg + [string] + [string] ) [EOL] [EOL] raise NoConstructor ( msg ) [EOL] else : [EOL] _is_func = True [EOL] deps = get_type_hints ( arg ) [EOL] if len ( deps ) == [number] or deps . get ( [string] ) is None : [EOL] raise NoConstructor ( f" [string] { str ( arg ) } [string] " ) [EOL] [EOL] try : [EOL] if _is_func : [EOL] deps = get_type_hints ( arg ) [EOL] else : [EOL] deps = get_type_hints ( arg . __init__ ) [EOL] [EOL] if len ( deps ) == [number] : [EOL] raise NoAnnotation ( f" [string] { arg . __name__ } [string] " ) [EOL] except AttributeError : [EOL] [comment] [EOL] [comment] [EOL] raise NoAnnotation ( f" [string] { arg . __name__ } [string] " ) [EOL] [EOL] async def _on_start ( self ) : [EOL] [docstring] [EOL] _on_start_deps = { } [EOL] _deps_map = { } [EOL] for x in self . _exec_order : [EOL] try : [EOL] in_ = get_type_hints ( self . _env [ x ] . on_start ) [EOL] [EOL] map_ = { } [EOL] for key , dep in in_ . items ( ) : [EOL] if key == [string] : [EOL] continue [EOL] [EOL] if issubclass ( dep , Protocol ) : [comment] [EOL] match = self . _search_protocol ( dep ) [EOL] if match is None : [EOL] raise MissingDependency ( f" [string] { x } [string] { key } [string] { str ( dep ) } [string] " ) [EOL] else : [EOL] match = self . _search_concrete ( dep ) [EOL] if match is None : [EOL] raise MissingDependency ( f" [string] { x } [string] { key } [string] { str ( dep ) } [string] " ) [EOL] [EOL] map_ [ key ] = match [EOL] [EOL] _on_start_deps [ x ] = { dep for _ , dep in map_ . items ( ) } [EOL] _deps_map [ x ] = { k : self . _env [ v ] for k , v in map_ . items ( ) } [EOL] except AttributeError : [EOL] pass [EOL] [EOL] call_order = toposort . toposort_flatten ( _on_start_deps ) [EOL] [EOL] try : [EOL] self . _logger . debug ( [string] ) [EOL] [EOL] for x in call_order : [EOL] kwargs = _deps_map . get ( x , { } ) [EOL] [EOL] try : [EOL] if iscoroutinefunction ( self . _env [ x ] . on_start ) : [EOL] await self . _env [ x ] . on_start ( ** kwargs ) [EOL] else : [EOL] self . _env [ x ] . on_start ( ** kwargs ) [EOL] self . _logger . debug ( f" [string] { x } [string] " ) [EOL] except AttributeError : [EOL] pass [EOL] [EOL] except KeyboardInterrupt : [EOL] self . _logger . critical ( [string] ) [EOL] return True [EOL] except Exception as e : [EOL] self . _logger . critical ( f" [string] { str ( e ) } [string] " ) [EOL] return True [EOL] [EOL] return False [EOL] [EOL] async def _on_stop ( self ) : [EOL] [docstring] [EOL] for x in self . _exec_order [ : : - [number] ] : [EOL] try : [EOL] fn = self . _env [ x ] . on_stop [EOL] if iscoroutinefunction ( fn ) : [EOL] await fn ( ) [EOL] else : [EOL] fn ( ) [EOL] self . _logger . debug ( f" [string] { x }" ) [EOL] except AttributeError : [EOL] pass [EOL] [EOL] def _run ( self ) : [EOL] [docstring] [EOL] run_awaits = [ ] [EOL] for x in self . _exec_order : [EOL] try : [EOL] if not iscoroutinefunction ( self . _env [ x ] . run ) : [EOL] raise InvalidLifecycleMethod ( f"{ x } [string] " ) [EOL] run_awaits . append ( self . _env [ x ] . run ( ) ) [EOL] self . _logger . debug ( f" [string] { x }" ) [EOL] except AttributeError : [EOL] pass [EOL] [EOL] try : [EOL] self . _logger . debug ( [string] ) [EOL] self . _loop . run_until_complete ( asyncio . gather ( * run_awaits ) ) [EOL] except KeyboardInterrupt : [EOL] self . _logger . critical ( [string] ) [EOL] except Exception as e : [EOL] self . _logger . critical ( f" [string] { str ( e ) } [string] " ) [EOL] [EOL] def run ( self ) : [EOL] [docstring] [EOL] self . build ( ) [EOL] [EOL] interrupt = self . _loop . run_until_complete ( self . _on_start ( ) ) [EOL] [EOL] if not interrupt : [EOL] self . _run ( ) [EOL] [EOL] self . _loop . run_until_complete ( self . _on_stop ( ) ) [EOL] self . _loop . close ( ) [EOL] [EOL] def asgi ( self , scope ) : [EOL] [EOL] if scope . get ( [string] ) == [string] : [EOL] return self . _asgi_lifespan [EOL] [EOL] if scope . get ( [string] ) == [string] : [EOL] return self . _asgi_http ( scope ) [EOL] [EOL] if scope . get ( [string] ) == [string] : [EOL] return self . _asgi_ws ( scope ) [EOL] [EOL] raise Exception [EOL] [EOL] async def _asgi_lifespan ( self , receive , send ) : [EOL] [comment] [EOL] [comment] [EOL] for name , provided in self . _env . items ( ) : [EOL] if isimplementation ( type ( provided ) , EventHandler ) : [EOL] if self . _asgi_handler is not None : [EOL] [comment] [EOL] print ( [string] ) [EOL] continue [EOL] [EOL] self . _asgi_handler = provided [EOL] [EOL] if self . _asgi_handler is None : [EOL] raise Exception [comment] [EOL] [EOL] while True : [EOL] msg = await receive ( ) [EOL] [EOL] if msg . get ( [string] ) == [string] : [EOL] self . build ( ) [EOL] interrupt = True [EOL] interrupt = interrupt and await self . _on_start ( ) [EOL] [EOL] status = [string] if interrupt else [string] [EOL] await send ( { [string] : status } ) [EOL] [EOL] return [EOL] [EOL] if msg . get ( [string] ) == [string] : [EOL] await self . _on_stop ( ) [EOL] await send ( { [string] : [string] } ) [EOL] self . _loop . close ( ) [EOL] return [EOL] [EOL] def _asgi_http ( self , scope ) : [EOL] async def handler ( receive , send ) : [EOL] await self . _asgi_handler . asgi ( scope , receive , send ) [EOL] [EOL] return handler [EOL] [EOL] def _asgi_ws ( self , scope ) : [EOL] async def handler ( receive , send ) : [EOL] await self . _asgi_handler . asgi ( scope , receive , send ) [EOL] [EOL] return handler [EOL]	one$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jab.asgi.Handler$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $None$ 0 $jab.asgi.Receive$ 0 $jab.asgi.Send$ 0 0 0 0 0 0 0 0 0 0 0 0 $jab.asgi.Receive$ 0 $jab.asgi.Send$ 0 0 0 0 0 0 0 0 $jab.asgi.Handler$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $None$ 0 $jab.asgi.Receive$ 0 $jab.asgi.Send$ 0 0 0 0 0 0 0 0 0 0 0 0 $jab.asgi.Receive$ 0 $jab.asgi.Send$ 0 0 0 0 0 0
from typing import Optional , Any , Type , Dict , Callable [EOL] import builtins [EOL] import typing [EOL] from inspect import isfunction [EOL] from typing import Type , Optional , get_type_hints , Callable , Any , Union [EOL] [EOL] from typing_extensions import Protocol , _get_protocol_attrs [comment] [EOL] [EOL] [EOL] class ReturnedUnionType ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def isimplementation ( cls_ , proto ) : [EOL] [docstring] [EOL] if cls_ is None : [EOL] return False [EOL] [EOL] proto_annotations = get_type_hints ( proto ) [EOL] cls_annotations = get_type_hints ( cls_ ) [EOL] [EOL] for attr in _get_protocol_attrs ( proto ) : [EOL] try : [EOL] proto_concrete = getattr ( proto , attr ) [EOL] cls_concrete = getattr ( cls_ , attr ) [EOL] except AttributeError : [EOL] proto_concrete = proto_annotations . get ( attr ) [EOL] cls_concrete = cls_annotations . get ( attr ) [EOL] [EOL] if cls_concrete is None : [EOL] return False [EOL] [EOL] if isfunction ( proto_concrete ) : [EOL] if not func_satisfies ( cls_concrete , proto_concrete ) : [EOL] return False [EOL] [EOL] continue [EOL] [EOL] if cls_concrete != proto_concrete : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] [EOL] def func_satisfies ( impl , proto ) : [EOL] proto_signature = get_type_hints ( proto ) [EOL] [EOL] try : [EOL] impl_signature = get_type_hints ( impl ) [EOL] except AttributeError : [EOL] return False [EOL] [EOL] if issubclass ( proto_signature . get ( [string] ) , Protocol ) : [comment] [EOL] proto_return = proto_signature [ [string] ] [EOL] cls_return = impl_signature . get ( [string] ) [EOL] if isimplementation ( cls_return , proto_return ) : [EOL] impl_signature [ [string] ] = proto_signature [ [string] ] [EOL] [EOL] for param , proto_type in proto_signature . items ( ) : [EOL] try : [EOL] impl_type = impl_signature [ param ] [EOL] except KeyError : [EOL] return False [EOL] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if impl_type . __origin__ is Union : [EOL] if proto_type not in impl_type . __args__ : [EOL] return False [EOL] [EOL] if param == [string] : [EOL] raise ReturnedUnionType ( f" [string] { impl } [string] { proto } [string] " + f" [string] { proto_type } [string] { impl_type } [string] " + f" [string] " ) [EOL] [EOL] continue [EOL] except AttributeError : [EOL] pass [EOL] [EOL] if proto_type != impl_type : [EOL] return False [EOL] [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0