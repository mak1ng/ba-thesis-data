import behave [EOL] import os [EOL] [EOL] import behave [EOL] [EOL] from features . support . fixtures import ( with_aws_lambda_environment_variables , with_empty_db ) [EOL] [EOL] [EOL] TEST_DATABASE_CONNECTION_STRING = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def before_scenario ( context , scenario ) : [EOL] behave . use_fixture ( with_aws_lambda_environment_variables , context , TEST_DATABASE_CONNECTION_STRING ) [EOL] behave . use_fixture ( with_empty_db , context , TEST_DATABASE_CONNECTION_STRING ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import List [EOL] import typing [EOL] import responses [EOL] from contextlib import contextmanager [EOL] from datetime import date [EOL] from typing import List [EOL] [EOL] from behave import given , then , when [EOL] [EOL] import responses [EOL] [EOL] from features . fixtures import listens as listens_fixtures [EOL] from features . fixtures import spotify as spotify_fixtures [EOL] [EOL] from playlists . definitions import MusicProvider [EOL] from playlists . delivery . sqs_consumer import consumer as add_listen_to_playlist_consumer [EOL] from playlists . gateways . db_gateway . models import SqlPlaylist [EOL] [EOL] [EOL] DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID = [string] [EOL] [EOL] [EOL] @ given ( [string] ) def step_impl ( context ) : [EOL] context . new_listen_fields = { [string] : context . table [ [number] ] [ [string] ] , [string] : context . table [ [number] ] [ [string] ] , [string] : context . table [ [number] ] [ [string] ] , [string] : context . table [ [number] ] [ [string] ] } [EOL] [EOL] [EOL] @ given ( [string] ) def step_impl ( context , playlist_date ) : [EOL] sql_playlist = SqlPlaylist ( playlist_date = date . fromisoformat ( playlist_date ) , music_provider = MusicProvider . SPOTIFY , music_provider_playlist_id = DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID ) [EOL] context . session . add ( sql_playlist ) [EOL] context . session . commit ( ) [EOL] [EOL] [EOL] @ given ( [string] ) def step_impl ( context , playlist_date ) : [EOL] query = context . session . query ( SqlPlaylist ) [EOL] query = query . filter ( SqlPlaylist . playlist_date == date . fromisoformat ( playlist_date ) ) [EOL] assert not query . first ( ) [EOL] [EOL] [EOL] @ given ( [string] ) def step_impl ( context ) : [EOL] context . spotify_playlist_song_ids = [ row [ [string] ] for row in context . table ] [EOL] [EOL] [EOL] @ when ( [string] ) def step_impl ( context ) : [EOL] listen_id = context . new_listen_fields [ [string] ] [EOL] event = { [string] : [ { [string] : f' [string] { listen_id } [string] ' } ] } [EOL] [EOL] with playlists_mock_network ( context ) as mock_network : [EOL] add_listen_to_playlist_consumer ( event = event , context = { } ) [EOL] context . mock_calls = steal_mock_calls ( mock_network ) [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( context , playlist_date ) : [EOL] query = context . session . query ( SqlPlaylist ) [EOL] query = query . filter ( SqlPlaylist . playlist_date == date . fromisoformat ( playlist_date ) ) [EOL] sql_playlist = query . first ( ) [EOL] assert sql_playlist . playlist_date == date . fromisoformat ( playlist_date ) [EOL] assert sql_playlist . music_provider_playlist_id == DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( context , id ) : [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( context , id ) : [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] PLAYLIST_DOESNT_EXIST_SCENARIO = [string] [EOL] PLAYLIST_EXISTS_WITHOUT_LISTEN = ( [string] [string] ) [EOL] PLAYLIST_EXISTS_WITH_LISTEN = ( [string] [string] ) [EOL] [EOL] [EOL] def steal_mock_calls ( mock_network ) : [EOL] [docstring] [EOL] return [ mock_network . calls [ i ] for i in range ( len ( mock_network . calls ) ) ] [EOL] [EOL] [EOL] @ contextmanager def playlists_mock_network ( context ) : [EOL] scenario_name = context . scenario . name [EOL] if scenario_name == PLAYLIST_DOESNT_EXIST_SCENARIO : [EOL] with responses . RequestsMock ( ) as mock_network : [EOL] mock_network . add ( spotify_fixtures . make_post_refresh_token ( ) ) [EOL] mock_network . add ( listens_fixtures . make_listen_response ( ** context . new_listen_fields ) ) [EOL] mock_network . add ( spotify_fixtures . make_create_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID ) ) [EOL] mock_network . add ( spotify_fixtures . make_get_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID , [ ] ) ) [EOL] mock_network . add ( spotify_fixtures . make_add_track_to_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID , context . new_listen_fields [ [string] ] ) ) [EOL] yield mock_network [EOL] elif scenario_name == PLAYLIST_EXISTS_WITHOUT_LISTEN : [EOL] with responses . RequestsMock ( ) as mock_network : [EOL] mock_network . add ( spotify_fixtures . make_post_refresh_token ( ) ) [EOL] mock_network . add ( listens_fixtures . make_listen_response ( ** context . new_listen_fields ) ) [EOL] mock_network . add ( spotify_fixtures . make_get_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID , context . spotify_playlist_song_ids ) ) [EOL] mock_network . add ( spotify_fixtures . make_add_track_to_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID , context . new_listen_fields [ [string] ] ) ) [EOL] yield mock_network [EOL] elif scenario_name == PLAYLIST_EXISTS_WITH_LISTEN : [EOL] with responses . RequestsMock ( ) as mock_network : [EOL] mock_network . add ( spotify_fixtures . make_post_refresh_token ( ) ) [EOL] mock_network . add ( listens_fixtures . make_listen_response ( ** context . new_listen_fields ) ) [EOL] mock_network . add ( spotify_fixtures . make_get_playlist ( DEFAULT_MUSIC_PROVIDER_PLAYLIST_ID , context . spotify_playlist_song_ids ) ) [EOL] yield mock_network [EOL] pass [EOL] else : [EOL] raise RuntimeError ( f' [string] { context . scenario . name }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[responses.Call]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import responses [EOL] from responses import Response [EOL] [EOL] [EOL] def make_listen_response ( id , song_id , listen_time_utc , song_provider ) : [EOL] return Response ( method = [string] , url = f' [string] { id }' , json = { [string] : id , [string] : song_id , [string] : listen_time_utc , [string] : song_provider } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import responses [EOL] from typing import List [EOL] [EOL] from responses import Response [EOL] [EOL] [EOL] def make_post_refresh_token ( ) : [EOL] return Response ( method = [string] , url = [string] , json = { [string] : [string] } ) [EOL] [EOL] [EOL] def make_create_playlist ( id ) : [EOL] return Response ( method = [string] , url = [string] , status = [number] , json = { [string] : id } ) [EOL] [EOL] [EOL] def make_get_playlist ( id , song_ids ) : [EOL] return Response ( method = [string] , url = f' [string] { id } [string] ' , match_querystring = False , json = { [string] : [ { [string] : { [string] : song_id } } for song_id in song_ids ] , [string] : None } ) [EOL] [EOL] [EOL] def make_add_track_to_playlist ( id , song_id ) : [EOL] return Response ( method = [string] , url = f' [string] { id } [string] { song_id }' , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Generator , Dict [EOL] import behave [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from typing import Generator [EOL] from unittest . mock import patch [EOL] [EOL] import behave [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] from playlists . gateways . db_gateway import models [EOL] [EOL] [EOL] @ behave . fixture def with_aws_lambda_environment_variables ( context , database_connection_string ) : [EOL] mock_env = { [string] : database_connection_string , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] with patch . dict ( os . environ , mock_env ) : [EOL] yield [EOL] [EOL] [EOL] @ behave . fixture def with_empty_db ( context , database_connection_string ) : [EOL] engine = create_engine ( database_connection_string ) [EOL] models . Base . metadata . create_all ( engine ) [EOL] context . session = sessionmaker ( bind = engine ) ( ) [EOL] [EOL] yield [EOL] [EOL] context . session . close_all ( ) [EOL] models . Base . metadata . drop_all ( engine ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import NamedTuple [EOL] [EOL] from playlists . abc import ( DbGateway as DbGatewayABC , ListensGateway as ListensGatewayABC , MusicGateway as MusicGatewayABC ) [EOL] [EOL] [EOL] class Context ( NamedTuple ) : [EOL] db_gateway = ... [EOL] listens_gateway = ... [EOL] music_gateway = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.abc.DbGateway$ 0 0 0 $playlists.abc.ListensGateway$ 0 0 0 $playlists.abc.MusicGateway$ 0 0 0
import builtins [EOL] import playlists [EOL] from playlists . context import Context [EOL] from playlists . definitions import Listen , Playlist [EOL] from playlists . entities import playlist as playlist_entity [EOL] [EOL] [EOL] def add_listen_to_playlist ( context , listen_id ) : [EOL] [docstring] [EOL] listen = context . listens_gateway . fetch_listen ( listen_id ) [EOL] playlist = context . db_gateway . fetch_playlist_by_date ( listen . listen_date ) [EOL] if not playlist : [EOL] playlist = create_playlist_for_listen ( context , listen ) [EOL] music_provider_playlist = context . music_gateway . fetch_playlist ( playlist ) [EOL] if listen . song_id not in ( song . id for song in music_provider_playlist . songs ) : [EOL] context . music_gateway . add_listen_to_playlist ( listen , playlist ) [EOL] [EOL] [EOL] def create_playlist_for_listen ( context , listen ) : [EOL] music_provider_playlist_input = playlist_entity . make_music_provider_playlist_input ( for_date = listen . listen_date , music_provider = listen . song_provider ) [EOL] music_provider_playlist = context . music_gateway . create_playlist ( music_provider_playlist_input ) [EOL] return context . db_gateway . create_playlist ( music_provider_playlist , listen . listen_date ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.definitions.Playlist$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
class PlaylistsException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ListensError ( PlaylistsException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class MusicProviderError ( PlaylistsException ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import playlists [EOL] import datetime [EOL] import builtins [EOL] import requests [EOL] import typing [EOL] from datetime import date , datetime [EOL] from typing import Dict [EOL] [EOL] import requests [EOL] [EOL] from playlists import exceptions [EOL] from playlists . abc import ListensGateway as ListensGatewayABC [EOL] from playlists . definitions import Listen , MusicProvider [EOL] [EOL] [EOL] class ListensGateway ( ListensGatewayABC ) : [EOL] base_url = [string] [EOL] [EOL] def __init__ ( self , api_key ) : [EOL] self . api_key = api_key [EOL] [EOL] def fetch_listen ( self , listen_id ) : [EOL] r = requests . get ( f'{ self . base_url } [string] { listen_id }' , headers = { [string] : self . api_key } ) [EOL] if not r . status_code == requests . codes . all_good : [EOL] raise exceptions . ListensError ( [string] f'{ r . json ( ) [ [string] ] }' ) [EOL] return _pluck_listen ( r . json ( ) ) [EOL] [EOL] [EOL] def _pluck_listen ( raw_listen ) : [EOL] return Listen ( id = raw_listen [ [string] ] , song_id = raw_listen [ [string] ] , song_provider = MusicProvider [ raw_listen [ [string] ] ] , listen_date = _pluck_date ( raw_listen [ [string] ] ) , ) [EOL] [EOL] [EOL] def _pluck_date ( datetime_string ) : [EOL] [docstring] [EOL] return datetime . fromisoformat ( datetime_string ) . date ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $playlists.definitions.Listen$ 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import playlists [EOL] import os [EOL] from datetime import date [EOL] [EOL] from faaspact_maker import ( Interaction , PactMaker , ProviderState , RequestWithMatchers , ResponseWithMatchers , matchers ) [EOL] [EOL] import pytest [EOL] [EOL] from playlists import exceptions [EOL] from playlists . definitions import Listen , MusicProvider [EOL] from playlists . gateways import ListensGateway [EOL] [EOL] [EOL] PACT_DIRECTORY = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] class TestFetchListen : [EOL] [EOL] def test_fetches_listen_by_id ( self ) : [EOL] [comment] [EOL] listens_service_gateway = ListensGateway ( api_key = [string] ) [EOL] [EOL] [comment] [EOL] listen_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] pact = PactMaker ( [string] , [string] , [string] , pact_directory = PACT_DIRECTORY ) [EOL] pact . add_interaction ( Interaction ( description = [string] , provider_states = ( ProviderState ( name = [string] , params = { [string] : listen_fields } ) , ) , request = RequestWithMatchers ( method = [string] , path = [string] ) , response = ResponseWithMatchers ( status = [number] , body = listen_fields ) ) ) [EOL] [EOL] [comment] [EOL] with pact . start_mocking ( ) : [EOL] listen = listens_service_gateway . fetch_listen ( [string] ) [EOL] [EOL] [comment] [EOL] expected_listen = Listen ( id = [string] , song_id = [string] , listen_date = date ( [number] , [number] , [number] ) , song_provider = MusicProvider . SPOTIFY ) [EOL] assert listen == expected_listen [EOL] [EOL] def test_raises_exception_if_listen_doesnt_exist ( self ) : [EOL] [comment] [EOL] listens_service_gateway = ListensGateway ( api_key = [string] ) [EOL] [EOL] [comment] [EOL] pact = PactMaker ( [string] , [string] , [string] , pact_directory = PACT_DIRECTORY ) [EOL] pact . add_interaction ( Interaction ( description = [string] , provider_states = ( ProviderState ( [string] ) , ) , request = RequestWithMatchers ( method = [string] , path = [string] ) , response = ResponseWithMatchers ( status = [number] , body = { [string] : matchers . Like ( [string] ) } ) ) ) [EOL] [EOL] [comment] [EOL] with pact . start_mocking ( ) : [EOL] with pytest . raises ( exceptions . ListensError ) : [EOL] listens_service_gateway . fetch_listen ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $playlists.gateways.listens_gateway.ListensGateway$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $playlists.definitions.listen.Listen$ 0 $playlists.gateways.listens_gateway.ListensGateway$ 0 0 0 0 0 0 0 0 0 $playlists.definitions.listen.Listen$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.definitions.listen.Listen$ 0 $playlists.definitions.listen.Listen$ 0 0 0 $None$ 0 0 0 0 0 0 0 $playlists.gateways.listens_gateway.ListensGateway$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.gateways.listens_gateway.ListensGateway$ 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import builtins [EOL] import requests [EOL] import typing [EOL] import playlists [EOL] from typing import Dict , List , cast [EOL] from urllib . parse import urlencode [EOL] [EOL] import requests [EOL] [EOL] from playlists . abc import MusicGateway as MusicGatewayABC [EOL] from playlists . definitions import ( Listen , MusicProvider , MusicProviderPlaylist , MusicProviderPlaylistInput , Playlist , Song ) [EOL] from playlists . exceptions import MusicProviderError [EOL] [EOL] [EOL] class MusicGateway ( MusicGatewayABC ) : [EOL] auth_url = [string] [EOL] base_url = [string] [EOL] [EOL] def __init__ ( self , client_id , client_secret , refresh_token ) : [EOL] [docstring] [EOL] self . access_token = MusicGateway . fetch_access_token ( client_id , client_secret , refresh_token ) [EOL] [EOL] def create_playlist ( self , playlist_input ) : [EOL] r = requests . post ( f'{ self . base_url } [string] ' , headers = { [string] : f' [string] { self . access_token }' } , json = _build_create_playlist_body ( playlist_input ) ) [EOL] if not r . status_code == requests . codes . created : [EOL] raise MusicProviderError ( f' [string] { r . status_code } [string] { r . text }' ) [EOL] return _pluck_new_music_provider_playlist ( r . json ( ) ) [EOL] [EOL] def add_listen_to_playlist ( self , listen , playlist ) : [EOL] r = requests . post ( f'{ self . base_url } [string] { playlist . music_provider_playlist_id } [string] ' , headers = { [string] : f' [string] { self . access_token }' } , params = _build_add_tracks_params ( listen ) ) [EOL] if not r . status_code == requests . codes . created : [EOL] raise MusicProviderError ( f' [string] { r . status_code } [string] { r . text }' ) [EOL] return None [EOL] [EOL] def fetch_playlist ( self , playlist ) : [EOL] next_page = ( f'{ self . base_url } [string] { playlist . music_provider_playlist_id } [string] ' + urlencode ( { [string] : [string] , [string] : [number] } ) ) [EOL] songs = [ ] [EOL] while next_page : [EOL] r = requests . get ( next_page , headers = { [string] : f' [string] { self . access_token }' } ) [EOL] if not r . status_code == requests . codes . all_good : [EOL] raise MusicProviderError ( f' [string] { r . status_code } [string] { r . text }' ) [EOL] songs += _pluck_songs ( r . json ( ) [ [string] ] ) [EOL] next_page = r . json ( ) [ [string] ] [EOL] [EOL] return MusicProviderPlaylist ( id = playlist . music_provider_playlist_id , music_provider = MusicProvider . SPOTIFY , songs = tuple ( songs ) ) [EOL] [EOL] @ staticmethod def fetch_access_token ( client_id , client_secret , refresh_token ) : [EOL] r = requests . post ( MusicGateway . auth_url , auth = ( client_id , client_secret ) , data = { [string] : [string] , [string] : refresh_token } ) [EOL] if not r . status_code == requests . codes . all_good : [EOL] raise MusicProviderError ( f' [string] { r . status_code } [string] { r . text }' ) [EOL] return cast ( str , r . json ( ) [ [string] ] ) [EOL] [EOL] [EOL] def _pluck_songs ( raw_songs ) : [EOL] return [ Song ( raw_song [ [string] ] [ [string] ] ) for raw_song in raw_songs ] [EOL] [EOL] [EOL] def _build_create_playlist_body ( playlist_input ) : [EOL] return { [string] : playlist_input . name , [string] : playlist_input . description , [string] : True } [EOL] [EOL] [EOL] def _build_add_tracks_params ( listen ) : [EOL] return { [string] : f' [string] { listen . song_id }' } [EOL] [EOL] [EOL] def _pluck_new_music_provider_playlist ( raw_playlist ) : [EOL] return MusicProviderPlaylist ( id = raw_playlist [ [string] ] , music_provider = MusicProvider . SPOTIFY , songs = tuple ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . db_gateway import DbGateway [EOL] from . listens_gateway import ListensGateway [EOL] from . music_gateway import MusicGateway [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import builtins [EOL] import typing [EOL] import playlists [EOL] import datetime [EOL] from datetime import date [EOL] from typing import Optional [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] from playlists . abc import DbGateway as DbGatewayABC [EOL] from playlists . definitions import MusicProviderPlaylist , Playlist [EOL] from playlists . gateways . db_gateway . models import Base , SqlPlaylist [EOL] [EOL] [EOL] class DbGateway ( DbGatewayABC ) : [EOL] [EOL] def __init__ ( self , db_name , echo = False ) : [EOL] self . engine = create_engine ( db_name , echo = echo ) [EOL] self . session = sessionmaker ( bind = self . engine ) ( ) [EOL] [EOL] def fetch_playlist_by_date ( self , playlist_date ) : [EOL] query = self . session . query ( SqlPlaylist ) . filter ( SqlPlaylist . playlist_date == playlist_date ) [EOL] sql_playlist = query . first ( ) [EOL] return sql_playlist and _pluck_playlist ( sql_playlist ) [EOL] [EOL] def create_playlist ( self , music_provider_playlist , playlist_date ) : [EOL] sql_playlist = _build_sql_playlist ( music_provider_playlist , playlist_date ) [EOL] self . session . add ( sql_playlist ) [EOL] self . session . commit ( ) [EOL] return _pluck_playlist ( sql_playlist ) [EOL] [EOL] def persist_schema ( self ) : [EOL] [docstring] [EOL] Base . metadata . create_all ( self . engine ) [EOL] [EOL] [EOL] def _build_sql_playlist ( music_provider_playlist , playlist_date ) : [EOL] return SqlPlaylist ( playlist_date = playlist_date , music_provider = music_provider_playlist . music_provider , music_provider_playlist_id = music_provider_playlist . id ) [EOL] [EOL] [EOL] def _pluck_playlist ( sql_playlist ) : [EOL] return Playlist ( id = sql_playlist . id , playlist_date = sql_playlist . playlist_date , music_provider_playlist_id = sql_playlist . music_provider_playlist_id , music_provider = sql_playlist . music_provider ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[playlists.definitions.Playlist]$ 0 0 0 $datetime.date$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $playlists.definitions.Playlist$ 0 0 0 $playlists.definitions.MusicProviderPlaylist$ 0 $datetime.date$ 0 0 0 $playlists.gateways.db_gateway.models.SqlPlaylist$ 0 0 0 $playlists.definitions.MusicProviderPlaylist$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 $playlists.gateways.db_gateway.models.SqlPlaylist$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.gateways.db_gateway.models.SqlPlaylist$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.definitions.Playlist$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . db_gateway import DbGateway [EOL]	0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import playlists [EOL] from datetime import datetime [EOL] from typing import Any [EOL] [EOL] from sqlalchemy import Column , Date , DateTime , Enum , Integer , String [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] [EOL] from playlists . definitions import MusicProvider [EOL] [EOL] [EOL] Base = declarative_base ( ) [EOL] [EOL] [EOL] class SqlPlaylist ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer ( ) , primary_key = True ) [EOL] playlist_date = Column ( Date ( ) , nullable = False , index = True , unique = True ) [EOL] music_provider = Column ( Enum ( MusicProvider ) , nullable = False ) [EOL] music_provider_playlist_id = Column ( String ( [number] ) , nullable = False ) [EOL] [EOL] created_at_utc = Column ( DateTime ( ) , nullable = False , default = datetime . utcnow ) [EOL] updated_on_utc = Column ( DateTime ( ) , default = datetime . utcnow , onupdate = datetime . utcnow ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[playlists.gateways.db_gateway.models.SqlPlaylist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from . db_gateway import DbGateway [EOL] from . listens_gateway import ListensGateway [EOL] from . music_gateway import MusicGateway [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import playlists [EOL] from abc import ABC , abstractmethod [EOL] [EOL] from playlists . definitions import ( Listen , MusicProviderPlaylist , MusicProviderPlaylistInput , Playlist ) [EOL] [EOL] [EOL] class MusicGateway ( ABC ) : [EOL] [EOL] @ abstractmethod def create_playlist ( self , playlist_input ) : [EOL] ... [EOL] [EOL] @ abstractmethod def add_listen_to_playlist ( self , listen , playlist ) : [EOL] ... [EOL] [EOL] @ abstractmethod def fetch_playlist ( self , playlist ) : [EOL] ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.definitions.MusicProviderPlaylist$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $playlists.definitions.Listen$ 0 $playlists.definitions.Playlist$ 0 0 0 0 0 0 0 0 0 $playlists.definitions.MusicProviderPlaylist$ 0 0 0 $playlists.definitions.Playlist$ 0 0 0 0 0
import builtins [EOL] import playlists [EOL] from abc import ABC , abstractmethod [EOL] [EOL] from playlists . definitions import Listen [EOL] [EOL] [EOL] class ListensGateway ( ABC ) : [EOL] [EOL] @ abstractmethod def fetch_listen ( self , listen_id ) : [EOL] ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.definitions.Listen$ 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Optional [EOL] import playlists [EOL] import typing [EOL] import datetime [EOL] from abc import ABC , abstractmethod [EOL] from datetime import date [EOL] from typing import Optional [EOL] [EOL] from playlists . definitions import MusicProviderPlaylist , Playlist [EOL] [EOL] [EOL] class DbGateway ( ABC ) : [EOL] [EOL] @ abstractmethod def fetch_playlist_by_date ( self , playlist_date ) : [EOL] ... [EOL] [EOL] @ abstractmethod def create_playlist ( self , music_provider_playlist , playlist_date ) : [EOL] ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[playlists.definitions.Playlist]$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $playlists.definitions.Playlist$ 0 0 0 $playlists.definitions.MusicProviderPlaylist$ 0 $datetime.date$ 0 0 0 0 0
from typing import Any , Tuple , List , Dict [EOL] import builtins [EOL] import typing [EOL] import playlists [EOL] import json [EOL] import os [EOL] from typing import Dict , List [EOL] [EOL] from aws_xray_sdk . core import patch as xray_patch [EOL] [EOL] import sentry_sdk [EOL] from sentry_sdk . integrations . aws_lambda import AwsLambdaIntegration [EOL] [EOL] from playlists . delivery import util [EOL] from playlists . use_playlists import add_listen_to_playlist [EOL] [EOL] [EOL] if os . environ . get ( [string] ) : [EOL] [comment] [EOL] sentry_sdk . init ( dsn = [string] , integrations = [ AwsLambdaIntegration ( ) ] ) [EOL] [EOL] [comment] [EOL] libraries = ( [string] , [string] , [string] , [string] ) [EOL] xray_patch ( libraries ) [EOL] [EOL] [EOL] def consumer ( event , context ) : [EOL] playlists_context = util . create_default_context ( ) [EOL] for listen_id in _pluck_listen_ids ( event ) : [EOL] add_listen_to_playlist ( playlists_context , listen_id ) [EOL] [EOL] [EOL] def _pluck_listen_ids ( aws_event ) : [EOL] [docstring] [EOL] message_bodies = [ json . loads ( record [ [string] ] ) for record in aws_event [ [string] ] ] [EOL] return [ message_body [ [string] ] for message_body in message_bodies ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import playlists [EOL] import os [EOL] [EOL] from playlists . context import Context [EOL] from playlists . gateways import DbGateway , ListensGateway , MusicGateway [EOL] [EOL] [EOL] def create_default_context ( ) : [EOL] database_connection_string = os . environ [ [string] ] [EOL] listens_service_api_key = os . environ [ [string] ] [EOL] spotify_client_id = os . environ [ [string] ] [EOL] spotify_client_secret = os . environ [ [string] ] [EOL] spotify_user_refresh_token = os . environ [ [string] ] [EOL] [EOL] return Context ( db_gateway = DbGateway ( database_connection_string ) , listens_gateway = ListensGateway ( listens_service_api_key ) , music_gateway = MusicGateway ( client_id = spotify_client_id , client_secret = spotify_client_secret , refresh_token = spotify_user_refresh_token ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playlists.context.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import NamedTuple [EOL] [EOL] from playlists . definitions import MusicProvider [EOL] [EOL] [EOL] class MusicProviderPlaylistInput ( NamedTuple ) : [EOL] name = ... [EOL] description = ... [EOL] music_provider = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $playlists.definitions.MusicProvider$ 0 0 0
from datetime import date [EOL] from typing import NamedTuple [EOL] [EOL] from playlists . definitions import MusicProvider [EOL] [EOL] [EOL] class Listen ( NamedTuple ) : [EOL] id = ... [EOL] song_id = ... [EOL] listen_date = ... [EOL] song_provider = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $datetime.date$ 0 0 0 $playlists.definitions.MusicProvider$ 0 0 0
from enum import Enum , unique [EOL] [EOL] [EOL] @ unique class MusicProvider ( Enum ) : [EOL] SPOTIFY = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from . music_provider import MusicProvider [EOL] [EOL] [comment] [EOL] from . song import Song [EOL] from . listen import Listen [EOL] from . music_provider_playlist import MusicProviderPlaylist [EOL] from . music_provider_playlist_input import MusicProviderPlaylistInput [EOL] from . playlist import Playlist [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import NamedTuple , Tuple [EOL] [EOL] from playlists . definitions import MusicProvider , Song [EOL] [EOL] [EOL] class MusicProviderPlaylist ( NamedTuple ) : [EOL] id = ... [EOL] music_provider = ... [EOL] songs = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $playlists.definitions.MusicProvider$ 0 0 0 $typing.Tuple[playlists.definitions.Song,...]$ 0 0 0
from typing import NamedTuple [EOL] [EOL] [EOL] class Song ( NamedTuple ) : [EOL] id = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from datetime import date [EOL] from typing import NamedTuple [EOL] [EOL] from playlists . definitions import MusicProvider [EOL] [EOL] [EOL] class Playlist ( NamedTuple ) : [EOL] id = ... [EOL] playlist_date = ... [EOL] music_provider_playlist_id = ... [EOL] music_provider = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.date$ 0 0 0 $builtins.str$ 0 0 0 $playlists.definitions.MusicProvider$ 0 0 0