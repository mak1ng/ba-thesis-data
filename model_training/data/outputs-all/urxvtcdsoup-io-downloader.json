from setuptools import setup , find_packages [EOL] [EOL] setup ( name = [string] , packages = find_packages ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import soup_downloader [EOL] import tests [EOL] import builtins [EOL] import typing [EOL] import os [EOL] import unittest [EOL] [EOL] from typing import ClassVar [EOL] [EOL] from soup_downloader . get_content_links import ( Soup , SoupPage , AbstractSoupPageSourceProvider , ) [EOL] [EOL] [EOL] def _get_current_file_dirname ( ) : [EOL] return os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] [EOL] [EOL] class _TestSoupPageSourceProvider ( AbstractSoupPageSourceProvider ) : [EOL] def __init__ ( self , test_pages_path ) : [EOL] self . test_pages_path = test_pages_path [EOL] [EOL] def get_source ( self , file_name ) : [EOL] file_path = self . _get_test_page_path ( file_name ) [EOL] with open ( file_path ) as source_file : [EOL] return source_file . read ( ) [EOL] [EOL] def _get_test_page_path ( self , test_page_file_name ) : [EOL] return os . path . join ( self . test_pages_path , test_page_file_name ) [EOL] [EOL] [EOL] class TestGetLinksFromPage ( unittest . TestCase ) : [EOL] page_provider = ... [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] cls . page_provider = _TestSoupPageSourceProvider ( _get_current_file_dirname ( ) ) [EOL] [EOL] def test_getting_simple_img_url ( self ) : [EOL] soup = Soup ( [string] , self . page_provider ) [EOL] page = next ( iter ( soup ) ) [EOL] urls = page . get_content_urls ( ) [EOL] [EOL] assert [string] in urls [EOL] [EOL] def test_getting_content_urls_from_page ( self ) : [EOL] soup = Soup ( [string] , self . page_provider ) [EOL] page = next ( iter ( soup ) ) [EOL] urls = page . get_content_urls ( ) [EOL] [EOL] assert [string] in urls [EOL] [EOL] def test_getting_next_page_url ( self ) : [EOL] soup = Soup ( [string] , self . page_provider ) [EOL] page = next ( iter ( soup ) ) [EOL] [EOL] next_page = page . get_next_page_relative_url ( ) [EOL] [EOL] assert next_page == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[_TestSoupPageSourceProvider]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $soup_downloader.get_content_links.SoupPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $soup_downloader.get_content_links.SoupPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $soup_downloader.get_content_links.SoupPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $soup_downloader.get_content_links.SoupPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [EOL] import logging [EOL] import requests [EOL] import builtins [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] import requests [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] logger . addHandler ( logging . NullHandler ( ) ) [EOL] [EOL] [EOL] def download_content ( urls_file_name , download_dir ) : [EOL] with open ( urls_file_name , [string] ) as content_links_file : [EOL] for url in content_links_file . readlines ( ) : [EOL] url = url . strip ( ) [EOL] target_path = os . path . join ( download_dir , url . split ( [string] ) [ - [number] ] ) [EOL] download_single ( url , target_path ) [EOL] [EOL] [EOL] def download_single ( url , target_path ) : [EOL] try : [EOL] response = requests . get ( url ) [EOL] response . raise_for_status ( ) [EOL] except Exception : [EOL] logger . error ( f" [string] { url }" ) [EOL] return [EOL] [EOL] logger . info ( f" [string] { url }" ) [EOL] [EOL] with open ( target_path , mode = [string] ) as target_file : [EOL] target_file . write ( response . content ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logger . addHandler ( logging . StreamHandler ( ) ) [EOL] [EOL] urls_file_name , download_dir = sys . argv [ [number] : ] [EOL] download_content ( urls_file_name , download_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0