from typing import List [EOL] import typing [EOL] [docstring] [EOL] from packaging import version [EOL] [EOL] collect_ignore = [ [string] ] [EOL] collect_ignore . append ( [string] ) [EOL] collect_ignore . append ( [string] ) [EOL] collect_ignore . append ( [string] ) [EOL] collect_ignore . append ( [string] ) [EOL] [EOL] try : [EOL] import tensorflow as tf [EOL] [comment] [EOL] if version . parse ( tf . __version__ ) < version . parse ( [string] ) : [EOL] collect_ignore . remove ( [string] ) [EOL] else : [EOL] collect_ignore . remove ( [string] ) [EOL] except ImportError : [EOL] pass [EOL] [EOL] try : [EOL] import torch [EOL] collect_ignore . remove ( [string] ) [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from setuptools import setup , find_packages [EOL] [EOL] with open ( [string] , [string] ) as rf : [EOL] README = rf . read ( ) [EOL] [EOL] with open ( [string] , [string] ) as vf : [EOL] VERSION = vf . read ( ) [EOL] [EOL] setup ( name = [string] , version = VERSION , description = [string] , long_description = README , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , packages = find_packages ( exclude = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tqdm [EOL] import time [EOL] import torch [EOL] [EOL] from rinokeras . torch . functional import multi_head_attention_map , attention_map [EOL] [EOL] BATCH_SIZE = [number] [EOL] SEQ_LEN = [number] [EOL] REPS = [number] [EOL] MAT_SIZE = [number] [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] qx = torch . randn ( BATCH_SIZE , SEQ_LEN , MAT_SIZE ) . cuda ( ) [EOL] kx = torch . randn ( BATCH_SIZE , SEQ_LEN , MAT_SIZE ) . cuda ( ) [EOL] vx = torch . randn ( BATCH_SIZE , SEQ_LEN , MAT_SIZE ) . cuda ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] output = torch . zeros ( BATCH_SIZE , SEQ_LEN , MAT_SIZE ) . cuda ( ) [EOL] s0 = time . time ( ) [EOL] for _ in tqdm . tqdm ( range ( REPS ) ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] output += multi_head_attention_map ( qx , kx , vx , [number] , return_attention_weights = False ) [EOL] print ( output ) [EOL] s1 = time . time ( ) [EOL] [EOL] [comment] [EOL] flops = BATCH_SIZE * ( ( SEQ_LEN * SEQ_LEN * MAT_SIZE * [number] ) * [number] ) [EOL] atime = ( s1 - s0 ) / REPS [comment] [EOL] [EOL] print ( [string] , atime ) [EOL] print ( [string] , ( flops / atime ) / [number] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0
from . metrics import MetricsAccumulator [EOL] from . runners import BaseExperimentRunner , MINEExperimentRunner [EOL] from . experiments import Experiment , MINEExperiment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import tensorflow [EOL] import tensorflow as tf [EOL] from timeit import default_timer as timer [EOL] from typing import Dict [EOL] from collections import defaultdict [EOL] [EOL] class MetricsAccumulator : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _totalmetrics = defaultdict ( lambda : [number] ) [EOL] self . _nupdates = [number] [EOL] self . _start_time = float ( [string] ) [EOL] [EOL] def add ( self , metrics ) : [EOL] for metric , value in metrics . items ( ) : [EOL] self . _totalmetrics [ metric ] += value . numpy ( ) [EOL] self . _nupdates += [number] [EOL] [EOL] def start_timer ( self ) : [EOL] self . _start_time = timer ( ) [EOL] [EOL] def end_timer ( self ) : [EOL] self . runtime = timer ( ) - self . _start_time [EOL] self . _totalmetrics [ [string] ] = self . runtime * self . _nupdates [EOL] [EOL] def get_average ( self ) : [EOL] assert self . nupdates > [number] [EOL] return { metric : value / self . nupdates for metric , value in self . _totalmetrics . items ( ) } [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . get_average ( ) ) [EOL] [EOL] def items ( self ) : [EOL] return self . get_average ( ) . items ( ) [EOL] [EOL] def __getitem__ ( self , value ) : [EOL] if value not in self . _totalmetrics : [EOL] raise KeyError ( value ) [EOL] return self . _totalmetrics [ value ] / self . nupdates [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . get_average ( ) ) [EOL] [EOL] @ property def nupdates ( self ) : [EOL] return self . _nupdates	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,tensorflow.Tensor]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,tensorflow.Tensor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0
from . MetricsAccumulator import MetricsAccumulator	0 0 0 0 0
[EOL] from . Experiment import Experiment [EOL] from rinokeras . core . v2x . train import MINEExperimentRunner [EOL] [EOL] class MINEExperiment ( Experiment ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ) : [EOL] pass [EOL] [EOL] def runner ( self , ) : [EOL] return MINEExperimentRunner ( self , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . Experiment import Experiment [EOL] from . MINEExperiment import MINEExperiment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] from abc import ABC , abstractmethod [EOL] from rinokeras . core . v2x . train import BaseExperimentRunner [EOL] [EOL] class Experiment ( ABC ) : [EOL] [EOL] def __init__ ( self , ) : [EOL] pass [EOL] [EOL] @ abstractmethod def get_model ( self , ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] @ abstractmethod def get_optimizer ( self , ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] @ abstractmethod def get_loss_function ( self , ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] @ abstractmethod def forward ( self , model , inputs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def runner ( self , ) : [EOL] return BaseExperimentRunner ( self ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] print ( [string] ) [EOL] from . BaseExperimentRunner import BaseExperimentRunner [EOL] [EOL] print ( [string] ) [EOL] from . MINEExperimentRunner import MINEExperimentRunner [EOL] [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import tensorflow as tf [EOL] import warnings [EOL] from . BaseExperimentRunner import BaseExperimentRunner [EOL] [EOL] class MINEEstimator ( tf . keras . Model ) : [EOL] def __init__ ( self , ) : [EOL] super ( MINEEstimator , self ) . __init__ ( ) [EOL] self . _dense_1 = tf . keras . layers . Dense ( self . hidden_size ) [EOL] self . _dense_2 = tf . keras . layers . Dense ( self . hidden_size ) [EOL] self . _predict_MI = tf . keras . layers . Dense ( [number] ) [EOL] [EOL] def call ( self , inputs , mask = None , ** kwargs ) : [EOL] x_values , y_values = inputs [EOL] x_compressed = self . _dense_1 ( x_values ) [EOL] y_compressed = self . _dense_2 ( y_values ) [EOL] h1 = tf . nn . relu ( x_compressed + y_compressed ) [EOL] h2 = tf . nn . relu ( x_compressed + tf . random . shuffle ( y_compressed ) ) [EOL] estimate = tf . reduce_mean ( self . _predict_MI ( h1 ) ) - tf . math . log ( tf . reduce_mean ( tf . math . exp ( self . _predic_MI ( h2 ) ) ) ) [EOL] return estimate [EOL] [EOL] class MINEExperimentRunner ( BaseExperimentRunner ) : [EOL] [EOL] def __init__ ( self , experiment , gamma , beta ) : [EOL] self . experiment = experiment [EOL] [EOL] [comment] [EOL] self . _gamma = gamma [EOL] self . _beta = beta [EOL] [EOL] with self . experiment . distribution_strategy . scope ( ) : [EOL] [EOL] [comment] [EOL] self . _built_model = self . experiment . get_model ( ) [EOL] self . _built_optimizer = self . experiment . get_optimizer ( ) [EOL] self . _built_loss = self . experiment . get_loss_function ( ) [EOL] [EOL] self . _built_checkpoint = tf . train . Checkpoint ( optimizer = self . _built_optimizer , model = self . _built_model ) [EOL] [EOL] [comment] [EOL] self . _mine_xz_estimator = MINEEstimator ( ) [EOL] self . _mine_xy_estimator = MINEEstimator ( ) [EOL] self . _mi_optimizer = tf . optimizers . Adam ( ) [EOL] [EOL] [comment] [EOL] if not hasattr ( self . _built_model , [string] ) : [EOL] raise AssertionError ( [string] ) [EOL] [comment] [EOL] if not hasattr ( self . _built_model , [string] ) : [EOL] warnings . warn ( [string] , RuntimeWarning ) [EOL] setattr ( self . _built_model , [string] , [ ] ) [EOL] [EOL] [comment] [EOL] def _built_forward_pass ( inputs , return_outputs = False ) : [EOL] model_outputs , model_hidden_state , model_x_values , true_outputs = self . experiment . forward ( self . _built_model , inputs ) [EOL] [EOL] xz_mi_estimate = self . _mine_xz_estimator ( model_x_values , model_hidden_state ) [EOL] yz_mi_estimate = self . _mine_xy_estimator ( model_hidden_state , true_outputs ) [EOL] [EOL] [comment] [EOL] loss , metrics = self . _built_loss ( model_outputs , inputs ) + self . _gamma * xz_mi_estimate - self . _beta * yz_mi_estimate [EOL] if return_outputs : [EOL] return ( loss , xz_mi_estimate , yz_mi_estimate ) , metrics , model_outputs [EOL] return ( loss , xz_mi_estimate , yz_mi_estimate ) , metrics [EOL] self . _built_forward_pass = _built_forward_pass [EOL] [EOL] [comment] [EOL] def run_train_iteration ( inputs ) : [EOL] with tf . GradientTape ( persistent = True ) as tape : [EOL] loss , metrics = self . _built_forward_pass ( inputs ) [EOL] [EOL] model_loss , xz_mi_estimate , yz_mi_estimate = loss [EOL] [EOL] [comment] [EOL] xz_mi_gradients = tape . gradient ( - xz_mi_estimate , self . _mine_xz_estimator . trainable_variables ) [comment] [EOL] yz_mi_gradients = tape . gradient ( - yz_mi_estimate , self . _mine_yz_estimator . trainable_variables ) [comment] [EOL] [EOL] [comment] [EOL] grads = tape . gradient ( model_loss , self . _built_model . trainable_variables ) [EOL] [EOL] [comment] [EOL] self . _mi_optimizer . apply_gradients ( zip ( xz_mi_gradients , self . _mine_xz_estimator . trainable_variables ) ) [EOL] self . _mi_optimizer . apply_gradients ( zip ( yz_mi_gradients , self . _mine_yz_estimator . trainable_variables ) ) [EOL] [EOL] self . _built_optimizer . apply_gradients ( zip ( grads , self . _built_model . trainable_variables ) ) [EOL] return loss , metrics [EOL] [EOL] self . _built_run_train_iteration = run_train_iteration [EOL] [EOL] def run_eval_iteration ( inputs ) : [EOL] loss , metrics = self . _built_forward_pass ( inputs ) [EOL] model_loss , xz_mi_estimate , yz_mi_estimate = loss [EOL] metrics [ [string] ] = xz_mi_estimate [EOL] metrics [ [string] ] = yz_mi_estimate [EOL] return model_loss , metrics [EOL] self . _built_run_eval_iteration = run_eval_iteration [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] from typing import Tuple , Dict , Callable [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] import tqdm [EOL] import warnings [EOL] [EOL] from rinokeras . core . v2x . train import MetricsAccumulator [EOL] [EOL] class BaseExperimentRunner : [EOL] def __init__ ( self , experiment ) : [EOL] self . experiment = experiment [EOL] [EOL] with self . experiment . distribution_strategy . scope ( ) : [EOL] [EOL] [comment] [EOL] self . _built_model = self . experiment . get_model ( ) [EOL] self . _built_optimizer = self . experiment . get_optimizer ( ) [EOL] self . _built_loss = self . experiment . get_loss_function ( ) [EOL] [EOL] self . _built_checkpoint = tf . train . Checkpoint ( optimizer = self . _built_optimizer , model = self . _built_model ) [EOL] [EOL] [comment] [EOL] if not hasattr ( self . _built_model , [string] ) : [EOL] raise AssertionError ( [string] ) [EOL] [comment] [EOL] if not hasattr ( self . _built_model , [string] ) : [EOL] warnings . warn ( [string] , RuntimeWarning ) [EOL] setattr ( self . _built_model , [string] , [ ] ) [EOL] [EOL] [comment] [EOL] def _built_forward_pass ( inputs , return_outputs = False ) : [EOL] model_outputs = self . experiment . forward ( self . _built_model , inputs ) [EOL] loss , metrics = self . _built_loss ( model_outputs , inputs ) [EOL] if return_outputs : [EOL] return loss , metrics , model_outputs [EOL] return loss , metrics [EOL] self . _built_forward_pass = _built_forward_pass [EOL] [EOL] [comment] [EOL] def run_train_iteration ( inputs ) : [EOL] with tf . GradientTape ( ) as tape : [EOL] loss , metrics = self . _built_forward_pass ( inputs ) [EOL] grads = tape . gradient ( loss , self . _built_model . trainable_variables ) [EOL] [EOL] [comment] [EOL] self . _built_optimizer . apply_gradients ( zip ( grads , self . _built_model . trainable_variables ) ) [EOL] return loss , metrics [EOL] [EOL] self . _built_run_train_iteration = run_train_iteration [EOL] [EOL] def run_eval_iteration ( inputs ) : [EOL] loss , metrics = self . _built_forward_pass ( inputs ) [EOL] return loss , metrics [EOL] self . _built_run_eval_iteration = run_eval_iteration [EOL] [EOL] def train ( self , train_dataset , eval_dataset , n_epochs , n_iterations_per_epoch_train , n_iterations_per_epoch_eval ) : [EOL] [EOL] [comment] [EOL] strategy = self . experiment . distribution_strategy [EOL] [EOL] with strategy . scope ( ) : [EOL] train_iterator = strategy . make_dataset_iterator ( train_dataset ) [EOL] eval_iterator = strategy . make_dataset_iterator ( eval_dataset ) [EOL] [EOL] @ tf . function def distributed_train ( ) : [EOL] with strategy . scope ( ) : [EOL] loss , metrics = strategy . experimental_run ( self . _built_run_train_iteration , train_iterator ) [EOL] [comment] [EOL] reduced_metrics = { } [EOL] for metric_key , value in metrics . items ( ) : [EOL] reduced_metrics [ metric_key ] = strategy . reduce ( tf . distribute . ReduceOp . MEAN , value ) [EOL] [comment] [EOL] reduced_loss = strategy . reduce ( tf . distribute . ReduceOp . MEAN , loss ) [EOL] return reduced_loss , reduced_metrics [EOL] [EOL] @ tf . function def distributed_eval ( ) : [EOL] with strategy . scope ( ) : [EOL] loss , metrics = strategy . experimental_run ( self . _built_run_eval_iteration , eval_iterator ) [EOL] [comment] [EOL] reduced_metrics = { } [EOL] for metric_key , value in metrics . items ( ) : [EOL] reduced_metrics [ metric_key ] = strategy . reduce ( tf . distribute . ReduceOp . MEAN , value ) [EOL] [comment] [EOL] reduced_loss = strategy . reduce ( tf . distribute . ReduceOp . MEAN , loss ) [EOL] return reduced_loss , reduced_metrics [EOL] [EOL] self . len_train_dataset = n_iterations_per_epoch_train [EOL] self . len_eval_dataset = n_iterations_per_epoch_eval [EOL] [EOL] for epoch in range ( n_epochs ) : [EOL] [EOL] train_iterator . initialize ( ) [EOL] eval_iterator . initialize ( ) [EOL] [EOL] [comment] [EOL] train_losses = [ ] [EOL] train_metrics_acc = MetricsAccumulator ( ) [EOL] train_metrics_acc . start_timer ( ) [EOL] with tqdm . tqdm ( total = self . len_train_dataset , leave = False , desc = [string] . format ( epoch ) ) as pbar : [EOL] for _ in range ( n_iterations_per_epoch_train ) : [EOL] loss , train_metrics = distributed_train ( ) [EOL] train_losses . append ( loss . numpy ( ) ) [EOL] train_metrics_acc . add ( train_metrics ) [EOL] pbar . update ( [number] ) [EOL] train_metrics_acc . end_timer ( ) [EOL] train_metrics = train_metrics_acc . get_average ( ) [EOL] [EOL] [comment] [EOL] eval_losses = [ ] [EOL] eval_metrics_acc = MetricsAccumulator ( ) [EOL] eval_metrics_acc . start_timer ( ) [EOL] with tqdm . tqdm ( total = self . len_eval_dataset , leave = False , desc = [string] . format ( epoch ) ) as pbar : [EOL] for _ in range ( n_iterations_per_epoch_eval ) : [EOL] loss , eval_metrics = distributed_eval ( ) [EOL] eval_losses . append ( loss . numpy ( ) ) [EOL] eval_metrics_acc . add ( eval_metrics ) [EOL] pbar . update ( [number] ) [EOL] eval_metrics_acc . end_timer ( ) [EOL] eval_metrics = eval_metrics_acc . get_average ( ) [EOL] [EOL] print ( [string] . format ( epoch , np . mean ( train_losses ) , np . mean ( eval_losses ) ) ) [EOL] print ( [string] . format ( epoch , train_metrics ) ) [EOL] print ( [string] . format ( epoch , eval_metrics ) ) [EOL] [EOL] [comment] [EOL] def forward ( self , inputs ) : [EOL] return self . _built_forward_pass ( inputs , return_outputs = True ) [EOL] [EOL] @ property def model ( self , ) : [EOL] return self . _built_model [EOL] @ property def loss ( self , ) : [EOL] return self . _built_loss [EOL] @ property def optimizer ( self , ) : [EOL] return self . _built_optimizer	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] def test_absolute_truth ( ) : [EOL] pass	0 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import tensorflow_datasets as tfds [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] import os [EOL] import warnings [EOL] warnings . simplefilter ( [string] , tf . errors . OutOfRangeError ) [EOL] os . environ [ [string] ] = [string] [EOL] [EOL] from rinokeras . core . v2x . train import Experiment [EOL] [EOL] class TestExperiment ( Experiment ) : [EOL] [EOL] def __init__ ( self , ) : [EOL] self . distribution_strategy = tf . distribute . MirroredStrategy ( ) [EOL] [EOL] def get_model ( self , ) : [EOL] model = tf . keras . Sequential ( [ tf . keras . layers . Conv2D ( [number] , [number] , activation = [string] , input_shape = ( [number] , [number] , [number] ) ) , tf . keras . layers . MaxPooling2D ( ) , tf . keras . layers . Flatten ( ) , tf . keras . layers . Dense ( [number] , activation = [string] ) , tf . keras . layers . Dense ( [number] , activation = [string] ) ] ) [EOL] return model [EOL] [EOL] def get_loss_function ( self , ) : [EOL] loss = tf . losses . SparseCategoricalCrossentropy ( ) [EOL] def loss_function ( model_outputs , inputs ) : [EOL] c_loss = loss ( y_true = inputs [ [number] ] , y_pred = model_outputs ) [EOL] return c_loss , { [string] : c_loss } [EOL] return loss_function [EOL] [EOL] def get_optimizer ( self , ) : [EOL] return tf . optimizers . Adam ( ) [EOL] [EOL] def forward ( self , model , inputs ) : [EOL] return model ( inputs [ [number] ] ) [EOL] [EOL] [EOL] def test_ExperimentRunner_sequential ( ) : [EOL] [EOL] datasets , ds_info = tfds . load ( name = [string] , with_info = True , as_supervised = True ) [EOL] mnist_train , mnist_test = datasets [ [string] ] , datasets [ [string] ] [EOL] [EOL] BUFFER_SIZE = [number] [EOL] BATCH_SIZE_PER_REPLICA = [number] [EOL] BATCH_SIZE = BATCH_SIZE_PER_REPLICA * [number] [EOL] [EOL] def scale ( image , label ) : [EOL] image = tf . cast ( image , tf . float32 ) [EOL] image /= [number] [EOL] return image , label [EOL] [EOL] train_dataset = mnist_train . map ( scale ) . shuffle ( BUFFER_SIZE ) . batch ( BATCH_SIZE , drop_remainder = True ) . repeat ( ) [EOL] eval_dataset = mnist_test . map ( scale ) . batch ( BATCH_SIZE , drop_remainder = True ) . repeat ( ) [EOL] [EOL] [comment] [EOL] exp = TestExperiment ( ) [EOL] runner = exp . runner ( ) [EOL] [comment] [EOL] runner . train ( train_dataset , eval_dataset , [number] , n_iterations_per_epoch_train = [number] , n_iterations_per_epoch_eval = [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] test_ExperimentRunner_sequential ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_rnn ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_optimizers ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_losses ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import tensorflow as tf [EOL] import tempfile [EOL] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session , assert_not_none , assert_expected_shapes , check_regression , random_mask_tensor , random_sequence_tensor [EOL] [EOL] [EOL] def test_convert_sequence_mask_to_attention_mask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . utils import convert_sequence_mask_to_attention_mask [EOL] [comment] [EOL] input_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] input_mask = tf . convert_to_tensor ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] [EOL] [comment] [EOL] value = convert_sequence_mask_to_attention_mask ( input_tensor , input_mask ) [EOL] [comment] [EOL] output = run_simple_session ( inputs = [ value ] , feed = { } ) [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_convert_sequence_length_to_sequence_mask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . utils import convert_sequence_length_to_sequence_mask [EOL] [comment] [EOL] input_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] input_mask = tf . convert_to_tensor ( [ [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] value = convert_sequence_length_to_sequence_mask ( input_tensor , input_mask ) [EOL] [comment] [EOL] output = run_simple_session ( inputs = [ value ] , feed = { } ) [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] ) ] ) [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_convert_to_attention_mask_1 ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask [EOL] [comment] [EOL] input_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] input_mask = tf . convert_to_tensor ( [ [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] value = convert_to_attention_mask ( input_tensor , input_mask ) [EOL] [comment] [EOL] output = run_simple_session ( inputs = [ value ] , feed = { } ) [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_convert_to_attention_mask_2 ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask [EOL] [comment] [EOL] input_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] input_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] value = convert_to_attention_mask ( input_tensor , input_mask ) [EOL] [comment] [EOL] output = run_simple_session ( inputs = [ value ] , feed = { } ) [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_sequence_tensor [EOL] [EOL] def test_residual_block ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . resnet . resnet import ResidualBlock [EOL] layer = ResidualBlock ( ) [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] inputs_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( inputs_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_resnext50_base ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . resnet . resnet import ResNeXt50 [EOL] layer = ResNeXt50 ( ) [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] inputs_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( inputs_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tensorflow as tf [EOL] import tempfile [EOL] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask , convert_sequence_length_to_sequence_mask [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_mask_tensor [EOL] [EOL] def test_transformer_encoder_block ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerEncoderBlock [EOL] layer = TransformerEncoderBlock ( n_heads = [number] , filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerEncoderBlock , layer ) [EOL] [EOL] def test_transformer_encoder_block_masking ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerEncoderBlock [EOL] layer = TransformerEncoderBlock ( n_heads = [number] , filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] input_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] input_mask = convert_to_attention_mask ( input_tensor , input_mask ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor , mask = input_mask ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerEncoderBlock , layer ) [EOL] [EOL] [EOL] def test_transformer_encoder ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerEncoder [EOL] layer = TransformerEncoder ( embedding_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerEncoder , layer ) [EOL] [EOL] def test_transformer_encoder_masking ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerEncoder [EOL] layer = TransformerEncoder ( embedding_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] input_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] input_mask = convert_to_attention_mask ( input_tensor , input_mask ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor , mask = input_mask ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerEncoder , layer ) [EOL] [EOL] def test_transformer_encoder_masking_with_conv ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerEncoder [EOL] layer = TransformerEncoder ( embedding_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] input_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] input_mask = convert_to_attention_mask ( input_tensor , input_mask ) [EOL] conv_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] conv_mask = convert_sequence_length_to_sequence_mask ( input_tensor , conv_mask ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor , mask = ( input_mask , conv_mask ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerEncoder , layer ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test [EOL] [EOL] def test_transformer_self_attention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer . transformer_attention import TransformerSelfAttention [EOL] layer = TransformerSelfAttention ( n_heads = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerSelfAttention , layer ) [EOL] [EOL] def test_transformer_multi_attention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer . transformer_attention import TransformerMultiAttention [EOL] layer = TransformerMultiAttention ( n_heads = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] encoder_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] decoder_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( ( encoder_tensor , decoder_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerMultiAttention , layer ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tensorflow as tf [EOL] import tempfile [EOL] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_mask_tensor , random_sequence_tensor [EOL] [EOL] def test_transformer_base ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import Transformer [EOL] layer = Transformer ( discrete = True , n_symbols_in = [number] , n_symbols_out = [number] , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] target_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] source_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] target_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] value = layer ( ( source_tensor , target_tensor ) , mask = ( source_mask , target_mask ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( Transformer , layer ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import rinokeras [EOL] [docstring] [EOL] import tensorflow as tf [EOL] import tempfile [EOL] [EOL] from rinokeras . core . v1x . utils import convert_to_attention_mask [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_mask_tensor [EOL] [EOL] [EOL] def test_transformer_decoder_block_no_mask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoderBlock [EOL] layer = TransformerDecoderBlock ( n_heads = [number] , filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] target_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] _ , value = layer ( ( source_tensor , target_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoderBlock , layer ) [EOL] [EOL] def test_transformer_decoder_block ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoderBlock [EOL] layer = TransformerDecoderBlock ( n_heads = [number] , filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] target_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] source_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] target_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] source_mask = convert_to_attention_mask ( source_tensor , source_mask ) [EOL] target_mask = convert_to_attention_mask ( target_tensor , target_mask ) [EOL] [EOL] [comment] [EOL] _ , value = layer ( ( source_tensor , target_tensor ) , mask = ( source_mask , target_mask ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoderBlock , layer ) [EOL] [EOL] def test_transformer_decoder_no_mask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoder , TransformerInputEmbedding [EOL] tie = TransformerInputEmbedding ( [number] , False ) [EOL] layer = TransformerDecoder ( embedding_layer = tie , output_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] target_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] source_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] target_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] source_mask = convert_to_attention_mask ( source_tensor , source_mask ) [EOL] target_mask = convert_to_attention_mask ( target_tensor , target_mask ) [EOL] [EOL] [comment] [EOL] value = layer ( ( source_tensor , target_tensor ) , mask = None ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoder , layer ) [EOL] [EOL] def test_transformer_decoder ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoder , TransformerInputEmbedding [EOL] tie = TransformerInputEmbedding ( [number] , False ) [EOL] layer = TransformerDecoder ( embedding_layer = tie , output_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] target_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] source_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] target_mask , _ = random_mask_tensor ( [number] , [number] ) [EOL] source_mask = convert_to_attention_mask ( source_tensor , source_mask ) [EOL] target_mask = convert_to_attention_mask ( target_tensor , target_mask ) [EOL] [EOL] [comment] [EOL] value = layer ( ( source_tensor , target_tensor ) , mask = ( source_mask , target_mask ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoder , layer ) [EOL] [EOL] def test_transformer_decoder_fast_decode ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoder , TransformerInputEmbedding [EOL] tie = TransformerInputEmbedding ( [number] , False ) [EOL] layer = TransformerDecoder ( embedding_layer = tie , output_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer . fast_decode ( source_tensor , [number] , output_size = [number] ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoder , layer ) [EOL] [EOL] def test_transformer_decoder_fast_decode_discrete ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoder , TransformerInputEmbedding [EOL] tie = TransformerInputEmbedding ( [number] , discrete = True , n_symbols = [number] ) [EOL] layer = TransformerDecoder ( embedding_layer = tie , output_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer . fast_decode ( source_tensor , [number] , output_dtype = tf . int32 ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoder , layer ) [EOL] [EOL] def test_transformer_decoder_fast_beam_decode_discrete ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . transformer import TransformerDecoder , TransformerInputEmbedding [EOL] tie = TransformerInputEmbedding ( [number] , discrete = True , n_symbols = [number] ) [EOL] layer = TransformerDecoder ( embedding_layer = tie , output_layer = tf . keras . layers . Dense ( [number] ) , n_layers = [number] , n_heads = [number] , d_model = [number] , d_filter = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] source_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value , scores = layer . fast_beam_decode ( source_tensor , [number] , batch_size = [number] , n_beams = [number] ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , scores ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) , ( [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( TransformerDecoder , layer ) [EOL]	
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test [EOL] [EOL] def test_qanet_self_attention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANetSelfAttention [EOL] layer = QANetSelfAttention ( n_heads = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANetSelfAttention , layer )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_sequence_tensor [EOL] [EOL] def test_qanet_encoder_no_mask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANetEncoderBlock [EOL] layer = QANetEncoderBlock ( n_conv = [number] , n_heads = [number] , filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANetEncoderBlock , layer ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test [EOL] [EOL] def test_qanet_feed_forward ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANetFeedForward [EOL] layer = QANetFeedForward ( filter_size = [number] , hidden_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANetFeedForward , layer ) [EOL] [EOL] def test_qanet_conv_block ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANetConvBlock [EOL] layer = QANetConvBlock ( filters = [number] , kernel_size = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANetConvBlock , layer )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_sequence_tensor [EOL] [EOL] def test_qanet_base ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANet [EOL] layer = QANet ( n_chars = [number] , n_symbols = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] context_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] query_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] context_char_tensor = tf . convert_to_tensor ( np . random . randint ( [number] , [number] , ( [number] , [number] , [number] ) ) ) [EOL] query_char_tensor = tf . convert_to_tensor ( np . random . randint ( [number] , [number] , ( [number] , [number] , [number] ) ) ) [EOL] [EOL] [comment] [EOL] value = layer ( ( context_tensor , query_tensor , context_char_tensor , query_char_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANet , layer )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import tempfile [EOL] [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import reset_session , random_tensor , run_simple_session_save_weights , assert_not_none , assert_expected_shapes , load_restore_test , check_regression , from_config_test , random_sequence_tensor [EOL] [EOL] def test_qanet_input_embedding ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . models . qanet import QANetInputEmbedding [EOL] layer = QANetInputEmbedding ( d_model = [number] , word_embed_initializer = np . random . sample ( ( [number] , [number] ) ) , char_embed_initializer = np . random . sample ( ( [number] , [number] ) ) ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_sequence_tensor ( [number] , [number] , [number] ) [EOL] input_char_tensor = tf . convert_to_tensor ( np . random . randint ( [number] , [number] , ( [number] , [number] , [number] ) ) ) [EOL] [EOL] [comment] [EOL] value = layer ( ( input_tensor , input_char_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] assert_not_none ( output ) [EOL] assert_expected_shapes ( output , [ ( [number] , [number] , [number] ) ] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] from_config_test ( QANetInputEmbedding , layer )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import pytest [EOL] [EOL] def gpu_setup ( req_gpus ) : [EOL] from tensorflow . python . client import device_lib [EOL] def get_available_gpus ( ) : [EOL] local_device_protos = device_lib . list_local_devices ( ) [EOL] return [ x . name for x in local_device_protos if x . device_type == [string] ] [EOL] if len ( get_available_gpus ( ) ) < req_gpus : [EOL] pytest . skip ( [string] ) [EOL] [EOL] [EOL] def get_test_data ( ) : [EOL] x = np . random . sample ( ( [number] , [number] ) ) . astype ( np . float32 ) [EOL] dataset = tf . data . Dataset . from_tensor_slices ( x ) [EOL] return dataset . batch ( [number] ) [EOL] [EOL] def get_test_model ( ) : [EOL] return tf . keras . Sequential ( [ tf . keras . layers . Dense ( [number] ) , ] ) [EOL] [EOL] def do_setup ( ) : [EOL] model = get_test_model ( ) [EOL] def build_model ( inputs ) : [EOL] return model ( inputs ) [EOL] def loss_function ( inputs , outputs ) : [EOL] return outputs ** [number] [EOL] data = get_test_data ( ) [EOL] [EOL] return model , build_model , loss_function , data [EOL] [EOL] def test_test_graph_one_device_construction ( ) : [EOL] from rinokeras . core . v1x . train . TestGraph import TestGraph [EOL] tf . reset_default_graph ( ) [EOL] [comment] [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] distribution_strategy = tf . contrib . distribute . OneDeviceStrategy ( [string] ) [EOL] [comment] [EOL] graph = TestGraph ( model = model , build_model = build_model , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] [EOL] def test_test_graph_multi_device_construction ( ) : [EOL] from rinokeras . core . v1x . train . TestGraph import TestGraph [EOL] tf . reset_default_graph ( ) [EOL] [comment] [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] distribution_strategy = tf . contrib . distribute . MirroredStrategy ( [ [string] , [string] ] ) [EOL] [comment] [EOL] graph = TestGraph ( model = model , build_model = build_model , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] [EOL] def test_test_graph_one_device_run_step ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TestGraph import TestGraph [EOL] tf . reset_default_graph ( ) [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( config = config ) as sess : [EOL] distribution_strategy = tf . contrib . distribute . OneDeviceStrategy ( [string] ) [EOL] [EOL] [comment] [EOL] with distribution_strategy . scope ( ) : [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] [EOL] [comment] [EOL] graph = TestGraph ( model = model , build_model = build_model , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] total_losses = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) [EOL] total_losses += np . mean ( losses [ [string] ] ) [EOL] assert total_losses > [number] [EOL] [EOL] def test_test_graph_multi_device_run_step ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TestGraph import TestGraph [EOL] tf . reset_default_graph ( ) [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( config = config ) as sess : [EOL] distribution_strategy = tf . contrib . distribute . MirroredStrategy ( [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] with distribution_strategy . scope ( ) : [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] [EOL] [comment] [EOL] graph = TestGraph ( model = model , build_model = build_model , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] total_losses = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) , losses [ [string] ] . shape [EOL] total_losses += np . mean ( losses [ [string] ] ) [EOL] assert total_losses > [number] [EOL] [EOL] def test_train_graph_one_device_construction ( ) : [EOL] from rinokeras . core . v1x . train . TrainGraph import TrainGraph [EOL] tf . reset_default_graph ( ) [EOL] [EOL] [comment] [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] distribution_strategy = tf . contrib . distribute . OneDeviceStrategy ( [string] ) [EOL] [comment] [EOL] graph = TrainGraph ( model = model , optimizer = [string] , build_model = build_model , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] [EOL] def test_train_graph_multi_device_construction ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TrainGraph import TrainGraph [EOL] tf . reset_default_graph ( ) [EOL] [comment] [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] distribution_strategy = tf . contrib . distribute . MirroredStrategy ( [ [string] , [string] ] ) [EOL] [comment] [EOL] graph = TrainGraph ( model = model , build_model = build_model , optimizer = [string] , loss_function = loss_function , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] [EOL] def test_train_graph_one_device_run_step ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TrainGraph import TrainGraph [EOL] tf . reset_default_graph ( ) [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( config = config ) as sess : [EOL] distribution_strategy = tf . contrib . distribute . OneDeviceStrategy ( [string] ) [EOL] [EOL] [comment] [EOL] with distribution_strategy . scope ( ) : [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] [EOL] [comment] [EOL] graph = TrainGraph ( model = model , build_model = build_model , loss_function = loss_function , optimizer = [string] , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] total_losses = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) [EOL] total_losses += np . mean ( losses [ [string] ] ) [EOL] assert total_losses > [number] [EOL] [EOL] def test_train_graph_multi_device_run_step ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TrainGraph import TrainGraph [EOL] tf . reset_default_graph ( ) [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( config = config ) as sess : [EOL] distribution_strategy = tf . contrib . distribute . MirroredStrategy ( [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] with distribution_strategy . scope ( ) : [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] [EOL] [comment] [EOL] graph = TrainGraph ( model = model , build_model = build_model , loss_function = loss_function , optimizer = [string] , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] total_losses = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) , losses [ [string] ] . shape [EOL] total_losses += np . mean ( losses [ [string] ] ) [EOL] assert total_losses > [number] [EOL] [EOL] def test_train_graph_multi_device_run_multi_step ( ) : [EOL] gpu_setup ( [number] ) [EOL] from rinokeras . core . v1x . train . TrainGraph import TrainGraph [EOL] tf . reset_default_graph ( ) [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( config = config ) as sess : [EOL] distribution_strategy = tf . contrib . distribute . MirroredStrategy ( [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] with distribution_strategy . scope ( ) : [EOL] model , build_model , loss_function , data = do_setup ( ) [EOL] [EOL] [comment] [EOL] graph = TrainGraph ( model = model , build_model = build_model , loss_function = loss_function , optimizer = [string] , inputs = data , distribution_strategy = distribution_strategy ) [EOL] assert graph is not None [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] total_losses = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) , losses [ [string] ] . shape [EOL] total_losses += np . mean ( losses [ [string] ] ) [EOL] [EOL] total_loss_itr_2 = [number] [EOL] with graph . add_progress_bar ( [number] , [number] ) . initialize ( ) as g : [EOL] losses = g . run ( [string] ) [EOL] assert losses . keys ( ) [EOL] assert losses [ [string] ] . shape == ( [number] , [number] ) , losses [ [string] ] . shape [EOL] total_loss_itr_2 += np . mean ( losses [ [string] ] ) [EOL] [EOL] assert total_losses > total_loss_itr_2	
from typing import Any [EOL] import typing [EOL] import rinokeras [EOL] [docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_bert_random_replace_mask_discrete ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . masking import BERTRandomReplaceMask [EOL] layer = BERTRandomReplaceMask ( percentage = [number] , mask_token = [number] , n_symbols = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor = tf . convert_to_tensor ( np . zeros ( ( [number] , [number] , [number] ) ) , dtype = np . int32 ) [EOL] [EOL] [comment] [EOL] value , bm = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , bm ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] assert np . sum ( output [ [number] ] ) > [number] [EOL] assert np . sum ( output [ [number] ] ) < [number] * [number] * [number] [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value , bm ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_bert_random_replace_mask_floating ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . masking import BERTRandomReplaceMask [EOL] layer = BERTRandomReplaceMask ( percentage = [number] , mask_token = [number] , n_symbols = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor = tf . convert_to_tensor ( np . zeros ( ( [number] , [number] , [number] ) ) , dtype = np . float32 ) [EOL] [EOL] [comment] [EOL] value , bm = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , bm ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] assert np . sum ( output [ [number] ] ) > [number] [EOL] assert np . sum ( output [ [number] ] ) < [number] * [number] * [number] [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value , bm ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_position_embedding_vanilla ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding [EOL] layer = PositionEmbedding ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_concat ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding [EOL] layer = PositionEmbedding ( concat = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_concat_reproject ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding [EOL] layer = PositionEmbedding ( concat = True , reproject_embedding = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_2d_vanilla ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding2D [EOL] layer = PositionEmbedding2D ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_2d_concat ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding2D [EOL] layer = PositionEmbedding2D ( concat = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_2d_reproject ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding2D [EOL] layer = PositionEmbedding2D ( concat = True , reproject_embedding = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_3d_vanilla ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding3D [EOL] layer = PositionEmbedding3D ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_3d_concat ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding3D [EOL] layer = PositionEmbedding3D ( concat = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_position_embedding_3d_reproject ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import PositionEmbedding3D [EOL] layer = PositionEmbedding3D ( concat = True , reproject_embedding = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_learned_embedding_vanilla ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import LearnedEmbedding [EOL] layer = LearnedEmbedding ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_learned_embedding_concat ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . position_embedding import LearnedEmbedding [EOL] layer = LearnedEmbedding ( concat = True ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	
from typing import Any [EOL] import typing [EOL] import rinokeras [EOL] import numpy as np [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import check_regression , load_restore_test , random_tensor , reset_session , run_simple_session_save_weights [EOL] [EOL] def test_normed_conv_stack_1d ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . conv import NormedConvStack [EOL] ncs_layer = NormedConvStack ( dimension = [number] , filters = [number] , kernel_size = [number] ) [EOL] [EOL] [comment] [EOL] assert ncs_layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = ncs_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_normed_conv_stack_2d ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . conv import NormedConvStack [EOL] ncs_layer = NormedConvStack ( dimension = [number] , filters = [number] , kernel_size = [number] ) [EOL] [EOL] [comment] [EOL] assert ncs_layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = ncs_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_normed_conv_stack_3d ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . conv import NormedConvStack [EOL] ncs_layer = NormedConvStack ( dimension = [number] , filters = [number] , kernel_size = [number] ) [EOL] [EOL] [comment] [EOL] assert ncs_layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = ncs_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ ncs_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_residual_block ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . conv import ResidualBlock [EOL] rb_layer = ResidualBlock ( dimension = [number] , filters = [number] , kernel_size = [number] ) [EOL] [EOL] [comment] [EOL] assert rb_layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = rb_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ rb_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ rb_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_grouped_conv ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . conv import GroupedConvolution [EOL] rb_layer = GroupedConvolution ( ) [EOL] [EOL] [comment] [EOL] assert rb_layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = rb_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ rb_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ rb_layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import IO , Any [EOL] import rinokeras [EOL] import typing [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] import json [EOL] import os [EOL] import warnings [EOL] import tempfile [EOL] import pickle [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import check_regression [EOL] [EOL] [EOL] def test_random_gauss_noise ( ) : [EOL] tf . reset_default_graph ( ) [EOL] np . random . seed ( [number] ) [EOL] tf . random . set_random_seed ( [number] ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . autoregressive import RandomGaussNoise [EOL] gaussian_noise_layer = RandomGaussNoise ( ) [EOL] assert gaussian_noise_layer is not None [EOL] [EOL] [comment] [EOL] input_values = np . random . sample ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] input_tensor = tf . constant ( input_values ) [EOL] [EOL] value = gaussian_noise_layer ( input_tensor ) [EOL] logstd = gaussian_noise_layer . logstd [EOL] std = gaussian_noise_layer . std [EOL] [EOL] [comment] [EOL] output_file = tempfile . NamedTemporaryFile ( ) [EOL] [EOL] [comment] [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output = sess . run ( [ value , logstd , std ] ) [EOL] [EOL] [comment] [EOL] weights = gaussian_noise_layer . get_weights ( ) [EOL] pickle . dump ( weights , output_file ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [comment] [EOL] assert output [ [number] ] . shape == ( [number] , ) [comment] [EOL] assert output [ [number] ] . shape == ( [number] , ) [comment] [EOL] assert np . isclose ( output [ [number] ] , np . zeros_like ( output [ [number] ] ) ) . all ( ) [comment] [EOL] assert np . isclose ( output [ [number] ] , np . ones_like ( output [ [number] ] ) ) . all ( ) [comment] [EOL] assert not np . isclose ( output [ [number] ] , input_values ) . all ( ) [comment] [EOL] [EOL] [comment] [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output_file . seek ( [number] ) [EOL] gaussian_noise_layer . set_weights ( pickle . load ( output_file ) ) [EOL] restored_output = sess . run ( [ value , logstd , std ] ) [EOL] assert np . isclose ( restored_output [ [number] ] , output [ [number] ] ) . all ( ) [EOL] output_file . close ( ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_coupling_layer ( ) : [EOL] tf . reset_default_graph ( ) [EOL] np . random . seed ( [number] ) [EOL] tf . random . set_random_seed ( [number] ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . autoregressive import CouplingLayer [EOL] coupling_layer = CouplingLayer ( n_units = [number] , layer = tf . keras . layers . Dense ( [number] ) ) [EOL] assert coupling_layer is not None [EOL] [EOL] [comment] [EOL] input_values_a = np . random . sample ( ( [number] , [number] ) ) [EOL] input_values_b = np . random . sample ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] input_tensor_a = tf . constant ( input_values_a ) [EOL] input_tensor_b = tf . constant ( input_values_b ) [EOL] [EOL] value , log_s = coupling_layer ( ( input_tensor_a , input_tensor_b ) ) [EOL] reverse_value = coupling_layer ( ( input_tensor_a , input_tensor_b ) , reverse = True ) [EOL] [EOL] [comment] [EOL] output_file = tempfile . NamedTemporaryFile ( ) [EOL] [EOL] [comment] [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output = sess . run ( [ value , log_s , reverse_value ] ) [EOL] [EOL] [comment] [EOL] weights = coupling_layer . get_weights ( ) [EOL] pickle . dump ( weights , output_file ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output_file . seek ( [number] ) [EOL] coupling_layer . set_weights ( pickle . load ( output_file ) ) [EOL] restored_output = sess . run ( [ value , log_s , reverse_value ] ) [EOL] assert np . isclose ( restored_output [ [number] ] , output [ [number] ] ) . all ( ) [EOL] assert np . isclose ( restored_output [ [number] ] , output [ [number] ] ) . all ( ) [EOL] assert np . isclose ( restored_output [ [number] ] , output [ [number] ] ) . all ( ) [EOL] output_file . close ( ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_layer_dropout ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . dropout import LayerDropout [EOL] [EOL] dense_layer = tf . keras . layers . Dense ( [number] ) [EOL] layer_drop_1 = LayerDropout ( rate = [number] ) [EOL] [EOL] [comment] [EOL] assert layer_drop_1 is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] training = tf . placeholder ( tf . bool , [ ] ) [EOL] value = layer_drop_1 ( dense_layer ( input_tensor ) , input_tensor , training = training ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output_drop = run_simple_session ( inputs = [ value ] , feed = { training : True } ) [EOL] [EOL] output_no_drop = run_simple_session_save_weights ( inputs = [ value ] , feed = { training : False } , weights = [ layer_drop_1 ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output_drop [ [number] ] is not None [EOL] assert output_no_drop [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output_drop [ [number] ] . shape == ( [number] , [number] ) [EOL] assert output_no_drop [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] assert not np . isclose ( output_drop [ [number] ] , output_no_drop [ [number] ] ) . all ( ) [EOL] assert np . isclose ( output_drop [ [number] ] , input_values ) . all ( ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output_no_drop , inputs = [ value ] , feed = { training : False } , weights = [ layer_drop_1 ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output_no_drop , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] check_regression ( [string] , output_drop , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] import json [EOL] import os [EOL] import warnings [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import check_regression , reset_session , run_simple_session [EOL] [EOL] def check_from_config ( __class , __obj ) : [EOL] assert __class . from_config ( __obj . get_config ( ) ) is not None [EOL] [EOL] [EOL] def test_luongAttention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import LuongAttention [EOL] luong_attention_layer = LuongAttention ( local = False , stddev = [number] , regularizer = None ) [EOL] assert luong_attention_layer is not None [EOL] [EOL] [comment] [EOL] encoded_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] query_values = np . random . sample ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] encoder_tensor = tf . constant ( encoded_values ) [comment] [EOL] query_tensor = tf . constant ( query_values ) [comment] [EOL] [EOL] value = luong_attention_layer ( ( query_tensor , encoder_tensor ) ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_luongAttention_local ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import LuongAttention [EOL] luong_attention_layer = LuongAttention ( local = True , stddev = [number] , regularizer = None ) [EOL] assert luong_attention_layer is not None [EOL] [EOL] [comment] [EOL] encoded_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] query_values = np . random . sample ( ( [number] , [number] ) ) [EOL] position_values = np . random . randint ( [number] , [number] , ( [number] , ) ) [EOL] [EOL] [comment] [EOL] encoder_tensor = tf . constant ( encoded_values ) [comment] [EOL] query_tensor = tf . constant ( query_values ) [comment] [EOL] position_tensor = tf . constant ( position_values ) [comment] [EOL] [EOL] value = luong_attention_layer ( ( query_tensor , encoder_tensor , position_tensor ) ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_attentionQKVProjection ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import AttentionQKVProjection [EOL] attention_qkv_projection = AttentionQKVProjection ( key_depth = [number] , value_depth = [number] ) [EOL] assert attention_qkv_projection is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] key_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] value_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] key_tensor = tf . constant ( key_values ) [EOL] value_tensor = tf . constant ( value_values ) [EOL] [EOL] value = attention_qkv_projection ( ( query_tensor , key_tensor , value_tensor ) ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_trilinearSimilarity ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import TrilinearSimilarity [EOL] trilinear_similarity_layer = TrilinearSimilarity ( ) [EOL] assert trilinear_similarity_layer is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] context_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] context_tensor = tf . constant ( context_values ) [EOL] [EOL] value = trilinear_similarity_layer ( ( context_tensor , query_tensor ) ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_scaledDotProductSimilarity ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import ScaledDotProductSimilarity [EOL] sdp_layer = ScaledDotProductSimilarity ( ) [EOL] assert sdp_layer is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] context_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] context_tensor = tf . constant ( context_values ) [EOL] [EOL] value = sdp_layer ( ( context_tensor , query_tensor ) ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_applyAttentionMask ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import ApplyAttentionMask [EOL] aam_layer = ApplyAttentionMask ( ) [EOL] assert aam_layer is not None [EOL] [EOL] [comment] [EOL] similarity_values = np . ones ( ( [number] , [number] , [number] ) ) [EOL] similarity_values_heads = np . ones ( ( [number] , [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] mask_values_heads = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] similarity_tensor = tf . constant ( similarity_values ) [EOL] similarity_heads_tensor = tf . constant ( similarity_values_heads ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] mask_heads_tensor = tf . constant ( mask_values_heads ) [EOL] [EOL] value = aam_layer ( inputs = similarity_tensor , mask = mask_tensor ) [EOL] value_heads = aam_layer ( inputs = similarity_heads_tensor , mask = mask_heads_tensor ) [EOL] [EOL] [comment] [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output = sess . run ( [ value , value_heads ] ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [comment] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_attentionMap ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import AttentionMap [EOL] from rinokeras . core . v1x . common . attention import ScaledDotProductSimilarity [EOL] sdp = ScaledDotProductSimilarity ( ) [EOL] attention_map = AttentionMap ( similarity_metric = sdp , attention_function = tf . nn . softmax ) [EOL] assert attention_map is not None [EOL] assert sdp is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] key_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] value_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] key_tensor = tf . constant ( key_values ) [EOL] value_tensor = tf . constant ( value_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = ( query_tensor , key_tensor , value_tensor ) , mask = mask_tensor ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_multiHeadAttentionMap ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import MultiHeadAttentionMap [EOL] from rinokeras . core . v1x . common . attention import ScaledDotProductSimilarity [EOL] sdp = ScaledDotProductSimilarity ( ) [EOL] attention_map = MultiHeadAttentionMap ( similarity_metric = sdp , n_heads = [number] , attention_function = tf . nn . softmax ) [EOL] assert attention_map is not None [EOL] assert sdp is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] key_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] value_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] key_tensor = tf . constant ( key_values ) [EOL] value_tensor = tf . constant ( value_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = ( query_tensor , key_tensor , value_tensor ) , mask = mask_tensor , return_attention_weights = True ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] masked_vals = np . squeeze ( output [ [number] ] [ : , [number] , : , : ] ) [ np . where ( mask_values == [number] ) ] [EOL] assert np . isclose ( masked_vals , np . zeros_like ( masked_vals ) ) . all ( ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_multiHeadAttention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import MultiHeadAttention [EOL] attention_map = MultiHeadAttention ( similarity_metric = [string] , n_heads = [number] ) [EOL] assert attention_map is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] key_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] value_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] key_tensor = tf . constant ( key_values ) [EOL] value_tensor = tf . constant ( value_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = ( query_tensor , key_tensor , value_tensor ) , mask = mask_tensor , return_attention_weights = True ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] masked_vals = np . squeeze ( output [ [number] ] [ : , [number] , : , : ] ) [ np . where ( mask_values == [number] ) ] [EOL] assert np . isclose ( masked_vals , np . zeros_like ( masked_vals ) ) . all ( ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] check_from_config ( MultiHeadAttention , attention_map ) [EOL] [EOL] [EOL] def test_multiHeadAttention_trilinear ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import MultiHeadAttention [EOL] attention_map = MultiHeadAttention ( similarity_metric = [string] , n_heads = [number] ) [EOL] assert attention_map is not None [EOL] [EOL] [comment] [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] key_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] value_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] query_tensor = tf . constant ( query_values ) [EOL] key_tensor = tf . constant ( key_values ) [EOL] value_tensor = tf . constant ( value_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = ( query_tensor , key_tensor , value_tensor ) , mask = mask_tensor , return_attention_weights = True ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] masked_vals = np . squeeze ( output [ [number] ] [ : , [number] , : , : ] ) [ np . where ( mask_values == [number] ) ] [EOL] assert np . isclose ( masked_vals , np . zeros_like ( masked_vals ) ) . all ( ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_selfAttention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import SelfAttention [EOL] attention_map = SelfAttention ( similarity_metric = [string] , n_heads = [number] ) [EOL] assert attention_map is not None [EOL] [EOL] [comment] [EOL] sa_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] sa_tensor = tf . constant ( sa_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = sa_tensor , mask = mask_tensor , return_attention_weights = True ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] is not None [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] masked_vals = np . squeeze ( output [ [number] ] [ : , [number] , : , : ] ) [ np . where ( mask_values == [number] ) ] [EOL] assert np . isclose ( masked_vals , np . zeros_like ( masked_vals ) ) . all ( ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [comment] [EOL] check_from_config ( SelfAttention , attention_map ) [EOL] [EOL] [EOL] def test_contextQueryAttention ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . attention import ContextQueryAttention [EOL] attention_map = ContextQueryAttention ( similarity_metric = [string] ) [EOL] assert attention_map is not None [EOL] [EOL] [comment] [EOL] context_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] query_values = np . random . sample ( ( [number] , [number] , [number] ) ) [EOL] mask_values = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] context_tensor = tf . constant ( context_values ) [EOL] query_tensor = tf . constant ( query_values ) [EOL] mask_tensor = tf . constant ( mask_values ) [EOL] [EOL] value = attention_map ( inputs = ( context_tensor , query_tensor ) , mask = mask_tensor ) [EOL] [EOL] [comment] [EOL] output = run_simple_session ( value , None ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] , [number] * [number] ) [EOL] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] [EOL] def test_stack ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . stack import Stack [EOL] layer = Stack ( [ tf . keras . layers . Dense ( [number] ) , tf . keras . layers . Dense ( [number] ) , tf . keras . layers . Dense ( [number] ) , ] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_layer_dropout_stack ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . stack import LayerDropoutStack [EOL] layer = LayerDropoutStack ( [ tf . keras . layers . Dense ( [number] ) , tf . keras . layers . Dense ( [number] ) , tf . keras . layers . Dense ( [number] ) , ] , layer_dropout = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_conv2d_stack ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . stack import Conv2DStack [EOL] layer = Conv2DStack ( [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_deconv2d_stack ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . stack import Deconv2DStack [EOL] layer = Deconv2DStack ( [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , flatten_output = False ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] [EOL] def test_dense_stack ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . stack import DenseStack [EOL] layer = DenseStack ( [ [number] , [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import check_regression , load_restore_test , random_tensor , reset_session , run_simple_session_save_weights [EOL] [EOL] def test_CategoricalPd ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . distributions import CategoricalPd [EOL] layer = CategoricalPd ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] logp_actions = layer . logp_actions ( tf . reshape ( tf . range ( [number] , [number] ) , ( - [number] , [number] ) ) ) [EOL] entropy = layer . entropy ( ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , logp_actions , entropy ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value , logp_actions , entropy ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_DiagGaussianPd ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . distributions import DiagGaussianPd [EOL] layer = DiagGaussianPd ( action_shape = ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] actions_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] logp_actions = layer . logp_actions ( actions_tensor ) [EOL] entropy = layer . entropy ( ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , logp_actions , entropy ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , ) [EOL] assert output [ [number] ] . shape == ( ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value , logp_actions , entropy ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_layer_norm ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . normalization import LayerNorm [EOL] layer = LayerNorm ( ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] assert np . isclose ( np . mean ( output [ [number] ] , axis = - [number] ) , np . zeros ( ( [number] , [number] ) ) , rtol = [number] , atol = [number] ) . all ( ) [EOL] assert np . isclose ( np . var ( output [ [number] ] , axis = - [number] ) , np . ones ( ( [number] , [number] ) ) , rtol = [number] , atol = [number] ) . all ( ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_weight_norm_dense ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . normalization import WeightNormDense [EOL] layer = WeightNormDense ( [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import rinokeras [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_dense_transpose ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . inversion import DenseTranspose [EOL] [EOL] dense_layer = tf . keras . layers . Dense ( [number] , use_bias = True ) [EOL] layer = DenseTranspose ( dense_layer ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( dense_layer ( input_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_embedding_transpose ( ) : [EOL] [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . inversion import EmbeddingTranspose [EOL] [EOL] embedding_layer = tf . keras . layers . Embedding ( [number] , [number] ) [EOL] layer = EmbeddingTranspose ( embedding_layer ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor = tf . expand_dims ( tf . convert_to_tensor ( np . arange ( [number] ) ) , axis = [number] ) [EOL] [EOL] [comment] [EOL] value = layer ( embedding_layer ( input_tensor ) ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL] [EOL] def test_invertible_dense ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . inversion import InvertibleDense [EOL] [EOL] layer = InvertibleDense ( [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , input_values = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value , log_det_w = layer ( input_tensor ) [EOL] rev_value = layer ( value , reverse = True ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value , log_det_w , rev_value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] assert np . isclose ( output [ [number] ] , input_values , rtol = [number] , atol = [number] ) . all ( ) [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value , log_det_w , rev_value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , tol = [number] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import rinokeras [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import warnings [EOL] import tempfile [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import * [EOL] [EOL] def test_gcn ( ) : [EOL] reset_session ( ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . gcn import GraphConvolutionalLayer [EOL] layer = GraphConvolutionalLayer ( units = [number] ) [EOL] [EOL] [comment] [EOL] assert layer is not None [EOL] [EOL] [comment] [EOL] input_tensor , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] adj_matrix , _ = random_tensor ( ( [number] , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] value = layer ( input_tensor , adj_matrix ) [EOL] [EOL] [comment] [EOL] with tempfile . TemporaryFile ( ) as weights_file : [EOL] [EOL] [comment] [EOL] output = run_simple_session_save_weights ( inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] assert output [ [number] ] is not None [EOL] [EOL] [comment] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] load_restore_test ( output = output , inputs = [ value ] , feed = { } , weights = [ layer ] , weights_file = weights_file ) [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import tensorflow as tf [EOL] import numpy as np [EOL] import json [EOL] import os [EOL] import warnings [EOL] [EOL] from rinokeras . testing import RK_REBUILD_REGRESSION_TESTS as _RK_REBUILD_REGRESSION [EOL] from rinokeras . testing . utils import check_regression [EOL] [EOL] def test_gated_tanh ( ) : [EOL] tf . reset_default_graph ( ) [EOL] np . random . seed ( [number] ) [EOL] tf . random . set_random_seed ( [number] ) [EOL] [comment] [EOL] from rinokeras . core . v1x . common . layers . activations import GatedTanh [EOL] gth_layer = GatedTanh ( n_units = [number] ) [EOL] assert gth_layer is not None [EOL] [EOL] [comment] [EOL] input_values = np . random . sample ( ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] input_tensor = tf . constant ( input_values ) [EOL] value = gth_layer ( input_tensor ) [EOL] [EOL] [comment] [EOL] config = tf . ConfigProto ( ) [EOL] config . gpu_options . allow_growth = True [EOL] with tf . Session ( ) as sess : [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL] sess . run ( tf . local_variables_initializer ( ) ) [EOL] output = sess . run ( value ) [EOL] [EOL] assert output is not None [comment] [EOL] assert output . shape == ( [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] check_regression ( [string] , output , __file__ , [string] , debug = _RK_REBUILD_REGRESSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from . tensors import random_mask_tensor	0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import torch [EOL] [EOL] def random_mask_tensor ( * shapes ) : [EOL] bd = torch . distributions . Bernoulli ( [number] ) [EOL] return bd . sample ( shapes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import torch [EOL] import numpy as np [EOL] [EOL] def test_position_embedding_no_concat_1d ( ) : [EOL] from rinokeras . torch . functional import position_embed [EOL] [EOL] pre_embed = torch . randn ( [number] , [number] , [number] , dtype = torch . float32 ) [EOL] post_embed = position_embed ( pre_embed , start = [number] , concat = False ) [EOL] [EOL] pre_numpy = pre_embed . numpy ( ) [EOL] post_numpy = post_embed . numpy ( ) [EOL] [EOL] assert post_embed . shape == ( [number] , [number] , [number] ) [EOL] assert not np . isclose ( pre_numpy - post_numpy , np . zeros ( [ [number] , [number] , [number] ] ) ) . any ( ) [EOL] [EOL] def test_position_embedding_concat_1d ( ) : [EOL] from rinokeras . torch . functional import position_embed [EOL] [EOL] pre_embed = torch . randn ( [number] , [number] , [number] , dtype = torch . float32 ) [EOL] post_embed = position_embed ( pre_embed , start = [number] , concat = True ) [EOL] [EOL] assert post_embed . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import torch [EOL] import time [EOL] [EOL] def test_attention_map_base ( ) : [EOL] from rinokeras . torch . functional import attention_map [EOL] [EOL] [comment] [EOL] queries_a = torch . randn ( [number] , [number] , [number] ) [EOL] keys_a = queries_a [EOL] values_a = queries_a [EOL] [EOL] output = attention_map ( queries_a , keys_a , values_a ) [EOL] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] [EOL] def test_multi_head_attention_map_base ( ) : [EOL] from rinokeras . torch . functional import multi_head_attention_map [EOL] [EOL] [comment] [EOL] queries_a = torch . randn ( [number] , [number] , [number] ) [EOL] keys_a = torch . randn ( [number] , [number] , [number] ) [EOL] values_a = torch . randn ( [number] , [number] , [number] ) [EOL] [EOL] output = multi_head_attention_map ( queries_a , keys_a , values_a , [number] ) [EOL] [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] ) [EOL] assert output [ [number] ] . shape == ( [number] , [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import torch [EOL] import numpy as np [EOL] [EOL] from rinokeras . testing . torch . utils import random_mask_tensor [EOL] [EOL] def test_apply_attention_mask_softmax ( ) : [EOL] [EOL] from rinokeras . torch . functional import apply_attention_mask [EOL] [EOL] inputs = torch . randn ( [number] , [number] , [number] ) [EOL] mask = random_mask_tensor ( [number] , [number] , [number] ) [EOL] masked = apply_attention_mask ( inputs , mask , hadamard = False ) [EOL] masked = torch . nn . functional . softmax ( masked , dim = - [number] ) [EOL] [EOL] tv1 = np . where ( mask . numpy ( ) , np . zeros_like ( masked . numpy ( ) ) , masked . numpy ( ) ) [EOL] tv2 = np . zeros_like ( tv1 ) [EOL] assert np . isclose ( tv1 , tv2 ) . all ( ) [EOL] [EOL] def test_apply_attention_mask_hadamard ( ) : [EOL] [EOL] from rinokeras . torch . functional import apply_attention_mask [EOL] [EOL] inputs = torch . randn ( [number] , [number] , [number] ) [EOL] mask = random_mask_tensor ( [number] , [number] , [number] ) [EOL] masked = apply_attention_mask ( inputs , mask , hadamard = True ) [EOL] [EOL] tv1 = np . where ( mask . numpy ( ) , np . zeros_like ( masked . numpy ( ) ) , masked . numpy ( ) ) [EOL] tv2 = np . zeros_like ( tv1 ) [EOL] assert np . isclose ( tv1 , tv2 ) . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rinokeras . core . torch . utils . data import batch	0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import numpy [EOL] import builtins [EOL] import typing [EOL] import rinokeras [EOL] import research [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] import sys [EOL] import os [EOL] [EOL] from flux . datasets . nlp . squad import Squad [comment] [EOL] from flux . processing . nlp . embedding . glove import GloveEmbedding [EOL] from rinokeras . models . qanet import QANet [comment] [EOL] [EOL] [comment] [EOL] tf . enable_eager_execution ( ) [EOL] [EOL] NUM_ITERATIONS = [number] [EOL] PRINT_INTERVAL = [number] [EOL] TEST_INTERVAL = [number] [EOL] BATCH_SIZE = [number] [EOL] VAL_ITERS = [number] [EOL] MAX_WORD_LEN = [number] [EOL] [EOL] [comment] [EOL] dataset = Squad ( nohashcheck = True ) [EOL] print ( dataset . info ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class PredictionNet ( tf . keras . Model ) : [EOL] def __init__ ( self , word_embed_matrix , char_embed_matrix , num_choices ) : [EOL] super ( PredictionNet , self ) . __init__ ( ) [EOL] self . encoder_module = QANet ( word_embed_matrix = word_embed_matrix , char_embed_matrix = char_embed_matrix ) [EOL] self . prediction_module = tf . keras . layers . Dense ( units = num_choices ) [EOL] [EOL] def call ( self , inputs , training = True ) : [EOL] result = self . encoder_module ( inputs , None , True , training ) [EOL] result = self . prediction_module ( result ) [EOL] [comment] [EOL] paddings = tf . constant ( [ [ [number] , [number] ] , [ [number] , MAX_WORD_LEN - result . shape [ [number] ] ] , [ [number] , [number] ] ] ) [EOL] result = tf . pad ( result , paddings ) [EOL] return result [EOL] [EOL] [EOL] def loss ( logits , labels_st , labels_et ) : [EOL] start_token_loss = tf . reduce_mean ( tf . nn . sparse_softmax_cross_entropy_with_logits ( logits = tf . reshape ( logits [ : , : , [number] ] , [ BATCH_SIZE , MAX_WORD_LEN ] ) , labels = labels_st ) ) [EOL] end_token_loss = tf . reduce_mean ( tf . nn . sparse_softmax_cross_entropy_with_logits ( logits = tf . reshape ( logits [ : , : , [number] ] , [ BATCH_SIZE , MAX_WORD_LEN ] ) , labels = labels_et ) ) [EOL] return start_token_loss + end_token_loss [EOL] [EOL] [EOL] def compute_accuracy ( logits , labels_st , labels_et ) : [EOL] s_predictions = tf . argmax ( tf . reshape ( logits [ : , : , [number] ] , [ BATCH_SIZE , MAX_WORD_LEN ] ) , axis = [number] , output_type = tf . int64 ) [EOL] e_predictions = tf . argmax ( tf . reshape ( logits [ : , : , [number] ] , [ BATCH_SIZE , MAX_WORD_LEN ] ) , axis = [number] , output_type = tf . int64 ) [EOL] labels_st = tf . cast ( labels_st , tf . int64 ) [EOL] labels_et = tf . cast ( labels_et , tf . int64 ) [EOL] batch_size = int ( logits . shape [ [number] ] ) [EOL] return ( tf . reduce_sum ( tf . cast ( tf . equal ( s_predictions , labels_st ) , dtype = tf . float32 ) ) + tf . reduce_sum ( tf . cast ( tf . equal ( e_predictions , labels_et ) , dtype = tf . float32 ) ) ) / ( [number] * batch_size ) [EOL] [EOL] [EOL] [comment] [EOL] word_embedding_matrix = GloveEmbedding ( ) . GenerateMatrix ( dataset . dictionary . word_dictionary ) [comment] [EOL] char_embedding_matrix = np . random . random ( size = ( dataset . char_vocab_size , [number] ) ) [EOL] [EOL] print ( word_embedding_matrix . shape , char_embedding_matrix . shape ) [EOL] [EOL] [comment] [EOL] model = PredictionNet ( word_embed_matrix = word_embedding_matrix , char_embed_matrix = char_embedding_matrix , num_choices = [number] ) [EOL] optimizer = tf . train . AdamOptimizer ( learning_rate = [number] ) [EOL] [EOL] checkpoint_prefix = os . path . join ( [string] , [string] ) [EOL] step_counter = tf . train . get_or_create_global_step ( ) [EOL] checkpoint = tf . train . Checkpoint ( model = model , optimizer = optimizer , step_counter = step_counter ) [EOL] checkpoint . restore ( tf . train . latest_checkpoint ( [string] ) ) [EOL] [EOL] [comment] [EOL] train_db = dataset . train_db . shuffle ( buffer_size = [number] ) . repeat ( ) . batch ( BATCH_SIZE ) [EOL] val_db = dataset . val_db . shuffle ( buffer_size = [number] ) . repeat ( ) . batch ( BATCH_SIZE ) [EOL] train_iterator = tf . contrib . eager . Iterator ( train_db ) [EOL] val_iterator = tf . contrib . eager . Iterator ( val_db ) [EOL] [EOL] [comment] [EOL] for iteration in range ( NUM_ITERATIONS ) : [EOL] [EOL] batch = next ( train_iterator ) [EOL] [EOL] with tf . GradientTape ( ) as tape : [EOL] logits = model ( batch , training = True ) [EOL] loss_value = loss ( logits , batch [ [number] ] , batch [ [number] ] ) [EOL] grads = tape . gradient ( loss_value , model . variables ) [EOL] optimizer . apply_gradients ( zip ( grads , model . variables ) , global_step = step_counter ) [EOL] [EOL] if iteration % [number] == [number] : [EOL] print ( [string] . format ( iteration , loss_value ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] if iteration % TEST_INTERVAL == [number] : [EOL] total_accuracy = [number] [EOL] num_batches = [number] [EOL] tloss = [number] [EOL] for vi in range ( VAL_ITERS ) : [EOL] vbatch = next ( val_iterator ) [EOL] logits = model ( vbatch ) [EOL] tloss += loss ( logits , vbatch [ [number] ] , vbatch [ [number] ] ) [EOL] total_accuracy += compute_accuracy ( logits , vbatch [ [number] ] , vbatch [ [number] ] ) [EOL] num_batches += [number] [EOL] print ( [string] . format ( iteration , float ( total_accuracy ) / num_batches , float ( tloss ) / num_batches ) ) [EOL] checkpoint . save ( checkpoint_prefix ) [EOL] sys . stdout . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $numpy.ndarray$ 0 $numpy.ndarray$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rinokeras.core.v1x.models.qanet.qanet.QANet$ 0 0 0 $numpy.ndarray$ 0 $numpy.ndarray$ 0 $numpy.ndarray$ 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $research.qanet_squad.PredictionNet$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $research.qanet_squad.PredictionNet$ 0 $research.qanet_squad.PredictionNet$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $research.qanet_squad.PredictionNet$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $research.qanet_squad.PredictionNet$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $research.qanet_squad.PredictionNet$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $research.qanet_squad.PredictionNet$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import rinokeras [EOL] import typing [EOL] import research [EOL] import tensorflow as tf [EOL] import os [EOL] import sys [EOL] import multiprocessing [EOL] tf . enable_eager_execution ( ) [EOL] [EOL] from flux . datasets . vision . cifar import Cifar10 [EOL] from rinokeras . models . resnet import ResNeXt50 [EOL] [EOL] [comment] [EOL] cifar = Cifar10 ( ) [EOL] train_image = tf . convert_to_tensor ( cifar . X_train , dtype = tf . float64 ) [EOL] train_labels = tf . convert_to_tensor ( cifar . Y_train , dtype = tf . int64 ) [EOL] val_image = tf . convert_to_tensor ( cifar . X_test , dtype = tf . float64 ) [EOL] val_labels = tf . convert_to_tensor ( cifar . Y_test , dtype = tf . int64 ) [EOL] [EOL] NUM_EPOCHS = [number] [EOL] TEST_INTERVAL = [number] [EOL] BATCH_SIZE = [number] [EOL] [EOL] [EOL] class PredictionNet ( tf . keras . Model ) : [EOL] def __init__ ( self , use_layer_norm = True ) : [EOL] super ( PredictionNet , self ) . __init__ ( ) [EOL] self . resnet = ResNeXt50 ( use_layer_norm = use_layer_norm ) [EOL] self . prediction_module = tf . keras . layers . Dense ( units = [number] ) [EOL] [EOL] def call ( self , inputs , training = True ) : [EOL] result = self . resnet ( inputs ) [EOL] result = self . prediction_module ( result ) [EOL] [comment] [EOL] return result [EOL] [EOL] def loss ( logits , labels ) : [EOL] sparse_loss = tf . nn . softmax_cross_entropy_with_logits_v2 ( logits = logits , labels = labels ) [EOL] return tf . reduce_mean ( sparse_loss ) [EOL] [EOL] def compute_accuracy ( logits , labels ) : [EOL] index = tf . argmax ( logits , axis = [number] ) [EOL] values = tf . cast ( tf . equal ( index , labels ) , tf . float64 ) [EOL] batch_size = int ( logits . shape [ [number] ] ) [EOL] [EOL] return tf . reduce_sum ( values ) / batch_size [EOL] [EOL] resnet = PredictionNet ( True ) [EOL] checkpoint_prefix = os . path . join ( [string] , [string] ) [EOL] optimizer = tf . train . AdamOptimizer ( learning_rate = [number] ) [EOL] step_counter = tf . train . get_or_create_global_step ( ) [EOL] checkpoint = tf . train . Checkpoint ( model = resnet , optimizer = optimizer , step_counter = step_counter ) [EOL] checkpoint . restore ( tf . train . latest_checkpoint ( [string] ) ) [EOL] [EOL] def run ( ) : [EOL] for iteration in range ( NUM_EPOCHS ) : [EOL] index = tf . range ( [number] , BATCH_SIZE , delta = [number] ) [EOL] index = tf . random_shuffle ( index ) [EOL] [EOL] batch = tf . gather ( train_image , index ) [EOL] labels = tf . gather ( train_labels , index ) [EOL] one_hot = tf . one_hot ( labels , depth = [number] , dtype = tf . float64 ) [EOL] with tf . GradientTape ( ) as tape : [EOL] logits = resnet ( batch ) [EOL] loss_value = loss ( logits , one_hot ) [EOL] grads = tape . gradient ( loss_value , resnet . variables ) [EOL] optimizer . apply_gradients ( zip ( grads , resnet . variables ) , global_step = step_counter ) [EOL] [EOL] if iteration % [number] == [number] : [EOL] print ( [string] . format ( iteration , loss_value ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] if iteration % TEST_INTERVAL == [number] : [EOL] total_accuracy = [number] [EOL] num_batches = [number] [EOL] tloss = [number] [EOL] index = tf . range ( [number] , BATCH_SIZE , delta = [number] ) [EOL] index = tf . random_shuffle ( index ) [EOL] batch = tf . gather ( val_image , index ) [EOL] labels = tf . gather ( val_labels , index ) [EOL] one_hot = tf . one_hot ( labels , depth = [number] , dtype = tf . float64 ) [EOL] logits = resnet ( batch ) [EOL] tloss += loss ( logits , one_hot ) [EOL] total_accuracy += compute_accuracy ( logits , labels ) [EOL] num_batches += [number] [EOL] print ( [string] . format ( iteration , float ( total_accuracy ) / num_batches , float ( tloss ) / num_batches ) ) [EOL] checkpoint . save ( checkpoint_prefix ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] if __name__ == [string] : [EOL] run ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rinokeras.core.v1x.models.resnet.resnet.ResNeXt50$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $research.resnet_cifar10.PredictionNet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import argparse [EOL] import typing [EOL] [docstring] [EOL] import argparse [EOL] from typing import Optional , Sequence [EOL] import yaml [EOL] [EOL] from rinokeras . rl import register_rinokeras_policies_with_ray , ray_policy [EOL] [EOL] import ray [EOL] from ray . rllib . models import ModelCatalog [EOL] from ray import tune [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , type = str , default = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] register_rinokeras_policies_with_ray ( ) [EOL] ray . init ( ) [EOL] with open ( [string] ) as f : [EOL] config = yaml . load ( f ) [EOL] config [ [string] ] [ [string] ] [ [string] ] = args . policy [EOL] tune . run ( ** config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import examples [EOL] import typing [EOL] import numpy as np [EOL] import tensorflow as tf [EOL] from tensorflow . keras . layers import Dense [EOL] from tensorflow . contrib . distribute import OneDeviceStrategy [EOL] import rinokeras as rk [EOL] [EOL] [EOL] class SupervisedExperiment ( rk . train . Experiment ) : [EOL] [EOL] def build_model ( self , inputs ) : [EOL] x , y = inputs [EOL] return self . model ( x ) [EOL] [EOL] def loss_function ( self , inputs , outputs ) : [EOL] x , y = inputs [EOL] return tf . losses . mean_squared_error ( y , outputs ) [EOL] [EOL] [EOL] x = np . random . random ( ( [number] , [number] ) ) [EOL] y = np . random . random ( ( [number] , [number] ) ) [EOL] [EOL] data = tf . data . Dataset . from_tensor_slices ( ( x , y ) ) . batch ( [number] ) [EOL] [EOL] model = Dense ( [number] ) [EOL] [EOL] distribution_strategy = OneDeviceStrategy ( [string] ) [EOL] experiment = SupervisedExperiment ( model , distribution_strategy = distribution_strategy ) [EOL] [EOL] train_graph = rk . train . TrainGraph . from_experiment ( experiment , data ) [EOL] [EOL] sess = tf . get_default_session ( ) [EOL] if sess is None : [EOL] sess = tf . InteractiveSession ( ) [EOL] [EOL] sess . run ( tf . global_variables_initializer ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $examples.supervised.SupervisedExperiment$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $examples.supervised.SupervisedExperiment$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0