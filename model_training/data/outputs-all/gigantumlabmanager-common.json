from typing import List [EOL] import typing [EOL] from setuptools import setup , find_packages [EOL] from codecs import open [EOL] from os import path [EOL] from lmcommon import __version__ [EOL] [EOL] here = path . abspath ( path . dirname ( __file__ ) ) [EOL] [EOL] [comment] [EOL] with open ( path . join ( here , [string] ) , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] [comment] [EOL] with open ( path . join ( here , [string] ) , encoding = [string] ) as f : [EOL] all_reqs = f . read ( ) . split ( [string] ) [EOL] [EOL] install_requires = [ x . strip ( ) for x in all_reqs if [string] not in x ] [EOL] dependency_links = [ x . strip ( ) . replace ( [string] , [string] ) for x in all_reqs if x . startswith ( [string] ) ] [EOL] [EOL] setup ( name = [string] , version = __version__ , description = [string] , long_description = long_description , url = [string] , download_url = [string] + __version__ , license = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , ] , keywords = [ [string] , [string] ] , packages = find_packages ( exclude = [ [string] , [string] ] ) , package_data = { [string] : [ [string] , [string] , [string] ] } , include_package_data = True , author = [string] , install_requires = install_requires , dependency_links = dependency_links , author_email = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
__version__ = [string] [EOL] [EOL] from lmcommon . logging . jsonformatter import JsonFormatter [EOL] import lmcommon . configuration . utils	$builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , Callable , Set , List , Any , Tuple [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] from typing import Any , Callable , Dict , Optional , Tuple [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . activity import ActivityAction , ActivityRecord , ActivityDetailRecord , ActivityType [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def process_sweep_status ( result_obj , status , section_infer_method ) : [EOL] sections = [ ] [EOL] ncnt = [number] [EOL] for filename in status [ [string] ] : [EOL] [comment] [EOL] if [string] in filename or [string] in filename : [EOL] continue [EOL] activity_type , activity_detail_type , section = section_infer_method ( filename ) [EOL] adr = ActivityDetailRecord ( activity_detail_type , show = False , importance = max ( [number] - ncnt , [number] ) , action = ActivityAction . CREATE ) [EOL] sections . append ( section ) [EOL] if section == [string] : [EOL] msg = f" [string] { filename } [string] " [EOL] msg = f"{ msg } [string] " [EOL] else : [EOL] msg = f" [string] { section } [string] { filename } [string] " [EOL] adr . add_value ( [string] , msg ) [EOL] result_obj . add_detail_object ( adr ) [EOL] ncnt += [number] [EOL] [EOL] [comment] [EOL] new_section_set = set ( sections ) [EOL] if ncnt > [number] and len ( new_section_set ) == [number] : [EOL] if [string] in new_section_set : [EOL] result_obj . type = ActivityType . CODE [EOL] elif [string] in new_section_set : [EOL] result_obj . type = ActivityType . INPUT_DATA [EOL] elif [string] in new_section_set : [EOL] result_obj . type = ActivityType . OUTPUT_DATA [EOL] [EOL] mcnt = [number] [EOL] msections = [ ] [EOL] for filename , change in status [ [string] ] : [EOL] [comment] [EOL] if [string] in filename or [string] in filename : [EOL] continue [EOL] [EOL] activity_type , activity_detail_type , section = section_infer_method ( filename ) [EOL] msections . append ( section ) [EOL] [EOL] if change == [string] : [EOL] action = ActivityAction . DELETE [EOL] elif change == [string] : [EOL] action = ActivityAction . CREATE [EOL] elif change == [string] : [EOL] action = ActivityAction . EDIT [EOL] elif change == [string] : [EOL] action = ActivityAction . EDIT [EOL] else : [EOL] action = ActivityAction . NOACTION [EOL] [EOL] adr = ActivityDetailRecord ( activity_detail_type , show = False , importance = max ( [number] - mcnt , [number] ) , action = action ) [EOL] adr . add_value ( [string] , f"{ change [ [number] ] . upper ( ) + change [ [number] : ] } [string] { section } [string] { filename } [string] " ) [EOL] result_obj . add_detail_object ( adr ) [EOL] mcnt += [number] [EOL] [EOL] modified_section_set = set ( msections ) [EOL] if result_obj . type == ActivityType . LABBOOK : [EOL] [comment] [EOL] if mcnt > [number] and len ( modified_section_set ) == [number] : [EOL] [comment] [EOL] if len ( new_section_set ) == [number] or new_section_set == modified_section_set : [EOL] [comment] [EOL] if [string] in modified_section_set : [EOL] result_obj . type = ActivityType . CODE [EOL] elif [string] in modified_section_set : [EOL] result_obj . type = ActivityType . INPUT_DATA [EOL] elif [string] in modified_section_set : [EOL] result_obj . type = ActivityType . OUTPUT_DATA [EOL] elif mcnt > [number] : [EOL] if len ( modified_section_set ) > [number] or new_section_set != modified_section_set : [EOL] [comment] [EOL] result_obj . type = ActivityType . LABBOOK [EOL] [EOL] [comment] [EOL] return result_obj , ncnt , mcnt [EOL] [EOL] [EOL] def to_workspace_branch ( labbook , username = None ) : [EOL] [docstring] [EOL] [EOL] if labbook . active_branch != [string] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] with labbook . lock_labbook ( ) : [EOL] logger . warning ( f" [string] { str ( labbook ) } [string] " ) [EOL] labbook . sweep_uncommitted_changes ( ) [EOL] labbook . checkout_branch ( [string] , new = True ) [EOL] [EOL] if username : [EOL] labbook . checkout_branch ( f' [string] { username }' , new = True ) [EOL] [EOL] return labbook . active_branch [EOL] [EOL] [EOL] def in_untracked ( labbook_root , section ) : [EOL] [docstring] [EOL] gitignore_path = os . path . join ( labbook_root , [string] ) [EOL] if not os . path . exists ( gitignore_path ) : [EOL] return False [EOL] gitignore_lines = [ l . strip ( ) for l in open ( gitignore_path ) . readlines ( ) ] [EOL] target_lines = [ f'{ section } [string] ' , f' [string] { section } [string] ' ] [EOL] if all ( [ a in gitignore_lines for a in target_lines ] ) : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[lmcommon.activity.ActivityRecord,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lmcommon . labbook . labbook import LabBook , LabbookException , LabbookMergeException [EOL] from lmcommon . labbook . shims import to_workspace_branch [EOL] from lmcommon . labbook import loaders [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import Optional [EOL] import subprocess [EOL] import shutil [EOL] import time [EOL] import os [EOL] [EOL] from lmcommon . configuration . utils import call_subprocess [EOL] from lmcommon . labbook . labbook import LabBook , LabbookException [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def from_remote ( remote_url , username , owner , labbook_name , labbook = None , make_owner = False ) : [EOL] [docstring] [EOL] [EOL] if make_owner : [EOL] owner = username [EOL] [EOL] if labbook is None : [EOL] [comment] [EOL] labbook = LabBook ( ) [EOL] [EOL] lbconf = labbook . labmanager_config . config [ [string] ] [ [string] ] [EOL] starting_dir = os . path . expanduser ( lbconf ) [EOL] [EOL] [comment] [EOL] lb_dir = os . path . join ( starting_dir , username , owner , [string] ) [EOL] est_root_dir = os . path . join ( starting_dir , username , owner , [string] , labbook_name ) [EOL] if os . path . exists ( est_root_dir ) : [EOL] errmsg = f" [string] { est_root_dir } [string] " [EOL] logger . error ( errmsg ) [EOL] raise ValueError ( errmsg ) [EOL] [EOL] os . makedirs ( lb_dir , exist_ok = True ) [EOL] [EOL] if labbook . labmanager_config . config [ [string] ] [ [string] ] is True : [EOL] logger . info ( f" [string] { remote_url } [string] { est_root_dir } [string] " ) [EOL] t0 = time . time ( ) [EOL] try : [EOL] call_subprocess ( [ [string] , [string] , [string] , remote_url ] , cwd = lb_dir ) [EOL] labbook . git . set_working_directory ( est_root_dir ) [EOL] except subprocess . CalledProcessError as e : [EOL] logger . error ( e ) [EOL] logger . error ( f' [string] { e . stderr . decode ( ) } [string] { e . stdout . decode ( ) }' ) [EOL] shutil . rmtree ( est_root_dir , ignore_errors = True ) [EOL] raise [EOL] logger . info ( f" [string] { remote_url } [string] { time . time ( ) - t0 } [string] " ) [EOL] else : [EOL] labbook . git . clone ( remote_url , directory = est_root_dir ) [EOL] labbook . git . fetch ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] logger . info ( f" [string] " ) [EOL] labbook . git . checkout ( [string] ) [EOL] [EOL] labbook . _set_root_dir ( est_root_dir ) [EOL] labbook . _load_labbook_data ( ) [EOL] [EOL] with labbook . lock_labbook ( ) : [EOL] logger . info ( f" [string] { username }" ) [EOL] if f' [string] { username }' in labbook . get_branches ( ) [ [string] ] : [EOL] labbook . checkout_branch ( f" [string] { username }" ) [EOL] else : [EOL] labbook . checkout_branch ( f" [string] { username }" , new = True ) [EOL] [EOL] if make_owner : [EOL] with labbook . lock_labbook ( ) : [EOL] logger . info ( f" [string] { username }" ) [EOL] labbook . _load_labbook_data ( ) [EOL] if labbook . _data : [EOL] labbook . _data [ [string] ] [ [string] ] = username [EOL] else : [EOL] raise LabbookException ( [string] ) [EOL] labbook . _save_labbook_data ( ) [EOL] with labbook . lock_labbook ( ) : [EOL] labbook . remove_remote ( [string] ) [EOL] msg = f" [string] { username }" [EOL] labbook . sweep_uncommitted_changes ( extra_msg = msg ) [EOL] return labbook [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import builtins [EOL] import typing [EOL] import redis_lock [EOL] from redis import StrictRedis [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def reset_all_locks ( config ) : [EOL] [docstring] [EOL] client = StrictRedis ( host = config [ [string] ] [ [string] ] , port = config [ [string] ] [ [string] ] , db = config [ [string] ] [ [string] ] ) [EOL] [EOL] redis_lock . reset_all ( client ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , Optional [EOL] import builtins [EOL] import typing [EOL] from typing import Any , Dict , Optional [EOL] from schema import ( Schema , SchemaError , Optional as SchemaOptional , Or as SchemaOr , Use as SchemaUse ) [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [comment] [EOL] CURRENT_SCHEMA = [number] [EOL] [EOL] LABBOOK_SCHEMA_VERSIONS = { [number] : { SchemaOptional ( [string] ) : SchemaOr ( SchemaUse ( str ) , None ) , [string] : { [string] : str , [string] : str , [string] : str } , [string] : { [string] : str } , [string] : int } } [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def validate_labbook_schema ( schema_version , lb_data ) : [EOL] [docstring] [EOL] if not schema_version or schema_version not in LABBOOK_SCHEMA_VERSIONS . keys ( ) : [EOL] logger . error ( f" [string] { schema_version } [string] " ) [EOL] return False [EOL] [EOL] if not lb_data : [EOL] logger . error ( f" [string] " ) [EOL] return False [EOL] [EOL] schema = Schema ( LABBOOK_SCHEMA_VERSIONS [ schema_version ] ) [EOL] try : [EOL] schema . validate ( lb_data ) [EOL] return True [EOL] except SchemaError as e : [EOL] logger . error ( e ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import os [EOL] [EOL] [EOL] from lmcommon . labbook import LabBook , LabbookException [EOL] from lmcommon . files import FileOperations [EOL] from lmcommon . fixtures import ( mock_config_file , mock_labbook_lfs_disabled , remote_labbook_repo ) [EOL] [EOL] [comment] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def pause_wait_for_redis ( ) : [EOL] import time [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] class TestLabBook ( object ) : [EOL] [EOL] def test_checkout_basics ( self , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] assert lb . active_branch == [string] [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] assert lb . active_branch == [string] [EOL] lb . checkout_branch ( [string] ) [EOL] assert lb . active_branch == [string] [EOL] assert lb . has_remote is False [EOL] [EOL] def test_checkout_not_allowed_to_create_duplicate_branch ( self , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] assert lb . active_branch == [string] [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] assert lb . active_branch == [string] [EOL] lb . checkout_branch ( [string] ) [EOL] assert lb . active_branch == [string] [EOL] with pytest . raises ( LabbookException ) : [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] def test_is_labbook_clean ( self , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] assert lb . is_repo_clean [EOL] [comment] [EOL] with open ( os . path . join ( lb . root_dir , [string] , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] assert not lb . is_repo_clean [EOL] [comment] [EOL] lb . git . add ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] lb . git . commit ( [string] ) [EOL] assert lb . is_repo_clean [EOL] [EOL] def test_checkout_not_allowed_when_there_are_uncomitted_changes ( self , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( lb . root_dir , [string] , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] with pytest . raises ( LabbookException ) : [EOL] [comment] [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] assert lb . active_branch == [string] [EOL] [comment] [EOL] lb . git . add ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] lb . git . commit ( [string] ) [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] def test_checkout_just_double_check_that_files_from_other_branches_go_away ( self , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] [comment] [EOL] with open ( os . path . join ( lb . root_dir , [string] , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] lb . git . add ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] lb . git . commit ( [string] ) [EOL] assert lb . active_branch == [string] [EOL] lb . checkout_branch ( [string] ) [EOL] [comment] [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] def test_checkout_make_sure_new_must_be_true_when_making_new_branch ( self , mock_labbook_lfs_disabled ) : [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] with pytest . raises ( LabbookException ) : [EOL] lb . checkout_branch ( [string] , new = False ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] def test_checkout_and_track_a_remote_branch ( self , remote_labbook_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] lb . checkout_branch ( branch_name = [string] ) [EOL] [EOL] def test_list_branches ( self , remote_labbook_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] assert [string] in lb . get_branches ( ) [ [string] ] [EOL] [EOL] def test_count_commits_behind_remote ( self , mock_config_file , remote_labbook_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] lb . checkout_branch ( [string] ) [EOL] [EOL] r = lb . get_commits_behind_remote ( [string] ) [EOL] assert r [ [number] ] == [string] [EOL] [comment] [EOL] assert r [ [number] ] == [number] [EOL] [EOL] [EOL] remote_lb = LabBook ( mock_config_file [ [number] ] ) [EOL] remote_lb . from_directory ( remote_labbook_repo ) [EOL] remote_lb . checkout_branch ( [string] ) [EOL] FileOperations . delete_file ( remote_lb , [string] , [string] ) [EOL] [EOL] r = lb . get_commits_behind_remote ( [string] ) [EOL] assert r [ [number] ] == [string] [EOL] [comment] [EOL] assert r [ [number] ] == [number] [EOL] [EOL] def test_count_commits_behind_remote_when_no_change ( self , mock_config_file , remote_labbook_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] lb . checkout_branch ( [string] ) [EOL] [EOL] r = lb . get_commits_behind_remote ( [string] ) [EOL] assert r [ [number] ] == [string] [EOL] [comment] [EOL] assert r [ [number] ] == [number] [EOL] [EOL] def test_count_commits_behind_for_local_branch ( self , mock_config_file , remote_labbook_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] [EOL] r = lb . get_commits_behind_remote ( [string] ) [EOL] assert r [ [number] ] == [string] [EOL] [comment] [EOL] assert r [ [number] ] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , List , Any , Tuple [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import getpass [EOL] import os [EOL] import yaml [EOL] import time [EOL] [EOL] from lmcommon . files import FileOperations [EOL] from lmcommon . labbook import LabBook , LabbookException [EOL] from lmcommon . gitlib . git import GitAuthor [EOL] from lmcommon . fixtures import mock_config_file , mock_labbook , remote_labbook_repo , sample_src_file [EOL] [EOL] [EOL] class TestLabBook ( object ) : [EOL] [EOL] def test_create_labbook ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert labbook_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( labbook_dir , [string] , [string] ) , [string] ) as data_file : [EOL] data = yaml . load ( data_file ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert [string] in data [ [string] ] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] [EOL] if getpass . getuser ( ) == [string] : [EOL] assert lb . build_details is None [EOL] else : [EOL] assert lb . build_details is not None [EOL] assert lb . creation_date is not None [EOL] [EOL] def test_create_labbook_no_username ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert labbook_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( labbook_dir , [string] , [string] ) , [string] ) as data_file : [EOL] data = yaml . load ( data_file ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert [string] in data [ [string] ] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] [EOL] def test_create_labbook_that_exists ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] def test_checkout_id_property ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] checkout_file = os . path . join ( lb . root_dir , [string] , [string] ) [EOL] assert os . path . exists ( checkout_file ) is False [EOL] checkout_id = lb . checkout_id [EOL] assert os . path . exists ( checkout_file ) is True [EOL] [EOL] parts = checkout_id . split ( [string] ) [EOL] assert len ( parts ) == [number] [EOL] assert parts [ [number] ] == [string] [EOL] assert parts [ [number] ] == [string] [EOL] assert parts [ [number] ] == [string] [EOL] assert parts [ [number] ] == [string] [EOL] assert len ( parts [ [number] ] ) == [number] [EOL] [EOL] [comment] [EOL] status = lb . git . status ( ) [EOL] for key in status : [EOL] assert len ( status [ key ] ) == [number] [EOL] [EOL] [comment] [EOL] os . remove ( checkout_file ) [EOL] [EOL] [comment] [EOL] status = lb . git . status ( ) [EOL] for key in status : [EOL] assert len ( status [ key ] ) == [number] [EOL] [EOL] def test_checkout_id_property_multiple_access ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] checkout_file = os . path . join ( lb . root_dir , [string] , [string] ) [EOL] assert os . path . exists ( checkout_file ) is False [EOL] checkout_id_1 = lb . checkout_id [EOL] assert os . path . exists ( checkout_file ) is True [EOL] assert checkout_id_1 == lb . checkout_id [EOL] [EOL] [comment] [EOL] os . remove ( checkout_file ) [EOL] lb . _checkout_id = None [EOL] [EOL] [comment] [EOL] assert checkout_id_1 != lb . checkout_id [EOL] [EOL] def test_list_labbooks_az ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 , lb4 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir1 = lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] labbook_dir2 = lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] labbook_dir3 = lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] labbook_dir4 = lb4 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_list_labbooks_az_reversed ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 , lb4 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir1 = lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] labbook_dir2 = lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] labbook_dir3 = lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbook_dir4 = lb4 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] assert labbook_dir1 == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert labbook_dir2 == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert labbook_dir3 == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert labbook_dir4 == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , reverse = True , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_list_labbooks_create_date ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_list_labbooks_create_date_no_metadata ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] os . remove ( os . path . join ( lb1 . root_dir , [string] , [string] ) ) [EOL] os . remove ( os . path . join ( lb3 . root_dir , [string] , [string] ) ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] os . remove ( os . path . join ( lb2 . root_dir , [string] , [string] ) ) [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] assert len ( labbooks ) == [number] [EOL] [EOL] def test_list_labbooks_create_date_reversed ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 , lb4 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] lb4 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] , reverse = True ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_list_labbooks_modified_date ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 , lb4 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb4 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] with open ( os . path . join ( lb2 . root_dir , [string] , [string] ) , [string] ) as tf : [EOL] tf . write ( [string] ) [EOL] [EOL] lb2 . git . add_all ( ) [EOL] lb2 . git . commit ( [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_list_labbooks_modified_date_reversed ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb1 , lb2 , lb3 , lb4 = LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) , LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] lb1 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb2 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb3 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] time . sleep ( [number] ) [EOL] lb4 . new ( username = [string] , owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] , reverse = True ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] with open ( os . path . join ( lb2 . root_dir , [string] , [string] ) , [string] ) as tf : [EOL] tf . write ( [string] ) [EOL] [EOL] lb2 . git . add_all ( ) [EOL] lb2 . git . commit ( [string] ) [EOL] [EOL] labbooks = lb1 . list_local_labbooks ( username = [string] , sort_mode = [string] , reverse = True ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_load_from_directory ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert labbook_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( labbook_dir , [string] , [string] ) , [string] ) as data_file : [EOL] data = yaml . load ( data_file ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert [string] in data [ [string] ] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] [EOL] lb_loaded = LabBook ( mock_config_file [ [number] ] ) [EOL] lb_loaded . from_directory ( labbook_dir ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] assert lb_loaded . root_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert lb_loaded . root_dir == lb . root_dir [EOL] assert lb_loaded . id == lb . id [EOL] assert lb_loaded . name == lb . name [EOL] assert lb_loaded . description == lb . description [EOL] [EOL] def test_load_from_name ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert labbook_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( labbook_dir , [string] , [string] ) , [string] ) as data_file : [EOL] data = yaml . load ( data_file ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert [string] in data [ [string] ] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] [EOL] lb_loaded = LabBook ( mock_config_file [ [number] ] ) [EOL] lb_loaded . from_name ( [string] , [string] , [string] ) [EOL] assert lb_loaded . active_branch == [string] [EOL] [EOL] assert lb_loaded . root_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert lb_loaded . root_dir == lb . root_dir [EOL] assert lb_loaded . id == lb . id [EOL] assert lb_loaded . name == lb . name [EOL] assert lb_loaded . description == lb . description [EOL] assert lb_loaded . key == [string] [EOL] [EOL] def test_change_properties ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] lb . name = [string] [EOL] lb . description = [string] [EOL] [EOL] [comment] [EOL] lb_loaded = LabBook ( mock_config_file [ [number] ] ) [EOL] lb_loaded . from_name ( [string] , [string] , [string] ) [EOL] assert lb_loaded . active_branch == [string] [EOL] [EOL] assert lb_loaded . root_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert lb_loaded . id == lb . id [EOL] assert lb_loaded . name == [string] [EOL] assert lb_loaded . description == [string] [EOL] [EOL] def test_validate_new_labbook_name ( self , mock_config_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] bad_labbook_names = [ None , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] * [number] , [string] , [string] , [string] , [string] ] [EOL] [EOL] allowed_labbook_names = [ [string] , [string] , [string] , [string] , [string] * [number] , [string] , [string] * [number] ] [EOL] [EOL] for bad in bad_labbook_names : [EOL] with pytest . raises ( ValueError ) : [EOL] lb . name = bad [EOL] [EOL] for good in allowed_labbook_names : [EOL] lb . name = good [EOL] [EOL] def test_make_path_relative ( self ) : [EOL] vectors = [ ( None , None ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] for sample_input , expected_output in vectors : [EOL] assert LabBook . make_path_relative ( sample_input ) == expected_output [EOL] [EOL] def test_labbook_key ( self , mock_config_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] assert lb . key == [string] [EOL] [EOL] lb1key = lb . key [EOL] lb2 = LabBook ( mock_config_file [ [number] ] ) [EOL] lb2 . from_key ( lb1key ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] def test_sweep_uncommitted_changes ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] with open ( os . path . join ( lb . root_dir , [string] , [string] ) , [string] ) as newf : [EOL] newf . write ( os . urandom ( [number] ** [number] ) ) [EOL] [EOL] assert [string] in lb . git . status ( ) [ [string] ] [EOL] lb . sweep_uncommitted_changes ( ) [EOL] s = lb . git . status ( ) [EOL] assert all ( [ len ( s [ key ] ) == [number] for key in s . keys ( ) ] ) [EOL] [EOL] with open ( os . path . join ( lb . root_dir , [string] , [string] ) , [string] ) as newf : [EOL] newf . write ( os . urandom ( [number] ** [number] ) ) [EOL] assert [string] in [ n [ [number] ] for n in lb . git . status ( ) [ [string] ] ] [EOL] lb . sweep_uncommitted_changes ( ) [EOL] s = lb . git . status ( ) [EOL] assert all ( [ len ( s [ key ] ) == [number] for key in s . keys ( ) ] ) [EOL] os . remove ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert [string] in [ n [ [number] ] for n in lb . git . status ( ) [ [string] ] ] [EOL] [EOL] lb . sweep_uncommitted_changes ( ) [EOL] s = lb . git . status ( ) [EOL] assert all ( [ len ( s [ key ] ) == [number] for key in s . keys ( ) ] ) [EOL] [EOL] assert any ( [ [string] in l [ [string] ] for l in lb . git . log ( ) ] ) [EOL] [EOL] def test_create_labbook_with_author ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] , author = GitAuthor ( name = [string] , email = [string] ) ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert labbook_dir == os . path . join ( mock_config_file [ [number] ] , [string] , [string] , [string] , [string] ) [EOL] assert type ( lb ) == LabBook [EOL] [EOL] [comment] [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . isdir ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( labbook_dir , [string] , [string] ) , [string] ) as data_file : [EOL] data = yaml . load ( data_file ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert [string] in data [ [string] ] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] [EOL] log_data = lb . git . log ( ) [EOL] assert log_data [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert log_data [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert log_data [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert log_data [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] def test_read_write_readme ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] , author = GitAuthor ( name = [string] , email = [string] ) ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] lb . write_readme ( [string] ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is True [EOL] [EOL] assert lb . get_readme ( ) == [string] [EOL] [EOL] def test_readme_size_limit ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] , author = GitAuthor ( name = [string] , email = [string] ) ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] lb . write_readme ( [string] * ( [number] * [number] ) ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] def test_readme_wierd_strings ( self , mock_config_file ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_file [ [number] ] , author = GitAuthor ( name = [string] , email = [string] ) ) [EOL] [EOL] labbook_dir = lb . new ( username = [string] , name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] rand_str = os . urandom ( [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] lb . write_readme ( rand_str ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] lb . write_readme ( None ) [EOL] [EOL] assert lb . get_readme ( ) is None [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is False [EOL] [EOL] lb . write_readme ( [string] ) [EOL] [EOL] assert lb . get_readme ( ) == [string] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] ) ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Optional[builtins.str],typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Optional[builtins.str],typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.bytes$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import json [EOL] from collections import OrderedDict [EOL] [EOL] from lmcommon . fixtures import mock_labbook [EOL] [EOL] [EOL] class TestLabBookFavorites ( object ) : [EOL] def test_invalid_subdir ( self , mock_labbook ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] ) [EOL] [EOL] def test_invalid_target ( self , mock_labbook ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] ) [EOL] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True ) [EOL] [EOL] def test_favorite_file ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] assert os . path . exists ( favorites_dir ) is False [EOL] assert os . path . isdir ( favorites_dir ) is False [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( favorites_dir , [string] ) ) is False [EOL] [EOL] result = mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] assert os . path . exists ( favorites_dir ) is True [EOL] assert os . path . isdir ( favorites_dir ) is True [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] assert result [ [string] ] == [string] [EOL] assert result [ [string] ] == [string] [EOL] assert result [ [string] ] is False [EOL] assert result [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_duplicate_favorite_file ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] assert os . path . exists ( favorites_dir ) is False [EOL] assert os . path . isdir ( favorites_dir ) is False [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( favorites_dir , [string] ) ) is False [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_append_to_favorite_file ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] result = mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] assert os . path . exists ( favorites_dir ) is True [EOL] assert os . path . isdir ( favorites_dir ) is True [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] assert result [ [string] ] == [string] [EOL] assert result [ [string] ] == [string] [EOL] assert result [ [string] ] is False [EOL] assert result [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_favorite_dir ( self , mock_labbook ) : [EOL] [docstring] [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] , is_dir = True ) [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_favorite_all_subdirs ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( favorites_dir , [string] ) ) is True [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_remove_favorite_errors ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . remove_favorite ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . remove_favorite ( [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . remove_favorite ( [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . remove_favorite ( [string] , [string] ) [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_remove_favorite_file ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] favorites_dir = os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) [EOL] [EOL] mock_labbook [ [number] ] . remove_favorite ( [string] , [string] ) [EOL] [EOL] with open ( os . path . join ( favorites_dir , [string] ) , [string] ) as ff : [EOL] data = json . load ( ff ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_get_favorites ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_update_description ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] ) [EOL] [EOL] [comment] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] fav = mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] ) [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] == [number] [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] is False [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_update_invalid_index ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_index = - [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_index = [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_index = [number] ) [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_update_smaller_index_and_description ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] fav = mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] , new_index = [number] ) [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] is True [EOL] assert fav [ [string] ] == [number] [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_update_larger_index_and_description ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] fav = mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] , new_index = [number] ) [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] is False [EOL] assert fav [ [string] ] == [number] [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] fav = mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] , new_index = [number] ) [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] is False [EOL] assert fav [ [string] ] == [number] [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_update_same_index ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert type ( data ) == OrderedDict [EOL] assert len ( data . keys ( ) ) == [number] [EOL] assert list ( data . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] fav = mock_labbook [ [number] ] . update_favorite ( [string] , [string] , new_description = [string] , new_index = [number] ) [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] == [string] [EOL] assert fav [ [string] ] is False [EOL] assert fav [ [string] ] == [number] [EOL] [EOL] data = mock_labbook [ [number] ] . get_favorites ( [string] ) [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is False [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] == [string] [EOL] assert data [ [string] ] [ [string] ] is True [EOL] assert data [ [string] ] [ [string] ] == [number] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL] [EOL] def test_favorite_data_prop ( self , mock_labbook ) : [EOL] [docstring] [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] with open ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) , [string] ) as test_file : [EOL] test_file . write ( [string] ) [EOL] [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] os . makedirs ( os . path . join ( mock_labbook [ [number] ] , [string] , [string] ) ) [EOL] [comment] [EOL] mock_labbook [ [number] ] . git . add_all ( ) [EOL] mock_labbook [ [number] ] . git . commit ( [string] ) [EOL] [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] mock_labbook [ [number] ] . create_favorite ( [string] , [string] , is_dir = True , description = [string] ) [EOL] [EOL] assert mock_labbook [ [number] ] . _favorite_keys is None [EOL] [EOL] favs = mock_labbook [ [number] ] . favorite_keys [EOL] assert len ( favs [ [string] ] ) == [number] [EOL] assert len ( favs [ [string] ] ) == [number] [EOL] assert len ( favs [ [string] ] ) == [number] [EOL] [EOL] assert favs [ [string] ] [ [number] ] == [string] [EOL] assert favs [ [string] ] [ [number] ] == [string] [EOL] assert favs [ [string] ] [ [number] ] == [string] [EOL] assert favs [ [string] ] [ [number] ] == [string] [EOL] assert favs [ [string] ] [ [number] ] == [string] [EOL] [EOL] mock_labbook [ [number] ] . _favorite_keys [ [string] ] . append ( [string] ) [EOL] favs_again = mock_labbook [ [number] ] . favorite_keys [EOL] assert [string] in favs_again [ [string] ] [EOL] [EOL] assert mock_labbook [ [number] ] . is_repo_clean is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lmcommon . dispatcher . dispatcher import Dispatcher , JobKey , JobStatus [EOL] import lmcommon . dispatcher . jobs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import multiprocessing [EOL] import builtins [EOL] import argparse [EOL] import typing [EOL] import multiprocessing [EOL] import argparse [EOL] import os [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from rq import Connection , Queue , Worker [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def start_rq_worker ( queue_name ) : [EOL] try : [EOL] with Connection ( ) : [EOL] q = Queue ( name = queue_name ) [EOL] logger . info ( [string] . format ( queue_name , os . getpid ( ) ) ) [EOL] Worker ( q ) . work ( ) [EOL] except Exception as e : [EOL] logger . exception ( [string] . format ( os . getpid ( ) , e ) ) [EOL] raise [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , type = int , help = [string] ) [EOL] [EOL] try : [EOL] args = parser . parse_args ( ) [EOL] except Exception as e : [EOL] logger . exception ( e ) [EOL] raise [EOL] [EOL] logger . info ( [string] . format ( args . count ) ) [EOL] procs = [ ] [EOL] for i in range ( [number] , args . count ) : [EOL] p = multiprocessing . Process ( target = start_rq_worker , args = ( [string] , ) ) [EOL] p . start ( ) [EOL] procs . append ( p ) [EOL] [EOL] logger . info ( [string] . format ( len ( procs ) ) ) [EOL] for p in procs : [EOL] p . join ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $multiprocessing.context.Process$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $multiprocessing.context.Process$ 0 $typing.List[typing.Any]$ 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any , Optional [EOL] import builtins [EOL] import typing [EOL] import os [EOL] import yaml [EOL] [EOL] from typing import ( Any , Dict , Optional ) [EOL] from pkg_resources import resource_filename [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class Configuration ( object ) : [EOL] [docstring] [EOL] INSTALLED_LOCATION = [string] [EOL] [EOL] def __init__ ( self , config_file = None ) : [EOL] [docstring] [EOL] if config_file : [EOL] self . config_file = config_file [EOL] else : [EOL] self . config_file = self . find_default_config ( ) [EOL] [EOL] self . config = self . load ( self . config_file ) [EOL] [EOL] @ staticmethod def find_default_config ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if os . path . isfile ( Configuration . INSTALLED_LOCATION ) : [EOL] return Configuration . INSTALLED_LOCATION [EOL] else : [EOL] [comment] [EOL] return os . path . join ( resource_filename ( [string] , [string] ) , [string] ) [EOL] [EOL] @ property def host_cuda_version ( self ) : [EOL] v = self . config [ [string] ] . get ( [string] ) [EOL] [comment] [EOL] if v : [EOL] return str ( v ) [EOL] else : [EOL] return None [EOL] [EOL] def _read_config_file ( self , config_file ) : [EOL] [docstring] [EOL] with open ( config_file , [string] ) as cf : [EOL] data = yaml . load ( cf ) [EOL] [EOL] [comment] [EOL] if [string] in data . keys ( ) : [EOL] if data [ [string] ] : [EOL] if os . path . isfile ( data [ [string] ] ) : [EOL] [comment] [EOL] parent_config_file = data [ [string] ] [EOL] else : [EOL] [comment] [EOL] parent_config_file = os . path . join ( os . path . dirname ( config_file ) , data [ [string] ] ) [EOL] [EOL] [comment] [EOL] parent_data = self . _read_config_file ( parent_config_file ) [EOL] data . update ( parent_data ) [EOL] [EOL] return data [EOL] [EOL] def load ( self , config_file = None ) : [EOL] [docstring] [EOL] if not config_file : [EOL] config_file = self . config_file [EOL] [EOL] data = self . _read_config_file ( config_file ) [EOL] return data [EOL] [EOL] def save ( self , config_file = None ) : [EOL] [docstring] [EOL] if not config_file : [EOL] config_file = self . config_file [EOL] [EOL] logger . info ( [string] . format ( self . config_file ) ) [EOL] with open ( config_file , [string] ) as cf : [EOL] cf . write ( yaml . dump ( self . config , default_flow_style = False ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import socket [EOL] import builtins [EOL] import typing [EOL] import socket [EOL] import json [EOL] import os [EOL] [EOL] import docker [EOL] [EOL] from lmcommon . configuration . configuration import Configuration [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def _get_docker_server_api_version ( ) : [EOL] [docstring] [EOL] [EOL] socket_path = [string] [EOL] if not os . path . exists ( socket_path ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] socket_connection = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) [EOL] socket_connection . connect ( socket_path ) [EOL] socket_connection . send ( [string] ) [EOL] [EOL] response_data = socket_connection . recv ( [number] ) [EOL] content_lines = response_data . decode ( ) . split ( [string] ) [EOL] [EOL] version_dict = json . loads ( content_lines [ - [number] ] ) [EOL] if [string] not in version_dict . keys ( ) : [EOL] raise ValueError ( [string] ) [EOL] else : [EOL] return version_dict [ [string] ] [EOL] [EOL] [EOL] def get_docker_client ( check_server_version = True , fallback = True ) : [EOL] [docstring] [EOL] [EOL] if check_server_version : [EOL] try : [EOL] docker_server_api_version = _get_docker_server_api_version ( ) [EOL] return docker . from_env ( version = docker_server_api_version ) [EOL] except ValueError as e : [EOL] if fallback : [EOL] logger . warn ( [string] ) [EOL] return docker . from_env ( ) [EOL] else : [EOL] logger . error ( ) [EOL] raise e [EOL] else : [EOL] return docker . from_env ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Optional [EOL] import builtins [EOL] import typing [EOL] from typing import ( Optional ) [EOL] [EOL] [EOL] class User ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . _username = None [EOL] self . _email = None [EOL] self . _given_name = None [EOL] self . _family_name = None [EOL] [EOL] @ property def username ( self ) : [EOL] if self . _username : [EOL] return self . _username [EOL] else : [EOL] return None [EOL] [EOL] @ username . setter def username ( self , value ) : [EOL] self . _username = value [EOL] [EOL] @ property def email ( self ) : [EOL] if self . _email : [EOL] return self . _email [EOL] else : [EOL] return None [EOL] [EOL] @ email . setter def email ( self , value ) : [EOL] self . _email = value [EOL] [EOL] @ property def given_name ( self ) : [EOL] if self . _given_name : [EOL] return self . _given_name [EOL] else : [EOL] return None [EOL] [EOL] @ given_name . setter def given_name ( self , value ) : [EOL] self . _given_name = value [EOL] [EOL] @ property def family_name ( self ) : [EOL] if self . _family_name : [EOL] return self . _family_name [EOL] else : [EOL] return None [EOL] [EOL] @ family_name . setter def family_name ( self , value ) : [EOL] self . _family_name = value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0
from lmcommon . auth . user import User [EOL]	0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , List , Union , Any [EOL] import requests [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import abc [EOL] import importlib [EOL] import requests [EOL] import os [EOL] import pathlib [EOL] from jose import jwt [EOL] import json [EOL] from typing import ( Optional , Dict , Any ) [EOL] [EOL] from lmcommon . configuration import Configuration [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . auth import User [EOL] from lmcommon . dispatcher import ( Dispatcher , jobs ) [EOL] from lmcommon . gitlib . gitlab import check_and_add_user [EOL] [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] [comment] [EOL] SUPPORTED_IDENTITY_MANAGERS = { [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] } [EOL] [EOL] [EOL] [comment] [EOL] class AuthenticationError ( Exception ) : [EOL] def __init__ ( self , error , status_code ) : [EOL] self . error = error [EOL] self . status_code = status_code [EOL] [EOL] [EOL] class IdentityManager ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config_obj ) : [EOL] self . config = config_obj [EOL] [EOL] [comment] [EOL] self . rsa_key = None [EOL] [EOL] [comment] [EOL] self . _user = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . validate_at_hash_claim = True [EOL] [EOL] @ property def user ( self ) : [EOL] if self . _user : [EOL] return self . _user [EOL] else : [EOL] return None [EOL] [EOL] @ user . setter def user ( self , value ) : [EOL] self . _user = value [EOL] [EOL] def _check_first_login ( self , username , access_token ) : [EOL] [docstring] [EOL] demo_labbook_name = [string] [EOL] working_directory = self . config . config [ [string] ] [ [string] ] [EOL] [EOL] if not username : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if not access_token : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if self . config . config [ [string] ] [ [string] ] : [EOL] user_dir = os . path . join ( working_directory , username ) [EOL] [EOL] [comment] [EOL] if not os . path . exists ( user_dir ) : [EOL] [comment] [EOL] pathlib . Path ( os . path . join ( working_directory , username , username , [string] ) ) . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] [comment] [EOL] logger . info ( f" [string] { username }" ) [EOL] [EOL] assumed_lb_name = demo_labbook_name . replace ( [string] , [string] ) [EOL] jobs . import_labboook_from_zip ( archive_path = os . path . join ( [string] , demo_labbook_name ) , username = username , owner = username , base_filename = assumed_lb_name , remove_source = False ) [EOL] [EOL] inferred_lb_directory = os . path . join ( working_directory , username , username , [string] , assumed_lb_name ) [EOL] build_img_kwargs = { [string] : inferred_lb_directory , [string] : username , [string] : True } [EOL] build_img_metadata = { [string] : [string] , [string] : f"{ username } [string] { username } [string] { assumed_lb_name }" } [EOL] dispatcher = Dispatcher ( ) [EOL] build_image_job_key = dispatcher . dispatch_task ( jobs . build_labbook_image , kwargs = build_img_kwargs , metadata = build_img_metadata ) [EOL] logger . info ( f" [string] { build_image_job_key } [string] " f" [string] { inferred_lb_directory } [string] " ) [EOL] [EOL] [comment] [EOL] default_remote = self . config . config [ [string] ] [ [string] ] [EOL] admin_service = None [EOL] for remote in self . config . config [ [string] ] [ [string] ] : [EOL] if default_remote == remote : [EOL] admin_service = self . config . config [ [string] ] [ [string] ] [ remote ] [ [string] ] [EOL] break [EOL] [EOL] if not admin_service : [EOL] raise ValueError ( [string] ) [EOL] [EOL] check_and_add_user ( admin_service = admin_service , access_token = access_token , username = username ) [EOL] [EOL] def _get_jwt_public_key ( self , id_token ) : [EOL] [docstring] [EOL] key_path = os . path . join ( self . config . config [ [string] ] [ [string] ] , [string] , [string] ) [EOL] if not os . path . exists ( key_path ) : [EOL] os . makedirs ( key_path ) [EOL] [EOL] key_file = os . path . join ( key_path , [string] ) [EOL] [comment] [EOL] if os . path . exists ( key_file ) : [EOL] with open ( key_file , [string] ) as jwk_file : [EOL] jwks = json . load ( jwk_file ) [EOL] [EOL] else : [EOL] url = [string] + self . config . config [ [string] ] [ [string] ] + [string] [EOL] response = requests . get ( url ) [EOL] if response . status_code != [number] : [EOL] raise AuthenticationError ( [string] , [number] ) [EOL] [EOL] jwks = response . json ( ) [EOL] [EOL] [comment] [EOL] if os . path . exists ( key_path ) : [EOL] with open ( key_file , [string] ) as jwk_file : [EOL] json . dump ( jwks , jwk_file ) [EOL] [EOL] logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] unverified_header = jwt . get_unverified_header ( id_token ) [EOL] except jwt . JWTError as err : [EOL] raise AuthenticationError ( str ( err ) , [number] ) [EOL] [EOL] rsa_key = { } [EOL] for key in jwks [ [string] ] : [EOL] if key [ [string] ] == unverified_header [ [string] ] : [EOL] rsa_key = { [string] : key [ [string] ] , [string] : key [ [string] ] , [string] : key [ [string] ] , [string] : key [ [string] ] , [string] : key [ [string] ] } [EOL] [EOL] return rsa_key [EOL] [EOL] @ staticmethod def _get_profile_attribute ( profile_data , attribute , required = True ) : [EOL] [docstring] [EOL] if profile_data is not None : [EOL] if attribute in profile_data . keys ( ) : [EOL] if profile_data [ attribute ] : [EOL] return profile_data [ attribute ] [EOL] else : [EOL] if required : [EOL] edetails = { [string] : [string] , [string] : f" [string] { attribute } [string] " } [EOL] raise AuthenticationError ( edetails , [number] ) [EOL] else : [EOL] return None [EOL] else : [EOL] if required : [EOL] edetails = { [string] : [string] , [string] : f" [string] { attribute } [string] " } [EOL] raise AuthenticationError ( edetails , [number] ) [EOL] else : [EOL] return None [EOL] else : [EOL] return None [EOL] [EOL] def validate_jwt_token ( self , token , audience , access_token = None , limited_validation = False ) : [EOL] [docstring] [EOL] [comment] [EOL] if not self . rsa_key : [EOL] self . rsa_key = self . _get_jwt_public_key ( token ) [EOL] [EOL] if self . rsa_key : [EOL] try : [EOL] if limited_validation is False : [EOL] payload = jwt . decode ( token , self . rsa_key , algorithms = self . config . config [ [string] ] [ [string] ] , audience = audience , issuer = [string] + self . config . config [ [string] ] [ [string] ] + [string] , access_token = access_token , options = { [string] : self . validate_at_hash_claim } ) [EOL] else : [EOL] payload = jwt . decode ( token , self . rsa_key , algorithms = self . config . config [ [string] ] [ [string] ] , audience = audience , issuer = [string] + self . config . config [ [string] ] [ [string] ] + [string] , options = { [string] : False , [string] : False } ) [EOL] [EOL] return payload [EOL] [EOL] except jwt . ExpiredSignatureError : [EOL] raise AuthenticationError ( { [string] : [string] , [string] : [string] } , [number] ) [EOL] except jwt . JWTClaimsError as err : [EOL] raise AuthenticationError ( { [string] : [string] , [string] : [string] } , [number] ) [EOL] except Exception : [EOL] raise AuthenticationError ( { [string] : [string] , [string] : [string] } , [number] ) [EOL] else : [EOL] raise AuthenticationError ( { [string] : [string] , [string] : [string] } , [number] ) [EOL] [EOL] @ abc . abstractmethod def is_authenticated ( self , access_token = None , id_token = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def is_token_valid ( self , access_token = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def get_user_profile ( self , access_token = None , id_token = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def logout ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] [EOL] def get_identity_manager ( config_obj ) : [EOL] [docstring] [EOL] if [string] not in config_obj . config . keys ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if [string] not in config_obj . config [ [string] ] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if config_obj . config [ [string] ] [ [string] ] not in SUPPORTED_IDENTITY_MANAGERS : [EOL] msg = f" [string] { config_obj . config [ [string] ] [ [string] ] } [string] " [EOL] msg = f"{ msg } [string] { [string] . join ( SUPPORTED_IDENTITY_MANAGERS . keys ( ) ) }" [EOL] raise ValueError ( msg ) [EOL] [EOL] [comment] [EOL] key = config_obj . config [ [string] ] [ [string] ] [EOL] identity_mngr_class = getattr ( importlib . import_module ( SUPPORTED_IDENTITY_MANAGERS [ key ] [ [number] ] ) , SUPPORTED_IDENTITY_MANAGERS [ key ] [ [number] ] ) [EOL] [EOL] [comment] [EOL] logger . info ( f" [string] { key }" ) [EOL] return identity_mngr_class ( config_obj ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lmcommon.configuration.Configuration$ 0 0 0 0 0 $lmcommon.configuration.Configuration$ 0 $lmcommon.configuration.Configuration$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lmcommon.auth.User$ 0 0 0 0 0 0 0 $lmcommon.auth.User$ 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.dispatcher.dispatcher.Dispatcher$ 0 0 0 0 0 $lmcommon.dispatcher.dispatcher.JobKey$ 0 $lmcommon.dispatcher.dispatcher.Dispatcher$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.dispatcher.dispatcher.JobKey$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.User]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Optional [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import requests [EOL] import getpass [EOL] [EOL] from lmcommon . configuration import Configuration [EOL] from lmcommon . fixtures import mock_config_file_with_auth_browser [EOL] from lmcommon . auth . identity import get_identity_manager , AuthenticationError [EOL] from lmcommon . auth . browser import BrowserIdentityManager [EOL] from lmcommon . auth import User [EOL] [EOL] [EOL] class TestIdentityBrowser ( object ) : [EOL] [comment] [EOL] [EOL] def test_is_session_valid ( self , mock_config_file_with_auth_browser ) : [EOL] [docstring] [EOL] config = Configuration ( mock_config_file_with_auth_browser [ [number] ] ) [EOL] mgr = get_identity_manager ( config ) [EOL] assert type ( mgr ) == BrowserIdentityManager [EOL] [EOL] [comment] [EOL] assert mgr . is_token_valid ( ) is False [EOL] assert mgr . is_token_valid ( None ) is False [EOL] assert mgr . is_token_valid ( [string] ) is False [EOL] [EOL] assert mgr . is_token_valid ( mock_config_file_with_auth_browser [ [number] ] [ [string] ] ) is True [EOL] assert mgr . rsa_key is not None [EOL] [EOL] def test_is_authenticated_token ( self , mock_config_file_with_auth_browser ) : [EOL] [docstring] [EOL] [comment] [EOL] config = Configuration ( mock_config_file_with_auth_browser [ [number] ] ) [EOL] mgr = get_identity_manager ( config ) [EOL] assert type ( mgr ) == BrowserIdentityManager [EOL] [EOL] [comment] [EOL] assert mgr . is_authenticated ( ) is False [EOL] assert mgr . is_authenticated ( None ) is False [EOL] assert mgr . is_authenticated ( [string] ) is False [EOL] [EOL] assert mgr . is_authenticated ( mock_config_file_with_auth_browser [ [number] ] [ [string] ] ) is True [EOL] [EOL] [comment] [EOL] mgr2 = get_identity_manager ( config ) [EOL] assert mgr2 . is_authenticated ( ) is False [EOL] assert mgr2 . is_authenticated ( [string] ) is False [comment] [EOL] [EOL] def test_get_user_profile ( self , mock_config_file_with_auth_browser ) : [EOL] [docstring] [EOL] config = Configuration ( mock_config_file_with_auth_browser [ [number] ] ) [EOL] mgr = get_identity_manager ( config ) [EOL] assert type ( mgr ) == BrowserIdentityManager [EOL] [comment] [EOL] mgr . validate_at_hash_claim = False [EOL] [EOL] [comment] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] [comment] [EOL] mgr . get_user_profile ( ) [EOL] [EOL] [comment] [EOL] u = mgr . get_user_profile ( mock_config_file_with_auth_browser [ [number] ] [ [string] ] , mock_config_file_with_auth_browser [ [number] ] [ [string] ] ) [EOL] assert type ( u ) == User [EOL] assert u . username == [string] [EOL] assert u . email == [string] [EOL] assert u . given_name == [string] [EOL] assert u . family_name == [string] [EOL] [EOL] [comment] [EOL] mgr2 = get_identity_manager ( config ) [EOL] with pytest . raises ( AuthenticationError ) : [EOL] [comment] [EOL] mgr2 . get_user_profile ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 0 0 0 0 0 $typing.Optional[lmcommon.auth.user.User]$ 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.auth.identity.IdentityManager$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , List , Any , Tuple [EOL] import builtins [EOL] import typing [EOL] import abc [EOL] import importlib [EOL] from typing import Dict , List , Optional , Tuple [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] SUPPORTED_GIT_INTERFACES = { [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] } [EOL] [EOL] [EOL] def get_git_interface ( config_dict ) : [EOL] [docstring] [EOL] [EOL] if [string] not in config_dict : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if config_dict [ [string] ] not in SUPPORTED_GIT_INTERFACES : [EOL] raise ValueError ( [string] . format ( config_dict [ [string] ] , [string] . join ( SUPPORTED_GIT_INTERFACES . keys ( ) ) ) ) [EOL] [comment] [EOL] backend_class = getattr ( importlib . import_module ( SUPPORTED_GIT_INTERFACES [ config_dict [ [string] ] ] [ [number] ] ) , SUPPORTED_GIT_INTERFACES [ config_dict [ [string] ] ] [ [number] ] ) [EOL] [EOL] [comment] [EOL] return backend_class ( config_dict ) [EOL] [EOL] [EOL] class GitAuthor ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , email ) : [EOL] [docstring] [EOL] self . name = name [EOL] self . email = email [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . name , self . email ) [EOL] [EOL] [EOL] class GitRepoInterface ( metaclass = abc . ABCMeta ) : [EOL] [EOL] def __init__ ( self , config_dict , author = None , committer = None ) : [EOL] [docstring] [EOL] self . config = config_dict [EOL] self . author = None [EOL] self . committer = None [EOL] self . working_directory = None [EOL] [EOL] self . update_author ( author = author , committer = committer ) [EOL] [EOL] def set_working_directory ( self , directory ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] def update_author ( self , author , committer = None ) : [EOL] [docstring] [EOL] if author : [EOL] if type ( author ) != GitAuthor : [EOL] raise ValueError ( [string] ) [EOL] self . author = author [EOL] else : [EOL] self . author = GitAuthor ( [string] , [string] ) [EOL] [EOL] if committer : [EOL] if type ( committer ) != GitAuthor : [EOL] raise ValueError ( [string] ) [EOL] self . committer = committer [EOL] else : [EOL] self . committer = GitAuthor ( [string] , [string] ) [EOL] [EOL] @ property def commit_hash ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ property def commit_hash_short ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ property def committed_on ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ property def git_path ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def get_current_branch_name ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def initialize ( self , bare = False ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def clone ( self , source , directory = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def status ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def add ( self , filename ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def add_all ( self , relative_directory = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def remove ( self , filename , force = False , keep_file = True ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def diff_unstaged ( self , filename = None , ignore_white_space = True ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def diff_staged ( self , filename = None , ignore_white_space = True ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def diff_commits ( self , commit_a = [string] , commit_b = [string] , ignore_white_space = True ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def commit ( self , message , author = None , committer = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def log ( self , path_info = None , max_count = [number] , filename = None , skip = None , since = None , author = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def log_entry ( self , commit ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def blame ( self , filename ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def create_branch ( self , name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def publish_branch ( self , branch_name , remote_name = [string] ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def list_branches ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def delete_branch ( self , name , remote = False , force = False ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def rename_branch ( self , old_name , new_name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def checkout ( self , branch_name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def create_tag ( self , name , message ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] def list_tags ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def list_remotes ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def add_remote ( self , name , url , kwargs = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def remove_remote ( self , name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def fetch ( self , refspec = None , remote = [string] ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def pull ( self , refspec = None , remote = [string] ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def push ( self , remote_name = [string] , refspec = None , tags = False ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def merge ( self , branch_name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def discard_changes ( self , filename = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ abc . abstractmethod def add_submodule ( self , name , relative_path , repository , branch = None ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def list_submodules ( self ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def update_submodules ( self , init = True ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def remove_submodules ( self , submodule_name ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
from lmcommon . gitlib . git import get_git_interface , GitAuthor , GitRepoInterface [EOL] from lmcommon . gitlib . git_fs import GitFilesystem [EOL] from lmcommon . gitlib . git_fs_shim import GitFilesystemShimmed [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import subprocess [EOL] import typing [EOL] from lmcommon . gitlib . git_fs import GitFilesystem [EOL] from lmcommon . logging import LMLogger [EOL] import subprocess [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class GitFilesystemShimmed ( GitFilesystem ) : [EOL] [EOL] def add ( self , filename ) : [EOL] [docstring] [EOL] logger . info ( [string] . format ( filename , self . working_directory ) ) [EOL] try : [EOL] r = subprocess . run ( [ [string] , [string] , f'{ filename }' ] , stderr = subprocess . PIPE , stdout = subprocess . PIPE , check = True , cwd = self . working_directory ) [EOL] except subprocess . CalledProcessError as x : [EOL] logger . error ( f'{ x . stdout } [string] { x . stderr }' ) [EOL] raise [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Type [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] [EOL] import os [EOL] os . environ [ [string] ] = [string] [EOL] [EOL] from lmcommon . gitlib import GitFilesystemShimmed [EOL] from . git_interface_mixin import GitInterfaceMixin [EOL] from . git_interface_mixin import mock_config_filesystem as mock_config [EOL] from . git_interface_mixin import mock_initialized_filesystem as mock_initialized [EOL] from . git_interface_mixin import mock_initialized_filesystem_with_remote as mock_initialized_remote [EOL] [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestGitFilesystem ( GitInterfaceMixin ) : [EOL] [docstring] [EOL] class_type = GitFilesystemShimmed [EOL] [EOL] def get_git_obj ( self , config ) : [EOL] print ( [string] ) [EOL] import pprint ; pprint . pprint ( config ) [EOL] return GitFilesystemShimmed ( config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[lmcommon.gitlib.git_fs_shim.GitFilesystemShimmed]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import typing [EOL] import pytest [EOL] from typing import Any [EOL] import tempfile [EOL] import os [EOL] import shutil [EOL] import uuid [EOL] import datetime [EOL] from lmcommon . gitlib import GitFilesystem , GitFilesystemShimmed , GitAuthor [EOL] from git import Repo [EOL] from git . exc import GitCommandError [EOL] [EOL] [EOL] def get_backend ( ) : [EOL] return os . environ [ [string] ] [EOL] [EOL] def get_fs_class ( ) : [EOL] if get_backend ( ) == [string] : [EOL] return GitFilesystem [EOL] elif get_backend ( ) == [string] : [EOL] return GitFilesystemShimmed [EOL] else : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ pytest . fixture ( ) def mock_config_filesystem ( ) : [EOL] [comment] [EOL] working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( working_dir ) [EOL] [EOL] config = { [string] : get_backend ( ) , [string] : working_dir } [EOL] [EOL] yield config [comment] [EOL] [EOL] [comment] [EOL] shutil . rmtree ( working_dir ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def mock_initialized_filesystem ( ) : [EOL] [docstring] [EOL] [comment] [EOL] working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( working_dir ) [EOL] [EOL] config = { [string] : get_backend ( ) , [string] : working_dir } [EOL] [EOL] [comment] [EOL] create_dummy_repo ( working_dir ) [EOL] git = get_fs_class ( ) ( config ) [EOL] [EOL] yield git , working_dir [comment] [EOL] [EOL] [comment] [EOL] shutil . rmtree ( working_dir ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def mock_initialized_filesystem_with_remote ( ) : [EOL] [docstring] [EOL] [comment] [EOL] bare_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( bare_working_dir ) [EOL] bare_repo = Repo . init ( bare_working_dir , bare = True ) [EOL] populate_bare_repo ( bare_working_dir ) [EOL] [EOL] [comment] [EOL] working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( working_dir ) [EOL] [EOL] config = { [string] : get_backend ( ) , [string] : working_dir } [EOL] [EOL] [comment] [EOL] git = get_fs_class ( ) ( config ) [EOL] git . clone ( bare_working_dir ) [EOL] [EOL] yield git , working_dir , bare_repo , bare_working_dir [comment] [EOL] [EOL] [comment] [EOL] shutil . rmtree ( bare_working_dir ) [EOL] shutil . rmtree ( working_dir ) [EOL] [EOL] [EOL] def populate_bare_repo ( working_dir ) : [EOL] [docstring] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] [comment] [EOL] git = get_fs_class ( ) ( config ) [EOL] git . clone ( working_dir ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] git . repo . remotes . origin . push ( ) [EOL] [EOL] [comment] [EOL] new_branch = git . repo . create_head ( [string] , git . repo . refs . master ) [EOL] git . repo . head . set_reference ( new_branch ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] git . repo . remotes . origin . push ( [string] ) [EOL] [EOL] [comment] [EOL] tag = git . repo . create_tag ( [string] , message = [string] ) [EOL] git . repo . remotes . origin . push ( tag ) [EOL] [EOL] [comment] [EOL] git . repo . heads . master . checkout ( ) [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] [EOL] def create_dummy_repo ( working_dir ) : [EOL] [docstring] [EOL] filename = [string] [EOL] repo = Repo . init ( working_dir ) [EOL] with open ( os . path . join ( working_dir , filename ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] [EOL] repo . index . add ( [ os . path . join ( working_dir , filename ) ] ) [EOL] repo . index . commit ( [string] ) [EOL] [EOL] [EOL] def write_file ( git_instance , filename , content , add = True , commit_msg = None ) : [EOL] [docstring] [EOL] working_dir = git_instance . config [ [string] ] [EOL] with open ( os . path . join ( working_dir , filename ) , [string] ) as dt : [EOL] dt . write ( content ) [EOL] [EOL] if add : [EOL] git_instance . add ( os . path . join ( working_dir , filename ) ) [EOL] [EOL] if commit_msg : [EOL] git_instance . commit ( commit_msg ) [EOL] [EOL] [EOL] class GitInterfaceMixin ( object ) : [EOL] [docstring] [EOL] class_type = None [EOL] [EOL] def get_git_obj ( self , config ) : [EOL] raise NotImplemented [EOL] [EOL] def test_empty_dir ( self , mock_config ) : [EOL] [docstring] [EOL] git = self . get_git_obj ( mock_config ) [EOL] assert type ( git ) is self . class_type [EOL] assert git . repo is None [EOL] [EOL] def test_existing_repo ( self , mock_config ) : [EOL] [docstring] [EOL] [comment] [EOL] create_dummy_repo ( mock_config [ [string] ] ) [EOL] [EOL] [comment] [EOL] git = self . get_git_obj ( mock_config ) [EOL] assert type ( git ) is self . class_type [EOL] assert type ( git . repo ) is Repo [EOL] [EOL] def test_update_working_directory ( self , mock_config ) : [EOL] [docstring] [EOL] [comment] [EOL] create_dummy_repo ( mock_config [ [string] ] ) [EOL] [EOL] [comment] [EOL] git = self . get_git_obj ( mock_config ) [EOL] assert type ( git ) is self . class_type [EOL] assert type ( git . repo ) is Repo [EOL] assert git . working_directory == mock_config [ [string] ] [EOL] [EOL] new_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( new_working_dir ) [EOL] git . set_working_directory ( new_working_dir ) [EOL] [EOL] assert git . repo is None [EOL] assert git . working_directory == new_working_dir [EOL] [EOL] git . initialize ( ) [EOL] assert type ( git . repo ) is Repo [EOL] [EOL] shutil . rmtree ( new_working_dir ) [EOL] [EOL] def test_clone_repo ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] git = self . get_git_obj ( config ) [EOL] git . clone ( mock_initialized_remote [ [number] ] ) [EOL] [EOL] assert len ( git . repo . heads ) == [number] [EOL] assert len ( git . repo . remotes [ [string] ] . fetch ( ) ) == [number] [EOL] assert len ( git . repo . refs ) == [number] [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( scratch_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( scratch_working_dir , [string] ) ) is False [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_author_invalid ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] git . update_author ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] git . update_author ( [string] , committer = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] git . update_author ( [string] , committer = GitAuthor ( [string] , [string] ) ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] git . update_author ( GitAuthor ( [string] , [string] ) , committer = [string] ) [EOL] [EOL] def test_author ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] assert type ( git . author ) == GitAuthor [EOL] assert type ( git . committer ) == GitAuthor [EOL] assert git . author . name == [string] [EOL] assert git . author . email == [string] [EOL] assert git . committer . name == [string] [EOL] assert git . committer . email == [string] [EOL] [EOL] [comment] [EOL] git . update_author ( GitAuthor ( [string] , [string] ) ) [EOL] assert git . author . name == [string] [EOL] assert git . author . email == [string] [EOL] assert git . committer . name == [string] [EOL] assert git . committer . email == [string] [EOL] [EOL] [comment] [EOL] git . update_author ( GitAuthor ( [string] , [string] ) , GitAuthor ( [string] , [string] ) ) [EOL] assert git . author . name == [string] [EOL] assert git . author . email == [string] [EOL] assert git . committer . name == [string] [EOL] assert git . committer . email == [string] [EOL] [EOL] def test_status ( self , mock_config ) : [EOL] [docstring] [EOL] [comment] [EOL] create_dummy_repo ( mock_config [ [string] ] ) [EOL] [EOL] [comment] [EOL] git = self . get_git_obj ( mock_config ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] os . remove ( os . path . join ( mock_config [ [string] ] , [string] ) ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] write_file ( git , [string] , [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] [comment] [EOL] subdir = os . path . join ( mock_config [ [string] ] , [string] ) [EOL] os . makedirs ( subdir ) [EOL] write_file ( git , os . path . join ( subdir , [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert [string] in status [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] assert [string] in status [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] assert [string] in status [EOL] assert status [ [string] ] == [ [string] ] [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] def test_add ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] print ( f" [string] { mock_initialized }" ) [EOL] [comment] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] [EOL] [comment] [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_add_all_working_dir ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] os . remove ( os . path . join ( working_directory , [string] ) ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] [EOL] [comment] [EOL] git . add_all ( ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_add_all_sub_dir ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] os . makedirs ( os . path . join ( working_directory , [string] ) ) [EOL] [EOL] [comment] [EOL] write_file ( git , os . path . join ( [string] ) , [string] , add = False ) [EOL] write_file ( git , os . path . join ( [string] , [string] ) , [string] , commit_msg = [string] ) [EOL] write_file ( git , os . path . join ( [string] , [string] ) , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , os . path . join ( [string] , [string] ) , [string] , add = False ) [EOL] write_file ( git , os . path . join ( [string] , [string] ) , [string] , add = False ) [EOL] os . remove ( os . path . join ( working_directory , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] git . add_all ( [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_remove_staged_file ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] git . remove ( os . path . join ( working_directory , [string] ) ) [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] [EOL] def test_remove_committed_file ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . remove ( os . path . join ( working_directory , [string] ) ) [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_remove_committed_file_delete ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . remove ( os . path . join ( working_directory , [string] ) , keep_file = False ) [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_diff_unstaged ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . repo . index . commit ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] [EOL] diff_info = git . diff_unstaged ( ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] def test_diff_unstaged_file ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . repo . index . commit ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] [EOL] diff_info = git . diff_unstaged ( [string] ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] def test_diff_staged ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . repo . index . commit ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] [EOL] diff_info = git . diff_staged ( ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] def test_diff_staged_file ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . repo . index . commit ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] for val in range ( [number] , [number] ) : [EOL] dt . write ( [string] . format ( val ) ) [EOL] dt . write ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_directory , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] git . add ( os . path . join ( working_directory , [string] ) ) [EOL] [EOL] diff_info = git . diff_staged ( [string] ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] def test_diff_commits ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit1 = git . repo . head . commit [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit2 = git . repo . head . commit [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit3 = git . repo . head . commit [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit4 = git . repo . head . commit [EOL] [EOL] [comment] [EOL] diff_info = git . diff_commits ( ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] diff_info = git . diff_commits ( commit_a = commit1 . hexsha ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert [string] in diff_info [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] diff_info = git . diff_commits ( commit_a = commit2 . hexsha , commit_b = commit3 . hexsha ) [EOL] [EOL] assert len ( diff_info . keys ( ) ) == [number] [EOL] assert [string] in diff_info [EOL] assert len ( diff_info [ [string] ] ) == [number] [EOL] [EOL] def test_commit ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] [EOL] subdir = os . path . join ( working_directory , [string] ) [EOL] os . makedirs ( subdir ) [EOL] write_file ( git , os . path . join ( subdir , [string] ) , [string] ) [EOL] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] assert status [ [string] ] [ [number] ] == ( os . path . join ( [string] , [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] git . commit ( [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] == [ [string] ] [EOL] [EOL] assert git . repo . head . commit . message == [string] [EOL] assert git . repo . head . commit . author . name == [string] [EOL] assert git . repo . head . commit . author . email == [string] [EOL] [EOL] def test_commit_with_author ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] == ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] assert git . repo . head . commit . message == [string] [EOL] assert git . repo . head . commit . author . name == [string] [EOL] assert git . repo . head . commit . author . email == [string] [EOL] assert git . repo . head . commit . committer . name == [string] [EOL] assert git . repo . head . commit . committer . email == [string] [EOL] assert git . author . __dict__ == GitAuthor ( [string] , [string] ) . __dict__ [EOL] assert git . committer . __dict__ == GitAuthor ( [string] , [string] ) . __dict__ [EOL] [EOL] def test_log ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] commit_list = [ ] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] log_info = git . log ( ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] [comment] [EOL] [comment] [EOL] for truth , log in zip ( reversed ( commit_list ) , log_info [ : - [number] ] ) : [EOL] assert log [ [string] ] == { [string] : truth . author . name , [string] : truth . author . email } [EOL] assert log [ [string] ] == { [string] : truth . committer . name , [string] : truth . committer . email } [EOL] assert log [ [string] ] == truth . message [EOL] assert log [ [string] ] == truth . hexsha [EOL] [EOL] [comment] [EOL] log_info = git . log ( filename = [string] ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] [EOL] def test_log_page ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] commit_list = [ ] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_start = git . repo . head . commit [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] log_info = git . log ( path_info = commit_start ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] assert commit_list [ [number] ] . hexsha == commit_start . hexsha [EOL] assert log_info [ [number] ] [ [string] ] == commit_list [ [number] ] . hexsha [EOL] assert log_info [ [number] ] [ [string] ] == commit_list [ [number] ] . hexsha [EOL] assert log_info [ [number] ] [ [string] ] == commit_list [ [number] ] . hexsha [EOL] [EOL] [comment] [EOL] log_info = git . log ( path_info = commit_start , max_count = [number] ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] assert commit_list [ [number] ] . hexsha == commit_start . hexsha [EOL] assert log_info [ [number] ] [ [string] ] == commit_list [ [number] ] . hexsha [EOL] assert log_info [ [number] ] [ [string] ] == commit_list [ [number] ] . hexsha [EOL] [EOL] [EOL] def test_log_filter ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] commit_list = [ ] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] ) [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] commit_list . append ( git . repo . head . commit ) [EOL] [EOL] [comment] [EOL] log_info = git . log ( max_count = [number] ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] log_info = git . log ( max_count = [number] , skip = [number] ) [EOL] [EOL] assert len ( log_info ) == [number] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] log_info = git . log ( since = datetime . datetime . now ( ) + datetime . timedelta ( days = [number] ) ) [EOL] assert len ( log_info ) == [number] [EOL] [EOL] [comment] [EOL] log_info = git . log ( author = [string] ) [EOL] assert len ( log_info ) == [number] [EOL] log_info [ [number] ] [ [string] ] = [string] [EOL] [EOL] def test_blame ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_dir = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] commit1 = git . repo . head . commit [EOL] [EOL] with open ( os . path . join ( working_dir , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_dir , [string] ) ) [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] commit2 = git . repo . head . commit [EOL] [EOL] with open ( os . path . join ( working_dir , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_dir , [string] ) ) [EOL] git . commit ( [string] , author = GitAuthor ( [string] , [string] ) , committer = GitAuthor ( [string] , [string] ) ) [EOL] commit3 = git . repo . head . commit [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( working_dir , [string] ) , [string] ) as dt : [EOL] dt . write ( [string] ) [EOL] git . add ( os . path . join ( working_dir , [string] ) ) [EOL] git . commit ( [string] ) [EOL] commit4 = git . repo . head . commit [EOL] [EOL] blame_info = git . blame ( [string] ) [EOL] [EOL] assert len ( blame_info ) == [number] [EOL] assert blame_info [ [number] ] [ [string] ] == commit1 . hexsha [EOL] assert blame_info [ [number] ] [ [string] ] == commit4 . hexsha [EOL] assert blame_info [ [number] ] [ [string] ] == commit1 . hexsha [EOL] assert blame_info [ [number] ] [ [string] ] == commit2 . hexsha [EOL] assert blame_info [ [number] ] [ [string] ] == commit3 . hexsha [EOL] [EOL] assert blame_info [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert blame_info [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert blame_info [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert blame_info [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] assert blame_info [ [number] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] assert blame_info [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_create_branch ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_dir = mock_initialized [ [number] ] [EOL] [EOL] branches = git . repo . heads [EOL] [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] git . create_branch ( [string] ) [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] def test_rename_branch ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] git . create_branch ( [string] ) [EOL] git . create_branch ( [string] ) [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] [comment] [EOL] git . rename_branch ( [string] , [string] ) [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] git . rename_branch ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] git . rename_branch ( [string] , [string] ) [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] def test_checkout_branch ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [EOL] assert git . repo . head . ref . name == [string] [EOL] [EOL] git . create_branch ( [string] ) [EOL] [EOL] import pprint [EOL] pprint . pprint ( git . repo . head . ref . name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] assert git . repo . head . ref . name == [string] [comment] [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] [EOL] assert git . repo . head . ref . name == [string] [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] git . checkout ( [string] ) [EOL] [EOL] def test_checkout_branch_context ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] assert git . repo . head . ref . name == [string] [EOL] [EOL] git . create_branch ( [string] ) [EOL] [EOL] assert git . repo . head . ref . name == [string] [EOL] [EOL] [comment] [EOL] os . makedirs ( os . path . join ( git . working_directory , [string] ) ) [EOL] checkout_file = os . path . join ( git . working_directory , [string] , [string] ) [EOL] [EOL] with open ( checkout_file , [string] ) as cf : [EOL] cf . write ( [string] ) [EOL] assert os . path . exists ( checkout_file ) is True [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] [EOL] assert os . path . exists ( checkout_file ) is False [EOL] [EOL] def test_list_branches ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] git = mock_initialized_remote [ [number] ] [EOL] [EOL] git . create_branch ( [string] ) [EOL] git . publish_branch ( [string] ) [EOL] git . create_branch ( [string] ) [EOL] branches = git . list_branches ( ) [EOL] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert [string] in branches [ [string] ] [EOL] assert [string] in branches [ [string] ] [EOL] assert [string] not in branches [ [string] ] [EOL] assert [string] in branches [ [string] ] [EOL] [EOL] def test_delete_branch ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] git = mock_initialized_remote [ [number] ] [EOL] [EOL] git . create_branch ( [string] ) [EOL] git . publish_branch ( [string] ) [EOL] git . create_branch ( [string] ) [EOL] branches = git . list_branches ( ) [EOL] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [comment] [EOL] git . delete_branch ( [string] ) [EOL] branches = git . list_branches ( ) [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] git . delete_branch ( [string] ) [EOL] branches = git . list_branches ( ) [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert branches [ [string] ] [ [number] ] == [string] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . delete_branch ( [string] , delete_remote = True ) [EOL] branches = git . list_branches ( ) [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] assert branches [ [string] ] [ [number] ] == [string] [EOL] assert len ( branches [ [string] ] ) == [number] [EOL] [EOL] def test_existing_tag_fail ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] git . create_tag ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( GitCommandError ) : [EOL] git . create_tag ( [string] , [string] ) [EOL] [EOL] def test_tags ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] git . create_tag ( [string] , [string] ) [EOL] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] git . create_tag ( [string] , [string] ) [EOL] [EOL] tags = git . list_tags ( ) [EOL] [EOL] assert len ( tags ) == [number] [EOL] assert tags [ [number] ] [ [string] ] == [string] [EOL] assert tags [ [number] ] [ [string] ] == [string] [EOL] assert tags [ [number] ] [ [string] ] == [string] [EOL] assert tags [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_add_remove_remote ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] [comment] [EOL] git = get_fs_class ( ) ( config ) [EOL] git . initialize ( ) [EOL] remote_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] git . add_remote ( [string] , remote_dir ) [EOL] [EOL] remotes = git . list_remotes ( ) [EOL] [EOL] assert len ( remotes ) == [number] [EOL] assert remotes [ [number] ] [ [string] ] == [string] [EOL] assert remotes [ [number] ] [ [string] ] == remote_dir [EOL] [EOL] git . remove_remote ( [string] ) [EOL] assert len ( git . list_remotes ( ) ) == [number] [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_publish_branch ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] [comment] [EOL] git = mock_initialized_remote [ [number] ] [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] [comment] [EOL] git . create_branch ( [string] ) [EOL] [comment] [EOL] git . publish_branch ( [string] , [string] ) [EOL] [EOL] branches = git . repo . heads [EOL] assert len ( branches ) == [number] [EOL] assert branches [ [number] ] . name == [string] [EOL] assert branches [ [number] ] . name == [string] [EOL] [EOL] [comment] [EOL] test_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( test_working_dir ) [EOL] test_repo = Repo . clone_from ( mock_initialized_remote [ [number] ] , test_working_dir ) [EOL] assert len ( test_repo . remotes [ [string] ] . fetch ( ) ) == [number] [EOL] [EOL] def test_fetch_pull ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] cloned_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] git = mock_initialized_remote [ [number] ] [EOL] assert len ( git . repo . heads ) == [number] [EOL] assert len ( git . repo . remotes [ [string] ] . fetch ( ) ) == [number] [EOL] assert len ( git . repo . refs ) == [number] [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] git . pull ( ) [EOL] assert len ( git . repo . heads ) == [number] [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] [comment] [EOL] git_updater = get_fs_class ( ) ( config ) [EOL] git_updater . clone ( mock_initialized_remote [ [number] ] ) [EOL] git_updater . checkout ( [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git_updater , [string] , [string] , commit_msg = [string] ) [EOL] git_updater . repo . remotes . origin . push ( ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] git . pull ( ) [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_push ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] cloned_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] git = mock_initialized_remote [ [number] ] [EOL] assert len ( git . repo . heads ) == [number] [EOL] assert len ( git . repo . remotes [ [string] ] . fetch ( ) ) == [number] [EOL] assert len ( git . repo . refs ) == [number] [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] git . push ( ) [EOL] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] [comment] [EOL] git_updater = get_fs_class ( ) ( config ) [EOL] git_updater . clone ( mock_initialized_remote [ [number] ] ) [EOL] git_updater . checkout ( [string] ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_push_tags ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] cloned_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] git = mock_initialized_remote [ [number] ] [EOL] assert len ( git . repo . heads ) == [number] [EOL] assert len ( git . repo . remotes [ [string] ] . fetch ( ) ) == [number] [EOL] assert len ( git . repo . refs ) == [number] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] git . push ( ) [EOL] [EOL] [comment] [EOL] git . create_tag ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] [EOL] [comment] [EOL] git_updater = get_fs_class ( ) ( config ) [EOL] git_updater . clone ( mock_initialized_remote [ [number] ] ) [EOL] git_updater . checkout ( [string] ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] [comment] [EOL] assert len ( git_updater . list_tags ( ) ) == [number] [EOL] assert git_updater . list_tags ( ) [ [number] ] [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] git . push ( tags = True ) [EOL] [EOL] [comment] [EOL] git_updater . fetch ( ) [EOL] assert len ( git_updater . list_tags ( ) ) == [number] [EOL] assert git_updater . list_tags ( ) [ [number] ] [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_merge ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] cloned_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] git = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] git . create_branch ( [string] ) [EOL] git . checkout ( [string] ) [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] [comment] [EOL] git . checkout ( [string] ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] [EOL] [comment] [EOL] git . merge ( [string] ) [EOL] [EOL] [comment] [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is False [EOL] assert os . path . isfile ( os . path . join ( cloned_working_dir , [string] ) ) is True [EOL] [EOL] def test_discard_changes ( self , mock_initialized ) : [EOL] [docstring] [EOL] git = mock_initialized [ [number] ] [EOL] working_directory = mock_initialized [ [number] ] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . discard_changes ( [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert status [ [string] ] [ [number] ] [ [number] ] == [string] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] write_file ( git , [string] , [string] , add = False ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] git . discard_changes ( ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] [EOL] def test_add_submodule ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] remote_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] git = get_fs_class ( ) ( config ) [EOL] git . initialize ( ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] assert len ( git . list_submodules ( ) ) == [number] [EOL] [EOL] [comment] [EOL] git . add_submodule ( [string] , [string] , remote_working_dir ) [EOL] [EOL] [comment] [EOL] assert len ( git . list_submodules ( ) ) == [number] [EOL] sm = git . list_submodules ( ) [ [number] ] [EOL] assert sm [ [string] ] == [string] [EOL] assert sm [ [string] ] == remote_working_dir [EOL] assert sm [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert os . path . isfile ( os . path . join ( scratch_working_dir , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL] [EOL] def test_remove_submodule ( self , mock_initialized_remote ) : [EOL] [docstring] [EOL] remote_working_dir = mock_initialized_remote [ [number] ] [EOL] [EOL] [comment] [EOL] scratch_working_dir = os . path . join ( tempfile . gettempdir ( ) , uuid . uuid4 ( ) . hex ) [EOL] os . makedirs ( scratch_working_dir ) [EOL] config = { [string] : get_backend ( ) , [string] : scratch_working_dir } [EOL] git = get_fs_class ( ) ( config ) [EOL] git . initialize ( ) [EOL] write_file ( git , [string] , [string] , commit_msg = [string] ) [EOL] [EOL] [comment] [EOL] assert len ( git . list_submodules ( ) ) == [number] [EOL] [EOL] [comment] [EOL] git . add_submodule ( [string] , [string] , remote_working_dir ) [EOL] [EOL] [comment] [EOL] assert len ( git . list_submodules ( ) ) == [number] [EOL] sm = git . list_submodules ( ) [ [number] ] [EOL] assert sm [ [string] ] == [string] [EOL] assert sm [ [string] ] == remote_working_dir [EOL] assert sm [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert os . path . isfile ( os . path . join ( scratch_working_dir , [string] , [string] ) ) is True [EOL] [EOL] [comment] [EOL] git . remove_submodules ( [string] ) [EOL] [EOL] [comment] [EOL] status = git . status ( ) [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert len ( status [ [string] ] ) == [number] [EOL] assert os . path . isfile ( os . path . join ( scratch_working_dir , [string] , [string] ) ) is False [EOL] [EOL] [comment] [EOL] shutil . rmtree ( scratch_working_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List , Union [EOL] import typing [EOL] import pytest [EOL] import responses [EOL] [EOL] from lmcommon . gitlib . gitlab import GitLabManager [EOL] [EOL] [EOL] @ pytest . fixture ( ) def gitlab_mngr_fixture ( ) : [EOL] [docstring] [EOL] yield GitLabManager ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def property_mocks_fixture ( ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , } ] , status = [number] ) [EOL] yield [EOL] [EOL] [EOL] class TestGitLabManager ( object ) : [EOL] @ responses . activate def test_user_token ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] [EOL] assert gitlab_mngr_fixture . _gitlab_token is None [EOL] [EOL] [comment] [EOL] token = gitlab_mngr_fixture . user_token [EOL] assert token == [string] [EOL] assert gitlab_mngr_fixture . _gitlab_token == [string] [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , status = [number] ) [EOL] assert token == gitlab_mngr_fixture . user_token [EOL] [EOL] @ responses . activate def test_user_token_error ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] _ = gitlab_mngr_fixture . user_token [EOL] [EOL] def test_repository_id ( self ) : [EOL] [docstring] [EOL] assert GitLabManager . get_repository_id ( [string] , [string] ) == [string] [EOL] [EOL] @ responses . activate def test_exists_true ( self , property_mocks_fixture , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] assert gitlab_mngr_fixture . labbook_exists ( [string] , [string] ) is True [EOL] [EOL] @ responses . activate def test_exists_false ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [string] } ] , status = [number] ) [EOL] [EOL] assert gitlab_mngr_fixture . labbook_exists ( [string] , [string] ) is False [EOL] [EOL] @ responses . activate def test_create ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] [comment] [EOL] responses . add ( responses . POST , [string] , json = { [string] : [number] , [string] : [string] , } , status = [number] ) [EOL] responses . add ( responses . POST , [string] , json = { [string] : True } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [string] } ] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , } ] , status = [number] ) [EOL] [EOL] gitlab_mngr_fixture . create_labbook ( [string] , [string] , visibility = [string] ) [EOL] [EOL] assert gitlab_mngr_fixture . labbook_exists ( [string] , [string] ) is True [EOL] [EOL] @ responses . activate def test_create_errors ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . create_labbook ( [string] , [string] , visibility = [string] ) [EOL] [EOL] [comment] [EOL] responses . add ( responses . POST , [string] , json = { [string] : [number] , [string] : [string] , } , status = [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . create_labbook ( [string] , [string] , visibility = [string] ) [EOL] [EOL] @ responses . activate def test_get_collaborators ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } ] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , status = [number] ) [EOL] [EOL] collaborators = gitlab_mngr_fixture . get_collaborators ( [string] , [string] ) [EOL] [EOL] assert len ( collaborators ) == [number] [EOL] assert collaborators [ [number] ] == ( [number] , [string] , True ) [EOL] assert collaborators [ [number] ] == ( [number] , [string] , False ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . get_collaborators ( [string] , [string] ) [EOL] [EOL] @ responses . activate def test_add_collaborator ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . POST , [string] , json = { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } ] , status = [number] ) [EOL] [EOL] collaborators = gitlab_mngr_fixture . add_collaborator ( [string] , [string] , [string] ) [EOL] [EOL] assert len ( collaborators ) == [number] [EOL] assert collaborators [ [number] ] == ( [number] , [string] , True ) [EOL] assert collaborators [ [number] ] == ( [number] , [string] , False ) [EOL] [EOL] @ responses . activate def test_add_collaborator_errors ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . POST , [string] , json = { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , status = [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] _ = gitlab_mngr_fixture . add_collaborator ( [string] , [string] , [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] _ = gitlab_mngr_fixture . add_collaborator ( [string] , [string] , [string] ) [EOL] [EOL] @ responses . activate def test_delete_collaborator ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . DELETE , [string] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } ] , status = [number] ) [EOL] [EOL] collaborators = gitlab_mngr_fixture . delete_collaborator ( [string] , [string] , [string] ) [EOL] [EOL] assert len ( collaborators ) == [number] [EOL] assert collaborators [ [number] ] == ( [number] , [string] , True ) [EOL] [EOL] @ responses . activate def test_delete_collaborator_error ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . DELETE , [string] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : None } ] , status = [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . delete_collaborator ( [string] , [string] , [string] ) [EOL] [EOL] @ responses . activate def test_error_on_missing_repo ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [string] } ] , status = [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . get_collaborators ( [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . add_collaborator ( [string] , [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . delete_collaborator ( [string] , [string] , [number] ) [EOL] [EOL] @ responses . activate def test_configure_git_credentials ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] host = [string] [EOL] username = [string] [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] [EOL] [comment] [EOL] token = gitlab_mngr_fixture . _check_if_git_credentials_configured ( host , username ) [EOL] assert token is None [EOL] [EOL] [comment] [EOL] gitlab_mngr_fixture . configure_git_credentials ( host , username ) [EOL] [EOL] [comment] [EOL] token = gitlab_mngr_fixture . _check_if_git_credentials_configured ( host , username ) [EOL] assert token == [string] [EOL] [EOL] [comment] [EOL] gitlab_mngr_fixture . clear_git_credentials ( host ) [EOL] [EOL] [comment] [EOL] token = gitlab_mngr_fixture . _check_if_git_credentials_configured ( host , username ) [EOL] assert token is None [EOL] [EOL] @ responses . activate def test_delete ( self , gitlab_mngr_fixture , property_mocks_fixture ) : [EOL] [docstring] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [number] , [string] : [string] , } ] , status = [number] ) [EOL] responses . add ( responses . DELETE , [string] , json = { [string] : [string] } , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [string] } ] , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = [ { [string] : [string] } ] , status = [number] ) [EOL] responses . add ( responses . DELETE , [string] , json = { } , status = [number] ) [EOL] [EOL] assert gitlab_mngr_fixture . labbook_exists ( [string] , [string] ) is True [EOL] [EOL] gitlab_mngr_fixture . remove_labbook ( [string] , [string] ) [EOL] [EOL] assert gitlab_mngr_fixture . labbook_exists ( [string] , [string] ) is False [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] gitlab_mngr_fixture . remove_labbook ( [string] , [string] ) [EOL] [EOL] @ responses . activate def test_list_labbooks_az ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] dummy_data = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [number] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : { [string] : { [string] : [number] , [string] : [number] } , } } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [number] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : { [string] : { [string] : [number] , [string] : [number] } , } } ] [EOL] [EOL] responses . add ( responses . GET , [string] , json = dummy_data , status = [number] ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = list ( reversed ( dummy_data ) ) , status = [number] ) [EOL] [EOL] labbooks = gitlab_mngr_fixture . list_labbooks ( ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] labbooks = gitlab_mngr_fixture . list_labbooks ( sort_str = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] @ responses . activate def test_list_labbooks_create_modify ( self , gitlab_mngr_fixture ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] dummy_data = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [number] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : { [string] : { [string] : [number] , [string] : [number] } , } } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [number] , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : { [string] : { [string] : [number] , [string] : [number] } , } } ] [EOL] [EOL] responses . add ( responses . GET , [string] , json = list ( reversed ( dummy_data ) ) , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = dummy_data , status = [number] ) [EOL] responses . add ( responses . GET , [string] , json = list ( reversed ( dummy_data ) ) , status = [number] ) [EOL] [EOL] labbooks = gitlab_mngr_fixture . list_labbooks ( order_by = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] labbooks = gitlab_mngr_fixture . list_labbooks ( order_by = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] [EOL] labbooks = gitlab_mngr_fixture . list_labbooks ( order_by = [string] , sort_str = [string] ) [EOL] [EOL] assert len ( labbooks ) == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [number] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL] assert labbooks [ [number] ] [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]],typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from . logger import LMLogger [EOL]	0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] from . logger import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def timefunc ( method ) : [EOL] [docstring] [EOL] def timed ( * args , ** kw ) : [EOL] ts = time . time ( ) [EOL] result = method ( * args , ** kw ) [EOL] te = time . time ( ) [EOL] logger . info ( [string] % ( method . __name__ , ( te - ts ) * [number] ) ) [EOL] return result [EOL] [EOL] return timed [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Tuple , Any [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from pkg_resources import resource_filename [EOL] import json [EOL] import logging [EOL] import logging . config [EOL] import os [EOL] import tempfile [EOL] [EOL] from typing import ( Any , Dict , Tuple ) [EOL] [EOL] [EOL] class LMLogger ( object ) : [EOL] [docstring] [EOL] CONFIG_INSTALLED_LOCATION = [string] [EOL] [EOL] def __init__ ( self , config_file = None ) : [EOL] is_default = False [EOL] if config_file : [EOL] self . config_file = config_file [EOL] else : [EOL] self . config_file , is_default = self . find_default_config ( ) [EOL] [EOL] with open ( self . config_file ) as cf : [EOL] data = json . load ( cf ) [EOL] [EOL] if is_default : [EOL] [comment] [EOL] with tempfile . NamedTemporaryFile ( mode = [string] , delete = False , suffix = [string] ) as temp_log_file : [EOL] data [ [string] ] [ [string] ] [ [string] ] = temp_log_file . name [EOL] [EOL] self . log_file = data [ [string] ] [ [string] ] [ [string] ] [EOL] self . _make_log_dir ( os . path . dirname ( self . log_file ) ) [EOL] [EOL] logging . config . dictConfig ( data ) [EOL] self . logger = logging . getLogger ( [string] ) [EOL] [EOL] @ classmethod def get_logger ( cls , config_file = None ) : [EOL] [comment] [EOL] [comment] [EOL] logger = cls ( config_file ) [EOL] return logger . logger [EOL] [EOL] @ staticmethod def _make_log_dir ( log_file_dir ) : [EOL] [docstring] [EOL] if not os . path . exists ( log_file_dir ) : [EOL] os . makedirs ( log_file_dir , exist_ok = True ) [EOL] return log_file_dir [EOL] [EOL] @ staticmethod def find_default_config ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if os . path . isfile ( LMLogger . CONFIG_INSTALLED_LOCATION ) : [EOL] return LMLogger . CONFIG_INSTALLED_LOCATION , False [EOL] else : [EOL] [comment] [EOL] return os . path . join ( resource_filename ( [string] , [string] ) , [string] ) , True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.logging.logger.LMLogger$ 0 0 0 0 0 0 0 $lmcommon.logging.logger.LMLogger$ 0 $lmcommon.logging.logger.LMLogger$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] from logging import Formatter [EOL] import json [EOL] import traceback [EOL] [EOL] [EOL] class JsonFormatter ( Formatter ) : [EOL] [EOL] def __init__ ( self ) : [EOL] super ( JsonFormatter , self ) . __init__ ( ) [EOL] [EOL] def format ( self , record ) : [EOL] exc_info = None [EOL] if record . exc_info : [EOL] exc_info = [string] . join ( traceback . format_exception ( record . exc_info [ [number] ] , record . exc_info [ [number] ] , record . exc_info [ [number] ] ) ) [EOL] d = { [string] : record . getMessage ( ) , [string] : record . levelname , [string] : record . filename , [string] : record . funcName , [string] : record . name , [string] : record . created , [string] : record . module , [string] : record . process , [string] : record . processName , [string] : record . pathname , [string] : repr ( record . exc_text ) , [string] : exc_info , [string] : repr ( record . stack_info ) , [string] : record . lineno } [EOL] return json . dumps ( d ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import shutil [EOL] import docker . errors [EOL] import pytest [EOL] import pprint [EOL] [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . container . container import ContainerOperations [EOL] from lmcommon . environment import ComponentManager [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . imagebuilder import ImageBuilder [EOL] from lmcommon . fixtures . fixtures import mock_config_with_repo , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV [EOL] [EOL] [comment] [EOL] REQUESTS_LATEST_VERSION = [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def build_lb_image_for_jupyterlab ( mock_config_with_repo ) : [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [comment] [EOL] cm . add_component ( [string] , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV ) [EOL] cm . add_packages ( [string] , [ { [string] : [string] , [string] : [string] , [string] : [string] } ] ) [EOL] [EOL] ib = ImageBuilder ( lb ) [EOL] docker_lines = ib . assemble_dockerfile ( write = True ) [EOL] pprint . pprint ( docker_lines ) [EOL] assert [string] in docker_lines [EOL] assert all ( [ [string] not in l for l in docker_lines . split ( ) ] ) [EOL] assert all ( [ [string] not in l for l in docker_lines . split ( ) ] ) [EOL] client = get_docker_client ( ) [EOL] client . containers . prune ( ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , [string] ) ) [EOL] [EOL] try : [EOL] lb , docker_image_id = ContainerOperations . build_image ( labbook = lb , username = [string] ) [EOL] lb , container_id = ContainerOperations . start_container ( lb , username = [string] ) [EOL] [EOL] assert isinstance ( container_id , str ) [EOL] yield lb , ib , client , docker_image_id , container_id , None , [string] [EOL] [EOL] try : [EOL] _ , s = ContainerOperations . stop_container ( labbook = lb , username = [string] ) [EOL] except docker . errors . APIError : [EOL] client . containers . get ( container_id = container_id ) . stop ( timeout = [number] ) [EOL] s = False [EOL] finally : [EOL] shutil . rmtree ( lb . root_dir ) [EOL] [comment] [EOL] try : [EOL] client . containers . get ( container_id = container_id ) . stop ( timeout = [number] ) [EOL] client . containers . get ( container_id = container_id ) . remove ( ) [EOL] except : [EOL] pass [EOL] [EOL] [comment] [EOL] try : [EOL] ContainerOperations . delete_image ( labbook = lb , username = [string] ) [EOL] client . images . remove ( docker_image_id , force = True , noprune = False ) [EOL] except : [EOL] pass [EOL] [EOL] try : [EOL] client . images . remove ( docker_image_id , force = True , noprune = False ) [EOL] except : [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def build_lb_image_for_env ( mock_config_with_repo ) : [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [comment] [EOL] cm . add_component ( [string] , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV ) [EOL] [EOL] ib = ImageBuilder ( lb ) [EOL] ib . assemble_dockerfile ( write = True ) [EOL] client = get_docker_client ( ) [EOL] client . containers . prune ( ) [EOL] [EOL] try : [EOL] lb , docker_image_id = ContainerOperations . build_image ( labbook = lb , username = [string] ) [EOL] [EOL] yield lb , [string] [EOL] [EOL] finally : [EOL] shutil . rmtree ( lb . root_dir ) [EOL] [EOL] [comment] [EOL] try : [EOL] client . images . remove ( docker_image_id , force = True , noprune = False ) [EOL] except : [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def build_lb_image_for_env_conda ( mock_config_with_repo ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] cm = ComponentManager ( lb ) [EOL] cm . add_component ( [string] , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV ) [EOL] cm . add_packages ( [string] , [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : REQUESTS_LATEST_VERSION } ] ) [EOL] [EOL] ib = ImageBuilder ( lb ) [EOL] ib . assemble_dockerfile ( write = True ) [EOL] client = get_docker_client ( ) [EOL] client . containers . prune ( ) [EOL] [EOL] try : [EOL] lb , docker_image_id = ContainerOperations . build_image ( labbook = lb , username = [string] ) [EOL] [EOL] yield lb , [string] [EOL] [EOL] finally : [EOL] shutil . rmtree ( lb . root_dir ) [EOL] try : [EOL] client . images . remove ( docker_image_id , force = True , noprune = False ) [EOL] except : [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Literal , Union , Optional [EOL] import typing_extensions [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] from lmcommon . configuration . utils import call_subprocess [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . workflows import core [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class GitWorkflow ( object ) : [EOL] [EOL] def __init__ ( self , labbook ) : [EOL] self . labbook = labbook [EOL] [EOL] def garbagecollect ( self ) : [EOL] [docstring] [EOL] with self . labbook . lock_labbook ( ) : [EOL] core . git_garbage_collect ( self . labbook ) [EOL] [EOL] def publish ( self , username , access_token = None , remote = [string] , public = False ) : [EOL] [docstring] [EOL] [EOL] logger . info ( f" [string] { str ( self . labbook ) } [string] { username } [string] { remote }" ) [EOL] if self . labbook . has_remote : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if self . labbook . active_branch != f' [string] { username }' : [EOL] raise ValueError ( f" [string] { username } [string] " ) [EOL] [EOL] with self . labbook . lock_labbook ( ) : [EOL] try : [EOL] self . labbook . sweep_uncommitted_changes ( ) [EOL] vis = [string] if public is True else [string] [EOL] core . create_remote_gitlab_repo ( labbook = self . labbook , username = username , access_token = access_token , visibility = vis ) [EOL] core . publish_to_remote ( labbook = self . labbook , username = username , remote = remote ) [EOL] except Exception as e : [EOL] [comment] [EOL] logger . error ( f" [string] { e } [string] { str ( self . labbook ) } [string] " ) [EOL] call_subprocess ( [ [string] , [string] , [string] ] , cwd = self . labbook . root_dir ) [EOL] self . labbook . checkout_branch ( f" [string] { username }" ) [EOL] raise e [EOL] [EOL] def sync ( self , username , remote = [string] , force = False ) : [EOL] [docstring] [EOL] return core . sync_with_remote ( labbook = self . labbook , username = username , remote = remote , force = force ) [EOL] [EOL] def _add_remote ( self , remote_name , url ) : [EOL] self . labbook . add_remote ( remote_name = remote_name , url = url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List , Optional [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import git [EOL] import subprocess [EOL] from typing import Optional , List [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . workflows . core import call_subprocess [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class BranchException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class BranchWorkflowViolation ( BranchException ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidBranchName ( BranchException ) : [EOL] pass [EOL] [EOL] [EOL] class BranchManager ( object ) : [EOL] def __init__ ( self , labbook , username ) : [EOL] self . labbook = labbook [EOL] self . username = username [EOL] [EOL] @ classmethod def is_branch_name_valid ( cls , new_branch_name ) : [EOL] if len ( new_branch_name ) > [number] : [EOL] return False [EOL] return all ( [ e . isalnum ( ) and e == e . lower ( ) for e in new_branch_name . split ( [string] ) ] ) [EOL] [EOL] @ property def active_branch ( self ) : [EOL] [docstring] [EOL] return self . labbook . active_branch [EOL] [EOL] @ property def workspace_branch ( self ) : [EOL] [docstring] [EOL] b = f' [string] { self . username }' [EOL] if b not in self . branches : [EOL] raise BranchException ( f' [string] { b }' ) [EOL] return b [EOL] [EOL] @ property def branches ( self ) : [EOL] [docstring] [EOL] return [ b for b in self . labbook . get_branches ( ) [ [string] ] if f' [string] { self . username }' in b ] [EOL] [EOL] @ property def mergeable_branches ( self ) : [EOL] if self . active_branch == self . workspace_branch : [EOL] [comment] [EOL] return [ b for b in self . branches if f'{ self . workspace_branch } [string] ' in b ] [EOL] else : [EOL] [comment] [EOL] return [ self . workspace_branch ] [EOL] [EOL] def create_branch ( self , title , description = None , revision = None ) : [EOL] [docstring] [EOL] if not self . is_branch_name_valid ( title ) : [EOL] raise InvalidBranchName ( [string] ) [EOL] [EOL] if self . active_branch != f' [string] { self . username }' : [EOL] raise BranchWorkflowViolation ( [string] ) [EOL] [EOL] full_branch_name = f' [string] { self . username } [string] { title }' [EOL] if full_branch_name in self . branches : [EOL] raise InvalidBranchName ( [string] ) [EOL] [EOL] with self . labbook . lock_labbook ( ) : [EOL] self . labbook . sweep_uncommitted_changes ( ) [EOL] if revision : [EOL] [comment] [EOL] result = subprocess . check_output ( f' [string] { revision } [string] ' , cwd = self . labbook . root_dir , shell = True ) [EOL] if result . decode ( ) . strip ( ) != [string] : [EOL] logger . error ( result . decode ( ) . strip ( ) ) [EOL] raise InvalidBranchName ( f' [string] { revision } [string] { str ( self . labbook ) } [string] ' f' [string] { title }' ) [EOL] [comment] [EOL] logger . info ( f" [string] { revision } [string] { str ( self . labbook ) }" ) [EOL] r = subprocess . check_output ( f' [string] { revision }' , cwd = self . labbook . root_dir , shell = True ) [EOL] logger . info ( r ) [EOL] self . labbook . checkout_branch ( branch_name = full_branch_name , new = True ) [EOL] logger . info ( f' [string] { self . active_branch } [string] { str ( self . labbook ) }' ) [EOL] [EOL] return full_branch_name [EOL] [EOL] def remove_branch ( self , target_branch ) : [EOL] [docstring] [EOL] if target_branch not in self . branches : [EOL] raise InvalidBranchName ( f' [string] { target_branch } [string] ' ) [EOL] [EOL] if target_branch == self . workspace_branch : [EOL] raise BranchWorkflowViolation ( f' [string] { target_branch } [string] { str ( self . labbook ) }' ) [EOL] [EOL] if target_branch == self . active_branch : [EOL] raise BranchWorkflowViolation ( f' [string] { target_branch } [string] ' ) [EOL] [EOL] with self . labbook . lock_labbook ( ) : [EOL] logger . info ( f' [string] { str ( self . labbook ) } [string] { target_branch } [string] ' ) [EOL] [comment] [EOL] self . labbook . git . delete_branch ( target_branch , force = True ) [EOL] [EOL] if target_branch in self . branches : [EOL] raise BranchWorkflowViolation ( f' [string] { target_branch } [string] { str ( self . labbook ) } [string] ' ) [EOL] [EOL] def workon_branch ( self , branch_name ) : [EOL] [docstring] [EOL] [EOL] if branch_name not in self . branches : [EOL] raise InvalidBranchName ( f' [string] { branch_name } [string] ' ) [EOL] [EOL] with self . labbook . lock_labbook ( ) : [EOL] self . labbook . sweep_uncommitted_changes ( ) [EOL] self . labbook . checkout_branch ( branch_name = branch_name ) [EOL] logger . info ( f' [string] { self . active_branch } [string] { str ( self . labbook ) }' ) [EOL] [EOL] def merge_from ( self , other_branch , force = False ) : [EOL] [docstring] [EOL] [EOL] if other_branch not in self . branches : [EOL] raise InvalidBranchName ( f' [string] { other_branch } [string] ' ) [EOL] [EOL] if other_branch not in self . mergeable_branches : [EOL] raise InvalidBranchName ( f' [string] { other_branch } [string] { self . active_branch }' ) [EOL] [EOL] logger . info ( f" [string] { str ( self . labbook ) } [string] { other_branch } [string] { self . active_branch } [string] " ) [EOL] with self . labbook . lock_labbook ( ) : [EOL] try : [EOL] self . labbook . sweep_uncommitted_changes ( ) [EOL] if force : [EOL] logger . warning ( [string] ) [EOL] call_subprocess ( [ [string] , [string] , [string] , [string] , [string] , [string] , other_branch ] , cwd = self . labbook . root_dir ) [EOL] else : [EOL] try : [EOL] call_subprocess ( [ [string] , [string] , other_branch ] , cwd = self . labbook . root_dir ) [EOL] except ( git . exc . GitCommandError , subprocess . CalledProcessError ) as merge_error : [EOL] logger . error ( f" [string] { str ( self . labbook ) } [string] " ) [EOL] [comment] [EOL] raise BranchException ( f" [string] { merge_error }" ) [EOL] self . labbook . git . commit ( f' [string] { other_branch } [string] ' ) [EOL] logger . info ( f"{ str ( self . labbook ) } [string] " ) [EOL] except Exception as e : [EOL] call_subprocess ( [ [string] , [string] , [string] ] , cwd = self . labbook . root_dir ) [EOL] raise e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from lmcommon . workflows . workflows import GitWorkflow [EOL] from lmcommon . workflows . core import WorkflowsException , sync_locally , MergeError , GitLabRemoteError [EOL] from lmcommon . workflows . branching import BranchManager , BranchException , BranchWorkflowViolation , InvalidBranchName [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] [EOL] import mock [EOL] import os [EOL] [EOL] [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . workflows import ( GitWorkflow , MergeError , BranchManager , InvalidBranchName , BranchWorkflowViolation , BranchException ) [EOL] from lmcommon . files import FileOperations [EOL] from lmcommon . fixtures import ( mock_config_file , mock_labbook , mock_labbook_lfs_disabled , mock_duplicate_labbook , remote_bare_repo , sample_src_file , _MOCK_create_remote_repo2 as _MOCK_create_remote_repo ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def pause_wait_for_redis ( ) : [EOL] import time [EOL] time . sleep ( [number] ) [EOL] [EOL] TEST_USER = [string] [EOL] [EOL] class TestBranching ( object ) : [EOL] [EOL] def test_init_and_active_branch ( self , mock_labbook_lfs_disabled ) : [EOL] bm = BranchManager ( mock_labbook_lfs_disabled [ [number] ] , username = TEST_USER ) [EOL] assert bm . active_branch == f' [string] { TEST_USER }' [EOL] assert bm . workspace_branch == f' [string] { TEST_USER }' [EOL] assert len ( bm . branches ) == [number] and bm . branches [ [number] ] == f' [string] { TEST_USER }' [EOL] [EOL] def test_is_branch_name_valid ( self ) : [EOL] bad_strings = [ [string] , [string] , [string] , [string] , [string] * [number] , [string] * [number] , [string] , [string] , [string] * [number] + [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] for b in bad_strings : [EOL] assert not BranchManager . is_branch_name_valid ( b ) [EOL] good_strings = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] for g in good_strings : [EOL] assert BranchManager . is_branch_name_valid ( g ) [EOL] [EOL] def test_create_branch ( self , mock_labbook_lfs_disabled ) : [EOL] t = [string] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] bm = BranchManager ( lb , username = TEST_USER ) [EOL] assert bm . active_branch == f' [string] { TEST_USER }' [EOL] bm . create_branch ( title = t ) [EOL] assert bm . active_branch == f' [string] { TEST_USER } [string] { t }' [EOL] assert len ( bm . branches ) == [number] [EOL] [EOL] [comment] [EOL] with pytest . raises ( BranchWorkflowViolation ) : [EOL] bm . create_branch ( [string] ) [EOL] [EOL] with pytest . raises ( BranchWorkflowViolation ) : [EOL] bm . create_branch ( t ) [EOL] [EOL] [comment] [EOL] assert bm . active_branch == f' [string] { TEST_USER } [string] { t }' [EOL] assert len ( bm . branches ) == [number] [EOL] assert lb . is_repo_clean is True [EOL] [EOL] def test_create_branch_fails_bad_name ( self , mock_labbook_lfs_disabled ) : [EOL] bm = BranchManager ( mock_labbook_lfs_disabled [ [number] ] , username = TEST_USER ) [EOL] with pytest . raises ( InvalidBranchName ) : [EOL] bm . create_branch ( [string] ) [EOL] [EOL] def test_workon_branch_without_any_changes ( self , mock_labbook_lfs_disabled ) : [EOL] t = [string] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] bm = BranchManager ( lb , username = TEST_USER ) [EOL] assert bm . active_branch == f' [string] { TEST_USER }' [EOL] full_branch = bm . create_branch ( title = t ) [EOL] assert lb . is_repo_clean [EOL] [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] assert bm . active_branch == f' [string] { TEST_USER }' [EOL] assert lb . active_branch == f' [string] { TEST_USER }' [EOL] assert lb . is_repo_clean [EOL] [EOL] bm . workon_branch ( full_branch ) [EOL] assert bm . active_branch == full_branch [EOL] assert lb . active_branch == full_branch [EOL] assert lb . is_repo_clean [EOL] [EOL] with pytest . raises ( InvalidBranchName ) : [EOL] bm . workon_branch ( [string] ) [EOL] [EOL] def test_workon_branch_with_changes ( self , mock_labbook_lfs_disabled ) : [EOL] t = [string] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] bm = BranchManager ( lb , username = TEST_USER ) [EOL] assert bm . active_branch == f' [string] { TEST_USER }' [EOL] full_branch = bm . create_branch ( title = t ) [EOL] assert lb . is_repo_clean [EOL] [EOL] [comment] [EOL] bm = BranchManager ( lb , username = TEST_USER ) [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] FileOperations . makedir ( lb , [string] , create_activity_record = True ) [EOL] assert lb . is_repo_clean [EOL] FileOperations . makedir ( lb , [string] , create_activity_record = True ) [EOL] assert lb . is_repo_clean [EOL] [EOL] bm . workon_branch ( full_branch ) [EOL] FileOperations . makedir ( lb , [string] , create_activity_record = True ) [EOL] assert lb . is_repo_clean [EOL] bm . merge_from ( bm . workspace_branch ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , [string] ) ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , [string] ) ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , [string] ) ) [EOL] assert lb . is_repo_clean [EOL] [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] assert lb . is_repo_clean [EOL] bm . remove_branch ( full_branch ) [EOL] assert not full_branch in bm . branches [EOL] assert lb . is_repo_clean [EOL] [EOL] def test_merge_conflics_1 ( self , mock_labbook_lfs_disabled ) : [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as s1 : [EOL] s1 . write ( [string] ) [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . insert_file ( test_user_lb , section = [string] , src_file = s1 . name ) [EOL] [EOL] [comment] [EOL] bm = BranchManager ( test_user_lb , username = TEST_USER ) [EOL] new_b = bm . create_branch ( [string] ) [EOL] with open ( [string] , [string] ) as s1 : [EOL] s1 . write ( [string] ) [EOL] FileOperations . insert_file ( test_user_lb , section = [string] , src_file = s1 . name ) [EOL] with open ( os . path . join ( test_user_lb . root_dir , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] assert not test_user_lb . is_repo_clean [EOL] [EOL] [comment] [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] assert test_user_lb . is_repo_clean [EOL] assert not os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] with open ( [string] , [string] ) as s1 : [EOL] s1 . write ( [string] ) [EOL] FileOperations . insert_file ( test_user_lb , section = [string] , src_file = s1 . name , dst_path = [string] ) [EOL] [EOL] [comment] [EOL] bm . workon_branch ( new_b ) [EOL] assert test_user_lb . is_repo_clean [EOL] with pytest . raises ( BranchException ) : [EOL] bm . merge_from ( bm . workspace_branch ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] bm . merge_from ( bm . workspace_branch , force = True ) [EOL] assert open ( os . path . join ( test_user_lb . root_dir , [string] , [string] ) ) . read ( [number] ) == [string] [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] [comment] [EOL] with pytest . raises ( BranchWorkflowViolation ) : [EOL] bm . remove_branch ( bm . workspace_branch ) [EOL] [EOL] with pytest . raises ( BranchWorkflowViolation ) : [EOL] bm . remove_branch ( new_b ) [EOL] [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] assert test_user_lb . is_repo_clean [EOL] bm . remove_branch ( new_b ) [EOL] assert not new_b in bm . branches [EOL] [EOL] def test_create_a_rollback_branch ( self , mock_labbook_lfs_disabled ) : [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] commit = test_user_lb . git . commit_hash [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] [EOL] bm = BranchManager ( test_user_lb , username = TEST_USER ) [EOL] new_b = bm . create_branch ( [string] , revision = commit ) [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] [EOL] assert new_b == bm . active_branch [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] [comment] [EOL] bm . merge_from ( bm . workspace_branch ) [EOL] assert test_user_lb . is_repo_clean [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] bm . workon_branch ( bm . workspace_branch ) [EOL] assert test_user_lb . is_repo_clean [EOL] bm . merge_from ( new_b ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] def test_create_rollback_to_invalid_revision ( self , mock_labbook_lfs_disabled ) : [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] commit = test_user_lb . git . commit_hash [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] [EOL] bm = BranchManager ( test_user_lb , username = TEST_USER ) [EOL] with pytest . raises ( InvalidBranchName ) : [EOL] bm . create_branch ( [string] , revision = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.branching.BranchManager$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] [EOL] import mock [EOL] import os [EOL] [EOL] [EOL] from lmcommon . labbook import LabBook , loaders [EOL] from lmcommon . workflows import GitWorkflow , MergeError [EOL] from lmcommon . files import FileOperations [EOL] from lmcommon . fixtures import ( mock_config_file , mock_labbook_lfs_disabled , mock_duplicate_labbook , remote_bare_repo , sample_src_file , _MOCK_create_remote_repo2 as _MOCK_create_remote_repo , mock_config_lfs_disabled ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def pause_wait_for_redis ( ) : [EOL] import time [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] class TestLabbookShareProtocol ( object ) : [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_simple_publish_new_one_user ( self , pause_wait_for_redis , remote_bare_repo , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] [EOL] assert lb . active_branch == [string] [EOL] FileOperations . makedir ( lb , relative_path = [string] , create_activity_record = True ) [EOL] [EOL] wf = GitWorkflow ( lb ) [EOL] [comment] [EOL] wf . publish ( username = [string] ) [EOL] [EOL] assert lb . active_branch == [string] [EOL] b = lb . get_branches ( ) [EOL] assert len ( b [ [string] ] ) == [number] [EOL] [comment] [EOL] [EOL] assert any ( [ [string] in str ( x ) for x in b [ [string] ] ] ) [EOL] [EOL] [comment] [EOL] assert not any ( [ [string] in str ( x ) for x in b [ [string] ] ] ) [EOL] [EOL] [comment] [EOL] FileOperations . delete_file ( lb , section = [string] , relative_path = [string] ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] FileOperations . makedir ( lb , relative_path = [string] , create_activity_record = True ) [EOL] assert lb . active_branch == [string] [EOL] wf . sync ( [string] ) [EOL] assert lb . active_branch == [string] [EOL] [EOL] lb . checkout_branch ( [string] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_simple_single_user_two_instances ( self , pause_wait_for_redis , remote_bare_repo , mock_labbook_lfs_disabled , mock_config_file , mock_config_lfs_disabled ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] workplace_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . makedir ( workplace_lb , relative_path = [string] , create_activity_record = True ) [EOL] wf = GitWorkflow ( workplace_lb ) [EOL] wf . publish ( [string] ) [EOL] [EOL] FileOperations . makedir ( workplace_lb , relative_path = [string] , create_activity_record = True ) [EOL] wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( workplace_lb . root_dir , [string] , [string] ) ) [EOL] [EOL] repo_location = workplace_lb . remote [EOL] [EOL] [comment] [EOL] home_lb = LabBook ( mock_config_lfs_disabled [ [number] ] ) [EOL] loaders . from_remote ( repo_location , username = [string] , owner = [string] , labbook_name = [string] , labbook = home_lb ) [EOL] assert home_lb . active_branch == [string] [EOL] assert os . path . exists ( os . path . join ( home_lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( home_lb . root_dir , [string] , [string] ) ) [EOL] [EOL] FileOperations . makedir ( home_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( home_lb , relative_path = [string] , create_activity_record = True ) [EOL] home_wf = GitWorkflow ( home_lb ) [EOL] home_wf . sync ( [string] ) [EOL] [EOL] wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( workplace_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( workplace_lb . root_dir , [string] ) ) [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_two_users_alternate_changes ( self , pause_wait_for_redis , remote_bare_repo , mock_labbook_lfs_disabled , mock_config_file , mock_config_lfs_disabled ) : [EOL] [comment] [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] test_wf = GitWorkflow ( test_user_lb ) [EOL] test_wf . publish ( [string] ) [EOL] [EOL] remote_repo = test_user_lb . remote [EOL] assert remote_repo is not None [EOL] [EOL] bob_user_lb = LabBook ( mock_config_lfs_disabled [ [number] ] ) [EOL] loaders . from_remote ( remote_repo , username = [string] , owner = [string] , labbook_name = [string] , labbook = bob_user_lb ) [EOL] bob_wf = GitWorkflow ( bob_user_lb ) [EOL] assert bob_user_lb . active_branch == [string] [EOL] FileOperations . makedir ( bob_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( bob_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] bob_wf . sync ( [string] ) [EOL] [EOL] test_wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert test_user_lb . active_branch == [string] [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_two_users_attempt_conflict ( self , pause_wait_for_redis , mock_labbook_lfs_disabled , mock_config_file , sample_src_file , mock_config_lfs_disabled ) : [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] test_wf = GitWorkflow ( test_user_lb ) [EOL] test_wf . publish ( [string] ) [EOL] [EOL] remote_repo = test_user_lb . remote [EOL] [EOL] bob_user_lb = LabBook ( mock_config_lfs_disabled [ [number] ] ) [EOL] bob_wf = GitWorkflow ( bob_user_lb ) [EOL] loaders . from_remote ( remote_repo , username = [string] , owner = [string] , labbook_name = [string] , labbook = bob_user_lb ) [EOL] assert bob_user_lb . active_branch == [string] [EOL] FileOperations . makedir ( bob_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . makedir ( bob_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] FileOperations . delete_file ( bob_user_lb , section = [string] , relative_path = [string] ) [EOL] assert not os . path . exists ( os . path . join ( bob_user_lb . root_dir , [string] , [string] ) ) [EOL] bob_wf . sync ( [string] ) [EOL] [EOL] FileOperations . insert_file ( test_user_lb , [string] , sample_src_file , [string] ) [EOL] test_wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] , [string] ) ) [EOL] [EOL] bob_wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( bob_user_lb . root_dir , [string] , [string] ) ) [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_attempt_another_conflict ( self , pause_wait_for_redis , mock_labbook_lfs_disabled , mock_config_file , sample_src_file , mock_config_lfs_disabled ) : [EOL] with open ( [string] , [string] ) as s1 : [EOL] s1 . write ( [string] ) [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . insert_file ( test_user_lb , section = [string] , src_file = s1 . name ) [EOL] wf_test_user = GitWorkflow ( test_user_lb ) [EOL] wf_test_user . publish ( [string] ) [EOL] [EOL] remote_repo = test_user_lb . remote [EOL] [EOL] bob_user_lb = LabBook ( mock_config_lfs_disabled [ [number] ] ) [EOL] loaders . from_remote ( remote_repo , username = [string] , owner = [string] , labbook_name = [string] , labbook = bob_user_lb ) [EOL] wf_bob_user = GitWorkflow ( bob_user_lb ) [EOL] assert bob_user_lb . active_branch == [string] [EOL] with open ( os . path . join ( bob_user_lb . root_dir , [string] , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] wf_bob_user . sync ( [string] ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( test_user_lb . root_dir , [string] , [string] ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] with pytest . raises ( MergeError ) : [EOL] [comment] [EOL] wf_test_user . sync ( username = [string] ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] [comment] [EOL] wf_test_user . sync ( username = [string] , force = True ) [EOL] assert test_user_lb . is_repo_clean [EOL] [EOL] [comment] [EOL] status = test_user_lb . git . status ( ) [EOL] for k in status : [EOL] assert not status [ k ] [EOL] assert test_user_lb . is_repo_clean [EOL] lines = [string] . join ( open ( os . path . join ( test_user_lb . root_dir , [string] , [string] ) ) . readlines ( ) ) [EOL] [EOL] wf_test_user . sync ( username = [string] ) [EOL] [EOL] [comment] [EOL] assert [string] in lines [EOL] [EOL] @ mock . patch ( [string] , new = _MOCK_create_remote_repo ) def test_two_users_have_one_remove_a_file ( self , pause_wait_for_redis , remote_bare_repo , mock_labbook_lfs_disabled , mock_config_file , mock_config_lfs_disabled ) : [EOL] [comment] [EOL] test_user_lb = mock_labbook_lfs_disabled [ [number] ] [EOL] FileOperations . makedir ( test_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] test_wf = GitWorkflow ( test_user_lb ) [EOL] test_wf . publish ( [string] ) [EOL] [EOL] remote_repo = test_user_lb . remote [EOL] [EOL] bob_user_lb = LabBook ( mock_config_lfs_disabled [ [number] ] ) [EOL] loaders . from_remote ( remote_repo , username = [string] , owner = [string] , labbook_name = [string] , labbook = bob_user_lb ) [EOL] bob_wf = GitWorkflow ( bob_user_lb ) [EOL] assert bob_user_lb . active_branch == [string] [EOL] FileOperations . delete_file ( bob_user_lb , section = [string] , relative_path = [string] ) [EOL] assert not os . path . exists ( os . path . join ( bob_user_lb . root_dir , [string] , [string] ) ) [EOL] FileOperations . makedir ( bob_user_lb , relative_path = [string] , create_activity_record = True ) [EOL] bob_wf . sync ( [string] ) [EOL] [EOL] test_wf . sync ( [string] ) [EOL] assert os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( test_user_lb . root_dir , [string] , [string] ) ) [EOL] assert test_user_lb . active_branch == [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import pprint [EOL] [EOL] from lmcommon . workflows import GitWorkflow , MergeError , core , WorkflowsException [EOL] from lmcommon . fixtures import ( mock_config_file , mock_labbook_lfs_disabled , mock_duplicate_labbook , remote_bare_repo , sample_src_file , remote_labbook_repo , _MOCK_create_remote_repo2 ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def pause_wait_for_redis ( ) : [EOL] import time [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] [EOL] class TestWorkflowsSharing ( object ) : [EOL] [EOL] def test_push_to_remote_repo_with_new_branch ( self , remote_labbook_repo , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] wf = GitWorkflow ( lb ) [EOL] lb . checkout_branch ( [string] , new = True ) [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] core . push ( lb , [string] ) [EOL] lb . remove_remote ( [string] ) [EOL] assert not lb . has_remote [EOL] assert all ( [ [string] not in l for l in open ( os . path . join ( lb . root_dir , [string] ) ) . readlines ( ) ] ) [EOL] [EOL] def test_push_to_remote_repo_with_same_branch_should_be_error ( self , remote_labbook_repo , mock_config_file , mock_labbook_lfs_disabled ) : [EOL] [comment] [EOL] lb = mock_labbook_lfs_disabled [ [number] ] [EOL] wf = GitWorkflow ( lb ) [EOL] lb . add_remote ( [string] , remote_labbook_repo ) [EOL] with pytest . raises ( WorkflowsException ) : [EOL] [comment] [EOL] core . push ( lb , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.workflows.workflows.GitWorkflow$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import builtins [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] def in_untracked ( labbook_root , section ) : [EOL] [docstring] [EOL] gitignore_path = os . path . join ( labbook_root , [string] ) [EOL] if not os . path . exists ( gitignore_path ) : [EOL] return False [EOL] gitignore_lines = [ l . strip ( ) for l in open ( gitignore_path ) . readlines ( ) ] [EOL] target_lines = [ f'{ section } [string] ' , f' [string] { section } [string] ' ] [EOL] if all ( [ a in gitignore_lines for a in target_lines ] ) : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from lmcommon . files . files import FileOperationsException , FileOperations [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any , List [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import tempfile [EOL] import os [EOL] import pprint [EOL] [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . files import FileOperations as FO [EOL] from lmcommon . fixtures import mock_config_file , mock_labbook , remote_labbook_repo , sample_src_file [EOL] [EOL] [EOL] class TestLabbookFileOperations ( object ) : [EOL] def test_insert_file_success_1 ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file ) [EOL] base_name = os . path . basename ( sample_src_file ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] assert new_file_data [ [string] ] == f'{ base_name }' [EOL] assert new_file_data [ [string] ] is False [EOL] assert new_file_data [ [string] ] is False [EOL] [EOL] def test_insert_file_upload_id ( self , mock_config_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] test_file = os . path . join ( tempfile . gettempdir ( ) , [string] ) [EOL] with open ( test_file , [string] ) as sample_f : [EOL] [comment] [EOL] sample_f . write ( [string] * [number] ) [EOL] [EOL] [comment] [EOL] new_file_data = FO . insert_file ( lb , [string] , test_file , [string] ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert new_file_data [ [string] ] == [string] [EOL] assert new_file_data [ [string] ] is False [EOL] [EOL] def test_insert_file_success_2 ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] FO . makedir ( lb , [string] ) [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file , [string] ) [EOL] base_name = os . path . basename ( new_file_data [ [string] ] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] assert new_file_data [ [string] ] == f' [string] { base_name }' [EOL] assert new_file_data [ [string] ] is False [EOL] [EOL] def test_insert_and_make_intermediary_directories ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] FO . insert_file ( lb , [string] , sample_src_file , [string] ) [EOL] p = os . path . join ( lb . root_dir , [string] , [string] ) [EOL] print ( p ) [EOL] assert os . path . isfile ( p ) [EOL] [EOL] def test_insert_file_fail_due_to_gitignore ( self , mock_config_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] git_hash_1 = lb . git . commit_hash [EOL] lines = [ l . strip ( ) for l in open ( os . path . join ( lb . root_dir , [string] ) ) . readlines ( ) ] [EOL] pprint . pprint ( lines ) [EOL] assert any ( [ [string] in l for l in lines ] ) [EOL] [EOL] [comment] [EOL] test_file = os . path . join ( tempfile . gettempdir ( ) , [string] ) [EOL] with open ( test_file , [string] ) as sample_f : [EOL] [comment] [EOL] sample_f . write ( [string] * [number] ) [EOL] [EOL] git_hash_2 = lb . git . commit_hash [EOL] with pytest . raises ( Exception ) : [EOL] r = lb . insert_file ( [string] , src_file = sample_f . name , dst_dir = [string] ) [EOL] [EOL] [comment] [EOL] assert git_hash_1 == git_hash_2 [EOL] [comment] [EOL] assert [string] not in os . listdir ( os . path . join ( lb . root_dir , [string] ) ) [EOL] [EOL] def test_remove_file_success ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file ) [EOL] base_name = os . path . basename ( new_file_data [ [string] ] ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] FO . delete_file ( lb , [string] , base_name ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] [EOL] def test_remove_file_fail ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] FO . insert_file ( lb , [string] , sample_src_file ) [EOL] new_file_path = os . path . join ( [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] FO . delete_file ( lb , [string] , new_file_path ) [EOL] [EOL] def test_remove_dir ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] FO . makedir ( lb , [string] ) [EOL] new_file_path = FO . insert_file ( lb , [string] , sample_src_file , [string] ) [EOL] base_name = os . path . basename ( new_file_path [ [string] ] ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] [comment] [EOL] [comment] [EOL] FO . delete_file ( lb , [string] , [string] ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] def test_move_file_as_rename_in_same_dir ( self , mock_config_file , sample_src_file ) : [EOL] [comment] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] [comment] [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file , [string] ) [EOL] base_name = os . path . basename ( new_file_data [ [string] ] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] assert new_file_data [ [string] ] == base_name [EOL] [EOL] [comment] [EOL] moved_rel_path = os . path . join ( f'{ base_name } [string] ' ) [EOL] FO . move_file ( lb , [string] , new_file_data [ [string] ] , moved_rel_path ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , f'{ base_name } [string] ' ) ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , f'{ base_name } [string] ' ) ) [EOL] [EOL] def test_move_file_subdirectory ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file ) [EOL] base_name = os . path . basename ( new_file_data [ [string] ] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] [EOL] [comment] [EOL] os . makedirs ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] moved_abs_data = FO . move_file ( lb , [string] , base_name , os . path . join ( [string] , base_name ) ) [EOL] [EOL] assert moved_abs_data [ [string] ] == os . path . join ( [string] , base_name ) [EOL] assert moved_abs_data [ [string] ] is False [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] [EOL] def test_move_loaded_directory ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] new_file_data = FO . insert_file ( lb , [string] , sample_src_file ) [EOL] base_name = os . path . basename ( new_file_data [ [string] ] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , base_name ) ) [EOL] [EOL] [comment] [EOL] os . makedirs ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] FO . move_file ( lb , [string] , base_name , os . path . join ( [string] , base_name ) ) [EOL] [EOL] [comment] [EOL] FO . move_file ( lb , [string] , [string] , [string] ) [EOL] [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , [string] , base_name ) ) [EOL] [EOL] def test_makedir_simple ( self , mock_config_file ) : [EOL] [comment] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] long_dir = [string] [EOL] dirs = [ [string] , [string] , [string] , [string] , long_dir ] [EOL] for d in dirs : [EOL] FO . makedir ( lb , d ) [EOL] assert os . path . isdir ( os . path . join ( lb . root_dir , d ) ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , d , [string] ) ) [EOL] score = [number] [EOL] for root , dirs , files in os . walk ( os . path . join ( lb . root_dir , [string] , [string] ) ) : [EOL] for f in files : [EOL] if f == [string] : [EOL] score += [number] [EOL] [comment] [EOL] assert score == len ( LabBook . make_path_relative ( long_dir ) . split ( os . sep ) ) - [number] [EOL] [EOL] def test_makedir_record ( self , mock_config_file ) : [EOL] [comment] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) is False [EOL] [EOL] FO . makedir ( lb , [string] , create_activity_record = True ) [EOL] [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) is True [EOL] assert lb . is_repo_clean is True [EOL] [EOL] FO . makedir ( lb , [string] , create_activity_record = False ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) is True [EOL] assert lb . is_repo_clean is False [EOL] [EOL] def test_walkdir ( self , mock_config_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] dirs = [ [string] , [string] , [string] , [string] , [string] ] [EOL] for d in dirs : [EOL] FO . makedir ( lb , d ) [EOL] [EOL] for d in [ [string] , [string] , [string] , [string] ] : [EOL] open ( [string] , [string] ) . write ( [string] ) [EOL] FO . insert_file ( lb , [string] , [string] , d ) [EOL] [EOL] dir_walks_hidden = FO . walkdir ( lb , [string] , show_hidden = True ) [EOL] assert any ( [ os . path . basename ( [string] ) in d [ [string] ] for d in dir_walks_hidden ] ) [EOL] assert not any ( [ [string] in d [ [string] ] . split ( os . path . sep ) for d in dir_walks_hidden ] ) [EOL] assert not any ( [ [string] in d [ [string] ] for d in dir_walks_hidden ] ) [EOL] assert all ( [ d [ [string] ] [ [number] ] != [string] for d in dir_walks_hidden ] ) [EOL] [EOL] [comment] [EOL] assert len ( dir_walks_hidden ) == [number] [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] is True [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] is True [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] is False [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks_hidden [ [number] ] [ [string] ] is False [EOL] [EOL] [comment] [EOL] dir_walks = FO . walkdir ( lb , [string] ) [EOL] [comment] [EOL] assert len ( dir_walks ) == [number] [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] [EOL] def test_listdir ( self , mock_config_file , sample_src_file ) : [EOL] def write_test_file ( base , name ) : [EOL] with open ( os . path . join ( base , name ) , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] dirs = [ [string] , [string] ] [EOL] for d in dirs : [EOL] FO . makedir ( lb , d ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] write_test_file ( lb . root_dir , [string] ) [EOL] [EOL] [comment] [EOL] data = FO . listdir ( lb , [string] , base_path = [string] ) [EOL] assert len ( data ) == [number] [EOL] assert data [ [number] ] [ [string] ] == [string] [EOL] assert data [ [number] ] [ [string] ] == [string] [EOL] assert data [ [number] ] [ [string] ] == [string] [EOL] [EOL] data = FO . listdir ( lb , [string] , base_path = [string] ) [EOL] assert len ( data ) == [number] [EOL] [EOL] [comment] [EOL] data = FO . listdir ( lb , [string] , base_path = [string] ) [EOL] assert len ( data ) == [number] [EOL] assert data [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_listdir_expect_error ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] FO . listdir ( lb , [string] , base_path = [string] ) [EOL] [EOL] def test_walkdir_with_favorites ( self , mock_config_file , sample_src_file ) : [EOL] lb = LabBook ( mock_config_file [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] dirs = [ [string] , [string] ] [EOL] for d in dirs : [EOL] FO . makedir ( lb , d ) [EOL] [EOL] sfile = [string] [EOL] for d in [ [string] , [string] , [string] ] : [EOL] open ( sfile , [string] ) . write ( [string] ) [EOL] FO . insert_file ( lb , [string] , sfile , d ) [EOL] [EOL] sample_filename = os . path . basename ( sfile ) [EOL] [EOL] [comment] [EOL] dir_walks = FO . walkdir ( lb , [string] ) [EOL] [comment] [EOL] assert len ( dir_walks ) == [number] [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] [EOL] lb . create_favorite ( [string] , sample_filename , description = [string] ) [EOL] lb . create_favorite ( [string] , f" [string] { sample_filename }" , description = [string] ) [EOL] lb . create_favorite ( [string] , f" [string] " , description = [string] , is_dir = True ) [EOL] [EOL] dir_walks = FO . walkdir ( lb , [string] ) [EOL] [comment] [EOL] assert len ( dir_walks ) == [number] [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] == [string] [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL] assert dir_walks [ [number] ] [ [string] ] is True [EOL] assert dir_walks [ [number] ] [ [string] ] is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import pprint [EOL] import pytest [EOL] import os [EOL] [EOL] from lmcommon . fixtures import mock_labbook [EOL] from lmcommon . files import FileOperations , FileOperationsException [EOL] [EOL] [EOL] class TestFileOps ( object ) : [EOL] def test_labbook_content_size_simply ( self , mock_labbook ) : [EOL] x , y , lb = mock_labbook [EOL] [EOL] lb_size = FileOperations . content_size ( lb ) [EOL] [comment] [EOL] assert lb_size > [number] [EOL] assert lb_size < [number] [EOL] [EOL] [EOL] def test_set_new_lb_section_for_large_files ( self , mock_labbook ) : [EOL] x , y , lb = mock_labbook [EOL] [EOL] assert FileOperations . is_set_untracked ( labbook = lb , section = [string] ) is False [EOL] [EOL] FileOperations . set_untracked ( labbook = lb , section = [string] ) [EOL] [EOL] assert FileOperations . is_set_untracked ( labbook = lb , section = [string] ) is True [EOL] assert FileOperations . is_set_untracked ( labbook = lb , section = [string] ) is False [EOL] [EOL] [comment] [EOL] s = lb . git . status ( ) [EOL] for key in s . keys ( ) : [EOL] assert not s [ key ] [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] r = FileOperations . put_file ( lb , section = [string] , src_file = f . name , dst_path = [string] ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] s = lb . git . status ( ) [EOL] for key in s . keys ( ) : [EOL] assert not s [ key ] [EOL] [EOL] def test_make_sure_cannot_set_when_files_already_exist_in_section ( self , mock_labbook ) : [EOL] x , y , lb = mock_labbook [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . encode ( [string] ) ) [EOL] r = FileOperations . put_file ( lb , section = [string] , src_file = f . name , dst_path = [string] ) [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] with pytest . raises ( FileOperationsException ) : [EOL] FileOperations . set_untracked ( labbook = lb , section = [string] ) [EOL] [EOL] assert FileOperations . is_set_untracked ( labbook = lb , section = [string] ) is False [EOL] [EOL] def test_make_sure_cannot_set_untracked_twice ( self , mock_labbook ) : [EOL] x , y , lb = mock_labbook [EOL] [EOL] hash_0 = lb . git . commit_hash [EOL] FileOperations . set_untracked ( labbook = lb , section = [string] ) [EOL] [EOL] [comment] [EOL] s = lb . git . status ( ) [EOL] [EOL] for key in s . keys ( ) : [EOL] assert not s [ key ] [EOL] [EOL] [comment] [EOL] hash_1 = lb . git . commit_hash [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] r = FileOperations . put_file ( lb , section = [string] , src_file = f . name , dst_path = [string] ) [EOL] hash_2 = lb . git . commit_hash [EOL] assert os . path . isfile ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( FileOperationsException ) : [EOL] FileOperations . set_untracked ( labbook = lb , section = [string] ) [EOL] hash_3 = lb . git . commit_hash [EOL] [EOL] assert hash_0 != hash_1 [EOL] assert hash_1 == hash_2 [EOL] assert hash_2 == hash_3 [EOL] assert FileOperations . is_set_untracked ( labbook = lb , section = [string] ) is True [EOL] [EOL] def test_with_the_whole_suite_of_file_operations_on_an_UNTRACKED_labbook ( self , mock_labbook ) : [EOL] x , y , lb = mock_labbook [EOL] [EOL] hash_0 = lb . git . commit_hash [EOL] FileOperations . set_untracked ( labbook = lb , section = [string] ) [EOL] hash_1 = lb . git . commit_hash [EOL] assert hash_0 != hash_1 [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . encode ( [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] r = FileOperations . put_file ( lb , section = [string] , src_file = f . name , dst_path = [string] ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] hash_2 = lb . git . commit_hash [EOL] [EOL] deleted = FileOperations . delete_file ( lb , section = [string] , relative_path = [string] ) [EOL] hash_3 = lb . git . commit_hash [EOL] assert deleted is True [EOL] target_path = os . path . join ( lb . root_dir , [string] , [string] ) [EOL] assert not os . path . exists ( target_path ) [EOL] assert lb . is_repo_clean [EOL] [comment] [EOL] assert hash_2 == hash_3 [EOL] [EOL] FileOperations . makedir ( lb , [string] ) [EOL] hash_4 = lb . git . commit_hash [EOL] assert hash_3 == hash_4 [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . encode ( [string] ) ) [EOL] FileOperations . put_file ( lb , section = [string] , src_file = f . name , dst_path = [string] ) [EOL] hash_5 = lb . git . commit_hash [EOL] assert hash_4 == hash_5 [EOL] [EOL] FileOperations . move_file ( lb , section = [string] , src_rel_path = [string] , dst_rel_path = [string] ) [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] ) ) [EOL] hash_6 = lb . git . commit_hash [EOL] assert hash_5 == hash_6 [EOL] [EOL] FileOperations . delete_file ( lb , section = [string] , relative_path = [string] ) [EOL] hash_7 = lb . git . commit_hash [EOL] assert hash_6 == hash_7 [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List , Optional [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import time [EOL] from typing import Optional , Tuple [EOL] [EOL] import docker [EOL] import docker . errors [EOL] [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . labbook import LabBook , LabbookException [EOL] [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] from lmcommon . container . exceptions import ContainerException [EOL] from lmcommon . container . core import ( build_docker_image , stop_labbook_container , start_labbook_container , get_container_ip ) [EOL] from lmcommon . container . jupyter import start_jupyter [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class ContainerOperations ( object ) : [EOL] [EOL] @ classmethod def build_image ( cls , labbook , override_image_tag = None , username = None , nocache = False ) : [EOL] [docstring] [EOL] logger . info ( f" [string] { str ( labbook ) } [string] " f" [string] { override_image_tag } [string] " ) [EOL] docker_img_id = build_docker_image ( labbook . root_dir , override_image_tag = override_image_tag , username = username , nocache = nocache ) [EOL] return labbook , docker_img_id [EOL] [EOL] @ classmethod def delete_image ( cls , labbook , override_image_tag = None , username = None ) : [EOL] [docstring] [EOL] image_name = override_image_tag or infer_docker_image_name ( labbook_name = labbook . name , owner = labbook . owner [ [string] ] , username = username ) [EOL] [comment] [EOL] try : [EOL] get_docker_client ( ) . images . get ( name = image_name ) [EOL] get_docker_client ( ) . images . remove ( image_name ) [EOL] except docker . errors . ImageNotFound : [EOL] pass [EOL] except Exception as e : [EOL] logger . error ( [string] ) [EOL] return labbook , False [EOL] return labbook , True [EOL] [EOL] @ classmethod def run_command ( cls , cmd_text , labbook , username = None , override_image_tag = None , fallback_image = None ) : [EOL] [docstring] [EOL] image_name = override_image_tag [EOL] if not image_name : [EOL] image_name = infer_docker_image_name ( labbook_name = labbook . name , owner = labbook . owner [ [string] ] , username = username ) [EOL] [comment] [EOL] client = get_docker_client ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] client . images . get ( image_name ) [EOL] except docker . errors . ImageNotFound : [EOL] [comment] [EOL] if not fallback_image : [EOL] raise [EOL] logger . warning ( f" [string] " f" [string] { fallback_image } [string] " ) [EOL] image_name = fallback_image [EOL] [EOL] t0 = time . time ( ) [EOL] try : [EOL] [comment] [EOL] container = client . containers . run ( image_name , cmd_text , entrypoint = [ ] , remove = False , detach = True , stdout = True ) [EOL] while container . status != [string] : [EOL] time . sleep ( [number] ) [EOL] container . reload ( ) [EOL] result = container . logs ( stdout = True , stderr = False ) [EOL] container . remove ( v = True ) [EOL] [EOL] except docker . errors . ContainerError as e : [EOL] tfail = time . time ( ) [EOL] logger . error ( f' [string] { cmd_text } [string] { tfail - t0 } [string] ' f' [string] { e . exit_status } [string] { e . stderr }' ) [EOL] raise ContainerException ( e ) [EOL] [EOL] ts = time . time ( ) [EOL] if ts - t0 > [number] : [EOL] logger . warning ( f' [string] { cmd_text } [string] { str ( labbook ) } [string] { ts - t0 } [string] ' ) [EOL] [EOL] return result [EOL] [EOL] @ classmethod def start_container ( cls , labbook , username = None , override_image_tag = None ) : [EOL] [docstring] [EOL] if not os . environ . get ( [string] ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] container_id = start_labbook_container ( labbook_root = labbook . root_dir , config_path = labbook . labmanager_config . config_file , override_image_id = override_image_tag , username = username ) [EOL] return labbook , container_id [EOL] [EOL] @ classmethod def stop_container ( cls , labbook , username = None ) : [EOL] [docstring] [EOL] n = infer_docker_image_name ( labbook_name = labbook . name , owner = labbook . owner [ [string] ] , username = username ) [EOL] logger . info ( f" [string] { str ( labbook ) } [string] { n } [string] " ) [EOL] [EOL] try : [EOL] stopped = stop_labbook_container ( n ) [EOL] finally : [EOL] [comment] [EOL] with labbook . lock_labbook ( ) : [EOL] labbook . sweep_uncommitted_changes ( ) [EOL] [EOL] return labbook , stopped [EOL] [EOL] @ classmethod def get_labbook_ip ( cls , labbook , username ) : [EOL] [docstring] [EOL] docker_key = infer_docker_image_name ( labbook_name = labbook . name , owner = labbook . owner [ [string] ] , username = username ) [EOL] return get_container_ip ( docker_key ) [EOL] [EOL] @ classmethod def start_dev_tool ( cls , labbook , dev_tool_name , username , tag = None , check_reachable = True , proxy_prefix = None ) : [EOL] [docstring] [EOL] [comment] [EOL] supported_dev_tools = [ [string] ] [EOL] if dev_tool_name not in supported_dev_tools : [EOL] raise LabbookException ( f" [string] { dev_tool_name } [string] " ) [EOL] suffix = start_jupyter ( labbook , username , tag , check_reachable , proxy_prefix ) [EOL] return labbook , suffix [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[lmcommon.labbook.LabBook,builtins.str]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[lmcommon.labbook.LabBook,builtins.bool]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[lmcommon.labbook.LabBook,builtins.str]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[lmcommon.labbook.LabBook,builtins.bool]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Tuple[lmcommon.labbook.LabBook,builtins.str]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $builtins.bool$ 0 $typing.Optional[builtins.str]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Callable , Optional , List , Any [EOL] import hashlib [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import docker [EOL] import docker . errors [EOL] import hashlib [EOL] import time [EOL] import json [EOL] from typing import Callable , Optional [EOL] [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] from lmcommon . container . exceptions import ContainerBuildException [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def get_labmanager_ip ( ) : [EOL] [docstring] [EOL] client = get_docker_client ( ) [EOL] container = [ c for c in client . containers . list ( ) if [string] in c . name and [string] not in c . name ] [ [number] ] [EOL] ip = container . attrs [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] logger . info ( [string] . format ( container . name , ip ) ) [EOL] return ip [EOL] [EOL] [EOL] def get_container_ip ( lb_key ) : [EOL] [docstring] [EOL] client = get_docker_client ( ) [EOL] container = client . containers . get ( lb_key ) [EOL] return container . attrs [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def _get_cached_image ( env_dir , image_name ) : [EOL] [docstring] [EOL] [comment] [EOL] cache_dir = [string] [EOL] if not os . path . exists ( cache_dir ) : [EOL] logger . info ( f" [string] { cache_dir }" ) [EOL] os . makedirs ( cache_dir , exist_ok = True ) [EOL] env_cache_path = os . path . join ( cache_dir , f"{ image_name } [string] " ) [EOL] [EOL] m = hashlib . sha256 ( ) [EOL] for root , dirs , files in os . walk ( env_dir ) : [EOL] for f in [ n for n in files if [string] in n ] : [EOL] m . update ( os . path . join ( root , f ) . encode ( ) ) [EOL] m . update ( open ( os . path . join ( root , f ) ) . read ( ) . encode ( ) ) [EOL] env_cksum = m . hexdigest ( ) [EOL] [EOL] if os . path . exists ( env_cache_path ) : [EOL] old_env_cksum = open ( env_cache_path ) . read ( ) [EOL] else : [EOL] with open ( env_cache_path , [string] ) as cfile : [EOL] cfile . write ( env_cksum ) [EOL] return None [EOL] [EOL] if env_cksum == old_env_cksum : [EOL] try : [EOL] i = get_docker_client ( ) . images . get ( name = image_name ) [EOL] return i . id [EOL] except docker . errors . ImageNotFound : [EOL] pass [EOL] else : [EOL] [comment] [EOL] os . remove ( env_cache_path ) [EOL] with open ( env_cache_path , [string] ) as cfile : [EOL] cfile . write ( env_cksum ) [EOL] return None [EOL] [EOL] [EOL] def _remove_docker_image ( image_name ) : [EOL] try : [EOL] get_docker_client ( ) . images . get ( name = image_name ) [EOL] get_docker_client ( ) . images . remove ( image_name ) [EOL] except docker . errors . ImageNotFound : [EOL] logger . warning ( f" [string] { image_name } [string] " ) [EOL] [EOL] [EOL] def build_docker_image ( root_dir , override_image_tag , nocache = False , username = None , feedback_callback = None ) : [EOL] [docstring] [EOL] [EOL] if not os . path . exists ( root_dir ) : [EOL] raise ValueError ( f' [string] { root_dir } [string] ' ) [EOL] [EOL] env_dir = os . path . join ( root_dir , [string] , [string] ) [EOL] lb = LabBook ( ) [EOL] lb . from_directory ( root_dir ) [EOL] [EOL] [comment] [EOL] image_name = override_image_tag or infer_docker_image_name ( labbook_name = lb . name , owner = lb . owner [ [string] ] , username = username ) [EOL] [EOL] reuse_image_id = _get_cached_image ( env_dir , image_name ) [EOL] if reuse_image_id : [EOL] logger . info ( f" [string] { str ( lb ) }" ) [EOL] if feedback_callback : [EOL] feedback_callback ( f" [string] { reuse_image_id }" ) [EOL] return reuse_image_id [EOL] [EOL] try : [EOL] image_id = None [EOL] [comment] [EOL] [comment] [EOL] for line in docker . from_env ( ) . api . build ( path = env_dir , tag = image_name , pull = True , nocache = nocache , forcerm = True ) : [EOL] ldict = json . loads ( line ) [EOL] stream = ( ldict . get ( [string] ) or [string] ) . strip ( ) [EOL] if feedback_callback : [EOL] feedback_callback ( stream ) [EOL] status = ( ldict . get ( [string] ) or [string] ) . strip ( ) [EOL] if feedback_callback : [EOL] feedback_callback ( status ) [EOL] [EOL] if [string] . lower ( ) in stream . lower ( ) : [EOL] [comment] [EOL] [comment] [EOL] image_id = stream . split ( [string] ) [ - [number] ] [EOL] except docker . errors . BuildError as e : [EOL] _remove_docker_image ( image_name ) [EOL] raise ContainerBuildException ( e ) [EOL] [EOL] if not image_id : [EOL] _remove_docker_image ( image_name ) [EOL] raise ContainerBuildException ( f" [string] { root_dir }" ) [EOL] [EOL] return image_id [EOL] [EOL] [EOL] def start_labbook_container ( labbook_root , config_path , override_image_id = None , username = None ) : [EOL] [docstring] [EOL] if username and override_image_id : [EOL] raise ValueError ( [string] ) [EOL] [EOL] lb = LabBook ( config_path ) [EOL] lb . from_directory ( labbook_root ) [EOL] if not override_image_id : [EOL] tag = infer_docker_image_name ( lb . name , lb . owner [ [string] ] , username ) [EOL] else : [EOL] tag = override_image_id [EOL] [EOL] mnt_point = labbook_root . replace ( [string] , os . environ [ [string] ] ) [EOL] volumes_dict = { mnt_point : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } } [EOL] [EOL] [comment] [EOL] if [string] in os . environ : [EOL] env_var = [ f" [string] { os . environ [ [string] ] }" ] [EOL] else : [EOL] env_var = [ [string] ] [EOL] [EOL] [comment] [EOL] resource_args = dict ( ) [EOL] memory_limit = lb . labmanager_config . config [ [string] ] [ [string] ] [EOL] cpu_limit = lb . labmanager_config . config [ [string] ] [ [string] ] [EOL] if memory_limit : [EOL] [comment] [EOL] resource_args [ [string] ] = memory_limit [EOL] if cpu_limit : [EOL] [comment] [EOL] [comment] [EOL] resource_args [ [string] ] = round ( cpu_limit * [number] ) [EOL] [EOL] docker_client = get_docker_client ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] cudav = lb . labmanager_config . config [ [string] ] . get ( [string] ) [EOL] logger . info ( f" [string] { cudav } [string] { lb . cuda_version }" ) [EOL] if cudav and lb . cuda_version : [EOL] logger . info ( f" [string] { lb . cuda_version }" ) [EOL] container_id = docker_client . containers . run ( tag , detach = True , init = True , name = tag , environment = env_var , volumes = volumes_dict , runtime = [string] , ** resource_args ) . id [EOL] else : [EOL] container_id = docker_client . containers . run ( tag , detach = True , init = True , name = tag , environment = env_var , volumes = volumes_dict , ** resource_args ) . id [EOL] [EOL] labmanager_ip = [string] [EOL] try : [EOL] labmanager_ip = get_labmanager_ip ( ) or [string] [EOL] except IndexError : [EOL] logger . warning ( [string] ) [EOL] [EOL] labmanager_ip = labmanager_ip . strip ( ) [EOL] cmd = f" [string] { labmanager_ip } [string] " [EOL] for timeout in range ( [number] ) : [EOL] time . sleep ( [number] ) [EOL] if docker_client . containers . get ( container_id ) . status == [string] : [EOL] r = docker_client . containers . get ( container_id ) . exec_run ( f' [string] { cmd } [string] ' ) [EOL] logger . info ( f" [string] { tag } [string] { r }" ) [EOL] break [EOL] else : [EOL] logger . error ( [string] f" [string] { docker_client . containers . get ( container_id ) . status }" ) [EOL] return container_id [EOL] [EOL] [EOL] def stop_labbook_container ( container_id ) : [EOL] [docstring] [EOL] try : [EOL] client = get_docker_client ( ) [EOL] build_container = client . containers . get ( container_id ) [EOL] build_container . stop ( timeout = [number] ) [EOL] build_container . remove ( ) [EOL] return True [EOL] except docker . errors . NotFound : [EOL] [comment] [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Match , Any , List , Optional [EOL] import requests [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import uuid [EOL] import time [EOL] import os [EOL] import re [EOL] from typing import Optional [EOL] [EOL] import redis [EOL] import requests [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . environment import ComponentManager [EOL] from lmcommon . container . core import infer_docker_image_name , get_container_ip [EOL] from lmcommon . labbook import LabBook , LabbookException [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] DEFAULT_JUPYTER_PORT = [number] [EOL] [EOL] [EOL] def start_jupyter ( labbook , username , tag = None , check_reachable = True , proxy_prefix = None ) : [EOL] [docstring] [EOL] [EOL] lb_key = tag or infer_docker_image_name ( labbook_name = labbook . name , owner = labbook . owner [ [string] ] , username = username ) [EOL] docker_client = get_docker_client ( ) [EOL] lb_container = docker_client . containers . get ( lb_key ) [EOL] if lb_container . status != [string] : [EOL] raise LabbookException ( f"{ str ( labbook ) } [string] " ) [EOL] [EOL] search_sh = f' [string] ' [EOL] ec , jupyter_tokens = lb_container . exec_run ( search_sh ) [EOL] jupyter_ps = [ l for l in jupyter_tokens . decode ( ) . split ( [string] ) if l ] [EOL] [EOL] if len ( jupyter_ps ) == [number] : [EOL] [comment] [EOL] t = re . search ( [string] , jupyter_ps [ [number] ] ) [EOL] if not t : [EOL] raise LabbookException ( [string] ) [EOL] token = t . groups ( ) [ [number] ] [EOL] return f'{ proxy_prefix or [string] } [string] { token }' [EOL] elif len ( jupyter_ps ) == [number] : [EOL] token = str ( uuid . uuid4 ( ) ) . replace ( [string] , [string] ) [EOL] if proxy_prefix and proxy_prefix [ [number] ] != [string] : [EOL] proxy_prefix = f' [string] { proxy_prefix }' [EOL] _start_jupyter_process ( labbook , lb_container , username , lb_key , token , proxy_prefix ) [EOL] suffix = f'{ proxy_prefix or [string] } [string] { token }' [EOL] if check_reachable : [EOL] _check_jupyter_reachable ( lb_key , suffix ) [EOL] return suffix [EOL] else : [EOL] [comment] [EOL] for n , l in enumerate ( jupyter_ps ) : [EOL] logger . error ( f' [string] { n + [number] } [string] { len ( jupyter_ps ) } [string] { l }' ) [EOL] raise ValueError ( f' [string] { len ( jupyter_ps ) } [string] ' ) [EOL] [EOL] [EOL] def _shim_skip_python2_savehook ( labbook ) : [EOL] [docstring] [EOL] cm = ComponentManager ( labbook ) [EOL] return [string] in cm . base_fields [ [string] ] . lower ( ) . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def _start_jupyter_process ( labbook , lb_container , username , lb_key , token , proxy_prefix = None ) : [EOL] use_savehook = os . path . exists ( [string] ) \ [EOL] and not _shim_skip_python2_savehook ( labbook ) [EOL] un = labbook . owner [ [string] ] [EOL] cmd = ( f" [string] " f' [string] { username } [string] { un } [string] { labbook . name } [string] { token } [string] ' f" [string] " f" [string] { DEFAULT_JUPYTER_PORT } [string] " f" [string] { token } [string] " f' [string] ' + ( f' [string] ' [EOL] if use_savehook else [string] ) + ( f' [string] { proxy_prefix } [string] ' [EOL] if proxy_prefix else [string] ) ) [EOL] [EOL] lb_container . exec_run ( f' [string] { cmd } [string] ' , detach = True , user = [string] ) [EOL] [EOL] [comment] [EOL] for timeout in range ( [number] ) : [EOL] time . sleep ( [number] ) [EOL] ec , new_ps_list = lb_container . exec_run ( f' [string] ' ) [EOL] new_ps_list = new_ps_list . decode ( ) . split ( [string] ) [EOL] if any ( [ [string] in l or [string] in l for l in new_ps_list ] ) : [EOL] logger . info ( f" [string] { timeout + [number] } [string] " ) [EOL] break [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] redis_conn = redis . Redis ( db = [number] ) [EOL] redis_conn . set ( f"{ lb_key } [string] " , token ) [EOL] [EOL] [EOL] def _check_jupyter_reachable ( lb_key , suffix ) : [EOL] for n in range ( [number] ) : [EOL] [comment] [EOL] lb_ip_addr = get_container_ip ( lb_key ) [EOL] test_url = f' [string] { lb_ip_addr } [string] { DEFAULT_JUPYTER_PORT }{ suffix }' [EOL] logger . debug ( f" [string] { n + [number] } [string] { test_url } [string] " ) [EOL] try : [EOL] r = requests . get ( test_url , timeout = [number] ) [EOL] if r . status_code != [number] : [EOL] time . sleep ( [number] ) [EOL] else : [EOL] logger . info ( f' [string] { test_url } [string] { n / [number] } [string] ' ) [EOL] break [EOL] except requests . exceptions . ConnectionError : [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] else : [EOL] raise LabbookException ( f' [string] { test_url } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class ContainerException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ContainerBuildException ( ContainerException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Optional [EOL] import builtins [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] [EOL] def infer_docker_image_name ( labbook_name , owner , username = None ) : [EOL] [docstring] [EOL] return f" [string] { username or [string] } [string] { owner } [string] { labbook_name }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import pprint [EOL] import getpass [EOL] import docker [EOL] import requests [EOL] import shutil [EOL] [EOL] from lmcommon . configuration import get_docker_client [EOL] [EOL] from lmcommon . container . container import ContainerOperations [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] from lmcommon . fixtures . container import build_lb_image_for_jupyterlab , mock_config_with_repo [EOL] from lmcommon . container . exceptions import ContainerBuildException , ContainerException [EOL] [EOL] [EOL] def remove_image_cache_data ( ) : [EOL] try : [EOL] shutil . rmtree ( [string] , ignore_errors = True ) [EOL] except : [EOL] pass [EOL] [EOL] [EOL] class TestContainerOps ( object ) : [EOL] def test_build_image_fixture ( self , build_lb_image_for_jupyterlab ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def test_start_jupyterlab ( self , build_lb_image_for_jupyterlab ) : [EOL] container_id = build_lb_image_for_jupyterlab [ [number] ] [EOL] docker_image_id = build_lb_image_for_jupyterlab [ [number] ] [EOL] client = build_lb_image_for_jupyterlab [ [number] ] [EOL] ib = build_lb_image_for_jupyterlab [ [number] ] [EOL] lb = build_lb_image_for_jupyterlab [ [number] ] [EOL] [EOL] ec , stdo = client . containers . get ( container_id = container_id ) . exec_run ( [string] , user = [string] ) [EOL] l = [ a for a in stdo . decode ( ) . split ( [string] ) if a ] [EOL] assert len ( l ) == [number] [EOL] [EOL] lb , info = ContainerOperations . start_dev_tool ( labbook = lb , dev_tool_name = [string] , username = [string] , check_reachable = not ( getpass . getuser ( ) == [string] ) ) [EOL] [EOL] ec , stdo = client . containers . get ( container_id = container_id ) . exec_run ( [string] , user = [string] ) [EOL] l = [ a for a in stdo . decode ( ) . split ( [string] ) if a ] [EOL] assert len ( l ) == [number] [EOL] [EOL] [comment] [EOL] lb , info = ContainerOperations . start_dev_tool ( labbook = lb , dev_tool_name = [string] , username = [string] ) [EOL] [EOL] [comment] [EOL] ec , stdo = client . containers . get ( container_id = container_id ) . exec_run ( [string] , user = [string] ) [EOL] l = [ a for a in stdo . decode ( ) . split ( [string] ) if a ] [EOL] assert len ( l ) == [number] [EOL] [EOL] def test_run_command ( self , build_lb_image_for_jupyterlab ) : [EOL] my_lb = build_lb_image_for_jupyterlab [ [number] ] [EOL] docker_image_id = build_lb_image_for_jupyterlab [ [number] ] [EOL] [EOL] result = ContainerOperations . run_command ( [string] , my_lb , username = [string] ) [EOL] assert result . decode ( ) . strip ( ) == [string] [EOL] [EOL] result = ContainerOperations . run_command ( [string] , my_lb , username = [string] ) [EOL] assert any ( [ [string] in l for l in result . decode ( ) . strip ( ) . split ( [string] ) ] ) [EOL] [EOL] result = ContainerOperations . run_command ( [string] , my_lb , username = [string] ) [EOL] assert result . decode ( ) . strip ( ) == [string] [EOL] [EOL] result = ContainerOperations . run_command ( [string] , my_lb , username = [string] ) [EOL] assert result . decode ( ) . strip ( ) == [string] [EOL] [EOL] def test_old_dockerfile_removed_when_new_build_fails ( self , build_lb_image_for_jupyterlab ) : [EOL] [comment] [EOL] my_lb = build_lb_image_for_jupyterlab [ [number] ] [EOL] docker_image_id = build_lb_image_for_jupyterlab [ [number] ] [EOL] [EOL] my_lb , stopped = ContainerOperations . stop_container ( my_lb , username = [string] ) [EOL] [EOL] assert stopped [EOL] [EOL] olines = open ( os . path . join ( my_lb . root_dir , [string] ) ) . readlines ( ) [ : [number] ] [EOL] with open ( os . path . join ( my_lb . root_dir , [string] ) , [string] ) as dockerfile : [EOL] dockerfile . write ( [string] . join ( olines ) ) [EOL] dockerfile . write ( [string] ) [EOL] [EOL] [comment] [EOL] remove_image_cache_data ( ) [EOL] [EOL] with pytest . raises ( ContainerBuildException ) : [EOL] ContainerOperations . build_image ( labbook = my_lb , username = [string] ) [EOL] [EOL] with pytest . raises ( docker . errors . ImageNotFound ) : [EOL] get_docker_client ( ) . images . get ( infer_docker_image_name ( labbook_name = my_lb . name , owner = my_lb . owner [ [string] ] , username = [string] ) ) [EOL] [EOL] with pytest . raises ( requests . exceptions . HTTPError ) : [EOL] [comment] [EOL] ContainerOperations . start_container ( labbook = my_lb , username = [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lmcommon . environment . packagemanager import PackageManager [EOL] from lmcommon . environment . repositorymanager import RepositoryManager [EOL] from lmcommon . environment . repository import ComponentRepository [EOL] from lmcommon . environment . componentmanager import ComponentManager [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Type , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import abc [EOL] from typing import ( List , Dict , Optional ) [EOL] from collections import namedtuple [EOL] [EOL] from lmcommon . labbook import LabBook [EOL] import lmcommon . environment [EOL] [EOL] [comment] [EOL] PackageResult = namedtuple ( [string] , [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] class PackageManager ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def fallback_image ( labbook ) : [EOL] [docstring] [EOL] cm = getattr ( lmcommon . environment , [string] ) ( labbook ) [EOL] base = cm . base_fields [EOL] return f"{ base [ [string] ] [ [string] ] }" f" [string] { base [ [string] ] [ [string] ] }" f" [string] { base [ [string] ] [ [string] ] }" [EOL] [EOL] @ abc . abstractmethod def search ( self , search_str , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def list_versions ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def latest_version ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def latest_versions ( self , package_names , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def list_installed_packages ( self , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def list_available_updates ( self , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def validate_packages ( self , package_list , labbook , username ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL] [EOL] @ abc . abstractmethod def generate_docker_install_snippet ( self , packages , single_line = False ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[PackageResult]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , OrderedDict , List , Optional [EOL] import collections [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import yaml [EOL] import glob [EOL] import pickle [EOL] import operator [EOL] import requests [EOL] import shutil [EOL] from collections import OrderedDict [EOL] from typing import ( Any , List , Dict , Optional ) [EOL] [EOL] from lmcommon . gitlib import get_git_interface [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . configuration import Configuration [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] def repo_url_to_name ( url ) : [EOL] [docstring] [EOL] url , _ = url . rsplit ( [string] , [number] ) [EOL] _ , namespace , repo = url . rsplit ( [string] , [number] ) [EOL] return [string] . format ( namespace , repo ) [EOL] [EOL] [EOL] class RepositoryManager ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config_file = None ) : [EOL] [docstring] [EOL] self . config = Configuration ( config_file = config_file ) [EOL] self . local_repo_directory = os . path . expanduser ( os . path . join ( self . config . config [ [string] ] [ [string] ] , [string] , [string] ) ) [EOL] self . git = get_git_interface ( self . config . config [ [string] ] ) [EOL] [EOL] def _clone_repo ( self , url , location , branch ) : [EOL] [docstring] [EOL] [comment] [EOL] os . makedirs ( location ) [EOL] [EOL] [comment] [EOL] self . git . set_working_directory ( location ) [EOL] [EOL] [comment] [EOL] self . git . clone ( url ) [EOL] [EOL] if branch is not None : [EOL] self . git . fetch ( ) [EOL] self . git . checkout ( branch ) [EOL] [EOL] @ staticmethod def _internet_is_available ( ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] requests . head ( [string] , timeout = [number] ) [EOL] except requests . exceptions . ConnectionError : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] def _update_repo ( self , location , branch ) : [EOL] [docstring] [EOL] [comment] [EOL] self . git . set_working_directory ( location ) [EOL] [EOL] [comment] [EOL] self . git . fetch ( ) [EOL] [EOL] if branch is not None : [EOL] self . git . checkout ( branch ) [EOL] else : [EOL] [comment] [EOL] self . git . checkout ( [string] ) [EOL] [EOL] self . git . pull ( ) [EOL] [EOL] def update_repositories ( self ) : [EOL] [docstring] [EOL] if self . _internet_is_available ( ) : [EOL] [comment] [EOL] repo_urls = self . config . config [ [string] ] [ [string] ] [EOL] [EOL] for repo_url in repo_urls : [EOL] repo_dir_name = repo_url_to_name ( repo_url ) [EOL] repo_dir = os . path . join ( self . local_repo_directory , repo_dir_name ) [EOL] [EOL] [comment] [EOL] branch = None [EOL] if [string] in repo_url : [EOL] repo_url , branch = repo_url . split ( [string] ) [EOL] [EOL] [comment] [EOL] if not os . path . exists ( repo_dir ) : [EOL] [comment] [EOL] self . _clone_repo ( repo_url , repo_dir , branch ) [EOL] else : [EOL] [comment] [EOL] self . _update_repo ( repo_dir , branch ) [EOL] [EOL] for existing_dir in [ n for n in os . listdir ( self . local_repo_directory ) if os . path . isdir ( os . path . join ( self . local_repo_directory , n ) ) ] : [EOL] if existing_dir not in [ repo_url_to_name ( r ) for r in repo_urls ] : [EOL] [comment] [EOL] [comment] [EOL] logger . warning ( f" [string] { existing_dir }" ) [EOL] shutil . rmtree ( os . path . join ( self . local_repo_directory , existing_dir ) ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def index_component_repository ( self , repo_name , component ) : [EOL] [docstring] [EOL] [comment] [EOL] repo_dir = os . path . join ( self . local_repo_directory , repo_name ) [EOL] component_repo_dir = os . path . join ( repo_dir , component ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] yaml_files = glob . glob ( os . path . join ( component_repo_dir , [string] , [string] ) ) [EOL] [EOL] data = OrderedDict ( ) [EOL] data [ repo_name ] = OrderedDict ( ) [EOL] [EOL] [comment] [EOL] for yf in yaml_files : [EOL] with open ( yf , [string] ) as yf_file : [EOL] yaml_data = yaml . load ( yf_file ) [EOL] _ , component_name , _ = yf . rsplit ( os . path . sep , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] yaml_data [ [string] ] = repo_name [EOL] [EOL] if component_name not in data [ repo_name ] : [EOL] data [ repo_name ] [ component_name ] = OrderedDict ( ) [EOL] [EOL] revision = yaml_data [ [string] ] [EOL] data [ repo_name ] [ component_name ] [ revision ] = yaml_data [EOL] [EOL] return data [EOL] [EOL] def build_component_list_index ( self , index_data ) : [EOL] [docstring] [EOL] component_list = [ ] [EOL] repos = list ( index_data . keys ( ) ) [EOL] for repo in repos : [EOL] if repo == [string] : [EOL] [comment] [EOL] continue [EOL] [EOL] components = list ( index_data [ repo ] . keys ( ) ) [EOL] [EOL] for component in components : [EOL] [comment] [EOL] revs = list ( index_data [ repo ] [ component ] . items ( ) ) [EOL] revs = sorted ( revs , reverse = True , key = operator . itemgetter ( [number] ) ) [EOL] component_list . append ( revs [ [number] ] [ [number] ] ) [EOL] [EOL] return sorted ( component_list , key = lambda n : n [ [string] ] ) [EOL] [EOL] def index_repositories ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] repo_urls = self . config . config [ [string] ] [ [string] ] [EOL] repo_names = [ repo_url_to_name ( x ) for x in repo_urls ] [EOL] [EOL] base_image_all_repo_data = OrderedDict ( ) [EOL] custom_all_repo_data = OrderedDict ( ) [EOL] for repo_name in repo_names : [EOL] [comment] [EOL] base_image_all_repo_data . update ( self . index_component_repository ( repo_name , [string] ) ) [EOL] [EOL] [comment] [EOL] custom_all_repo_data . update ( self . index_component_repository ( repo_name , [string] ) ) [EOL] [EOL] [comment] [EOL] base_image_list_repo_data = self . build_component_list_index ( base_image_all_repo_data ) [EOL] custom_list_repo_data = self . build_component_list_index ( custom_all_repo_data ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( self . local_repo_directory , [string] ) , [string] ) as fh : [EOL] pickle . dump ( base_image_all_repo_data , fh ) [EOL] with open ( os . path . join ( self . local_repo_directory , [string] ) , [string] ) as fh : [EOL] pickle . dump ( base_image_list_repo_data , fh ) [EOL] [EOL] with open ( os . path . join ( self . local_repo_directory , [string] ) , [string] ) as fh : [EOL] pickle . dump ( custom_all_repo_data , fh ) [EOL] with open ( os . path . join ( self . local_repo_directory , [string] ) , [string] ) as fh : [EOL] pickle . dump ( custom_list_repo_data , fh ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $collections.OrderedDict[builtins.str,typing.Any]$ 0 0 0 $typing.List$ 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $collections.OrderedDict$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import ( Any , List , Dict , Optional ) [EOL] from collections import OrderedDict [EOL] import json [EOL] from natsort import natsorted [EOL] [EOL] from distutils . version import StrictVersion [EOL] from distutils . version import LooseVersion [EOL] [EOL] from lmcommon . environment . packagemanager import PackageManager , PackageResult [EOL] from lmcommon . container . container import ContainerOperations [EOL] from lmcommon . container . exceptions import ContainerException [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class CondaPackageManagerBase ( PackageManager ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] [comment] [EOL] self . python_depends_str = None [EOL] [EOL] [comment] [EOL] self . python_env = None [EOL] [EOL] def search ( self , search_str , labbook , username ) : [EOL] [docstring] [EOL] [comment] [EOL] if search_str [ - [number] ] != [string] : [EOL] search_str = search_str + [string] [EOL] [EOL] try : [EOL] result = ContainerOperations . run_command ( f' [string] { search_str } [string] ' , labbook = labbook , username = username , fallback_image = self . fallback_image ( labbook ) ) [EOL] except ContainerException as e : [EOL] logger . error ( e ) [EOL] return list ( ) [EOL] [EOL] data = json . loads ( result . decode ( ) ) [EOL] if [string] in data : [EOL] if data . get ( [string] ) in [ [string] , [string] ] : [EOL] [comment] [EOL] return list ( ) [EOL] else : [EOL] raise Exception ( f" [string] { data . get ( [string] ) }" ) [EOL] [EOL] if data : [EOL] return list ( data . keys ( ) ) [EOL] else : [EOL] return list ( ) [EOL] [EOL] def list_versions ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] try : [EOL] result = ContainerOperations . run_command ( f" [string] { package_name }" , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] data = json . loads ( result . decode ( ) ) [EOL] except ContainerException as e : [EOL] logger . error ( e ) [EOL] data = { } [EOL] [EOL] [comment] [EOL] if [string] in data : [EOL] raise ValueError ( f" [string] { data . get ( [string] ) }" ) [EOL] [EOL] if len ( data . keys ( ) ) == [number] or len ( data . get ( package_name ) ) == [number] : [EOL] raise ValueError ( f" [string] { package_name } [string] " ) [EOL] [EOL] [comment] [EOL] if any ( [ True for x in data . get ( package_name ) if self . python_depends_str in x . get ( [string] ) ] ) : [EOL] versions = [ x . get ( [string] ) for x in data . get ( package_name ) if self . python_depends_str in x . get ( [string] ) ] [EOL] else : [EOL] versions = [ x . get ( [string] ) for x in data . get ( package_name ) ] [EOL] [EOL] versions = list ( OrderedDict . fromkeys ( versions ) ) [EOL] [EOL] try : [EOL] versions . sort ( key = StrictVersion ) [EOL] except ValueError as e : [EOL] if [string] in str ( e ) : [EOL] try : [EOL] versions . sort ( key = LooseVersion ) [EOL] except Exception : [EOL] versions = natsorted ( versions , key = lambda x : x . replace ( [string] , [string] ) + [string] ) [EOL] else : [EOL] raise e [EOL] [EOL] versions . reverse ( ) [EOL] [EOL] return versions [EOL] [EOL] def latest_version ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( f" [string] { package_name }" , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) [EOL] data = json . loads ( result . decode ( ) . strip ( ) ) [EOL] [EOL] if data . get ( [string] ) == [string] : [EOL] [comment] [EOL] [comment] [EOL] result = ContainerOperations . run_command ( [string] , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) [EOL] data = json . loads ( result . decode ( ) . strip ( ) ) [EOL] for pkg in data : [EOL] if pkg . get ( [string] ) == package_name : [EOL] return pkg . get ( [string] ) [EOL] else : [EOL] if isinstance ( data . get ( [string] ) , dict ) is True : [EOL] [comment] [EOL] for p in data . get ( [string] ) . get ( [string] ) : [EOL] if p . get ( [string] ) == package_name : [EOL] return p . get ( [string] ) [EOL] else : [EOL] [comment] [EOL] try : [EOL] for p in [ x . get ( [string] ) [ [number] ] for x in data . get ( [string] ) if x ] : [EOL] if p . get ( [string] ) == package_name : [EOL] return p . get ( [string] ) [EOL] except Exception : [EOL] for p in [ x . get ( [string] ) for x in data . get ( [string] ) if x ] : [EOL] if p . get ( [string] ) == package_name : [EOL] return p . get ( [string] ) [EOL] [EOL] [comment] [EOL] raise ValueError ( f" [string] { package_name }" ) [EOL] [EOL] def latest_versions ( self , package_names , labbook , username ) : [EOL] [docstring] [EOL] cmd = [ [string] , [string] , [string] , [string] , [string] , * package_names ] [EOL] try : [EOL] result = ContainerOperations . run_command ( [string] . join ( cmd ) , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) . decode ( ) . strip ( ) [EOL] except Exception as e : [EOL] logger . error ( e ) [EOL] pkgs = [string] . join ( package_names ) [EOL] raise ValueError ( f" [string] { pkgs }" ) [EOL] [EOL] versions = { pn : [string] for pn in package_names } [EOL] if result : [EOL] data = json . loads ( result ) [EOL] if data . get ( [string] ) == [string] : [EOL] [comment] [EOL] err_pkgs = [ x for x in data . get ( [string] ) ] [EOL] raise ValueError ( f" [string] { err_pkgs }" ) [EOL] [EOL] if data . get ( [string] ) is not None : [EOL] for package_name in package_names : [EOL] if isinstance ( data . get ( [string] ) , dict ) is True : [EOL] [comment] [EOL] for p in data . get ( [string] ) . get ( [string] ) : [EOL] if p . get ( [string] ) == package_name : [EOL] versions [ package_name ] = p . get ( [string] ) [EOL] else : [EOL] [comment] [EOL] try : [EOL] for p in [ x . get ( [string] ) [ [number] ] for x in data . get ( [string] ) if x ] : [EOL] if p . get ( [string] ) == package_name : [EOL] versions [ package_name ] = p . get ( [string] ) [EOL] except Exception as e : [EOL] for p in [ x . get ( [string] ) for x in data . get ( [string] ) if x ] : [EOL] if p . get ( [string] ) == package_name : [EOL] versions [ package_name ] = p . get ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] missing_keys = [ k for k in versions . keys ( ) if versions [ k ] == [string] ] [EOL] if missing_keys : [EOL] cmd = [ [string] , [string] , [string] , [string] ] [EOL] result = ContainerOperations . run_command ( [string] . join ( cmd ) , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) . decode ( ) . strip ( ) [EOL] installed_info = json . loads ( result ) [EOL] [EOL] installed_versions = { pkg [ [string] ] : pkg [ [string] ] for pkg in installed_info } [EOL] [EOL] for pn in missing_keys : [EOL] versions [ pn ] = installed_versions [ pn ] [EOL] [EOL] [comment] [EOL] output_versions = [ versions [ p ] for p in package_names ] [EOL] return output_versions [EOL] [EOL] def list_installed_packages ( self , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( f" [string] " , labbook , username ) [EOL] data = json . loads ( result . decode ( ) . strip ( ) ) [EOL] if data : [EOL] return [ { [string] : x [ [string] ] , [string] : x [ [string] ] } for x in data ] [EOL] else : [EOL] return [ ] [EOL] [EOL] def list_available_updates ( self , labbook , username ) : [EOL] [docstring] [EOL] [comment] [EOL] return [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def validate_packages ( self , package_list , labbook , username ) : [EOL] [docstring] [EOL] [comment] [EOL] pkgs = list ( ) [EOL] for p in package_list : [EOL] if p [ [string] ] : [EOL] pkgs . append ( f"{ p [ [string] ] } [string] { p [ [string] ] }" ) [EOL] else : [EOL] pkgs . append ( p [ [string] ] ) [EOL] [EOL] cmd = [ [string] , [string] , [string] , [string] , [string] , * pkgs ] [EOL] [EOL] try : [EOL] cmd_result = ContainerOperations . run_command ( [string] . join ( cmd ) , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) [EOL] container_result = cmd_result . decode ( ) . strip ( ) [EOL] except Exception as e : [EOL] logger . error ( e ) [EOL] raise ValueError ( f" [string] " ) [EOL] [EOL] if not container_result : [EOL] raise ValueError ( f" [string] " ) [EOL] [EOL] [comment] [EOL] data = json . loads ( container_result ) [EOL] [EOL] if data . get ( [string] ) == [string] : [EOL] [comment] [EOL] result = list ( ) [EOL] for pkg_str , pkg_data in zip ( pkgs , package_list ) : [EOL] if pkg_str in data . get ( [string] ) : [EOL] result . append ( PackageResult ( package = pkg_data [ [string] ] , version = pkg_data [ [string] ] , error = True ) ) [EOL] else : [EOL] result . append ( PackageResult ( package = pkg_data [ [string] ] , version = pkg_data [ [string] ] , error = False ) ) [EOL] [EOL] return result [EOL] [EOL] [comment] [EOL] conda_data = dict ( ) [EOL] if isinstance ( data . get ( [string] ) , dict ) is True : [EOL] [comment] [EOL] for p in data . get ( [string] ) . get ( [string] ) : [EOL] conda_data [ p . get ( [string] ) ] = p . get ( [string] ) [EOL] else : [EOL] [comment] [EOL] try : [EOL] for p in [ x . get ( [string] ) [ [number] ] for x in data . get ( [string] ) if x ] : [EOL] conda_data [ p . get ( [string] ) ] = p . get ( [string] ) [EOL] except Exception : [EOL] for p in [ x . get ( [string] ) for x in data . get ( [string] ) if x ] : [EOL] conda_data [ p . get ( [string] ) ] = p . get ( [string] ) [EOL] [EOL] [comment] [EOL] return [ PackageResult ( package = x [ [string] ] , version = conda_data [ x [ [string] ] ] , error = False ) for x in package_list ] [EOL] [EOL] def generate_docker_install_snippet ( self , packages , single_line = False ) : [EOL] [docstring] [EOL] package_strings = [ f"{ x [ [string] ] } [string] { x [ [string] ] }" for x in packages ] [EOL] [EOL] if single_line : [EOL] return [ f" [string] { [string] . join ( package_strings ) }" ] [EOL] else : [EOL] docker_strings = [ f" [string] { x }" for x in package_strings ] [EOL] return docker_strings [EOL] [EOL] [EOL] class Conda3PackageManager ( CondaPackageManagerBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . python_depends_str = [string] [EOL] self . python_env = [string] [EOL] [EOL] [EOL] class Conda2PackageManager ( CondaPackageManagerBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . python_depends_str = [string] [EOL] self . python_env = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import ( List , Dict , Optional ) [EOL] [EOL] from lmcommon . environment . packagemanager import PackageManager , PackageResult [EOL] from lmcommon . container . container import ContainerOperations [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class AptPackageManager ( PackageManager ) : [EOL] [docstring] [EOL] [EOL] def search ( self , search_str , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( f" [string] { search_str }" , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] [EOL] packages = [ ] [EOL] if result : [EOL] lines = result . decode ( [string] ) . split ( [string] ) [EOL] for l in lines : [EOL] if l : [EOL] packages . append ( l . split ( [string] ) [ [number] ] ) [EOL] [EOL] return packages [EOL] [EOL] def list_versions ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( f" [string] { package_name }" , labbook , username , override_image_tag = self . fallback_image ( labbook ) ) [EOL] [EOL] package_versions = [ ] [EOL] if result : [EOL] lines = result . decode ( [string] ) . split ( [string] ) [EOL] for l in lines : [EOL] if l : [EOL] parts = l . split ( [string] ) [EOL] if parts [ [number] ] not in package_versions : [EOL] package_versions . append ( parts [ [number] ] . strip ( ) ) [EOL] else : [EOL] raise ValueError ( f" [string] { package_name } [string] " ) [EOL] [EOL] return package_versions [EOL] [EOL] def latest_version ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] versions = self . list_versions ( package_name , labbook , username ) [EOL] if versions : [EOL] return versions [ [number] ] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def latest_versions ( self , package_names , labbook , username ) : [EOL] [docstring] [EOL] return [ self . latest_version ( pkg , labbook , username ) for pkg in package_names ] [EOL] [EOL] def list_installed_packages ( self , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( [string] , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] [EOL] packages = [ ] [EOL] if result : [EOL] lines = result . decode ( [string] ) . split ( [string] ) [EOL] for line in lines : [EOL] if line is not None and line != [string] and [string] in line : [EOL] parts = line . split ( [string] ) [EOL] package_name , _ = parts [ [number] ] . split ( [string] ) [EOL] version = parts [ [number] ] . strip ( ) [EOL] packages . append ( { [string] : package_name , [string] : version } ) [EOL] [EOL] return packages [EOL] [EOL] def list_available_updates ( self , labbook , username ) : [EOL] [docstring] [EOL] result = ContainerOperations . run_command ( [string] , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] [EOL] packages = [ ] [EOL] if result : [EOL] lines = result . decode ( [string] ) . split ( [string] ) [EOL] for line in lines : [EOL] if line is not None and line != [string] and [string] in line : [EOL] package_name , version_info_t = line . split ( [string] ) [EOL] version_info = version_info_t . split ( [string] ) [EOL] packages . append ( { [string] : package_name , [string] : version_info [ [number] ] , [string] : version_info [ [number] ] [ : - [number] ] } ) [EOL] [EOL] return packages [EOL] [EOL] def validate_packages ( self , package_list , labbook , username ) : [EOL] [docstring] [EOL] result = list ( ) [EOL] for package in package_list : [EOL] pkg_result = PackageResult ( package = package [ [string] ] , version = package [ [string] ] , error = True ) [EOL] [EOL] try : [EOL] version_list = self . list_versions ( package [ [string] ] , labbook , username ) [EOL] except ValueError : [EOL] result . append ( pkg_result ) [EOL] continue [EOL] [EOL] if not version_list : [EOL] [comment] [EOL] result . append ( pkg_result ) [EOL] else : [EOL] if package [ [string] ] : [EOL] if package [ [string] ] in version_list : [EOL] [comment] [EOL] pkg_result = pkg_result . _replace ( error = False ) [EOL] result . append ( pkg_result ) [EOL] [EOL] else : [EOL] [comment] [EOL] result . append ( pkg_result ) [EOL] [EOL] else : [EOL] [comment] [EOL] try : [EOL] pkg_result = pkg_result . _replace ( version = self . latest_version ( package [ [string] ] , labbook , username ) ) [EOL] pkg_result = pkg_result . _replace ( error = False ) [EOL] result . append ( pkg_result ) [EOL] except ValueError : [EOL] result . append ( pkg_result ) [EOL] [EOL] return result [EOL] [EOL] def generate_docker_install_snippet ( self , packages , single_line = False ) : [EOL] [docstring] [EOL] package_strings = [ f"{ x [ [string] ] }" for x in packages ] [EOL] [EOL] if single_line : [EOL] return [ f" [string] { [string] . join ( package_strings ) }" ] [EOL] else : [EOL] docker_strings = [ f" [string] { x }" for x in package_strings ] [EOL] return docker_strings [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import pickle [EOL] from typing import ( Any , List , Dict ) [EOL] [EOL] from lmcommon . configuration import Configuration [EOL] [EOL] [EOL] class ComponentRepository ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config_file = None ) : [EOL] [docstring] [EOL] self . config = Configuration ( config_file = config_file ) [EOL] self . local_repo_directory = os . path . expanduser ( os . path . join ( self . config . config [ [string] ] [ [string] ] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] self . list_index_data = { } [EOL] self . detail_index_data = { } [EOL] [EOL] def _get_list_index_data ( self , component_class ) : [EOL] [docstring] [EOL] if component_class not in self . list_index_data : [EOL] [comment] [EOL] with open ( os . path . join ( self . local_repo_directory , f"{ component_class } [string] " ) , [string] ) as fh : [EOL] self . list_index_data [ component_class ] = pickle . load ( fh ) [EOL] [EOL] return self . list_index_data [ component_class ] [EOL] [EOL] def _get_detail_index_data ( self , component_class ) : [EOL] [docstring] [EOL] if component_class not in self . detail_index_data : [EOL] [comment] [EOL] with open ( os . path . join ( self . local_repo_directory , [string] . format ( component_class ) ) , [string] ) as fh : [EOL] self . detail_index_data [ component_class ] = pickle . load ( fh ) [EOL] [EOL] return self . detail_index_data [ component_class ] [EOL] [EOL] def get_component_list ( self , component_class ) : [EOL] [docstring] [EOL] index_data = self . _get_list_index_data ( component_class ) [EOL] [EOL] return index_data [EOL] [EOL] def get_component_versions ( self , component_class , repository , component ) : [EOL] [docstring] [EOL] [comment] [EOL] index_data = self . _get_detail_index_data ( component_class ) [EOL] [EOL] if repository not in index_data : [EOL] raise ValueError ( [string] . format ( repository ) ) [EOL] [EOL] if component not in index_data [ repository ] : [EOL] raise ValueError ( [string] . format ( component , repository ) ) [EOL] [EOL] return list ( index_data [ repository ] [ component ] . items ( ) ) [EOL] [EOL] def get_component ( self , component_class , repository , component , revision ) : [EOL] [docstring] [EOL] index_data = self . _get_detail_index_data ( component_class ) [EOL] [EOL] if repository not in index_data : [EOL] raise ValueError ( [string] . format ( repository ) ) [EOL] [EOL] if component not in index_data [ repository ] : [EOL] raise ValueError ( [string] . format ( component , repository ) ) [EOL] [EOL] if revision not in index_data [ repository ] [ component ] : [EOL] raise ValueError ( [string] . format ( revision , repository ) ) [EOL] [EOL] return index_data [ repository ] [ component ] [ revision ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.configuration.configuration.Configuration$ 0 $lmcommon.configuration.configuration.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import requests [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import ( Any , List , Dict , Optional ) [EOL] import requests [EOL] import json [EOL] from lmcommon . container . container import ContainerOperations [EOL] from lmcommon . labbook import LabBook [EOL] [EOL] from natsort import natsorted [EOL] [EOL] from distutils . version import StrictVersion [EOL] from distutils . version import LooseVersion [EOL] [EOL] from lmcommon . environment . packagemanager import PackageManager , PackageResult [EOL] [EOL] [EOL] class PipPackageManager ( PackageManager ) : [EOL] [docstring] [EOL] [EOL] def search ( self , search_str , labbook , username ) : [EOL] [docstring] [EOL] search_result = ContainerOperations . run_command ( f' [string] { search_str }' , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] [EOL] lines = search_result . decode ( ) . splitlines ( ) [EOL] return [ x . split ( [string] ) [ [number] ] for x in lines ] [EOL] [EOL] def list_versions ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] url = f" [string] { package_name } [string] " [EOL] result = requests . get ( url ) [EOL] if result . status_code == [number] : [EOL] [comment] [EOL] raise ValueError ( [string] ) [EOL] if result . status_code != [number] : [EOL] raise IOError ( [string] ) [EOL] [EOL] versions = list ( result . json ( ) [ [string] ] . keys ( ) ) [EOL] [EOL] [comment] [EOL] versions = [ x for x in versions if [string] not in x ] [EOL] [EOL] try : [EOL] [comment] [EOL] versions . sort ( key = StrictVersion ) [EOL] except ValueError as e : [EOL] if [string] in str ( e ) : [EOL] try : [EOL] [comment] [EOL] versions . sort ( key = LooseVersion ) [EOL] except Exception : [EOL] [comment] [EOL] versions = natsorted ( versions , key = lambda x : x . replace ( [string] , [string] ) + [string] ) [EOL] else : [EOL] raise e [EOL] [EOL] versions . reverse ( ) [EOL] return versions [EOL] [EOL] def latest_version ( self , package_name , labbook , username ) : [EOL] [docstring] [EOL] versions = self . list_versions ( package_name , labbook , username ) [EOL] if versions : [EOL] return versions [ [number] ] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def latest_versions ( self , package_names , labbook , username ) : [EOL] [docstring] [EOL] return [ self . latest_version ( pkg , labbook , username ) for pkg in package_names ] [EOL] [EOL] def list_installed_packages ( self , labbook , username ) : [EOL] [docstring] [EOL] packages = ContainerOperations . run_command ( [string] , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] return json . loads ( packages . decode ( ) ) [EOL] [EOL] def list_available_updates ( self , labbook , username ) : [EOL] [docstring] [EOL] packages = ContainerOperations . run_command ( [string] , labbook , username , fallback_image = self . fallback_image ( labbook ) ) [EOL] return json . loads ( packages . decode ( ) ) [EOL] [EOL] def validate_packages ( self , package_list , labbook , username ) : [EOL] [docstring] [EOL] result = list ( ) [EOL] for package in package_list : [EOL] pkg_result = PackageResult ( package = package [ [string] ] , version = package [ [string] ] , error = True ) [EOL] [EOL] try : [EOL] version_list = self . list_versions ( package [ [string] ] , labbook , username ) [EOL] except ValueError : [EOL] result . append ( pkg_result ) [EOL] continue [EOL] [EOL] if not version_list : [EOL] [comment] [EOL] result . append ( pkg_result ) [EOL] else : [EOL] if package [ [string] ] : [EOL] if package [ [string] ] in version_list : [EOL] [comment] [EOL] pkg_result = pkg_result . _replace ( error = False ) [EOL] result . append ( pkg_result ) [EOL] [EOL] else : [EOL] [comment] [EOL] result . append ( pkg_result ) [EOL] [EOL] else : [EOL] [comment] [EOL] try : [EOL] pkg_result = pkg_result . _replace ( version = self . latest_version ( package [ [string] ] , labbook , username ) ) [EOL] pkg_result = pkg_result . _replace ( error = False ) [EOL] except ValueError : [EOL] [comment] [EOL] pass [EOL] finally : [EOL] result . append ( pkg_result ) [EOL] [EOL] return result [EOL] [EOL] def generate_docker_install_snippet ( self , packages , single_line = False ) : [EOL] [docstring] [EOL] package_strings = [ f"{ x [ [string] ] } [string] { x [ [string] ] }" for x in packages ] [EOL] [EOL] if single_line : [EOL] return [ f" [string] { [string] . join ( package_strings ) }" ] [EOL] else : [EOL] docker_strings = [ f" [string] { x }" for x in package_strings ] [EOL] return docker_strings [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.LabBook$ 0 $builtins.str$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $lmcommon.environment.packagemanager.PackageResult$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any , List [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import tempfile [EOL] import os [EOL] import uuid [EOL] import shutil [EOL] import pprint [EOL] import pickle [EOL] import yaml [EOL] [EOL] from lmcommon . environment import RepositoryManager , ComponentRepository [EOL] from lmcommon . fixtures import ( mock_config_file , mock_config_with_repo , setup_index , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV ) [EOL] [EOL] [EOL] class TestEnvironmentRepository ( object ) : [EOL] def test_get_list_index_base_image ( self , setup_index , mock_config_with_repo ) : [EOL] [docstring] [EOL] [EOL] repo = ComponentRepository ( mock_config_with_repo [ [number] ] ) [EOL] data = repo . get_component_list ( [string] ) [EOL] [EOL] assert type ( data ) == list [EOL] assert len ( data ) >= [number] [EOL] [EOL] assert any ( n . get ( [string] ) == ENV_UNIT_TEST_BASE for n in data ) [EOL] assert any ( n . get ( [string] ) == ENV_UNIT_TEST_REPO for n in data ) [EOL] [EOL] def test_get_component_index_base ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] repo = ComponentRepository ( mock_config_with_repo [ [number] ] ) [EOL] data = repo . get_component_versions ( [string] , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE ) [EOL] assert type ( data ) == list [EOL] assert len ( data ) >= [number] [EOL] assert data [ - [number] ] [ [number] ] [ [string] ] == ENV_UNIT_TEST_BASE [EOL] assert data [ - [number] ] [ [number] ] [ [string] ] == ENV_UNIT_TEST_REPO [EOL] [EOL] def test_get_component_version_base ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] repo = ComponentRepository ( mock_config_with_repo [ [number] ] ) [EOL] data = repo . get_component ( [string] , ENV_UNIT_TEST_REPO , ENV_UNIT_TEST_BASE , ENV_UNIT_TEST_REV ) [EOL] [EOL] assert type ( data ) == dict [EOL] assert data [ [string] ] == ENV_UNIT_TEST_BASE [EOL] assert data [ [string] ] == ENV_UNIT_TEST_REV [EOL] assert [string] in data [EOL] assert len ( data [ [string] ] ) == [number] [EOL] assert data [ [string] ] == ENV_UNIT_TEST_REPO [EOL] [EOL] def test_get_component_version_base_does_not_exist ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] repo = ComponentRepository ( mock_config_with_repo [ [number] ] ) [EOL] with pytest . raises ( ValueError ) : [EOL] repo . get_component ( [string] , [string] , [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] repo . get_component ( [string] , ENV_UNIT_TEST_REPO , [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] repo . get_component ( [string] , ENV_UNIT_TEST_REPO , [string] , [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] repo . get_component ( [string] , [string] , [string] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.repository.ComponentRepository$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Dict , Any , List , Optional [EOL] import lmcommon [EOL] import typing [EOL] import os [EOL] import pytest [EOL] [EOL] from lmcommon . fixtures . container import mock_config_with_repo , build_lb_image_for_env , build_lb_image_for_env_conda , REQUESTS_LATEST_VERSION [EOL] from lmcommon . environment . conda import Conda3PackageManager , Conda2PackageManager [EOL] [EOL] [EOL] skip_clause = os . environ . get ( [string] ) \ [EOL] and os . environ . get ( [string] ) not in [ [string] , [string] ] [EOL] skip_msg = [string] [EOL] [EOL] [EOL] class TestConda3PackageManager ( object ) : [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_search ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . search ( [string] , lb , username ) [EOL] assert type ( result ) == list [EOL] assert type ( result [ [number] ] ) == str [EOL] assert len ( result ) > [number] [EOL] assert [string] in result [EOL] result = mrg . search ( [string] , lb , username ) [EOL] assert type ( result ) == list [EOL] assert type ( result [ [number] ] ) == str [EOL] assert len ( result ) > [number] [EOL] assert [string] in result [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_search_no_wildcard ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . search ( [string] , lb , username ) [EOL] assert type ( result ) == list [EOL] assert type ( result [ [number] ] ) == str [EOL] assert len ( result ) > [number] [EOL] assert [string] in result [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_search_empty ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . search ( [string] , lb , username ) [EOL] assert type ( result ) == list [EOL] assert len ( result ) == [number] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_list_versions ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . list_versions ( [string] , lb , username ) [EOL] assert len ( result ) == [number] [EOL] assert result [ [number] ] == [string] [EOL] assert result [ [number] ] == [string] [EOL] [EOL] result = mrg . list_versions ( [string] , lb , username ) [EOL] assert len ( result ) > [number] [EOL] assert result [ [number] ] == [string] [EOL] assert result [ [number] ] == [string] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_latest_version ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] [EOL] [comment] [EOL] result = mrg . latest_version ( [string] , lb , username ) [EOL] assert result == REQUESTS_LATEST_VERSION [EOL] [EOL] [comment] [EOL] result = mrg . latest_version ( [string] , lb , username ) [EOL] assert result == [string] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_latest_versions ( self , build_lb_image_for_env_conda ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env_conda [ [number] ] [EOL] username = build_lb_image_for_env_conda [ [number] ] [EOL] pkgs = [ [string] , [string] , [string] ] [EOL] result = mrg . latest_versions ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] == [string] [comment] [EOL] assert result [ [number] ] == REQUESTS_LATEST_VERSION [comment] [EOL] assert result [ [number] ] == [string] [comment] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_latest_versions_bad_pkg ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] with pytest . raises ( ValueError ) : [EOL] mrg . latest_versions ( [ [string] , [string] ] , lb , username ) [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_list_installed_packages ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . list_installed_packages ( lb , username ) [EOL] [EOL] assert type ( result ) == list [EOL] assert len ( result ) >= [number] [EOL] assert type ( result [ [number] ] ) == dict [EOL] assert type ( result [ [number] ] [ [string] ] ) == str [EOL] assert type ( result [ [number] ] [ [string] ] ) == str [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_list_available_updates ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . list_available_updates ( lb , username ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert result == [ ] [EOL] [EOL] def test_generate_docker_install_snippet_single ( self ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] packages = [ { [string] : [string] , [string] : [string] } ] [EOL] [EOL] result = mrg . generate_docker_install_snippet ( packages ) [EOL] assert result == [ [string] ] [EOL] [EOL] result = mrg . generate_docker_install_snippet ( packages , single_line = True ) [EOL] assert result == [ [string] ] [EOL] [EOL] def test_generate_docker_install_snippet_multiple ( self ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] packages = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] [EOL] [EOL] result = mrg . generate_docker_install_snippet ( packages ) [EOL] assert result == [ [string] , [string] ] [EOL] [EOL] result = mrg . generate_docker_install_snippet ( packages , single_line = True ) [EOL] assert result == [ [string] ] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_list_versions_badpackage ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] with pytest . raises ( ValueError ) : [EOL] mrg . list_versions ( [string] , lb , username ) [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_is_valid_errors ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . validate_packages ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is True [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is True [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_is_valid_good ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] [EOL] mrg = Conda3PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . validate_packages ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] [EOL] class TestConda2PackageManager ( object ) : [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_latest_versions ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] mrg = Conda2PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] pkgs = [ [string] , [string] ] [EOL] result = mrg . latest_versions ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] == [string] [comment] [EOL] assert result [ [number] ] == [string] [comment] [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_is_valid_errors ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] [EOL] mrg = Conda2PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . validate_packages ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is True [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is True [EOL] [EOL] @ pytest . mark . skipif ( skip_clause , reason = skip_msg ) def test_is_valid_good ( self , build_lb_image_for_env ) : [EOL] [docstring] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] [EOL] mrg = Conda2PackageManager ( ) [EOL] lb = build_lb_image_for_env [ [number] ] [EOL] username = build_lb_image_for_env [ [number] ] [EOL] result = mrg . validate_packages ( pkgs , lb , username ) [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL] [EOL] assert result [ [number] ] . package == [string] [EOL] assert result [ [number] ] . version == [string] [EOL] assert result [ [number] ] . error is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 $lmcommon.environment.conda.Conda3PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 $lmcommon.environment.conda.Conda2PackageManager$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.environment.packagemanager.PackageResult]$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import yaml [EOL] import pprint [EOL] [EOL] from lmcommon . environment import ComponentManager , RepositoryManager [EOL] from lmcommon . fixtures import mock_config_file , mock_config_with_repo [EOL] from lmcommon . labbook import LabBook [EOL] import lmcommon . fixtures [EOL] [EOL] [EOL] class TestComponentManager ( object ) : [EOL] def test_initalize_labbook ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] pprint . pprint ( [ n [ [number] ] for n in os . walk ( labbook_dir ) ] ) [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is False [EOL] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] assert os . path . exists ( os . path . join ( labbook_dir , [string] , [string] , [string] ) ) is True [EOL] [EOL] def test_add_package ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] package_path = os . path . join ( lb . _root_dir , [string] , [string] , [string] ) [EOL] assert os . path . exists ( package_path ) [EOL] [EOL] [comment] [EOL] package_files = [ f for f in os . listdir ( package_path ) ] [EOL] package_files = [ p for p in package_files if p != [string] ] [EOL] assert len ( package_files ) == [number] [EOL] [EOL] [comment] [EOL] for file in package_files : [EOL] full_path = os . path . join ( package_path , file ) [EOL] with open ( full_path ) as package_yaml : [EOL] fields_dict = yaml . load ( package_yaml . read ( ) ) [EOL] for required_field in [ [string] , [string] , [string] , [string] ] : [EOL] assert required_field in fields_dict . keys ( ) [EOL] [EOL] [comment] [EOL] log = lb . git . log ( ) [EOL] print ( log ) [EOL] assert len ( log ) == [number] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] [EOL] def test_add_duplicate_package ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] [comment] [EOL] package_file = os . path . join ( labbook_dir , [string] , [string] , [string] , [string] ) [EOL] assert os . path . exists ( package_file ) is True [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] [comment] [EOL] cm . add_packages ( [string] , pkgs , force = True ) [EOL] assert os . path . exists ( package_file ) is True [EOL] [EOL] with open ( package_file , [string] ) as pf : [EOL] data = yaml . load ( pf ) [EOL] assert data [ [string] ] == [string] [EOL] [EOL] def test_add_component ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] [comment] [EOL] component_file = os . path . join ( labbook_dir , [string] , [string] , [string] , f"{ lmcommon . fixtures . ENV_UNIT_TEST_REPO } [string] " f"{ lmcommon . fixtures . ENV_UNIT_TEST_BASE } [string] " ) [EOL] assert os . path . exists ( component_file ) is True [EOL] with open ( component_file , [string] ) as cf : [EOL] data = yaml . load ( cf ) [EOL] [EOL] preinstalled_pkgs = os . listdir ( os . path . join ( labbook_dir , [string] ) ) [EOL] pkg_yaml_files = [ n for n in preinstalled_pkgs if [string] in n ] [EOL] assert len ( pkg_yaml_files ) == [number] [EOL] for p in pkg_yaml_files : [EOL] with open ( os . path . join ( labbook_dir , [string] , p ) ) as f : [EOL] assert [string] in f . read ( ) [EOL] [EOL] assert data [ [string] ] == lmcommon . fixtures . ENV_UNIT_TEST_BASE [EOL] assert data [ [string] ] == lmcommon . fixtures . ENV_UNIT_TEST_REV [EOL] [EOL] [comment] [EOL] log = lb . git . log ( ) [EOL] assert len ( log ) >= [number] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] [EOL] def test_add_duplicate_component ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] c = f"{ lmcommon . fixtures . ENV_UNIT_TEST_REPO } [string] { lmcommon . fixtures . ENV_UNIT_TEST_BASE } [string] " [EOL] [comment] [EOL] component_file = os . path . join ( labbook_dir , [string] , [string] , [string] , c ) [EOL] assert os . path . exists ( component_file ) is True [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV , force = True ) [EOL] assert os . path . exists ( component_file ) is True [EOL] [EOL] def test_get_component_list_base ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] bases = cm . get_component_list ( [string] ) [EOL] [EOL] assert len ( bases ) == [number] [EOL] assert bases [ [number] ] [ [string] ] == lmcommon . fixtures . ENV_UNIT_TEST_BASE [EOL] assert bases [ [number] ] [ [string] ] == lmcommon . fixtures . ENV_UNIT_TEST_REV [EOL] [EOL] def test_get_component_list_packages ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] packages = cm . get_component_list ( [string] ) [EOL] [EOL] assert len ( packages ) == [number] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] assert packages [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_get_component_list_custom ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , [string] , [number] ) [EOL] [EOL] custom_deps = cm . get_component_list ( [string] ) [EOL] [EOL] assert len ( custom_deps ) == [number] [EOL] assert custom_deps [ [number] ] [ [string] ] == [string] [EOL] assert custom_deps [ [number] ] [ [string] ] == [number] [EOL] [EOL] def test_remove_package_errors ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . remove_packages ( [string] , [ [string] ] ) [EOL] [EOL] [comment] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs , from_base = True ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . remove_packages ( [string] , [ [string] ] ) [EOL] [EOL] def test_remove_package ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs ) [EOL] [EOL] pkgs = [ { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] cm . add_packages ( [string] , pkgs , from_base = True ) [EOL] [EOL] package_path = os . path . join ( lb . _root_dir , [string] , [string] , [string] ) [EOL] assert os . path . exists ( package_path ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] [EOL] [comment] [EOL] cm . remove_packages ( [string] , [ [string] , [string] ] ) [EOL] cm . remove_packages ( [string] , [ [string] , [string] ] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . remove_packages ( [string] , [ [string] ] ) [EOL] [EOL] [comment] [EOL] assert not os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert not os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( package_path , [string] ) ) [EOL] [EOL] [comment] [EOL] status = lb . git . status ( ) [EOL] assert status [ [string] ] == [ ] [EOL] assert status [ [string] ] == [ ] [EOL] assert status [ [string] ] == [ ] [EOL] [EOL] [comment] [EOL] log = lb . git . log ( ) [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] [EOL] def test_remove_component_errors ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . remove_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , [string] ) [EOL] [EOL] def test_remove_component ( self , mock_config_with_repo ) : [EOL] [docstring] [EOL] [comment] [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] [EOL] labbook_dir = lb . new ( name = [string] , description = [string] , owner = { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE , lmcommon . fixtures . ENV_UNIT_TEST_REV ) [EOL] [EOL] component_filename = [string] . format ( lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE ) [EOL] component_path = os . path . join ( lb . _root_dir , [string] , [string] , [string] , component_filename ) [EOL] assert os . path . exists ( component_path ) [EOL] [EOL] [comment] [EOL] cm . remove_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , lmcommon . fixtures . ENV_UNIT_TEST_BASE ) [EOL] [EOL] [comment] [EOL] assert not os . path . exists ( component_path ) [EOL] [EOL] [comment] [EOL] status = lb . git . status ( ) [EOL] assert status [ [string] ] == [ ] [EOL] assert status [ [string] ] == [ ] [EOL] assert status [ [string] ] == [ ] [EOL] [EOL] [comment] [EOL] log = lb . git . log ( ) [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] assert [string] in log [ [number] ] [ [string] ] [EOL] [EOL] def test_misconfigured_base_no_base ( self , mock_config_with_repo ) : [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] a = cm . base_fields [EOL] [EOL] def test_misconfigured_base_two_bases ( self , mock_config_with_repo ) : [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , [string] , [number] ) [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , [string] , [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] a = cm . base_fields [EOL] [EOL] def test_get_base ( self , mock_config_with_repo ) : [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] [EOL] cm = ComponentManager ( lb ) [EOL] [EOL] [comment] [EOL] cm . add_component ( [string] , lmcommon . fixtures . ENV_UNIT_TEST_REPO , [string] , [number] ) [EOL] [EOL] base_data = cm . base_fields [EOL] [EOL] assert type ( base_data ) == dict [EOL] assert base_data [ [string] ] == [string] [EOL] assert base_data [ [string] ] == [string] [EOL] assert base_data [ [string] ] == [number] [EOL] [EOL] def test_add_then_remove_custom_docker_snipper_with_valid_docker ( self , mock_config_with_repo ) : [EOL] lb = LabBook ( mock_config_with_repo [ [number] ] ) [EOL] lb . new ( owner = { [string] : [string] } , name = [string] , description = [string] ) [EOL] snippet = [ [string] , [string] , [string] , [string] ] [EOL] c1 = lb . git . commit_hash [EOL] cm = ComponentManager ( lb ) [EOL] cm . add_docker_snippet ( [string] , docker_content = snippet , description = [string] ) [EOL] [comment] [EOL] c2 = lb . git . commit_hash [EOL] assert c1 != c2 [EOL] [EOL] import yaml [EOL] d = yaml . load ( open ( os . path . join ( lb . root_dir , [string] , [string] , [string] , [string] ) ) ) [EOL] print ( d ) [EOL] assert d [ [string] ] == [string] [EOL] assert d [ [string] ] == [string] [EOL] assert all ( [ d [ [string] ] [ i ] == snippet [ i ] for i in range ( len ( snippet ) ) ] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] cm . remove_docker_snippet ( [string] ) [EOL] [EOL] c1 = lb . git . commit_hash [EOL] cm . remove_docker_snippet ( [string] ) [EOL] c2 = lb . git . commit_hash [EOL] assert not os . path . exists ( os . path . join ( lb . root_dir , [string] , [string] , [string] , [string] ) ) [EOL] assert c1 != c2	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 $lmcommon.environment.componentmanager.ComponentManager$ 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.labbook.labbook.LabBook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , Optional [EOL] import redis [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from lmcommon . labbook import LabBook [EOL] from typing import Optional [EOL] import time [EOL] import redis [EOL] from docker . errors import NotFound [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . environment import ComponentManager [EOL] from lmcommon . gitlib . git import GitAuthor [EOL] from lmcommon . activity . monitors import DevEnvMonitorManager [EOL] [EOL] from lmcommon . dispatcher import Dispatcher , JobKey [EOL] from lmcommon . dispatcher . jobs import run_dev_env_monitor [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def start_labbook_monitor ( labbook , username , dev_tool , url , database = [number] , author = None ) : [EOL] [docstring] [EOL] [comment] [EOL] redis_conn = redis . Redis ( db = database ) [EOL] [EOL] [comment] [EOL] dev_env_monitors = redis_conn . keys ( [string] ) [EOL] [EOL] [comment] [EOL] docker_client = get_docker_client ( ) [EOL] for key in dev_env_monitors : [EOL] if [string] in key . decode ( ) : [EOL] [comment] [EOL] continue [EOL] [EOL] container_name = redis_conn . hget ( key , [string] ) [EOL] try : [EOL] docker_client . containers . get ( container_name . decode ( ) ) [EOL] except NotFound : [EOL] [comment] [EOL] logger . warn ( [string] . format ( key . decode ( ) ) ) [EOL] stop_dev_env_monitors ( key . decode ( ) , redis_conn , labbook . name ) [EOL] [EOL] [comment] [EOL] dev_env_mgr = DevEnvMonitorManager ( database = database ) [EOL] [EOL] if dev_env_mgr . is_available ( dev_tool ) : [EOL] [comment] [EOL] dev_env_monitor_key = [string] . format ( username , labbook . owner [ [string] ] , labbook . name , dev_tool ) [EOL] [EOL] [comment] [EOL] d = Dispatcher ( ) [EOL] kwargs = { [string] : dev_tool , [string] : dev_env_monitor_key } [EOL] job_key = d . schedule_task ( run_dev_env_monitor , kwargs = kwargs , repeat = None , interval = [number] ) [EOL] [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , infer_docker_image_name ( labbook . name , labbook . owner [ [string] ] , username ) ) [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , job_key . key_str ) [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , labbook . root_dir ) [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , url ) [EOL] [EOL] [comment] [EOL] if author : [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , author . name ) [EOL] redis_conn . hset ( dev_env_monitor_key , [string] , author . email ) [EOL] [EOL] logger . info ( [string] . format ( dev_tool , labbook . name ) ) [EOL] else : [EOL] raise ValueError ( f"{ dev_tool } [string] " ) [EOL] [EOL] [EOL] def stop_dev_env_monitors ( dev_env_key , redis_conn , labbook_name ) : [EOL] [docstring] [EOL] [comment] [EOL] d = Dispatcher ( ) [EOL] process_id = redis_conn . hget ( dev_env_key , [string] ) [EOL] if process_id : [EOL] logger . info ( [string] . format ( process_id ) ) [EOL] d . unschedule_task ( JobKey ( process_id . decode ( ) ) ) [EOL] [EOL] _ , dev_env_name = dev_env_key . rsplit ( [string] , [number] ) [EOL] logger . info ( [string] . format ( dev_env_name , labbook_name , process_id ) ) [EOL] [comment] [EOL] redis_conn . delete ( dev_env_key ) [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] activity_monitor_keys = redis_conn . keys ( [string] . format ( dev_env_key ) ) [EOL] [EOL] [comment] [EOL] for am in activity_monitor_keys : [EOL] [comment] [EOL] redis_conn . hset ( am . decode ( ) , [string] , False ) [EOL] logger . info ( [string] . format ( labbook_name ) ) [EOL] [EOL] [EOL] def stop_labbook_monitor ( labbook , username , database = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] redis_conn = redis . Redis ( db = database ) [EOL] [EOL] [comment] [EOL] cm = ComponentManager ( labbook ) [EOL] base_data = cm . base_fields [EOL] [EOL] for dt in base_data [ [string] ] : [EOL] dev_env_monitor_key = [string] . format ( username , labbook . owner [ [string] ] , labbook . name , dt ) [EOL] [EOL] stop_dev_env_monitors ( dev_env_monitor_key , redis_conn , labbook . name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Optional , List , Any , Tuple [EOL] import datetime [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import json [EOL] from enum import Enum [EOL] from typing import ( Any , List , Optional , Dict ) [EOL] import base64 [EOL] import blosc [EOL] import copy [EOL] import operator [EOL] import datetime [EOL] [EOL] from lmcommon . activity . serializers import Serializer [EOL] [EOL] [EOL] class ActivityType ( Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] NOTE = [number] [EOL] [comment] [EOL] ENVIRONMENT = [number] [EOL] [comment] [EOL] CODE = [number] [EOL] [comment] [EOL] INPUT_DATA = [number] [EOL] [comment] [EOL] OUTPUT_DATA = [number] [EOL] [comment] [EOL] MILESTONE = [number] [EOL] [comment] [EOL] BRANCH = [number] [EOL] [comment] [EOL] LABBOOK = [number] [EOL] [EOL] [EOL] class ActivityDetailType ( Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] NOTE = [number] [EOL] [comment] [EOL] LABBOOK = [number] [EOL] [comment] [EOL] INPUT_DATA = [number] [EOL] [comment] [EOL] CODE = [number] [EOL] [comment] [EOL] CODE_EXECUTED = [number] [EOL] [comment] [EOL] RESULT = [number] [EOL] [comment] [EOL] OUTPUT_DATA = [number] [EOL] [comment] [EOL] ENVIRONMENT = [number] [EOL] [EOL] [EOL] class ActivityAction ( Enum ) : [EOL] [docstring] [EOL] NOACTION = [number] [EOL] CREATE = [number] [EOL] EDIT = [number] [EOL] DELETE = [number] [EOL] EXECUTE = [number] [EOL] [EOL] [EOL] class ActivityDetailRecordEncoder ( json . JSONEncoder ) : [EOL] [docstring] [EOL] def default ( self , obj ) : [EOL] if isinstance ( obj , bytes ) : [EOL] return base64 . b64encode ( obj ) . decode ( [string] ) [EOL] [EOL] return json . JSONEncoder . default ( self , obj ) [EOL] [EOL] [EOL] class ActivityDetailRecord ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , detail_type , key = None , show = True , importance = [number] , action = ActivityAction . NOACTION ) : [EOL] [docstring] [EOL] [comment] [EOL] self . key = key [EOL] [EOL] [comment] [EOL] self . is_loaded = False [EOL] [EOL] [comment] [EOL] self . data = dict ( ) [EOL] [EOL] [comment] [EOL] self . type = detail_type [EOL] [EOL] [comment] [EOL] self . action = action [EOL] [EOL] [comment] [EOL] self . show = show [EOL] [EOL] [comment] [EOL] self . importance = importance [EOL] [EOL] [comment] [EOL] self . tags = [ ] [EOL] [EOL] @ property def log_str ( self ) : [EOL] [docstring] [EOL] if not self . key : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return [string] . format ( self . type . value , int ( self . show ) , self . importance , self . key , self . action . value ) [EOL] [EOL] @ staticmethod def from_log_str ( log_str ) : [EOL] [docstring] [EOL] try : [EOL] type_int , show_int , importance , key , action_int = log_str . split ( [string] ) [EOL] except ValueError : [EOL] [comment] [EOL] type_int , show_int , importance , key = log_str . split ( [string] ) [EOL] action_int = [string] [comment] [EOL] [EOL] return ActivityDetailRecord ( ActivityDetailType ( int ( type_int ) ) , show = bool ( int ( show_int ) ) , importance = int ( importance ) , key = key , action = ActivityAction ( int ( action_int ) ) ) [EOL] [EOL] def add_value ( self , mime_type , value ) : [EOL] [docstring] [EOL] if mime_type in self . data : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] self . data [ mime_type ] = value [EOL] [EOL] [comment] [EOL] self . is_loaded = True [EOL] [EOL] @ property def data_size ( self ) : [EOL] [docstring] [EOL] obj_size = [number] [EOL] for mime_type in self . data : [EOL] obj_size += len ( self . data [ mime_type ] ) [EOL] [EOL] return obj_size [EOL] [EOL] def to_dict ( self , compact = False ) : [EOL] [docstring] [EOL] if compact : [EOL] [comment] [EOL] return { [string] : self . type . value , [string] : self . importance , [string] : int ( self . show ) , [string] : copy . deepcopy ( self . data ) , [string] : self . tags , [string] : self . action . value } [EOL] else : [EOL] return { [string] : self . type . value , [string] : self . importance , [string] : self . show , [string] : self . data , [string] : self . tags , [string] : self . action . value } [EOL] [EOL] def to_bytes ( self , compress = True ) : [EOL] [docstring] [EOL] dict_data = self . to_dict ( compact = True ) [EOL] [EOL] [comment] [EOL] serializer_obj = Serializer ( ) [EOL] for mime_type in dict_data [ [string] ] : [EOL] dict_data [ [string] ] [ mime_type ] = serializer_obj . serialize ( mime_type , dict_data [ [string] ] [ mime_type ] ) [EOL] [EOL] [comment] [EOL] if compress : [EOL] if type ( dict_data [ [string] ] [ mime_type ] ) != bytes : [EOL] raise ValueError ( [string] ) [EOL] [EOL] dict_data [ [string] ] [ mime_type ] = blosc . compress ( dict_data [ [string] ] [ mime_type ] , typesize = [number] , cname = [string] , shuffle = blosc . SHUFFLE ) [EOL] [EOL] [comment] [EOL] return json . dumps ( dict_data , cls = ActivityDetailRecordEncoder , separators = ( [string] , [string] ) ) . encode ( [string] ) [EOL] [EOL] @ staticmethod def from_bytes ( byte_array , decompress = True ) : [EOL] [docstring] [EOL] serializer_obj = Serializer ( ) [EOL] [EOL] obj_dict = json . loads ( byte_array . decode ( [string] ) ) [EOL] [EOL] [comment] [EOL] for mime_type in obj_dict [ [string] ] : [EOL] obj_dict [ [string] ] [ mime_type ] = base64 . b64decode ( obj_dict [ [string] ] [ mime_type ] ) [EOL] [EOL] [comment] [EOL] if decompress : [EOL] obj_dict [ [string] ] [ mime_type ] = blosc . decompress ( obj_dict [ [string] ] [ mime_type ] ) [EOL] [EOL] [comment] [EOL] obj_dict [ [string] ] [ mime_type ] = serializer_obj . deserialize ( mime_type , obj_dict [ [string] ] [ mime_type ] ) [EOL] [EOL] [comment] [EOL] new_instance = ActivityDetailRecord ( detail_type = ActivityDetailType ( obj_dict [ [string] ] ) , show = bool ( obj_dict [ [string] ] ) , importance = obj_dict [ [string] ] ) [EOL] [EOL] [comment] [EOL] if [string] in obj_dict : [EOL] new_instance . tags = obj_dict [ [string] ] [EOL] [EOL] [comment] [EOL] if [string] in obj_dict : [EOL] new_instance . action = ActivityAction ( int ( obj_dict [ [string] ] ) ) [EOL] [EOL] new_instance . data = obj_dict [ [string] ] [EOL] new_instance . is_loaded = True [EOL] return new_instance [EOL] [EOL] def to_json ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] dict_data = self . to_dict ( ) [EOL] [EOL] [comment] [EOL] serializer_obj = Serializer ( ) [EOL] for mime_type in dict_data [ [string] ] : [EOL] dict_data [ [string] ] [ mime_type ] = serializer_obj . jsonify ( mime_type , dict_data [ [string] ] [ mime_type ] ) [EOL] [EOL] [comment] [EOL] return json . dumps ( dict_data , cls = ActivityDetailRecordEncoder , separators = ( [string] , [string] ) ) [EOL] [EOL] def jsonify_data ( self ) : [EOL] [docstring] [EOL] dict_data = dict ( ) [EOL] [EOL] [comment] [EOL] serializer_obj = Serializer ( ) [EOL] for mime_type in self . data : [EOL] dict_data [ mime_type ] = serializer_obj . jsonify ( mime_type , self . data [ mime_type ] ) [EOL] [EOL] [comment] [EOL] return dict_data [EOL] [EOL] [EOL] class ActivityRecord ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , activity_type , show = True , message = None , importance = None , tags = None , linked_commit = None , timestamp = None , username = None , email = None ) : [EOL] [docstring] [EOL] [comment] [EOL] self . commit = None [EOL] [EOL] [comment] [EOL] self . linked_commit = linked_commit [EOL] [EOL] [comment] [EOL] self . message = message [EOL] [EOL] [comment] [EOL] self . detail_objects = list ( ) [EOL] [EOL] [comment] [EOL] self . type = activity_type [EOL] [EOL] [comment] [EOL] self . show = show [EOL] [EOL] [comment] [EOL] self . importance = importance [EOL] [EOL] [comment] [EOL] self . timestamp = timestamp [EOL] [EOL] [comment] [EOL] self . tags = tags or [ ] [EOL] [EOL] [comment] [EOL] self . username = username [EOL] [EOL] [comment] [EOL] self . email = email [EOL] [EOL] @ staticmethod def from_log_str ( log_str , commit , timestamp , username = None , email = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if log_str [ [number] : [number] ] == [string] and log_str [ - [number] : ] == [string] : [EOL] lines = log_str . split ( [string] ) [EOL] message = lines [ [number] ] [ [number] : ] [EOL] metadata = json . loads ( lines [ [number] ] [ [number] : ] ) [EOL] [EOL] [comment] [EOL] activity_record = ActivityRecord ( ActivityType ( metadata [ [string] ] ) , message = message , show = metadata [ [string] ] , importance = metadata [ [string] ] , timestamp = timestamp , tags = metadata [ [string] ] , linked_commit = metadata [ [string] ] , username = username , email = email ) [EOL] if commit : [EOL] activity_record . commit = commit [EOL] [EOL] [comment] [EOL] for line in lines [ [number] : ] : [EOL] if line == [string] : [EOL] break [EOL] [EOL] [comment] [EOL] activity_record . add_detail_object ( ActivityDetailRecord . from_log_str ( line ) ) [EOL] [EOL] return activity_record [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] @ property def log_str ( self ) : [EOL] [docstring] [EOL] if self . message : [EOL] log_str = f" [string] { self . message } [string] " [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] meta = { [string] : self . show , [string] : self . importance or [number] , [string] : self . type . value , [string] : self . linked_commit , [string] : self . tags } [EOL] log_str = f"{ log_str } [string] { json . dumps ( meta , separators = ( [string] , [string] ) ) } [string] " [EOL] log_str = f"{ log_str } [string] " [EOL] if self . detail_objects : [EOL] for d in self . detail_objects : [EOL] log_str = f"{ log_str }{ d [ [number] ] . log_str } [string] " [EOL] [EOL] log_str = f"{ log_str } [string] " [EOL] [EOL] return log_str [EOL] [EOL] def _sort_detail_objects ( self ) : [EOL] [docstring] [EOL] self . detail_objects = sorted ( self . detail_objects , key = operator . itemgetter ( [number] , [number] , [number] ) , reverse = True ) [EOL] [EOL] def add_detail_object ( self , obj ) : [EOL] [docstring] [EOL] self . detail_objects . append ( ( obj . show , obj . type . value , obj . importance , obj ) ) [EOL] self . _sort_detail_objects ( ) [EOL] [EOL] def update_detail_object ( self , obj , index ) : [EOL] [docstring] [EOL] if index < [number] or index >= len ( self . detail_objects ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . detail_objects . insert ( index , ( obj . show , obj . type . value , obj . importance , obj ) ) [EOL] del self . detail_objects [ index + [number] ] [EOL] self . _sort_detail_objects ( ) [EOL]	builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 $ActivityDetailRecord$ 0 0 0 $ActivityDetailRecord$ 0 0 0 0 0 $ActivityDetailRecord$ 0 0 0 $ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $ActivityDetailRecord$ 0 0 0 $ActivityDetailRecord$ 0 0 0 0 0 $ActivityDetailRecord$ 0 0 0 $ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0
from lmcommon . activity . records import ActivityType , ActivityRecord , ActivityDetailRecord , ActivityDetailType , ActivityAction [EOL] from lmcommon . activity . store import ActivityStore [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lmcommon . activity . serializers . serializer import Serializer [EOL]	0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import io [EOL] import builtins [EOL] import typing [EOL] from lmcommon . activity . serializers . mime import MimeSerializer [EOL] from typing import Any [EOL] import base64 [EOL] from PIL import Image [EOL] import io [EOL] [EOL] [EOL] class Base64ImageSerializer ( MimeSerializer ) : [EOL] [docstring] [EOL] def __init__ ( self , mime_type ) : [EOL] if mime_type in [ [string] , [string] , [string] , [string] ] : [EOL] self . mime_type = mime_type [EOL] else : [EOL] raise ValueError ( f" [string] { mime_type }" ) [EOL] [EOL] def jsonify ( self , data ) : [EOL] [comment] [EOL] if data [ : [number] ] == [string] : [EOL] [comment] [EOL] return f" [string] { data }" [EOL] else : [EOL] return f" [string] { data }" [EOL] [EOL] def serialize ( self , data ) : [EOL] [comment] [EOL] data_bytes = base64 . b64decode ( data . encode ( [string] ) ) [EOL] [EOL] [comment] [EOL] image_obj = Image . open ( io . BytesIO ( data_bytes ) ) [EOL] [EOL] [comment] [EOL] image_obj . thumbnail ( ( [number] , [number] ) ) [EOL] [EOL] image_bytes = io . BytesIO ( ) [EOL] if image_obj . mode == [string] : [EOL] [comment] [EOL] image_obj . load ( ) [EOL] [EOL] rgb_img = Image . new ( [string] , image_obj . size , ( [number] , [number] , [number] ) ) [EOL] rgb_img . paste ( image_obj , mask = image_obj . split ( ) [ [number] ] ) [EOL] [EOL] [comment] [EOL] rgb_img . save ( image_bytes , format = [string] , quality = [number] , optimize = True ) [EOL] elif image_obj . mode != [string] : [EOL] [comment] [EOL] [comment] [EOL] image_obj . convert ( [string] ) . save ( image_bytes , format = [string] , quality = [number] , optimize = True ) [EOL] else : [EOL] [comment] [EOL] image_obj . save ( image_bytes , format = [string] , quality = [number] , optimize = True ) [EOL] [EOL] return image_bytes . getvalue ( ) [EOL] [EOL] def deserialize ( self , data ) : [EOL] [comment] [EOL] try : [EOL] decoded = data . decode ( [string] ) [EOL] [comment] [EOL] return decoded [EOL] except UnicodeDecodeError : [EOL] [comment] [EOL] return base64 . b64encode ( data ) . decode ( [string] ) [EOL] [EOL] [EOL] class GifImageSerializer ( MimeSerializer ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] self . mime_type = [string] [EOL] [EOL] def jsonify ( self , data ) : [EOL] [comment] [EOL] return f" [string] { data }" [EOL] [EOL] def serialize ( self , data ) : [EOL] [comment] [EOL] return data . encode ( [string] ) [EOL] [EOL] def deserialize ( self , data ) : [EOL] [comment] [EOL] return data . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import ( Any , Dict , List ) [EOL] [EOL] from lmcommon . activity . processors . processor import ActivityProcessor , ExecutionData [EOL] from lmcommon . activity import ActivityRecord , ActivityDetailType [EOL] [EOL] [EOL] class ActivityShowBasicProcessor ( ActivityProcessor ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] result_obj . show = False [EOL] for detail in result_obj . detail_objects : [EOL] if detail [ [number] ] : [EOL] result_obj . show = True [EOL] break [EOL] [EOL] return result_obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] import abc [EOL] from typing import ( Any , Dict , List ) [EOL] [EOL] from lmcommon . activity import ActivityRecord [EOL] [EOL] [EOL] class ExecutionData ( object ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] self . code = list ( ) [EOL] [EOL] [comment] [EOL] self . result = list ( ) [EOL] [EOL] [comment] [EOL] self . tags = list ( ) [EOL] [EOL] [comment] [EOL] self . cell_error = False [EOL] [EOL] def is_empty ( self ) : [EOL] [docstring] [EOL] if len ( self . code ) == [number] and len ( self . result ) == [number] and len ( self . tags ) == [number] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class ActivityProcessor ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] raise NotImplemented [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.ActivityRecord$ 0 0 0 $lmcommon.activity.ActivityRecord$ 0 $typing.List[ExecutionData]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List , Optional [EOL] import builtins [EOL] import lmcommon [EOL] import typing [EOL] from typing import ( Any , Dict , List ) [EOL] [EOL] from lmcommon . logging import LMLogger [EOL] from lmcommon . activity . processors . processor import ActivityProcessor , ExecutionData [EOL] from lmcommon . activity import ActivityRecord , ActivityDetailType , ActivityDetailRecord , ActivityAction [EOL] from lmcommon . labbook import LabBook [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class JupyterLabCodeProcessor ( ActivityProcessor ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] [comment] [EOL] result_cnt = [number] [EOL] for cell_cnt , cell in enumerate ( data ) : [EOL] for result_entry in reversed ( cell . code ) : [EOL] if result_entry . get ( [string] ) : [EOL] [comment] [EOL] adr_code = ActivityDetailRecord ( ActivityDetailType . CODE_EXECUTED , show = False , action = ActivityAction . EXECUTE , importance = max ( [number] - result_cnt , [number] ) ) [EOL] [EOL] adr_code . add_value ( [string] , f" [string] { result_entry . get ( [string] ) } [string] " ) [EOL] adr_code . tags = cell . tags [EOL] [EOL] result_obj . add_detail_object ( adr_code ) [EOL] [EOL] result_cnt += [number] [EOL] [EOL] [comment] [EOL] cell_str = f"{ cell_cnt } [string] " if cell_cnt > [number] else [string] [EOL] result_obj . message = f" [string] { cell_str } [string] { metadata [ [string] ] }" [EOL] [EOL] return result_obj [EOL] [EOL] [EOL] class JupyterLabFileChangeProcessor ( ActivityProcessor ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] for cnt , filename in enumerate ( status [ [string] ] ) : [EOL] [comment] [EOL] if [string] in filename or [string] in filename : [EOL] continue [EOL] [EOL] activity_type , activity_detail_type , section = LabBook . infer_section_from_relative_path ( filename ) [EOL] [EOL] adr = ActivityDetailRecord ( activity_detail_type , show = False , importance = max ( [number] - cnt , [number] ) , action = ActivityAction . CREATE ) [EOL] if section == [string] : [EOL] msg = f" [string] { filename } [string] " [EOL] msg = f"{ msg } [string] " [EOL] else : [EOL] msg = f" [string] { section } [string] { filename } [string] " [EOL] adr . add_value ( [string] , msg ) [EOL] result_obj . add_detail_object ( adr ) [EOL] [EOL] cnt = [number] [EOL] for filename , change in status [ [string] ] : [EOL] [comment] [EOL] if [string] in filename or [string] in filename : [EOL] continue [EOL] [EOL] activity_type , activity_detail_type , section = LabBook . infer_section_from_relative_path ( filename ) [EOL] [EOL] if change == [string] : [EOL] action = ActivityAction . DELETE [EOL] elif change == [string] : [EOL] action = ActivityAction . CREATE [EOL] elif change == [string] : [EOL] action = ActivityAction . EDIT [EOL] elif change == [string] : [EOL] action = ActivityAction . EDIT [EOL] else : [EOL] action = ActivityAction . NOACTION [EOL] [EOL] adr = ActivityDetailRecord ( activity_detail_type , show = False , importance = max ( [number] - cnt , [number] ) , action = action ) [EOL] adr . add_value ( [string] , f"{ change [ [number] ] . upper ( ) + change [ [number] : ] } [string] { section } [string] { filename } [string] " ) [EOL] result_obj . add_detail_object ( adr ) [EOL] cnt += [number] [EOL] [EOL] return result_obj [EOL] [EOL] [EOL] class JupyterLabPlaintextProcessor ( ActivityProcessor ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] [comment] [EOL] truncate_at = [number] * [number] [EOL] max_show_len = [number] [EOL] [EOL] result_cnt = [number] [EOL] for cell in data : [EOL] for result_entry in reversed ( cell . result ) : [EOL] if [string] in result_entry : [EOL] if [string] in result_entry [ [string] ] : [EOL] if result_entry [ [string] ] [ [string] ] == [string] : [EOL] [comment] [EOL] continue [EOL] [EOL] if [string] in result_entry : [EOL] if [string] in result_entry [ [string] ] : [EOL] text_data = result_entry [ [string] ] [ [string] ] [EOL] [EOL] if len ( text_data ) > [number] : [EOL] adr = ActivityDetailRecord ( ActivityDetailType . RESULT , show = True if len ( text_data ) < max_show_len else False , action = ActivityAction . CREATE , importance = max ( [number] - result_cnt - [number] , [number] ) ) [EOL] [EOL] if len ( text_data ) <= truncate_at : [EOL] adr . add_value ( [string] , text_data ) [EOL] else : [EOL] adr . add_value ( [string] , text_data [ : truncate_at ] + [string] ) [EOL] [EOL] [comment] [EOL] adr . tags = cell . tags [EOL] result_obj . add_detail_object ( adr ) [EOL] [EOL] result_cnt += [number] [EOL] [EOL] return result_obj [EOL] [EOL] [EOL] class JupyterLabImageExtractorProcessor ( ActivityProcessor ) : [EOL] [docstring] [EOL] [EOL] def process ( self , result_obj , data , status , metadata ) : [EOL] [docstring] [EOL] supported_image_types = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] result_cnt = [number] [EOL] for cell in data : [EOL] for result_entry in reversed ( cell . result ) : [EOL] if [string] in result_entry : [EOL] for mime_type in result_entry [ [string] ] : [EOL] if mime_type in supported_image_types : [EOL] [comment] [EOL] adr_img = ActivityDetailRecord ( ActivityDetailType . RESULT , show = True , action = ActivityAction . CREATE , importance = max ( [number] - result_cnt , [number] ) ) [EOL] [EOL] adr_img . add_value ( mime_type , result_entry [ [string] ] [ mime_type ] ) [EOL] [EOL] adr_img . tags = cell . tags [EOL] result_obj . add_detail_object ( adr_img ) [EOL] [EOL] [comment] [EOL] result_obj . message = [string] . format ( metadata [ [string] ] ) [EOL] [EOL] result_cnt += [number] [EOL] [EOL] return result_obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List , Optional [EOL] import lmcommon [EOL] import typing [EOL] import redis [EOL] import builtins [EOL] import requests [EOL] import os [EOL] import queue [EOL] import json [EOL] from typing import ( Any , Dict , List , Optional ) [EOL] import time [EOL] [EOL] import jupyter_client [EOL] import redis [EOL] import requests [EOL] [EOL] from lmcommon . activity . processors . processor import ExecutionData [EOL] from lmcommon . configuration import get_docker_client [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] from lmcommon . activity . monitors . devenv import DevEnvMonitor [EOL] from lmcommon . activity . monitors . activity import ActivityMonitor [EOL] from lmcommon . activity . processors . jupyterlab import JupyterLabCodeProcessor , JupyterLabFileChangeProcessor , JupyterLabPlaintextProcessor , JupyterLabImageExtractorProcessor [EOL] from lmcommon . activity . processors . core import ActivityShowBasicProcessor [EOL] from lmcommon . activity import ActivityType [EOL] from lmcommon . dispatcher import Dispatcher , jobs [EOL] from lmcommon . logging import LMLogger [EOL] [EOL] logger = LMLogger . get_logger ( ) [EOL] [EOL] [EOL] class JupyterLabMonitor ( DevEnvMonitor ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def get_dev_env_name ( ) : [EOL] [docstring] [EOL] return [ [string] ] [EOL] [EOL] @ staticmethod def get_container_ip ( container_name ) : [EOL] [docstring] [EOL] client = get_docker_client ( ) [EOL] container = client . containers . get ( container_name ) [EOL] return container . attrs [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] @ staticmethod def get_sessions ( key , redis_conn ) : [EOL] [docstring] [EOL] [EOL] _ , username , owner , labbook_name , _ = key . split ( [string] ) [EOL] lb_key = infer_docker_image_name ( labbook_name , owner , username ) [EOL] token = redis_conn . get ( f"{ lb_key } [string] " ) . decode ( ) [EOL] url = redis_conn . hget ( key , [string] ) . decode ( ) [EOL] [EOL] [comment] [EOL] path = f'{ url } [string] { token }' [EOL] r = requests . get ( path ) [EOL] if r . status_code != [number] : [EOL] raise IOError ( f" [string] { path }" ) [EOL] sessions = r . json ( ) [EOL] [EOL] data = { } [EOL] for session in sessions : [EOL] data [ session [ [string] ] [ [string] ] ] = { [string] : session [ [string] ] [ [string] ] , [string] : session [ [string] ] [ [string] ] , [string] : session [ [string] ] , [string] : session [ [string] ] } [EOL] return data [EOL] [EOL] def run ( self , key , database = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] if not os . path . exists ( os . environ [ [string] ] ) : [EOL] os . makedirs ( os . environ [ [string] ] ) [EOL] logger . info ( [string] . format ( os . environ [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] redis_conn = redis . Redis ( db = database ) [EOL] activity_monitors = redis_conn . keys ( [string] . format ( key ) ) [EOL] activity_monitors = [ x . decode ( [string] ) for x in activity_monitors ] [EOL] [EOL] [comment] [EOL] author_name = redis_conn . hget ( key , [string] ) . decode ( ) [EOL] author_email = redis_conn . hget ( key , [string] ) . decode ( ) [EOL] [EOL] [comment] [EOL] sessions = self . get_sessions ( key , redis_conn ) [EOL] [EOL] [comment] [EOL] for am in activity_monitors : [EOL] kernel_id = redis_conn . hget ( am , [string] ) . decode ( ) [EOL] if kernel_id not in sessions : [EOL] logger . info ( [string] . format ( kernel_id ) ) [EOL] [comment] [EOL] redis_conn . hset ( am , [string] , False ) [EOL] [EOL] [comment] [EOL] for s in sessions : [EOL] if sessions [ s ] [ [string] ] == [string] : [EOL] [comment] [EOL] activity_monitor_key = [string] . format ( key , sessions [ s ] [ [string] ] ) [EOL] if activity_monitor_key not in activity_monitors : [EOL] logger . info ( [string] . format ( sessions [ s ] [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] _ , user , owner , labbook_name , dev_env_name = key . split ( [string] ) [EOL] [EOL] args = { [string] : [string] , [string] : [string] , [string] : user , [string] : owner , [string] : labbook_name , [string] : activity_monitor_key , [string] : author_name , [string] : author_email , [string] : sessions [ s ] } [EOL] d = Dispatcher ( ) [EOL] process_id = d . dispatch_task ( jobs . start_and_run_activity_monitor , kwargs = args , persist = True ) [EOL] logger . info ( [string] . format ( process_id ) ) [EOL] [EOL] [comment] [EOL] redis_conn . hset ( activity_monitor_key , [string] , key ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , process_id ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , sessions [ s ] [ [string] ] ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , sessions [ s ] [ [string] ] ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , sessions [ s ] [ [string] ] ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , sessions [ s ] [ [string] ] ) [EOL] redis_conn . hset ( activity_monitor_key , [string] , True ) [EOL] [EOL] [EOL] class JupyterLabNotebookMonitor ( ActivityMonitor ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , user , owner , labbook_name , monitor_key , config_file = None , author_name = None , author_email = None ) : [EOL] [docstring] [EOL] [comment] [EOL] ActivityMonitor . __init__ ( self , user , owner , labbook_name , monitor_key , config_file , author_name = author_name , author_email = author_email ) [EOL] [EOL] [comment] [EOL] self . register_processors ( ) [EOL] [EOL] [comment] [EOL] self . kernel_status = [string] [EOL] self . current_cell = ExecutionData ( ) [EOL] self . cell_data = list ( ) [EOL] self . execution_count = [number] [EOL] [EOL] def register_processors ( self ) : [EOL] [docstring] [EOL] self . add_processor ( JupyterLabCodeProcessor ( ) ) [EOL] self . add_processor ( JupyterLabFileChangeProcessor ( ) ) [EOL] self . add_processor ( JupyterLabPlaintextProcessor ( ) ) [EOL] self . add_processor ( JupyterLabImageExtractorProcessor ( ) ) [EOL] self . add_processor ( ActivityShowBasicProcessor ( ) ) [EOL] [EOL] def handle_message ( self , msg ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] if msg [ [string] ] == [string] : [EOL] [comment] [EOL] if self . kernel_status == [string] and msg [ [string] ] [ [string] ] == [string] : [EOL] self . set_busy_state ( False ) [EOL] [EOL] if self . current_cell . cell_error is False and self . current_cell . is_empty ( ) is False : [EOL] [comment] [EOL] [comment] [EOL] self . cell_data . append ( self . current_cell ) [EOL] [EOL] [comment] [EOL] self . current_cell = ExecutionData ( ) [EOL] [EOL] [comment] [EOL] self . can_store_activity_record = True [EOL] [EOL] elif self . kernel_status == [string] and msg [ [string] ] [ [string] ] == [string] : [EOL] [comment] [EOL] self . set_busy_state ( True ) [EOL] self . can_store_activity_record = False [EOL] [EOL] [comment] [EOL] self . kernel_status = msg [ [string] ] [ [string] ] [EOL] [EOL] elif msg [ [string] ] == [string] : [EOL] [comment] [EOL] self . current_cell . code . append ( { [string] : msg [ [string] ] [ [string] ] } ) [EOL] self . execution_count = msg [ [string] ] [ [string] ] [EOL] self . current_cell . tags . append ( f" [string] { msg [ [string] ] [ [string] ] }" ) [EOL] [EOL] elif msg [ [string] ] == [string] : [EOL] [comment] [EOL] if self . execution_count != msg [ [string] ] [ [string] ] : [EOL] logger . error ( [string] . format ( self . execution_count , msg [ [string] ] [ [string] ] ) ) [EOL] [EOL] self . current_cell . result . append ( { [string] : msg [ [string] ] [ [string] ] , [string] : msg [ [string] ] [ [string] ] } ) [EOL] [EOL] elif msg [ [string] ] == [string] : [EOL] [comment] [EOL] self . current_cell . result . append ( { [string] : { [string] : msg [ [string] ] [ [string] ] } , [string] : { [string] : [string] } } ) [EOL] [EOL] elif msg [ [string] ] == [string] : [EOL] [comment] [EOL] self . current_cell . result . append ( { [string] : msg [ [string] ] [ [string] ] , [string] : { [string] : [string] } } ) [EOL] [EOL] elif msg [ [string] ] == [string] : [EOL] [comment] [EOL] self . current_cell . cell_error = True [EOL] [EOL] else : [EOL] logger . info ( [string] . format ( msg [ [string] ] ) ) [EOL] [EOL] def store_record ( self , metadata ) : [EOL] [docstring] [EOL] if len ( self . cell_data ) > [number] : [EOL] t_start = time . time ( ) [EOL] [EOL] [comment] [EOL] activity_record = self . process ( ActivityType . CODE , list ( reversed ( self . cell_data ) ) , { [string] : metadata [ [string] ] } ) [EOL] [EOL] [comment] [EOL] commit = self . commit_labbook ( ) [EOL] [EOL] [comment] [EOL] activity_commit = self . store_activity_record ( commit , activity_record ) [EOL] [EOL] logger . info ( f" [string] { activity_commit } [string] { time . time ( ) - t_start } [string] " ) [EOL] [EOL] [comment] [EOL] self . can_store_activity_record = False [EOL] self . cell_data = list ( ) [EOL] self . current_cell = ExecutionData ( ) [EOL] [EOL] def start ( self , metadata , database = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] cf = jupyter_client . find_connection_file ( metadata [ [string] ] , path = os . environ [ [string] ] ) [EOL] km = jupyter_client . BlockingKernelClient ( ) [EOL] [EOL] with open ( cf , [string] ) as cf_file : [EOL] cf_data = json . load ( cf_file ) [EOL] [EOL] [comment] [EOL] container_ip = self . get_container_ip ( ) [EOL] [EOL] if not container_ip : [EOL] raise ValueError ( [string] ) [EOL] cf_data [ [string] ] = container_ip [EOL] [EOL] km . load_connection_info ( cf_data ) [EOL] [EOL] [comment] [EOL] redis_conn = redis . Redis ( db = database ) [EOL] [EOL] try : [EOL] while True : [EOL] try : [EOL] [comment] [EOL] msg = km . get_iopub_msg ( timeout = [number] ) [EOL] self . handle_message ( msg ) [EOL] [EOL] except queue . Empty : [EOL] [comment] [EOL] if self . can_store_activity_record is True : [EOL] self . store_record ( metadata ) [EOL] [EOL] [comment] [EOL] if redis_conn . hget ( self . monitor_key , [string] ) . decode ( ) == [string] : [EOL] logger . info ( [string] . format ( metadata [ [string] ] ) ) [EOL] break [EOL] [EOL] except Exception as err : [EOL] logger . error ( [string] . format ( err ) ) [EOL] finally : [EOL] [comment] [EOL] [comment] [EOL] redis_conn . delete ( self . monitor_key ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $lmcommon.dispatcher.dispatcher.Dispatcher$ 0 0 0 0 0 $lmcommon.dispatcher.dispatcher.JobKey$ 0 $lmcommon.dispatcher.dispatcher.Dispatcher$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.dispatcher.dispatcher.JobKey$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $lmcommon.dispatcher.dispatcher.JobKey$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 $typing.List[lmcommon.activity.processors.processor.ExecutionData]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.activity.processors.processor.ExecutionData]$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[lmcommon.activity.processors.processor.ExecutionData]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.List[lmcommon.activity.processors.processor.ExecutionData]$ 0 0 0 0 0 0 0 $lmcommon.activity.processors.processor.ExecutionData$ 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from lmcommon . activity . monitors . devenv import DevEnvMonitorManager [EOL]	0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List , Optional [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import os [EOL] import random [EOL] from datetime import datetime , timedelta , timezone [EOL] [EOL] from lmcommon . labbook import LabBook [EOL] from lmcommon . activity . records import ActivityType , ActivityRecord , ActivityDetailRecord , ActivityDetailType , ActivityAction [EOL] from lmcommon . activity import ActivityStore [EOL] from lmcommon . fixtures import mock_config_with_activitystore [EOL] [EOL] [EOL] def helper_create_labbook_change ( labbook , cnt = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] new_filename = os . path . join ( labbook . root_dir , [string] . join ( random . choice ( [string] ) for i in range ( [number] ) ) ) [EOL] with open ( new_filename , [string] ) as f : [EOL] f . write ( [string] . join ( random . choice ( [string] ) for i in range ( [number] ) ) ) [EOL] [EOL] [comment] [EOL] labbook . git . add_all ( ) [EOL] return labbook . git . commit ( [string] . format ( cnt ) ) [EOL] [EOL] [EOL] def helper_create_activitydetailobject ( ) : [EOL] [docstring] [EOL] adr = ActivityDetailRecord ( ActivityDetailType ( random . randint ( [number] , [number] ) ) , key = f" [string] { random . randint ( [number] , [number] ) }" ) [EOL] adr . add_value ( [string] , [string] . join ( random . choice ( [string] ) for _ in range ( [number] ) ) ) [EOL] [EOL] [EOL] class TestActivityStore : [EOL] def test_create_activitystore ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] assert type ( mock_config_with_activitystore [ [number] ] ) == ActivityStore [EOL] assert type ( mock_config_with_activitystore [ [number] ] . labbook ) == LabBook [EOL] [EOL] assert mock_config_with_activitystore [ [number] ] . compress_details is True [EOL] assert mock_config_with_activitystore [ [number] ] . compress_min_bytes == [number] [EOL] [EOL] def test_validate_tags_length ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] max_length_tag = [ [string] . join ( random . choice ( [string] ) for i in range ( mock_config_with_activitystore [ [number] ] . max_tag_length ) ) ] [EOL] too_big_tag = [ [string] . join ( random . choice ( [string] ) for i in range ( mock_config_with_activitystore [ [number] ] . max_tag_length + [number] ) ) ] [EOL] [EOL] assert max_length_tag == mock_config_with_activitystore [ [number] ] . _validate_tags ( max_length_tag ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_config_with_activitystore [ [number] ] . _validate_tags ( too_big_tag ) [EOL] [EOL] def test_validate_tags_num ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] max_num_tag = [ [string] . format ( x ) for x in range ( mock_config_with_activitystore [ [number] ] . max_num_tags ) ] [EOL] too_many_tag = [ [string] . format ( x ) for x in range ( mock_config_with_activitystore [ [number] ] . max_num_tags + [number] ) ] [EOL] [EOL] assert len ( max_num_tag ) == len ( mock_config_with_activitystore [ [number] ] . _validate_tags ( max_num_tag ) ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_config_with_activitystore [ [number] ] . _validate_tags ( too_many_tag ) [EOL] [EOL] def test_validate_tags_cleanup ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] tags = [ [string] , [string] , [string] , [string] , [string] ] [EOL] clean_tags = mock_config_with_activitystore [ [number] ] . _validate_tags ( tags ) [EOL] assert len ( clean_tags ) == [number] [EOL] assert [string] not in clean_tags [EOL] assert [string] in clean_tags [EOL] assert [string] in clean_tags [EOL] assert [string] in clean_tags [EOL] assert [string] in clean_tags [EOL] [EOL] def test_write_options ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] store = mock_config_with_activitystore [ [number] ] [EOL] [EOL] wo = store . _encode_write_options ( compress = True ) [EOL] assert type ( wo ) == bytes [EOL] assert wo == [string] [EOL] [EOL] wo_decoded = store . _decode_write_options ( wo ) [EOL] assert wo_decoded [ [string] ] is True [EOL] [EOL] wo = store . _encode_write_options ( compress = False ) [EOL] assert wo == [string] [EOL] [EOL] wo_decoded = store . _decode_write_options ( wo ) [EOL] assert wo_decoded [ [string] ] is False [EOL] [EOL] def test_put_get_detail_record ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] [comment] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] ) [EOL] [EOL] adr2 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr2 . show = True [EOL] adr2 . importance = [number] [EOL] adr2 . add_value ( [string] , [string] ) [EOL] [EOL] adr1 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr1 ) [EOL] adr2 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr2 ) [EOL] [EOL] assert adr1 . key is not None [EOL] assert adr2 . key is not None [EOL] assert type ( adr1 . key ) == str [EOL] assert type ( adr2 . key ) == str [EOL] [EOL] [comment] [EOL] adr1_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr1 . key ) [EOL] adr2_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr2 . key ) [EOL] [EOL] assert adr1 . key == adr1_loaded . key [EOL] assert adr1 . importance == adr1_loaded . importance [EOL] assert adr1 . type == adr1_loaded . type [EOL] assert adr1 . is_loaded == adr1_loaded . is_loaded is True [EOL] assert adr1 . data == adr1_loaded . data [EOL] [EOL] assert adr2 . key == adr2_loaded . key [EOL] assert adr2 . importance == adr2_loaded . importance [EOL] assert adr2 . type == adr2_loaded . type [EOL] assert adr2 . is_loaded == adr2_loaded . is_loaded is True [EOL] assert adr2 . data == adr2_loaded . data [EOL] [EOL] def test_put_get_detail_record_with_tags ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] [comment] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE , action = ActivityAction . CREATE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] ) [EOL] adr1 . tags = [ [string] ] [EOL] [EOL] adr2 = ActivityDetailRecord ( ActivityDetailType . CODE_EXECUTED , action = ActivityAction . EXECUTE ) [EOL] adr2 . show = True [EOL] adr2 . importance = [number] [EOL] adr2 . add_value ( [string] , [string] ) [EOL] adr2 . tags = [ [string] , [string] ] [EOL] [EOL] adr1 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr1 ) [EOL] adr2 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr2 ) [EOL] [EOL] assert adr1 . key is not None [EOL] assert adr2 . key is not None [EOL] assert type ( adr1 . key ) == str [EOL] assert type ( adr2 . key ) == str [EOL] [EOL] [comment] [EOL] adr1_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr1 . key ) [EOL] adr2_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr2 . key ) [EOL] [EOL] assert adr1 . key == adr1_loaded . key [EOL] assert adr1 . importance == adr1_loaded . importance [EOL] assert adr1 . type == adr1_loaded . type [EOL] assert adr1 . is_loaded == adr1_loaded . is_loaded is True [EOL] assert adr1 . data == adr1_loaded . data [EOL] assert adr1 . tags == adr1_loaded . tags [EOL] assert adr1 . action == adr1_loaded . action == ActivityAction . CREATE [EOL] [EOL] assert adr2 . key == adr2_loaded . key [EOL] assert adr2 . importance == adr2_loaded . importance [EOL] assert adr2 . type == adr2_loaded . type [EOL] assert adr2 . is_loaded == adr2_loaded . is_loaded is True [EOL] assert adr2 . data == adr2_loaded . data [EOL] assert adr2 . tags == adr2_loaded . tags [EOL] assert adr2 . action == adr2_loaded . action == ActivityAction . EXECUTE [EOL] [EOL] def test_put_get_detail_record_with_compression ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] [comment] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] * [number] ) [EOL] [EOL] adr2 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr2 . show = True [EOL] adr2 . importance = [number] [EOL] adr2 . add_value ( [string] , [string] * [number] ) [EOL] [EOL] adr1 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr1 ) [EOL] adr2 = mock_config_with_activitystore [ [number] ] . put_detail_record ( adr2 ) [EOL] [EOL] assert adr1 . key is not None [EOL] assert adr2 . key is not None [EOL] assert type ( adr1 . key ) == str [EOL] assert type ( adr2 . key ) == str [EOL] [EOL] [comment] [EOL] adr1_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr1 . key ) [EOL] adr2_loaded = mock_config_with_activitystore [ [number] ] . get_detail_record ( adr2 . key ) [EOL] [EOL] assert adr1 . key == adr1_loaded . key [EOL] assert adr1 . importance == adr1_loaded . importance [EOL] assert adr1 . type == adr1_loaded . type [EOL] assert adr1 . is_loaded == adr1_loaded . is_loaded is True [EOL] assert adr1 . data == adr1_loaded . data [EOL] [EOL] assert adr2 . key == adr2_loaded . key [EOL] assert adr2 . importance == adr2_loaded . importance [EOL] assert adr2 . type == adr2_loaded . type [EOL] assert adr2 . is_loaded == adr2_loaded . is_loaded is True [EOL] assert adr2 . data == adr2_loaded . data [EOL] [EOL] def test_put_get_activity_record ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] * [number] ) [EOL] adr1 . tags = [ [string] , [string] ] [EOL] [EOL] adr2 = ActivityDetailRecord ( ActivityDetailType . RESULT ) [EOL] adr2 . show = False [EOL] adr2 . importance = [number] [EOL] adr2 . add_value ( [string] , [string] ) [EOL] adr2 . tags = [ [string] , [string] ] [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] ar . add_detail_object ( adr1 ) [EOL] ar . add_detail_object ( adr2 ) [EOL] [EOL] assert ar . commit is None [EOL] [EOL] [comment] [EOL] ar_written = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] assert ar . commit is not None [EOL] assert ar . username == [string] [EOL] assert ar . email == [string] [EOL] [EOL] [comment] [EOL] stored_ar = mock_config_with_activitystore [ [number] ] . get_activity_record ( ar_written . commit ) [EOL] [EOL] assert ar . commit == stored_ar . commit [EOL] assert ar . importance == stored_ar . importance [EOL] assert ar . linked_commit == stored_ar . linked_commit [EOL] assert ar . log_str == stored_ar . log_str [EOL] assert ar . message == stored_ar . message [EOL] assert ar . show == stored_ar . show [EOL] assert ar . tags == stored_ar . tags [EOL] assert ar . type == stored_ar . type [EOL] assert len ( ar . detail_objects ) == len ( stored_ar . detail_objects ) [EOL] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . is_loaded is True [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . is_loaded is True [EOL] [EOL] assert stored_ar . detail_objects [ [number] ] [ [number] ] . is_loaded is False [EOL] assert stored_ar . detail_objects [ [number] ] [ [number] ] . is_loaded is False [EOL] [EOL] assert stored_ar . username == [string] [EOL] assert stored_ar . email == [string] [EOL] [EOL] def test_put_get_activity_record_with_tag ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] * [number] ) [EOL] adr1 . tags = [ [string] , [string] ] [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] ar . add_detail_object ( adr1 ) [EOL] ar . tags = [ [string] , [string] ] [EOL] [EOL] assert ar . commit is None [EOL] [EOL] [comment] [EOL] ar_written = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] assert ar . commit is not None [EOL] [EOL] [comment] [EOL] stored_ar = mock_config_with_activitystore [ [number] ] . get_activity_record ( ar_written . commit ) [EOL] [EOL] assert ar . commit == stored_ar . commit [EOL] assert ar . importance == stored_ar . importance [EOL] assert ar . linked_commit == stored_ar . linked_commit [EOL] assert ar . log_str == stored_ar . log_str [EOL] assert ar . message == stored_ar . message [EOL] assert ar . show == stored_ar . show [EOL] assert ar . tags == stored_ar . tags [EOL] assert ar . type == stored_ar . type [EOL] assert len ( ar . detail_objects ) == len ( stored_ar . detail_objects ) [EOL] assert stored_ar . username == [string] [EOL] assert stored_ar . email == [string] [EOL] assert stored_ar . username == ar . username [EOL] assert stored_ar . email == ar . email [EOL] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == stored_ar . detail_objects [ [number] ] [ [number] ] [EOL] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . is_loaded is True [EOL] assert stored_ar . detail_objects [ [number] ] [ [number] ] . is_loaded is False [EOL] [EOL] def test_get_activity_record_does_not_exist ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) : [EOL] mock_config_with_activitystore [ [number] ] . get_activity_record ( [string] ) [EOL] [EOL] def test_get_log_records ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record1 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record2 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record3 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] log_records = mock_config_with_activitystore [ [number] ] . _get_log_records ( ) [EOL] assert len ( log_records ) == [number] [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == str [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == str [EOL] assert len ( log_records [ [number] ] [ [number] ] ) == [number] [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == datetime [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == str [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == str [EOL] assert len ( log_records [ [number] ] [ [number] ] ) == [number] [EOL] assert type ( log_records [ [number] ] [ [number] ] ) == datetime [EOL] [EOL] log_records = mock_config_with_activitystore [ [number] ] . _get_log_records ( first = [number] ) [EOL] assert len ( log_records ) >= [number] [EOL] assert len ( log_records ) <= [number] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] _ = mock_config_with_activitystore [ [number] ] . _get_log_records ( before = record2 . commit ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] _ = mock_config_with_activitystore [ [number] ] . _get_log_records ( first = [number] ) [EOL] [EOL] def test_get_activity_records ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record1 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record2 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record3 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] assert activity_records [ [number] ] . username == [string] [EOL] assert activity_records [ [number] ] . email == [string] [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] assert activity_records [ [number] ] . username == [string] [EOL] assert activity_records [ [number] ] . email == [string] [EOL] [EOL] [comment] [EOL] assert type ( activity_records [ [number] ] . timestamp ) == datetime [EOL] assert activity_records [ [number] ] . timestamp < datetime . now ( timezone . utc ) [EOL] assert activity_records [ [number] ] . timestamp > datetime . now ( timezone . utc ) - timedelta ( seconds = [number] ) [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record2 . commit ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record3 . commit , first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record3 . commit , first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] [EOL] def test_get_activity_records_with_intermediate_commits ( self , mock_config_with_activitystore ) : [EOL] [docstring] [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record1 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] [comment] [EOL] for cnt in range ( [number] ) : [EOL] helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , cnt ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record2 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] linked_commit = helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , [number] ) [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = linked_commit . hexsha ) [EOL] [EOL] record3 = mock_config_with_activitystore [ [number] ] . create_activity_record ( ar ) [EOL] [EOL] [comment] [EOL] for cnt in range ( [number] ) : [EOL] helper_create_labbook_change ( mock_config_with_activitystore [ [number] ] , cnt ) [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] assert activity_records [ [number] ] . username == [string] [EOL] assert activity_records [ [number] ] . email == [string] [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] assert activity_records [ [number] ] . username == [string] [EOL] assert activity_records [ [number] ] . email == [string] [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] [EOL] [comment] [EOL] assert type ( activity_records [ [number] ] . timestamp ) == datetime [EOL] assert activity_records [ [number] ] . timestamp < datetime . now ( timezone . utc ) [EOL] assert activity_records [ [number] ] . timestamp > datetime . now ( timezone . utc ) - timedelta ( seconds = [number] ) [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record3 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record3 . linked_commit [EOL] assert activity_records [ [number] ] . message == record3 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record2 . commit ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record1 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record1 . linked_commit [EOL] assert activity_records [ [number] ] . message == record1 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record3 . commit , first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL] [EOL] activity_records = mock_config_with_activitystore [ [number] ] . get_activity_records ( after = record3 . commit , first = [number] ) [EOL] assert len ( activity_records ) == [number] [EOL] assert activity_records [ [number] ] . commit == record2 . commit [EOL] assert activity_records [ [number] ] . linked_commit == record2 . linked_commit [EOL] assert activity_records [ [number] ] . message == record2 . message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $builtins.bool$ 0 $typing.Any$ 0 $builtins.bool$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 $typing.Any$ 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 $builtins.bool$ 0 $typing.Any$ 0 $builtins.bool$ 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 $typing.Any$ 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Optional [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] import json [EOL] import datetime [EOL] from lmcommon . activity . records import ActivityDetailRecord , ActivityDetailType , ActivityRecord , ActivityType , ActivityAction [EOL] [EOL] [EOL] class TestActivityRecord ( object ) : [EOL] [EOL] def test_constructor ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . MILESTONE ) [EOL] [EOL] assert type ( ar ) == ActivityRecord [EOL] assert ar . type == ActivityType . MILESTONE [EOL] assert ar . commit is None [EOL] assert ar . linked_commit is None [EOL] assert ar . message is None [EOL] assert ar . show is True [EOL] assert ar . importance is None [EOL] assert not ar . tags [EOL] assert ar . detail_objects == [ ] [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = False , message = [string] , importance = [number] , tags = [ [string] , [string] ] , linked_commit = [string] , username = [string] , email = [string] ) [EOL] [EOL] assert type ( ar ) == ActivityRecord [EOL] assert ar . type == ActivityType . CODE [EOL] assert ar . commit is None [EOL] assert ar . linked_commit == [string] [EOL] assert ar . message == [string] [EOL] assert ar . show is False [EOL] assert ar . importance == [number] [EOL] assert ar . tags == [ [string] , [string] ] [EOL] assert ar . detail_objects == [ ] [EOL] assert ar . username == [string] [EOL] assert ar . email == [string] [EOL] [EOL] def test_add_detail_object ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = [string] ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . add_value ( [string] , [string] ) [EOL] [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] assert len ( ar . detail_objects ) == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] is True [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == ActivityDetailType . CODE . value [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] == adr [EOL] [EOL] def test_add_detail_objects_sort ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = [string] ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . show = True [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . show = True [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . show = False [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . OUTPUT_DATA ) [EOL] adr . show = True [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . RESULT ) [EOL] adr . show = True [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . INPUT_DATA ) [EOL] adr . show = False [EOL] adr . importance = [number] [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] assert len ( ar . detail_objects ) == [number] [EOL] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] def test_log_str_prop_errors ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , importance = [number] , linked_commit = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] [comment] [EOL] _ = ar . log_str [EOL] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = [string] ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] [comment] [EOL] ar . log_str [EOL] [EOL] def test_log_str_prop ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = [string] ) [EOL] [EOL] adr = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr . add_value ( [string] , [string] ) [EOL] adr . key = [string] [EOL] ar . add_detail_object ( adr ) [EOL] [EOL] assert ar . log_str == [string] [EOL] [EOL] def test_from_log_str ( self ) : [EOL] [docstring] [EOL] [EOL] test_str = [string] [EOL] [EOL] ar = ActivityRecord . from_log_str ( test_str , [string] , datetime . datetime . utcnow ( ) ) [EOL] [EOL] assert type ( ar ) == ActivityRecord [EOL] assert ar . type == ActivityType . CODE [EOL] assert ar . show is True [EOL] assert ar . importance == [number] [EOL] assert ar . linked_commit == [string] [EOL] assert ar . commit == [string] [EOL] assert ar . tags == [ [string] ] [EOL] [EOL] assert len ( ar . detail_objects ) == [number] [EOL] assert type ( ar . detail_objects [ [number] ] [ [number] ] ) == ActivityDetailRecord [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . type == ActivityDetailType . CODE [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . action == ActivityAction . NOACTION [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . key == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . show is True [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . importance == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . tags == [ ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . is_loaded is False [EOL] [EOL] assert type ( ar . detail_objects [ [number] ] [ [number] ] ) == ActivityDetailRecord [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . type == ActivityDetailType . RESULT [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . action == ActivityAction . DELETE [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . key == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . show is False [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . importance == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . tags == [ ] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . is_loaded is False [EOL] [EOL] def test_update_detail_object ( self ) : [EOL] [docstring] [EOL] ar = ActivityRecord ( ActivityType . CODE , show = True , message = [string] , importance = [number] , linked_commit = [string] ) [EOL] [EOL] adr1 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr1 . show = True [EOL] adr1 . importance = [number] [EOL] adr1 . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr1 ) [EOL] [EOL] adr2 = ActivityDetailRecord ( ActivityDetailType . CODE ) [EOL] adr2 . show = True [EOL] adr2 . importance = [number] [EOL] adr2 . add_value ( [string] , [string] ) [EOL] ar . add_detail_object ( adr2 ) [EOL] [EOL] assert len ( ar . detail_objects ) == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] adr2 . importance = [number] [EOL] [EOL] ar . update_detail_object ( adr2 , [number] ) [EOL] [EOL] assert len ( ar . detail_objects ) == [number] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL] assert ar . detail_objects [ [number] ] [ [number] ] . data [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $typing.Optional[builtins.str]$ 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.bool$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 $builtins.int$ 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 $lmcommon.activity.records.ActivityDetailRecord$ 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.records.ActivityRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import lmcommon [EOL] import typing [EOL] import pytest [EOL] from lmcommon . activity . serializers import Serializer [EOL] from lmcommon . activity . serializers . text import PlainSerializer [EOL] [EOL] [EOL] class TestSerializer ( object ) : [EOL] [EOL] def test_constructor ( self ) : [EOL] [docstring] [EOL] s = Serializer ( ) [EOL] [EOL] assert type ( s ) == Serializer [EOL] assert type ( s . serializers [ [string] ] ) == PlainSerializer [EOL] [EOL] def test_bad_mime_type ( self ) : [EOL] [docstring] [EOL] s = Serializer ( ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] s . serialize ( [string] , [string] ) [EOL] [EOL] def test_text_plain ( self ) : [EOL] [docstring] [EOL] s = Serializer ( ) [EOL] [EOL] start_text = [string] [EOL] [EOL] test_bytes = s . serialize ( [string] , start_text ) [EOL] assert type ( test_bytes ) == bytes [EOL] [EOL] test_str = s . deserialize ( [string] , test_bytes ) [EOL] [EOL] assert start_text == test_str [EOL] assert type ( test_str ) == str [EOL] [EOL] test_str_2 = s . jsonify ( [string] , start_text ) [EOL] [EOL] assert start_text == test_str_2 [EOL] assert type ( test_str_2 ) == str [EOL] [EOL] def test_image_base64_png ( self ) : [EOL] [docstring] [EOL] s = Serializer ( ) [EOL] [EOL] example_png = [string] [EOL] [EOL] test_bytes = s . serialize ( [string] , example_png ) [EOL] assert type ( test_bytes ) == bytes [EOL] [EOL] test_str = s . deserialize ( [string] , test_bytes ) [EOL] assert type ( test_str ) == str [EOL] [EOL] def test_image_jsonify_legacy ( self ) : [EOL] s = Serializer ( ) [EOL] [EOL] example_png = [string] [EOL] test_str_2 = s . jsonify ( [string] , example_png ) [EOL] [EOL] assert test_str_2 == f" [string] { example_png }" [EOL] [EOL] def test_image_jsonify_not_legacy ( self ) : [EOL] s = Serializer ( ) [EOL] [EOL] example_png = [string] [EOL] [EOL] test_bytes = s . serialize ( [string] , example_png ) [EOL] assert type ( test_bytes ) == bytes [EOL] [EOL] test_str = s . deserialize ( [string] , test_bytes ) [EOL] [EOL] test_str_2 = s . jsonify ( [string] , test_str ) [EOL] assert test_str_2 == f" [string] { test_str }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 $lmcommon.activity.serializers.serializer.Serializer$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any [EOL] import lmcommon [EOL] import typing [EOL] import json [EOL] from pkg_resources import resource_filename [EOL] import os [EOL] import requests [EOL] from lmcommon . activity . tests . fixtures import get_redis_client_mock , redis_client , MockSessionsResponse [EOL] from lmcommon . container . utils import infer_docker_image_name [EOL] [EOL] from lmcommon . activity . monitors . monitor_jupyterlab import JupyterLabMonitor [EOL] [EOL] [EOL] def mock_ip ( key ) : [EOL] return [string] [EOL] [EOL] [EOL] class TestJupyterLabMonitor ( object ) : [EOL] [EOL] def mock_sessions_request ( self ) : [EOL] with open ( os . path . join ( resource_filename ( [string] , [string] ) , [string] ) , [string] ) as j : [EOL] data = json . load ( j ) [EOL] return data [EOL] [EOL] def test_supported_names ( self , redis_client ) : [EOL] [docstring] [EOL] monitor = JupyterLabMonitor ( ) [EOL] [EOL] assert len ( monitor . get_dev_env_name ( ) ) == [number] [EOL] assert [string] in monitor . get_dev_env_name ( ) [EOL] [EOL] def test_get_sessions ( self , redis_client , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( requests , [string] , MockSessionsResponse ) [EOL] monkeypatch . setattr ( JupyterLabMonitor , [string] , mock_ip ) [EOL] monitor = JupyterLabMonitor ( ) [EOL] [EOL] [comment] [EOL] dev_env_key = [string] . format ( [string] , [string] , [string] , [string] ) [EOL] lb_key = infer_docker_image_name ( [string] , [string] , [string] ) [EOL] redis_client . set ( f"{ lb_key } [string] " , [string] ) [EOL] redis_client . hset ( dev_env_key , [string] , [string] ) [EOL] [EOL] sessions = monitor . get_sessions ( dev_env_key , redis_conn = redis_client ) [EOL] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] assert sessions [ [string] ] [ [string] ] == [string] [EOL] [EOL] def test_run ( self , redis_client , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( requests , [string] , MockSessionsResponse ) [EOL] monkeypatch . setattr ( JupyterLabMonitor , [string] , mock_ip ) [EOL] [comment] [EOL] monitor = JupyterLabMonitor ( ) [EOL] [EOL] dev_env_key = [string] . format ( [string] , [string] , [string] , [string] ) [EOL] lb_key = infer_docker_image_name ( [string] , [string] , [string] ) [EOL] redis_client . set ( f"{ lb_key } [string] " , [string] ) [EOL] redis_client . hset ( dev_env_key , [string] , [string] ) [EOL] redis_client . hset ( dev_env_key , [string] , [string] ) [EOL] redis_client . hset ( dev_env_key , [string] , [string] ) [EOL] [EOL] monitor . run ( dev_env_key ) [EOL] [EOL] data = redis_client . hgetall ( [string] . format ( dev_env_key ) ) [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] . decode ( ) == dev_env_key [EOL] assert [string] in data [ [string] ] . decode ( ) [EOL] [EOL] data = redis_client . hgetall ( [string] . format ( dev_env_key ) ) [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] . decode ( ) == dev_env_key [EOL] assert [string] in data [ [string] ] . decode ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $lmcommon.activity.monitors.monitor_jupyterlab.JupyterLabMonitor$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] from lmcommon . activity . tests . fixtures import get_redis_client_mock , redis_client [EOL] [EOL] from lmcommon . activity . monitors . devenv import DevEnvMonitorManager [EOL] from lmcommon . activity . monitors . monitor_jupyterlab import JupyterLabMonitor [EOL] [EOL] [EOL] class TestDevEnvMonitorManager ( object ) : [EOL] def test_load_monitors ( self , redis_client ) : [EOL] [docstring] [EOL] assert redis_client . keys ( [string] ) == [ ] [EOL] [EOL] demm = DevEnvMonitorManager ( ) [EOL] [EOL] assert type ( demm . available_monitors [ [string] ] ( ) ) == JupyterLabMonitor [EOL] assert redis_client . keys ( [string] ) is not None [EOL] data = redis_client . hgetall ( [string] ) [EOL] assert [string] in data [EOL] [EOL] def test_load_monitors_precached ( self , redis_client ) : [EOL] [docstring] [EOL] demm = DevEnvMonitorManager ( ) [EOL] [EOL] assert type ( demm . available_monitors [ [string] ] ( ) ) == JupyterLabMonitor [EOL] assert redis_client . keys ( [string] ) is not None [EOL] data = redis_client . hgetall ( [string] ) [EOL] assert [string] in data [EOL] [EOL] demm2 = DevEnvMonitorManager ( ) [EOL] [EOL] assert demm . available_monitors == demm2 . available_monitors [EOL] assert type ( demm2 . available_monitors [ [string] ] ( ) ) == JupyterLabMonitor [EOL] assert redis_client . keys ( [string] ) is not None [EOL] data = redis_client . hgetall ( [string] ) [EOL] assert [string] in data [EOL] [EOL] def test_is_available ( self , redis_client ) : [EOL] [docstring] [EOL] demm = DevEnvMonitorManager ( ) [EOL] [EOL] assert demm . is_available ( [string] ) is True [EOL] assert demm . is_available ( [string] ) is False [EOL] [EOL] def test_get_monitor_instance ( self , redis_client ) : [EOL] [docstring] [EOL] demm = DevEnvMonitorManager ( ) [EOL] [EOL] monitor = demm . get_monitor_instance ( [string] ) [EOL] assert type ( monitor ) is JupyterLabMonitor [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0