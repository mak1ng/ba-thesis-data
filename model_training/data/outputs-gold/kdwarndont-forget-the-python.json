[comment] [EOL] [EOL] from typing import Any , Dict , Union [EOL] import tests [EOL] import typing [EOL] import click [EOL] import pytest [EOL] [EOL] from dftp . app import Task , handle_response [EOL] [EOL] [EOL] [comment] [EOL] class DummyResponse : [EOL] [EOL] def __init__ ( self , status_code , reason , rsp ) : [EOL] self . status_code = status_code [EOL] self . reason = reason [EOL] self . rsp = rsp [EOL] [EOL] def json ( self ) : [EOL] [docstring] [EOL] return self . rsp [EOL] [EOL] [EOL] def test_handle_response_exits_with_invalid_status ( ) : [EOL] invalid_status = DummyResponse ( [number] , [string] , [string] ) [EOL] [EOL] with pytest . raises ( SystemExit ) as e : [EOL] handle_response ( invalid_status ) [EOL] [EOL] assert e . type == SystemExit [EOL] assert e . value . code == [string] [EOL] [EOL] [EOL] def test_handle_response_exits_with_not_ok_data ( ) : [EOL] rsp = { [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } } } [EOL] [EOL] not_ok_data = DummyResponse ( [number] , [string] , rsp ) [EOL] [EOL] with pytest . raises ( SystemExit ) as e : [EOL] handle_response ( not_ok_data ) [EOL] [EOL] assert e . type == SystemExit [EOL] assert e . value . code == [string] [EOL] [EOL] [EOL] def test_handle_response_returns_data ( ) : [EOL] rsp = { [string] : { [string] : [string] , [string] : [string] } } [EOL] [EOL] ok_data = DummyResponse ( [number] , [string] , rsp ) [EOL] ok_data_response = handle_response ( ok_data ) [EOL] assert ok_data_response [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Union , Any , Dict [EOL] import typing [EOL] import random [EOL] import string [EOL] [EOL] import pytest [EOL] import arrow [EOL] [EOL] from dftp . app import Task , convert_to_list , create_Task_list , NoTasksException , human_date_to_arrow , UnrecognizedDateFormat , MonthOrDayTooHigh , format_date_display , split_list [EOL] [EOL] [EOL] [comment] [EOL] taskseries_keys = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] task_keys = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [EOL] config = { [string] : { [string] : [string] } } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def create_random_tasks ( number_of_tasks ) : [EOL] [docstring] [EOL] [EOL] list_of_taskseries_values = [ ] [EOL] list_of_task_values = [ ] [EOL] [EOL] for i in range ( number_of_tasks ) : [EOL] taskseries_values = [ i , [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) , [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) , [ [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) , [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) ] , [ [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) , [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) ] , { [string] : [ { [string] : [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) } ] } ] [EOL] list_of_taskseries_values . append ( taskseries_values ) [EOL] [EOL] task_values = [ arrow . utcnow ( ) . shift ( hours = random . randint ( - [number] , [number] ) ) . isoformat ( ) , arrow . utcnow ( ) . shift ( hours = random . randint ( [number] , [number] ) ) . isoformat ( ) , random . choice ( [ [number] , [number] , [number] , [string] ] ) ] [EOL] list_of_task_values . append ( task_values ) [EOL] [EOL] tasks = [ ] [EOL] for i in range ( number_of_tasks ) : [EOL] task_series_data = dict ( zip ( taskseries_keys , list_of_taskseries_values [ i ] ) ) [EOL] task_data = dict ( zip ( task_keys , list_of_task_values [ i ] ) ) [EOL] tasks . append ( Task ( task_series_data , task_data ) ) [EOL] [EOL] return tasks [EOL] [EOL] [EOL] def create_one_task ( ts_values , t_values ) : [EOL] [docstring] [EOL] ts_data = dict ( zip ( taskseries_keys , ts_values ) ) [EOL] t_data = dict ( zip ( task_keys , t_values ) ) [EOL] return Task ( ts_data , t_data ) [EOL] [EOL] [EOL] @ pytest . fixture ( params = create_random_tasks ( [number] ) ) def tasks_one_random ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . fixture ( params = create_random_tasks ( [number] ) ) def tasks_10_random ( request ) : [EOL] return request . param [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_split_list ( tasks_with_dates ) : [EOL] tasks = create_Task_list ( tasks_with_dates , dates = initialize_dates ( ) ) [EOL] incomplete_tasks , completed_tasks = split_list ( tasks ) [EOL] [EOL] failures = [number] [EOL] if len ( incomplete_tasks ) != [number] : [EOL] failures += [number] [EOL] if len ( completed_tasks ) != [number] : [EOL] failures += [number] [EOL] [EOL] assert failures == [number] [EOL] [EOL] [EOL] def test_convert_one_random_task_to_list_1 ( tasks_one_random ) : [EOL] a = convert_to_list ( [string] , tasks_one_random . name , tasks_one_random . due ) [EOL] assert isinstance ( a , list ) is True [EOL] [EOL] [EOL] def test_convert_one_random_task_to_list_2 ( tasks_one_random ) : [EOL] a = convert_to_list ( [string] , tasks_one_random . name , tasks_one_random . due ) [EOL] assert isinstance ( a , list ) is True [EOL] [EOL] [EOL] def test_convert_one_random_task_to_list_3 ( tasks_one_random ) : [EOL] a = convert_to_list ( [string] , tasks_one_random . name , tasks_one_random . due ) [EOL] assert len ( a ) == [number] [EOL] [EOL] [EOL] def test_convert_one_random_task_to_list_4 ( tasks_one_random ) : [EOL] a = convert_to_list ( [string] , tasks_one_random . name , tasks_one_random . due ) [EOL] assert len ( a ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] today = arrow . now ( ) [EOL] tomorrow = arrow . now ( ) . shift ( days = [number] ) [EOL] yesterday = arrow . now ( ) . shift ( days = - [number] ) [EOL] [EOL] [comment] [EOL] today_11pm = arrow . now ( ) . replace ( hour = [number] , minute = [number] ) [EOL] today_1am = arrow . now ( ) . replace ( hour = [number] , minute = [number] ) [EOL] yesterday_11pm = arrow . now ( ) . shift ( days = - [number] ) . replace ( hour = [number] , minute = [number] ) [EOL] yesterday_1am = arrow . now ( ) . shift ( days = - [number] ) . replace ( hour = [number] , minute = [number] ) [EOL] tomorrow_11pm = arrow . now ( ) . shift ( days = + [number] ) . replace ( hour = [number] , minute = [number] ) [EOL] tomorrow_1am = arrow . now ( ) . shift ( days = + [number] ) . replace ( hour = [number] , minute = [number] ) [EOL] [EOL] [comment] [EOL] today_str = str ( today ) [EOL] tomorrow_str = str ( tomorrow ) [EOL] yesterday_str = str ( yesterday ) [EOL] today_11pm_str = str ( today_11pm ) [EOL] today_1am_str = str ( today_1am ) [EOL] yesterday_11pm_str = str ( yesterday_11pm ) [EOL] yesterday_1am_str = str ( yesterday_1am ) [EOL] tomorrow_11pm_str = str ( tomorrow_11pm ) [EOL] tomorrow_1am_str = str ( tomorrow_1am ) [EOL] [EOL] [comment] [EOL] today_dt = today . datetime [EOL] tomorrow_dt = tomorrow . datetime [EOL] yesterday_dt = yesterday . datetime [EOL] today_11pm_dt = today_11pm . datetime [EOL] today_1am_dt = today_1am . datetime [EOL] yesterday_11pm_dt = yesterday_11pm . datetime [EOL] yesterday_1am_dt = yesterday_1am . datetime [EOL] tomorrow_11pm_dt = tomorrow_11pm . datetime [EOL] tomorrow_1am_dt = tomorrow_1am . datetime [EOL] [EOL] [EOL] def initialize_dates ( due = [string] , due_before = [string] , due_after = [string] , completed_on = [string] , completed_before = [string] , completed_after = [string] ) : [EOL] [docstring] [EOL] return { [string] : due , [string] : due_before , [string] : due_after , [string] : completed_on , [string] : completed_before , [string] : completed_after } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] def test_user_date_today ( ) : [EOL] assert human_date_to_arrow ( [string] , [string] ) == today . date ( ) [EOL] [EOL] [EOL] def test_user_date_yesterday ( ) : [EOL] assert human_date_to_arrow ( [string] , [string] ) == yesterday . date ( ) [EOL] [EOL] [EOL] def test_user_date_tomorrow ( ) : [EOL] assert human_date_to_arrow ( [string] , [string] ) == tomorrow . date ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def test_user_date_today_m_d_yy_1 ( ) : [EOL] user_today = arrow . now ( ) . format ( [string] ) [EOL] assert human_date_to_arrow ( user_today , [string] ) == today . date ( ) [EOL] [EOL] [EOL] def test_user_date_today_m_d_yy_2 ( ) : [EOL] user_yesterday = arrow . now ( ) . shift ( days = - [number] ) . format ( [string] ) [EOL] assert human_date_to_arrow ( user_yesterday , [string] ) == yesterday . date ( ) [EOL] [EOL] [EOL] def test_user_date_today_m_d_yy_3 ( ) : [EOL] user_tomorrow = arrow . now ( ) . shift ( days = [number] ) . format ( [string] ) [EOL] assert human_date_to_arrow ( user_tomorrow , [string] ) == tomorrow . date ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) def test_user_date_1 ( date ) : [EOL] assert human_date_to_arrow ( date , [string] ) == arrow . get ( [string] ) . date ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) def test_user_date_2 ( date ) : [EOL] assert human_date_to_arrow ( date , [string] ) == arrow . get ( [string] ) . date ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] ] ) def test_user_date_3 ( date ) : [EOL] assert human_date_to_arrow ( date , [string] ) == arrow . get ( [string] ) . date ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def test_human_date_to_arrow_date_m_d_due_1 ( ) : [EOL] [comment] [EOL] [comment] [EOL] yesterday_m_d = str ( arrow . now ( ) . shift ( days = - [number] ) . format ( [string] ) ) [EOL] yesterday_next_year = arrow . now ( ) . shift ( days = - [number] , years = [number] ) . date ( ) [EOL] assert human_date_to_arrow ( yesterday_m_d , [string] ) == yesterday_next_year [EOL] [EOL] [EOL] def test_human_date_to_arrow_date_m_d_due_2 ( ) : [EOL] [comment] [EOL] [comment] [EOL] tomorrow_m_d = str ( arrow . now ( ) . shift ( days = [number] ) . format ( [string] ) ) [EOL] assert human_date_to_arrow ( tomorrow_m_d , [string] ) == tomorrow . date ( ) [EOL] [EOL] [EOL] def test_human_date_to_arrow_date_m_d_complete_1 ( ) : [EOL] [comment] [EOL] [comment] [EOL] yesterday_m_d = str ( arrow . now ( ) . shift ( days = - [number] ) . format ( [string] ) ) [EOL] assert human_date_to_arrow ( yesterday_m_d , [string] ) == yesterday . date ( ) [EOL] [EOL] [EOL] def test_human_date_to_arrow_date_m_d_complete_2 ( ) : [EOL] [comment] [EOL] [comment] [EOL] tomorrow_m_d = str ( arrow . now ( ) . shift ( days = [number] ) . format ( [string] ) ) [EOL] tomorrow_last_year = arrow . now ( ) . shift ( days = [number] , years = - [number] ) . date ( ) [EOL] assert human_date_to_arrow ( tomorrow_m_d , [string] ) == tomorrow_last_year [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) def test_incorrect_user_date_raises_UnrecognizedDateFormat ( date ) : [EOL] with pytest . raises ( UnrecognizedDateFormat ) : [EOL] human_date_to_arrow ( date , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) def test_incorrect_user_date_no_year_raises_UnrecognizedDateFormat ( date ) : [EOL] with pytest . raises ( UnrecognizedDateFormat ) : [EOL] human_date_to_arrow ( date , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] ] ) def test_incorrect_user_date_raises_MonthOrDayTooHigh ( date ) : [EOL] with pytest . raises ( MonthOrDayTooHigh ) : [EOL] human_date_to_arrow ( date , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_format_date_never ( ) : [EOL] [docstring] [EOL] assert format_date_display ( [string] ) == [string] [EOL] [EOL] def test_format_date_display_no_due_or_completed_time ( ) : [EOL] [docstring] [EOL] today_midnight = arrow . now ( ) . replace ( hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] assert format_date_display ( today_midnight . isoformat ( ) ) == today_midnight . format ( [string] ) [EOL] [EOL] def test_format_date_display_due_or_completed_time ( ) : [EOL] [docstring] [EOL] [comment] [EOL] aug_5_18_8am = arrow . now ( ) . replace ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] assert format_date_display ( aug_5_18_8am . isoformat ( ) ) == [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def mock_rtm_taskseries ( id , name , url = [string] , tags = [ ] , notes = [ ] , participants = [ ] , due = [string] , completed = [string] , priority = [string] ) : [EOL] [docstring] [EOL] [EOL] taskseries = { } [EOL] taskseries [ [string] ] = id [EOL] taskseries [ [string] ] = name [EOL] taskseries [ [string] ] = url [EOL] taskseries [ [string] ] = { } [EOL] if tags : [EOL] taskseries [ [string] ] [ [string] ] = [ ] [EOL] for tag in tags : [EOL] taskseries [ [string] ] [ [string] ] . append ( tag ) [EOL] taskseries [ [string] ] = notes [EOL] taskseries [ [string] ] = participants [EOL] [EOL] task = { } [EOL] task [ [string] ] = due [EOL] task [ [string] ] = completed [EOL] task [ [string] ] = priority [EOL] taskseries [ [string] ] = [ task ] [EOL] [EOL] return taskseries [EOL] [EOL] [EOL] def make_list_of_rtm_lists ( tasks ) : [EOL] [docstring] [EOL] [EOL] rtm_list = { } [EOL] rtm_list [ [string] ] = [number] [EOL] rtm_list [ [string] ] = [ ] [EOL] [EOL] for task in tasks : [EOL] rtm_list [ [string] ] . append ( task ) [EOL] [EOL] list_of_rtm_lists = [ rtm_list ] [EOL] [EOL] return list_of_rtm_lists [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_create_Task_list_returns_1_task ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_2_tasks ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_10_tasks ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_one_task_with_correct_due_date ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = today ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] assert task_list [ [number] ] . due == today [EOL] [EOL] [EOL] def test_create_Task_list_returns_one_task_with_correct_completed_date ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = today ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] assert task_list [ [number] ] . completed == today [EOL] [EOL] [EOL] def test_create_Task_list_returns_one_task_with_correct_due_and_completed_date ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = yesterday , completed = today ) ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = initialize_dates ( ) ) [EOL] [EOL] failure = [number] [EOL] if task_list [ [number] ] . completed != today or task_list [ [number] ] . due != yesterday : [EOL] failure = [number] [EOL] [EOL] assert failure == [number] [EOL] [EOL] [EOL] def test_create_Task_list_empty_task_list_raises_NoTasksException ( ) : [EOL] with pytest . raises ( NoTasksException ) : [EOL] create_Task_list ( [ ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture ( ) def tasks_with_tags ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , tags = [ [string] , [string] , [string] , [string] , [string] ] ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , tags = [ [string] , [string] ] ) ) [EOL] [EOL] return make_list_of_rtm_lists ( tasks ) [EOL] [EOL] [EOL] def test_create_Task_list_with_tags_desired_returns_1_task ( tasks_with_tags ) : [EOL] task_list = create_Task_list ( tasks_with_tags , tag = [string] , dates = initialize_dates ( ) ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_with_tags_desired_returns_2_tasks ( tasks_with_tags ) : [EOL] task_list = create_Task_list ( tasks_with_tags , tag = [string] , dates = initialize_dates ( ) ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_with_tags_desired_raises_exception ( tasks_with_tags ) : [EOL] with pytest . raises ( NoTasksException ) : [EOL] task_list = create_Task_list ( tasks_with_tags , tag = [string] , dates = initialize_dates ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture ( ) def tasks_with_dates ( ) : [EOL] [EOL] date_1_str = str ( arrow . get ( [string] ) ) [EOL] date_2_str = str ( arrow . get ( [string] ) ) [EOL] date_3_str = str ( arrow . get ( [string] ) ) [EOL] date_4_str = str ( arrow . get ( [string] ) ) [EOL] [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_1_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_1_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_2_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_2_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_3_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_3_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_4_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = date_4_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_1_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_1_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_2_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_2_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_3_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_3_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_4_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = date_4_str ) ) [EOL] [EOL] return make_list_of_rtm_lists ( tasks ) [EOL] [EOL] def test_create_Task_list_returns_one_task_with_due_date ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = today_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = yesterday_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , due = tomorrow_str ) ) [EOL] [EOL] dates = initialize_dates ( due = [string] ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_6_tasks_with_due_after ( tasks_with_dates ) : [EOL] dates = initialize_dates ( due_after = [string] ) [EOL] [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] def test_create_Task_list_returns_4_tasks_with_due_before ( tasks_with_dates ) : [EOL] dates = initialize_dates ( due_before = [string] ) [EOL] [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_one_task_with_completed_date ( ) : [EOL] tasks = [ ] [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = today_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = yesterday_str ) ) [EOL] tasks . append ( mock_rtm_taskseries ( [number] , [string] , completed = yesterday_str ) ) [EOL] [EOL] dates = initialize_dates ( completed_on = [string] ) [EOL] [EOL] task_list = create_Task_list ( make_list_of_rtm_lists ( tasks ) , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_6_tasks_with_completed_after ( tasks_with_dates ) : [EOL] dates = initialize_dates ( completed_after = [string] ) [EOL] [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_returns_4_tasks_with_completed_before ( tasks_with_dates ) : [EOL] dates = initialize_dates ( completed_before = [string] ) [EOL] [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] def test_create_Task_list_between_dates ( tasks_with_dates ) : [EOL] dates = initialize_dates ( due_after = [string] , due_before = [string] ) [EOL] [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] assert len ( task_list ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def test_create_Task_list_no_tasks_meeting_filters_raises_NoTasksException ( tasks_with_dates ) : [EOL] dates = initialize_dates ( completed_before = [string] ) [EOL] with pytest . raises ( NoTasksException ) : [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL] [EOL] def test_create_Task_list_no_tasks_meeting_filters_raises_NoTasksException ( tasks_with_dates ) : [EOL] dates = initialize_dates ( due_after = [string] ) [EOL] with pytest . raises ( NoTasksException ) : [EOL] task_list = create_Task_list ( tasks_with_dates , dates = dates ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
name = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Match , Any , List , Dict , Pattern , Optional [EOL] import hashlib [EOL] import typing [EOL] import configparser [EOL] import pathlib [EOL] import requests [EOL] import sys [EOL] from pathlib import Path [EOL] import datetime [EOL] import textwrap [EOL] import hashlib [EOL] import configparser [EOL] import re [EOL] [EOL] import click [EOL] import requests [EOL] import arrow [EOL] from tabulate import tabulate [EOL] [EOL] from reportlab . lib . pagesizes import letter [EOL] from reportlab . platypus import SimpleDocTemplate , Paragraph , Table , TableStyle [EOL] from reportlab . lib . styles import getSampleStyleSheet , ParagraphStyle [EOL] from reportlab . lib import colors [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] api_key = [string] [EOL] shared_secret = [string] [EOL] [EOL] auth_url = [string] [EOL] methods_url = [string] [EOL] [EOL] [EOL] [comment] [EOL] global config [EOL] config = configparser . ConfigParser ( ) [EOL] [EOL] global config_file [EOL] config_file = Path ( ) . home ( ) . joinpath ( [string] ) [EOL] [EOL] if config_file . is_file ( ) : [EOL] config . read ( config_file ) [EOL] else : [EOL] config [ [string] ] = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] with open ( config_file , [string] ) as fp : [EOL] config . write ( fp ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class Task : [EOL] [EOL] def __init__ ( self , taskseries , task ) : [EOL] self . id = taskseries [ [string] ] [EOL] self . name = taskseries [ [string] ] [EOL] self . url = [string] if not taskseries [ [string] ] else taskseries [ [string] ] [EOL] [EOL] [comment] [EOL] self . due = [string] if not task [ [string] ] else task [ [string] ] [comment] [EOL] self . completed = task [ [string] ] [comment] [EOL] [EOL] self . is_overdue = False [EOL] [EOL] [comment] [EOL] if self . due != [string] : [EOL] task_due = arrow . get ( task [ [string] ] ) . to ( config [ [string] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if str ( task_due . time ( ) ) == [string] : [EOL] if task_due . date ( ) < arrow . get ( ) . to ( config [ [string] ] [ [string] ] ) . date ( ) : [EOL] self . is_overdue = True [EOL] else : [EOL] if task_due < arrow . get ( tzinfo = config [ [string] ] [ [string] ] ) : [EOL] self . is_overdue = True [EOL] [EOL] self . priority = [string] if task [ [string] ] == [string] else task [ [string] ] [EOL] [EOL] self . tags = [ ] [EOL] if [string] in taskseries [ [string] ] : [EOL] for tag in taskseries [ [string] ] [ [string] ] : [EOL] self . tags . append ( tag ) [EOL] [EOL] self . notes = [ ] [EOL] if [string] in taskseries [ [string] ] : [EOL] for note in taskseries [ [string] ] [ [string] ] : [EOL] self . notes . append ( note [ [string] ] ) [EOL] [EOL] self . participants = [ ] [EOL] if [string] in taskseries [ [string] ] : [EOL] for participant in taskseries [ [string] ] [ [string] ] : [EOL] self . participants . append ( participant [ [string] ] ) [EOL] [EOL] class dftpException ( BaseException ) : [EOL] pass [EOL] [EOL] class BadDataException ( dftpException ) : [EOL] pass [EOL] [EOL] class NoTasksException ( dftpException ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] self . message = message [EOL] if not message : [EOL] self . message = [string] [EOL] [EOL] class NoListException ( dftpException ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] self . message = message [EOL] if not message : [EOL] self . message = [string] [EOL] [EOL] class UnrecognizedDateFormat ( dftpException ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] self . message = message [EOL] if not message : [EOL] self . message = [string] [EOL] [EOL] class MonthOrDayTooHigh ( dftpException ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] self . message = message [EOL] if not message : [EOL] self . message = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def make_api_sig ( params ) : [EOL] [docstring] [EOL] [EOL] api_sig = shared_secret + [string] . join ( [string] . format ( key , value ) for key , value in sorted ( params . items ( ) ) ) [EOL] api_sig = hashlib . md5 ( api_sig . encode ( [string] ) ) [EOL] return api_sig . hexdigest ( ) [EOL] [EOL] [EOL] def get_frob ( ) : [EOL] [docstring] [EOL] [EOL] params = { [string] : [string] , [string] : api_key , [string] : [string] } [EOL] [EOL] [comment] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] return data [ [string] ] [EOL] [EOL] [EOL] def authenticate ( ) : [EOL] [docstring] [EOL] [EOL] frob = get_frob ( ) [EOL] params = { [string] : api_key , [string] : frob , [string] : [string] } [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] r_auth = requests . get ( auth_url , params = params ) [EOL] [EOL] if r_auth . status_code != [number] : [EOL] click . secho ( textwrap . fill ( [string] [string] . format ( r_auth . status_code , r_auth . reason ) , fg = [string] ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] click . echo ( [string] ) [EOL] click . echo ( textwrap . fill ( [string] [string] ) ) [EOL] click . echo ( [string] ) [EOL] click . echo ( r_auth . url ) [EOL] click . echo ( [string] ) [EOL] [EOL] click . pause ( info = [string] ) [EOL] [EOL] [comment] [EOL] params = { [string] : api_key , [string] : [string] , [string] : [string] , [string] : frob } [EOL] [EOL] [comment] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [ [string] ] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] params = { [string] : api_key , [string] : [string] , [string] : [string] , [string] : config [ [string] ] [ [string] ] } [EOL] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [EOL] config [ [string] ] [ [string] ] = data [ [string] ] [ [string] ] [EOL] [EOL] save ( config ) [EOL] [EOL] click . echo ( [string] ) [EOL] click . echo ( [string] . format ( config [ [string] ] [ [string] ] ) ) [EOL] click . echo ( [string] ) [EOL] [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def handle_response ( r ) : [EOL] [docstring] [EOL] [EOL] if r . status_code != [number] : [EOL] click . secho ( textwrap . fill ( [string] [string] . format ( r . status_code , r . reason ) ) , fg = [string] ) [EOL] sys . exit ( [string] ) [EOL] else : [EOL] data = r . json ( ) [ [string] ] [EOL] [EOL] if data [ [string] ] != [string] : [EOL] if data [ [string] ] [ [string] ] == [string] : [comment] [EOL] click . secho ( [string] , fg = [string] ) [EOL] authenticate ( ) [EOL] return [EOL] else : [EOL] click . secho ( [string] . format ( data [ [string] ] [ [string] ] ) , fg = [string] ) [EOL] sys . exit ( [string] . format ( data [ [string] ] [ [string] ] ) ) [EOL] [EOL] return data [EOL] [EOL] [EOL] def get_rtm_lists ( ) : [EOL] [docstring] [EOL] [EOL] params = { [string] : api_key , [string] : [string] , [string] : [string] , [string] : config [ [string] ] [ [string] ] } [EOL] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] return data [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def get_rtm_tasks ( list_name , status ) : [EOL] [EOL] params = { [string] : api_key , [string] : [string] , [string] : [string] , [string] : config [ [string] ] [ [string] ] } [EOL] [EOL] if list_name : [EOL] rtm_lists = get_rtm_lists ( ) [EOL] [EOL] list_id = [string] [EOL] for rtm_list in rtm_lists : [EOL] if list_name == rtm_list [ [string] ] : [EOL] list_id = rtm_list [ [string] ] [EOL] [EOL] if not list_id : [EOL] raise NoListException [EOL] [EOL] params [ [string] ] = list_id [EOL] [EOL] [EOL] if status == [string] : [EOL] params [ [string] ] = [string] [EOL] [EOL] if status == [string] : [EOL] params [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return data [ [string] ] [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def save ( config ) : [EOL] [docstring] [EOL] [EOL] for key , value in config [ [string] ] . items ( ) : [EOL] config . set ( [string] , key , value ) [EOL] [EOL] with open ( config_file , [string] ) as fp : [EOL] config . write ( fp ) [EOL] [EOL] return [EOL] [EOL] [EOL] def create_Task_list ( rtm_lists , tag = [string] , dates = { } , status = [string] ) : [EOL] [docstring] [EOL] [EOL] tasks = [ ] [EOL] [EOL] for rtm_list in rtm_lists : [EOL] if [string] in rtm_list : [EOL] for taskseries in rtm_list [ [string] ] : [EOL] if tag : [EOL] if [string] in taskseries [ [string] ] : [EOL] for task in taskseries [ [string] ] : [EOL] if tag in taskseries [ [string] ] [ [string] ] : [EOL] tasks . append ( Task ( taskseries , task ) ) [EOL] else : [EOL] for task in taskseries [ [string] ] : [EOL] tasks . append ( Task ( taskseries , task ) ) [EOL] [EOL] if not tasks : [EOL] raise NoTasksException [EOL] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . due [EOL] and task . due != [string] [EOL] and arrow . get ( task . due ) . date ( ) == human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . due [EOL] and task . due != [string] [EOL] and arrow . get ( task . due ) . date ( ) < human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . due [EOL] and task . due != [string] [EOL] and arrow . get ( task . due ) . date ( ) > human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . completed [EOL] and arrow . get ( task . completed ) . date ( ) == human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . completed [EOL] and arrow . get ( task . completed ) . date ( ) < human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] if dates . get ( [string] ) : [EOL] tasks = [ task for task in tasks if task . completed [EOL] and arrow . get ( task . completed ) . date ( ) > human_date_to_arrow ( dates [ [string] ] , [string] ) ] [EOL] [EOL] if not tasks : [EOL] raise NoTasksException [EOL] [EOL] return tasks [EOL] [EOL] [EOL] def split_list ( all_tasks ) : [EOL] [docstring] [EOL] [EOL] completed_tasks = [ ] [EOL] incomplete_tasks = [ ] [EOL] [EOL] for task in all_tasks : [EOL] if not task . completed : [EOL] incomplete_tasks . append ( task ) [EOL] else : [EOL] completed_tasks . append ( task ) [EOL] [EOL] if completed_tasks : [EOL] completed_tasks . sort ( key = lambda t : t . completed ) [EOL] if incomplete_tasks : [EOL] incomplete_tasks . sort ( key = lambda t : t . due ) [EOL] [EOL] return completed_tasks , incomplete_tasks [EOL] [EOL] [EOL] def human_date_to_arrow ( date , type_of_filter ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if date . lower ( ) == [string] : [EOL] return arrow . now ( config [ [string] ] [ [string] ] ) . date ( ) [EOL] elif date . lower ( ) == [string] : [EOL] return arrow . now ( config [ [string] ] [ [string] ] ) . shift ( days = [number] ) . date ( ) [EOL] elif date . lower ( ) == [string] : [EOL] return arrow . now ( config [ [string] ] [ [string] ] ) . shift ( days = - [number] ) . date ( ) [EOL] [EOL] [comment] [EOL] p = re . compile ( [string] ) [EOL] [EOL] m = p . match ( date ) [EOL] [EOL] if m : [EOL] [comment] [EOL] date = m [ [number] ] . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] date = date . split ( [string] ) [EOL] [EOL] [comment] [EOL] month = date [ [number] ] . lstrip ( [string] ) [EOL] day = date [ [number] ] . lstrip ( [string] ) [EOL] [EOL] [comment] [EOL] if not month or not day : [EOL] raise UnrecognizedDateFormat [EOL] [EOL] if int ( month ) > [number] or int ( day ) > [number] : [EOL] raise MonthOrDayTooHigh [EOL] [EOL] year = [string] [EOL] [EOL] if len ( date ) > [number] : [EOL] year = date [ [number] ] [EOL] if len ( year ) == [number] : [EOL] year = year [ [number] : ] [EOL] if len ( year ) == [number] : [EOL] raise UnrecognizedDateFormat [EOL] [EOL] date_formats = [ [string] ] [EOL] [EOL] if year : [EOL] date = [string] . join ( [ month , day , year ] ) [EOL] else : [comment] [EOL] m_d = [string] . join ( [ month , day ] ) [EOL] [EOL] current_year = str ( arrow . get ( ) . to ( config [ [string] ] [ [string] ] ) . year ) [ [number] : ] [EOL] m_d_current_year = [string] . join ( [ month , day , current_year ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if type_of_filter == [string] : [EOL] if arrow . get ( m_d_current_year , date_formats ) . date ( ) >= arrow . now ( ) . date ( ) : [EOL] date = m_d_current_year [EOL] else : [EOL] date = m_d + [string] + str ( arrow . get ( ) . year + [number] ) [ [number] : ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if type_of_filter == [string] : [EOL] if arrow . get ( m_d_current_year , date_formats ) . date ( ) >= arrow . now ( ) . date ( ) : [EOL] date = m_d + [string] + str ( arrow . get ( ) . year - [number] ) [ [number] : ] [EOL] else : [EOL] date = m_d_current_year [EOL] [EOL] else : [EOL] raise UnrecognizedDateFormat [EOL] [EOL] return arrow . get ( date , date_formats ) . date ( ) [EOL] [EOL] [EOL] def format_date_display ( task_date ) : [EOL] [docstring] [EOL] [EOL] if task_date != [string] : [EOL] task_date = arrow . get ( task_date ) . to ( config [ [string] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if str ( task_date . time ( ) ) == [string] : [EOL] return task_date . format ( [string] ) [EOL] else : [EOL] return task_date . format ( [string] ) [EOL] else : [EOL] return task_date [EOL] [EOL] [EOL] def convert_to_list ( method , task_name , task_date ) : [EOL] [docstring] [EOL] if method == [string] : [EOL] return [ [string] . join ( textwrap . wrap ( task_name , [number] ) ) , task_date ] [EOL] if method == [string] : [EOL] return [ [string] . join ( textwrap . wrap ( task_name , [number] ) ) , task_date ] [EOL] [EOL] [EOL] def display_tasks ( method , list_name , tag , tasks , status , filename = [string] ) : [EOL] [docstring] [EOL] [EOL] completed_tasks_as_lists = [ [ [string] , [string] ] ] [EOL] incomplete_tasks_as_lists = [ [ [string] , [string] ] ] [EOL] [EOL] if list_name : [EOL] heading1 = list_name + [string] [EOL] elif tag : [EOL] heading1 = tag + [string] [EOL] else : [EOL] heading1 = [string] [EOL] [EOL] if method == [string] : [EOL] doc = SimpleDocTemplate ( filename + [string] , pagesize = letter ) [EOL] styles = getSampleStyleSheet ( ) [EOL] table_style = TableStyle ( [ ( [string] , ( [number] , [number] ) , ( - [number] , - [number] ) , [number] , colors . black ) , ( [string] , ( [number] , [number] ) , ( - [number] , - [number] ) , [number] , colors . black ) , ] ) [EOL] col1_width , col2_width = [number] , [number] [EOL] red_text = ParagraphStyle ( [string] , textColor = colors . red ) [EOL] story = [ ] [EOL] [EOL] if status and status == [string] : [EOL] heading1 += str ( len ( tasks ) ) + [string] [EOL] tasks . sort ( key = lambda t : t . due ) [EOL] [EOL] for task in tasks : [EOL] formatted_date = format_date_display ( task . due ) [EOL] [EOL] if task . is_overdue : [EOL] if method == [string] : [EOL] formatted_date = click . style ( formatted_date , fg = [string] ) [EOL] if method == [string] : [EOL] formatted_date = Paragraph ( formatted_date , red_text ) [EOL] [EOL] incomplete_tasks_as_lists . append ( convert_to_list ( method , task . name , formatted_date ) ) [EOL] [EOL] if method == [string] : [EOL] story . append ( Paragraph ( heading1 , styles [ [string] ] ) ) [EOL] t = Table ( incomplete_tasks_as_lists , colWidths = ( col1_width , col2_width ) ) [EOL] t . setStyle ( table_style ) [EOL] story . append ( t ) [EOL] elif method == [string] : [EOL] click . secho ( [string] , fg = [string] ) [EOL] print ( tabulate ( incomplete_tasks_as_lists , headers = [string] , tablefmt = [string] ) ) [EOL] [EOL] elif status and status == [string] : [EOL] heading1 += str ( len ( tasks ) ) + [string] [EOL] tasks . sort ( key = lambda t : t . completed ) [EOL] [EOL] for task in tasks : [EOL] task . completed = format_date_display ( task . completed ) [EOL] completed_tasks_as_lists . append ( convert_to_list ( method , task . name , task . completed ) ) [EOL] [EOL] if method == [string] : [EOL] story . append ( Paragraph ( heading1 , styles [ [string] ] ) ) [EOL] t = Table ( completed_tasks_as_lists , colWidths = ( col1_width , col2_width ) ) [EOL] t . setStyle ( table_style ) [EOL] story . append ( t ) [EOL] elif method == [string] : [EOL] click . secho ( [string] , fg = [string] ) [EOL] print ( tabulate ( completed_tasks_as_lists , headers = [string] , tablefmt = [string] ) ) [EOL] [EOL] else : [EOL] heading1 += str ( len ( tasks ) ) + [string] [EOL] [EOL] completed_tasks , incomplete_tasks = split_list ( tasks ) [EOL] completed_tasks . sort ( key = lambda t : t . completed ) [EOL] incomplete_tasks . sort ( key = lambda t : t . due ) [EOL] [EOL] for task in completed_tasks : [EOL] task . completed = format_date_display ( task . completed ) [EOL] completed_tasks_as_lists . append ( convert_to_list ( method , task . name , task . completed ) ) [EOL] [EOL] for task in incomplete_tasks : [EOL] formatted_date = format_date_display ( task . due ) [EOL] if task . is_overdue : [EOL] if method == [string] : [EOL] formatted_date = click . style ( formatted_date , fg = [string] ) [EOL] if method == [string] : [EOL] formatted_date = Paragraph ( formatted_date , red_text ) [EOL] incomplete_tasks_as_lists . append ( convert_to_list ( method , task . name , formatted_date ) ) [EOL] [EOL] if method == [string] : [EOL] story . append ( Paragraph ( heading1 , styles [ [string] ] ) ) [EOL] [EOL] if incomplete_tasks : [EOL] story . append ( Paragraph ( str ( len ( incomplete_tasks ) ) + [string] , styles [ [string] ] ) ) [EOL] t = Table ( incomplete_tasks_as_lists , colWidths = ( col1_width , col2_width ) ) [EOL] t . setStyle ( table_style ) [EOL] story . append ( t ) [EOL] else : [EOL] story . append ( Paragraph ( [string] , styles [ [string] ] ) ) [EOL] story . append ( Paragraph ( [string] , styles [ [string] ] ) ) [EOL] [EOL] if completed_tasks : [EOL] story . append ( Paragraph ( str ( len ( completed_tasks ) ) + [string] , styles [ [string] ] ) ) [EOL] t = Table ( completed_tasks_as_lists , colWidths = ( col1_width , col2_width ) ) [EOL] t . setStyle ( table_style ) [EOL] story . append ( t ) [EOL] else : [EOL] story . append ( Paragraph ( [string] , styles [ [string] ] ) ) [EOL] story . append ( Paragraph ( [string] , styles [ [string] ] ) ) [EOL] [EOL] elif method == [string] : [EOL] if len ( incomplete_tasks_as_lists ) > [number] : [EOL] click . secho ( [string] , fg = [string] ) [EOL] print ( tabulate ( incomplete_tasks_as_lists , headers = [string] , tablefmt = [string] ) ) [EOL] else : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] if len ( completed_tasks_as_lists ) > [number] : [EOL] click . secho ( [string] , fg = [string] ) [EOL] print ( tabulate ( completed_tasks_as_lists , headers = [string] , tablefmt = [string] ) ) [EOL] else : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] if method == [string] : [EOL] doc . build ( story ) [EOL] [EOL] return [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ click . group ( ) def main ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if not config [ [string] ] [ [string] ] : [EOL] authenticate ( ) [EOL] [EOL] [comment] [EOL] params = { [string] : api_key , [string] : [string] , [string] : [string] , [string] : config [ [string] ] [ [string] ] } [EOL] [EOL] params [ [string] ] = make_api_sig ( params ) [EOL] [EOL] data = handle_response ( requests . get ( methods_url , params = params ) ) [EOL] [EOL] return [EOL] [EOL] [EOL] @ main . command ( ) @ click . option ( [string] , is_flag = True , help = [string] ) @ click . option ( [string] , is_flag = True , help = [string] ) @ click . option ( [string] , is_flag = True , help = [string] ) def lists ( archived , smart , all ) : [EOL] [docstring] [EOL] [EOL] rtm_lists = get_rtm_lists ( ) [EOL] [EOL] sub_list = [ ] [EOL] [EOL] for rtm_list in rtm_lists : [EOL] if all : [EOL] sub_list . append ( rtm_list ) [EOL] else : [EOL] if archived and smart : [EOL] if rtm_list [ [string] ] == [string] and rtm_list [ [string] ] == [string] : [EOL] sub_list . append ( rtm_list ) [EOL] elif archived and not smart : [EOL] if rtm_list [ [string] ] == [string] and rtm_list [ [string] ] == [string] : [EOL] sub_list . append ( rtm_list ) [EOL] elif not archived and smart : [EOL] if rtm_list [ [string] ] == [string] and rtm_list [ [string] ] == [string] : [EOL] sub_list . append ( rtm_list ) [EOL] else : [EOL] if rtm_list [ [string] ] == [string] and rtm_list [ [string] ] == [string] : [EOL] sub_list . append ( rtm_list ) [EOL] [EOL] if not sub_list : [EOL] click . secho ( [string] , fg = [string] ) [EOL] else : [EOL] for rtm_list in sorted ( sub_list , key = lambda k : k [ [string] ] . lower ( ) ) : [EOL] click . echo ( rtm_list [ [string] ] ) [EOL] return [EOL] [EOL] [EOL] @ main . command ( ) @ click . option ( [string] , [string] , [string] , flag_value = [string] , default = True , help = [string] ) @ click . option ( [string] , [string] , [string] , flag_value = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , [string] , flag_value = [string] , help = [string] ) @ click . option ( [string] , [string] , [string] , flag_value = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) @ click . option ( [string] , [string] , default = [string] , help = [string] ) def tasks ( method , list_name , tag , status , due , due_before , due_after , completed_on , completed_before , completed_after , filename ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if completed_on or completed_before or completed_after : [EOL] status = [string] [EOL] [EOL] try : [EOL] rtm_tasks = get_rtm_tasks ( list_name , status ) [EOL] except NoListException as e : [EOL] click . secho ( e . message , fg = [string] ) [EOL] return [EOL] except NoTasksException as e : [EOL] click . secho ( e . message , fg = [string] ) [EOL] return [EOL] [EOL] dates = { [string] : due , [string] : due_before , [string] : due_after , [string] : completed_on , [string] : completed_before , [string] : completed_after } [EOL] [EOL] try : [EOL] tasks = create_Task_list ( rtm_tasks , tag = tag , dates = dates , status = status ) [EOL] except NoTasksException as e : [EOL] click . secho ( e . message , fg = [string] ) [EOL] return [EOL] except UnrecognizedDateFormat as e : [EOL] click . secho ( e . message , fg = [string] ) [EOL] return [EOL] except MonthOrDayTooHigh as e : [EOL] click . secho ( e . message , fg = [string] ) [EOL] return [EOL] [EOL] [EOL] if method == [string] : [EOL] return display_tasks ( [string] , list_name , tag , tasks , status ) [EOL] else : [EOL] return display_tasks ( [string] , list_name , tag , tasks , status , filename ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParserconfigparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0