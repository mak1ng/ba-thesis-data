from typing import List , Any , Dict [EOL] import requests [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] import json [EOL] import pprint [EOL] import requests [EOL] from typing import Any , Dict , List [EOL] [EOL] class JsonResponse ( object ) : [EOL] def __init__ ( self , response ) : [EOL] self . response = response [EOL] self . json = response . json ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] content = json . dumps ( self . json ) [EOL] return pprint . pformat ( content , width = [number] ) [EOL] [EOL] def is_200 ( self ) : [EOL] return self . response . status_code == [number] [EOL] [EOL] class JobResponse ( JsonResponse ) : [EOL] def has_builds ( self ) : [EOL] if len ( self . json ) and [string] in self . json and len ( self . json [ [string] ] ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def get_last_builds ( self , n ) : [EOL] arr = self . json [ [string] ] [ : n ] [EOL] for build in arr : [EOL] build [ [string] ] = [string] . format ( build [ [string] ] ) [EOL] return arr [EOL] [EOL] def get_last_builds_api ( self , n ) : [EOL] return list ( map ( lambda v : v [ [string] ] , self . get_last_builds ( n ) ) ) [EOL] [EOL] class BuildResponse ( JsonResponse ) : [EOL] def is_success ( self ) : [EOL] return self . json [ [string] ] . upper ( ) == [string] [EOL] [EOL] def id ( self ) : [EOL] return self . json [ [string] ] [EOL] [EOL] def time ( self ) : [EOL] tstamp = self . json [ [string] ] / [number] [EOL] return datetime . datetime . fromtimestamp ( tstamp ) . strftime ( [string] ) [EOL] [EOL] def commit_id ( self ) : [EOL] return self . json [ [string] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] [ : [number] ] [EOL] [EOL] def commit_msg ( self ) : [EOL] return self . json [ [string] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] [EOL] [EOL] def job_url ( self ) : [EOL] return self . json [ [string] ] [EOL] [EOL] def artifact_url ( self , relative_path = [string] ) : [EOL] return [string] . format ( self . job_url ( ) , relative_path ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict]$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[EOL]	0
import paramiko [EOL] import builtins [EOL] import shlex [EOL] import paramiko [EOL] [EOL] class SSHClient : [EOL] def __init__ ( self ) : [EOL] self . client = paramiko . SSHClient ( ) [EOL] self . client . load_system_host_keys ( ) [EOL] [EOL] def connect ( self , server , username , port = [number] ) : [EOL] self . client . connect ( server , username = username , port = port ) [EOL] [EOL] def exec_command ( self , command ) : [EOL] stdin , stdout , stderr = self . client . exec_command ( command ) [EOL] out = stdout . read ( ) [EOL] return out . decode ( [string] ) [EOL] [EOL] def upload ( self , local_file , remote_file ) : [EOL] sftp = self . client . open_sftp ( ) [EOL] sftp . put ( local_file , remote_file ) [EOL] sftp . close ( ) [EOL] check = self . exec_command ( [string] . format ( shlex . quote ( remote_file ) ) ) [EOL] return int ( check ) == [number] [EOL] [EOL] def close ( self ) : [EOL] self . client . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $paramiko.sftp_client.SFTPClient$ 0 0 0 0 0 0 0 0 0 $paramiko.sftp_client.SFTPClient$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $paramiko.sftp_client.SFTPClient$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import os , sys [EOL] sys . path . insert ( [number] , os . path . abspath ( os . path . dirname ( os . path . realpath ( __file__ ) ) + [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0