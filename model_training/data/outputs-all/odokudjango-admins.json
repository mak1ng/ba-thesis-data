	0
from typing import Dict , Any , List , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] MEDIA_ROOT = BASE_DIR + [string] [EOL] MEDIA_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] CKEDITOR_UPLOAD_PATH = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List , Type [EOL] import typing [EOL] import example [EOL] from django . contrib . admin import ModelAdmin , register , StackedInline [EOL] [EOL] from . models import Article , Category , Comment , Tag [EOL] [EOL] [EOL] class CommentInline ( StackedInline ) : [EOL] model = Comment [EOL] extra = [number] [EOL] min_num = [number] [EOL] [EOL] [EOL] @ register ( Category ) class CategoryAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , ) [EOL] [EOL] [EOL] @ register ( Article ) class ArticleAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] search_fields = ( [string] , [string] ) [EOL] inlines = [ CommentInline ] [EOL] [EOL] def save_model ( self , request , obj , form , change ) : [EOL] obj . user = request . user [EOL] super ( ArticleAdmin , self ) . save_model ( request , obj , form , change ) [EOL] [EOL] [EOL] @ register ( Tag ) class TagAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Comment]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.List[typing.Type[example.articles.admin.CommentInline]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ArticlesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Type [EOL] import typing [EOL] import example [EOL] from ckeditor_uploader . fields import RichTextUploadingField [EOL] from django . db import models [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( [string] , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Tag ( models . Model ) : [EOL] name = models . CharField ( [string] , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] def article_mainvisual_upload_to ( instance , filename ) : [EOL] return filename [EOL] [EOL] [EOL] class Article ( models . Model ) : [EOL] user = models . ForeignKey ( [string] , verbose_name = [string] , related_name = [string] , editable = False , ) [EOL] category = models . ForeignKey ( Category , verbose_name = [string] , related_name = [string] , ) [EOL] tags = models . ManyToManyField ( Tag , verbose_name = [string] , related_name = [string] , ) [EOL] [EOL] main_visual = models . ImageField ( [string] , upload_to = article_mainvisual_upload_to , ) [EOL] title = models . CharField ( [string] , max_length = [number] ) [EOL] body = RichTextUploadingField ( [string] ) [EOL] [EOL] created_at = models . DateTimeField ( [string] , auto_now_add = True ) [EOL] modified_at = models . DateTimeField ( [string] , auto_now = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] article = models . ForeignKey ( Article , verbose_name = [string] , related_name = [string] , ) [EOL] body = models . TextField ( [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.articles.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , Type [EOL] import typing [EOL] import example [EOL] from django . contrib . admin import register , site [EOL] from django . contrib . auth . admin import UserAdmin as BaseUserAdmin [EOL] from django . contrib . auth . models import Group [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] @ register ( User ) class UserAdmin ( BaseUserAdmin ) : [EOL] fieldsets = ( ( None , { [string] : ( [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , ) } ) , ) [EOL] add_fieldsets = ( ( None , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) , } ) , ) [EOL] list_display = ( [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] ) [EOL] search_fields = ( [string] , ) [EOL] ordering = ( [string] , ) [EOL] filter_horizontal = tuple ( ) [EOL] [EOL] [EOL] site . unregister ( Group ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any , Type [EOL] import typing [EOL] import example [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractBaseUser , BaseUserManager [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class UserManager ( BaseUserManager ) : [EOL] def _create_user ( self , username , password , ** extra_fields ) : [EOL] if not username : [EOL] raise ValueError ( [string] ) [EOL] user = self . model ( username = username , last_login = timezone . now ( ) , ** extra_fields ) [EOL] user . set_password ( password ) [EOL] user . save ( using = self . _db ) [EOL] return user [EOL] [EOL] def create_user ( self , username , ** extra_fields ) : [EOL] return self . _create_user ( username = username , ** extra_fields ) [EOL] [EOL] def create_superuser ( self , username , ** extra_fields ) : [EOL] return self . _create_user ( username = username , is_staff = True , is_superuser = True , ** extra_fields ) [EOL] [EOL] [EOL] class User ( AbstractBaseUser ) : [EOL] USERNAME_FIELD = [string] [EOL] [EOL] username = models . CharField ( [string] , max_length = [number] , unique = True ) [EOL] is_superuser = models . BooleanField ( [string] , default = False ) [EOL] is_staff = models . BooleanField ( [string] , default = False ) [EOL] created_at = models . DateTimeField ( [string] , auto_now_add = True ) [EOL] modified_at = models . DateTimeField ( [string] , auto_now = True ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def get_full_name ( self ) : [EOL] return self . username [EOL] [EOL] def get_short_name ( self ) : [EOL] return self . username [EOL] [EOL] def get_group_permissions ( self , obj = None ) : [EOL] return set ( ) [EOL] [EOL] def get_all_permissions ( self , obj = None ) : [EOL] return set ( ) [EOL] [EOL] def has_perm ( self , perm , obj = None ) : [EOL] return True [EOL] [EOL] def has_perms ( self , perm_list , obj = None ) : [EOL] return True [EOL] [EOL] def has_module_perms ( self , app_label ) : [EOL] return True [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[example.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $example.accounts.models.UserManager$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0