from typing import Any [EOL] import asynctest [EOL] import typing [EOL] [docstring] [EOL] [EOL] from aiohttp import ClientSession [EOL] from aioswitcher . api . messages import ResponseMessageType [EOL] from aioswitcher . consts import STATE_ON , WEEKDAY_TUP [EOL] from asynctest import MagicMock , patch [EOL] from bs4 import BeautifulSoup [EOL] [EOL] import consts [EOL] import mappings [EOL] from helpers import get_local_ip_address , get_next_weekday [EOL] [EOL] BASE_URL_FORMAT = ( [string] + get_local_ip_address ( ) + [string] + str ( consts . TEST_SERVER_PORT ) + [string] ) [EOL] [EOL] URL_GET_STATE = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_GET_STATE ) [EOL] URL_TURN_ON = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_TURN_ON ) [EOL] URL_TURN_OFF = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_TURN_OFF ) [EOL] URL_GET_SCHEDULES = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_GET_SCHEDULES ) [EOL] URL_SET_AUTO_SHUTDOWN = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_SET_AUTO_SHUTDOWN ) [EOL] URL_SET_DEVICE_NAME = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_SET_DEVICE_NAME ) [EOL] URL_ENABLE_SCHEDULE = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_ENABLE_SCHEDULE ) [EOL] URL_DISABLE_SCHEDULE = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_DISABLE_SCHEDULE ) [EOL] URL_DELETE_SCHEDULE = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_DELETE_SCHEDULE ) [EOL] URL_CREATE_SCHEDULE = BASE_URL_FORMAT . format ( mappings . URL_MAPPING_CREATE_SCHEDULE ) [EOL] [EOL] [EOL] async def test_create_schedule_request ( create_schedule_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = create_schedule_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] selected_test_day = WEEKDAY_TUP [ get_next_weekday ( ) ] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ [string] ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . put ( URL_CREATE_SCHEDULE ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert bs4scrap . text == [string] [EOL] [EOL] create_schedule_response . msg_type = ResponseMessageType . STATE [EOL] async with session . put ( URL_CREATE_SCHEDULE , ** { [string] : { consts . PARAM_DAYS : [ selected_test_day ] , consts . PARAM_START_HOURS : [string] , consts . PARAM_START_MINUTES : [string] , consts . PARAM_STOP_HOURS : [string] , consts . PARAM_STOP_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_delete_schedule_request ( delete_schedule_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = delete_schedule_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . delete ( URL_DELETE_SCHEDULE , params = { consts . PARAM_SCHEDULE_ID : [string] } ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . delete ( URL_DELETE_SCHEDULE , ** { [string] : { consts . PARAM_SCHEDULE_ID : [string] } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . delete ( URL_DELETE_SCHEDULE , params = { consts . PARAM_SCHEDULE_ID : [string] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . delete ( URL_DELETE_SCHEDULE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] delete_schedule_response . msg_type = ResponseMessageType . STATE [EOL] async with session . delete ( URL_DELETE_SCHEDULE , params = { consts . PARAM_SCHEDULE_ID : [string] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_disable_schedule_request ( disable_enable_schedule_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = disable_enable_schedule_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . patch ( URL_DISABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . patch ( URL_DISABLE_SCHEDULE , ** { [string] : { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . patch ( URL_DISABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . patch ( URL_DISABLE_SCHEDULE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] disable_enable_schedule_response . msg_type = ( ResponseMessageType . STATE ) [EOL] async with session . patch ( URL_DISABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_enable_schedule_request ( disable_enable_schedule_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = disable_enable_schedule_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . patch ( URL_ENABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . patch ( URL_ENABLE_SCHEDULE , ** { [string] : { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . patch ( URL_ENABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . patch ( URL_ENABLE_SCHEDULE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] disable_enable_schedule_response . msg_type = ( ResponseMessageType . STATE ) [EOL] async with session . patch ( URL_ENABLE_SCHEDULE , params = { consts . PARAM_SCHEDULE_DATA : consts . DUMMY_SCHEDULE_DATA } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_get_schedules_request ( get_schedules_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = get_schedules_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . get ( URL_GET_SCHEDULES ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] assert body [ consts . KEY_FOUND_SCHEDULES ] [EOL] assert len ( body [ consts . KEY_SCHEDULES ] ) == [number] [EOL] assert ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_SCHEDULE_ID ] == consts . DUMMY_SCHEDULE_ID ) [EOL] assert body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_ENABLED ] [EOL] assert body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_RECURRING ] [EOL] [EOL] assert len ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_DAYS ] ) == [number] [EOL] assert ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_DAYS ] [ [number] ] == WEEKDAY_TUP [ get_next_weekday ( ) ] ) [EOL] [EOL] assert ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_START_TIME ] == consts . DUMMY_START_TIME ) [EOL] assert ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_END_TIME ] == consts . DUMMY_END_TIME ) [EOL] assert ( body [ consts . KEY_SCHEDULES ] [ [number] ] [ consts . KEY_DURATION ] == consts . DUMMY_DURATION ) [EOL] [EOL] get_schedules_response . successful = False [EOL] async with session . get ( URL_GET_SCHEDULES ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] [EOL] async def test_get_state_request ( get_state_response ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = get_state_response , ) as patcher : [EOL] async with ClientSession ( ) as session : [EOL] async with session . get ( URL_GET_STATE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] assert body [ consts . KEY_STATE ] == STATE_ON [EOL] assert body [ consts . KEY_TIME_LEFT ] == consts . DUMMY_TIME_LEFT [EOL] assert body [ consts . KEY_TIME_ON ] == consts . DUMMY_TIME_ON [EOL] assert body [ consts . KEY_AUTO_OFF ] == consts . DUMMY_AUTO_OFF [EOL] assert body [ consts . KEY_POWER_CONSUMPTION ] == ( consts . DUMMY_POWER_CONSUMPTION ) [EOL] assert body [ consts . KEY_ELECTRIC_CURRENT ] == ( consts . DUMMY_ELECTRIC_CURRENT ) [EOL] [EOL] get_state_response . init_future . result ( ) . successful = False [EOL] async with ClientSession ( ) as session : [EOL] async with session . get ( URL_GET_STATE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] patcher . return_value = None [EOL] async with session . get ( URL_GET_STATE ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] [EOL] async def test_set_auto_shutdown_request ( set_auto_shutdown_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = set_auto_shutdown_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . post ( URL_SET_AUTO_SHUTDOWN , params = { consts . PARAM_HOURS : [string] , consts . PARAM_MINUTES : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_SET_AUTO_SHUTDOWN , ** { [string] : { consts . PARAM_HOURS : [string] , consts . PARAM_MINUTES : [string] , } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_SET_AUTO_SHUTDOWN , params = { consts . PARAM_HOURS : [string] , consts . PARAM_MINUTES : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . post ( URL_SET_AUTO_SHUTDOWN ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] set_auto_shutdown_response . msg_type = ResponseMessageType . STATE [EOL] async with session . post ( URL_SET_AUTO_SHUTDOWN , params = { consts . PARAM_HOURS : [string] , consts . PARAM_MINUTES : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_set_device_name_request ( set_device_name_response , ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = set_device_name_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . post ( URL_SET_DEVICE_NAME , params = { consts . PARAM_NAME : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_SET_DEVICE_NAME , ** { [string] : { consts . PARAM_NAME : [string] } } , ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_SET_DEVICE_NAME , params = { consts . PARAM_NAME : [string] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] async with session . post ( URL_SET_DEVICE_NAME ) as response : [EOL] assert response . status == [number] [EOL] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert bs4scrap . text == [string] [EOL] [EOL] set_device_name_response . msg_type = ResponseMessageType . STATE [EOL] async with session . post ( URL_SET_DEVICE_NAME , params = { consts . PARAM_NAME : [string] } , ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_turn_off_request ( control_response ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = control_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . post ( URL_TURN_OFF ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] control_response . successful = False [EOL] async with session . post ( URL_TURN_OFF ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE not in body [EOL] [EOL] control_response . msg_type = ResponseMessageType . STATE [EOL] async with session . post ( URL_TURN_OFF ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] [EOL] async def test_turn_on_request ( control_response ) : [EOL] [docstring] [EOL] with patch ( [string] , return_value = control_response , ) : [EOL] async with ClientSession ( ) as session : [EOL] async with session . post ( URL_TURN_ON ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_TURN_ON , params = { consts . PARAM_MINUTES : [number] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_TURN_ON , ** { [string] : { consts . PARAM_MINUTES : [number] } } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_TURN_ON , params = { consts . PARAM_MINUTES : [number] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert ( bs4scrap . text == [string] ) [EOL] [EOL] control_response . msg_type = ResponseMessageType . STATE [EOL] async with session . post ( URL_TURN_ON ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] assert consts . KEY_MESSAGE in body [EOL] [EOL] control_response . successful = False [EOL] control_response . msg_type = ResponseMessageType . CONTROL [EOL] async with session . post ( URL_TURN_ON ) as response : [EOL] assert response . status == [number] [EOL] body = await response . json ( ) [EOL] assert not body [ consts . KEY_SUCCESSFUL ] [EOL] [EOL] async with session . post ( URL_TURN_ON , params = { consts . PARAM_MINUTES : [string] } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert bs4scrap . h1 . text == [string] [EOL] [EOL] async with session . post ( URL_TURN_ON , ** { [string] : { consts . PARAM_MINUTES : [string] } } ) as response : [EOL] assert response . status == [number] [EOL] body = await response . text ( ) [EOL] bs4scrap = BeautifulSoup ( body , [string] ) [EOL] assert bs4scrap . h1 . text == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] TEST_SERVER_PORT = [number] [EOL] [EOL] DUMMY_TIME_LEFT = [string] [EOL] DUMMY_TIME_ON = [string] [EOL] DUMMY_AUTO_OFF = [string] [EOL] DUMMY_POWER_CONSUMPTION = [number] [EOL] DUMMY_ELECTRIC_CURRENT = [number] [EOL] [EOL] DUMMY_SCHEDULE_ID = [string] [EOL] DUMMY_START_TIME = [string] [EOL] DUMMY_END_TIME = [string] [EOL] DUMMY_DURATION = [string] [EOL] [EOL] DUMMY_SCHEDULE_DATA = [string] [EOL] [EOL] KEY_AUTO_OFF = [string] [EOL] KEY_DAYS = [string] [EOL] KEY_DURATION = [string] [EOL] KEY_ELECTRIC_CURRENT = [string] [EOL] KEY_ENABLED = [string] [EOL] KEY_END_TIME = [string] [EOL] KEY_FOUND_SCHEDULES = [string] [EOL] KEY_MESSAGE = [string] [EOL] KEY_NEXT_RUN = [string] [EOL] KEY_POWER_CONSUMPTION = [string] [EOL] KEY_RECURRING = [string] [EOL] KEY_SCHEDULES = [string] [EOL] KEY_SCHEDULE_DATA = [string] [EOL] KEY_SCHEDULE_ID = [string] [EOL] KEY_STATE = [string] [EOL] KEY_START_TIME = [string] [EOL] KEY_SUCCESSFUL = [string] [EOL] KEY_TIME_LEFT = [string] [EOL] KEY_TIME_ON = [string] [EOL] [EOL] PARAM_DAYS = [string] [EOL] PARAM_HOURS = [string] [EOL] PARAM_MINUTES = [string] [EOL] PARAM_NAME = [string] [EOL] PARAM_SCHEDULE_DATA = [string] [EOL] PARAM_SCHEDULE_ID = [string] [EOL] PARAM_START_HOURS = [string] [EOL] PARAM_START_MINUTES = [string] [EOL] PARAM_STOP_HOURS = [string] [EOL] PARAM_STOP_MINUTES = [string] [EOL]	0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Literal , Union [EOL] import typing_extensions [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from datetime import datetime [EOL] from socket import gethostbyname , gethostname [EOL] [EOL] from pytz import utc [EOL] [EOL] [EOL] def get_local_ip_address ( ) : [EOL] [docstring] [EOL] return gethostbyname ( gethostname ( ) ) [EOL] [EOL] [EOL] def get_next_weekday ( is_iso = False ) : [EOL] [docstring] [EOL] max_day = [number] if is_iso else [number] [EOL] current_day = datetime . now ( utc ) . isoweekday ( ) [EOL] if current_day < max_day : [EOL] return current_day + [number] [EOL] return [number] if max_day == [number] else [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] URL_MAPPING_GET_STATE = [string] [EOL] URL_MAPPING_TURN_ON = [string] [EOL] URL_MAPPING_TURN_OFF = [string] [EOL] URL_MAPPING_SET_AUTO_SHUTDOWN = [string] [EOL] URL_MAPPING_SET_DEVICE_NAME = [string] [EOL] URL_MAPPING_GET_SCHEDULES = [string] [EOL] URL_MAPPING_ENABLE_SCHEDULE = [string] [EOL] URL_MAPPING_DISABLE_SCHEDULE = [string] [EOL] URL_MAPPING_DELETE_SCHEDULE = [string] [EOL] URL_MAPPING_CREATE_SCHEDULE = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from os import path as os_path [EOL] from sys import path as sys_path [EOL] [EOL] sys_path . insert ( [number] , os_path . abspath ( [string] ) ) [EOL] [EOL] with open ( [string] , [string] ) as version_file : [EOL] version = version_file . readline ( ) [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] release = version [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] exclude_patterns = [ [string] ] [EOL] pygments_style = [string] [EOL] html_theme = [string] [EOL] language = [string] [EOL] show_authors = False [EOL] linkcheck_anchors = True [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL] [EOL] [comment] [EOL] autodoc_mock_imports = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0