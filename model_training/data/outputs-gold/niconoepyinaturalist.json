from typing import Any , Dict , Optional [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] [docstring] [EOL] from datetime import date , datetime [EOL] from typing import Any , Dict , Optional [EOL] [EOL] from dateutil . parser import parse as parse_timestamp [EOL] from dateutil . tz import tzlocal [EOL] from pyinaturalist . constants import DATETIME_PARAMS [EOL] [EOL] [EOL] [comment] [EOL] def merge_two_dicts ( x , y ) : [EOL] z = x . copy ( ) [EOL] z . update ( y ) [EOL] return z [EOL] [EOL] [EOL] def preprocess_request_params ( params ) : [EOL] [docstring] [EOL] if not params : [EOL] return { } [EOL] [EOL] params = convert_bool_params ( params ) [EOL] params = convert_datetime_params ( params ) [EOL] params = convert_list_params ( params ) [EOL] params = strip_empty_params ( params ) [EOL] return params [EOL] [EOL] [EOL] def is_int ( value ) : [EOL] [docstring] [EOL] try : [EOL] int ( value ) [EOL] return True [EOL] except ( TypeError , ValueError ) : [EOL] return False [EOL] [EOL] [EOL] def convert_bool_params ( params ) : [EOL] [docstring] [EOL] for k , v in params . items ( ) : [EOL] if isinstance ( v , bool ) : [EOL] params [ k ] = str ( v ) . lower ( ) [EOL] return params [EOL] [EOL] [EOL] def convert_datetime_params ( params ) : [EOL] [docstring] [EOL] for k , v in params . items ( ) : [EOL] if isinstance ( v , datetime ) or isinstance ( v , date ) : [EOL] params [ k ] = _isoformat ( v ) [EOL] if k in DATETIME_PARAMS : [EOL] params [ k ] = _isoformat ( parse_timestamp ( v ) ) [EOL] [EOL] return params [EOL] [EOL] [EOL] def convert_list_params ( params ) : [EOL] [docstring] [EOL] for k , v in params . items ( ) : [EOL] if isinstance ( v , list ) : [EOL] params [ k ] = [string] . join ( map ( str , v ) ) [EOL] return params [EOL] [EOL] [EOL] def strip_empty_params ( params ) : [EOL] [docstring] [EOL] return { k : v for k , v in params . items ( ) if v or v is False } [EOL] [EOL] [EOL] def _isoformat ( d ) : [EOL] [docstring] [EOL] if isinstance ( d , datetime ) and not d . tzinfo : [EOL] d = d . replace ( tzinfo = tzlocal ( ) ) [EOL] return d . isoformat ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class AuthenticationError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ObservationNotFound ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Iterable , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] from typing import Any , Dict , List , Iterable [EOL] [EOL] from pyinaturalist . constants import RANKS [EOL] [EOL] [EOL] def as_geojson_feature_collection ( results , properties = None ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [ as_geojson_feature ( record , properties ) for record in results ] , } [EOL] [EOL] [EOL] def as_geojson_feature ( result , properties = None ) : [EOL] [docstring] [EOL] result [ [string] ] [ [string] ] = [ float ( i ) for i in result [ [string] ] [ [string] ] ] [EOL] return { [string] : [string] , [string] : result [ [string] ] , [string] : { k : result . get ( k ) for k in properties or [ ] } , } [EOL] [EOL] [EOL] def flatten_nested_params ( observation ) : [EOL] [docstring] [EOL] taxon = observation . get ( [string] , { } ) [EOL] photos = observation . get ( [string] , [ { } ] ) [EOL] observation [ [string] ] = taxon . get ( [string] ) [EOL] observation [ [string] ] = taxon . get ( [string] ) [EOL] observation [ [string] ] = taxon . get ( [string] ) [EOL] observation [ [string] ] = taxon . get ( [string] ) [EOL] observation [ [string] ] = photos [ [number] ] . get ( [string] ) [EOL] return observation [EOL] [EOL] [EOL] def format_taxon ( taxon ) : [EOL] [docstring] [EOL] [comment] [EOL] common = taxon . get ( [string] ) [EOL] return [string] . format ( taxon [ [string] ] , taxon [ [string] ] . title ( ) , taxon [ [string] ] , [string] . format ( common ) if common else [string] , ) [EOL] [EOL] [EOL] def _get_rank_range ( min_rank = None , max_rank = None ) : [EOL] [docstring] [EOL] min_rank_index = _get_rank_index ( min_rank ) if min_rank else [number] [EOL] max_rank_index = _get_rank_index ( max_rank ) + [number] if max_rank else len ( RANKS ) [EOL] return RANKS [ min_rank_index : max_rank_index ] [EOL] [EOL] [EOL] def _get_rank_index ( rank ) : [EOL] if rank not in RANKS : [EOL] raise ValueError ( [string] ) [EOL] return RANKS . index ( rank ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict , Union , List [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] [EOL] import pytest [EOL] from requests import HTTPError [EOL] from urllib . parse import urljoin [EOL] [EOL] from pyinaturalist . constants import INAT_BASE_URL [EOL] from pyinaturalist . rest_api import ( OBSERVATION_FORMATS , get_access_token , get_all_observation_fields , get_observations , get_observation_fields , update_observation , create_observations , put_observation_field_values , delete_observation , ) [EOL] from pyinaturalist . exceptions import AuthenticationError , ObservationNotFound [EOL] from test . conftest import load_sample_data [EOL] [EOL] PAGE_1_JSON_RESPONSE = load_sample_data ( [string] ) [EOL] PAGE_2_JSON_RESPONSE = load_sample_data ( [string] ) [EOL] [EOL] [EOL] def get_observations_response ( response_format ) : [EOL] response_format = response_format . replace ( [string] , [string] ) [EOL] return str ( load_sample_data ( [string] . format ( response_format ) ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , OBSERVATION_FORMATS ) def test_get_observations ( response_format , requests_mock ) : [EOL] [docstring] [EOL] response = get_observations_response ( response_format ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if response_format == [string] : [EOL] requests_mock . get ( urljoin ( INAT_BASE_URL , [string] . format ( response_format ) ) , status_code = [number] , json = response , ) [EOL] else : [EOL] requests_mock . get ( urljoin ( INAT_BASE_URL , [string] . format ( response_format ) ) , status_code = [number] , text = response , ) [EOL] [EOL] observations = get_observations ( id = [number] , response_format = response_format ) [EOL] assert observations == response [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_get_observations__invalid_format ( response_format ) : [EOL] with pytest . raises ( ValueError ) : [EOL] get_observations ( id = [number] , response_format = response_format ) [EOL] [EOL] [EOL] def test_get_observation_fields ( requests_mock ) : [EOL] [docstring] [EOL] [EOL] requests_mock . get ( [string] , json = PAGE_2_JSON_RESPONSE , status_code = [number] , ) [EOL] [EOL] obs_fields = get_observation_fields ( search_query = [string] , page = [number] ) [EOL] assert obs_fields == PAGE_2_JSON_RESPONSE [EOL] [EOL] [EOL] def test_get_all_observation_fields ( requests_mock ) : [EOL] [docstring] [EOL] [EOL] requests_mock . get ( [string] , json = PAGE_1_JSON_RESPONSE , status_code = [number] , ) [EOL] [EOL] requests_mock . get ( [string] , json = PAGE_2_JSON_RESPONSE , status_code = [number] , ) [EOL] [EOL] page_3_json_response = [ ] [EOL] requests_mock . get ( [string] , json = page_3_json_response , status_code = [number] , ) [EOL] [EOL] all_fields = get_all_observation_fields ( search_query = [string] ) [EOL] assert all_fields == PAGE_1_JSON_RESPONSE + PAGE_2_JSON_RESPONSE [EOL] [EOL] [EOL] def test_get_all_observation_fields_noparam ( requests_mock ) : [EOL] [docstring] [EOL] requests_mock . get ( [string] , json = [ ] , status_code = [number] , ) [EOL] [EOL] get_all_observation_fields ( ) [EOL] [EOL] [EOL] def test_get_access_token_fail ( requests_mock ) : [EOL] [docstring] [EOL] [EOL] rejection_json = { [string] : [string] , [string] : [string] [string] [string] [string] , } [EOL] requests_mock . post ( [string] , json = rejection_json , status_code = [number] , ) [EOL] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_access_token ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def test_get_access_token ( requests_mock ) : [EOL] [docstring] [EOL] [EOL] accepted_json = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , } [EOL] requests_mock . post ( [string] , json = accepted_json , status_code = [number] , ) [EOL] [EOL] token = get_access_token ( [string] , [string] , [string] , [string] ) [EOL] [EOL] assert token == [string] [EOL] [EOL] [EOL] def test_update_observation ( requests_mock ) : [EOL] requests_mock . put ( [string] , json = load_sample_data ( [string] ) , status_code = [number] , ) [EOL] [EOL] p = { [string] : [number] , [string] : { [string] : [string] } , } [EOL] r = update_observation ( observation_id = [number] , params = p , access_token = [string] ) [EOL] [EOL] [comment] [EOL] assert len ( r ) == [number] [EOL] assert r [ [number] ] [ [string] ] == [number] [EOL] assert r [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_update_nonexistent_observation ( requests_mock ) : [EOL] [docstring] [EOL] requests_mock . put ( [string] , json = { [string] : [string] } , status_code = [number] , ) [EOL] [EOL] p = { [string] : [number] , [string] : { [string] : [string] } , } [EOL] [EOL] with pytest . raises ( HTTPError ) as excinfo : [EOL] update_observation ( observation_id = [number] , params = p , access_token = [string] ) [EOL] assert excinfo . value . response . status_code == [number] [EOL] assert excinfo . value . response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_update_observation_not_mine ( requests_mock ) : [EOL] [docstring] [EOL] requests_mock . put ( [string] , json = { [string] : [string] } , status_code = [number] , ) [EOL] [EOL] p = { [string] : [number] , [string] : { [string] : [string] } , } [EOL] [EOL] with pytest . raises ( HTTPError ) as excinfo : [EOL] update_observation ( observation_id = [number] , params = p , access_token = [string] , ) [EOL] assert excinfo . value . response . status_code == [number] [EOL] assert excinfo . value . response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_create_observation ( requests_mock ) : [EOL] requests_mock . post ( [string] , json = load_sample_data ( [string] ) , status_code = [number] , ) [EOL] [EOL] params = { [string] : { [string] : [string] } , } [EOL] [EOL] r = create_observations ( params = params , access_token = [string] ) [EOL] assert len ( r ) == [number] [comment] [EOL] assert ( r [ [number] ] [ [string] ] is None ) [comment] [EOL] assert r [ [number] ] [ [string] ] == [number] [comment] [EOL] [EOL] [EOL] def test_create_observation_fail ( requests_mock ) : [EOL] params = { [string] : { [string] : [string] , [string] : ( datetime . now ( ) + timedelta ( days = [number] ) ) . isoformat ( ) , [string] : [number] , } } [EOL] [EOL] requests_mock . post ( [string] , json = load_sample_data ( [string] ) , status_code = [number] , ) [EOL] [EOL] with pytest . raises ( HTTPError ) as excinfo : [EOL] create_observations ( params = params , access_token = [string] ) [EOL] assert excinfo . value . response . status_code == [number] [EOL] assert [string] in excinfo . value . response . json ( ) [comment] [EOL] [EOL] [EOL] def test_put_observation_field_values ( requests_mock ) : [EOL] requests_mock . put ( [string] , json = load_sample_data ( [string] ) , status_code = [number] , ) [EOL] [EOL] r = put_observation_field_values ( observation_id = [number] , observation_field_id = [number] , value = [string] , access_token = [string] , ) [EOL] [EOL] assert r [ [string] ] == [number] [EOL] assert r [ [string] ] == [number] [EOL] assert r [ [string] ] == [number] [EOL] assert r [ [string] ] == [string] [EOL] [EOL] [EOL] def test_delete_observation ( ) : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] def test_delete_unexisting_observation ( requests_mock ) : [EOL] [docstring] [EOL] requests_mock . delete ( [string] , status_code = [number] ) [EOL] [EOL] with pytest . raises ( ObservationNotFound ) : [EOL] delete_observation ( observation_id = [number] , access_token = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0