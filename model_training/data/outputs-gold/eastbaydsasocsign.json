from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Type , List , Any [EOL] import typing [EOL] import socsign [EOL] from django import forms [EOL] [EOL] from . models import EventForm [EOL] [EOL] from crispy_forms . helper import FormHelper [EOL] from crispy_forms . layout import Submit , Layout [EOL] [EOL] from localflavor . us . forms import USZipCodeField [EOL] from phonenumber_field . formfields import PhoneNumberField [EOL] [EOL] [EOL] class EventFormBase ( forms . Form ) : [EOL] email = forms . EmailField ( required = True ) [EOL] first_name = forms . CharField ( required = True ) [EOL] last_name = forms . CharField ( required = True ) [EOL] mobile_number = PhoneNumberField ( required = False ) [EOL] home_phone_number = PhoneNumberField ( required = False ) [EOL] address = forms . CharField ( required = False ) [EOL] city = forms . CharField ( required = False ) [EOL] zip_code = USZipCodeField ( required = False ) [EOL] [EOL] interest = forms . MultipleChoiceField ( required = False , label = [string] , widget = forms . CheckboxSelectMultiple , choices = [ ] , ) [EOL] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] event = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . helper = FormHelper ( ) [EOL] self . helper . form_class = [string] [EOL] self . helper . label_class = [string] [EOL] self . helper . field_class = [string] [EOL] [EOL] self . helper . add_input ( Submit ( [string] , [string] , css_class = [string] ) ) [EOL] [EOL] self . fields [ [string] ] . choices = [ ( choice . tag , choice . caption ) for choice in event . interest_choices . all ( ) ] [EOL] [EOL] def get_tags ( self , event ) : [EOL] tags = list ( self . cleaned_data [ [string] ] ) [EOL] tags . append ( event . event_tag ) [EOL] return tags [EOL] [EOL] class EventFormStandard ( EventFormBase ) : [EOL] pass [EOL] [EOL] [EOL] class EventFormLabor ( EventFormBase ) : [EOL] labor_member = forms . ChoiceField ( label = [string] , required = False , choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] , ) [EOL] [EOL] wants_labor_help = forms . ChoiceField ( label = [string] , required = False , choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] , ) [EOL] [EOL] union = forms . CharField ( label = [string] , required = False , ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormBase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormLabor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormLabor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.forms.EventFormLabor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , Any [EOL] import typing [EOL] import socsign [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] import os [EOL] import binascii [EOL] [EOL] def random_hex ( count = [number] ) : [EOL] return binascii . b2a_hex ( os . urandom ( count ) ) [ : count ] . decode ( [string] ) [EOL] [EOL] def validate_tag ( data ) : [EOL] if not data . replace ( [string] , [string] ) . isalnum ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class InterestChoice ( models . Model ) : [EOL] caption = models . CharField ( max_length = [number] ) [EOL] tag = models . CharField ( max_length = [number] , unique = True , validators = [ validate_tag ] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . caption [EOL] [EOL] class EventForm ( models . Model ) : [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] last_updated = models . DateTimeField ( auto_now = True ) [EOL] [EOL] public_hex = models . CharField ( max_length = [number] , default = random_hex , unique = True , ) [EOL] secret_hex = models . CharField ( max_length = [number] , default = random_hex ) [EOL] [EOL] event_id = models . CharField ( max_length = [number] ) [EOL] event_tag = models . CharField ( max_length = [number] , validators = [ validate_tag ] ) [EOL] event_title = models . CharField ( max_length = [number] ) [EOL] [EOL] VARIANT = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] variant = models . CharField ( [string] , choices = VARIANT , default = [string] , max_length = [number] , ) [EOL] [EOL] start_time = models . DateTimeField ( ) [EOL] end_time = models . DateTimeField ( ) [EOL] [EOL] interest_choices = models . ManyToManyField ( [string] , default = InterestChoice . objects . all , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . event_title , self . event_tag ) [EOL] [EOL] def get_submission_count ( self ) : [EOL] return self . records . all ( ) . count ( ) [EOL] [EOL] [comment] [EOL] def get_absolute_url ( self ) : [EOL] public_hex = self . public_hex [EOL] secret_hex = self . secret_hex [EOL] url = reverse ( [string] , args = ( public_hex , ) ) [EOL] return [string] % ( url , str ( secret_hex ) ) [EOL] [EOL] [EOL] class Record ( models . Model ) : [EOL] event = models . ForeignKey ( EventForm , on_delete = models . CASCADE , related_name = [string] , ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.models.EventForm]$ 0 0 0 0 0 0 0 $typing.Type[socsign.signin.models.EventForm]$ 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.models.EventForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.models.Record]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socsign.signin.models.Record]$ 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SigninConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Optional , Union , List , Dict , Any [EOL] import typing [EOL] nb_events = { [string] : [string] , [string] : None , [string] : [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [number] , [string] : [string] , [string] : None , [string] : [ [string] ] , [string] : [string] , [string] : [number] , [string] : { [string] : [string] , [string] : None , [string] : True , [string] : [string] , [string] : True } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : True , [string] : False } , [string] : [number] , [string] : True , [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } } , [string] : { [string] : None , [string] : None , [string] : None } , [string] : [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , } ] } , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [number] , [string] : [string] , [string] : None , [string] : [ ] , [string] : None , [string] : None , [string] : { [string] : None , [string] : None , [string] : True , [string] : None , [string] : True } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : True , [string] : False } , [string] : [number] , [string] : True , [string] : { [string] : None , [string] : None } , [string] : { [string] : [number] , [string] : [string] , [string] : None } , [string] : None } ] } [EOL] [EOL] [EOL] example_person = { [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : False , [string] : False , [string] : None , [string] : [string] , [string] : True , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : False , [string] : [number] , [string] : False , [string] : False , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : True , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : { [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None } , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [number] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Optional[builtins.str]],typing.List[builtins.str],builtins.int,builtins.str
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , List , Dict [EOL] import typing [EOL] import logging [EOL] import requests [EOL] import json [EOL] import logging [EOL] import requests [EOL] [EOL] from django . utils . dateparse import parse_datetime [EOL] from django . conf import settings [EOL] [EOL] from . helpers import throttle , prune_dict [EOL] [EOL] [EOL] [comment] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] DOMAIN = [string] % settings . NB_SITE_SLUG [EOL] PARAMS = { [string] : settings . NB_TOKEN } [EOL] [EOL] def _url_pages ( page ) : [EOL] template = [string] . join ( [ DOMAIN , [string] , [string] , ] ) [EOL] uri = template . format ( slug = settings . NB_SITE_SLUG , token = settings . NB_TOKEN , page = page , ) [EOL] return uri [EOL] [EOL] [EOL] def _url_base ( * path ) : [EOL] return [string] . join ( ( f' [string] { settings . NB_SITE_SLUG } [string] ' , [string] , ) + path ) [EOL] [EOL] [EOL] @ throttle ( ) def get_upcoming_events ( ) : [EOL] response = requests . get ( _url_pages ( [string] ) ) [EOL] nb_events = response . json ( ) [EOL] results = [ ] [EOL] for event in nb_events [ [string] ] : [EOL] [comment] [EOL] [comment] [EOL] results . append ( { [string] : event [ [string] ] , [string] : event [ [string] ] , [string] : event [ [string] ] , [string] : event [ [string] ] , } ) [EOL] return results [EOL] [EOL] def person_add ( info , tags , parse_response = False ) : [EOL] [docstring] [EOL] info_dict = { [string] : info [ [string] ] , [string] : info [ [string] ] , [string] : info [ [string] ] , [string] : str ( info [ [string] ] ) , [string] : str ( info [ [string] ] ) , [string] : { [string] : info [ [string] ] , [string] : info [ [string] ] , [string] : info [ [string] ] , } , [string] : tags , } [EOL] [EOL] [comment] [EOL] prune_dict ( info_dict ) [EOL] json_dict = { [string] : info_dict } [EOL] url = _url_base ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if not parse_response : [EOL] requests . put ( url , json = json_dict , params = PARAMS ) [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] response = requests . put ( url , json = json_dict , params = PARAMS ) [EOL] except Exception as e : [EOL] logger . error ( [string] % str ( e ) ) [EOL] [EOL] try : [EOL] d = response . json ( ) [EOL] except Exception as e : [EOL] logger . error ( [string] % str ( e ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] id_result = d . get ( [string] , { } ) . get ( [string] ) [EOL] logger . info ( [string] % str ( id_result ) ) [EOL] return id_result [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] import datetime [EOL] from functools import wraps [EOL] from datetime import datetime , timedelta [EOL] [EOL] [comment] [EOL] [comment] [EOL] class throttle : [EOL] [docstring] [EOL] def __init__ ( self , seconds = [number] ) : [EOL] self . throttle_period = timedelta ( seconds = seconds ) [EOL] self . time_of_last_call = datetime . min [EOL] self . last_return = None [EOL] [EOL] def __call__ ( self , fn ) : [EOL] @ wraps ( fn ) def wrapper ( * args , ** kwargs ) : [EOL] now = datetime . now ( ) [EOL] time_since_last_call = now - self . time_of_last_call [EOL] if time_since_last_call > self . throttle_period : [EOL] self . time_of_last_call = now [EOL] self . last_return = fn ( * args , ** kwargs ) [EOL] return self . last_return [EOL] return wrapper [EOL] [EOL] def prune_dict ( d ) : [EOL] [docstring] [EOL] to_delete = set ( ) [EOL] for key in d : [EOL] if not d [ key ] : [EOL] to_delete . add ( key ) [EOL] elif isinstance ( d [ key ] , dict ) : [EOL] prune_dict ( d [ key ] ) [EOL] if not d [ key ] . keys ( ) : [EOL] to_delete . add ( key ) [EOL] [EOL] for key in to_delete : [EOL] del d [ key ] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime.timedelta$ 0 $datetime.datetime$ 0 0 0 0 0 0 $datetime.datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Type , Dict [EOL] import typing [EOL] import socsign [EOL] from django . shortcuts import render , get_object_or_404 , redirect [EOL] [EOL] from . models import EventForm , Record [EOL] from . forms import EventFormStandard , EventFormLabor [EOL] [EOL] from . import nbapi [EOL] [EOL] form_variants = { [string] : EventFormStandard , [string] : EventFormLabor , } [EOL] [EOL] def event_form ( request , public_hex ) : [EOL] event = get_object_or_404 ( EventForm , public_hex = public_hex ) [EOL] [EOL] FormClass = form_variants [ event . variant ] [EOL] [EOL] request . session [ [string] ] = public_hex [EOL] [EOL] if request . method == [string] : [EOL] [comment] [EOL] form = FormClass ( event = event ) [EOL] else : [EOL] [comment] [EOL] form = FormClass ( request . POST , event = event ) [EOL] if form . is_valid ( ) : [EOL] tags = form . get_tags ( event ) [EOL] [EOL] [comment] [EOL] nbapi . person_add ( form . cleaned_data , tags ) [EOL] [EOL] [comment] [EOL] Record . objects . create ( event = event ) [EOL] [EOL] ctx = { [string] : True , [string] : [number] , } [EOL] return render ( request , [string] , ctx ) [EOL] [EOL] ctx = { [string] : form , [string] : event , } [EOL] return render ( request , [string] , ctx ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[socsign.signin.forms.EventFormLabor,socsign.signin.forms.EventFormStandard]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[socsign.signin.forms.EventFormLabor,socsign.signin.forms.EventFormStandard]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from socsign . users . views import user_redirect_view [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , view = user_redirect_view , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . urls import reverse [EOL] from django . views . generic import DetailView , ListView , RedirectView , UpdateView [EOL] [EOL] class UserRedirectView ( LoginRequiredMixin , RedirectView ) : [EOL] [EOL] permanent = False [EOL] [EOL] def get_redirect_url ( self ) : [EOL] return [string] [EOL] [EOL] user_redirect_view = UserRedirectView . as_view ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import include , path [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . views . generic import TemplateView [EOL] from django . views . generic import RedirectView [EOL] from django . views import defaults as default_views [EOL] [EOL] from socsign . signin . views import event_form [EOL] [EOL] urlpatterns = [ path ( [string] , RedirectView . as_view ( pattern_name = [string] , permanent = False ) , name = [string] , ) , path ( [string] , event_form , name = [string] ) , path ( settings . ADMIN_URL , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) , ) , path ( [string] , include ( [string] ) ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . server_error ) , ] [EOL] if [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
	0