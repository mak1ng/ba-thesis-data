[comment] [EOL] [EOL] from os import path [EOL] from glob import glob [EOL] from distutils . core import setup [EOL] from setuptools import find_packages [EOL] [EOL] SOURCES_ROOT = path . abspath ( path . dirname ( __file__ ) ) [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = open ( path . join ( SOURCES_ROOT , [string] ) ) . read ( ) , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , packages = find_packages ( exclude = [ [string] , [string] ] ) , data_files = [ ( [string] , [ [string] ] ) , ( [string] , glob ( path . join ( SOURCES_ROOT , [string] ) ) ) ] , install_requires = [ [string] , [string] , [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import slack [EOL] import os [EOL] [EOL] _CI_ALERTS_CHANNEL = [string] [EOL] _INTERNAL_ERRORS_CHANNEL = [string] [EOL] [EOL] [EOL] class SlackCommunicator : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , slack_token ) : [EOL] self . _queued_messages = { } [EOL] self . _queued_messages [ _CI_ALERTS_CHANNEL ] = [ ] [EOL] self . _queued_messages [ _INTERNAL_ERRORS_CHANNEL ] = [ ] [EOL] self . _slack_client = None [EOL] self . _slack_token = slack_token [EOL] self . _proxy = os . environ [ [string] ] or os . environ [ [string] ] [EOL] [EOL] @ property def messages ( self ) : [EOL] [docstring] [EOL] return self . _queued_messages . values ( ) [EOL] [EOL] @ property def proxy ( self ) : [EOL] [docstring] [EOL] return self . _proxy [EOL] [EOL] @ proxy . setter def proxy ( self , proxy ) : [EOL] [docstring] [EOL] self . _proxy = proxy [EOL] [EOL] def queue_message ( self , message , internal_error = False ) : [EOL] [docstring] [EOL] if internal_error : [EOL] self . _queued_messages [ _INTERNAL_ERRORS_CHANNEL ] . append ( message ) [EOL] else : [EOL] self . _queued_messages [ _CI_ALERTS_CHANNEL ] . append ( message ) [EOL] [EOL] def _send_to_channel ( self , message , channel ) : [EOL] [docstring] [EOL] try : [EOL] self . _slack_client . chat_postMessage ( token = self . _slack_token , link_names = True , as_user = False , username = [string] , channel = channel , text = message ) [EOL] except Exception : [EOL] print ( [string] , channel ) [EOL] raise [EOL] [EOL] def send_message ( self , message , quiet = False ) : [EOL] [docstring] [EOL] if self . _slack_client is None : [EOL] try : [EOL] self . _slack_client = slack . WebClient ( self . _slack_token , proxy = self . _proxy , ssl = False ) [EOL] except Exception : [EOL] print ( [string] ) [EOL] raise [EOL] for channel , message_queue in self . _queued_messages . items ( ) : [EOL] final_message = message + [string] + [string] . join ( message_queue ) [EOL] print ( final_message ) [EOL] if not quiet and message_queue : [EOL] self . _send_to_channel ( final_message , channel ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] import sys [EOL] from Watchdog import Watchdog [EOL] [EOL] DEFAULT_SLACK_TOKEN_FILE = [string] [EOL] DEFAULT_MSTEAMS_URL_FILE = [string] [EOL] DEFAULT_GITHUB_TOKEN_FILE = [string] [EOL] DEFAULT_GITHUB_ORGANIZATION = [string] [EOL] DEFAULT_GITHUB_PROJECT = [string] [EOL] DEFAULT_JENKINS_TOKEN_FILE = [string] [EOL] DEFAULT_JENKINS_SERVER = [string] [EOL] DEFAULT_JENKINS_USER = [string] [EOL] DEFAULT_CI_JOB_NAME = [string] [EOL] DEFAULT_WATCHDOG_JOB_NAME = [string] [EOL] [EOL] [EOL] def main ( args ) : [EOL] [docstring] [EOL] jenkins_server = args . jenkins_server . strip ( ) [EOL] jenkins_user = args . jenkins_user . strip ( ) [EOL] jenkins_token = open ( args . jenkins_token ) . read ( ) . replace ( [string] , [string] ) . strip ( ) [EOL] slack_token = open ( args . slack_token ) . read ( ) . replace ( [string] , [string] ) . strip ( ) [EOL] msteams_url = open ( args . msteams_url ) . read ( ) . replace ( [string] , [string] ) . strip ( ) [EOL] github_token = open ( args . github_token ) . read ( ) . replace ( [string] , [string] ) . strip ( ) [EOL] github_org = args . github_org [EOL] github_project = args . github_project [EOL] ci_job = args . ci_job . strip ( ) [EOL] watchdog_job = args . watchdog_job . strip ( ) [EOL] quiet = args . quiet [EOL] slack_enabled = args . slack_enabled [EOL] ms_teams_enabled = args . ms_teams_enabled [EOL] [EOL] wd = Watchdog ( jenkins_token = jenkins_token , jenkins_server = jenkins_server , jenkins_user = jenkins_user , git_token = github_token , git_org = github_org , git_project = github_project , slack_token = slack_token , msteams_url = msteams_url , ci_job_name = ci_job , watchdog_job_name = watchdog_job , slack_enabled = slack_enabled , ms_teams_enabled = ms_teams_enabled ) [EOL] wd . run ( quiet = quiet ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_SLACK_TOKEN_FILE , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_MSTEAMS_URL_FILE , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_GITHUB_TOKEN_FILE , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_GITHUB_ORGANIZATION , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_GITHUB_PROJECT , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_JENKINS_TOKEN_FILE , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_JENKINS_SERVER , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_JENKINS_USER , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_CI_JOB_NAME , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , default = DEFAULT_WATCHDOG_JOB_NAME , action = [string] , required = False ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] , action = [string] , required = False ) [EOL] parser . add_argument ( [string] , type = int , help = [string] , default = [number] , action = [string] , required = False ) [EOL] parser . add_argument ( [string] , type = int , help = [string] , default = [number] , action = [string] , required = False ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] sys . exit ( main ( args ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import requests [EOL] import logging [EOL] import requests [EOL] import jenkins [EOL] import logging [EOL] from retrying import retry [EOL] [EOL] [comment] [EOL] logging . basicConfig ( format = [string] ) [EOL] log = logging . getLogger ( __name__ ) [EOL] log . setLevel ( logging . INFO ) [EOL] [EOL] _RETRY_LIMIT = [number] [EOL] _RETRY_COOLDOWN_MS = [number] [EOL] [EOL] [EOL] class JenkinsWrapper : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , jenkins_token , jenkins_user , jenkins_server ) : [EOL] self . jenkins_server = jenkins_server [EOL] self . jenkins = jenkins . Jenkins ( jenkins_server , username = jenkins_user , password = jenkins_token ) [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_build_console_output ( self , job_name , build_number ) : [EOL] return self . jenkins . get_build_console_output ( job_name , build_number ) [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_job_info ( self , job_name ) : [EOL] return self . jenkins . get_job_info ( job_name ) [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_build_info ( self , job_name , build_number ) : [EOL] return self . jenkins . get_build_info ( job_name , build_number ) [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_queue_item ( self , queue_id ) : [EOL] [docstring] [EOL] try : [EOL] return self . jenkins . get_queue_item ( queue_id ) [EOL] except Exception as e : [EOL] [comment] [EOL] if [string] in str ( e ) and [string] in str ( e ) : [EOL] return { } [EOL] else : [EOL] raise [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_idle_ci_hosts ( self ) : [EOL] [docstring] [EOL] jenkins_request_url = self . jenkins_server + [string] [EOL] try : [EOL] log . info ( [string] , jenkins_request_url ) [EOL] r = requests . Request ( method = [string] , url = jenkins_request_url , verify = False ) [EOL] response = self . jenkins . jenkins_request ( r ) . json ( ) [EOL] return int ( response [ [string] ] ) - int ( response [ [string] ] ) [EOL] except Exception as e : [EOL] log . exception ( [string] , str ( e ) ) [EOL] raise [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $requests.models.Request$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Request$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import logging [EOL] import timeout_decorator [EOL] from datetime import datetime [EOL] from retrying import retry [EOL] from github import Github , GithubException [EOL] [EOL] [comment] [EOL] logging . basicConfig ( format = [string] ) [EOL] log = logging . getLogger ( __name__ ) [EOL] log . setLevel ( logging . INFO ) [EOL] [EOL] _RETRY_LIMIT = [number] [EOL] _RETRY_COOLDOWN_MS = [number] [EOL] _REQUEST_TIMEOUT_S = [number] [EOL] [EOL] [EOL] class GitWrapper : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , git_token , repository , project ) : [EOL] self . git = Github ( git_token ) [EOL] self . repository = repository [EOL] self . project = project [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_git_time ( self ) : [EOL] [docstring] [EOL] try : [EOL] datetime_object = self . _get_git_time ( ) [EOL] except ValueError as e : [EOL] raise GitWrapperError ( str ( e ) ) [EOL] except GithubException as e : [EOL] message = [string] . format ( str ( e ) ) [EOL] raise GitWrapperError ( message ) [EOL] except timeout_decorator . TimeoutError : [EOL] message = [string] [EOL] raise GitWrapperError ( message ) [EOL] return datetime_object [EOL] [EOL] @ retry ( stop_max_attempt_number = _RETRY_LIMIT , wait_fixed = _RETRY_COOLDOWN_MS ) def get_pull_requests ( self ) : [EOL] [docstring] [EOL] try : [EOL] prs = self . _get_pull_requests ( ) [EOL] except GithubException as e : [EOL] message = [string] . format ( str ( e ) ) [EOL] raise GitWrapperError ( message ) [EOL] return prs [EOL] [EOL] @ timeout_decorator . timeout ( _REQUEST_TIMEOUT_S ) def _get_git_time ( self ) : [EOL] [docstring] [EOL] datetime_string = self . git . get_api_status ( ) . raw_headers . get ( [string] , [string] ) [EOL] datetime_format = [string] [EOL] datetime_object = datetime . strptime ( datetime_string , datetime_format ) [EOL] return datetime_object [EOL] [EOL] @ timeout_decorator . timeout ( _REQUEST_TIMEOUT_S ) def _get_pull_requests ( self ) : [EOL] [docstring] [EOL] return self . git . get_organization ( self . repository ) . get_repo ( self . project ) . get_pulls ( ) [EOL] [EOL] [EOL] class GitWrapperError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message ) : [EOL] self . message = message [EOL] log . exception ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Match , Optional , Any , List , Dict [EOL] import typing [EOL] import io [EOL] import logging [EOL] import datetime [EOL] import datetime [EOL] import time [EOL] import re [EOL] import logging [EOL] from SlackCommunicator import SlackCommunicator [EOL] from MSTeamsCommunicator import MSTeamsCommunicator [EOL] from JenkinsWrapper import JenkinsWrapper [EOL] from jenkins import NotFoundException [EOL] from GitWrapper import GitWrapper , GitWrapperError [EOL] import os [EOL] import json [EOL] [EOL] [comment] [EOL] logging . basicConfig ( format = [string] ) [EOL] log = logging . getLogger ( __name__ ) [EOL] log . setLevel ( logging . INFO ) [EOL] [EOL] [comment] [EOL] _SCRIPT_DIR = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] _BUILD_DURATION_THRESHOLD = datetime . timedelta ( minutes = [number] ) [EOL] _CI_START_THRESHOLD = datetime . timedelta ( minutes = [number] ) [EOL] _AWAITING_JENKINS_THRESHOLD = datetime . timedelta ( minutes = [number] ) [EOL] _WATCHDOG_DIR = os . path . expanduser ( [string] ) [EOL] _PR_REPORTS_CONFIG_KEY = [string] [EOL] _CI_BUILD_FAIL_MESSAGE = [string] [EOL] _CI_BUILD_SUCCESS_MESSAGE = [string] [EOL] [EOL] [EOL] class Watchdog : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , jenkins_token , jenkins_server , jenkins_user , git_token , git_org , git_project , slack_token , msteams_url , ci_job_name , watchdog_job_name , slack_enabled , ms_teams_enabled ) : [EOL] self . _config_path = os . path . join ( _WATCHDOG_DIR , [string] . format ( _WATCHDOG_DIR , git_project ) ) [EOL] [comment] [EOL] self . _jenkins = JenkinsWrapper ( jenkins_token , jenkins_user = jenkins_user , jenkins_server = jenkins_server ) [EOL] [comment] [EOL] self . _git = GitWrapper ( git_token , repository = git_org , project = git_project ) [EOL] [comment] [EOL] self . _slack_app = SlackCommunicator ( slack_token = slack_token ) [EOL] [comment] [EOL] self . _msteams_hook = MSTeamsCommunicator ( msteams_url ) [EOL] self . _ci_job_name = ci_job_name [EOL] self . _watchdog_job_name = watchdog_job_name [EOL] [comment] [EOL] self . _config = self . _read_config_file ( ) [EOL] [comment] [EOL] self . _now_time = datetime . datetime . now ( ) [EOL] self . _current_prs = { } [EOL] self . _slack_enabled = slack_enabled [EOL] self . _ms_teams_enabled = ms_teams_enabled [EOL] [EOL] def run ( self , quiet = False ) : [EOL] [docstring] [EOL] try : [EOL] pull_requests = self . _git . get_pull_requests ( ) [EOL] except GitWrapperError : [EOL] message = [string] [EOL] log . exception ( message ) [EOL] self . _queue_message ( message , message_severity = [string] ) [EOL] [comment] [EOL] for pr in pull_requests : [EOL] try : [EOL] self . _check_pr ( pr ) [EOL] except Exception as e : [EOL] log . exception ( str ( e ) ) [EOL] self . _queue_message ( str ( e ) , message_severity = [string] ) [EOL] self . _update_config ( ) [EOL] self . _send_message ( quiet = quiet ) [EOL] [EOL] def _read_config_file ( self ) : [EOL] [docstring] [EOL] if os . path . isfile ( self . _config_path ) : [EOL] log . info ( [string] . format ( self . _config_path ) ) [EOL] file = open ( self . _config_path , [string] ) [EOL] data = json . load ( file ) [EOL] else : [EOL] log . info ( [string] . format ( self . _config_path ) ) [EOL] data = { _PR_REPORTS_CONFIG_KEY : { } } [EOL] return data [EOL] [EOL] def _check_pr ( self , pr ) : [EOL] [docstring] [EOL] log . info ( [string] ) [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] [comment] [EOL] last_status = self . _get_last_status ( pr ) [EOL] [comment] [EOL] self . _current_prs [ str ( pr . number ) ] = self . _get_pr_timestamps ( pr , last_status ) [EOL] if self . _should_ignore ( pr ) or self . _updated_since_last_run ( pr ) : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return [EOL] [EOL] [comment] [EOL] pr_time_delta = self . _now_time - pr . updated_at [EOL] if last_status : [EOL] [comment] [EOL] log . info ( [string] . format ( last_status . description , last_status . updated_at ) ) [EOL] self . _interpret_status ( last_status , pr ) [EOL] elif pr_time_delta > _CI_START_THRESHOLD : [EOL] [comment] [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] self . _check_missing_status ( pr ) [EOL] [EOL] @ staticmethod def _get_pr_timestamps ( pr , last_status ) : [EOL] [docstring] [EOL] pr_timestamp = time . mktime ( pr . updated_at . timetuple ( ) ) [EOL] if last_status : [EOL] status_timestamp = time . mktime ( last_status . updated_at . timetuple ( ) ) [EOL] else : [EOL] status_timestamp = None [EOL] pr_dict = { [string] : pr_timestamp , [string] : status_timestamp } [EOL] return pr_dict [EOL] [EOL] @ staticmethod def _get_last_status ( pr ) : [EOL] [docstring] [EOL] [comment] [EOL] last_commit = pr . get_commits ( ) . reversed [ [number] ] [EOL] [comment] [EOL] [comment] [EOL] statuses = last_commit . get_statuses ( ) [EOL] jenk_statuses = [ stat for stat in statuses if [string] in stat . context ] [EOL] try : [EOL] last_status = jenk_statuses [ [number] ] [EOL] except IndexError : [EOL] last_status = None [EOL] return last_status [EOL] [EOL] @ staticmethod def _should_ignore ( pr ) : [EOL] [docstring] [EOL] [comment] [EOL] if pr . head . repo . fork : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return True [EOL] [EOL] [comment] [EOL] if [string] in pr . title : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return True [EOL] [EOL] label_names = [ label . name for label in pr . labels ] [EOL] if [string] in label_names : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return True [EOL] [EOL] [comment] [EOL] if [string] not in pr . base . ref : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return True [EOL] [EOL] [comment] [EOL] [comment] [EOL] ignored_mergeable_states = [ [string] , [string] , [string] ] [EOL] if pr . mergeable_state in ignored_mergeable_states : [EOL] log . info ( [string] . format ( pr . number , pr . mergeable_state ) ) [EOL] return True [EOL] [EOL] [comment] [EOL] return False [EOL] [EOL] def _updated_since_last_run ( self , pr ) : [EOL] [comment] [EOL] pr_number = str ( pr . number ) [EOL] current_pr_timestamps = self . _current_prs . get ( pr_number ) [EOL] last_pr_timestamps = self . _config [ _PR_REPORTS_CONFIG_KEY ] . get ( pr_number ) [EOL] if current_pr_timestamps == last_pr_timestamps : [EOL] log . info ( [string] . format ( pr . number ) ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def _check_missing_status ( self , pr ) : [EOL] [docstring] [EOL] pr_time_delta = self . _now_time - pr . updated_at [EOL] build_number = self . _build_scheduled ( pr ) [EOL] if self . _build_in_queue ( pr , build_number ) : [EOL] message = ( [string] . format ( pr . number , pr_time_delta . seconds / [number] ) ) [EOL] severity = [string] [EOL] else : [EOL] message = ( [string] . format ( pr . number , pr_time_delta . seconds / [number] ) ) [EOL] severity = [string] [EOL] self . _queue_message ( message , message_severity = severity , pr = pr ) [EOL] [EOL] def _build_scheduled ( self , pr ) : [EOL] [docstring] [EOL] pr_number = str ( pr . number ) [EOL] project_name_full = self . _ci_job_name + [string] + pr_number [EOL] [EOL] try : [EOL] [comment] [EOL] last_build_number = self . _jenkins . get_job_info ( project_name_full ) [ [string] ] [ [string] ] [EOL] console_output = self . _jenkins . get_build_console_output ( project_name_full , last_build_number ) [EOL] [comment] [EOL] [comment] [EOL] match_string = [string] [EOL] retrieved_sha = re . search ( match_string , console_output ) . group ( [number] ) [EOL] if retrieved_sha == pr . get_commits ( ) . reversed [ [number] ] . sha : [EOL] return last_build_number [EOL] else : [EOL] return - [number] [EOL] except ( NotFoundException , AttributeError ) : [EOL] message = ( [string] . format ( pr_number , pr . get_commits ( ) . reversed [ [number] ] . sha ) ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] return - [number] [EOL] [EOL] def _build_in_queue ( self , pr , build_number ) : [EOL] [docstring] [EOL] pr_number = str ( pr . number ) [EOL] project_name_full = self . _ci_job_name + [string] + pr_number [EOL] [comment] [EOL] try : [EOL] console_output = self . _jenkins . get_build_console_output ( project_name_full , build_number ) [EOL] except NotFoundException : [EOL] return False [EOL] [comment] [EOL] if [string] in console_output \ [EOL] and [string] not in console_output : [EOL] log . info ( [string] , pr_number ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def _interpret_status ( self , status , pr ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] build_number = self . _retrieve_build_number ( status . target_url ) [EOL] [comment] [EOL] finished_statuses = [ [string] , [string] , [string] ] [EOL] pending_statuses = [ [string] , [string] ] [EOL] if any ( phrase in status . description for phrase in finished_statuses ) : [EOL] self . _check_finished ( pr , build_number ) [EOL] [comment] [EOL] elif any ( phrase in status . description for phrase in pending_statuses ) : [EOL] self . _check_in_progress ( pr , build_number ) [EOL] else : [EOL] message = [string] . format ( pr . number , status . description ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] except Exception : [EOL] [comment] [EOL] message = [string] . format ( status . description , pr . number ) [EOL] log . exception ( message ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] [EOL] def _retrieve_build_number ( self , url ) : [EOL] [docstring] [EOL] [comment] [EOL] match_obj = re . search ( [string] , url ) [EOL] try : [EOL] number = int ( match_obj . group ( [number] ) ) [EOL] return number [EOL] except Exception : [EOL] log . exception ( [string] , url ) [EOL] raise [EOL] [EOL] def _queue_message ( self , message , message_severity = [string] , pr = None ) : [EOL] [docstring] [EOL] log . info ( message ) [EOL] internal = False [EOL] if [string] in message_severity : [EOL] message_header = [string] [EOL] internal = True [EOL] elif [string] in message_severity : [EOL] message_header = [string] [EOL] elif [string] in message_severity : [EOL] message_header = [string] [EOL] else : [EOL] message_header = [string] [EOL] [comment] [EOL] if pr : [EOL] message = message + [string] + pr . html_url [EOL] [EOL] send = message_header + [string] + message [EOL] if self . _slack_enabled : [EOL] self . _slack_app . queue_message ( send , internal_error = internal ) [EOL] if self . _ms_teams_enabled : [EOL] self . _msteams_hook . queue_message ( send ) [EOL] [EOL] def _check_finished ( self , pr , build_number ) : [EOL] [docstring] [EOL] pr_number = str ( pr . number ) [EOL] log . info ( [string] , pr_number ) [EOL] [comment] [EOL] project_name_full = self . _ci_job_name + [string] + pr_number [EOL] build_output = self . _jenkins . get_build_console_output ( project_name_full , build_number ) [EOL] if _CI_BUILD_FAIL_MESSAGE not in build_output \ [EOL] and _CI_BUILD_SUCCESS_MESSAGE not in build_output : [EOL] message = ( [string] [string] . format ( pr_number ) ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] [EOL] def _send_message ( self , quiet = False ) : [EOL] [docstring] [EOL] if any ( messages for messages in self . _slack_app . messages ) or any ( messages for messages in self . _msteams_hook . messages ) : [EOL] try : [EOL] watchdog_build = self . _jenkins . get_job_info ( self . _watchdog_job_name ) [ [string] ] [EOL] watchdog_build_number = watchdog_build [ [string] ] [EOL] watchdog_build_link = watchdog_build [ [string] ] [EOL] except Exception : [EOL] watchdog_build_number = [string] [EOL] watchdog_build_link = self . _jenkins . jenkins_server [EOL] send = self . _watchdog_job_name + [string] + str ( watchdog_build_number ) + [string] + watchdog_build_link [EOL] [EOL] if self . _slack_enabled : [EOL] self . _slack_app . send_message ( send , quiet = quiet ) [EOL] if self . _ms_teams_enabled : [EOL] self . _msteams_hook . send_message ( send , quiet = quiet ) [EOL] else : [EOL] log . info ( [string] ) [EOL] [EOL] def _check_in_progress ( self , pr , build_number ) : [EOL] [docstring] [EOL] pr_number = str ( pr . number ) [EOL] log . info ( [string] , pr_number ) [EOL] project_name_full = self . _ci_job_name + [string] + pr_number [EOL] build_info = self . _jenkins . get_build_info ( project_name_full , build_number ) [EOL] build_datetime = datetime . datetime . fromtimestamp ( build_info [ [string] ] / [number] ) [EOL] build_delta = self . _now_time - build_datetime [EOL] log . info ( [string] , str ( build_number ) , str ( build_delta ) ) [EOL] [comment] [EOL] if build_delta > _CI_START_THRESHOLD and self . _build_in_queue ( pr , build_number ) : [EOL] message = ( [string] [string] . format ( build_number , pr_number , str ( build_delta . seconds / [number] ) ) ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] elif build_delta > _BUILD_DURATION_THRESHOLD : [EOL] [comment] [EOL] message = ( [string] [string] [string] . format ( build_number , pr_number , str ( _BUILD_DURATION_THRESHOLD . seconds / [number] ) ) ) [EOL] self . _queue_message ( message , message_severity = [string] , pr = pr ) [EOL] [EOL] def _update_config ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] log . info ( [string] . format ( self . _config_path ) ) [EOL] new_config = { _PR_REPORTS_CONFIG_KEY : self . _current_prs } [EOL] file = open ( self . _config_path , [string] ) [EOL] json . dump ( new_config , file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[typing.Any,typing.Any]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $datetime.timedelta$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.float]]$ 0 0 0 0 $builtins.float$ 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.datetime$ 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $datetime.timedelta$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $io.TextIOWrapper$ 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import requests [EOL] [EOL] [EOL] class MSTeamsCommunicator : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , _ci_alerts_channel_url ) : [EOL] self . _ci_alerts_channel_url = _ci_alerts_channel_url [EOL] self . _queued_messages = { self . _ci_alerts_channel_url : [ ] , } [EOL] [EOL] @ property def messages ( self ) : [EOL] [docstring] [EOL] return self . _queued_messages . values ( ) [EOL] [EOL] def queue_message ( self , message ) : [EOL] [docstring] [EOL] self . _queued_messages [ self . _ci_alerts_channel_url ] . append ( message ) [EOL] [EOL] def _parse_text ( self , message ) : [EOL] [docstring] [EOL] message_split = message . split ( [string] ) [EOL] title = message_split [ [number] ] [EOL] log_url = message_split [ - [number] ] [EOL] text = message_split [ [number] ] [EOL] header = message_split [ [number] ] . split ( [string] ) [EOL] header_formatted = [string] . format ( header [ [number] ] , header [ [number] ] ) [EOL] text_formatted = [string] . format ( text . split ( [string] , [number] ) [ [number] ] , text . split ( [string] , [number] ) [ [number] ] ) [EOL] [EOL] return title , log_url , [string] . format ( header_formatted , text_formatted ) [EOL] [EOL] def _json_request_content ( self , title , log_url , text_formatted ) : [EOL] [docstring] [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : title , [string] : text_formatted , [string] : [ { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : log_url , } , ] , } , ] , } [EOL] return data [EOL] [EOL] def _send_to_channel ( self , message , channel_url ) : [EOL] [docstring] [EOL] title , log_url , text_formatted = self . _parse_text ( message ) [EOL] data = self . _json_request_content ( title , log_url , text_formatted ) [EOL] [EOL] try : [EOL] requests . post ( url = channel_url , json = data ) [EOL] except Exception as ex : [EOL] raise Exception ( [string] [string] . format ( ex ) ) [EOL] [EOL] def send_message ( self , message , quiet = False ) : [EOL] [docstring] [EOL] for channel , message_queue in self . _queued_messages . items ( ) : [EOL] final_message = message + [string] + [string] . join ( message_queue ) [EOL] if not quiet and message_queue : [EOL] self . _send_to_channel ( final_message , channel ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from pkg_resources import get_distribution , DistributionNotFound [EOL] [EOL] try : [EOL] __version__ = get_distribution ( [string] ) . version [EOL] except DistributionNotFound : [EOL] __version__ = [string] [EOL] [EOL] try : [EOL] from typing import TYPE_CHECKING [EOL] except ImportError : [EOL] TYPE_CHECKING = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import onnx [EOL] from typing import List [EOL] [EOL] from google . protobuf . message import DecodeError [EOL] [EOL] from ngraph . impl import Function [EOL] from ngraph . impl import onnx_import [EOL] from ngraph . exceptions import UserInputError [EOL] [EOL] [EOL] def import_onnx_model ( onnx_protobuf ) : [comment] [EOL] [docstring] [EOL] if not isinstance ( onnx_protobuf , onnx . ModelProto ) : [EOL] raise UserInputError ( [string] ) [EOL] [EOL] return onnx_import . import_onnx_model ( onnx_protobuf . SerializeToString ( ) ) [EOL] [EOL] [EOL] def import_onnx_file ( filename ) : [comment] [EOL] [docstring] [EOL] try : [EOL] onnx_protobuf = onnx . load ( filename ) [EOL] except DecodeError : [EOL] raise UserInputError ( [string] ) [EOL] [EOL] return onnx_import . import_onnx_model ( onnx_protobuf . SerializeToString ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0