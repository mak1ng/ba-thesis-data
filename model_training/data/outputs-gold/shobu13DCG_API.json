	0
from typing import Any [EOL] import typing [EOL] from user . models import User [EOL] [EOL] [EOL] class HashLogin ( ) : [EOL] def authenticate ( self , request , username = None , password = None ) : [EOL] try : [EOL] user = User . objects . get ( username = username ) [EOL] if user . password == password : [EOL] return user [EOL] return None [EOL] except User . DoesNotExist : [EOL] return None [EOL] [EOL] def get_user ( self , user_id ) : [EOL] try : [EOL] return User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . exceptions import ValidationError [EOL] from django . test import TestCase [EOL] [EOL] import datetime [EOL] [EOL] from user . models import User [EOL] [EOL] [EOL] class UserTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] [docstring] [EOL] user = User . objects . create_user ( [string] , [string] , [string] ) [EOL] user . last_name = [string] [EOL] user . first_name = [string] [EOL] user . street = [string] [EOL] user . city = [string] [EOL] user . postal_code = [string] [EOL] user . phone_number = [string] [EOL] user . birth_date = datetime . datetime . now ( ) . date ( ) [EOL] user . save ( ) [EOL] [EOL] user2 = User . objects . create_user ( [string] , [string] , [string] ) [EOL] user2 . last_name = [string] [EOL] user2 . first_name = [string] [EOL] user2 . street = [string] [EOL] user2 . city = [string] [EOL] user2 . postal_code = [string] [EOL] user2 . phone_number = [string] [EOL] user2 . birth_date = datetime . datetime . now ( ) . date ( ) [EOL] user2 . amis . add ( User . objects . all ( ) [ [number] ] ) [EOL] user2 . save ( ) [EOL] [EOL] def setUp ( self ) : [EOL] self . user , self . user2 = User . objects . all ( ) [EOL] [EOL] def test_password ( self ) : [EOL] error = [string] [EOL] try : [EOL] [comment] [EOL] User . objects . create ( username = [string] , password = [string] ) [EOL] except ValidationError as exception : [EOL] error = exception [EOL] print ( [string] , error ) [EOL] self . assertEquals ( type ( error ) , ValidationError ) [EOL] [EOL] error = [string] [EOL] try : [EOL] [comment] [EOL] User . objects . create ( username = [string] , password = [string] ) [EOL] except ValidationError as exception : [EOL] error = exception [EOL] print ( error ) [EOL] self . assertEquals ( type ( error ) , type ( [string] ) ) [EOL] [EOL] def test_user_creation ( self ) : [EOL] print ( User . objects . all ( ) ) [EOL] self . assertTrue ( User . objects . filter ( last_name = [string] ) . exists ( ) ) [EOL] [EOL] def test_last_name ( self ) : [EOL] self . assertEqual ( self . user . last_name , [string] ) [EOL] [EOL] def test_hash_password ( self ) : [EOL] self . assertTrue ( self . user . password != [string] ) [EOL] [EOL] def test_amis ( self ) : [EOL] self . assertEquals ( self . user , self . user2 . amis . all ( ) [ [number] ] ) [EOL] [EOL] def test_full_name ( self ) : [EOL] self . assertEquals ( self . user . get_full_name ( ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Tuple , Type [EOL] import user [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from user . models import User [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserCreateSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class UserSimpleSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class UserDetailSerializer ( serializers . ModelSerializer ) : [EOL] amis = UserSimpleSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] exclude = ( [string] , ) [EOL] depth = [number] [EOL] [EOL] [EOL] class UserConnectSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class UserChangePasswordSerializer ( serializers . Serializer ) : [EOL] old_password = serializers . CharField ( ) [EOL] new_password = serializers . CharField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $user.serializers.UserSimpleSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.serializers.UserChangePasswordSerializer]$ 0 0 0 0 0 0 0 $typing.Type[user.serializers.UserChangePasswordSerializer]$ 0 0 0 0 0 0 0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsOwner ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [comment] [EOL] [comment] [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] [EOL] [comment] [EOL] return obj . owner == request . user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import user [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . contrib . auth . password_validation import validate_password [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] [docstring] [EOL] city = models . CharField ( max_length = [number] ) [EOL] postal_code = models . CharField ( max_length = [number] , default = [string] ) [EOL] phone_number = models . CharField ( max_length = [number] ) [EOL] birth_date = models . DateField ( null = True ) [EOL] photo = models . ImageField ( upload_to = [string] , blank = True ) [EOL] [comment] [EOL] act_prop_tous = models . BooleanField ( default = False ) [EOL] act_part_visible = models . BooleanField ( default = False ) [EOL] act_part_tous = models . BooleanField ( default = False ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] amis = models . ManyToManyField ( [string] , blank = True ) [EOL] est_verif = models . BooleanField ( default = False ) [EOL] [comment] [EOL] stay_connected = models . BooleanField ( default = False ) [EOL] [EOL] [comment] [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] if not self . pk : [EOL] validate_password ( self . password ) [EOL] super ( User , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . last_name , self . first_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import promo [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from promo . models import Promo [EOL] [EOL] [EOL] class PromoSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Promo [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from promo . models import Promo [EOL] [EOL] [EOL] admin . site . register ( Promo ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PromoConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import promo [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from user . models import User [EOL] [EOL] [EOL] class Promo ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] description = models . TextField ( ) [EOL] start = models . DateTimeField ( ) [EOL] end = models . DateTimeField ( ) [EOL] owner = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] validation = models . BooleanField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[promo.models.Promo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . AutoField ( primary_key = True , serialize = False ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import interests [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Interest ( models . Model ) : [EOL] [docstring] [EOL] name = models . CharField ( max_length = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[interests.models.Interest]$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import interests [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from interests . models import Interest [EOL] [EOL] [EOL] class InterestSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Interest [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[interests.models.Interest]$ 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from interests . models import Interest [EOL] [EOL] [EOL] admin . site . register ( Interest ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class InterestsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import List , Tuple , Union , Dict [EOL] import datetime [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] MEDIA_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] MEDIA_ROOT = os . path . join ( [string] ) [EOL] STATIC_ROOT = os . path . join ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] AUTHENTICATION_BACKENDS = [ [string] , ] [EOL] [EOL] [comment] [EOL] AUTH_USER_MODEL = [string] [EOL] SESSION_EXPIRE_AT_BROWSER_CLOSE = True [EOL] [EOL] [comment] [EOL] SWAGGER_SETTINGS = { [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } } [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) , [string] : ( [string] , [string] ) , } [EOL] [EOL] JWT_AUTH = { [string] : True , [string] : datetime . timedelta ( seconds = [number] ) , } [EOL] [EOL] CORS_ORIGIN_ALLOW_ALL = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,datetime.timedelta]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . contrib . staticfiles . urls import staticfiles_urlpatterns [EOL] from django . urls import path , include [EOL] from django . conf . urls . static import static [EOL] from rest_framework_jwt . views import obtain_jwt_token , refresh_jwt_token [EOL] [EOL] from DCG_API import settings [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , obtain_jwt_token ) , path ( [string] , refresh_jwt_token ) , ] [EOL] urlpatterns += staticfiles_urlpatterns ( ) [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsEventOwner ( permissions . BasePermission ) : [EOL] message = [string] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return True [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] print ( [string] ) [EOL] [EOL] return ( request . user . is_authenticated and obj . owner == request . user ) or request . user . is_superuser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from event . models import Event [EOL] [EOL] [EOL] class EventAdminCustom ( admin . ModelAdmin ) : [EOL] filter_horizontal = ( [string] , ) [EOL] [EOL] [EOL] admin . site . register ( Event , EventAdminCustom ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class EventConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import event [EOL] import user [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from event . models import Event [EOL] [EOL] from user . serializers import UserSimpleSerializer [EOL] [EOL] [EOL] class EventSerializer ( serializers . ModelSerializer ) : [EOL] owner = UserSimpleSerializer ( ) [EOL] participant = UserSimpleSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Event [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $user.serializers.UserSimpleSerializer$ 0 0 0 0 0 $user.serializers.UserSimpleSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[event.serializers.EventSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . urls import path , URLPattern [EOL] [EOL] from rest_framework . routers import SimpleRouter [EOL] from rest_framework import permissions [EOL] [EOL] from drf_yasg . views import get_schema_view [EOL] from drf_yasg import openapi [EOL] [EOL] from api import viewsets [EOL] [EOL] schema_view = get_schema_view ( openapi . Info ( title = [string] , default_version = [string] , description = [string] , contact = openapi . Contact ( email = [string] ) , ) , public = False , permission_classes = ( permissions . IsAuthenticatedOrReadOnly , ) , ) [EOL] [EOL] router = SimpleRouter ( ) [EOL] router . register ( [string] , viewsets . UserViewset ) [EOL] router . register ( [string] , viewsets . InterestViewset ) [EOL] router . register ( [string] , viewsets . PlaceViewset ) [EOL] router . register ( [string] , viewsets . PromoViewset ) [EOL] router . register ( [string] , viewsets . EventViewset ) [EOL] [EOL] urlpatterns = [ path ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , ] [EOL] urlpatterns += router . urls [EOL] print ( urlpatterns ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import json [EOL] [EOL] from django . forms import model_to_dict [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] [EOL] from rest_framework . test import APIClient , APITestCase [EOL] [EOL] from user . models import User [EOL] [EOL] from interests . serializers import InterestSerializer [EOL] [EOL] from interests . models import Interest [EOL] [EOL] [EOL] class InterestViewsetTest ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] super_user = User . objects . create_superuser ( username = [string] , password = [string] , email = [string] ) [EOL] Interest . objects . create ( name = [string] ) [EOL] [EOL] def setUp ( self ) : [EOL] self . super_user = User . objects . get ( username = [string] ) [EOL] self . client = APIClient ( ) [EOL] [EOL] self . interest = Interest . objects . get ( name = [string] ) [EOL] [EOL] def test_endpoint_list ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] interest_list = json . loads ( response . content ) [EOL] [EOL] for interest in interest_list : [EOL] id = interest . get ( [string] ) [EOL] interest_model = InterestSerializer ( model_to_dict ( Interest . objects . get ( id = id ) ) ) . data [EOL] print ( interest ) [EOL] print ( interest_model ) [EOL] print ( [string] ) [EOL] self . assertEqual ( interest , interest_model ) [EOL] [EOL] def test_endpoint_create ( self ) : [EOL] self . assertTrue ( self . client . login ( username = [string] , password = [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = { [string] : [string] , } [EOL] [EOL] response = self . client . post ( url , data = data , format = [string] ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] test_interest = Interest . objects . get ( name = [string] ) [EOL] self . assertTrue ( test_interest ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] from rest_framework . test import APIClient , APITestCase [EOL] [EOL] from user . models import User [EOL] [EOL] from promo . serializers import PromoSerializer [EOL] [EOL] from promo . models import Promo [EOL] [EOL] [EOL] class PromoViewsetTest ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] super_user = User . objects . create_superuser ( username = [string] , password = [string] , email = [string] ) [EOL] Promo . objects . create ( name = [string] , description = [string] , start = timezone . now ( ) , end = timezone . now ( ) , owner = super_user , validation = False ) [EOL] [EOL] def setUp ( self ) : [EOL] self . super_user = User . objects . get ( username = [string] ) [EOL] self . client = APIClient ( ) [EOL] [EOL] self . promo = Promo . objects . get ( name = [string] ) [EOL] [EOL] def test_endpoint_list ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] promo_list = json . loads ( response . content ) [EOL] [EOL] for promo in promo_list : [EOL] id = promo . get ( [string] ) [EOL] promo_model = PromoSerializer ( Promo . objects . get ( id = id ) ) . data [EOL] print ( promo ) [EOL] print ( promo_model ) [EOL] print ( [string] ) [EOL] self . assertEqual ( promo , promo_model ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Union , Dict [EOL] import user [EOL] import typing [EOL] import json [EOL] [EOL] from django . forms import model_to_dict [EOL] [EOL] import datetime [EOL] [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient , APITestCase [EOL] [EOL] from user . models import User [EOL] [EOL] from user . serializers import UserDetailSerializer , UserSerializer [EOL] [EOL] [EOL] class UserViewsetTest ( APITestCase ) : [EOL] [docstring] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] super_user = User . objects . create_superuser ( username = [string] , password = [string] , email = [string] ) [EOL] [EOL] user = User . objects . create_user ( [string] , [string] , [string] ) [EOL] user . last_name = [string] [EOL] user . first_name = [string] [EOL] user . street = [string] [EOL] user . city = [string] [EOL] user . postal_code = [string] [EOL] user . phone_number = [string] [EOL] user . birth_date = datetime . datetime . now ( ) . date ( ) [EOL] user . save ( ) [EOL] [EOL] user2 = User . objects . create_user ( [string] , [string] , [string] ) [EOL] user2 . last_name = [string] [EOL] user2 . first_name = [string] [EOL] user2 . street = [string] [EOL] user2 . city = [string] [EOL] user2 . postal_code = [string] [EOL] user2 . phone_number = [string] [EOL] user2 . birth_date = datetime . datetime . now ( ) . date ( ) [EOL] user2 . amis . add ( User . objects . all ( ) [ [number] ] ) [EOL] user2 . save ( ) [EOL] [EOL] def setUp ( self ) : [EOL] self . user , self . user2 = User . objects . all ( ) [ [number] : ] [EOL] self . client = APIClient ( ) [EOL] [EOL] def test_endpoint_list ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] user_list = json . loads ( response . content ) [EOL] [EOL] for user in user_list : [EOL] id = user . get ( [string] ) [EOL] user_model = UserSerializer ( model_to_dict ( User . objects . get ( id = id ) ) ) . data [EOL] print ( user ) [EOL] print ( user_model ) [EOL] self . assertEqual ( user , user_model ) [EOL] [EOL] def test_endpoint_create ( self ) : [EOL] self . assertTrue ( self . client . login ( username = [string] , password = [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = { [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime . datetime . now ( ) . strftime ( [string] ) , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] response = self . client . post ( url , data = data , format = [string] ) [EOL] print ( response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] test_user = User . objects . get ( username = [string] ) [EOL] self . assertTrue ( test_user ) [EOL] [EOL] def test_enpoint_delete ( self ) : [EOL] self . assertTrue ( self . client . login ( username = [string] , password = [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = { [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime . datetime . now ( ) . strftime ( [string] ) , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] response = self . client . post ( url , data = data , format = [string] ) [EOL] print ( response . data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] test_user = User . objects . get ( username = [string] ) [EOL] self . assertTrue ( test_user ) [EOL] [EOL] url = reverse ( [string] , args = [ test_user . id ] ) [EOL] response = self . client . delete ( url , format = [string] ) [EOL] print ( response . data ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] url = reverse ( [string] , args = [ test_user . id ] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] print ( response . data ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_endpoint_retrieve_full ( self ) : [EOL] self . assertTrue ( self . client . login ( username = [string] , password = [string] ) ) [EOL] url = reverse ( [string] , args = [ self . user . id ] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] user = model_to_dict ( self . user ) [EOL] retrieved_user = response . data [EOL] user = UserDetailSerializer ( user ) . data [EOL] print ( retrieved_user ) [EOL] print ( user ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . assertEqual ( user , retrieved_user ) [EOL] [EOL] def test_endpoint_list_full ( self ) : [EOL] self . assertTrue ( self . client . login ( username = [string] , password = [string] ) ) [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , format = [string] ) [EOL] user_list = json . loads ( response . content ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] for user in user_list : [EOL] id = user . get ( [string] ) [EOL] model_user = model_to_dict ( User . objects . get ( id = id ) ) [EOL] model_user = UserDetailSerializer ( model_user ) [EOL] self . assertEqual ( user , model_user . data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $UserDetailSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $UserDetailSerializer$ 0 0 0 $UserDetailSerializer$ 0 0 0 0 0 0 0 0 $UserDetailSerializer$ 0 0 0 0
from typing import Type [EOL] import places [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from places . models import Place [EOL] [EOL] [EOL] class PlaceSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Place [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[places.models.Place]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import places [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Place ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] latitude = models . FloatField ( null = True , blank = True ) [EOL] longitude = models . FloatField ( null = True , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[places.models.Place]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[places.models.Place]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[places.models.Place]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from places . models import Place [EOL] [EOL] [EOL] admin . site . register ( Place ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PlacesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0