[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] try : [EOL] from django . core . management import execute_from_command_line [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] import django [comment] [EOL] except ImportError : [EOL] raise ImportError ( [string] [string] [string] ) [EOL] raise [EOL] [EOL] [comment] [EOL] [comment] [EOL] current_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] sys . path . append ( os . path . join ( current_path , [string] ) ) [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
[EOL] [EOL] [EOL]	0 0 0
[EOL]	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CmsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from django . core . management . base import BaseCommand [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] def handle ( self , * args , ** options ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[EOL] [EOL]	0 0
	0
from typing import Type [EOL] import typing [EOL] import izanagi [EOL] from rest_framework import permissions [EOL] from rest_framework . views import APIView [EOL] [EOL] [EOL] class BaseAPIView ( APIView ) : [EOL] permission_classes = ( permissions . AllowAny , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] [EOL]	0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CommonsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[EOL]	0
	0
	0
	0
from typing import Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import path , include [EOL] from rest_framework import routers [EOL] [EOL] from api . views import APIRootView [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( router . urls ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , APIRootView . as_view ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . pagination import PageNumberPagination [EOL] [EOL] [EOL] class LargeResultsSetPagination ( PageNumberPagination ) : [EOL] page_size = [number] [EOL] page_size_query_param = [string] [EOL] max_page_size = [number] [EOL] [EOL] [EOL] class StandardResultsSetPagination ( PageNumberPagination ) : [EOL] page_size = [number] [EOL] page_size_query_param = [string] [EOL] max_page_size = [number] [EOL] [EOL] [EOL] class SmallResultsSetPagination ( PageNumberPagination ) : [EOL] page_size = [number] [EOL] page_size_query_param = [string] [EOL] max_page_size = [number] [EOL] [EOL] [EOL] class BlogListPreviewResultsSetPagination ( PageNumberPagination ) : [EOL] page_size = [number] [EOL] page_size_query_param = [string] [EOL] max_page_size = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class WebAPIAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from . root import * [comment] [EOL]	0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] from rest_framework . response import Response [EOL] [EOL] from commons . restframework import BaseAPIView [EOL] [EOL] [EOL] class APIRootView ( BaseAPIView ) : [EOL] [docstring] [EOL] [EOL] def get ( self , request , format = None ) : [EOL] HTTP_HOST = request . META [ [string] ] [EOL] data = [ { [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } ] [EOL] for index , item in enumerate ( data ) : [EOL] for k , v in item . items ( ) : [EOL] for t_k , t_v in v . items ( ) : [EOL] value = t_v [EOL] new_value = [string] + HTTP_HOST + [string] + value [EOL] data [ index ] [ k ] [ t_k ] = new_value [EOL] return Response ( data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AdminAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[docstring] [EOL] [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from grappelli . dashboard import modules , Dashboard [EOL] from grappelli . dashboard . utils import get_admin_site_name [EOL] [EOL] [EOL] class CustomIndexDashboard ( Dashboard ) : [EOL] [docstring] [EOL] [EOL] def init_with_context ( self , context ) : [EOL] get_admin_site_name ( context ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . Group ( _ ( [string] ) , column = [number] , collapsible = True , children = [ modules . AppList ( _ ( [string] ) , column = [number] , collapsible = False , models = ( [string] , ) , ) , modules . AppList ( _ ( [string] ) , column = [number] , css_classes = ( [string] , ) , exclude = ( [string] , ) , ) , ] , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . AppList ( _ ( [string] ) , collapsible = True , column = [number] , css_classes = ( [string] , ) , exclude = ( [string] , ) , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . ModelList ( _ ( [string] ) , column = [number] , collapsible = False , models = ( [string] , ) , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . LinkList ( _ ( [string] ) , column = [number] , children = [ { [string] : _ ( [string] ) , [string] : [string] , [string] : False , } ] , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . LinkList ( _ ( [string] ) , column = [number] , children = [ { [string] : _ ( [string] ) , [string] : [string] , [string] : True , } , { [string] : _ ( [string] ) , [string] : [string] , [string] : True , } , { [string] : _ ( [string] ) , [string] : [string] , [string] : True , } , ] , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . Feed ( _ ( [string] ) , column = [number] , feed_url = [string] , limit = [number] , ) ) [EOL] [EOL] [comment] [EOL] self . children . append ( modules . RecentActions ( _ ( [string] ) , limit = [number] , collapsible = False , column = [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from celery import app [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . celery import CeleryConfig [EOL]	0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from celery import Celery , shared_task [EOL] from celery . schedules import crontab [EOL] from django . apps import apps , AppConfig [EOL] from django . conf import settings [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . cache import cache [EOL] [EOL] if not settings . configured : [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [comment] [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] [EOL] class CeleryConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] installed_apps = [ app_config . name for app_config in apps . get_app_configs ( ) ] [EOL] app . autodiscover_tasks ( lambda : installed_apps , force = True ) [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [comment] [EOL] [EOL] [EOL] @ shared_task def add ( x , y ) : [EOL] return x + y [EOL] [EOL] [EOL] @ shared_task def mul ( x , y ) : [EOL] return x * y [EOL] [EOL] [EOL] @ shared_task def xsum ( numbers ) : [EOL] return sum ( numbers ) [EOL] [EOL] [EOL] @ app . task def test ( arg ) : [EOL] print ( arg ) [EOL] [EOL] [EOL] @ app . task def test_beat ( args ) : [EOL] print ( [string] , args ) [EOL] [EOL] [EOL] @ app . task def test_redis ( ) : [EOL] cache . incr ( [string] ) [EOL] print ( [string] , cache . get ( [string] ) ) [EOL] [EOL] [EOL] @ app . task def test_elasticsearch ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ app . task def test_django_orm ( ) : [EOL] Account = get_user_model ( ) [EOL] print ( Account . objects . first ( ) ) [EOL] [EOL] [EOL] @ app . on_after_configure . connect def setup_periodic_tasks ( sender , ** kwargs ) : [EOL] cache . set ( [string] , [number] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] , test . s ( [string] ) , name = [string] ) [EOL] sender . add_periodic_task ( [number] , test_redis . s ( ) , name = [string] ) [EOL] sender . add_periodic_task ( [number] , test_elasticsearch . s ( ) , name = [string] ) [EOL] sender . add_periodic_task ( [number] , test_django_orm . s ( ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] * [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] * [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] * [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] * [number] * [number] , test . s ( [string] ) , name = [string] ) [EOL] [comment] [EOL] sender . add_periodic_task ( [number] * [number] * [number] , test . s ( [string] ) , name = [string] ) [EOL] [EOL] [comment] [EOL] sender . add_periodic_task ( crontab ( hour = [number] , minute = [number] ) , test . s ( [string] ) ) [EOL] [comment] [EOL] sender . add_periodic_task ( crontab ( hour = [number] , minute = [number] , day_of_week = [number] ) , test . s ( [string] ) ) [EOL] [EOL] [EOL] app . conf . timezone = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
import typing [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from django_celery_beat . models import ( SolarSchedule , IntervalSchedule , CrontabSchedule , PeriodicTasks , PeriodicTask , ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [docstring] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] models = [ SolarSchedule , IntervalSchedule , CrontabSchedule , PeriodicTasks , PeriodicTask , ] [EOL] for m in models : [EOL] m . objects . all ( ) . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] from . models import User , Merchant [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] @ admin . register ( Merchant ) class MerchantAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from celery import app [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , List [EOL] import typing [EOL] import izanagi [EOL] from django . contrib . auth . base_user import BaseUserManager [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from werkzeug . security import generate_password_hash , check_password_hash [EOL] [EOL] [EOL] class User ( models . Model ) : [EOL] [docstring] [EOL] [EOL] mobile = models . CharField ( [string] , null = False , max_length = [number] , unique = True , help_text = [string] , error_messages = { [string] : [string] } , ) [EOL] [EOL] password_hash = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] [EOL] @ property def password ( self ) : [EOL] raise AttributeError ( [string] ) [EOL] [EOL] @ password . setter def password ( self , password ) : [EOL] self . password_hash = generate_password_hash ( password , salt_length = [number] ) [EOL] [EOL] def verify_password ( self , password ) : [EOL] return check_password_hash ( self . password_hash , password ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . id , self . mobile ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class Merchant ( models . Model ) : [EOL] [docstring] [EOL] [EOL] mobile = models . CharField ( [string] , null = False , max_length = [number] , unique = True , help_text = [string] , error_messages = { [string] : [string] } , ) [EOL] [EOL] password_hash = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] [EOL] @ property def password ( self ) : [EOL] raise AttributeError ( [string] ) [EOL] [EOL] @ password . setter def password ( self , password ) : [EOL] self . password_hash = generate_password_hash ( password , salt_length = [number] ) [EOL] [EOL] def verify_password ( self , password ) : [EOL] return check_password_hash ( self . password_hash , password ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . id , self . mobile ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class StaffManager ( BaseUserManager ) : [EOL] use_in_migrations = True [EOL] [EOL] def _create_user ( self , mobile , username , email , password , ** extra_fields ) : [EOL] [docstring] [EOL] if not username : [EOL] raise ValueError ( [string] ) [EOL] email = self . normalize_email ( email ) [EOL] username = self . model . normalize_username ( username ) [EOL] user = self . model ( mobile = mobile , username = username , email = email , ** extra_fields ) [EOL] user . set_password ( password ) [EOL] user . save ( using = self . _db ) [EOL] return user [EOL] [EOL] def create_user ( self , mobile , username , email = None , password = None , ** extra_fields ) : [EOL] extra_fields . setdefault ( [string] , False ) [EOL] extra_fields . setdefault ( [string] , False ) [EOL] return self . _create_user ( mobile , username , email , password , ** extra_fields ) [EOL] [EOL] def create_superuser ( self , mobile , username , email , password , ** extra_fields ) : [EOL] extra_fields . setdefault ( [string] , True ) [EOL] extra_fields . setdefault ( [string] , True ) [EOL] [EOL] if extra_fields . get ( [string] ) is not True : [EOL] raise ValueError ( [string] ) [EOL] if extra_fields . get ( [string] ) is not True : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return self . _create_user ( mobile , username , email , password , ** extra_fields ) [EOL] [EOL] [EOL] class Staff ( AbstractUser ) : [EOL] [docstring] [EOL] [EOL] username = models . CharField ( [string] , max_length = [number] , unique = True , help_text = [string] , error_messages = { [string] : [string] } , ) [EOL] mobile = models . CharField ( [string] , null = False , max_length = [number] , unique = True , help_text = [string] , error_messages = { [string] : [string] } , ) [EOL] [EOL] objects = StaffManager ( ) [EOL] [EOL] REQUIRED_FIELDS = [ [string] , [string] ] [EOL] USERNAME_FIELD = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . id , self . username ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.Merchant]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.Merchant]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[izanagi.accounts.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $izanagi.accounts.models.StaffManager$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . conf . urls import include [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . urls import re_path [EOL] from django . views import defaults as default_views [EOL] from django . views . generic import RedirectView [EOL] from django . views . generic import TemplateView [EOL] [EOL] favicon_view = RedirectView . as_view ( url = [string] , permanent = True ) [EOL] [EOL] urlpatterns = [ re_path ( [string] , TemplateView . as_view ( template_name = [string] ) ) , re_path ( [string] , include ( [string] ) ) , re_path ( [string] , include ( [string] ) ) , re_path ( [string] , favicon_view ) , re_path ( settings . ADMIN_URL , admin . site . urls ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] import debug_toolbar [EOL] [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ re_path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } ) , re_path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } ) , re_path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } ) , re_path ( [string] , default_views . server_error ) , re_path ( [string] , include ( debug_toolbar . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Literal , Union , List , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] from . base import * [comment] [EOL] [EOL] SECRET_KEY = os . getenv ( [string] , [string] ) [EOL] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] SECURE_HSTS_SECONDS = [number] [EOL] SECURE_HSTS_INCLUDE_SUBDOMAINS = True [EOL] SECURE_CONTENT_TYPE_NOSNIFF = True [EOL] SECURE_BROWSER_XSS_FILTER = True [EOL] SESSION_COOKIE_SECURE = True [EOL] SESSION_COOKIE_HTTPONLY = True [EOL] SECURE_SSL_REDIRECT = True [EOL] CSRF_COOKIE_SECURE = True [EOL] CSRF_COOKIE_HTTPONLY = True [EOL] X_FRAME_OPTIONS = [string] [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
	0
import builtins [EOL] from typing import Tuple , Literal , Union , Dict , List [EOL] import typing [EOL] import typing_extensions [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] import os [EOL] [EOL] ROOT_DIR = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) ) [EOL] [EOL] ASSETS_DIR = [string] . format ( str ( ROOT_DIR ) ) [EOL] APPS_DIR = os . path . join ( str ( ROOT_DIR ) , [string] ) [EOL] [EOL] SECRET_KEY = os . getenv ( [string] , [string] ) [EOL] [EOL] DEBUG = True if [string] in os . environ . get ( [string] , [string] ) else False [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] DJANGO_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] THIRD_PARTY_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] LOCAL_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [comment] [EOL] INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS [EOL] [EOL] [comment] [EOL] [comment] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FIXTURE_DIRS = ( os . path . join ( APPS_DIR , [string] ) , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ADMINS = ( ( [string] , [string] ) , ) [EOL] [EOL] [comment] [EOL] MANAGERS = ADMINS [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] [comment] [EOL] USE_I18N = True [EOL] [EOL] [comment] [EOL] USE_L10N = True [EOL] [EOL] [comment] [EOL] USE_TZ = False [EOL] [EOL] [comment] [EOL] LANGUAGE_CODE = [string] [EOL] [comment] [EOL] SITE_ID = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] fixture_dirs = ( os . path . join ( APPS_DIR , [string] ) , ) [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( APPS_DIR , [string] ) , ] , [string] : True , [string] : { [string] : DEBUG , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] STATIC_ROOT = os . getenv ( [string] , os . path . join ( ASSETS_DIR , [string] ) ) [EOL] [comment] [EOL] STATIC_URL = [string] [EOL] [EOL] [comment] [EOL] STATICFILES_DIRS = ( os . path . join ( APPS_DIR , [string] ) , ) [EOL] [EOL] [comment] [EOL] STATICFILES_FINDERS = ( [string] , [string] , ) [EOL] [EOL] MEDIA_ROOT = os . getenv ( [string] , os . path . join ( ASSETS_DIR , [string] ) ) [EOL] MEDIA_URL = [string] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , [string] , ) [EOL] [EOL] AUTOSLUG_SLUGIFY_FUNCTION = [string] [EOL] [EOL] ADMIN_URL = [string] . format ( os . getenv ( [string] , [string] ) ) [EOL] [EOL] REST_FRAMEWORK = { [string] : [ [string] ] , [string] : ( [string] , [string] , [string] , ) , [string] : ( [string] , ) , } [EOL] [EOL] GRAPPELLI_ADMIN_TITLE = [string] [EOL] [EOL] GRAPPELLI_INDEX_DASHBOARD = [string] [EOL] [EOL] TINYMCE_COMPRESSOR = True [EOL] [EOL] INTERNAL_IPS = [ [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] from __future__ import absolute_import , unicode_literals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] import pytest [EOL] [EOL] [EOL] def test_always_true ( ) : [EOL] assert True [EOL] [EOL] [EOL] @ pytest . fixture def setup_math ( ) : [EOL] import math [EOL] [EOL] return math [EOL] [EOL] [EOL] @ pytest . fixture def setup_function ( request ) : [EOL] def teardown_function ( ) : [EOL] print ( [string] ) [EOL] [EOL] request . addfinalizer ( teardown_function ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def test_func ( setup_function ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def test_setup_math ( setup_math ) : [EOL] assert setup_math . pow ( [number] , [number] ) == [number] [EOL] [EOL] [EOL] class TestClass ( object ) : [EOL] def test_in ( self ) : [EOL] assert [string] in [string] [EOL] [EOL] def test_two ( self , setup_math ) : [EOL] assert setup_math . ceil ( [number] ) == [number] [EOL] [EOL] [EOL] def raise_exit ( ) : [EOL] raise SystemExit ( [number] ) [EOL] [EOL] [EOL] def test_mytest ( ) : [EOL] with pytest . raises ( SystemExit ) : [EOL] raise_exit ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ] , ) def test_eval ( test_input , expected ) : [EOL] assert eval ( test_input ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0