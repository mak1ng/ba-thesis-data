from typing import Any , List , Dict [EOL] import typing [EOL] from encuestas . encuesta . models import DatosEncuestado , Respuesta [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] datos = DatosEncuestado . objects . filter ( encuesta__slug = [string] ) [EOL] nuevos_datos = [ ] [EOL] for d in datos : [EOL] respuestas_normalizado = { } [EOL] for resp in d . respuesta . all ( ) : [EOL] if resp . opcion_respuesta : [EOL] print ( resp . opcion_respuesta . titulo ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] nuevos_datos . append ( { [string] : d . encuesta , [string] : d . nombres , [string] : d . apellidos , [string] : d . edad , [string] : d . genero , [string] : d . ciudad , [string] : d . email , [string] : d . tiene_hijos , [string] : d . edad_hijos , [string] : d . genero_hijo , [string] : respuestas_normalizado } ) [EOL] [EOL] print ( nuevos_datos ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0
	0
	0
[comment] [EOL]	0 0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class ApiAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any , List , Dict [EOL] import encuestas [EOL] import typing [EOL] from rest_framework import serializers [EOL] from encuestas . encuesta . models import Pregunta , OpcionRespuesta , Encuesta , Ciudad , Respuesta , DatosEncuestado [EOL] from django . shortcuts import get_object_or_404 [EOL] [EOL] class OpcionRespuesta ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = OpcionRespuesta [EOL] fields = [string] [EOL] [EOL] class PreguntaModelSerializer ( serializers . ModelSerializer ) : [EOL] opciones = OpcionRespuesta ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Pregunta [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] class EncuestaModelSerializer ( serializers . ModelSerializer ) : [EOL] preguntas = PreguntaModelSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Encuesta [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] class CiudadModelSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Ciudad [EOL] fields = [string] [EOL] [EOL] class DatosEncuestaModelSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = DatosEncuestado [EOL] fields = [string] [EOL] [EOL] class RespuestaSave ( serializers . Serializer ) : [EOL] id_pregunta = serializers . IntegerField ( ) [EOL] id_opcion = serializers . CharField ( required = False , allow_blank = True ) [EOL] texto_respuesta = serializers . CharField ( required = False , allow_blank = True ) [EOL] relacion_pregunta = serializers . CharField ( required = False , allow_blank = True ) [EOL] [EOL] class DatosEncuestadoSave ( serializers . Serializer ) : [EOL] nombres = serializers . CharField ( ) [EOL] apellidos = serializers . CharField ( ) [EOL] edad = serializers . IntegerField ( ) [EOL] genero = serializers . CharField ( ) [EOL] ciudad = serializers . IntegerField ( ) [EOL] email = serializers . EmailField ( ) [EOL] tiene_hijos = serializers . BooleanField ( ) [EOL] edad_hijos = serializers . CharField ( allow_blank = True ) [EOL] genero_hijo = serializers . CharField ( ) [EOL] [EOL] class DatosEncuestadoModel ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = DatosEncuestado [EOL] fields = [string] [EOL] [EOL] [EOL] [EOL] class RespuestaSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Respuesta [EOL] fields = [string] [EOL] [EOL] class RespuestaGuardar ( serializers . Serializer ) : [EOL] id_encuesta = serializers . CharField ( ) [EOL] respuestas = RespuestaSave ( many = True , read_only = False ) [EOL] datos_encuestado = DatosEncuestadoSave ( many = False , read_only = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def save ( self ) : [EOL] data = self . validated_data [EOL] encuesta = get_object_or_404 ( Encuesta , slug = data [ [string] ] ) [EOL] datos_encuestado = data [ [string] ] [EOL] data_enc = { [string] : encuesta . id , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , [string] : datos_encuestado [ [string] ] , } [EOL] encuestado = DatosEncuestadoModel ( data = data_enc ) [EOL] encuestado . is_valid ( raise_exception = True ) [EOL] encuestado . save ( ) [EOL] [EOL] respuestas = data [ [string] ] [EOL] for respuesta in respuestas : [EOL] id_opcion = respuesta [ [string] ] [EOL] relacion_pregunta = respuesta [ [string] ] [EOL] data = { [string] : encuestado . data . get ( [string] ) , [string] : respuesta [ [string] ] , [string] : respuesta [ [string] ] } [EOL] if int ( id_opcion ) != [number] : [EOL] data [ [string] ] = id_opcion [EOL] [EOL] if int ( relacion_pregunta ) != [number] : [EOL] data [ [string] ] = relacion_pregunta [EOL] [EOL] serializer = RespuestaSerializer ( data = data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] serializer . save ( ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $encuestas.api.serializers.OpcionRespuesta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $encuestas.api.serializers.PreguntaModelSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSave]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSave]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSave]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.DatosEncuestadoSave]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaGuardar]$ 0 0 0 0 0 0 0 $encuestas.api.serializers.RespuestaSave$ 0 0 0 0 0 0 0 0 0 0 0 0 $encuestas.api.serializers.DatosEncuestadoSave$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $encuestas.api.serializers.DatosEncuestadoModel$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 $encuestas.api.serializers.DatosEncuestadoModel$ 0 0 0 0 0 0 0 0 $encuestas.api.serializers.DatosEncuestadoModel$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $encuestas.api.serializers.DatosEncuestadoModel$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $encuestas.api.serializers.RespuestaSerializer$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $encuestas.api.serializers.RespuestaSerializer$ 0 0 0 0 0 0 0 0 0 $encuestas.api.serializers.RespuestaSerializer$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from . views import PreguntasViewSet , EncuestaViewSet , CiudadViewSet , RespuestaViewSet [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , PreguntasViewSet , basename = [string] ) [EOL] router . register ( [string] , EncuestaViewSet , basename = [string] ) [EOL] router . register ( [string] , CiudadViewSet , basename = [string] ) [EOL] router . register ( [string] , RespuestaViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Type [EOL] import encuestas [EOL] import typing [EOL] from rest_framework import viewsets , mixins [EOL] from encuestas . encuesta . models import Pregunta , Encuesta , Ciudad [EOL] from . serializers import PreguntaModelSerializer , EncuestaModelSerializer , CiudadModelSerializer , RespuestaGuardar [EOL] [EOL] class PreguntasViewSet ( mixins . ListModelMixin , viewsets . GenericViewSet ) : [EOL] queryset = Pregunta . objects . all ( ) [EOL] serializer_class = PreguntaModelSerializer [EOL] [EOL] class EncuestaViewSet ( mixins . RetrieveModelMixin , viewsets . GenericViewSet ) : [EOL] queryset = Encuesta . objects . all ( ) [EOL] serializer_class = EncuestaModelSerializer [EOL] lookup_field = [string] [EOL] [EOL] class CiudadViewSet ( mixins . ListModelMixin , viewsets . GenericViewSet ) : [EOL] queryset = Ciudad . objects . all ( ) [EOL] serializer_class = CiudadModelSerializer [EOL] [EOL] class RespuestaViewSet ( mixins . CreateModelMixin , viewsets . GenericViewSet ) : [EOL] serializer_class = RespuestaGuardar [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.views.PreguntasViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.PreguntaModelSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.views.EncuestaViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.EncuestaModelSerializer]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.views.CiudadViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.CiudadModelSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.api.serializers.RespuestaGuardar]$ 0 0 0
from typing import Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] def validar_ruc_cedula ( nro , tipo ) : [EOL] total = [number] [EOL] if tipo == [number] : [comment] [EOL] base = [number] [EOL] d_ver = int ( nro [ [number] ] )[comment] [EOL] multip = ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] elif tipo == [number] : [comment] [EOL] base = [number] [EOL] d_ver = int ( nro [ [number] ] ) [EOL] multip = ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] elif tipo == [number] : [comment] [EOL] base = [number] [EOL] d_ver = int ( nro [ [number] ] ) [EOL] multip = ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] for i in range ( [number] , len ( multip ) ) : [EOL] p = int ( nro [ i ] ) * multip [ i ] [EOL] if tipo == [number] : [EOL] total += p if p < [number] else int ( str ( p ) [ [number] ] ) + int ( str ( p ) [ [number] ] ) [EOL] else : [EOL] total += p [EOL] mod = total % base [EOL] val = base - mod if mod != [number] else [number] [EOL] return val == d_ver	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from rest_framework . permissions import BasePermission [EOL] [EOL] class IsUserOwner ( BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return request . user == obj . user [EOL] [EOL] class IsEmpresaOwner ( BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return request . user . empresa == obj . empresa	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] import uuid [EOL] from PIL import Image [EOL] [EOL] from django . conf import settings [EOL] [EOL] def uglifyImageName ( instance , filename , ruc = None ) : [EOL] extension = filename . split ( [string] ) [ - [number] ] [EOL] if instance != None : [EOL] pk = instance . ruc [EOL] else : [EOL] pk = ruc [EOL] [EOL] if extension == [string] : [EOL] ruta = [string] [EOL] else : [EOL] ruta = [string] [EOL] [EOL] return [string] . format ( ruta , pk , uuid . uuid4 ( ) , extension ) [EOL] [EOL] def uglifyImageNameEst ( instance , filename , ruc = None ) : [EOL] extension = filename . split ( [string] ) [ - [number] ] [EOL] if instance != None : [EOL] pk = instance . empresa . ruc [EOL] else : [EOL] pk = ruc [EOL] [EOL] return [string] . format ( pk , uuid . uuid4 ( ) , extension ) [EOL] [EOL] [EOL] def create_thumb ( file , thumbnail_size = ( [number] , [number] ) ) : [EOL] image = Image . open ( file ) [EOL] image . thumbnail ( thumbnail_size , Image . ANTIALIAS ) [EOL] array_data = file . name . split ( [string] ) [EOL] extension = array_data . pop ( ) [EOL] basename = [string] . join ( array_data ) [EOL] filename = [string] . format ( basename , extension ) [EOL] image . save ( os . path . join ( settings . MEDIA_ROOT , filename ) ) [EOL] return filename [EOL] [EOL] class ManageFiles : [EOL] [EOL] def get_object ( self ) : [EOL] return self . queryset [EOL] def get_fieldimage ( self ) : [EOL] return self . fieldimage [EOL] def get_fieldthumb ( self ) : [EOL] return self . fieldthumb [EOL] [EOL] def create_thumb ( self ) : [EOL] queryset = self . get_object ( ) [EOL] fieldimage = self . get_fieldimage ( ) [EOL] fieldthumb = self . get_fieldthumb ( ) [EOL] image = Image . open ( queryset . __dict__ [ fieldimage ] ) [EOL] image . thumbnail ( thumbnail_size , Image . ANTIALIAS ) [EOL] array_data = queryset . __dict__ [ fieldimage ] . name . split ( [string] ) [EOL] extension = array_data . pop ( ) [EOL] basename = [string] . join ( array_data ) [EOL] filename = [string] . format ( basename , extension ) [EOL] image . save ( os . path . join ( settings . MEDIA_ROOT , filename ) ) [EOL] queryset . __dict__ [ fieldthumb ] = filename [EOL] queryset . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] from . models import Encuesta , Pregunta , OpcionRespuesta [EOL] from encuestas . api . serializers import EncuestaModelSerializer [EOL] [EOL] def encuesta ( request ) : [EOL] print ( [number] ) [EOL] return render ( request , [string] ) [EOL] [EOL] def encuestaUno ( request ) : [EOL] return render ( request , [string] , { } )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class EncuestasAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] from . views import encuesta [EOL] [EOL] urlpatterns = [ path ( [string] , encuesta , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class BackofficeAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import xlwt [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . http import HttpResponse [EOL] from encuestas . encuesta . models import Encuesta , DatosEncuestado , Pregunta [EOL] import json [EOL] from django . http import HttpResponse [EOL] from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger [EOL] [EOL] [EOL] [EOL] @ login_required def dashboard ( request ) : [EOL] encuestas = Encuesta . objects . all ( ) [EOL] total = DatosEncuestado . objects . all ( ) . count ( ) [EOL] return render ( request , [string] , { [string] : encuestas , [string] : DatosEncuestado , [string] : total } ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ login_required def encuesta ( request , id_encuesta ) : [EOL] encuesta = get_object_or_404 ( Encuesta , pk = id_encuesta ) [EOL] encuestas = encuestas = Encuesta . objects . all ( ) [EOL] preguntas = Pregunta . objects . filter ( encuesta = encuesta ) [EOL] [EOL] context = { [string] : encuestas , [string] : encuesta , [string] : preguntas , } [EOL] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def encuestalist ( request , id_encuesta ) : [EOL] encuesta = get_object_or_404 ( Encuesta , pk = id_encuesta ) [EOL] [EOL] data = DatosEncuestado . objects . filter ( encuesta = encuesta ) [EOL] draw = request . GET . get ( [string] , [number] ) [EOL] length = request . GET . get ( [string] , [number] ) [EOL] page = request . GET . get ( [string] , [number] ) [EOL] [EOL] paginator = Paginator ( data , length ) [EOL] try : [EOL] datos = paginator . page ( ( int ( page ) / [number] ) + [number] ) [EOL] except PageNotAnInteger : [EOL] datos = paginator . page ( [number] ) [EOL] except EmptyPage : [EOL] datos = paginator . page ( paginator . num_pages ) [EOL] [EOL] nuevos_datos = [ ] [EOL] num = [number] [EOL] for d in datos : [EOL] respuestas_normalizado = { } [EOL] for resp in d . respuesta . all ( ) : [EOL] num += [number] [EOL] if resp . pregunta . id not in respuestas_normalizado : [EOL] respuestas_normalizado [ resp . pregunta . id ] = [string] [EOL] titulo = [string] [EOL] imagen = [string] [EOL] if resp . opcion_respuesta : [EOL] if resp . opcion_respuesta . titulo : [EOL] titulo = [string] . format ( resp . opcion_respuesta . titulo ) [EOL] if resp . opcion_respuesta . imagen : [EOL] imagen = [string] . format ( resp . opcion_respuesta . imagen . url ) [EOL] [EOL] detalle = [string] [EOL] if resp . detalle_respuesta : [EOL] detalle = [string] . format ( resp . detalle_respuesta ) [EOL] respuestas_normalizado [ resp . pregunta . id ] += [string] . format ( titulo , detalle , imagen ) [EOL] [EOL] [EOL] nuevos_datos . append ( { [string] : d . encuesta . nombre , [string] : d . nombres , [string] : d . apellidos , [string] : d . edad , [string] : d . genero , [string] : d . ciudad . nombre , [string] : d . email , [string] : [string] if d . tiene_hijos else [string] , [string] : d . edad_hijos , [string] : d . genero_hijo , ** respuestas_normalizado } ) [EOL] response = { [string] : int ( draw ) , [string] : data . count ( ) , [string] : data . count ( ) , [string] : nuevos_datos } [EOL] [EOL] return HttpResponse ( json . dumps ( response ) , content_type = [string] ) [EOL] [EOL] [EOL] @ login_required def export_xls ( request , id_encuesta ) : [EOL] response = HttpResponse ( content_type = [string] ) [EOL] response [ [string] ] = [string] [EOL] [EOL] wb = xlwt . Workbook ( encoding = [string] ) [EOL] ws = wb . add_sheet ( [string] , cell_overwrite_ok = True ) [EOL] [EOL] [EOL] [comment] [EOL] encuesta = get_object_or_404 ( Encuesta , pk = id_encuesta ) [EOL] preguntas = Pregunta . objects . filter ( encuesta = encuesta ) [EOL] datos = DatosEncuestado . objects . filter ( encuesta = encuesta ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] row_num = [number] [EOL] [EOL] font_style = xlwt . XFStyle ( ) [EOL] font_style . font . bold = True [EOL] [EOL] columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] columns += [ pregunta . nombre for pregunta in preguntas ] [EOL] [comment] [EOL] [EOL] [EOL] for col_num in range ( len ( columns ) ) : [EOL] ws . write ( row_num , col_num , columns [ col_num ] , font_style ) [EOL] [EOL] [comment] [EOL] font_style = xlwt . XFStyle ( ) [EOL] [EOL] [comment] [EOL] nuevos_datos = [ ] [EOL] for d in datos : [EOL] row_num += [number] [EOL] tiene_hijos = [string] [EOL] if d . tiene_hijos : [EOL] tiene_hijos = [string] [EOL] [EOL] ws . write ( row_num , [number] , d . nombres , font_style ) [EOL] ws . write ( row_num , [number] , d . apellidos , font_style ) [EOL] ws . write ( row_num , [number] , d . edad , font_style ) [EOL] ws . write ( row_num , [number] , d . genero , font_style ) [EOL] ws . write ( row_num , [number] , d . ciudad . nombre , font_style ) [EOL] ws . write ( row_num , [number] , tiene_hijos , font_style ) [EOL] ws . write ( row_num , [number] , d . edad_hijos , font_style ) [EOL] ws . write ( row_num , [number] , d . genero_hijo , font_style ) [EOL] [EOL] [EOL] respuestas_normalizado = { } [EOL] for resp in d . respuesta . all ( ) : [EOL] if resp . pregunta . id not in respuestas_normalizado : [EOL] respuestas_normalizado [ resp . pregunta . id ] = [ ] [EOL] titulo = [string] [EOL] imagen = [string] [EOL] if resp . opcion_respuesta : [EOL] titulo = resp . opcion_respuesta . titulo [EOL] if resp . opcion_respuesta . imagen : [EOL] imagen = resp . opcion_respuesta . imagen . url [EOL] [EOL] respuestas_normalizado [ resp . pregunta . id ] . append ( { [string] : titulo , [string] : resp . detalle_respuesta , [string] : resp . pregunta , [string] : imagen } ) [EOL] [EOL] col_num = [number] [EOL] for key , value in respuestas_normalizado . items ( ) : [EOL] col_num += [number] [EOL] texto = [ ] [EOL] for i in value : [EOL] if i [ [string] ] : [EOL] texto . append ( i [ [string] ] . split ( [string] ) [ - [number] ] ) [EOL] [EOL] if i [ [string] ] : [EOL] texto . append ( [string] . format ( i [ [string] ] ) ) [EOL] [EOL] if i [ [string] ] : [EOL] texto . append ( [string] . format ( i [ [string] ] ) ) [EOL] [EOL] ws . write ( row_num , col_num , [string] . join ( texto ) , font_style ) [EOL] [EOL] wb . save ( response ) [EOL] return response [EOL]	
[comment] [EOL] from django . apps import AppConfig [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsUserOrReadOnly ( permissions . BasePermission ) : [EOL] [docstring] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj == request . user [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import encuestas [EOL] import typing [EOL] import uuid [EOL] from django . db import models [EOL] from django . conf import settings [EOL] from django . dispatch import receiver [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from django . db . models . signals import post_save [EOL] from django . core . validators import RegexValidator [EOL] from rest_framework . authtoken . models import Token [EOL] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class User ( AbstractUser ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] email = models . EmailField ( [string] , unique = True , error_messages = { [string] : [string] } ) [EOL] phone_regex = RegexValidator ( regex = [string] , message = [string] ) [EOL] phone_number = models . CharField ( validators = [ phone_regex ] , max_length = [number] , blank = True ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] REQUIRED_FIELDS = [ [string] , [string] , [string] ] [EOL] [EOL] is_client = models . BooleanField ( [string] , default = True , help_text = ( [string] [string] ) ) [EOL] [EOL] is_verified = models . BooleanField ( [string] , default = False , help_text = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] [EOL] @ receiver ( post_save , sender = settings . AUTH_USER_MODEL ) def create_auth_token ( sender , instance = None , created = False , ** kwargs ) : [EOL] if created : [EOL] Token . objects . create ( user = instance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from . views import UserViewSet [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , UserViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
from typing import Type , Tuple [EOL] import encuestas [EOL] import typing [EOL] import factory [EOL] [EOL] [EOL] class UserFactory ( factory . django . DjangoModelFactory ) : [EOL] [EOL] class Meta : [EOL] model = [string] [EOL] django_get_or_create = ( [string] , ) [EOL] [EOL] id = factory . Faker ( [string] ) [EOL] username = factory . Sequence ( lambda n : f' [string] { n }' ) [EOL] password = factory . Faker ( [string] , length = [number] , special_chars = True , digits = True , upper_case = True , lower_case = True ) [EOL] email = factory . Faker ( [string] ) [EOL] first_name = factory . Faker ( [string] ) [EOL] last_name = factory . Faker ( [string] ) [EOL] is_active = True [EOL] is_staff = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[encuestas.users.test.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from django . urls import reverse [EOL] from django . forms . models import model_to_dict [EOL] from django . contrib . auth . hashers import check_password [EOL] from nose . tools import ok_ , eq_ [EOL] from rest_framework . test import APITestCase [EOL] from rest_framework import status [EOL] from faker import Faker [EOL] from . . models import User [EOL] from . factories import UserFactory [EOL] [EOL] fake = Faker ( ) [EOL] [EOL] [EOL] class TestUserListTestCase ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . url = reverse ( [string] ) [EOL] self . user_data = model_to_dict ( UserFactory . build ( ) ) [EOL] [EOL] def test_post_request_with_no_data_fails ( self ) : [EOL] response = self . client . post ( self . url , { } ) [EOL] eq_ ( response . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_post_request_with_valid_data_succeeds ( self ) : [EOL] response = self . client . post ( self . url , self . user_data ) [EOL] eq_ ( response . status_code , status . HTTP_201_CREATED ) [EOL] [EOL] user = User . objects . get ( pk = response . data . get ( [string] ) ) [EOL] eq_ ( user . username , self . user_data . get ( [string] ) ) [EOL] ok_ ( check_password ( self . user_data . get ( [string] ) , user . password ) ) [EOL] [EOL] [EOL] class TestUserDetailTestCase ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = UserFactory ( ) [EOL] self . url = reverse ( [string] , kwargs = { [string] : self . user . pk } ) [EOL] self . client . credentials ( HTTP_AUTHORIZATION = f' [string] { self . user . auth_token }' ) [EOL] [EOL] def test_get_request_returns_a_given_user ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] eq_ ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_put_request_updates_a_user ( self ) : [EOL] new_first_name = fake . first_name ( ) [EOL] payload = { [string] : new_first_name } [EOL] response = self . client . put ( self . url , payload ) [EOL] eq_ ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] user = User . objects . get ( pk = self . user . id ) [EOL] eq_ ( user . first_name , new_first_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
	0