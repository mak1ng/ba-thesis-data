import pathlib [EOL] from setuptools import setup , find_packages [EOL] from version import get_version [EOL] from pathlib import Path [EOL] [EOL] current_dir = Path ( __file__ ) . resolve ( ) . parent [EOL] description = [string] [EOL] [EOL] try : [EOL] history = current_dir . joinpath ( [string] ) . read_text ( ) [EOL] long_description = [string] . join ( [ current_dir . joinpath ( [string] ) . read_text ( ) , history ] ) [EOL] except FileNotFoundError : [EOL] long_description = [string] [EOL] [EOL] setup ( name = [string] , description = description , long_description = long_description , long_description_content_type = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , author = [string] , author_email = [string] , url = [string] , version = get_version ( ) , license = [string] , python_requires = [string] , zip_safe = False , include_package_data = True , packages = find_packages ( exclude = [ [string] ] ) , install_requires = [ [string] , ] , extras_require = { [string] : [ [string] ] , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from subprocess import check_output , CalledProcessError [EOL] [EOL] VERSION_FILE = [string] [EOL] GIT_COMMAND = [string] [EOL] VERSION_FORMAT = [string] [EOL] [EOL] [EOL] def git_version ( ) : [EOL] [docstring] [EOL] [EOL] output = check_output ( GIT_COMMAND . split ( ) ) . decode ( [string] ) . strip ( ) . split ( [string] ) [EOL] tag , count , commit = output [ : [number] ] [EOL] dirty = len ( output ) == [number] [EOL] [EOL] if count == [string] and not dirty : [EOL] return tag [EOL] return VERSION_FORMAT . format ( tag = tag , commit_count = count , commit_hash = commit ) [EOL] [EOL] [EOL] def get_version ( ) : [EOL] [docstring] [EOL] try : [EOL] version = git_version ( ) [EOL] except CalledProcessError : [EOL] with open ( VERSION_FILE , [string] ) as f : [EOL] version = f . readline ( ) . strip ( ) [EOL] else : [EOL] with open ( VERSION_FILE , [string] ) as f : [EOL] f . write ( version ) [EOL] return version [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from flask_prometheus_metrics . example import CONFIG , create_app , create_dispatcher [EOL] [EOL] [EOL] def pytest_make_parametrize_id ( config , val , argname ) : [EOL] [docstring] [EOL] if isinstance ( val , dict ) : [EOL] return [string] . format ( argname , [string] . join ( [string] . format ( k , v ) for k , v in val . items ( ) ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def app ( request ) : [EOL] [docstring] [EOL] app = create_app ( CONFIG ) [EOL] [comment] [EOL] app . wsgi_app = create_dispatcher ( ) [EOL] app_context = app . app_context ( ) [EOL] app_context . push ( ) [EOL] app . testing = True [EOL] [EOL] yield app [EOL] [EOL] [EOL] @ pytest . fixture def client ( app ) : [EOL] [docstring] [EOL] yield app . test_client ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] def test_endpoint_index ( app , client ) : [EOL] with app . test_request_context ( ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] [EOL] [EOL] def test_metric_app_version_info ( app , client ) : [EOL] with app . test_request_context ( ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] [EOL] [EOL] def test_metric_app_request_latency_seconds ( app , client ) : [EOL] with app . test_request_context ( ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] [EOL] [EOL] def test_metric_app_request_count ( app , client ) : [EOL] with app . test_request_context ( ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] [EOL] [EOL] def test_standard_metrics ( app , client ) : [EOL] with app . test_request_context ( ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] from flask import request [EOL] from prometheus_client import Counter , Histogram , Info [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] METRICS_REQUEST_LATENCY = Histogram ( [string] , [string] , [ [string] , [string] ] ) [EOL] [EOL] METRICS_REQUEST_COUNT = Counter ( [string] , [string] , [ [string] , [string] , [string] ] , ) [EOL] [EOL] METRICS_INFO = Info ( [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def before_request ( ) : [EOL] [docstring] [EOL] request . _prometheus_metrics_request_start_time = time . time ( ) [EOL] [EOL] [EOL] def after_request ( response ) : [EOL] [docstring] [EOL] request_latency = time . time ( ) - request . _prometheus_metrics_request_start_time [EOL] METRICS_REQUEST_LATENCY . labels ( request . method , request . path ) . observe ( request_latency ) [EOL] METRICS_REQUEST_COUNT . labels ( request . method , request . path , response . status_code ) . inc ( ) [EOL] return response [EOL] [EOL] [EOL] def register_metrics ( app , app_version = None , app_config = None ) : [EOL] [docstring] [EOL] app . before_request ( before_request ) [EOL] app . after_request ( after_request ) [EOL] METRICS_INFO . info ( { [string] : app_version , [string] : app_config } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import flask [EOL] import werkzeug [EOL] import typing [EOL] [docstring] [EOL] from flask import Blueprint , Flask [EOL] from prometheus_client import make_wsgi_app [EOL] from werkzeug . middleware . dispatcher import DispatcherMiddleware [EOL] from werkzeug . serving import run_simple [EOL] [EOL] from flask_prometheus_metrics import register_metrics [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] CONFIG = { [string] : [string] , [string] : [string] } [EOL] MAIN = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ MAIN . route ( [string] ) def index ( ) : [EOL] return [string] [EOL] [EOL] [EOL] def register_blueprints ( app ) : [EOL] [docstring] [EOL] app . register_blueprint ( MAIN ) [EOL] [EOL] [EOL] def create_app ( config ) : [EOL] [docstring] [EOL] app = Flask ( __name__ ) [EOL] [EOL] register_blueprints ( app ) [EOL] register_metrics ( app , app_version = config [ [string] ] , app_config = config [ [string] ] ) [EOL] return app [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def create_dispatcher ( ) : [EOL] [docstring] [EOL] main_app = create_app ( config = CONFIG ) [EOL] return DispatcherMiddleware ( main_app . wsgi_app , { [string] : make_wsgi_app ( ) } ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] run_simple ( [string] , [number] , create_dispatcher ( ) , use_reloader = True , use_debugger = True , use_evalex = True , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $werkzeug.middleware.dispatcher.DispatcherMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . metrics import register_metrics [EOL]	0 0 0 0 0 0