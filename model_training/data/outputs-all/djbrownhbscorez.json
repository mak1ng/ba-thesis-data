from typing import List [EOL] import typing [EOL] from typing import List [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List$ 0 0 0 0
from typing import Type [EOL] import typing [EOL] import src [EOL] from django . conf import settings [EOL] from django . db import models [EOL] [EOL] [EOL] class SportsHall ( models . Model ) : [EOL] number = models . IntegerField ( unique = True ) [EOL] name = models . TextField ( ) [EOL] address = models . TextField ( ) [EOL] phone_number = models . TextField ( blank = True , null = True ) [EOL] latitude = models . DecimalField ( blank = True , null = True , max_digits = [number] , decimal_places = [number] ) [EOL] longitude = models . DecimalField ( blank = True , null = True , max_digits = [number] , decimal_places = [number] ) [EOL] bhv_id = models . IntegerField ( unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . number , self . name ) [EOL] [EOL] @ staticmethod def build_source_url ( bhv_id ) : [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( bhv_id ) [EOL] [EOL] def source_url ( self ) : [EOL] return self . build_source_url ( self . bhv_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.sports_halls.models.SportsHall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import SportsHall [EOL] [EOL] admin . site . register ( SportsHall ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SportsHallsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( unique = True ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ( [string] , models . DecimalField ( blank = True , decimal_places = [number] , max_digits = [number] , null = True ) ) , ( [string] , models . DecimalField ( blank = True , decimal_places = [number] , max_digits = [number] , null = True ) ) , ( [string] , models . IntegerField ( unique = True ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple [EOL] import typing [EOL] import builtins [EOL] import src [EOL] from django . conf import settings [EOL] from django . core import validators [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from districts . models import District [EOL] [EOL] [EOL] class Season ( models . Model ) : [EOL] start_year = models . PositiveIntegerField ( unique = True , validators = [ validators . MinValueValidator ( [number] ) , validators . MaxValueValidator ( [number] ) ] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . start_year , self . start_year + [number] ) [EOL] [EOL] [EOL] class League ( models . Model ) : [EOL] name = models . TextField ( ) [EOL] abbreviation = models . TextField ( ) [EOL] district = models . ForeignKey ( District , on_delete = models . CASCADE ) [EOL] season = models . ForeignKey ( Season , on_delete = models . CASCADE ) [EOL] bhv_id = models . IntegerField ( unique = True ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . bhv_id , self . name , self . season ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . bhv_id } ) [EOL] [EOL] @ staticmethod def build_source_url ( bhv_id ) : [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( bhv_id ) [EOL] [EOL] def source_url ( self ) : [EOL] return self . build_source_url ( self . bhv_id ) [EOL] [EOL] @ property def youth ( self ) : [EOL] return self . is_youth ( self . abbreviation , self . name ) [EOL] [EOL] @ staticmethod def is_youth ( abbreviation , name ) : [EOL] if name in [ [string] , [string] , [string] , [string] ] : [EOL] return False [EOL] [EOL] if [string] in name : [EOL] return True [EOL] [EOL] youth_match = abbreviation [ : [number] ] in [ [string] , [string] , [string] , [string] , [string] ] or any ( n in name for n in [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] adult_match = abbreviation [ : [number] ] in [ [string] , [string] ] or any ( n in name for n in [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] if youth_match == adult_match : [EOL] raise ValueError ( f' [string] { abbreviation } [string] { name }' ) [EOL] return youth_match [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.leagues.models.League]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.leagues.models.League]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.leagues.models.League]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0
from django . contrib import admin [EOL] [EOL] from . models import League , Season [EOL] [EOL] admin . site . register ( League ) [EOL] admin . site . register ( Season ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LeaguesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , render [EOL] [EOL] from base import logic [EOL] from base . logic import add_ranking_place [EOL] [EOL] from . models import League [EOL] [EOL] [EOL] def detail ( request , bhv_id ) : [EOL] league = get_object_or_404 ( League , bhv_id = bhv_id ) [EOL] top_teams = logic . top_league_teams ( league ) [EOL] top_league_scorers = logic . top_league_scorers ( league ) [EOL] top_league_offenders = logic . top_league_offenders ( league ) [EOL] games_count = league . game_set . filter ( home_team__retirement__isnull = True , guest_team__retirement__isnull = True ) . count ( ) [EOL] games_staged = league . game_set . filter ( home_goals__isnull = False , guest_goals__isnull = False ) . count ( ) [EOL] games_progress = games_staged / games_count if games_count > [number] else [number] [EOL] return render ( request , [string] , { [string] : league , [string] : games_count , [string] : games_staged , [string] : top_teams , [string] : top_league_scorers , [string] : top_league_offenders , [string] : games_progress , } ) [EOL] [EOL] [EOL] def teams ( request , bhv_id ) : [EOL] league = get_object_or_404 ( League , bhv_id = bhv_id ) [EOL] return render ( request , [string] , { [string] : league , } ) [EOL] [EOL] [EOL] def games ( request , bhv_id ) : [EOL] league = get_object_or_404 ( League , bhv_id = bhv_id ) [EOL] games_by_month = logic . league_games ( league ) [EOL] return render ( request , [string] , { [string] : league , [string] : games_by_month , } ) [EOL] [EOL] [EOL] def scorers ( request , bhv_id ) : [EOL] league = get_object_or_404 ( League , bhv_id = bhv_id ) [EOL] league_scorers = logic . league_scorers ( league ) [EOL] return render ( request , [string] , { [string] : league , [string] : league_scorers , } ) [EOL] [EOL] [EOL] def offenders ( request , bhv_id ) : [EOL] league = get_object_or_404 ( League , bhv_id = bhv_id ) [EOL] league_offenders = logic . league_offenders ( league ) [EOL] add_ranking_place ( league_offenders , [string] ) [EOL] return render ( request , [string] , { [string] : league , [string] : league_offenders , } ) [EOL] [EOL] [EOL] def calendar ( ) : [EOL] return HttpResponse ( status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Tuple , List , Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from django . db import migrations [EOL] [EOL] from base import logic , parsing [EOL] [EOL] from . . models import League [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def update_league_names ( * _ ) : [EOL] for league in League . objects . all ( ) : [EOL] dom = logic . get_html ( league . source_url ( ) ) [EOL] name = parsing . parse_league_name ( dom ) [EOL] if name != league . name : [EOL] league . name = name [EOL] league . save ( ) [EOL] LOGGER . info ( [string] , league ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] atomic = False [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( update_league_names ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . IntegerField ( unique = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . PositiveIntegerField ( unique = True , validators = [ django . core . validators . MinValueValidator ( [number] ) , django . core . validators . MaxValueValidator ( [number] ) ] ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Set , Any [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] from datetime import date , datetime , timedelta [EOL] [EOL] from django . conf import settings [EOL] from django . core . management import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from associations . models import Association [EOL] from base import logic , parsing [EOL] from base . middleware import env [EOL] from base . models import Value [EOL] from districts . models import District [EOL] from leagues . models import League , Season [EOL] from teams . models import Team [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] options = { } [EOL] processed_districts = set ( ) [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . options = options [EOL] self . processed_districts = set ( ) [EOL] env . UPDATING . set_value ( Value . TRUE ) [EOL] self . create_associations ( ) [EOL] env . UPDATING . set_value ( Value . FALSE ) [EOL] [EOL] def create_associations ( self ) : [EOL] url = settings . NEW_ROOT_SOURCE_URL [EOL] dom = logic . get_html ( url ) [EOL] portal_paths = dom . xpath ( [string] ) [EOL] for portal_path in portal_paths : [EOL] portal_url = portal_path if portal_path . startswith ( [string] ) else settings . NEW_ROOT_SOURCE_URL + portal_path [EOL] bhv_id = self . get_association_bhv_id ( portal_url ) [EOL] self . create_association ( bhv_id ) [EOL] [EOL] def get_association_bhv_id ( self , association_portal_url ) : [EOL] dom = logic . get_html ( association_portal_url ) [EOL] [ bhv_id ] = dom . xpath ( [string] ) [EOL] return int ( bhv_id ) [EOL] [EOL] def create_association ( self , bhv_id ) : [EOL] url = Association . build_source_url ( bhv_id ) [EOL] dom = logic . get_html ( url ) [EOL] [EOL] name = parsing . parse_league_name ( dom ) [EOL] try : [EOL] abbreviation = Association . get_association_abbreviation ( name ) [EOL] except KeyError : [EOL] LOGGER . warning ( [string] , name ) [EOL] return [EOL] [EOL] if self . options [ [string] ] and bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] association , created = Association . objects . get_or_create ( name = name , abbreviation = abbreviation , bhv_id = bhv_id ) [EOL] if created : [EOL] LOGGER . info ( [string] , association ) [EOL] else : [EOL] LOGGER . info ( [string] , association ) [EOL] [EOL] items = dom . xpath ( [string] ) [EOL] for item in items : [EOL] self . create_district ( item , association ) [EOL] [EOL] def create_district ( self , district_item , association ) : [EOL] name = district_item . text [EOL] bhv_id = int ( district_item . get ( [string] ) ) [EOL] [EOL] if self . options [ [string] ] and bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] district , created = District . objects . get_or_create ( name = name , bhv_id = bhv_id ) [EOL] district . associations . add ( association ) [EOL] if bhv_id in self . processed_districts : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] if created : [EOL] LOGGER . info ( [string] , district ) [EOL] else : [EOL] LOGGER . info ( [string] , district ) [EOL] self . processed_districts . add ( bhv_id ) [EOL] [EOL] for start_year in range ( [number] , datetime . now ( ) . year + [number] ) : [EOL] self . create_season ( district , start_year ) [EOL] [EOL] def create_season ( self , district , start_year ) : [EOL] if self . options [ [string] ] and start_year not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , start_year ) [EOL] return [EOL] [EOL] season , season_created = Season . objects . get_or_create ( start_year = start_year ) [EOL] if season_created : [EOL] LOGGER . info ( [string] , season ) [EOL] else : [EOL] LOGGER . info ( [string] , season ) [EOL] [EOL] for start_date in [ date ( start_year , [number] , [number] ) + timedelta ( days = [number] * n ) for n in range ( [number] ) ] : [EOL] LOGGER . debug ( [string] , district , season , start_date ) [EOL] url = District . build_source_url ( district . bhv_id , start_date ) [EOL] dom = logic . get_html ( url ) [EOL] league_links = dom . xpath ( [string] ) [EOL] if league_links : [EOL] break [EOL] else : [EOL] LOGGER . warning ( [string] , district , season ) [EOL] return [EOL] [EOL] for league_link in league_links : [EOL] self . create_league ( league_link , district , season ) [EOL] [EOL] @ transaction . atomic def create_league ( self , league_link , district , season ) : [EOL] abbreviation = league_link . text [EOL] bhv_id = parsing . parse_league_bhv_id ( league_link ) [EOL] [EOL] if self . options [ [string] ] and bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , bhv_id , abbreviation ) [EOL] return [EOL] [EOL] if abbreviation == [string] : [EOL] LOGGER . debug ( [string] , bhv_id , abbreviation ) [EOL] return [EOL] [EOL] url = League . build_source_url ( bhv_id ) [EOL] dom = logic . get_html ( url ) [EOL] name = parsing . parse_league_name ( dom ) [EOL] [EOL] if any ( n in name for n in [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] team_links = parsing . parse_team_links ( dom ) [EOL] if not team_links : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] game_rows = parsing . parse_game_rows ( dom ) [EOL] if not game_rows : [EOL] LOGGER . debug ( [string] , bhv_id , name ) [EOL] return [EOL] [EOL] if len ( game_rows ) < len ( team_links ) * ( len ( team_links ) - [number] ) : [EOL] LOGGER . debug ( [string] , bhv_id , abbreviation ) [EOL] return [EOL] [EOL] name = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } . get ( bhv_id , name ) [EOL] [EOL] if League . is_youth ( abbreviation , name ) and not self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , bhv_id , abbreviation , name ) [EOL] return [EOL] [EOL] league , league_created = League . objects . get_or_create ( name = name , abbreviation = abbreviation , district = district , season = season , bhv_id = bhv_id ) [EOL] if league_created : [EOL] LOGGER . info ( [string] , league ) [EOL] else : [EOL] LOGGER . info ( [string] , league ) [EOL] [EOL] if self . options [ [string] ] : [EOL] return [EOL] [EOL] for team_link in team_links : [EOL] create_team ( team_link , league ) [EOL] [EOL] retirements = parsing . parse_retirements ( dom ) [EOL] for team_name , retirement_date in retirements : [EOL] try : [EOL] team = Team . objects . get ( league = league , name = team_name ) [EOL] except Team . DoesNotExist : [EOL] LOGGER . warning ( [string] , team_name , league ) [EOL] continue [EOL] if team . retirement != retirement_date : [EOL] team . retirement = retirement_date [EOL] LOGGER . info ( [string] , team , retirement_date ) [EOL] team . save ( ) [EOL] [EOL] [EOL] def create_team ( link , league ) : [EOL] bhv_id = parsing . parse_team_bhv_id ( link ) [EOL] name = link . text [EOL] [EOL] url = Team . build_source_url ( league . bhv_id , bhv_id ) [EOL] dom = logic . get_html ( url ) [EOL] game_rows = parsing . parse_game_rows ( dom ) [EOL] short_team_names = [ c . text for game_row in game_rows for c in game_row . xpath ( [string] ) [ [number] : [number] : [number] ] ] [EOL] short_team_name = max ( set ( short_team_names ) , key = short_team_names . count ) [EOL] [EOL] team , created = Team . objects . get_or_create ( name = name , short_name = short_team_name , league = league , bhv_id = bhv_id ) [EOL] if created : [EOL] LOGGER . info ( [string] , team ) [EOL] else : [EOL] LOGGER . info ( [string] , team ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.set$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
	0
	0
from typing import Tuple , List [EOL] import typing [EOL] from django . test import TestCase [EOL] from leagues . models import League [EOL] [EOL] YOUTH_LEAGUES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] NON_YOUTH_LEAGUES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] [EOL] class Youth ( TestCase ) : [EOL] [EOL] def test_youth ( self ) : [EOL] for abbreviation , name in YOUTH_LEAGUES : [EOL] with self . subTest ( abbreviation = abbreviation , name = name ) : [EOL] self . assertTrue ( League . is_youth ( abbreviation = abbreviation , name = name ) ) [EOL] [EOL] def test_non_youth ( self ) : [EOL] for abbreviation , name in NON_YOUTH_LEAGUES : [EOL] with self . subTest ( abbreviation = abbreviation , name = name ) : [EOL] self . assertFalse ( League . is_youth ( abbreviation = abbreviation , name = name ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , List , Any [EOL] import typing [EOL] import datetime [EOL] import os [EOL] from datetime import date [EOL] [EOL] from django . conf import settings [EOL] from django . test import TestCase [EOL] from lxml import html [EOL] [EOL] from base . parsing import parse_retirements [EOL] from base . tests . base import IntegrationTestCase [EOL] from leagues . models import League [EOL] from players . models import Score [EOL] from teams . models import Team [EOL] [EOL] [EOL] def read_html ( file ) : [EOL] path = os . path . join ( settings . SRC_DIR , [string] , [string] , file ) [EOL] with open ( path , [string] ) as report_file : [EOL] content = report_file . read ( ) [EOL] return html . fromstring ( content ) [EOL] [EOL] [EOL] class ParseRetiredTeamTest ( TestCase ) : [EOL] def test_empty_retirement ( self ) : [EOL] dom = read_html ( [string] ) [EOL] retirements = parse_retirements ( dom ) [EOL] self . assertEqual ( retirements , [ ] ) [EOL] [EOL] def test_retired_team ( self ) : [EOL] dom = read_html ( [string] ) [EOL] retirements = parse_retirements ( dom ) [EOL] expected = [ ( [string] , date ( [number] , [number] , [number] ) ) ] [EOL] self . assertEqual ( expected , retirements ) [EOL] [EOL] def test_another_retired_team ( self ) : [EOL] dom = read_html ( [string] ) [EOL] retirements = parse_retirements ( dom ) [EOL] expected = [ ( [string] , date ( [number] , [number] , [number] ) ) ] [EOL] self . assertEqual ( expected , retirements ) [EOL] [EOL] [EOL] class RetiredTeamTest ( IntegrationTestCase ) : [EOL] def test_retired_team ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_command ( [string] ) [EOL] self . assert_objects ( Team , [number] ) [EOL] [EOL] retirement = date ( [number] , [number] , [number] ) [EOL] retired_team = self . assert_objects ( Team , filters = { [string] : retirement } ) [EOL] self . assertEqual ( retired_team . name , [string] ) [EOL] [EOL] def test_another_retired_team ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_command ( [string] ) [EOL] self . assert_objects ( Team , [number] ) [EOL] [EOL] retirement = date ( [number] , [number] , [number] ) [EOL] retired_team = self . assert_objects ( Team , filters = { [string] : retirement } ) [EOL] self . assertEqual ( retired_team . name , [string] ) [EOL] [EOL] def test_retirement_during_season ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] team = self . assert_objects ( Team , filters = { [string] : False } ) [EOL] team . retirement = None [EOL] team . save ( ) [EOL] self . assert_command ( [string] , [string] , [string] ) [EOL] self . assert_command ( [string] ) [EOL] other_teams_scores_count_before = Score . objects . exclude ( player__team = team ) . count ( ) [EOL] [EOL] self . assertGreater ( team . player_set . count ( ) , [number] ) [EOL] self . assertGreater ( Score . objects . filter ( player__team = team ) . count ( ) , [number] ) [EOL] [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_command ( [string] ) [EOL] team = self . assert_objects ( Team , filters = { [string] : False } ) [EOL] other_teams_scores_count_after = Score . objects . exclude ( player__team = team ) . count ( ) [EOL] [EOL] self . assertGreater ( team . player_set . count ( ) , [number] ) [EOL] self . assertEqual ( Score . objects . filter ( player__team = team ) . count ( ) , [number] ) [EOL] self . assertGreater ( other_teams_scores_count_before , other_teams_scores_count_after ) [EOL] [EOL] def test_nonexisting_retired_team ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_objects ( League ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Tuple[builtins.str,datetime.date]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,datetime.date]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Tuple[builtins.str,datetime.date]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,datetime.date]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from associations . models import Association [EOL] from base . tests . base import IntegrationTestCase [EOL] from districts . models import District [EOL] from leagues . models import League , Season [EOL] [EOL] [EOL] class SetupTest ( IntegrationTestCase ) : [EOL] [EOL] def test__setup__association ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] ) [EOL] association = self . assert_objects ( Association ) [EOL] self . assertEqual ( association . bhv_id , [number] ) [EOL] self . assertEqual ( association . name , [string] ) [EOL] [EOL] def test__setup__district ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] district = self . assert_objects ( District ) [EOL] self . assertEqual ( district . bhv_id , [number] ) [EOL] self . assertEqual ( district . name , [string] ) [EOL] [EOL] def test__setup__season ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] season = self . assert_objects ( Season ) [EOL] self . assertEqual ( season . start_year , [number] ) [EOL] [EOL] def test__setup__league ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertEqual ( league . name , [string] ) [EOL] self . assertEqual ( league . abbreviation , [string] ) [EOL] self . assertEqual ( league . bhv_id , [number] ) [EOL] [EOL] def test__setup__exclude_irrelevant_seasons ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_objects ( League , [number] ) [EOL] [EOL] for start_year in range ( [number] , [number] ) : [EOL] exists = Season . objects . filter ( start_year = start_year ) . exists ( ) [EOL] self . assertTrue ( exists , [string] . format ( start_year ) ) [EOL] [EOL] def test__setup__old_leagues ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] [EOL] for start_year in range ( [number] , [number] ) : [EOL] exists = Season . objects . filter ( start_year = start_year ) . exists ( ) [EOL] self . assertFalse ( exists , [string] . format ( start_year ) ) [EOL] [EOL] def test__setup__meisterschaft ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [number] , [number] ) [EOL] [EOL] self . assert_command ( [string] ) [EOL] [EOL] def test__setup__subsequently_added_to_district ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] [EOL] class StartDate ( IntegrationTestCase ) : [EOL] def test_first_hit ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] [EOL] def test_first_hit_multiseason ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [number] , [string] , [number] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] [EOL] def test_later_hit ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] [EOL] def test_later_hit_multiseason ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [number] , [string] , [number] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any
[EOL] from typing import Any [EOL] import typing [EOL] import leagues [EOL] from base . tests . base import IntegrationTestCase [EOL] from leagues . models import League , Season [EOL] [EOL] [EOL] class SetupTest ( IntegrationTestCase ) : [EOL] [EOL] def test__setup__mvl_2016 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] season = self . assert_objects ( Season ) [EOL] self . assertEqual ( season . start_year , [number] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertEqual ( league . name , [string] ) [EOL] self . assertEqual ( league . abbreviation , [string] ) [EOL] self . assertEqual ( league . bhv_id , [number] ) [EOL] self . assertEqual ( league . season , season ) [EOL] [EOL] def test__setup__mvl_2017 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] season = self . assert_objects ( Season ) [EOL] self . assertEqual ( season . start_year , [number] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertEqual ( league . name , [string] ) [EOL] self . assertEqual ( league . abbreviation , [string] ) [EOL] self . assertEqual ( league . bhv_id , [number] ) [EOL] self . assertEqual ( league . season , season ) [EOL] [EOL] def test__setup__mwls_2016 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] season = self . assert_objects ( Season ) [EOL] self . assertEqual ( season . start_year , [number] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertEqual ( league . name , [string] ) [EOL] self . assertEqual ( league . abbreviation , [string] ) [EOL] self . assertEqual ( league . bhv_id , [number] ) [EOL] self . assertEqual ( league . season , season ) [EOL] [EOL] def test__setup__mwls_2017 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] season = self . assert_objects ( Season ) [EOL] self . assertEqual ( season . start_year , [number] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertEqual ( league . name , [string] ) [EOL] self . assertEqual ( league . abbreviation , [string] ) [EOL] self . assertEqual ( league . bhv_id , [number] ) [EOL] self . assertEqual ( league . season , season ) [EOL] [EOL] def test__setup__mklc2_2007 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] mklc2 = League . objects . get ( abbreviation = [string] ) [EOL] mklc3 = League . objects . get ( abbreviation = [string] ) [EOL] [EOL] self . assertEqual ( mklc2 . name , [string] ) [EOL] self . assertEqual ( mklc3 . name , [string] ) [EOL] [EOL] def test__setup__mkl2_2005 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] mkl21 = League . objects . get ( abbreviation = [string] ) [EOL] mkl22 = League . objects . get ( abbreviation = [string] ) [EOL] [EOL] self . assertEqual ( mkl21 . name , [string] ) [EOL] self . assertEqual ( mkl22 . name , [string] ) [EOL] [EOL] [EOL] class Youth ( IntegrationTestCase ) : [EOL] def test_youth ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] ) [EOL] [EOL] league = self . assert_objects ( League ) [EOL] self . assertTrue ( league . youth ) [EOL] [EOL] def test_no_youth ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL] [EOL] [EOL] class LongLeagueNames ( IntegrationTestCase ) : [EOL] def test_youth ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [number] , [string] ) [EOL] [EOL] leagues = self . assert_objects ( League , count = [number] ) . order_by ( [string] ) [EOL] self . assertEqual ( leagues [ [number] ] . name , [string] ) [EOL] self . assertEqual ( leagues [ [number] ] . name , [string] ) [EOL] [EOL] [EOL] class Pokal ( IntegrationTestCase ) : [EOL] def test_fpokk_2019 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] [EOL] self . assert_objects ( League , count = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DistrictsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import detail [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [ path ( [string] , detail , name = [string] ) , ] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] from . models import District [EOL] [EOL] admin . site . register ( District ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import datetime [EOL] import src [EOL] import datetime [EOL] [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from associations . models import Association [EOL] [EOL] [EOL] class District ( models . Model ) : [EOL] name = models . TextField ( unique = True ) [EOL] associations = models . ManyToManyField ( Association ) [EOL] bhv_id = models . IntegerField ( unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . bhv_id , self . name ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . bhv_id } ) [EOL] [EOL] @ staticmethod def build_source_url ( bhv_id , date = None ) : [EOL] date_suffix = [string] . format ( date ) if date else [string] [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( bhv_id , date_suffix ) [EOL] [EOL] def source_url ( self , date = None ) : [EOL] return self . build_source_url ( self . bhv_id , date ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.districts.models.District]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.districts.models.District]$ 0 0 0 0 0 0 0 0 $typing.Type[src.districts.models.District]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $datetime.date$ 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0
from typing import List , OrderedDict , DefaultDict , Any [EOL] import typing [EOL] import collections [EOL] import collections [EOL] [EOL] from django . shortcuts import get_object_or_404 , render [EOL] [EOL] from . models import District [EOL] [EOL] [EOL] def detail ( request , bhv_id ) : [EOL] district = get_object_or_404 ( District , bhv_id = bhv_id ) [EOL] leagues = district . league_set [EOL] grouped = collections . defaultdict ( list ) [EOL] for league in leagues . all ( ) : [EOL] grouped [ league . season . start_year ] . append ( league ) [EOL] sorted_groups = collections . OrderedDict ( sorted ( grouped . items ( ) , key = lambda t : t [ [number] ] , reverse = True ) ) [EOL] for leagues in sorted_groups . values ( ) : [EOL] leagues . sort ( key = lambda l : l . name ) [EOL] return render ( request , [string] , { [string] : district , [string] : sorted_groups } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Tuple , Any , Optional , Union , List [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from typing import Optional [EOL] [EOL] SRC_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] ROOT_DIR = os . path . dirname ( SRC_DIR ) [EOL] [EOL] SECRET_KEY = [string] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , ] , } , } , { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [string] , [string] : [ [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( ROOT_DIR , [string] ) , } } [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_L10N = True [EOL] [EOL] [EOL] [comment] [EOL] [EOL] LOGGING = { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : os . path . join ( ROOT_DIR , [string] ) , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , } , [string] : { [string] : { [string] : [ [string] , [string] ] , [string] : [string] , [string] : True , } , } , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] STATIC_ROOT = os . path . join ( ROOT_DIR , [string] ) [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] MEDIA_ROOT = os . path . join ( ROOT_DIR , [string] ) [EOL] [EOL] MEDIA_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] EMAIL_FILE_PATH = os . path . join ( ROOT_DIR , [string] ) [EOL] [EOL] MANAGERS = [ ( [string] , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] LOGIN_REDIRECT_URL = [string] [EOL] [EOL] LOGIN_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] ACCOUNT_ACTIVATION_DAYS = [number] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] PUBLIC_NAMES = True [EOL] [EOL] MATOMO_URL = None [EOL] [EOL] REPORTS_PATH = os . path . join ( ROOT_DIR , [string] ) [EOL] [EOL] ROOT_SOURCE_URL = [string] [EOL] [EOL] NEW_ROOT_SOURCE_URL = [string] [EOL] [EOL] SELENIUM_TIMEOUT = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
import jinja2 [EOL] from django . contrib . staticfiles . storage import staticfiles_storage [EOL] from django . template . defaultfilters import date , time [EOL] from django . urls import reverse [EOL] from jinja2 import Environment [EOL] [EOL] from base . templatetags . scores_extras import game_outcome_badge , team_logo_url , team_outcome_badge [EOL] [EOL] [EOL] def environment ( ** options ) : [EOL] options [ [string] ] = True [EOL] options [ [string] ] = True [EOL] env = Environment ( ** options ) [EOL] env . globals . update ( { [string] : staticfiles_storage . url , [string] : reverse , [string] : team_logo_url , [string] : date , [string] : time , [string] : team_outcome_badge , [string] : game_outcome_badge , } ) [EOL] return env [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import src [EOL] from django . contrib . auth import views as auth_views [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . http import HttpResponseRedirect [EOL] from django . shortcuts import render [EOL] from django . urls import reverse_lazy [EOL] from django . views . decorators . http import require_POST [EOL] [EOL] from associations . models import Association [EOL] from leagues . models import Season [EOL] from players . models import Player [EOL] from teams . models import Team [EOL] [EOL] from . forms import LinkForm [EOL] [EOL] [EOL] @ login_required def profile ( request ) : [EOL] players = Player . objects . filter ( user = request . user ) . order_by ( [string] ) [EOL] return render ( request = request , template_name = [string] , context = { [string] : players } ) [EOL] [EOL] [EOL] @ login_required def link ( request ) : [EOL] if request . method == [string] : [EOL] form = LinkForm ( request . POST , user = request . user ) [EOL] team = team_from_request_query ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] player = form . cleaned_data . get ( [string] ) [EOL] player . user = request . user [EOL] player . published = True [EOL] player . save ( ) [EOL] [EOL] profile_url = reverse_lazy ( [string] ) [EOL] return HttpResponseRedirect ( profile_url ) [EOL] [EOL] else : [EOL] form = LinkForm ( user = request . user ) [EOL] team = team_from_request_query ( request . GET ) [EOL] [EOL] leagues = team . league . district . league_set . filter ( season = team . league . season ) if team else [ ] [EOL] [EOL] return render ( request = request , template_name = [string] , context = { [string] : form , [string] : team , [string] : leagues , [string] : Season . objects . all ( ) , [string] : Association . objects . all ( ) , } ) [EOL] [EOL] [EOL] @ login_required @ require_POST def unlink ( request ) : [EOL] player_pk = request . POST . get ( [string] ) [EOL] if player_pk is not None : [EOL] player = Player . objects . get ( pk = player_pk ) [EOL] if player . user == request . user : [EOL] player . published = False [EOL] player . save ( ) [EOL] [EOL] profile_url = reverse_lazy ( [string] ) [EOL] return HttpResponseRedirect ( profile_url ) [EOL] [EOL] [EOL] def team_from_request_query ( query ) : [EOL] team_bhv_id = query . get ( [string] ) [EOL] try : [EOL] return Team . objects . get ( bhv_id = team_bhv_id ) [EOL] except ObjectDoesNotExist : [EOL] return None [EOL] [EOL] [EOL] class Link ( auth_views . LoginView ) : [EOL] template_name = [string] [EOL] redirect_authenticated_user = True [EOL] [EOL] [EOL] class Login ( auth_views . LoginView ) : [EOL] template_name = [string] [EOL] redirect_authenticated_user = True [EOL] [EOL] [EOL] class Logout ( auth_views . LogoutView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordChange ( auth_views . PasswordChangeView ) : [EOL] success_url = reverse_lazy ( [string] ) [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordChangeSuccess ( auth_views . PasswordChangeDoneView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordReset ( auth_views . PasswordResetView ) : [EOL] email_template_name = [string] [EOL] subject_template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordResetSent ( auth_views . PasswordResetDoneView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordResetChange ( auth_views . PasswordResetConfirmView ) : [EOL] success_url = reverse_lazy ( [string] ) [EOL] template_name = [string] [EOL] [EOL] [EOL] class PasswordResetSuccess ( auth_views . PasswordResetCompleteView ) : [EOL] template_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.users.views.PasswordChange]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[src.users.views.PasswordReset]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.users.views.PasswordResetChange]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Any [EOL] import typing [EOL] import django [EOL] import logging [EOL] import src [EOL] import logging [EOL] [EOL] from django import forms [EOL] from django . contrib . auth . models import User [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from players . models import Player [EOL] from teams . models import Team [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class LinkForm ( forms . Form ) : [EOL] team_bhv_id = forms . IntegerField ( ) [EOL] player_name = forms . CharField ( max_length = [number] ) [EOL] [EOL] user = None [EOL] [EOL] def __init__ ( self , * args , user , ** kwargs ) : [EOL] self . user = user [EOL] super ( LinkForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean_team_bhv_id ( self ) : [EOL] team_bhv_id = self . cleaned_data . get ( [string] ) [EOL] [EOL] try : [EOL] team = Team . objects . get ( bhv_id = team_bhv_id ) [EOL] except Team . DoesNotExist : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] self . cleaned_data [ [string] ] = team [EOL] return team_bhv_id [EOL] [EOL] def clean ( self ) : [EOL] team = self . cleaned_data . get ( [string] ) [EOL] player_name = self . cleaned_data . get ( [string] ) [EOL] [EOL] if not team or not player_name : [EOL] return None [EOL] [EOL] try : [EOL] player = Player . objects . get ( team = team , name__iexact = player_name ) [EOL] except Player . DoesNotExist : [EOL] self . add_error ( [string] , [string] ) [EOL] return None [EOL] [EOL] if player . user is not None : [EOL] self . add_error ( [string] , [string] ) [EOL] return None [EOL] [EOL] self . cleaned_data [ [string] ] = player [EOL] return self . cleaned_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.users.forms.LinkForm]$ 0 0 0 0 0 0 0 $typing.Type[src.users.forms.LinkForm]$ 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.auth.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . profile , name = [string] ) , path ( [string] , views . link , name = [string] ) , path ( [string] , views . unlink , name = [string] ) , path ( [string] , views . Login . as_view ( ) , name = [string] ) , path ( [string] , views . Logout . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordChange . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordChangeSuccess . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordReset . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordResetSent . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordResetChange . as_view ( ) , name = [string] ) , path ( [string] , views . PasswordResetSuccess . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Any [EOL] import typing [EOL] import src [EOL] from django . contrib . auth . models import User [EOL] from django . test import TestCase [EOL] [EOL] from districts . models import District [EOL] from leagues . models import League , Season [EOL] from players . models import Player [EOL] from teams . models import Team [EOL] [EOL] from . . forms import LinkForm [EOL] [EOL] [EOL] class TestLinkForm ( TestCase ) : [EOL] def test_simple ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] league = League . objects . create ( bhv_id = [number] , district = district , season = season ) [EOL] team = Team . objects . create ( bhv_id = [number] , league = league ) [EOL] player = Player . objects . create ( name = [string] , team = team ) [EOL] [EOL] form_data = { [string] : team . bhv_id , [string] : player . name } [EOL] user = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] def test_player_name_ignore_case ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] league = League . objects . create ( bhv_id = [number] , district = district , season = season ) [EOL] team = Team . objects . create ( bhv_id = [number] , league = league ) [EOL] Player . objects . create ( name = [string] , team = team ) [EOL] [EOL] form_data = { [string] : team . bhv_id , [string] : [string] } [EOL] user = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL] [EOL] def test_team_does_not_exist ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] league = League . objects . create ( bhv_id = [number] , district = district , season = season ) [EOL] team = Team . objects . create ( bhv_id = [number] , league = league ) [EOL] player = Player . objects . create ( name = [string] , team = team ) [EOL] [EOL] form_data = { [string] : [number] , [string] : player . name } [EOL] user = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors , { [string] : [ [string] ] } ) [EOL] [EOL] def test_player_does_not_exist ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] league = League . objects . create ( bhv_id = [number] , district = district , season = season ) [EOL] team = Team . objects . create ( bhv_id = [number] , league = league ) [EOL] [EOL] form_data = { [string] : team . bhv_id , [string] : [string] } [EOL] user = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors , { [string] : [ [string] ] } ) [EOL] [EOL] def test_team_and_player_do_not_exist ( self ) : [EOL] form_data = { [string] : [number] , [string] : [string] } [EOL] user = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors , { [string] : [ [string] ] } ) [EOL] [EOL] def test_player_already_linked ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] league = League . objects . create ( bhv_id = [number] , district = district , season = season ) [EOL] team = Team . objects . create ( bhv_id = [number] , league = league ) [EOL] [EOL] user1 = User . objects . create ( username = [string] ) [EOL] player = Player . objects . create ( name = [string] , team = team , user = user1 ) [EOL] [EOL] form_data = { [string] : team . bhv_id , [string] : player . name } [EOL] user2 = User . objects . create ( username = [string] ) [EOL] form = LinkForm ( data = form_data , user = user2 ) [EOL] [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors , { [string] : [ [string] ] } ) [EOL] [EOL] def test_multiple_seasons ( self ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season_a = Season . objects . create ( start_year = [number] ) [EOL] season_b = Season . objects . create ( start_year = [number] ) [EOL] league_a = League . objects . create ( bhv_id = [number] , district = district , season = season_a ) [EOL] league_b = League . objects . create ( bhv_id = [number] , district = district , season = season_b ) [EOL] team_a = Team . objects . create ( bhv_id = [number] , league = league_a ) [EOL] team_b = Team . objects . create ( bhv_id = [number] , league = league_b ) [EOL] [EOL] player_name = [string] [EOL] [EOL] user = User . objects . create ( username = [string] ) [EOL] Player . objects . create ( name = player_name , team = team_a , user = user ) [EOL] player = Player . objects . create ( name = player_name , team = team_b ) [EOL] [EOL] form_data = { [string] : team_b . bhv_id , [string] : player . name } [EOL] form = LinkForm ( data = form_data , user = user ) [EOL] [EOL] self . assertTrue ( form . is_valid ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $src.users.forms.LinkForm$ 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] [EOL] from base . tests . base import SeleniumTestCase [EOL] [EOL] [EOL] class TestPasswordChange ( SeleniumTestCase ) : [EOL] def test_password_change ( self ) : [EOL] username = [string] [EOL] usermail = [string] [EOL] oldpass = [string] [EOL] newpass = [string] [EOL] User . objects . create_user ( username , usermail , oldpass ) [EOL] [EOL] self . login ( username , oldpass ) [EOL] self . assert_view ( [string] ) [EOL] [EOL] self . navigate ( [string] ) [EOL] old_password_textfield = self . driver . find_element_by_name ( [string] ) [EOL] old_password_textfield . send_keys ( oldpass ) [EOL] new_pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] new_pass_textfield . send_keys ( newpass ) [EOL] new_pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] new_pass_textfield . send_keys ( newpass ) [EOL] with self . wait ( ) : [EOL] new_pass_textfield . submit ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] success_text = self . driver . find_element_by_tag_name ( [string] ) . text [EOL] self . assertEqual ( success_text , [string] ) [EOL] [EOL] self . assertEqual ( User . objects . all ( ) . count ( ) , [number] ) [EOL] self . assertFalse ( User . objects . first ( ) . check_password ( oldpass ) ) [EOL] self . assertTrue ( User . objects . first ( ) . check_password ( newpass ) ) [EOL] [EOL] def login ( self , username , password ) : [EOL] self . navigate ( [string] ) [EOL] username_textfield = self . driver . find_element_by_name ( [string] ) [EOL] username_textfield . send_keys ( username ) [EOL] password_textfield = self . driver . find_element_by_name ( [string] ) [EOL] password_textfield . send_keys ( password ) [EOL] with self . wait ( ) : [EOL] password_textfield . submit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import django [EOL] import datetime [EOL] import unittest [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] from django . core import mail [EOL] [EOL] from base . tests . base import SeleniumTestCase [EOL] [EOL] from . test_registration import TestRegistration [EOL] [EOL] [EOL] class TestActivationFailed ( SeleniumTestCase ) : [EOL] def test_invalid_key ( self ) : [EOL] self . navigate ( [string] , activation_key = [string] ) [EOL] alert = self . driver . find_element_by_class_name ( [string] ) [EOL] self . assertEqual ( alert . text , [string] ) [EOL] [EOL] def test_already_activated ( self ) : [EOL] TestRegistration . test_registration ( self = self ) [EOL] message = mail . outbox [ [number] ] [EOL] activation_link = message . body . splitlines ( ) [ [number] ] [EOL] self . driver . get ( activation_link ) [EOL] self . assert_view ( [string] ) [EOL] [EOL] alert = self . driver . find_element_by_class_name ( [string] ) [EOL] self . assertEqual ( alert . text , [string] ) [EOL] [EOL] @ unittest . skip ( [string] ) def test_key_expired ( self ) : [EOL] self . assertEqual ( mail . outbox , [ ] ) [EOL] [EOL] username = [string] [EOL] usermail = [string] [EOL] userpass = [string] [EOL] self . assertEqual ( User . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] self . navigate ( [string] ) [EOL] username_textfield = self . driver . find_element_by_name ( [string] ) [EOL] username_textfield . send_keys ( username ) [EOL] mail_textfield = self . driver . find_element_by_name ( [string] ) [EOL] mail_textfield . send_keys ( usermail ) [EOL] pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] pass_textfield . send_keys ( userpass ) [EOL] pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] pass_textfield . send_keys ( userpass ) [EOL] with self . wait ( ) : [EOL] pass_textfield . submit ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] [EOL] user = User . objects . first ( ) [EOL] user . date_joined -= datetime . timedelta ( days = settings . ACCOUNT_ACTIVATION_DAYS + [number] ) [EOL] user . save ( ) [EOL] [EOL] message = mail . outbox [ [number] ] [EOL] activation_link = message . body . splitlines ( ) [ [number] ] [EOL] self . driver . get ( activation_link ) [EOL] self . assert_view ( [string] ) [EOL] [EOL] alert = self . driver . find_element_by_class_name ( [string] ) [EOL] self . assertEqual ( alert . text , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import django [EOL] from django . contrib . auth . models import User [EOL] from django . core import mail [EOL] [EOL] from base . tests . base import SeleniumTestCase [EOL] [EOL] [EOL] class TestRegistration ( SeleniumTestCase ) : [EOL] def test_registration ( self ) : [EOL] self . assertEqual ( mail . outbox , [ ] ) [EOL] [EOL] username = [string] [EOL] usermail = [string] [EOL] userpass = [string] [EOL] self . assertEqual ( User . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] self . navigate ( [string] ) [EOL] username_textfield = self . driver . find_element_by_name ( [string] ) [EOL] username_textfield . send_keys ( username ) [EOL] mail_textfield = self . driver . find_element_by_name ( [string] ) [EOL] mail_textfield . send_keys ( usermail ) [EOL] pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] pass_textfield . send_keys ( userpass ) [EOL] pass_textfield = self . driver . find_element_by_name ( [string] ) [EOL] pass_textfield . send_keys ( userpass ) [EOL] with self . wait ( ) : [EOL] pass_textfield . submit ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] self . assertEqual ( len ( mail . outbox ) , [number] ) [EOL] message = mail . outbox [ [number] ] [EOL] self . assertEqual ( message . to , [ usermail ] ) [EOL] activation_link = message . body . splitlines ( ) [ [number] ] [EOL] self . driver . get ( activation_link ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] self . assertEqual ( User . objects . all ( ) . count ( ) , [number] ) [EOL] login_link = self . driver . find_element_by_id ( [string] ) [EOL] with self . wait ( ) : [EOL] login_link . click ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] username_textfield = self . driver . find_element_by_name ( [string] ) [EOL] username_textfield . send_keys ( username ) [EOL] password_textfield = self . driver . find_element_by_name ( [string] ) [EOL] password_textfield . send_keys ( userpass ) [EOL] with self . wait ( ) : [EOL] password_textfield . submit ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any [EOL] import typing [EOL] from django . http import JsonResponse [EOL] [EOL] from associations . models import Association [EOL] from districts . models import District [EOL] from leagues . models import League , Season [EOL] [EOL] [EOL] def associations ( _ ) : [EOL] light_associations = [ { [string] : a . bhv_id , [string] : a . name , [string] : a . abbreviation , } for a in Association . objects . all ( ) ] [EOL] [EOL] return JsonResponse ( { [string] : light_associations } ) [EOL] [EOL] [EOL] def association_districts ( _ , bhv_id ) : [EOL] association_results = Association . objects . filter ( bhv_id = bhv_id ) [EOL] [EOL] if not association_results . exists ( ) : [EOL] return JsonResponse ( { [string] : [string] } , status = [number] ) [EOL] [EOL] association = association_results [ [number] ] [EOL] [EOL] districts = [ { [string] : district . bhv_id , [string] : district . name , } for district in association . district_set . all ( ) ] [EOL] [EOL] return JsonResponse ( { [string] : districts } ) [EOL] [EOL] [EOL] def seasons ( _ ) : [EOL] light_seasons = [ { [string] : season . start_year } for season in Season . objects . all ( ) ] [EOL] [EOL] return JsonResponse ( { [string] : light_seasons } ) [EOL] [EOL] [EOL] def district_season_leagues ( _ , bhv_id , start_year ) : [EOL] district_results = District . objects . filter ( bhv_id = bhv_id ) [EOL] if not district_results . exists ( ) : [EOL] return JsonResponse ( { [string] : [string] } , status = [number] ) [EOL] district = district_results [ [number] ] [EOL] [EOL] season_results = Season . objects . filter ( start_year = start_year ) [EOL] if not season_results . exists ( ) : [EOL] return JsonResponse ( { [string] : [string] } , status = [number] ) [EOL] season = season_results [ [number] ] [EOL] [EOL] light_leagues = [ { [string] : league . bhv_id , [string] : league . name , } for league in League . objects . filter ( district = district , season = season ) ] [EOL] [EOL] return JsonResponse ( { [string] : light_leagues } ) [EOL] [EOL] [EOL] def league_teams ( _ , bhv_id ) : [EOL] leagues = League . objects . filter ( bhv_id = bhv_id ) [EOL] [EOL] if not leagues . exists ( ) : [EOL] return JsonResponse ( { [string] : [string] } , status = [number] ) [EOL] [EOL] league = leagues [ [number] ] [EOL] [EOL] light_teams = [ { [string] : team . bhv_id , [string] : team . name , [string] : team . short_name , } for team in league . team_set . all ( ) ] [EOL] [EOL] return JsonResponse ( { [string] : light_teams } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AssociationsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import render , get_object_or_404 [EOL] [EOL] from . models import Association [EOL] [EOL] [EOL] def show_all ( request ) : [EOL] associations = Association . objects . all ( ) [EOL] return render ( request , [string] , { [string] : associations } ) [EOL] [EOL] [EOL] def detail ( request , bhv_id ) : [EOL] association = get_object_or_404 ( Association , bhv_id = bhv_id ) [EOL] return render ( request , [string] , { [string] : association } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] [EOL] from . views import show_all , detail [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , show_all , name = [string] ) , path ( [string] , include ( [ path ( [string] , detail , name = [string] ) , ] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] [EOL] class TestViews ( TestCase ) : [EOL] def test_list ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_detail ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Dict , Type [EOL] import typing [EOL] import src [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class Association ( models . Model ) : [EOL] name = models . TextField ( unique = True ) [EOL] abbreviation = models . TextField ( ) [EOL] bhv_id = models . IntegerField ( unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . bhv_id , self . abbreviation ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . bhv_id } ) [EOL] [EOL] @ staticmethod def build_source_url ( bhv_id ) : [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( bhv_id ) [EOL] [EOL] def source_url ( self ) : [EOL] return self . build_source_url ( self . bhv_id ) [EOL] [EOL] @ staticmethod def get_association_abbreviation ( association_name ) : [EOL] association_abbreviations = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return association_abbreviations [ association_name ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.associations.models.Association]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.associations.models.Association]$ 0 0 0 0 0 0 0 $typing.Type[src.associations.models.Association]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Association [EOL] [EOL] admin . site . register ( Association ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List [EOL] import typing [EOL] from typing import List [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List$ 0 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Game [EOL] [EOL] admin . site . register ( Game ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Type , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] import src [EOL] from enum import Enum , auto [EOL] [EOL] from django . conf import settings [EOL] from django . db import models [EOL] [EOL] from leagues . models import League [EOL] from sports_halls . models import SportsHall [EOL] from teams . models import Team [EOL] [EOL] [EOL] class GameOutcome ( Enum ) : [EOL] HOME_WIN = auto ( ) [EOL] AWAY_WIN = auto ( ) [EOL] TIE = auto ( ) [EOL] OPEN = auto ( ) [EOL] [EOL] [EOL] class TeamOutcome ( Enum ) : [EOL] WIN = auto ( ) [EOL] LOSS = auto ( ) [EOL] TIE = auto ( ) [EOL] OPEN = auto ( ) [EOL] [EOL] [EOL] class Leg ( Enum ) : [EOL] FIRST = auto ( ) [EOL] BEWTEEN = auto ( ) [EOL] SECOND = auto ( ) [EOL] UNKNOWN = auto ( ) [EOL] [EOL] [EOL] class Game ( models . Model ) : [EOL] number = models . IntegerField ( ) [EOL] league = models . ForeignKey ( League , on_delete = models . CASCADE ) [EOL] opening_whistle = models . DateTimeField ( blank = True , null = True ) [EOL] sports_hall = models . ForeignKey ( SportsHall , on_delete = models . CASCADE , blank = True , null = True ) [EOL] home_team = models . ForeignKey ( Team , on_delete = models . CASCADE , related_name = [string] ) [EOL] guest_team = models . ForeignKey ( Team , on_delete = models . CASCADE , related_name = [string] ) [EOL] home_goals = models . IntegerField ( blank = True , null = True ) [EOL] guest_goals = models . IntegerField ( blank = True , null = True ) [EOL] report_number = models . IntegerField ( unique = True , blank = True , null = True ) [EOL] forfeiting_team = models . ForeignKey ( Team , on_delete = models . CASCADE , blank = True , null = True , related_name = [string] ) [EOL] spectators = models . IntegerField ( blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . number , self . league , self . home_team . short_name , self . guest_team . short_name ) [EOL] [EOL] @ staticmethod def build_report_source_url ( report_number ) : [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( report_number ) [EOL] [EOL] def report_source_url ( self ) : [EOL] if self . report_number is None : [EOL] return None [EOL] return self . build_report_source_url ( self . report_number ) [EOL] [EOL] def opponent_of ( self , team ) : [EOL] if team == self . home_team : [EOL] return self . guest_team [EOL] if team == self . guest_team : [EOL] return self . home_team [EOL] raise ValueError ( [string] . format ( team ) ) [EOL] [EOL] def other_games ( self ) : [EOL] return Game . objects . filter ( ~ models . Q ( number = self . number ) , home_team__in = ( self . home_team , self . guest_team ) , guest_team__in = ( self . home_team , self . guest_team ) ) [EOL] [EOL] def leg ( self ) : [EOL] if self . opening_whistle is None : [EOL] return Leg . UNKNOWN [EOL] [EOL] other_games = self . other_games ( ) [EOL] if not other_games or list ( filter ( lambda g : g . opening_whistle is None , other_games ) ) : [EOL] return Leg . UNKNOWN [EOL] [EOL] if len ( other_games ) == [number] : [EOL] first_leg = self . opening_whistle < other_games [ [number] ] . opening_whistle [EOL] return Leg . FIRST if first_leg else Leg . SECOND [EOL] [EOL] if len ( other_games ) == [number] : [EOL] if self . opening_whistle < other_games [ [number] ] . opening_whistle \ [EOL] and self . opening_whistle < other_games [ [number] ] . opening_whistle : [EOL] return Leg . FIRST [EOL] if self . opening_whistle > other_games [ [number] ] . opening_whistle \ [EOL] and self . opening_whistle > other_games [ [number] ] . opening_whistle : [EOL] return Leg . SECOND [EOL] [EOL] return Leg . BEWTEEN [EOL] [EOL] raise RuntimeError ( [string] . format ( self ) ) [EOL] [EOL] def leg_title ( self ) : [EOL] mapping = { Leg . FIRST : [string] , Leg . BEWTEEN : [string] , Leg . SECOND : [string] , Leg . UNKNOWN : [string] , } [EOL] return mapping [ self . leg ( ) ] [EOL] [EOL] def outcome ( self ) : [EOL] if self . home_goals is None and self . guest_goals is None : [EOL] return GameOutcome . OPEN [EOL] if self . home_goals > self . guest_goals or self . forfeiting_team == self . guest_team : [EOL] return GameOutcome . HOME_WIN [EOL] if self . home_goals < self . guest_goals or self . forfeiting_team == self . home_team : [EOL] return GameOutcome . AWAY_WIN [EOL] if self . home_goals == self . guest_goals : [EOL] return GameOutcome . TIE [EOL] raise ValueError ( [string] ) [EOL] [EOL] def outcome_for ( self , team ) : [EOL] if self . outcome ( ) == GameOutcome . OPEN : [EOL] return TeamOutcome . OPEN [EOL] if self . outcome ( ) == GameOutcome . TIE : [EOL] return TeamOutcome . TIE [EOL] if team == self . home_team and self . outcome ( ) == GameOutcome . HOME_WIN or team == self . guest_team and self . outcome ( ) == GameOutcome . AWAY_WIN : [EOL] return TeamOutcome . WIN [EOL] if team == self . home_team and self . outcome ( ) == GameOutcome . AWAY_WIN or team == self . guest_team and self . outcome ( ) == GameOutcome . HOME_WIN : [EOL] return TeamOutcome . LOSS [EOL] raise ValueError ( [string] . format ( team ) ) [EOL] [EOL] def goals_of ( self , team ) : [EOL] if team == self . home_team : [EOL] return self . home_goals [EOL] if team == self . guest_team : [EOL] return self . guest_goals [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.games.models.Game]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Leg$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[src.games.models.Leg,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[src.games.models.Leg,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $GameOutcome$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $TeamOutcome$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class GamesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from typing import Dict , Any [EOL] import logging [EOL] import leagues [EOL] import typing [EOL] import associations [EOL] import districts [EOL] import logging [EOL] from typing import Dict [EOL] [EOL] from django . core . management import BaseCommand [EOL] [EOL] from associations . models import Association [EOL] from base import logic , parsing [EOL] from base . middleware import env [EOL] from base . models import Value [EOL] from districts . models import District [EOL] from games . models import Game [EOL] from leagues . models import League , Season [EOL] from players . models import Score [EOL] from sports_halls . models import SportsHall [EOL] from teams . models import Team [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] options = { } [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . options = options [EOL] env . UPDATING . set_value ( Value . TRUE ) [EOL] self . import_associations ( ) [EOL] env . UPDATING . set_value ( Value . FALSE ) [EOL] [EOL] def import_associations ( self ) : [EOL] for association in Association . objects . all ( ) : [EOL] self . import_association ( association ) [EOL] [EOL] def import_association ( self , association ) : [EOL] if self . options [ [string] ] and association . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , association ) [EOL] return [EOL] [EOL] for district in association . district_set . all ( ) : [EOL] self . import_district ( district ) [EOL] [EOL] def import_district ( self , district ) : [EOL] if self . options [ [string] ] and district . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , district ) [EOL] return [EOL] [EOL] season_pks = district . league_set . values ( [string] ) . distinct ( ) [EOL] seasons = Season . objects . filter ( pk__in = season_pks ) [EOL] for season in seasons : [EOL] self . import_district_season ( district , season ) [EOL] [EOL] def import_district_season ( self , district , season ) : [EOL] if self . options [ [string] ] and season . start_year not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , district , season ) [EOL] return [EOL] [EOL] for league in district . league_set . filter ( season = season ) : [EOL] self . import_league ( league ) [EOL] [EOL] def import_league ( self , league ) : [EOL] if self . options [ [string] ] and league . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , league ) [EOL] return [EOL] [EOL] if league . youth and not self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , league ) [EOL] return [EOL] [EOL] tree = logic . get_html ( league . source_url ( ) ) [EOL] [EOL] game_rows = tree . xpath ( [string] ) [EOL] for game_row in game_rows : [EOL] self . import_game ( game_row , league ) [EOL] [EOL] def import_game ( self , game_row , league ) : [EOL] [EOL] if game_row [ [number] ] . text == [string] : [EOL] LOGGER . debug ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] number = int ( game_row [ [number] ] . text ) [EOL] [EOL] if self . options [ [string] ] and number not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , number ) [EOL] return [EOL] [EOL] opening_whistle = parsing . parse_opening_whistle ( game_row [ [number] ] . text ) [EOL] sports_hall = get_sports_hall ( game_row ) [EOL] home_team = Team . objects . get ( league = league , short_name = game_row [ [number] ] . text ) [EOL] guest_team = Team . objects . get ( league = league , short_name = game_row [ [number] ] . text ) [EOL] home_goals , guest_goals = parsing . parse_goals ( game_row ) [EOL] report_number = parsing . parse_report_number ( game_row [ [number] ] ) [EOL] forfeiting_team = parsing . parse_forfeiting_team ( game_row [ [number] ] , home_team , guest_team ) [EOL] [EOL] if not Game . objects . filter ( number = number , league__season = league . season ) . exists ( ) : [EOL] LOGGER . debug ( [string] , number ) [EOL] game = Game . objects . create ( number = number , league = league , opening_whistle = opening_whistle , sports_hall = sports_hall , home_team = home_team , guest_team = guest_team , home_goals = home_goals , guest_goals = guest_goals , report_number = report_number , forfeiting_team = forfeiting_team ) [EOL] LOGGER . info ( [string] , game ) [EOL] [EOL] else : [EOL] LOGGER . info ( [string] , number , league ) [EOL] game = Game . objects . get ( number = number , league = league ) [EOL] if game . opening_whistle != opening_whistle : [EOL] LOGGER . debug ( [string] , game ) [EOL] game . opening_whistle = opening_whistle [EOL] if game . sports_hall != sports_hall : [EOL] LOGGER . debug ( [string] , game ) [EOL] game . sports_hall = sports_hall [EOL] if game . home_goals != home_goals or game . guest_goals != guest_goals : [EOL] LOGGER . debug ( [string] , game ) [EOL] game . home_goals = home_goals [EOL] game . guest_goals = guest_goals [EOL] Score . objects . filter ( game = game ) . delete ( ) [EOL] LOGGER . debug ( [string] , game ) [EOL] if game . report_number != report_number : [EOL] LOGGER . debug ( [string] , game ) [EOL] game . report_number = report_number [EOL] LOGGER . debug ( [string] , game ) [EOL] Score . objects . filter ( game = game ) . delete ( ) [EOL] if game . forfeiting_team != forfeiting_team : [EOL] LOGGER . debug ( [string] , game ) [EOL] game . forfeiting_team = forfeiting_team [EOL] game . save ( ) [EOL] [EOL] [EOL] def get_sports_hall ( game_row ) : [EOL] if len ( game_row [ [number] ] ) != [number] : [EOL] return None [EOL] link = game_row [ [number] ] [ [number] ] [EOL] number = int ( link . text ) [EOL] bhv_id = parsing . parse_sports_hall_bhv_id ( link ) [EOL] [EOL] sports_hall = SportsHall . objects . filter ( number = number , bhv_id = bhv_id ) [EOL] if sports_hall . exists ( ) : [EOL] return sports_hall [ [number] ] [EOL] [EOL] return parse_sports_hall ( number , bhv_id ) [EOL] [EOL] [EOL] def parse_sports_hall ( number , bhv_id ) : [EOL] url = SportsHall . build_source_url ( bhv_id ) [EOL] tree = logic . get_html ( url ) [EOL] [EOL] table = tree . xpath ( [string] ) [ [number] ] [EOL] name = table [ [number] ] [ [number] ] [ [number] ] . text [EOL] city = table [ [number] ] [ [number] ] . text [EOL] street = table [ [number] ] [ [number] ] . text [EOL] address = street + [string] + city if street else city [EOL] phone_number = table [ [number] ] [ [number] ] . text [EOL] [EOL] latitude , longitude = parsing . parse_coordinates ( tree ) [EOL] [EOL] sports_hall = SportsHall . objects . create ( number = number , name = name , address = address , phone_number = phone_number , latitude = latitude , longitude = longitude , bhv_id = bhv_id ) [EOL] LOGGER . info ( [string] , sports_hall ) [EOL] return sports_hall [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $associations.models.Association$ 0 0 0 0 0 0 0 0 0 0 0 $associations.models.Association$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $associations.models.Association$ 0 0 0 0 0 0 0 0 $associations.models.Association$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $districts.models.District$ 0 0 0 0 0 0 0 0 0 0 0 $districts.models.District$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $districts.models.District$ 0 0 0 0 0 $typing.Any$ 0 $districts.models.District$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $districts.models.District$ 0 0 0 0 0 0 0 0 0 0 $districts.models.District$ 0 $leagues.models.Season$ 0 0 0 0 0 0 0 0 0 0 0 $leagues.models.Season$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $districts.models.District$ 0 $leagues.models.Season$ 0 0 0 0 0 0 0 0 $districts.models.District$ 0 0 0 0 0 $leagues.models.Season$ 0 $leagues.models.Season$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $leagues.models.League$ 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $leagues.models.League$ 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $leagues.models.League$ 0 $leagues.models.League$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.int$ 0 $leagues.models.League$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $leagues.models.League$ 0 $leagues.models.League$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Anylogging.Logger$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . IntegerField ( blank = True , null = True ) ) , ( [string] , models . IntegerField ( blank = True , null = True ) ) , ( [string] , models . IntegerField ( blank = True , null = True , unique = True ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from lxml import html [EOL] [EOL] from base . parsing import parse_report_number [EOL] [EOL] [EOL] class ParseReportNumberTest ( TestCase ) : [EOL] [EOL] def assert_from_markup ( self , markup , expected ) : [EOL] tree = html . fromstring ( markup ) [EOL] actual = parse_report_number ( tree ) [EOL] self . assertEqual ( expected , actual ) [EOL] [EOL] def test__empty_cell_markup__returns__none ( self ) : [EOL] markup = [string] [EOL] expected = None [EOL] self . assert_from_markup ( markup , expected ) [EOL] [EOL] def test__usual_markup__returns__correct_number ( self ) : [EOL] markup = [string] [string] [EOL] expected = [number] [EOL] self . assert_from_markup ( markup , expected ) [EOL] [EOL] def test__rescheduled_markup__returns__correct_number ( self ) : [EOL] markup = [string] [string] [EOL] expected = [number] [EOL] self . assert_from_markup ( markup , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0
import builtins [EOL] from typing import Tuple , Any , Optional , Union , List [EOL] import games [EOL] import typing [EOL] import datetime [EOL] from datetime import datetime , timedelta [EOL] from typing import Tuple [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from districts . models import District [EOL] from games . models import Game , Leg [EOL] from leagues . models import League , Season [EOL] from teams . models import Team [EOL] [EOL] [EOL] class NormalGames ( TestCase ) : [EOL] [EOL] def test_game_leg ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] earlier_opening_whistle = datetime . now ( ) - timedelta ( days = [number] ) [EOL] first_leg_game = Game . objects . create ( number = [number] , league = league , opening_whistle = earlier_opening_whistle , home_team = team_1 , guest_team = team_2 ) [EOL] second_leg_game = Game . objects . create ( number = [number] , league = league , opening_whistle = datetime . now ( ) , home_team = team_2 , guest_team = team_1 ) [EOL] [EOL] self . assertEqual ( first_leg_game . leg ( ) , Leg . FIRST ) [EOL] self . assertEqual ( second_leg_game . leg ( ) , Leg . SECOND ) [EOL] [EOL] def test_three_teams ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_3 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] expected = [ ( team_1 , team_2 , Leg . FIRST ) , ( team_3 , team_1 , Leg . FIRST ) , ( team_2 , team_1 , Leg . SECOND ) , ( team_2 , team_3 , Leg . FIRST ) , ( team_3 , team_2 , Leg . SECOND ) , ( team_1 , team_3 , Leg . SECOND ) ] [EOL] [EOL] test_data = [ create_test_game ( number , league , * vals ) for number , vals in enumerate ( expected ) ] [EOL] [EOL] for game , expected in test_data : [EOL] self . assertEqual ( expected , game . leg ( ) ) [EOL] [EOL] def test_four_teams ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_3 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_4 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] expected = [ ( team_1 , team_2 , Leg . FIRST ) , ( team_3 , team_4 , Leg . FIRST ) , ( team_2 , team_1 , Leg . SECOND ) , ( team_1 , team_3 , Leg . FIRST ) , ( team_2 , team_4 , Leg . FIRST ) , ( team_1 , team_4 , Leg . FIRST ) , ( team_2 , team_3 , Leg . FIRST ) , ( team_4 , team_1 , Leg . SECOND ) , ( team_4 , team_3 , Leg . SECOND ) , ( team_3 , team_1 , Leg . SECOND ) , ( team_4 , team_2 , Leg . SECOND ) , ( team_3 , team_2 , Leg . SECOND ) , ] [EOL] [EOL] test_data = [ create_test_game ( number , league , * vals ) for number , vals in enumerate ( expected ) ] [EOL] [EOL] for game , expected in test_data : [EOL] self . assertEqual ( expected , game . leg ( ) ) [EOL] [EOL] [EOL] def create_test_game ( number , league , home_team , guest_team , expected_leg , unscheduled = False ) : [EOL] opening_whistle = datetime . now ( ) + timedelta ( weeks = number * [number] ) if not unscheduled else None [EOL] game = Game . objects . create ( number = number , league = league , opening_whistle = opening_whistle , home_team = home_team , guest_team = guest_team ) [EOL] return game , expected_leg [EOL] [EOL] [EOL] def create_test_league ( ) : [EOL] district = District . objects . create ( bhv_id = [number] ) [EOL] season = Season . objects . create ( start_year = [number] ) [EOL] return League . objects . create ( name = [string] , abbreviation = [string] , bhv_id = [number] , district = district , season = season ) [EOL] [EOL] [EOL] class UnscheduledGames ( TestCase ) : [EOL] [EOL] def test_unscheduled_game ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] game = Game . objects . create ( number = [number] , league = league , opening_whistle = None , home_team = team_1 , guest_team = team_2 ) [EOL] [EOL] self . assertEqual ( game . leg ( ) , Leg . UNKNOWN ) [EOL] [EOL] def test_unscheduled_other_games ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] game = Game . objects . create ( number = [number] , league = league , opening_whistle = datetime . now ( ) , home_team = team_1 , guest_team = team_2 ) [EOL] [EOL] Game . objects . create ( number = [number] , league = league , opening_whistle = None , home_team = team_2 , guest_team = team_1 ) [EOL] self . assertEqual ( game . leg ( ) , Leg . UNKNOWN ) [EOL] [EOL] [EOL] class TripleGames ( TestCase ) : [EOL] [EOL] def test_game_leg ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] first = Game . objects . create ( number = [number] , league = league , home_team = team_1 , guest_team = team_2 , opening_whistle = datetime . now ( ) - timedelta ( days = [number] ) ) [EOL] between = Game . objects . create ( number = [number] , league = league , home_team = team_1 , guest_team = team_2 , opening_whistle = datetime . now ( ) - timedelta ( days = [number] ) ) [EOL] second = Game . objects . create ( number = [number] , league = league , home_team = team_2 , guest_team = team_1 , opening_whistle = datetime . now ( ) ) [EOL] [EOL] self . assertEqual ( first . leg ( ) , Leg . FIRST ) [EOL] self . assertEqual ( between . leg ( ) , Leg . BEWTEEN ) [EOL] self . assertEqual ( second . leg ( ) , Leg . SECOND ) [EOL] [EOL] def test_single_unscheduled ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] first = Game . objects . create ( number = [number] , league = league , home_team = team_1 , guest_team = team_2 , opening_whistle = datetime . now ( ) - timedelta ( days = [number] ) ) [EOL] unsheduled = Game . objects . create ( number = [number] , league = league , home_team = team_1 , guest_team = team_2 ) [EOL] second = Game . objects . create ( number = [number] , league = league , home_team = team_2 , guest_team = team_1 , opening_whistle = datetime . now ( ) ) [EOL] [EOL] self . assertEqual ( first . leg ( ) , Leg . UNKNOWN ) [EOL] self . assertEqual ( unsheduled . leg ( ) , Leg . UNKNOWN ) [EOL] self . assertEqual ( second . leg ( ) , Leg . UNKNOWN ) [EOL] [EOL] def test_three_teams ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_3 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] expected = [ ( team_1 , team_2 , Leg . FIRST ) , ( team_3 , team_1 , Leg . FIRST ) , ( team_2 , team_3 , Leg . FIRST ) , ( team_2 , team_1 , Leg . BEWTEEN ) , ( team_1 , team_3 , Leg . BEWTEEN ) , ( team_3 , team_2 , Leg . BEWTEEN ) , ( team_1 , team_2 , Leg . SECOND ) , ( team_3 , team_1 , Leg . SECOND ) , ( team_2 , team_3 , Leg . SECOND ) ] [EOL] [EOL] test_data = [ create_test_game ( number , league , * vals ) for number , vals in enumerate ( expected ) ] [EOL] [EOL] for game , expected in test_data : [EOL] self . assertEqual ( expected , game . leg ( ) ) [EOL] [EOL] def test_three_teams_single_unscheduled ( self ) : [EOL] league = create_test_league ( ) [EOL] team_1 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_2 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] team_3 = Team . objects . create ( name = [string] , short_name = [string] , league = league , bhv_id = [number] ) [EOL] [EOL] expected = [ ( team_1 , team_2 , Leg . UNKNOWN ) , ( team_3 , team_1 , Leg . FIRST ) , ( team_2 , team_3 , Leg . FIRST ) , ( team_2 , team_1 , Leg . UNKNOWN , True ) , ( team_1 , team_3 , Leg . BEWTEEN ) , ( team_3 , team_2 , Leg . BEWTEEN ) , ( team_1 , team_2 , Leg . UNKNOWN ) , ( team_3 , team_1 , Leg . SECOND ) , ( team_2 , team_3 , Leg . SECOND ) ] [EOL] [EOL] test_data = [ create_test_game ( number , league , * vals ) for number , vals in enumerate ( expected ) ] [EOL] [EOL] for game , expected in test_data : [EOL] self . assertEqual ( expected , game . leg ( ) , msg = [string] . format ( game . home_team , game . guest_team ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 $typing.list$ 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 $typing.list$ 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 $typing.list$ 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[typing.Any,typing.Any,unknown],typing.Tuple[typing.Any,typing.Any,unknown,builtins.bool]]]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[typing.Any,typing.Any,unknown],typing.Tuple[typing.Any,typing.Any,unknown,builtins.bool]]]$ 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[typing.Any,typing.Any,unknown],typing.Tuple[typing.Any,typing.Any,unknown,builtins.bool]]]$ 0 $typing.list$ 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[typing.Any,typing.Any,unknown],typing.Tuple[typing.Any,typing.Any,unknown,builtins.bool]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] from datetime import datetime [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from base . parsing import parse_opening_whistle [EOL] [EOL] [EOL] class OpeningWhistleParseTest ( TestCase ) : [EOL] def test_date_not_null ( self ) : [EOL] datetime_text = [string] [EOL] [EOL] actual = parse_opening_whistle ( datetime_text ) [EOL] [EOL] self . assertNotEqual ( None , actual ) [EOL] [EOL] def test_fixed_date ( self ) : [EOL] datetime_text = [string] [EOL] [EOL] actual = parse_opening_whistle ( datetime_text ) [EOL] [EOL] expected = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . assertEqual ( expected , actual ) [EOL] [EOL] def test_dynamic_date ( self ) : [EOL] datetime_text = [string] [EOL] [EOL] actual = parse_opening_whistle ( datetime_text ) [EOL] [EOL] expected = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . assertEqual ( expected , actual ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $typing.Any$ 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from base . views import view_home , view_notice , view_privacy [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , view_home , name = [string] ) , path ( [string] , view_notice , name = [string] ) , path ( [string] , view_privacy , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Env [EOL] [EOL] admin . site . register ( Env ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [EOL] def view_home ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def view_notice ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def view_privacy ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def view_contact ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , DefaultDict , Any [EOL] import logging [EOL] import players [EOL] import requests [EOL] import typing [EOL] import teams [EOL] import builtins [EOL] import collections [EOL] import logging [EOL] import operator [EOL] [EOL] import requests [EOL] from django . db import transaction [EOL] from django . db . models import Count , F , Q , Sum [EOL] from django . db . models . functions import Coalesce , TruncMonth [EOL] from lxml import html [EOL] [EOL] from games . models import Game , TeamOutcome [EOL] from players . models import Player , Score [EOL] from teams . models import Team [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def get_html ( url ) : [EOL] response = requests . get ( url ) [EOL] response . encoding = [string] [EOL] return html . fromstring ( response . text ) [EOL] [EOL] [EOL] def add_ranking_place ( items , field ) : [EOL] [docstring] [EOL] for index , item in enumerate ( items ) : [EOL] item . place = index + [number] [EOL] if index > [number] : [EOL] previous = items [ index - [number] ] [EOL] if getattr ( previous , field ) == getattr ( item , field ) : [EOL] item . place = previous . place [EOL] [EOL] [EOL] def add_score ( score ) : [EOL] LOGGER . debug ( [string] , score . game , score . player . name ) [EOL] [EOL] if duplicate_player_scores_exist ( score ) : [EOL] split_by_number ( score . player . name , score . player . team ) [EOL] score . player . name = [string] . format ( score . player . name , score . player_number ) [EOL] [EOL] player , created = Player . objects . get_or_create ( name = score . player . name , team = score . player . team ) [EOL] if created : [EOL] LOGGER . debug ( [string] , player ) [EOL] else : [EOL] LOGGER . debug ( [string] , player ) [EOL] [EOL] score . player = player [EOL] score . save ( ) [EOL] [EOL] [EOL] def duplicate_player_scores_exist ( score ) : [EOL] divided_players = score . player . team . player_set . filter ( name__regex = [string] . format ( score . player . name ) ) [EOL] duplicate_scores = Score . objects . filter ( player__name = score . player . name , player__team = score . player . team , game = score . game ) [EOL] return divided_players . exists ( ) or duplicate_scores . exists ( ) [EOL] [EOL] [EOL] @ transaction . atomic def split_by_number ( original_name , team ) : [EOL] LOGGER . info ( [string] , original_name , team ) [EOL] [EOL] matches = Player . objects . filter ( name = original_name , team = team ) [EOL] if not matches . exists ( ) : [EOL] LOGGER . warning ( [string] , original_name , team ) [EOL] return [EOL] [EOL] original_player = matches [ [number] ] [EOL] for score in original_player . score_set . all ( ) : [EOL] new_name = [string] . format ( original_player . name , score . player_number ) [EOL] new_player , created = Player . objects . get_or_create ( name = new_name , team = original_player . team ) [EOL] if created : [EOL] LOGGER . debug ( [string] , new_player ) [EOL] score . player = new_player [EOL] score . save ( ) [EOL] [EOL] if not original_player . score_set . all ( ) . exists ( ) : [EOL] LOGGER . debug ( [string] , original_player ) [EOL] original_player . delete ( ) [EOL] [EOL] [EOL] def league_games ( league ) : [EOL] games = league . game_set . annotate ( month = TruncMonth ( [string] ) ) . order_by ( [string] ) [EOL] games_by_month = collections . defaultdict ( list ) [EOL] for game in games : [EOL] games_by_month [ game . month ] . append ( game ) [EOL] return games_by_month [EOL] [EOL] [EOL] def team_points ( team ) : [EOL] points = [number] [EOL] for game in Game . objects . filter ( Q ( home_team = team ) | Q ( guest_team = team ) ) : [EOL] outcome = game . outcome_for ( team ) [EOL] if outcome == TeamOutcome . WIN : [EOL] points += [number] [EOL] elif outcome == TeamOutcome . TIE : [EOL] points += [number] [EOL] return points [EOL] [EOL] [EOL] def top_league_teams ( league ) : [EOL] teams = league . team_set . all ( ) [EOL] for team in teams : [EOL] team . points = team_points ( team ) [EOL] teams = sorted ( teams , key = operator . attrgetter ( [string] ) , reverse = True ) [EOL] add_ranking_place ( teams , [string] ) [EOL] teams_by_rank = collections . defaultdict ( list ) [EOL] for team in teams : [EOL] if team . place <= [number] : [EOL] teams_by_rank [ team . place ] . append ( team ) [EOL] for team_group in teams_by_rank . values ( ) : [EOL] team_group . sort ( key = lambda p : p . name ) [EOL] return teams_by_rank [EOL] [EOL] [EOL] def scorer ( player ) : [EOL] return Player . objects . filter ( pk = player . pk ) . annotate ( games = Count ( [string] ) ) . annotate ( total_goals = Coalesce ( Sum ( [string] ) , [number] ) ) . annotate ( total_penalty_tries = Sum ( [string] ) ) . annotate ( total_penalty_goals = Sum ( [string] ) ) . annotate ( total_field_goals = F ( [string] ) - F ( [string] ) ) . first ( ) [EOL] [EOL] [EOL] def league_scorers ( league ) : [EOL] scorers = Player . objects . filter ( team__league = league ) . annotate ( games = Count ( [string] ) ) . filter ( games__gt = [number] ) . annotate ( total_goals = Coalesce ( Sum ( [string] ) , [number] ) ) . filter ( total_goals__gt = [number] ) . annotate ( total_penalty_goals = Sum ( [string] ) ) . annotate ( total_field_goals = F ( [string] ) - F ( [string] ) ) . order_by ( [string] ) [EOL] add_ranking_place ( scorers , [string] ) [EOL] return scorers [EOL] [EOL] [EOL] def top_league_scorers ( league ) : [EOL] players = Player . objects . filter ( team__league = league ) . annotate ( games = Count ( [string] ) ) . filter ( games__gt = [number] ) . annotate ( total_goals = Coalesce ( Sum ( [string] ) , [number] ) ) . order_by ( [string] ) [EOL] add_ranking_place ( players , [string] ) [EOL] scorers_by_rank = collections . defaultdict ( list ) [EOL] for player in players : [EOL] if player . place <= [number] : [EOL] scorers_by_rank [ player . place ] . append ( player ) [EOL] for scorers_group in scorers_by_rank . values ( ) : [EOL] scorers_group . sort ( key = lambda p : p . name ) [EOL] return scorers_by_rank [EOL] [EOL] [EOL] def league_offenders ( league ) : [EOL] offenders = Player . objects . filter ( team__league = league ) . annotate ( games = Count ( [string] ) ) . annotate ( warnings = Count ( [string] ) ) . annotate ( suspensions = Count ( [string] ) + Count ( [string] ) + Count ( [string] ) ) . annotate ( disqualifications = Count ( [string] ) ) . annotate ( offender_points = F ( [string] ) + [number] * F ( [string] ) + [number] * F ( [string] ) ) . filter ( offender_points__gt = [number] ) . order_by ( [string] ) [EOL] add_ranking_place ( offenders , [string] ) [EOL] return offenders [EOL] [EOL] [EOL] def top_league_offenders ( league ) : [EOL] offenders = Player . objects . filter ( team__league = league ) . annotate ( games = Count ( [string] ) ) . annotate ( warnings = Count ( [string] ) ) . annotate ( suspensions = Count ( [string] ) + Count ( [string] ) + Count ( [string] ) ) . annotate ( disqualifications = Count ( [string] ) ) . annotate ( offender_points = F ( [string] ) + [number] * F ( [string] ) + [number] * F ( [string] ) ) . filter ( offender_points__gt = [number] ) . order_by ( [string] ) [EOL] add_ranking_place ( offenders , [string] ) [EOL] offenders_by_place = collections . defaultdict ( list ) [EOL] for offender in offenders : [EOL] if offender . place <= [number] : [EOL] offenders_by_place [ offender . place ] . append ( offender ) [EOL] for scorers_group in offenders_by_place . values ( ) : [EOL] scorers_group . sort ( key = lambda p : p . name ) [EOL] return offenders_by_place [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger
from typing import Type [EOL] import typing [EOL] import src [EOL] from enum import Enum [EOL] [EOL] from django . db import models [EOL] [EOL] [EOL] class Value ( Enum ) : [EOL] TRUE = [string] [EOL] FALSE = [string] [EOL] [EOL] [EOL] class Env ( models . Model ) : [EOL] name = models . TextField ( unique = True ) [EOL] value = models . TextField ( ) [EOL] [EOL] def set_value ( self , value ) : [EOL] self . value = value . value [EOL] self . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BaseConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . conf import settings [EOL] [EOL] [EOL] def matomo ( _request ) : [EOL] return { [string] : settings . MATOMO_URL } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , Any [EOL] import typing [EOL] import django [EOL] import builtins [EOL] import src [EOL] import os [EOL] import sys [EOL] from contextlib import contextmanager [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . staticfiles . testing import StaticLiveServerTestCase [EOL] from django . core . management import call_command [EOL] from django . test import TestCase , tag [EOL] from django . urls import ResolverMatch , resolve , reverse [EOL] from sauceclient import SauceClient [EOL] from selenium . webdriver import Firefox , Remote [EOL] from selenium . webdriver . firefox . options import Options as FirefoxOptions [EOL] from selenium . webdriver . support . expected_conditions import staleness_of [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] _CI = [string] in os . environ [EOL] _TUNNEL_ID = os . environ . get ( [string] ) [EOL] _SAUCE_USER = os . environ . get ( [string] ) [EOL] _SAUCE_KEY = os . environ . get ( [string] ) [EOL] [EOL] [EOL] class ModelTestCase ( TestCase ) : [EOL] [EOL] def assert_objects ( self , model , count = [number] , filters = None ) : [EOL] if filters is None : [EOL] filters = { } [EOL] [EOL] objects = model . objects . filter ( ** filters ) [EOL] self . assertEqual ( len ( objects ) , count ) [EOL] return objects [ [number] ] if count == [number] else objects [EOL] [EOL] [EOL] @ tag ( [string] , [string] ) class IntegrationTestCase ( ModelTestCase ) : [EOL] [EOL] def assert_command ( self , command_name , * arguments , expected_return_code = None ) : [EOL] return_code = call_command ( command_name , * arguments ) [EOL] self . assertEqual ( return_code , expected_return_code ) [EOL] [EOL] [EOL] @ tag ( [string] , [string] ) class SeleniumTestCase ( StaticLiveServerTestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] if _CI : [EOL] self . driver = self . sauce_chrome_webdriver ( ) [EOL] else : [EOL] options = FirefoxOptions ( ) [EOL] options . add_argument ( [string] ) [EOL] self . driver = Firefox ( firefox_options = options ) [EOL] self . driver . implicitly_wait ( [number] ) [EOL] [EOL] def sauce_chrome_webdriver ( self ) : [EOL] class_name = self . __class__ . __name__ [EOL] method_name = self . _testMethodName [EOL] capabilities = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] . format ( class_name , method_name ) , [string] : _TUNNEL_ID , } [EOL] [EOL] executor = [string] . format ( _SAUCE_USER , _SAUCE_KEY , ) [EOL] return Remote ( command_executor = executor , desired_capabilities = capabilities , ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . driver . quit ( ) [EOL] if _CI : [EOL] sauce_client = SauceClient ( _SAUCE_USER , _SAUCE_KEY ) [EOL] status = ( sys . exc_info ( ) == ( None , None , None ) ) [EOL] sauce_client . jobs . update_job ( job_id = self . driver . session_id , build = _TUNNEL_ID , passed = status ) [EOL] [EOL] def navigate ( self , view_name , * args , ** kwargs ) : [EOL] path = reverse ( view_name , args = args , kwargs = kwargs ) [EOL] self . driver . get ( self . live_server_url + path ) [EOL] [EOL] def assert_view ( self , view_name ) : [EOL] path = self . driver . current_url . replace ( self . live_server_url , [string] ) [EOL] resolved = resolve ( path ) [EOL] self . assertEqual ( resolved . view_name , view_name ) [EOL] [EOL] @ contextmanager def load ( self , timeout = [number] ) : [EOL] page = self . driver . find_element_by_tag_name ( [string] ) [EOL] yield [EOL] WebDriverWait ( self . driver , timeout ) . until ( staleness_of ( page ) ) [EOL] [EOL] @ contextmanager def wait ( self , timeout = settings . SELENIUM_TIMEOUT ) : [EOL] condition = _UrlHasChanged ( self . driver . current_url ) [EOL] yield [EOL] WebDriverWait ( self . driver , timeout ) . until ( condition ) [EOL] [EOL] [EOL] class _UrlHasChanged ( ) : [EOL] [EOL] def __init__ ( self , url ) : [EOL] self . old_url = url [EOL] [EOL] def __call__ ( self , driver ) : [EOL] return driver . current_url != self . old_url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.urls.ResolverMatch$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $django.urls.ResolverMatch$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.base.tests.base._UrlHasChanged$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.base.tests.base._UrlHasChanged$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import django [EOL] from django . core import mail [EOL] [EOL] from base . tests . base import SeleniumTestCase [EOL] [EOL] [EOL] class ContactFormTest ( SeleniumTestCase ) : [EOL] [EOL] def test_contact_form ( self ) : [EOL] self . assertEqual ( mail . outbox , [ ] ) [EOL] [EOL] username = [string] [EOL] usermail = [string] [EOL] message = [string] [EOL] self . navigate ( [string] ) [EOL] [EOL] username_textfield = self . driver . find_element_by_name ( [string] ) [EOL] username_textfield . send_keys ( username ) [EOL] mail_textfield = self . driver . find_element_by_name ( [string] ) [EOL] mail_textfield . send_keys ( usermail ) [EOL] message_textarea = self . driver . find_element_by_name ( [string] ) [EOL] message_textarea . send_keys ( message ) [EOL] [EOL] with self . wait ( ) : [EOL] message_textarea . submit ( ) [EOL] [EOL] self . assert_view ( [string] ) [EOL] [EOL] self . assertEqual ( len ( mail . outbox ) , [number] ) [EOL] body = mail . outbox [ [number] ] . body [EOL] self . assertIn ( username , body ) [EOL] self . assertIn ( message , body ) [EOL] self . assertIn ( usermail , body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 0 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 $builtins.str$ 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 $builtins.str$ 0 $django.core.mail.EmailMessage$ 0 0 0 0 0 0 $builtins.str$ 0 $django.core.mail.EmailMessage$ 0 0
from typing import Any [EOL] import typing [EOL] from base . tests . base import SeleniumTestCase [EOL] [EOL] [EOL] class TestSelenium ( SeleniumTestCase ) : [EOL] def test_internet_connection ( self ) : [EOL] self . driver . get ( [string] ) [EOL] self . assertEqual ( [string] , self . driver . title ) [EOL] body = self . driver . find_element_by_css_selector ( [string] ) [EOL] self . assertIn ( [string] , body . text ) [EOL] [EOL] def test_body_exists ( self ) : [EOL] driver = self . driver [EOL] driver . get ( self . live_server_url ) [EOL] body = driver . find_element_by_tag_name ( [string] ) [EOL] self . assertIsNotNone ( body ) [EOL] [EOL] def test_w3_org_exists ( self ) : [EOL] driver = self . driver [EOL] driver . get ( [string] ) [EOL] body = driver . find_element_by_id ( [string] ) [EOL] self . assertIsNotNone ( body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] [EOL] from base . tests . base import IntegrationTestCase [EOL] from games . models import Game [EOL] from leagues . models import League [EOL] from players . models import Score [EOL] [EOL] [EOL] class ImportGamesTest ( IntegrationTestCase ) : [EOL] [EOL] def test_game_210116_sghh_hcn ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] league = self . assert_objects ( League ) [EOL] [EOL] self . assert_command ( [string] , [string] , [number] ) [EOL] game = self . assert_objects ( Game ) [EOL] [EOL] self . assertEqual ( game . number , [number] ) [EOL] self . assertEqual ( game . opening_whistle , datetime . datetime ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertEqual ( game . home_team . short_name , [string] ) [EOL] self . assertEqual ( game . guest_team . short_name , [string] ) [EOL] self . assertEqual ( game . home_goals , [number] ) [EOL] self . assertEqual ( game . guest_goals , [number] ) [EOL] self . assertIsNone ( game . report_number ) [EOL] self . assertEqual ( game . sports_hall . number , [number] ) [EOL] self . assertEqual ( game . league , league ) [EOL] [EOL] self . assert_objects ( Score , [number] ) [EOL] [EOL] self . assert_command ( [string] ) [EOL] [EOL] self . assert_objects ( Score , [number] ) [EOL] [EOL] def test_game_96781 ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] league = self . assert_objects ( League ) [EOL] [EOL] self . assert_command ( [string] , [string] , [number] ) [EOL] game = self . assert_objects ( Game ) [EOL] [EOL] self . assertEqual ( game . number , [number] ) [EOL] self . assertEqual ( game . opening_whistle , datetime . datetime ( [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertEqual ( game . home_team . short_name , [string] ) [EOL] self . assertEqual ( game . guest_team . short_name , [string] ) [EOL] self . assertEqual ( game . home_goals , [number] ) [EOL] self . assertEqual ( game . guest_goals , [number] ) [EOL] self . assertIsNone ( game . report_number ) [EOL] self . assertEqual ( game . sports_hall . number , [number] ) [EOL] self . assertEqual ( game . league , league ) [EOL] [EOL] self . assert_objects ( Score , [number] ) [EOL] [EOL] self . assert_command ( [string] ) [EOL] [EOL] self . assert_objects ( Score , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import base [EOL] import builtins [EOL] from base import models [EOL] [EOL] [EOL] def _ensure_env ( name , default , force = False ) : [EOL] matches = models . Env . objects . filter ( name = name ) [EOL] if matches . exists ( ) : [EOL] match = matches [ [number] ] [EOL] if force and match . value is not default . value : [EOL] match . set_value ( default ) [EOL] return match [EOL] [EOL] return models . Env . objects . create ( name = name , value = default . value ) [EOL] [EOL] [EOL] UPDATING = _ensure_env ( [string] , models . Value . FALSE ) [EOL] [EOL] [EOL] class EnvironmentMiddleware : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [comment] [EOL] [EOL] def __call__ ( self , request ) : [EOL] [comment] [EOL] [comment] [EOL] request . env = { env . name : env . value for env in models . Env . objects . all ( ) } [EOL] [EOL] response = self . get_response ( request ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $base.models.Env$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Dict , Tuple [EOL] import typing [EOL] import games [EOL] import teams [EOL] from django . contrib . staticfiles . templatetags . staticfiles import static [EOL] [EOL] from games . models import GameOutcome , TeamOutcome [EOL] from teams . models import Team [EOL] [EOL] [EOL] def dec ( value , arg ) : [EOL] return value - arg [EOL] [EOL] [EOL] def team_logo_url ( team ) : [EOL] if team . logo : [EOL] return team . logo . url [EOL] [EOL] return static ( [string] ) [EOL] [EOL] [EOL] def team_outcome_badge ( outcome ) : [EOL] if outcome is TeamOutcome . OPEN : [EOL] return [string] [EOL] [EOL] mapping = { TeamOutcome . WIN : ( [string] , [string] ) , TeamOutcome . TIE : ( [string] , [string] ) , TeamOutcome . LOSS : ( [string] , [string] ) } [EOL] return [string] . format ( * mapping [ outcome ] ) [EOL] [EOL] [EOL] def game_outcome_badge ( outcome ) : [EOL] if outcome is GameOutcome . OPEN : [EOL] return [string] [EOL] [EOL] mapping = { GameOutcome . HOME_WIN : [string] , GameOutcome . AWAY_WIN : [string] , GameOutcome . TIE : [string] , } [EOL] return [string] . format ( mapping [ outcome ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def get ( dictionary , key ) : [EOL] return dictionary [ key ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . core . management import BaseCommand [EOL] [EOL] from associations . models import Association [EOL] from districts . models import District [EOL] from games . models import Game [EOL] from leagues . models import League [EOL] from players . models import Player , Score [EOL] from teams . models import Team [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] def handle ( self , * args , ** options ) : [EOL] Score . objects . all ( ) . delete ( ) [EOL] Game . objects . all ( ) . delete ( ) [EOL] Player . objects . all ( ) . delete ( ) [EOL] Team . objects . all ( ) . delete ( ) [EOL] League . objects . all ( ) . delete ( ) [EOL] District . objects . all ( ) . delete ( ) [EOL] Association . objects . all ( ) . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import games [EOL] import logging [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from typing import Any , Dict [EOL] [EOL] from django . core . management import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from base import logic [EOL] from base . middleware import env [EOL] from base . models import Value [EOL] from games . models import Game , Team [EOL] from players . models import Player , Score [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] env . UPDATING . set_value ( Value . TRUE ) [EOL] fix_game_387733 ( ) [EOL] fix_game_210116 ( ) [EOL] fix_game_96781 ( ) [EOL] fix_game_201059 ( ) [EOL] env . UPDATING . set_value ( Value . FALSE ) [EOL] [EOL] [EOL] @ transaction . atomic def rename_player ( team_bhv_id , old_name , new_name ) : [EOL] LOGGER . info ( [string] , old_name , team_bhv_id , new_name ) [EOL] try : [EOL] old_player = Player . objects . get ( name = old_name , team__bhv_id = team_bhv_id ) [EOL] new_player , created = Player . objects . get_or_create ( name = new_name , team = old_player . team ) [EOL] if old_player == new_player : [EOL] LOGGER . info ( [string] , new_player ) [EOL] else : [EOL] if created : [EOL] LOGGER . debug ( [string] , new_player ) [EOL] else : [EOL] LOGGER . debug ( [string] , new_player ) [EOL] for score in old_player . score_set . all ( ) : [EOL] score . player = new_player [EOL] score . save ( ) [EOL] old_player . delete ( ) [EOL] LOGGER . info ( [string] , old_name , new_player ) [EOL] except Player . DoesNotExist : [EOL] LOGGER . warning ( [string] , old_name , team_bhv_id ) [EOL] [EOL] [EOL] def _score ( player_number , goals = [number] , penalty_tries = [number] , penalty_goals = [number] , ** kwargs ) : [EOL] return { [string] : player_number , [string] : goals , [string] : penalty_tries , [string] : penalty_goals , ** kwargs } [EOL] [EOL] [EOL] def time ( minutes , seconds = [number] ) : [EOL] return datetime . timedelta ( minutes = minutes , seconds = seconds ) [EOL] [EOL] [EOL] @ transaction . atomic def add_scores ( league__bhv_id , game_number , home_score_data , guest_score_data ) : [EOL] LOGGER . info ( [string] , league__bhv_id , game_number ) [EOL] try : [EOL] game = Game . objects . get ( league__bhv_id = league__bhv_id , number = game_number ) [EOL] if game . score_set . exists ( ) : [EOL] LOGGER . warning ( [string] , game ) [EOL] else : [EOL] _add_scores ( game , game . home_team , home_score_data ) [EOL] _add_scores ( game , game . guest_team , guest_score_data ) [EOL] except Game . DoesNotExist : [EOL] LOGGER . warning ( [string] , league__bhv_id , game_number ) [EOL] [EOL] [EOL] def _add_scores ( game , team , scores_data ) : [EOL] for name , score_data in scores_data . items ( ) : [EOL] player = Player ( name = name , team = team ) [EOL] sco = Score ( player = player , game = game , ** score_data ) [EOL] logic . add_score ( score = sco ) [EOL] [EOL] [EOL] def fix_game_387733 ( ) : [EOL] rename_player ( [number] , [string] , [string] ) [EOL] rename_player ( [number] , [string] , [string] ) [EOL] rename_player ( [number] , [string] , [string] ) [EOL] [EOL] [EOL] def fix_game_210116 ( ) : [EOL] sghh = { [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , [number] , [number] ) , [string] : _score ( [number] , [number] , [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , } [EOL] hcn = { [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , } [EOL] add_scores ( [number] , [number] , sghh , hcn ) [EOL] [EOL] [EOL] def fix_game_96781 ( ) : [EOL] tvw = { [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , [number] , [number] ) , } [EOL] sga = { [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , } [EOL] add_scores ( league__bhv_id = [number] , game_number = [number] , home_score_data = tvw , guest_score_data = sga ) [EOL] [EOL] [EOL] def fix_game_201059 ( ) : [EOL] tsgs = { [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , [number] , [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , [number] , [number] , warning_time = time ( [number] ) , first_suspension_time = time ( [number] , [number] ) , second_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , [number] ) , } [EOL] hcn = { [string] : _score ( [number] , [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] , [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] , warning_time = time ( [number] ) ) , [string] : _score ( [number] ) , [string] : _score ( [number] , [number] , [number] , [number] , first_suspension_time = time ( [number] , [number] ) ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , [string] : _score ( [number] , [number] ) , } [EOL] add_scores ( league__bhv_id = [number] , game_number = [number] , home_score_data = tsgs , guest_score_data = hcn ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import detail [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [ path ( [string] , detail , name = [string] ) , ] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import get_object_or_404 , render [EOL] [EOL] from base import logic [EOL] [EOL] from . models import Player , Score [EOL] [EOL] [EOL] def detail ( request , key ) : [EOL] player = get_object_or_404 ( Player , pk = key ) [EOL] scorer = logic . scorer ( player ) [EOL] scores = Score . objects . filter ( player = player ) . order_by ( [string] ) [EOL] return render ( request , [string] , { [string] : player , [string] : scorer , [string] : scores } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import src [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from games . models import Game [EOL] from teams . models import Team [EOL] [EOL] [EOL] class Player ( models . Model ) : [EOL] user = models . ForeignKey ( User , on_delete = models . SET_NULL , null = True ) [EOL] published = models . BooleanField ( default = False ) [EOL] name = models . TextField ( ) [EOL] team = models . ForeignKey ( Team , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . name , self . team . short_name ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . pk } ) [EOL] [EOL] def public_name ( self ) : [EOL] if self . user is not None and self . published is True or settings . PUBLIC_NAMES is True : [EOL] return self . name [EOL] [EOL] return [string] [EOL] [EOL] [EOL] class Score ( models . Model ) : [EOL] player = models . ForeignKey ( Player , on_delete = models . CASCADE ) [EOL] player_number = models . IntegerField ( blank = True , null = True ) [EOL] game = models . ForeignKey ( Game , on_delete = models . CASCADE ) [EOL] goals = models . IntegerField ( ) [EOL] penalty_goals = models . IntegerField ( ) [EOL] penalty_tries = models . IntegerField ( ) [EOL] warning_time = models . DurationField ( blank = True , null = True ) [EOL] first_suspension_time = models . DurationField ( blank = True , null = True ) [EOL] second_suspension_time = models . DurationField ( blank = True , null = True ) [EOL] third_suspension_time = models . DurationField ( blank = True , null = True ) [EOL] disqualification_time = models . DurationField ( blank = True , null = True ) [EOL] report_time = models . DurationField ( blank = True , null = True ) [EOL] team_suspension_time = models . DurationField ( blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . game . number , self . player . name , self . player_number ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Player]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Player]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Player]$ 0 0 0 0 0 0 0 $typing.Type[src.players.models.Player]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.players.models.Score]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PlayersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] from . models import Player , Score [EOL] [EOL] admin . site . register ( Player ) [EOL] admin . site . register ( Score ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import tabula [EOL] from django . test import TestCase [EOL] [EOL] from players . management . commands . parse_report import parse_spectators [EOL] [EOL] [EOL] class ParseSpectators ( TestCase ) : [EOL] [EOL] def test_value ( self ) : [EOL] base = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] path = os . path . join ( base , [string] ) [EOL] table = tabula . read_pdf ( path , output_format = [string] , ** { [string] : [number] , [string] : True } ) [ [number] ] [EOL] [EOL] spectators = parse_spectators ( table ) [EOL] self . assertEqual ( spectators , [number] ) [EOL] [EOL] def test_unknown ( self ) : [EOL] base = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] path = os . path . join ( base , [string] ) [EOL] table = tabula . read_pdf ( path , output_format = [string] , ** { [string] : [number] , [string] : True } ) [ [number] ] [EOL] [EOL] spectators = parse_spectators ( table ) [EOL] self . assertEqual ( spectators , None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
	0
from typing import List [EOL] import games [EOL] import typing [EOL] import datetime [EOL] import logging [EOL] import logging [EOL] import time [EOL] from datetime import timedelta [EOL] from typing import List [EOL] [EOL] import requests [EOL] [EOL] from games . models import Game [EOL] [EOL] MAX_RETRY_DURATION = timedelta ( hours = [number] ) [EOL] RETRY_DURATIONS = [ timedelta ( seconds = [number] ) , timedelta ( seconds = [number] ) , timedelta ( minutes = [number] ) , timedelta ( minutes = [number] ) , timedelta ( minutes = [number] ) , timedelta ( hours = [number] ) , MAX_RETRY_DURATION ] [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def fetch_report ( game ) : [EOL] for retry_duration in RETRY_DURATIONS : [EOL] try : [EOL] return requests . get ( game . report_source_url ( ) , stream = True ) [EOL] except requests . exceptions . ConnectionError as ex : [EOL] LOGGER . warning ( [string] , game ) [EOL] if retry_duration == MAX_RETRY_DURATION : [EOL] raise ex [EOL] LOGGER . debug ( [string] , retry_duration ) [EOL] time . sleep ( retry_duration . total_seconds ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 $typing.List[datetime.timedelta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[datetime.timedelta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any [EOL] import logging [EOL] import games [EOL] import players [EOL] import pathlib [EOL] import typing [EOL] import teams [EOL] import builtins [EOL] import logging [EOL] import os [EOL] from pathlib import Path [EOL] from typing import Any , Dict [EOL] [EOL] import tabula [EOL] from django . conf import settings [EOL] from django . core . management import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from associations . models import Association [EOL] from base import logic , parsing [EOL] from base . middleware import env [EOL] from base . models import Value [EOL] from games . models import Game [EOL] from leagues . models import Season [EOL] from players . models import Player , Score [EOL] from teams . models import Team [EOL] [EOL] from . import parse_report [EOL] from . fetch_report import fetch_report [EOL] [EOL] LOGGER = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] options = { } [EOL] bugged_reports = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] bugged_associations = [ [number] ] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , nargs = [string] , type = int , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . options = options [EOL] os . makedirs ( settings . REPORTS_PATH , exist_ok = True ) [EOL] env . UPDATING . set_value ( Value . TRUE ) [EOL] self . import_associations ( ) [EOL] env . UPDATING . set_value ( Value . FALSE ) [EOL] [EOL] def import_associations ( self ) : [EOL] for association in Association . objects . all ( ) : [EOL] self . import_association ( association ) [EOL] [EOL] def import_association ( self , association ) : [EOL] if self . options [ [string] ] and association . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , association ) [EOL] return [EOL] [EOL] if association . bhv_id in self . bugged_associations : [EOL] LOGGER . debug ( [string] , association ) [EOL] return [EOL] [EOL] for district in association . district_set . all ( ) : [EOL] self . import_district ( district ) [EOL] [EOL] def import_district ( self , district ) : [EOL] if self . options [ [string] ] and district . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , district ) [EOL] return [EOL] [EOL] season_pks = district . league_set . values ( [string] ) . distinct ( ) [EOL] seasons = Season . objects . filter ( pk__in = season_pks ) [EOL] for season in seasons : [EOL] self . import_district_season ( district , season ) [EOL] [EOL] def import_district_season ( self , district , season ) : [EOL] if self . options [ [string] ] and season . start_year not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , district , season ) [EOL] return [EOL] [EOL] for league in district . league_set . filter ( season = season ) : [EOL] self . import_league ( league ) [EOL] [EOL] def import_league ( self , league ) : [EOL] if self . options [ [string] ] and league . bhv_id not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , league ) [EOL] return [EOL] [EOL] if league . youth and not self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , league ) [EOL] return [EOL] [EOL] for game in league . game_set . all ( ) : [EOL] self . import_game ( game ) [EOL] [EOL] def import_game ( self , game ) : [EOL] if self . options [ [string] ] and game . number not in self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] elif game . report_number is None : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] elif game . report_number in self . bugged_reports : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] elif game . home_team . retirement is not None or game . guest_team . retirement is not None : [EOL] if game . score_set . count ( ) > [number] : [EOL] LOGGER . info ( [string] , game . report_number , game ) [EOL] game . score_set . all ( ) . delete ( ) [EOL] else : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] elif game . score_set . count ( ) > [number] : [EOL] if not self . options [ [string] ] : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] else : [EOL] LOGGER . info ( [string] , game . report_number , game ) [EOL] game . score_set . all ( ) . delete ( ) [EOL] import_game ( game ) [EOL] elif game . forfeiting_team is not None : [EOL] LOGGER . debug ( [string] , game . report_number , game ) [EOL] else : [EOL] LOGGER . info ( [string] , game . report_number , game ) [EOL] import_game ( game ) [EOL] [EOL] [EOL] @ transaction . atomic def import_game ( game ) : [EOL] path = Path ( settings . REPORTS_PATH ) . joinpath ( str ( game . report_number ) + [string] ) [EOL] download_report ( game , path ) [EOL] import_report ( game , str ( path ) ) [EOL] os . remove ( path ) [EOL] [EOL] [EOL] def download_report ( game , path ) : [EOL] response = fetch_report ( game ) [EOL] if int ( response . headers . get ( [string] , default = - [number] ) ) == [number] : [EOL] LOGGER . warning ( [string] , game . report_number , game ) [EOL] return [EOL] [EOL] path . write_bytes ( response . content ) [EOL] [EOL] [EOL] def import_report ( game , path ) : [EOL] tables = tabula . read_pdf ( path , output_format = [string] , ** { [string] : [ [number] , [number] ] , [string] : True } ) [EOL] [EOL] game . spectators = parse_report . parse_spectators ( tables [ [number] ] ) [EOL] game . save ( ) [EOL] [EOL] import_scores ( tables [ [number] ] , game = game , team = game . home_team ) [EOL] import_scores ( tables [ [number] ] , game = game , team = game . guest_team ) [EOL] [EOL] [EOL] def import_scores ( table , game , team ) : [EOL] table_rows = table [ [string] ] [EOL] for table_row in table_rows [ [number] : ] : [EOL] row_data = [ cell [ [string] ] for cell in table_row ] [EOL] [EOL] player_number = row_data [ [number] ] [EOL] player_name = row_data [ [number] ] [EOL] [comment] [EOL] [EOL] if not player_number and not player_name : [EOL] return [EOL] if player_number in ( [string] , [string] , [string] , [string] ) : [EOL] LOGGER . debug ( [string] , player_number , player_name ) [EOL] return [EOL] if not player_number : [EOL] LOGGER . warning ( [string] , player_name ) [EOL] return [EOL] if not player_name : [EOL] LOGGER . warning ( [string] , player_number ) [EOL] return [EOL] try : [EOL] int ( player_number ) [EOL] except ValueError as err : [EOL] LOGGER . exception ( [string] , player_number , player_name , err ) [EOL] return [EOL] [EOL] player = Player ( name = player_name , team = team ) [EOL] score = parse_score ( player , game , row_data ) [EOL] logic . add_score ( score ) [EOL] [EOL] [EOL] def parse_score ( player , game , row_data ) : [EOL] player_number = int ( row_data [ [number] ] ) [EOL] goals_str = row_data [ [number] ] [EOL] if goals_str == [string] : [EOL] goals = [number] [EOL] else : [EOL] try : [EOL] goals = int ( goals_str ) [EOL] except ValueError as err : [EOL] goals = [number] [EOL] LOGGER . exception ( [string] , player_number , player . name , goals , err ) [EOL] penalty_tries , penalty_goals = parsing . parse_penalty_data ( row_data [ [number] ] ) [EOL] [EOL] return Score ( player = player , player_number = int ( row_data [ [number] ] ) , game = game , goals = goals , penalty_tries = penalty_tries , penalty_goals = penalty_goals , warning_time = parsing . parse_game_time ( row_data [ [number] ] ) , first_suspension_time = parsing . parse_game_time ( row_data [ [number] ] ) , second_suspension_time = parsing . parse_game_time ( row_data [ [number] ] ) , third_suspension_time = parsing . parse_game_time ( row_data [ [number] ] ) , disqualification_time = parsing . parse_game_time ( row_data [ [number] ] ) , report_time = parsing . parse_game_time ( row_data [ [number] ] ) , team_suspension_time = parsing . parse_game_time ( row_data [ [number] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 $games.models.Game$ 0 0 0 $games.models.Game$ 0 0 0 0 $games.models.Game$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $players.models.Score$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] [EOL] def parse_spectators ( table ) : [EOL] specs = table [ [string] ] [ [number] ] [ [number] ] [ [string] ] [EOL] if specs == [string] : [EOL] return None [EOL] [EOL] return int ( specs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = settings . AUTH_USER_MODEL ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( blank = True , null = True ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . DurationField ( blank = True , null = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TeamsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import src [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from leagues . models import League [EOL] [EOL] [EOL] class Team ( models . Model ) : [EOL] name = models . TextField ( ) [EOL] short_name = models . TextField ( ) [EOL] league = models . ForeignKey ( League , on_delete = models . CASCADE ) [EOL] bhv_id = models . IntegerField ( unique = True ) [EOL] retirement = models . DateField ( blank = True , null = True ) [EOL] [EOL] [comment] [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . bhv_id , self . short_name ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . bhv_id , } ) [EOL] [EOL] @ staticmethod def build_source_url ( league_bhv_id , team_bhv_id ) : [EOL] return settings . ROOT_SOURCE_URL + [string] . format ( league_bhv_id , team_bhv_id ) [EOL] [EOL] def source_url ( self ) : [EOL] return self . build_source_url ( self . league . bhv_id , self . bhv_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.teams.models.Team]$ 0 0 0 0 0 0 0 $typing.Type[src.teams.models.Team]$ 0 0 0 0 0 0 0 $typing.Type[src.teams.models.Team]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.teams.models.Team]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.teams.models.Team]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import calendar , detail , games , offenders , players , scorers [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , include ( [ path ( [string] , detail , name = [string] ) , path ( [string] , players , name = [string] ) , path ( [string] , games , name = [string] ) , path ( [string] , scorers , name = [string] ) , path ( [string] , offenders , name = [string] ) , path ( [string] , calendar , name = [string] ) , ] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Team [EOL] [EOL] admin . site . register ( Team ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from base . tests . base import IntegrationTestCase [EOL] [EOL] from teams . models import Team [EOL] [EOL] [EOL] class CalendarTest ( IntegrationTestCase ) : [EOL] def test__rems_stuttgart__mkld ( self ) : [EOL] self . assert_command ( [string] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] ) [EOL] self . assert_command ( [string] ) [EOL] [EOL] self . client . get ( [string] ) [EOL] [EOL] self . assert_objects ( Team , count = [number] , filters = { [string] : False } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0