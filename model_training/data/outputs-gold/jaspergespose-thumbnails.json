[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Union , Tuple , Dict [EOL] import typing [EOL] __version__ = [string] [EOL] [EOL] bl_info = { [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] if [string] in locals ( ) : [EOL] import importlib [EOL] [EOL] if [string] in locals ( ) : [EOL] importlib . reload ( core ) [EOL] importlib . reload ( creation ) [EOL] else : [EOL] from . import core , creation [EOL] import bpy [EOL] [EOL] [EOL] def register ( ) : [EOL] [docstring] [EOL] core . register ( ) [EOL] creation . register ( ) [EOL] [EOL] [EOL] def unregister ( ) : [EOL] [docstring] [EOL] core . unregister ( ) [EOL] creation . unregister ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] register ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Match , Set , Any , Union , Tuple , Type , List , Dict , DefaultDict , Optional [EOL] import logging [EOL] import typing [EOL] import pose_thumbnails [EOL] [docstring] [EOL] [EOL] import collections [EOL] import difflib [EOL] import logging [EOL] import os [EOL] import re [EOL] [EOL] import bpy [EOL] from bpy_extras . io_utils import ImportHelper [EOL] [EOL] from . import common [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] IMAGE_EXTENSIONS = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] [EOL] [EOL] def is_image_file ( filepath ) : [EOL] [docstring] [EOL] file_extension = os . path . splitext ( filepath ) [ - [number] ] [EOL] return file_extension . lower ( ) in IMAGE_EXTENSIONS [EOL] [EOL] [EOL] def get_pose_from_thumbnail ( thumbnail ) : [EOL] [docstring] [EOL] if thumbnail is None : [EOL] return [EOL] poselib = bpy . context . object . pose_library [EOL] for pose in poselib . pose_markers : [EOL] if pose . frame == thumbnail . frame : [EOL] return pose [EOL] [EOL] [EOL] def draw_creation ( layout , pose_thumbnail_options , poselib ) : [EOL] if poselib . library : [EOL] layout . label ( [string] ) [EOL] layout . operator ( POSELIB_OT_refresh_thumbnails . bl_idname , icon = [string] , text = [string] , ) [EOL] return [EOL] layout . separator ( ) [EOL] box = layout . box ( ) [EOL] if pose_thumbnail_options . show_creation_options : [EOL] expand_icon = [string] [EOL] else : [EOL] expand_icon = [string] [EOL] box . prop ( pose_thumbnail_options , [string] , icon = expand_icon , toggle = True , ) [EOL] if pose_thumbnail_options . show_creation_options : [EOL] sub_col = box . column ( align = True ) [EOL] if not poselib . pose_markers . active : [EOL] logger . debug ( [string] ) [EOL] return [EOL] thumbnail = common . get_thumbnail_from_pose ( poselib . pose_markers . active ) [EOL] if thumbnail and thumbnail . filepath != common . get_no_thumbnail_path ( ) : [EOL] text = [string] [EOL] else : [EOL] text = [string] [EOL] row = sub_col . row ( align = True ) [EOL] row . operator ( POSELIB_OT_add_thumbnail . bl_idname , text = text ) [EOL] row . operator ( POSELIB_OT_add_thumbnails_from_dir . bl_idname , text = [string] ) [EOL] row = sub_col . row ( align = True ) [EOL] row_col = row . column ( align = True ) [EOL] row_col . operator ( POSELIB_OT_remove_pose_thumbnail . bl_idname , text = [string] ) [EOL] if common . get_thumbnail_from_pose ( poselib . pose_markers . active ) : [EOL] row_col . enabled = True [EOL] else : [EOL] row_col . enabled = False [EOL] row_col = row . column ( align = True ) [EOL] row_col . operator ( POSELIB_OT_remove_all_thumbnails . bl_idname , text = [string] ) [EOL] if poselib . pose_thumbnails : [EOL] row_col . enabled = True [EOL] else : [EOL] row_col . enabled = False [EOL] sub_col . separator ( ) [EOL] sub_col . operator ( POSELIB_OT_refresh_thumbnails . bl_idname , icon = [string] , text = [string] , ) [EOL] [EOL] [EOL] class POSELIB_OT_add_thumbnail ( bpy . types . Operator , ImportHelper ) : [EOL] [docstring] [EOL] bl_idname = [string] [EOL] bl_label = [string] [EOL] bl_options = { [string] , [string] } [EOL] [EOL] display_type = bpy . props . EnumProperty ( items = ( ( [string] , [string] , [string] , [number] ) , ( [string] , [string] , [string] , [number] ) , ( [string] , [string] , [string] , [number] ) ) , options = { [string] , [string] } , default = [string] , ) [EOL] filter_image = bpy . props . BoolProperty ( default = True , options = { [string] , [string] } , ) [EOL] filter_folder = bpy . props . BoolProperty ( default = True , options = { [string] , [string] } , ) [EOL] filter_glob = bpy . props . StringProperty ( default = [string] , options = { [string] , [string] } , ) [EOL] [EOL] use_relative_path = bpy . props . BoolProperty ( name = [string] , description = [string] , default = True , ) [EOL] [EOL] def execute ( self , context ) : [EOL] if not self . use_relative_path : [EOL] filepath = self . filepath [EOL] else : [EOL] filepath = bpy . path . relpath ( self . filepath ) [EOL] if not is_image_file ( filepath ) : [EOL] self . report ( { [string] } , [string] ) [EOL] logger . error ( [string] . format ( os . path . basename ( filepath ) ) ) [EOL] poselib = context . object . pose_library [EOL] pose = poselib . pose_markers . active [EOL] thumbnail = ( common . get_thumbnail_from_pose ( pose ) or poselib . pose_thumbnails . add ( ) ) [EOL] thumbnail . frame = pose . frame [EOL] thumbnail . filepath = filepath [EOL] common . clear_cached_pose_thumbnails ( ) [EOL] return { [string] } [EOL] [EOL] def draw ( self , context ) : [EOL] layout = self . layout [EOL] col = layout . column ( ) [EOL] col . prop ( self , [string] ) [EOL] [EOL] [EOL] class POSELIB_OT_add_thumbnails_from_dir ( bpy . types . Operator , ImportHelper ) : [EOL] [docstring] [EOL] bl_idname = [string] [EOL] bl_label = [string] [EOL] bl_options = { [string] , [string] } [EOL] directory = bpy . props . StringProperty ( maxlen = [number] , subtype = [string] , options = { [string] , [string] } , ) [EOL] files = bpy . props . CollectionProperty ( type = bpy . types . OperatorFileListElement , options = { [string] , [string] } , ) [EOL] display_type = bpy . props . EnumProperty ( items = ( ( [string] , [string] , [string] , [number] ) , ( [string] , [string] , [string] , [number] ) , ( [string] , [string] , [string] , [number] ) ) , options = { [string] , [string] } , default = [string] , ) [EOL] filter_image = bpy . props . BoolProperty ( default = True , options = { [string] , [string] } , ) [EOL] filter_folder = bpy . props . BoolProperty ( default = True , options = { [string] , [string] } , ) [EOL] filter_glob = bpy . props . StringProperty ( default = [string] , options = { [string] , [string] } , ) [EOL] map_method_items = ( ( [string] , [string] , [string] ) , ( [string] , [string] , [string] [string] ) , ( [string] , [string] , [string] ) , ) [EOL] mapping_method = bpy . props . EnumProperty ( name = [string] , description = [string] , items = map_method_items , ) [EOL] overwrite_existing = bpy . props . BoolProperty ( name = [string] , description = [string] , default = True , ) [EOL] match_fuzzyness = bpy . props . FloatProperty ( name = [string] , description = [string] , min = [number] , max = [number] , default = [number] , ) [EOL] match_by_number = bpy . props . BoolProperty ( name = [string] , description = [string] , default = False , ) [EOL] start_number = bpy . props . IntProperty ( name = [string] , description = [string] , default = [number] , ) [EOL] use_relative_path = bpy . props . BoolProperty ( name = [string] , description = [string] , default = True , ) [EOL] [EOL] def get_images_from_dir ( self ) : [EOL] [docstring] [EOL] directory = self . directory [EOL] logger . debug ( [string] , directory ) [EOL] files = [ f . name for f in self . files ] [EOL] image_paths = [ ] [EOL] if files and not files [ [number] ] : [EOL] image_files = os . listdir ( directory ) [EOL] report = False [EOL] else : [EOL] image_files = files [EOL] report = True [EOL] for image_file in sorted ( image_files ) : [EOL] [comment] [EOL] [comment] [EOL] image_path = os . path . join ( directory , image_file ) [EOL] if not is_image_file ( image_path ) : [EOL] if not image_file . startswith ( [string] ) and report : [EOL] logger . warning ( [string] . format ( image_file ) ) [EOL] continue [EOL] if self . use_relative_path : [EOL] image_paths . append ( bpy . path . relpath ( image_path ) ) [EOL] else : [EOL] image_paths . append ( image_path ) [EOL] return image_paths [EOL] [EOL] def create_thumbnail ( self , pose , image ) : [EOL] [docstring] [EOL] if not self . overwrite_existing and common . get_thumbnail_from_pose ( pose ) : [EOL] return [EOL] poselib = self . poselib [EOL] thumbnail = ( common . get_thumbnail_from_pose ( pose ) or poselib . pose_thumbnails . add ( ) ) [EOL] thumbnail . frame = pose . frame [EOL] thumbnail . filepath = image [EOL] [EOL] def get_image_by_number ( self , number ) : [EOL] [docstring] [EOL] for image in self . image_files : [EOL] basename = os . path . basename ( image ) [EOL] match = re . match ( [string] , basename ) [EOL] if match : [EOL] image_number = int ( match . groups ( ) [ [number] ] ) [EOL] if number == image_number : [EOL] return image [EOL] [EOL] def match_thumbnails_by_name ( self ) : [EOL] [docstring] [EOL] poselib = self . poselib [EOL] image_files = self . image_files [EOL] match_map = { os . path . splitext ( os . path . basename ( f ) ) [ [number] ] : f for f in image_files } [EOL] for pose in poselib . pose_markers : [EOL] match = difflib . get_close_matches ( pose . name , match_map . keys ( ) , n = [number] , cutoff = [number] - self . match_fuzzyness , ) [EOL] if match : [EOL] thumbnail_image = match_map [ match [ [number] ] ] [EOL] self . create_thumbnail ( pose , thumbnail_image ) [EOL] [EOL] def match_thumbnails_by_index ( self ) : [EOL] [docstring] [EOL] poselib = self . poselib [EOL] if self . match_by_number : [EOL] start_number = self . start_number [EOL] for i , pose in enumerate ( poselib . pose_markers ) : [EOL] image = self . get_image_by_number ( i + start_number ) [EOL] if image : [EOL] self . create_thumbnail ( pose , image ) [EOL] else : [EOL] image_files = self . image_files [EOL] for pose , image in zip ( poselib . pose_markers , image_files ) : [EOL] self . create_thumbnail ( pose , image ) [EOL] [EOL] def match_thumbnails_by_frame ( self ) : [EOL] [docstring] [EOL] poselib = self . poselib [EOL] if self . match_by_number : [EOL] for i , pose in enumerate ( poselib . pose_markers ) : [EOL] image = self . get_image_by_number ( pose . frame ) [EOL] if image : [EOL] self . create_thumbnail ( pose , image ) [EOL] else : [EOL] frame_sorted = sorted ( poselib . pose_markers , key = lambda p : p . frame ) [EOL] image_files = self . image_files [EOL] for pose , image in zip ( frame_sorted , image_files ) : [EOL] self . create_thumbnail ( pose , image ) [EOL] [EOL] def match_thumbnails ( self ) : [EOL] [docstring] [EOL] mapping_method = self . mapping_method [EOL] if mapping_method == [string] : [EOL] self . match_thumbnails_by_name ( ) [EOL] elif mapping_method == [string] : [EOL] self . match_thumbnails_by_index ( ) [EOL] else : [EOL] self . match_thumbnails_by_frame ( ) [EOL] [EOL] def execute ( self , context ) : [EOL] self . poselib = context . object . pose_library [EOL] self . image_files = self . get_images_from_dir ( ) [EOL] self . match_thumbnails ( ) [EOL] common . clear_cached_pose_thumbnails ( ) [EOL] return { [string] } [EOL] [EOL] def draw ( self , context ) : [EOL] layout = self . layout [EOL] col = layout . column ( ) [EOL] box = col . box ( ) [EOL] box . label ( text = [string] ) [EOL] row = box . row ( ) [EOL] row . prop ( self , [string] , expand = True ) [EOL] box . prop ( self , [string] ) [EOL] if self . mapping_method == [string] : [EOL] box . prop ( self , [string] ) [EOL] if self . mapping_method == [string] : [EOL] box . prop ( self , [string] ) [EOL] if self . match_by_number : [EOL] box . prop ( self , [string] ) [EOL] if self . mapping_method == [string] : [EOL] box . prop ( self , [string] ) [EOL] col . separator ( ) [EOL] col . prop ( self , [string] ) [EOL] [EOL] [EOL] class POSELIB_OT_remove_pose_thumbnail ( bpy . types . Operator ) : [EOL] [docstring] [EOL] bl_idname = [string] [EOL] bl_label = [string] [EOL] bl_options = { [string] , [string] } [EOL] [EOL] def execute ( self , context ) : [EOL] poselib = context . object . pose_library [EOL] pose = poselib . pose_markers . active [EOL] common . clear_cached_pose_thumbnails ( ) [EOL] for i , thumbnail in enumerate ( poselib . pose_thumbnails ) : [EOL] if pose . frame == thumbnail . frame : [EOL] poselib . pose_thumbnails . remove ( i ) [EOL] break [EOL] return { [string] } [EOL] [EOL] [EOL] class POSELIB_OT_remove_all_thumbnails ( bpy . types . Operator ) : [EOL] [docstring] [EOL] bl_idname = [string] [EOL] bl_label = [string] [EOL] bl_options = { [string] , [string] } [EOL] [EOL] def execute ( self , context ) : [EOL] poselib = context . object . pose_library [EOL] poselib . pose_thumbnails . clear ( ) [EOL] common . clear_cached_pose_thumbnails ( ) [EOL] return { [string] } [EOL] [EOL] [EOL] class POSELIB_OT_refresh_thumbnails ( bpy . types . Operator ) : [EOL] [docstring] [EOL] bl_idname = [string] [EOL] bl_label = [string] [EOL] bl_options = { [string] , [string] } [EOL] [EOL] def remove_thumbnail ( self , thumbnail ) : [EOL] [docstring] [EOL] pose_thumbnails = self . poselib . pose_thumbnails [EOL] for i , existing_thumbnail in enumerate ( pose_thumbnails ) : [EOL] if thumbnail == existing_thumbnail : [EOL] logger . debug ( [string] , thumbnail , i ) [EOL] pose_thumbnails . remove ( i ) [EOL] [EOL] def remove_unused_thumbnails ( self ) : [EOL] [docstring] [EOL] [EOL] thumbs = self . poselib . pose_thumbnails [EOL] count = len ( thumbs ) [EOL] for i , thumbnail in enumerate ( reversed ( thumbs ) ) : [EOL] if not get_pose_from_thumbnail ( thumbnail ) : [EOL] thumbs . remove ( count - i - [number] ) [EOL] [EOL] def remove_double_thumbnails ( self ) : [EOL] [docstring] [EOL] thumbnail_map = collections . defaultdict ( list ) [EOL] for thumbnail in self . poselib . pose_thumbnails : [EOL] thumbnail_map [ str ( thumbnail . frame ) ] . append ( thumbnail ) [EOL] [EOL] for thumbnail_list in thumbnail_map . values ( ) : [EOL] for thumbnail in thumbnail_list [ : - [number] ] : [EOL] self . remove_thumbnail ( thumbnail ) [EOL] [EOL] def execute ( self , context ) : [EOL] self . poselib = context . object . pose_library [EOL] self . remove_unused_thumbnails ( ) [EOL] self . remove_double_thumbnails ( ) [EOL] common . clear_cached_pose_thumbnails ( full_clear = True ) [EOL] return { [string] } [EOL] [EOL] [EOL] classes = [ POSELIB_OT_refresh_thumbnails , POSELIB_OT_remove_all_thumbnails , POSELIB_OT_remove_pose_thumbnail , POSELIB_OT_add_thumbnails_from_dir , POSELIB_OT_add_thumbnail , ] [EOL] [EOL] [EOL] def register ( ) : [EOL] [docstring] [EOL] for cls in classes : [EOL] bpy . utils . register_class ( cls ) [EOL] [EOL] [EOL] def unregister ( ) : [EOL] [docstring] [EOL] for cls in reversed ( classes ) : [EOL] try : [EOL] bpy . utils . unregister_class ( cls ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , cls ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.list$ 0 0 $typing.list$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.list$ 0 $typing.list$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $builtins.int$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[pose_thumbnails.creation.POSELIB_OT_add_thumbnail,pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir,pose_thumbnails.creation.POSELIB_OT_refresh_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_all_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_pose_thumbnail]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[pose_thumbnails.creation.POSELIB_OT_add_thumbnail,pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir,pose_thumbnails.creation.POSELIB_OT_refresh_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_all_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_pose_thumbnail]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[pose_thumbnails.creation.POSELIB_OT_add_thumbnail,pose_thumbnails.creation.POSELIB_OT_add_thumbnails_from_dir,pose_thumbnails.creation.POSELIB_OT_refresh_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_all_thumbnails,pose_thumbnails.creation.POSELIB_OT_remove_pose_thumbnail]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
from typing import Dict , Set , Any , MutableSequence [EOL] import typing [EOL] import mathutils [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import bpy [EOL] import mathutils [EOL] [EOL] [EOL] def name ( to_flip , strip_number = False ) : [EOL] [docstring] [EOL] import string [EOL] [EOL] if len ( to_flip ) < [number] : [EOL] [comment] [EOL] return to_flip [EOL] [EOL] [comment] [EOL] separators = set ( [string] ) [EOL] replacements = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] prefix = suffix = number = [string] [EOL] is_set = False [EOL] [EOL] [comment] [EOL] replace = to_flip [EOL] if to_flip [ - [number] ] in string . digits : [EOL] try : [EOL] index = to_flip . rindex ( [string] ) [EOL] except ValueError : [EOL] pass [EOL] else : [EOL] if to_flip [ index + [number] ] in string . digits : [EOL] [comment] [EOL] if not strip_number : [EOL] number = to_flip [ index : ] [EOL] replace = to_flip [ : index ] [EOL] [EOL] [comment] [EOL] if len ( replace ) > [number] and replace [ - [number] ] in separators : [EOL] is_set = replace [ - [number] ] in replacements [EOL] if is_set : [EOL] replace = replace [ : - [number] ] + replacements [ replace [ - [number] ] ] [EOL] [EOL] [comment] [EOL] if not is_set and len ( replace ) > [number] and replace [ [number] ] in separators : [EOL] is_set = replace [ [number] ] in replacements [EOL] if is_set : [EOL] replace = replacements [ replace [ [number] ] ] + replace [ [number] : ] [EOL] [EOL] if not is_set : [EOL] lower = replace . lower ( ) [EOL] if lower . startswith ( [string] ) : [EOL] bit = replace [ [number] : [number] ] [EOL] if bit == [string] : [EOL] prefix = [string] [EOL] elif bit == [string] : [EOL] prefix = [string] [EOL] else : [EOL] prefix = [string] [EOL] replace = replace [ [number] : ] [EOL] elif lower . startswith ( [string] ) : [EOL] bit = replace [ [number] : [number] ] [EOL] if bit == [string] : [EOL] prefix = [string] [EOL] elif bit == [string] : [EOL] prefix = [string] [EOL] else : [EOL] prefix = [string] [EOL] replace = replace [ [number] : ] [EOL] elif lower . endswith ( [string] ) : [EOL] bit = replace [ - [number] : - [number] ] [EOL] if bit == [string] : [EOL] suffix = [string] [EOL] elif bit == [string] : [EOL] suffix = [string] [EOL] else : [EOL] suffix = [string] [EOL] replace = replace [ : - [number] ] [EOL] elif lower . endswith ( [string] ) : [EOL] bit = replace [ - [number] : - [number] ] [EOL] if bit == [string] : [EOL] suffix = [string] [EOL] elif bit == [string] : [EOL] suffix = [string] [EOL] else : [EOL] suffix = [string] [EOL] replace = replace [ : - [number] ] [EOL] [EOL] return prefix + replace + suffix + number [EOL] [EOL] [EOL] def matrix ( m44 ) : [EOL] [docstring] [EOL] [EOL] flip_x = mathutils . Matrix ( ( ( - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ) ) [EOL] return flip_x * m44 * flip_x [EOL] [EOL] [EOL] def _round ( m44 ) : [EOL] [docstring] [EOL] for vec in m44 : [EOL] for i in range ( [number] ) : [EOL] if abs ( vec [ i ] - [number] ) < [number] : [EOL] vec [ i ] = [number] [EOL] elif abs ( vec [ i ] - [number] ) < [number] : [EOL] vec [ i ] = [number] [EOL] elif abs ( vec [ i ] + [number] ) < [number] : [EOL] vec [ i ] = - [number] [EOL] return m44 [EOL] [EOL] [EOL] def pixels ( values , width , height ) : [EOL] [docstring] [EOL] [EOL] start = [number] [EOL] end = width [EOL] for _ in range ( height ) : [EOL] values [ start : end ] = reversed ( values [ start : end ] ) [EOL] start = end [EOL] end += width [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import doctest [EOL] [EOL] doctest . testmod ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mathutils.Matrix$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import bpy [EOL] [docstring] [EOL] [EOL] import os . path [EOL] [EOL] import bpy [EOL] [EOL] [EOL] def get_thumbnail_from_pose ( pose ) : [EOL] [docstring] [EOL] if pose is None : [EOL] return [EOL] poselib = pose . id_data [EOL] for thumbnail in poselib . pose_thumbnails : [EOL] if thumbnail . frame == pose . frame : [EOL] return thumbnail [EOL] [EOL] [EOL] def get_no_thumbnail_path ( ) : [EOL] [docstring] [EOL] no_thumbnail_path = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , ) [EOL] return no_thumbnail_path [EOL] [EOL] [EOL] def clear_cached_pose_thumbnails ( * , full_clear = False ) : [EOL] [docstring] [EOL] from . core import get_enum_items , preview_collections [EOL] [EOL] if full_clear : [EOL] pcoll = preview_collections [ [string] ] [EOL] pcoll . clear ( ) [EOL] [EOL] get_enum_items . cache_clear ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import pose_thumbnails [EOL] import functools [EOL] import re [EOL] [EOL] import bpy [EOL] [EOL] [EOL] def clear_charnamere_cache ( self , context ) : [EOL] self . character_name_re . cache_clear ( ) [EOL] [EOL] [EOL] def for_addon ( context = None ) : [EOL] [docstring] [EOL] context = context or bpy . context [EOL] return context . user_preferences . addons [ __package__ ] . preferences [EOL] [EOL] [EOL] class PoseThumbnailsPreferences ( bpy . types . AddonPreferences ) : [EOL] bl_idname = __package__ [EOL] add_3dview_prop_panel = bpy . props . BoolProperty ( name = [string] , description = [string] , default = True , ) [EOL] thumbnail_size = bpy . props . FloatProperty ( name = [string] , description = [string] , default = [number] , min = [number] , max = [number] , ) [EOL] character_name_regexp = bpy . props . StringProperty ( name = [string] , description = [string] , default = [string] , update = clear_charnamere_cache , ) [EOL] optional_name_prefix = bpy . props . StringProperty ( name = [string] , description = [string] [string] , default = [string] , ) [EOL] pose_lib_name_prefix = bpy . props . StringProperty ( name = [string] , description = [string] , default = [string] , ) [EOL] [EOL] @ functools . lru_cache ( maxsize = [number] ) def character_name_re ( self ) : [EOL] [docstring] [EOL] return re . compile ( self . character_name_regexp ) [EOL] [EOL] def draw ( self , context ) : [EOL] layout = self . layout [EOL] layout . prop ( self , [string] ) [EOL] layout . prop ( self , [string] ) [EOL] [EOL] layout . separator ( ) [EOL] col = layout . box ( ) [EOL] col . label ( [string] , icon = [string] ) [EOL] row = col . row ( align = True ) [EOL] row . prop ( self , [string] ) [EOL] row . operator ( [string] , icon = [string] , text = [string] ) [EOL] [EOL] col = col . column ( align = True ) [EOL] col . prop ( self , [string] ) [EOL] col . prop ( self , [string] ) [EOL] try : [EOL] re . compile ( self . character_name_regexp ) [EOL] except re . error as ex : [EOL] col . label ( [string] % ( ex . msg , ex . pos ) , icon = [string] ) [EOL] else : [EOL] from . import core [EOL] char = self . optional_name_prefix + [string] [EOL] pl = core . pose_library_name_prefix ( char , context ) [EOL] col . label ( [string] % ( char , pl + [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.prefs.PoseThumbnailsPreferences]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.prefs.PoseThumbnailsPreferences]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.prefs.PoseThumbnailsPreferences]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.prefs.PoseThumbnailsPreferences]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pose_thumbnails.prefs.PoseThumbnailsPreferences]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functools [EOL] [EOL] [EOL] def pyside_cache ( propname ) : [EOL] [docstring] [EOL] [EOL] if callable ( propname ) : [EOL] raise TypeError ( [string] ) [EOL] [EOL] def decorator ( wrapped ) : [EOL] [docstring] [EOL] [EOL] @ functools . wraps ( wrapped ) [comment] [EOL] [comment] [EOL] def wrapper ( self , context ) : [EOL] result = None [EOL] try : [EOL] result = wrapped ( self , context ) [EOL] return result [EOL] finally : [EOL] rna_type , rna_info = getattr ( self . bl_rna , propname ) [EOL] rna_info [ [string] ] = result [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def lru_cache_1arg ( wrapped ) : [EOL] [docstring] [EOL] [EOL] cached_value = ... [EOL] cached_arg = ... [EOL] [EOL] def cache_clear ( ) : [EOL] nonlocal cached_value , cached_arg [EOL] cached_value = ... [EOL] cached_arg = ... [EOL] [EOL] @ functools . wraps ( wrapped ) def wrapper ( * args , ** kwargs ) : [EOL] nonlocal cached_value , cached_arg [EOL] [EOL] if cached_value is not ... and len ( args ) and args [ [number] ] . as_pointer ( ) == cached_arg : [EOL] return cached_value [EOL] [EOL] try : [EOL] result = wrapped ( * args , ** kwargs ) [EOL] except : [EOL] cache_clear ( ) [EOL] raise [EOL] [EOL] if len ( args ) : [EOL] cached_value = result [EOL] cached_arg = args [ [number] ] . as_pointer ( ) [EOL] else : [EOL] cache_clear ( ) [EOL] [EOL] return result [EOL] [EOL] wrapper . cache_clear = cache_clear [EOL] return wrapper [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0