[comment] [EOL] [comment] [EOL] [docstring] [EOL] import sys [EOL] [EOL] from pkg_resources import require , VersionConflict [EOL] from setuptools import setup [EOL] [EOL] try : [EOL] require ( [string] ) [EOL] except VersionConflict : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] setup ( use_pyscaffold = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from pkg_resources import get_distribution , DistributionNotFound [EOL] from rop . result import Result [EOL] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __license__ = [string] [EOL] [EOL] try : [EOL] [comment] [EOL] dist_name = __name__ [EOL] __version__ = get_distribution ( dist_name ) . version [EOL] except DistributionNotFound : [EOL] __version__ = [string] [EOL] finally : [EOL] del get_distribution , DistributionNotFound [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] from typing import Callable [EOL] [EOL] [EOL] class Result : [EOL] @ property def is_success ( self ) : return self . _is_success [EOL] [EOL] @ property def is_failure ( self ) : return not self . _is_success [EOL] [EOL] @ is_failure . setter def is_failure ( self , value ) : [EOL] self . is_success = not value [EOL] [EOL] @ property def error_text ( self ) : return self . _error_text [EOL] [EOL] def __init__ ( self , is_success , error ) : [EOL] if is_success and error : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if not is_success and error == [string] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _is_success = is_success [EOL] self . _error_text = error [EOL] [EOL] @ staticmethod def create ( is_success , error = [string] ) : [EOL] return Result ( is_success , error ) [EOL] [EOL] @ staticmethod def fail ( error ) : [EOL] return Result ( False , error ) [EOL] [EOL] @ staticmethod def ok ( ) : [EOL] return Result ( True , [string] ) [EOL] [EOL] def on_success ( self , function ) : [EOL] return function ( ) if self . is_success else self [EOL] [EOL] def on_failure ( self , function ) : [EOL] return function ( ) if self . is_failure else self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $Result$ 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 $Result$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Result$ 0 0 0 $typing.Callable[...,Result]$ 0 0 0 0 $typing.Callable[...,Result]$ 0 0 0 0 0 0 0 0 0 0 0 $Result$ 0 0 0 $typing.Callable[...,Result]$ 0 0 0 0 $typing.Callable[...,Result]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import builtins [EOL] import rop [EOL] import typing [EOL] import unittest [EOL] import pytest [EOL] from rop . result import Result [EOL] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __license__ = [string] [EOL] [EOL] __counter__ = [number] [EOL] [EOL] class ResultTest ( unittest . TestCase ) : [EOL] _counter = [number] [EOL] [EOL] def setup_method ( self , method ) : [EOL] self . _counter = [number] [EOL] [EOL] [EOL] def test_on_success ( self ) : [EOL] result = ResultTest . success ( ) . on_success ( lambda : Result . ok ( ) ) [EOL] assert result . is_success == True [EOL] assert result . is_failure == False [EOL] [EOL] def test_on_failure ( self ) : [EOL] result = ResultTest . failure ( ) . on_success ( lambda : Result . fail ( [string] ) ) [EOL] assert result . is_success == False [EOL] assert result . is_failure == True [EOL] [EOL] def test_on_success_chain_failure ( self ) : [EOL] result = ResultTest . success ( ) . on_success ( lambda : self . _func_increase_counter ( Result . fail ( [string] ) ) ) . on_success ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) [EOL] [EOL] assert result . is_failure == True [EOL] assert result . error_text == [string] [EOL] assert self . _counter == [number] [EOL] [EOL] def test_on_success_chain_success ( self ) : [EOL] result = ResultTest . success ( ) . on_success ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) . on_success ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) [EOL] [EOL] assert result . is_success == True [EOL] assert self . _counter == [number] [EOL] [EOL] def test_on_failure_chain_failure ( self ) : [EOL] result = ResultTest . failure ( ) . on_failure ( lambda : self . _func_increase_counter ( Result . fail ( [string] ) ) ) . on_failure ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) [EOL] [EOL] assert result . is_success == True [EOL] assert self . _counter == [number] [EOL] [EOL] def test_on_failure_chain_success ( self ) : [EOL] result = ResultTest . failure ( ) . on_failure ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) . on_failure ( lambda : self . _func_increase_counter ( Result . ok ( ) ) ) [EOL] [EOL] assert result . is_success == True [EOL] assert self . _counter == [number] [EOL] [EOL] def _func_increase_counter ( self , result ) : [EOL] self . _counter += [number] [EOL] return result [EOL] [EOL] [EOL] @ staticmethod def success ( ) : [EOL] return Result . ok ( ) [EOL] [EOL] @ staticmethod def failure ( ) : [EOL] return Result . fail ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rop.result.Result$ 0 0 0 $rop.result.Result$ 0 0 0 0 0 0 0 0 0 0 $rop.result.Result$ 0 0 0 0 0 0 $rop.result.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rop.result.Result$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0