from typing import Any , Optional , Dict [EOL] import typing [EOL] import app [EOL] import builtins [EOL] import datetime [EOL] import logging [EOL] from functools import lru_cache [EOL] from datetime import datetime , timedelta [EOL] from pathlib import Path [EOL] from typing import Optional [EOL] [EOL] import emails [EOL] import jwt [EOL] from emails . template import JinjaTemplate [EOL] from jwt . exceptions import InvalidTokenError [EOL] from fastapi import HTTPException [EOL] from starlette . status import HTTP_403_FORBIDDEN [EOL] [EOL] from app . core import config [EOL] from app . core . jwt import create_farm_api_token [EOL] from app . schemas . farm import FarmBase [EOL] [EOL] password_reset_jwt_subject = [string] [EOL] [EOL] [EOL] @ lru_cache ( ) def get_settings ( ) : [EOL] return config . Settings ( ) [EOL] [EOL] [EOL] settings = get_settings ( ) [EOL] [EOL] [EOL] def send_email ( email_to , subject_template = [string] , html_template = [string] , environment = { } ) : [EOL] if not settings . EMAILS_ENABLED : [EOL] if settings . EMAIL_TESTING : [EOL] logging . info ( [string] + subject_template + [string] + email_to ) [EOL] return [EOL] [EOL] raise HTTPException ( status_code = HTTP_403_FORBIDDEN , detail = [string] ) [EOL] [EOL] message = emails . Message ( subject = JinjaTemplate ( subject_template ) , html = JinjaTemplate ( html_template ) , mail_from = ( settings . EMAILS_FROM_NAME , settings . EMAILS_FROM_EMAIL ) , ) [EOL] smtp_options = { [string] : settings . SMTP_HOST , [string] : settings . SMTP_PORT } [EOL] if settings . SMTP_TLS : [EOL] smtp_options [ [string] ] = True [EOL] if settings . SMTP_USER : [EOL] smtp_options [ [string] ] = settings . SMTP_USER [EOL] if settings . SMTP_PASSWORD : [EOL] smtp_options [ [string] ] = settings . SMTP_PASSWORD [EOL] response = message . send ( to = email_to , render = environment , smtp = smtp_options ) [EOL] logging . info ( f" [string] { response }" ) [EOL] [EOL] [EOL] def send_reset_password_email ( email_to , email , token ) : [EOL] aggregator_name = settings . AGGREGATOR_NAME [EOL] subject = f"{ aggregator_name } [string] { email }" [EOL] with open ( Path ( settings . EMAIL_TEMPLATES_DIR ) / [string] ) as f : [EOL] template_str = f . read ( ) [EOL] if hasattr ( token , [string] ) : [EOL] use_token = token . decode ( ) [EOL] else : [EOL] use_token = token [EOL] server_host = settings . SERVER_HOST [EOL] link = f"{ server_host } [string] { use_token }" [EOL] send_email ( email_to = email_to , subject_template = subject , html_template = template_str , environment = { [string] : settings . AGGREGATOR_NAME , [string] : email , [string] : email_to , [string] : settings . EMAIL_RESET_TOKEN_EXPIRE_HOURS , [string] : link , } , ) [EOL] [EOL] [EOL] def send_new_account_email ( email_to , username , password ) : [EOL] aggregator_name = settings . AGGREGATOR_NAME [EOL] subject = f"{ aggregator_name } [string] { username }" [EOL] with open ( Path ( settings . EMAIL_TEMPLATES_DIR ) / [string] ) as f : [EOL] template_str = f . read ( ) [EOL] link = settings . SERVER_HOST [EOL] send_email ( email_to = email_to , subject_template = subject , html_template = template_str , environment = { [string] : settings . AGGREGATOR_NAME , [string] : username , [string] : password , [string] : email_to , [string] : link , } , ) [EOL] [EOL] [EOL] def send_admin_alert_email ( email_to , message ) : [EOL] aggregator_name = settings . AGGREGATOR_NAME [EOL] [EOL] subject = f" [string] { aggregator_name }" [EOL] with open ( Path ( settings . EMAIL_TEMPLATES_DIR ) / [string] ) as f : [EOL] template_str = f . read ( ) [EOL] link = settings . SERVER_HOST + [string] [EOL] [EOL] send_email ( email_to = email_to , subject_template = subject , html_template = template_str , environment = { [string] : settings . AGGREGATOR_NAME , [string] : link , [string] : message , } , ) [EOL] [EOL] [EOL] def generate_password_reset_token ( email ) : [EOL] delta = timedelta ( hours = settings . EMAIL_RESET_TOKEN_EXPIRE_HOURS ) [EOL] now = datetime . utcnow ( ) [EOL] expires = now + delta [EOL] exp = expires . timestamp ( ) [EOL] encoded_jwt = jwt . encode ( { [string] : exp , [string] : now , [string] : password_reset_jwt_subject , [string] : email } , settings . SECRET_KEY , algorithm = [string] , ) [EOL] return encoded_jwt [EOL] [EOL] [EOL] def verify_password_reset_token ( token ) : [EOL] try : [EOL] decoded_token = jwt . decode ( token , settings . SECRET_KEY , algorithms = [ [string] ] ) [EOL] assert decoded_token [ [string] ] == password_reset_jwt_subject [EOL] return decoded_token [ [string] ] [EOL] except InvalidTokenError : [EOL] return None [EOL] [EOL] [EOL] def send_farm_registration_email ( email_to , link ) : [EOL] aggregator_name = settings . AGGREGATOR_NAME [EOL] subject = f" [string] { aggregator_name }" [EOL] [EOL] with open ( Path ( settings . EMAIL_TEMPLATES_DIR ) / [string] ) as f : [EOL] template_str = f . read ( ) [EOL] [EOL] send_email ( email_to = email_to , subject_template = subject , html_template = template_str , environment = { [string] : settings . AGGREGATOR_NAME , [string] : link , } , ) [EOL] [EOL] [EOL] def send_farm_authorization_email ( email_to , link , farm ) : [EOL] aggregator_name = settings . AGGREGATOR_NAME [EOL] subject = f" [string] { aggregator_name }" [EOL] [EOL] with open ( Path ( settings . EMAIL_TEMPLATES_DIR ) / [string] ) as f : [EOL] template_str = f . read ( ) [EOL] [EOL] send_email ( email_to = email_to , subject_template = subject , html_template = template_str , environment = { [string] : settings . AGGREGATOR_NAME , [string] : link , [string] : FarmBase , } , ) [EOL] [EOL] [EOL] def generate_farm_authorization_link ( farm_id ) : [EOL] token = create_farm_api_token ( farm_id = [ farm_id ] , scopes = [ [string] , [string] , [string] ] ) [EOL] [EOL] server_host = settings . SERVER_HOST [EOL] link = f"{ server_host } [string] { farm_id } [string] { token . decode ( ) }" [EOL] [EOL] return link [EOL] [EOL] [EOL] def generate_farm_registration_link ( ) : [EOL] token = create_farm_api_token ( farm_id = [ ] , scopes = [ [string] , [string] ] ) [EOL] [EOL] server_host = settings . SERVER_HOST [EOL] link = f"{ server_host } [string] { token . decode ( ) }" [EOL] [EOL] return link [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] [EOL] from fastapi import FastAPI , Response [EOL] from starlette . middleware . cors import CORSMiddleware [EOL] from starlette . requests import Request [EOL] [EOL] from app . api . api_v1 . api import api_router [EOL] from app . core . config import settings [EOL] [EOL] [comment] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] app = FastAPI ( title = settings . AGGREGATOR_NAME , description = [string] , version = [string] , openapi_url = f"{ settings . API_V1_STR } [string] " ) [EOL] [EOL] [comment] [EOL] if settings . BACKEND_CORS_ORIGINS : [EOL] app . add_middleware ( CORSMiddleware , allow_origins = settings . BACKEND_CORS_ORIGINS , allow_credentials = True , allow_methods = [ [string] ] , allow_headers = [ [string] ] , ) , [EOL] [EOL] app . include_router ( api_router , prefix = settings . API_V1_STR ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import app [EOL] import sqlalchemy [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from fastapi . encoders import jsonable_encoder [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app . models . farm_token import FarmToken [EOL] from app . schemas . farm_token import FarmTokenCreate , FarmTokenBase [EOL] [EOL] [EOL] def get_farm_token ( db , farm_id ) : [EOL] return db . query ( FarmToken ) . filter ( FarmToken . farm_id == farm_id ) . first ( ) [EOL] [EOL] [EOL] def create_farm_token ( db , token ) : [EOL] db_item = FarmToken ( ** token . dict ( ) ) [EOL] db . add ( db_item ) [EOL] db . commit ( ) [EOL] db . refresh ( db_item ) [EOL] return db_item [EOL] [EOL] [EOL] def update_farm_token ( db , token , token_in ) : [EOL] token_data = jsonable_encoder ( token ) [EOL] update_data = token_in . dict ( exclude_unset = True ) [EOL] for field in token_data : [EOL] if field in update_data : [EOL] setattr ( token , field , update_data [ field ] ) [EOL] db . add ( token ) [EOL] db . commit ( ) [EOL] db . refresh ( token ) [EOL] return token [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import app [EOL] import builtins [EOL] import typing [EOL] import sqlalchemy [EOL] import logging [EOL] [EOL] from sqlalchemy . orm import Session [EOL] from fastapi . encoders import jsonable_encoder [EOL] [EOL] from app . models . api_key import ApiKey [EOL] from app . schemas . api_key import ApiKeyCreate , ApiKeyUpdate [EOL] from app . core . jwt import create_api_key [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_by_id ( db , key_id ) : [EOL] return db . query ( ApiKey ) . filter ( ApiKey . id == key_id ) . first ( ) [EOL] [EOL] [EOL] def get_by_key ( db , key ) : [EOL] return db . query ( ApiKey ) . filter ( ApiKey . key == key ) . first ( ) [EOL] [EOL] [EOL] def get_multi ( db ) : [EOL] return db . query ( ApiKey ) . all ( ) [EOL] [EOL] [EOL] def create ( db , api_key_in ) : [EOL] [comment] [EOL] key = create_api_key ( farm_id = api_key_in . farm_id , all_farms = api_key_in . all_farms , scopes = api_key_in . scopes ) [EOL] db_item = ApiKey ( key = key , ** api_key_in . dict ( ) ) [EOL] db . add ( db_item ) [EOL] db . commit ( ) [EOL] [EOL] logger . debug ( [string] + key . decode ( ) ) [EOL] db . refresh ( db_item ) [EOL] return db_item [EOL] [EOL] [EOL] def update ( db , * , api_key , api_key_in ) : [EOL] api_key_data = jsonable_encoder ( api_key ) [EOL] update_data = api_key_in . dict ( exclude_unset = True ) [EOL] for field in api_key_data : [EOL] if field in update_data : [EOL] setattr ( api_key , field , update_data [ field ] ) [EOL] db . add ( api_key ) [EOL] db . commit ( ) [EOL] db . refresh ( api_key ) [EOL] return api_key [EOL] [EOL] [EOL] def delete ( db , * , key_id ) : [EOL] key = get_by_id ( db = db , key_id = key_id ) [EOL] db . delete ( key ) [EOL] db . commit ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Generator , Dict , Union [EOL] import typing [EOL] import fastapi [EOL] from typing import Generator [EOL] [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . main import app [EOL] from app . db . session import SessionLocal [EOL] from app . tests . utils . utils import get_superuser_token_headers , get_all_scopes_token_headers [EOL] from app . tests . utils . farm import get_test_farm_instance , delete_test_farm_instance [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def db ( ) : [EOL] yield SessionLocal ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def client ( ) : [EOL] with TestClient ( app ) as c : [EOL] yield c [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def superuser_token_headers ( client ) : [EOL] return get_superuser_token_headers ( client = client ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def all_scopes_token_headers ( ) : [EOL] return get_all_scopes_token_headers ( client = client ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def test_farm ( ) : [EOL] db = SessionLocal ( ) [EOL] farm = get_test_farm_instance ( db ) [EOL] yield farm [EOL] [EOL] [comment] [EOL] delete_test_farm_instance ( db , farm . id ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def test_log ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : True } [EOL] [EOL] return data [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def test_asset ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] return data [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def test_term ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [number] , } [EOL] [EOL] return data [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def test_area ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , } [EOL] [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import sqlalchemy [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app . core . config import settings [EOL] from app import crud [EOL] from app . schemas . farm import FarmCreate [EOL] [EOL] [EOL] def get_test_farm_instance ( db ) : [EOL] [docstring] [EOL] [comment] [EOL] old_farm = crud . farm . get_by_url ( db , farm_url = settings . TEST_FARM_URL ) [EOL] if old_farm is not None : [EOL] crud . farm . delete ( db , farm_id = old_farm . id ) [EOL] [EOL] [comment] [EOL] if settings . TEST_FARM_URL is not None : [EOL] farm_in = FarmCreate ( farm_name = settings . TEST_FARM_NAME , url = settings . TEST_FARM_URL , scope = [string] , active = True ) [EOL] else : [EOL] farm_in = FarmCreate ( farm_name = settings . TEST_FARM_NAME , url = [string] , scope = [string] , active = True ) [EOL] [EOL] test_farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] return test_farm [EOL] [EOL] [EOL] def delete_test_farm_instance ( db , farm_id ) : [EOL] [docstring] [EOL] crud . farm . delete ( db , farm_id = farm_id )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] import sqlalchemy [EOL] from fastapi . testclient import TestClient [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app import crud [EOL] from app . core . config import settings [EOL] from app . schemas . user import UserCreate [EOL] from app . tests . utils . utils import random_lower_string [EOL] [EOL] [EOL] def user_authentication_headers ( client , email , password ) : [EOL] data = { [string] : email , [string] : password } [EOL] [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , data = data ) [EOL] response = r . json ( ) [EOL] auth_token = response [ [string] ] [EOL] headers = { [string] : f" [string] { auth_token }" } [EOL] return headers [EOL] [EOL] [EOL] def create_random_user ( db ) : [EOL] email = random_lower_string ( ) [EOL] password = random_lower_string ( ) [EOL] user_in = UserCreate ( username = email , email = email , password = password ) [EOL] user = crud . user . create ( db = db , user_in = user_in ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] import app [EOL] import random [EOL] import string [EOL] [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . core . config import settings [EOL] from app . schemas . api_key import ApiKeyCreate [EOL] [EOL] [EOL] farmOS_testing_server = pytest . mark . skipif ( settings . TEST_FARM_URL is None , reason = [string] , ) [EOL] [EOL] [EOL] def random_lower_string ( ) : [EOL] return [string] . join ( random . choices ( string . ascii_lowercase , k = [number] ) ) [EOL] [EOL] [EOL] def get_superuser_token_headers ( client ) : [EOL] login_data = { [string] : settings . FIRST_SUPERUSER , [string] : settings . FIRST_SUPERUSER_PASSWORD , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , data = login_data ) [EOL] tokens = r . json ( ) [EOL] a_token = tokens [ [string] ] [EOL] headers = { [string] : f" [string] { a_token }" } [EOL] [comment] [EOL] return headers [EOL] [EOL] [EOL] def get_all_scopes_token_headers ( client ) : [EOL] return _create_headers_with_scopes ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] def get_scope_token_headers ( client , scopes ) : [EOL] return _create_headers_with_scopes ( client , scopes ) [EOL] [EOL] [EOL] def _create_headers_with_scopes ( client , scopes ) : [EOL] login_data = { [string] : settings . FIRST_SUPERUSER , [string] : settings . FIRST_SUPERUSER_PASSWORD , [string] : scopes , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , data = login_data ) [EOL] tokens = r . json ( ) [EOL] a_token = tokens [ [string] ] [EOL] headers = { [string] : f" [string] { a_token }" } [EOL] return headers [EOL] [EOL] [EOL] def get_api_key_headers ( client , api_key_params ) : [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = get_superuser_token_headers ( client = client ) , data = api_key_params . json ( ) ) [EOL] api_key = r . json ( ) [EOL] key = api_key [ [string] ] [EOL] headers = { [string] : f"{ key }" } [EOL] return headers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict [EOL] import typing [EOL] import sqlalchemy [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app . core . config import settings [EOL] from app import crud [EOL] from app . schemas . farm import FarmCreate , FarmUpdate [EOL] from app . tests . utils . utils import random_lower_string [EOL] [EOL] [EOL] def test_create_delete_default_farm_with_token ( db ) : [EOL] [docstring] [EOL] [EOL] farm_name = random_lower_string ( ) [EOL] url = random_lower_string ( ) [EOL] [EOL] [comment] [EOL] token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] farm_in = FarmCreate ( farm_name = farm_name , url = url , token = token , ) [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] [EOL] if settings . FARM_ACTIVE_AFTER_REGISTRATION : [EOL] assert farm . active is True [EOL] else : [EOL] assert farm . active is False [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == token [ [string] ] [EOL] assert farm . token . expires_at == str ( token [ [string] ] ) [EOL] assert farm . token . refresh_token == token [ [string] ] [EOL] assert farm . token . expires_in == token [ [string] ] [EOL] [EOL] [comment] [EOL] crud . farm . delete ( db , farm_id = farm . id ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm . id ) [EOL] assert farm is None [EOL] [EOL] [EOL] def test_create_farm_update_token ( db ) : [EOL] [docstring] [EOL] [EOL] farm_name = random_lower_string ( ) [EOL] url = random_lower_string ( ) [EOL] [EOL] farm_in = FarmCreate ( farm_name = farm_name , url = url , ) [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] assert farm . token is None [EOL] [EOL] if settings . FARM_ACTIVE_AFTER_REGISTRATION : [EOL] assert farm . active is True [EOL] else : [EOL] assert farm . active is False [EOL] [EOL] [comment] [EOL] new_token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] farm_update = FarmUpdate ( token = new_token , ) [EOL] farm = crud . farm . update ( db , farm = farm , farm_in = farm_update ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == new_token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == new_token [ [string] ] [EOL] assert farm . token . refresh_token == new_token [ [string] ] [EOL] assert farm . token . expires_in == new_token [ [string] ] [EOL] [EOL] [comment] [EOL] new_token = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , } [EOL] [EOL] farm_update = FarmUpdate ( token = new_token , ) [EOL] farm = crud . farm . update ( db , farm = farm , farm_in = farm_update ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == new_token [ [string] ] [EOL] assert farm . token . expires_at == new_token [ [string] ] [EOL] assert farm . token . refresh_token == new_token [ [string] ] [EOL] assert farm . token . expires_in == new_token [ [string] ] [EOL] [EOL] [comment] [EOL] crud . farm . delete ( db , farm_id = farm . id ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm . id ) [EOL] assert farm is None [EOL] [EOL] [EOL] def test_create_farm_cant_delete_token ( db ) : [EOL] [docstring] [EOL] [EOL] farm_name = random_lower_string ( ) [EOL] url = random_lower_string ( ) [EOL] [EOL] [comment] [EOL] token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] farm_in = FarmCreate ( farm_name = farm_name , url = url , token = token , ) [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] [EOL] if settings . FARM_ACTIVE_AFTER_REGISTRATION : [EOL] assert farm . active is True [EOL] else : [EOL] assert farm . active is False [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == token [ [string] ] [EOL] assert farm . token . refresh_token == token [ [string] ] [EOL] assert farm . token . expires_in == token [ [string] ] [EOL] [EOL] farm_update = FarmUpdate ( token = None , ) [EOL] farm = crud . farm . update ( db , farm = farm , farm_in = farm_update ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == token [ [string] ] [EOL] assert farm . token . refresh_token == token [ [string] ] [EOL] assert farm . token . expires_in == token [ [string] ] [EOL] [EOL] [comment] [EOL] crud . farm . delete ( db , farm_id = farm . id ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm . id ) [EOL] assert farm is None [EOL] [EOL] [EOL] def test_create_delete_active_farm ( db ) : [EOL] [docstring] [EOL] [EOL] farm_name = random_lower_string ( ) [EOL] url = random_lower_string ( ) [EOL] farm_in = FarmCreate ( farm_name = farm_name , url = url , active = True , ) [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] assert farm . active is True [EOL] [EOL] [comment] [EOL] crud . farm . delete ( db , farm_id = farm . id ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm . id ) [EOL] assert farm is None [EOL] [EOL] [EOL] def test_create_delete_inactive_farm ( db ) : [EOL] [docstring] [EOL] [EOL] farm_name = random_lower_string ( ) [EOL] url = random_lower_string ( ) [EOL] farm_in = FarmCreate ( farm_name = farm_name , url = url , active = False , ) [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] assert farm . farm_name == farm_name [EOL] assert farm . url == url [EOL] assert farm . active is False [EOL] [EOL] [comment] [EOL] crud . farm . delete ( db , farm_id = farm . id ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm . id ) [EOL] assert farm is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from app . core . jwt import create_farm_api_token [EOL] from app . api . utils . security import _validate_token [EOL] [EOL] [EOL] def test_create_api_token ( ) : [EOL] farm_id_list = [ [number] , [number] , [number] ] [EOL] scopes = [ [string] , [string] ] [EOL] [EOL] token = create_farm_api_token ( farm_id_list , scopes ) [EOL] assert token is not None [EOL] [EOL] token_data = _validate_token ( token ) [EOL] assert token_data is not None [EOL] [EOL] [comment] [EOL] assert token_data . user_id is None [EOL] [EOL] [comment] [EOL] assert token_data . farm_id == farm_id_list [EOL] assert token_data . scopes == scopes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sqlalchemy [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app . crud import farm_token [EOL] from app . schemas . farm_token import FarmTokenCreate , FarmTokenUpdate [EOL] from app . tests . utils . utils import random_lower_string [EOL] [EOL] [EOL] def test_create_farm_token ( db , test_farm ) : [EOL] token = FarmTokenCreate ( farm_id = test_farm . id , access_token = random_lower_string ( ) , expires_in = random_lower_string ( ) , refresh_token = random_lower_string ( ) , expires_at = [number] ) [EOL] [EOL] [comment] [EOL] old_token = farm_token . get_farm_token ( db , test_farm . id ) [EOL] if old_token is None : [EOL] farm_token . create_farm_token ( db , token = token ) [EOL] else : [EOL] farm_token . update_farm_token ( db , token = old_token , token_in = token ) [EOL] [EOL] db_token = farm_token . get_farm_token ( db , farm_id = test_farm . id ) [EOL] [EOL] assert db_token . farm_id == token . farm_id == test_farm . id [EOL] assert db_token . access_token == token . access_token [EOL] assert db_token . expires_in == token . expires_in [EOL] assert db_token . refresh_token == token . refresh_token [EOL] assert float ( db_token . expires_at ) == token . expires_at [EOL] [EOL] [EOL] def test_update_farm_token ( db , test_farm ) : [EOL] db_token = farm_token . get_farm_token ( db , farm_id = test_farm . id ) [EOL] assert db_token is not None [EOL] assert db_token . farm_id == test_farm . id [EOL] [EOL] token_changes = FarmTokenUpdate ( id = db_token . id , farm_id = db_token . farm_id , access_token = None , expires_in = None , refresh_token = None , expires_at = None ) [EOL] new_token = farm_token . update_farm_token ( db , token = db_token , token_in = token_changes ) [EOL] assert new_token . id == db_token . id [EOL] assert new_token . farm_id == db_token . farm_id == test_farm . id [EOL] [EOL] [comment] [EOL] assert new_token . access_token is None [EOL] assert new_token . expires_in is None [EOL] assert new_token . refresh_token is None [EOL] assert new_token . expires_at is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . core . config import settings [EOL] from app . tests . utils . utils import farmOS_testing_server , get_scope_token_headers [EOL] [EOL] [EOL] @ pytest . fixture def farm_areas_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def areas_vid ( client , test_farm , all_scopes_token_headers ) : [EOL] response = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = all_scopes_token_headers , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in content [EOL] content = content [ str ( test_farm . id ) ] [EOL] [EOL] [comment] [EOL] assert [string] in content [EOL] assert [string] in content [ [string] ] [EOL] assert [string] in content [ [string] ] [ [string] ] [EOL] assert [string] in content [ [string] ] [ [string] ] [ [string] ] [EOL] assert [string] in content [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] areas_vid = content [ [string] ] [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] yield areas_vid [EOL] [EOL] [EOL] @ farmOS_testing_server def test_create_area ( client , test_farm , test_area , areas_vid , farm_areas_headers ) : [EOL] data = test_area [EOL] [comment] [EOL] data [ [string] ] = areas_vid [EOL] print ( areas_vid ) [EOL] [EOL] response = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_areas_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in content [EOL] [EOL] [comment] [EOL] test_farm_areas = content [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_areas ) == [number] [EOL] assert [string] in test_farm_areas [ [number] ] [EOL] created_area_id = test_farm_areas [ [number] ] [ [string] ] [EOL] test_area [ [string] ] = created_area_id [EOL] [EOL] [comment] [EOL] response = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_area [ [string] ] }" , headers = farm_areas_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] created_area = content [ str ( test_farm . id ) ] [ [number] ] [EOL] [comment] [EOL] assert created_area [ [string] ] == data [ [string] ] [EOL] [comment] [EOL] assert data [ [string] ] in created_area [ [string] ] [EOL] [EOL] [EOL] @ farmOS_testing_server def test_get_areas ( client , test_farm , farm_areas_headers ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_areas_headers , ) [EOL] [comment] [EOL] assert [number] <= r . status_code < [number] [EOL] areas = r . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in areas [EOL] [EOL] [comment] [EOL] test_farm_areas = areas [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_areas ) > [number] [EOL] for area in test_farm_areas : [EOL] assert [string] in area [EOL] [EOL] assert str ( test_farm . id ) in areas [EOL] [EOL] test_farm_areas = areas [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_areas ) > [number] [EOL] for area in test_farm_areas : [EOL] assert [string] in area [EOL] [EOL] [EOL] @ farmOS_testing_server def test_update_area ( client , test_farm , test_area , areas_vid , farm_areas_headers ) : [EOL] [comment] [EOL] test_area [ [string] ] = [string] [EOL] test_area [ [string] ] = [string] [EOL] [EOL] data = test_area [EOL] [comment] [EOL] data [ [string] ] = areas_vid [EOL] [EOL] response = client . put ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_areas_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] response_area = content [ str ( test_farm . id ) ] [ [number] ] [EOL] assert [string] in response_area [EOL] assert test_area [ [string] ] == str ( response_area [ [string] ] ) [EOL] [EOL] [comment] [EOL] response = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_area [ [string] ] }" , headers = farm_areas_headers , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] updated_area = content [ str ( test_farm . id ) ] [ [number] ] [EOL] [comment] [EOL] assert updated_area [ [string] ] == data [ [string] ] [EOL] [comment] [EOL] assert data [ [string] ] in updated_area [ [string] ] [EOL] [EOL] [EOL] @ farmOS_testing_server def test_delete_area ( client , test_farm , test_area , farm_areas_headers ) : [EOL] response = client . delete ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_area [ [string] ] }" , headers = farm_areas_headers , ) [EOL] [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [EOL] @ farmOS_testing_server def test_farm_areas_oauth_scope ( client ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . core . config import settings [EOL] from app . tests . utils . utils import farmOS_testing_server , get_scope_token_headers [EOL] [EOL] [EOL] @ pytest . fixture def farm_logs_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] @ farmOS_testing_server def test_get_logs ( client , test_farm , farm_logs_headers ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_logs_headers , ) [EOL] [comment] [EOL] assert [number] <= r . status_code < [number] [EOL] logs = r . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in logs [EOL] [EOL] [comment] [EOL] test_farm_logs = logs [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_logs ) > [number] [EOL] for log in test_farm_logs : [EOL] assert [string] in log [EOL] [EOL] assert str ( test_farm . id ) in logs [EOL] [EOL] test_farm_logs = logs [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_logs ) > [number] [EOL] for log in test_farm_logs : [EOL] assert [string] in log [EOL] [EOL] [EOL] @ farmOS_testing_server def test_create_log ( client , test_farm , test_log , farm_logs_headers ) : [EOL] data = test_log [EOL] [EOL] response = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_logs_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in content [EOL] [EOL] [comment] [EOL] test_farm_logs = content [ str ( test_farm . id ) ] [EOL] assert len ( test_farm_logs ) == [number] [EOL] assert [string] in test_farm_logs [ [number] ] [EOL] created_log_id = test_farm_logs [ [number] ] [ [string] ] [EOL] test_log [ [string] ] = created_log_id [EOL] [EOL] [comment] [EOL] response = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_log [ [string] ] }" , headers = farm_logs_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] created_log = content [ str ( test_farm . id ) ] [ [number] ] [EOL] [comment] [EOL] assert created_log [ [string] ] == data [ [string] ] [EOL] [comment] [EOL] assert bool ( int ( created_log [ [string] ] ) ) == data [ [string] ] [EOL] [EOL] [EOL] @ farmOS_testing_server def test_update_log ( client , test_farm , test_log , farm_logs_headers ) : [EOL] [comment] [EOL] test_log [ [string] ] = [string] [EOL] test_log [ [string] ] = False [EOL] data = test_log [EOL] [EOL] response = client . put ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_logs_headers , json = data , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [comment] [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] response_log = content [ str ( test_farm . id ) ] [ [number] ] [EOL] assert [string] in response_log [EOL] assert test_log [ [string] ] == str ( response_log [ [string] ] ) [EOL] [EOL] [comment] [EOL] response = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_log [ [string] ] }" , headers = farm_logs_headers , ) [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] assert str ( test_farm . id ) in content [EOL] assert len ( content [ str ( test_farm . id ) ] ) == [number] [EOL] updated_log = content [ str ( test_farm . id ) ] [ [number] ] [EOL] [comment] [EOL] assert updated_log [ [string] ] == data [ [string] ] [EOL] [comment] [EOL] assert bool ( int ( updated_log [ [string] ] ) ) == data [ [string] ] [EOL] [EOL] [EOL] @ farmOS_testing_server def test_delete_log ( client , test_farm , test_log , farm_logs_headers ) : [EOL] response = client . delete ( f"{ settings . API_V1_STR } [string] { test_farm . id } [string] { test_log [ [string] ] }" , headers = farm_logs_headers , ) [EOL] [EOL] [comment] [EOL] assert [number] <= response . status_code < [number] [EOL] content = response . json ( ) [EOL] [EOL] [EOL] @ farmOS_testing_server def test_farm_logs_oauth_scope ( client ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] import sqlalchemy [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app import crud [EOL] from app . main import app [EOL] from app . core . config import Settings , settings [EOL] from app import utils [EOL] from app . core . jwt import create_farm_api_token [EOL] from app . tests . utils . utils import random_lower_string , get_scope_token_headers [EOL] [EOL] [EOL] @ pytest . fixture def farm_create_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def farm_read_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def farm_update_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def farm_delete_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] def test_create_delete_farm ( client , db , farm_create_headers , farm_delete_headers ) : [EOL] farm_name = random_lower_string ( ) [EOL] url = [string] [EOL] [EOL] [comment] [EOL] token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] [comment] [EOL] data = { [string] : farm_name , [string] : url , [string] : [string] , [string] : token , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = farm_create_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] created_farm = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = created_farm [ [string] ] ) [EOL] [EOL] [comment] [EOL] assert farm . farm_name == created_farm [ [string] ] == data [ [string] ] [EOL] assert farm . url == created_farm [ [string] ] == data [ [string] ] [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert [string] in created_farm [EOL] assert farm . token . access_token == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . expires_in == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . refresh_token == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] [EOL] [comment] [EOL] r = client . delete ( f"{ settings . API_V1_STR } [string] { farm . id }" , headers = farm_delete_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] [EOL] [EOL] def test_create_farm_update_token ( client , db , farm_create_headers , farm_update_headers , farm_delete_headers ) : [EOL] farm_name = random_lower_string ( ) [EOL] url = [string] [EOL] [EOL] [comment] [EOL] data = { [string] : farm_name , [string] : url , [string] : [string] , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = farm_create_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] created_farm = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = created_farm [ [string] ] ) [EOL] [EOL] [comment] [EOL] assert farm . farm_name == created_farm [ [string] ] == data [ [string] ] [EOL] assert farm . url == created_farm [ [string] ] == data [ [string] ] [EOL] assert farm . token is None [EOL] [EOL] [comment] [EOL] token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] data = { [string] : token , } [EOL] r = client . put ( f"{ settings . API_V1_STR } [string] { farm . id }" , headers = farm_update_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] updated_farm = r . json ( ) [EOL] [comment] [EOL] db . refresh ( farm ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = updated_farm [ [string] ] ) [EOL] [EOL] assert farm . farm_name == updated_farm [ [string] ] [EOL] assert farm . url == updated_farm [ [string] ] [EOL] [EOL] [comment] [EOL] assert [string] in updated_farm [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . expires_in == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . refresh_token == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] [EOL] [comment] [EOL] r = client . delete ( f"{ settings . API_V1_STR } [string] { farm . id }" , headers = farm_delete_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] [EOL] [EOL] def test_create_farm_delete_token ( client , db , farm_create_headers , farm_update_headers , farm_delete_headers ) : [EOL] farm_name = random_lower_string ( ) [EOL] url = [string] [EOL] [EOL] [comment] [EOL] token = { [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : random_lower_string ( ) , [string] : [number] , } [EOL] [EOL] [comment] [EOL] data = { [string] : farm_name , [string] : url , [string] : [string] , [string] : token , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = farm_create_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] created_farm = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = created_farm [ [string] ] ) [EOL] [EOL] [comment] [EOL] assert farm . farm_name == created_farm [ [string] ] == data [ [string] ] [EOL] assert farm . url == created_farm [ [string] ] == data [ [string] ] [EOL] [EOL] [comment] [EOL] assert farm . token is not None [EOL] assert [string] in created_farm [EOL] assert farm . token . access_token == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . expires_in == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . refresh_token == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == created_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] [EOL] [comment] [EOL] new_token = { } [EOL] [EOL] data = { [string] : new_token , } [EOL] r = client . put ( f"{ settings . API_V1_STR } [string] { farm . id }" , headers = farm_update_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] updated_farm = r . json ( ) [EOL] [comment] [EOL] db . refresh ( farm ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = updated_farm [ [string] ] ) [EOL] [EOL] assert farm . farm_name == updated_farm [ [string] ] [EOL] assert farm . url == updated_farm [ [string] ] [EOL] [EOL] [comment] [EOL] assert [string] in updated_farm [EOL] assert farm . token is not None [EOL] assert farm . token . access_token == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . expires_in == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert farm . token . refresh_token == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] assert float ( farm . token . expires_at ) == updated_farm [ [string] ] [ [string] ] == token [ [string] ] [EOL] [EOL] [comment] [EOL] r = client . delete ( f"{ settings . API_V1_STR } [string] { farm . id }" , headers = farm_delete_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] [EOL] [EOL] def test_get_all_farms ( client , db , test_farm , farm_read_headers ) : [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " , headers = farm_read_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] response = r . json ( ) [EOL] first_id = response [ [number] ] [ [string] ] [EOL] farm = crud . farm . get_by_id ( db , farm_id = first_id ) [EOL] assert farm . farm_name == response [ [number] ] [ [string] ] [EOL] [EOL] [EOL] def test_get_farm_by_id ( client , db , test_farm , farm_read_headers ) : [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = farm_read_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] response = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = response [ [string] ] ) [EOL] assert farm . farm_name == response [ [string] ] [EOL] [EOL] [EOL] def test_farm_create_oauth_scope ( ) : [EOL] def settings_open_registration ( ) : [EOL] return Settings ( AGGREGATOR_OPEN_FARM_REGISTRATION = True , AGGREGATOR_INVITE_FARM_REGISTRATION = True ) [EOL] [EOL] def settings_invite_registration ( ) : [EOL] return Settings ( AGGREGATOR_OPEN_FARM_REGISTRATION = False , AGGREGATOR_INVITE_FARM_REGISTRATION = True ) [EOL] [EOL] def settings_closed_registration ( ) : [EOL] return Settings ( AGGREGATOR_OPEN_FARM_REGISTRATION = False , AGGREGATOR_INVITE_FARM_REGISTRATION = False ) [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [comment] [EOL] app . dependency_overrides [ utils . get_settings ] = settings_closed_registration [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] token = create_farm_api_token ( farm_id = [ ] , scopes = [ [string] , [string] ] ) [EOL] app . dependency_overrides [ utils . get_settings ] = settings_closed_registration [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = { [string] : token . decode ( [string] ) } ) [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] app . dependency_overrides [ utils . get_settings ] = settings_invite_registration [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] token = create_farm_api_token ( farm_id = [ ] , scopes = [ [string] , [string] ] ) [EOL] app . dependency_overrides [ utils . get_settings ] = settings_invite_registration [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = { [string] : token . decode ( [string] ) } ) [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] app . dependency_overrides [ utils . get_settings ] = settings_open_registration [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_farm_read_oauth_scope ( client ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_farm_read_by_id_oauth_scope ( client ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_farm_update_oauth_scope ( client ) : [EOL] r = client . put ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_farm_delete_oauth_scope ( client ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " ) [EOL] assert r . status_code == [number] [EOL]	
	0
from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] import sqlalchemy [EOL] from fastapi . testclient import TestClient [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app import crud [EOL] from app . core . config import settings [EOL] from app . schemas . user import UserCreate [EOL] from app . tests . utils . user import user_authentication_headers [EOL] from app . tests . utils . utils import random_lower_string [EOL] [EOL] [EOL] def test_get_users_superuser_me ( client , superuser_token_headers ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers ) [EOL] current_user = r . json ( ) [EOL] assert current_user [EOL] assert current_user [ [string] ] is True [EOL] assert current_user [ [string] ] [EOL] assert current_user [ [string] ] == settings . FIRST_SUPERUSER [EOL] [EOL] [EOL] def test_create_user_new_email ( client , db , superuser_token_headers ) : [EOL] username = random_lower_string ( ) [EOL] password = random_lower_string ( ) [EOL] data = { [string] : username , [string] : password } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers , json = data , ) [EOL] assert [number] <= r . status_code < [number] [EOL] created_user = r . json ( ) [EOL] user = crud . user . get_by_email ( db , email = username ) [EOL] assert user . email == created_user [ [string] ] [EOL] [EOL] [EOL] def test_get_existing_user ( client , db , superuser_token_headers ) : [EOL] username = random_lower_string ( ) [EOL] password = random_lower_string ( ) [EOL] user_in = UserCreate ( email = username , password = password ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] user_id = user . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { user_id }" , headers = superuser_token_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] api_user = r . json ( ) [EOL] user = crud . user . get_by_email ( db , email = username ) [EOL] assert user . email == api_user [ [string] ] [EOL] [EOL] [EOL] def test_create_user_existing_username ( client , db , superuser_token_headers ) : [EOL] username = random_lower_string ( ) [EOL] [comment] [EOL] password = random_lower_string ( ) [EOL] user_in = UserCreate ( email = username , password = password ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] data = { [string] : username , [string] : password } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers , json = data , ) [EOL] created_user = r . json ( ) [EOL] assert r . status_code == [number] [EOL] assert [string] not in created_user [EOL] [EOL] [EOL] def test_create_user_by_normal_user ( client , db ) : [EOL] username = random_lower_string ( ) [EOL] password = random_lower_string ( ) [EOL] user_in = UserCreate ( email = username , password = password ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] user_token_headers = user_authentication_headers ( client , username , password ) [EOL] data = { [string] : username , [string] : password } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = user_token_headers , json = data ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_retrieve_users ( client , db , superuser_token_headers ) : [EOL] username = random_lower_string ( ) [EOL] password = random_lower_string ( ) [EOL] user_in = UserCreate ( email = username , password = password ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] [EOL] username2 = random_lower_string ( ) [EOL] password2 = random_lower_string ( ) [EOL] user_in2 = UserCreate ( email = username2 , password = password2 ) [EOL] user2 = crud . user . create ( db , user_in = user_in2 ) [EOL] [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers ) [EOL] all_users = r . json ( ) [EOL] [EOL] assert len ( all_users ) > [number] [EOL] for user in all_users : [EOL] assert [string] in user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import fastapi [EOL] import urllib [EOL] from urllib . parse import urlparse , parse_qs [EOL] [EOL] import pytest [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . core . config import settings [EOL] from app . schemas . farm_token import FarmAuthorizationParams [EOL] from app . tests . utils . utils import random_lower_string , get_scope_token_headers [EOL] from app . api . utils . security import _validate_token [EOL] [EOL] [EOL] @ pytest . fixture def farm_authorize_headers ( client ) : [EOL] return get_scope_token_headers ( client = client , scopes = [string] ) [EOL] [EOL] [EOL] def test_authorize_farm ( client , test_farm , farm_authorize_headers ) : [EOL] data = FarmAuthorizationParams ( grant_type = [string] , code = random_lower_string ( ) , state = random_lower_string ( ) , client_id = [string] , scope = [string] , ) [EOL] [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = farm_authorize_headers , json = data . dict ( ) , ) [EOL] [comment] [EOL] [comment] [EOL] assert r . status_code == [number] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def test_farm_authorize_oauth_scope ( client , test_farm ) : [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_get_farm_auth_link ( client , test_farm , superuser_token_headers ) : [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = superuser_token_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] assert r . json ( ) is not None [EOL] [EOL] [comment] [EOL] link = urlparse ( r . json ( ) ) [EOL] assert link . scheme is not None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert link . netloc is not [string] [EOL] [EOL] [comment] [EOL] assert link . path == f" [string] " [EOL] [EOL] [comment] [EOL] assert link . query is not None [EOL] params = parse_qs ( link . query ) [EOL] assert [string] in params [EOL] assert int ( params [ [string] ] [ [number] ] ) == test_farm . id [EOL] assert [string] in params [EOL] token = params [ [string] ] [ [number] ] [EOL] [EOL] [comment] [EOL] token_data = _validate_token ( token ) [EOL] assert token_data is not None [EOL] assert token_data . farm_id == [ test_farm . id ] [EOL] assert token_data . scopes is not None [EOL] assert len ( token_data . scopes ) > [number] [EOL] [EOL] [comment] [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = { [string] : token } , ) [EOL] assert [number] <= r . status_code < [number] [EOL] farm_info = r . json ( ) [EOL] assert farm_info [ [string] ] == test_farm . id [EOL] assert farm_info [ [string] ] == test_farm . farm_name [EOL] [EOL] [comment] [EOL] data = FarmAuthorizationParams ( grant_type = [string] , code = random_lower_string ( ) , state = random_lower_string ( ) , client_id = [string] , scope = [string] , ) [EOL] [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] { test_farm . id }" , headers = { [string] : token } , json = data . dict ( ) , ) [EOL] [comment] [EOL] [comment] [EOL] assert r . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] import sqlalchemy [EOL] from fastapi . testclient import TestClient [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app import crud [EOL] from app . core . config import settings [EOL] from app . tests . utils . utils import random_lower_string , get_api_key_headers [EOL] from app . schemas . api_key import ApiKeyCreate , ApiKeyUpdate [EOL] [EOL] [EOL] def test_create_update_delete_api_key ( client , superuser_token_headers ) : [EOL] api_key = ApiKeyCreate ( name = [string] , all_farms = True , farm_id = [ [number] , [number] , [number] ] , notes = [string] , enabled = True ) [EOL] [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers , data = api_key . json ( ) ) [EOL] assert [number] <= r . status_code < [number] [EOL] [EOL] key = r . json ( ) [EOL] assert key [EOL] assert [string] in key [EOL] assert [string] in key [EOL] assert key [ [string] ] == api_key . enabled [EOL] assert key [ [string] ] == api_key . farm_id [EOL] assert key [ [string] ] == api_key . all_farms [EOL] assert key [ [string] ] == api_key . name [EOL] assert key [ [string] ] == api_key . notes [EOL] [EOL] [comment] [EOL] key_update = ApiKeyUpdate ( name = [string] , enabled = False , notes = [string] , all_farms = False , farm_id = [ ] ) [EOL] r = client . put ( f"{ settings . API_V1_STR } [string] { key [ [string] ] }" , headers = superuser_token_headers , data = key_update . json ( ) ) [EOL] assert [number] <= r . status_code < [number] [EOL] updated_key = r . json ( ) [EOL] [EOL] assert updated_key [EOL] assert [string] in updated_key [EOL] assert updated_key [ [string] ] == key_update . enabled [EOL] assert updated_key [ [string] ] == key_update . name [EOL] assert updated_key [ [string] ] == key_update . notes [EOL] [EOL] [comment] [EOL] assert updated_key [ [string] ] == api_key . farm_id [EOL] assert updated_key [ [string] ] == api_key . all_farms [EOL] [EOL] [comment] [EOL] r = client . delete ( f"{ settings . API_V1_STR } [string] { key [ [string] ] }" , headers = superuser_token_headers , ) [EOL] assert [number] <= r . status_code < [number] [EOL] [EOL] [EOL] def test_get_api_keys ( client , superuser_token_headers ) : [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers ) [EOL] current_user = r . json ( ) [EOL] assert current_user [EOL] assert current_user [ [string] ] is True [EOL] assert current_user [ [string] ] [EOL] assert current_user [ [string] ] == settings . FIRST_SUPERUSER [EOL] [EOL] [EOL] def test_read_farms_all_farms_api_key ( client , db , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = True , all_farms = True , scopes = [ [string] ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert [number] <= r . status_code < [number] [EOL] response = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = response [ [string] ] ) [EOL] assert farm . farm_name == response [ [string] ] [EOL] [EOL] [EOL] def test_read_farms_one_farm_id_api_key ( client , db , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = True , farm_id = [ test_farm . id ] , scopes = [ [string] ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert [number] <= r . status_code < [number] [EOL] response = r . json ( ) [EOL] farm = crud . farm . get_by_id ( db , farm_id = response [ [string] ] ) [EOL] assert farm . farm_name == response [ [string] ] [EOL] [EOL] [EOL] def test_read_farms_wrong_farm_id_api_key ( client , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = True , farm_id = [ [number] ] , scopes = [ [string] ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_read_farms_no_farms_api_key ( client , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = True , all_farms = False , scopes = [ [string] ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_read_farms_disabled_api_key ( client , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = False , all_farms = True , scopes = [ [string] ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_read_farms_no_scope_api_key ( client , test_farm ) : [EOL] test_api_key = ApiKeyCreate ( name = [string] , enabled = True , all_farms = True , scopes = [ ] ) [EOL] [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = get_api_key_headers ( client = client , api_key_params = test_api_key ) , ) [EOL] assert r . status_code == [number] [EOL] [EOL] [EOL] def test_read_farms_random_api_key ( client , test_farm ) : [EOL] farm_id = test_farm . id [EOL] r = client . get ( f"{ settings . API_V1_STR } [string] { farm_id }" , headers = { [string] : f"{ random_lower_string ( ) }" } , ) [EOL] assert r . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from app . core . config import settings [EOL] [EOL] [EOL] def test_get_access_token ( client ) : [EOL] login_data = { [string] : settings . FIRST_SUPERUSER , [string] : settings . FIRST_SUPERUSER_PASSWORD , } [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , data = login_data ) [EOL] tokens = r . json ( ) [EOL] assert r . status_code == [number] [EOL] assert [string] in tokens [EOL] assert tokens [ [string] ] [EOL] [EOL] [EOL] def test_use_access_token ( client , superuser_token_headers ) : [EOL] r = client . post ( f"{ settings . API_V1_STR } [string] " , headers = superuser_token_headers , ) [EOL] result = r . json ( ) [EOL] assert r . status_code == [number] [EOL] assert [string] in result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import app [EOL] import builtins [EOL] import typing [EOL] import pydantic [EOL] import sqlalchemy [EOL] from typing import List [EOL] [EOL] from fastapi import APIRouter , Body , Depends , HTTPException [EOL] from fastapi . encoders import jsonable_encoder [EOL] from pydantic . networks import EmailStr [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app import crud [EOL] from app . api . utils . db import get_db [EOL] from app . api . utils . security import get_current_active_superuser , get_current_active_user [EOL] from app . models . user import User as DBUser [EOL] from app . schemas . user import User , UserCreate , UserInDB , UserUpdate [EOL] from app . utils import get_settings , send_new_account_email [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [EOL] @ router . get ( [string] , response_model = List [ User ] ) def read_users ( db = Depends ( get_db ) , skip = [number] , limit = [number] , current_user = Depends ( get_current_active_superuser ) , ) : [EOL] [docstring] [EOL] users = crud . user . get_multi ( db , skip = skip , limit = limit ) [EOL] return users [EOL] [EOL] [EOL] @ router . post ( [string] , response_model = User ) def create_user ( * , db = Depends ( get_db ) , settings = Depends ( get_settings ) , user_in , current_user = Depends ( get_current_active_superuser ) , ) : [EOL] [docstring] [EOL] user = crud . user . get_by_email ( db , email = user_in . email ) [EOL] if user : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] if settings . EMAILS_ENABLED and user_in . email : [EOL] send_new_account_email ( email_to = user_in . email , username = user_in . email , password = user_in . password ) [EOL] return user [EOL] [EOL] [EOL] @ router . put ( [string] , response_model = User ) def update_user_me ( * , db = Depends ( get_db ) , password = Body ( None ) , full_name = Body ( None ) , email = Body ( None ) , current_user = Depends ( get_current_active_user ) , ) : [EOL] [docstring] [EOL] current_user_data = jsonable_encoder ( current_user ) [EOL] user_in = UserUpdate ( ** current_user_data ) [EOL] if password is not None : [EOL] user_in . password = password [EOL] if full_name is not None : [EOL] user_in . full_name = full_name [EOL] if email is not None : [EOL] user_in . email = email [EOL] user = crud . user . update ( db , user = current_user , user_in = user_in ) [EOL] return user [EOL] [EOL] [EOL] @ router . get ( [string] , response_model = User ) def read_user_me ( db = Depends ( get_db ) , current_user = Depends ( get_current_active_user ) , ) : [EOL] [docstring] [EOL] return current_user [EOL] [EOL] [EOL] @ router . post ( [string] , response_model = User ) def create_user_open ( * , db = Depends ( get_db ) , settings = Depends ( get_settings ) , password = Body ( ... ) , email = Body ( ... ) , full_name = Body ( None ) , ) : [EOL] [docstring] [EOL] if not settings . USERS_OPEN_REGISTRATION : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] user = crud . user . get_by_email ( db , email = email ) [EOL] if user : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] user_in = UserCreate ( password = password , email = email , full_name = full_name ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL] return user [EOL] [EOL] [EOL] @ router . get ( [string] , response_model = User ) def read_user_by_id ( user_id , current_user = Depends ( get_current_active_user ) , db = Depends ( get_db ) , ) : [EOL] [docstring] [EOL] user = crud . user . get ( db , user_id = user_id ) [EOL] if user == current_user : [EOL] return user [EOL] if not crud . user . is_superuser ( current_user ) : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return user [EOL] [EOL] [EOL] @ router . put ( [string] , response_model = User ) def update_user ( * , db = Depends ( get_db ) , user_id , user_in , current_user = Depends ( get_current_active_superuser ) , ) : [EOL] [docstring] [EOL] user = crud . user . get ( db , user_id = user_id ) [EOL] if not user : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] user = crud . user . update ( db , user = user , user_in = user_in ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import app [EOL] import sqlalchemy [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from fastapi import APIRouter , Body , Depends , Security , HTTPException , Query [EOL] from sqlalchemy . orm import Session [EOL] [EOL] [EOL] from app import crud [EOL] from app . utils import get_settings [EOL] from app . api . utils . db import get_db [EOL] from app . api . utils . farms import get_farms_url_or_list , get_farm_by_id , admin_alert_email [EOL] from app . api . utils . security import get_farm_access , get_farm_access_allow_public [EOL] from app . schemas . farm import Farm , AllFarmInfo , FarmCreate , FarmUpdate [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ router . get ( [string] , response_model = List [ Farm ] , dependencies = [ Security ( get_farm_access , scopes = [ [string] ] ) ] ) def read_farms ( farms = Depends ( get_farms_url_or_list ) , ) : [EOL] [docstring] [EOL] return farms [EOL] [EOL] [EOL] @ router . get ( [string] , response_model = AllFarmInfo , dependencies = [ Security ( get_farm_access , scopes = [ [string] ] ) ] ) def read_farm_by_id ( farm = Depends ( get_farm_by_id ) ) : [EOL] [docstring] [EOL] return farm [EOL] [EOL] [EOL] @ router . post ( [string] , response_model = Farm , dependencies = [ Security ( get_farm_access_allow_public , scopes = [ [string] ] ) ] ) async def create_farm ( * , db = Depends ( get_db ) , settings = Depends ( get_settings ) , farm_in , ) : [EOL] [docstring] [EOL] existing_farm = crud . farm . get_by_url ( db , farm_url = farm_in . url ) [EOL] if existing_farm : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] [EOL] if settings . AGGREGATOR_ALERT_NEW_FARMS : [EOL] admin_alert_email ( db = db , message = [string] + farm_in . farm_name + [string] + farm_in . url ) [EOL] [EOL] farm = crud . farm . create ( db , farm_in = farm_in ) [EOL] [EOL] return farm [EOL] [EOL] [EOL] @ router . put ( [string] , response_model = Farm , dependencies = [ Security ( get_farm_access , scopes = [ [string] ] ) ] ) async def update_farm ( * , db = Depends ( get_db ) , farm = Depends ( get_farm_by_id ) , farm_in , ) : [EOL] [docstring] [EOL] if farm_in . url is not None : [EOL] existing_farm = crud . farm . get_by_url ( db , farm_url = farm_in . url ) [EOL] if existing_farm : [EOL] raise HTTPException ( status_code = [number] , detail = [string] , ) [EOL] [EOL] farm = crud . farm . update ( db , farm = farm , farm_in = farm_in ) [EOL] return farm [EOL] [EOL] [EOL] @ router . delete ( [string] , response_model = Farm , dependencies = [ Security ( get_farm_access , scopes = [ [string] ] ) ] ) async def delete_farm ( farm_id , db = Depends ( get_db ) , farm = Depends ( get_farm_by_id ) ) : [EOL] [docstring] [EOL] farm = crud . farm . delete ( db , farm_id = farm_id ) [EOL] return farm [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import app [EOL] import builtins [EOL] import typing [EOL] import sqlalchemy [EOL] import starlette [EOL] from typing import List [EOL] [EOL] from fastapi import APIRouter , Body , Depends , HTTPException , Query [EOL] from starlette . requests import Request [EOL] from pydantic import BaseModel [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from app . api . utils . db import get_db [EOL] from app . api . utils . farms import get_active_farms_url_or_list , get_farm_client , ClientError [EOL] from app . schemas . farm import Farm [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class Asset ( BaseModel ) : [EOL] class Config : [EOL] extra = [string] [EOL] [EOL] name = ... [EOL] type = ... [EOL] [EOL] [EOL] class AssetUpdate ( BaseModel ) : [EOL] class Config : [EOL] extra = [string] [EOL] [EOL] id = ... [EOL] [EOL] [EOL] @ router . get ( [string] ) def get_all_farm_assets ( request , farm_list = Depends ( get_active_farms_url_or_list ) , db = Depends ( get_db ) , ) : [EOL] query_params = { ** request . query_params } [EOL] query_params . pop ( [string] , None ) [EOL] query_params . pop ( [string] , None ) [EOL] [EOL] data = { } [EOL] for farm in farm_list : [EOL] data [ farm . id ] = [ ] [EOL] [EOL] [comment] [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] except ClientError : [EOL] continue [EOL] [EOL] [comment] [EOL] try : [EOL] data [ farm . id ] = data [ farm . id ] + farm_client . asset . get ( filters = query_params ) [ [string] ] [EOL] except : [EOL] continue [EOL] [EOL] return data [EOL] [EOL] [EOL] @ router . post ( [string] ) def create_farm_assets ( asset , farm_list = Depends ( get_active_farms_url_or_list ) , db = Depends ( get_db ) , ) : [EOL] data = { } [EOL] for farm in farm_list : [EOL] data [ farm . id ] = [ ] [EOL] [EOL] [comment] [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] except ClientError : [EOL] continue [EOL] [EOL] [comment] [EOL] try : [EOL] data [ farm . id ] . append ( farm_client . asset . send ( payload = asset . dict ( ) ) ) [EOL] except : [EOL] continue [EOL] [EOL] return data [EOL] [EOL] [EOL] @ router . put ( [string] ) def update_farm_assets ( asset , farm_list = Depends ( get_active_farms_url_or_list ) , db = Depends ( get_db ) , ) : [EOL] data = { } [EOL] for farm in farm_list : [EOL] data [ farm . id ] = [ ] [EOL] [EOL] [comment] [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] except ClientError : [EOL] continue [EOL] [EOL] [comment] [EOL] try : [EOL] data [ farm . id ] . append ( farm_client . asset . send ( payload = asset . dict ( ) ) ) [EOL] except : [EOL] continue [EOL] [EOL] return data [EOL] [EOL] [EOL] @ router . delete ( [string] ) def delete_farm_assets ( id = Query ( None ) , farm_list = Depends ( get_active_farms_url_or_list ) , db = Depends ( get_db ) , ) : [EOL] data = { } [EOL] for farm in farm_list : [EOL] data [ farm . id ] = [ ] [EOL] [EOL] [comment] [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] except ClientError : [EOL] continue [EOL] [EOL] [comment] [EOL] for single_id in id : [EOL] try : [EOL] result = farm_client . asset . delete ( id = single_id ) [EOL] data [ farm . id ] . append ( { single_id : result . json ( ) } ) [EOL] except : [EOL] data [ farm . id ] . append ( { single_id : [string] } ) [EOL] continue [EOL] [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List , Dict [EOL] import typing [EOL] import app [EOL] import sqlalchemy [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from fastapi import APIRouter , Body , Depends , Security , HTTPException , Query [EOL] from sqlalchemy . orm import Session [EOL] [EOL] [EOL] from app import crud [EOL] from app . api . utils . db import get_db [EOL] from app . api . utils . farms import get_farm_client , ClientError , get_farms_url_or_list [EOL] from app . api . utils . security import get_farm_access [EOL] from app . schemas . farm import Farm [EOL] from app . schemas . farm_info import FarmInfo [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [comment] [EOL] @ router . get ( [string] , dependencies = [ Security ( get_farm_access , scopes = [ [string] , [string] ] ) ] , tags = [ [string] ] ) def get_all_farm_info ( db = Depends ( get_db ) , farm_list = Depends ( get_farms_url_or_list ) , use_cached = True , ) : [EOL] data = { } [EOL] for farm in farm_list : [EOL] data [ farm . id ] = { } [EOL] [EOL] if use_cached : [EOL] data [ farm . id ] = farm . info [EOL] else : [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] except ClientError : [EOL] continue [EOL] [EOL] try : [EOL] info = farm_client . info ( ) [EOL] data [ farm . id ] [ [string] ] = info [EOL] [EOL] crud . farm . update_info ( db , farm = farm , info = info ) [EOL] except : [EOL] continue [EOL] [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] [EOL] from app . db . session import SessionLocal [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_db ( ) : [EOL] db = SessionLocal ( ) [EOL] try : [EOL] logging . debug ( [string] ) [EOL] yield db [EOL] finally : [EOL] logging . debug ( [string] ) [EOL] db . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import logging [EOL] import functools [EOL] import app [EOL] import builtins [EOL] import typing [EOL] import sqlalchemy [EOL] import threading [EOL] import urllib [EOL] import requests [EOL] import os [EOL] import logging [EOL] import threading [EOL] from typing import List [EOL] import time [EOL] from urllib . parse import urlparse , urlunparse [EOL] [EOL] import requests [EOL] from fastapi import Query , Depends , HTTPException [EOL] from starlette . status import HTTP_403_FORBIDDEN , HTTP_401_UNAUTHORIZED [EOL] from sqlalchemy . orm import Session [EOL] from functools import partial [EOL] from farmOS import farmOS [EOL] from farmOS . config import ClientConfig [EOL] [EOL] from app import crud [EOL] from app . api . utils . db import get_db [EOL] from app . schemas . farm_token import FarmTokenBase , FarmTokenCreate [EOL] from app . crud . farm_token import create_farm_token , update_farm_token [EOL] from app . schemas . farm import Farm , FarmUpdate [EOL] from app . schemas . token import FarmAccess [EOL] from app . api . utils . security import get_farm_access [EOL] from app . utils import get_settings , send_admin_alert_email [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] settings = get_settings ( ) [EOL] [EOL] unauthorized_exception = HTTPException ( status_code = HTTP_401_UNAUTHORIZED , detail = [string] ) [EOL] [EOL] farm_not_found_exception = HTTPException ( status_code = [number] , detail = [string] ) [EOL] [EOL] [EOL] def get_farm_by_url ( db = Depends ( get_db ) , farm_url = Query ( None ) , farm_access = Depends ( get_farm_access ) ) : [EOL] farm = None [EOL] if farm_url is not None : [EOL] farm = crud . farm . get_by_url ( db , farm_url = farm_url ) [EOL] [EOL] if farm is None : [EOL] raise farm_not_found_exception [EOL] [EOL] if not farm_access . can_access_farm ( farm . id ) : [EOL] raise unauthorized_exception [EOL] [EOL] return farm [EOL] [EOL] [EOL] def get_active_farm_by_url ( db = Depends ( get_db ) , farm_url = Query ( None ) , farm_access = Depends ( get_farm_access ) ) : [EOL] farm = None [EOL] if farm_url is not None : [EOL] farm = crud . farm . get_by_url ( db , farm_url = farm_url , active = True ) [EOL] [EOL] if farm is None : [EOL] raise farm_not_found_exception [EOL] [EOL] if not farm_access . can_access_farm ( farm . id ) : [EOL] raise unauthorized_exception [EOL] [EOL] return farm [EOL] [EOL] [EOL] def get_farms_by_id_list ( db = Depends ( get_db ) , farm_id = Query ( None ) , farm_access = Depends ( get_farm_access ) ) : [EOL] [comment] [EOL] if farm_id is None and farm_access . all_farms : [EOL] farms = crud . farm . get_multi ( db ) [EOL] return farms [EOL] [EOL] [comment] [EOL] if farm_id is None and farm_access . farm_id_list is not None : [EOL] farms = crud . farm . get_by_multi_id ( db , farm_id_list = farm_access . farm_id_list ) [EOL] return farms [EOL] [EOL] [comment] [EOL] if farm_id is not None : [EOL] for id in farm_id : [EOL] if not farm_access . can_access_farm ( id ) : [EOL] raise unauthorized_exception [EOL] [EOL] farms_by_id = crud . farm . get_by_multi_id ( db , farm_id_list = farm_id ) [EOL] [EOL] if len ( farms_by_id ) > [number] : [EOL] return farms_by_id [EOL] else : [EOL] raise farm_not_found_exception [EOL] [EOL] [EOL] def get_active_farms_by_id_list ( db = Depends ( get_db ) , farm_id = Query ( None ) , farm_access = Depends ( get_farm_access ) , ) : [EOL] [comment] [EOL] if farm_id is None and farm_access . all_farms : [EOL] farms = crud . farm . get_multi ( db , active = True ) [EOL] return farms [EOL] [EOL] [comment] [EOL] if farm_id is None and farm_access . farm_id_list is not None : [EOL] farms = crud . farm . get_by_multi_id ( db , farm_id_list = farm_access . farm_id_list , active = True ) [EOL] return farms [EOL] [EOL] [comment] [EOL] if farm_id is not None : [EOL] for id in farm_id : [EOL] if not farm_access . can_access_farm ( id ) : [EOL] raise unauthorized_exception [EOL] [EOL] farms_by_id = crud . farm . get_by_multi_id ( db , farm_id_list = farm_id , active = True ) [EOL] [EOL] if len ( farms_by_id ) > [number] : [EOL] return farms_by_id [EOL] else : [EOL] raise farm_not_found_exception [EOL] [EOL] [EOL] def get_farm_by_id ( farm_id , db = Depends ( get_db ) , farm_access = Depends ( get_farm_access ) ) : [EOL] if not farm_access . can_access_farm ( farm_id ) : [EOL] raise unauthorized_exception [EOL] [EOL] farm = crud . farm . get_by_id ( db , farm_id = farm_id ) [EOL] [EOL] if not farm : [EOL] raise farm_not_found_exception [EOL] [EOL] return farm [EOL] [EOL] [EOL] def get_farms_url_or_list ( farm_by_url = Depends ( get_farm_by_url ) , farms_by_list = Depends ( get_farms_by_id_list ) , ) : [EOL] farms = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if farm_by_url is not None : [EOL] farms . append ( farm_by_url ) [EOL] elif farms_by_list is not None : [EOL] farms . extend ( farms_by_list ) [EOL] [EOL] return farms [EOL] [EOL] [EOL] def get_active_farms_url_or_list ( farm_by_url = Depends ( get_active_farm_by_url ) , farms_by_list = Depends ( get_active_farms_by_id_list ) , ) : [EOL] farms = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if farm_by_url is not None : [EOL] farms . append ( farm_by_url ) [EOL] elif farms_by_list is not None : [EOL] farms . extend ( farms_by_list ) [EOL] [EOL] return farms [EOL] [EOL] [EOL] [comment] [EOL] def _save_token ( token , db = None , farm = None ) : [EOL] logging . debug ( [string] + str ( farm . id ) ) [EOL] token_in = FarmTokenCreate ( farm_id = farm . id , ** token ) [EOL] [EOL] [comment] [EOL] if db is not None and farm is not None : [EOL] [comment] [EOL] if farm . token is not None : [EOL] update_farm_token ( db , farm . token , token_in ) [EOL] else : [EOL] create_farm_token ( db , token_in ) [EOL] [EOL] [comment] [EOL] if [string] in token : [EOL] crud . farm . update_scope ( db , farm = farm , scope = token [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] def handle_ping_farms ( db , settings ) : [EOL] farm_list = crud . farm . get_multi ( db , active = True ) [EOL] [EOL] total_response = [number] [EOL] for farm in farm_list : [EOL] try : [EOL] farm_client = get_farm_client ( db = db , farm = farm ) [EOL] info = farm_client . info ( ) [EOL] crud . farm . update_info ( db , farm = farm , info = info ) [EOL] total_response += [number] [EOL] except Exception as e : [EOL] continue [EOL] [EOL] difference = len ( farm_list ) - total_response [EOL] if difference > [number] and settings . AGGREGATOR_ALERT_PING_FARMS_ERRORS : [EOL] admin_alert_email ( db = db , message = f" [string] { total_response } [string] { len ( farm_list ) } [string] { difference } [string] " ) [EOL] [EOL] [EOL] [comment] [EOL] client_state = { } [EOL] [EOL] [EOL] [comment] [EOL] def get_farm_client ( db , farm ) : [EOL] client_id = settings . AGGREGATOR_OAUTH_CLIENT_ID [EOL] client_secret = settings . AGGREGATOR_OAUTH_CLIENT_SECRET [EOL] [EOL] [comment] [EOL] existing_client = client_state . get ( farm . id , None ) [EOL] if existing_client is not None : [EOL] [comment] [EOL] existing_client . wait ( ) [EOL] [comment] [EOL] db . refresh ( farm ) [EOL] [EOL] if farm . token is None : [EOL] error = [string] [EOL] crud . farm . update_is_authorized ( db , farm_id = farm . id , is_authorized = False , auth_error = error ) [EOL] raise ClientError ( error ) [EOL] token = FarmTokenBase . from_orm ( farm . token ) [EOL] [EOL] if farm . scope is None : [EOL] error = [string] [EOL] crud . farm . update_is_authorized ( db , farm_id = farm . id , is_authorized = False , auth_error = error ) [EOL] raise ClientError ( error ) [EOL] [comment] [EOL] scope = farm . scope [EOL] [EOL] token_updater = partial ( _save_token , db = db , farm = farm ) [EOL] [EOL] [comment] [EOL] if settings . AGGREGATOR_OAUTH_INSECURE_TRANSPORT : [EOL] os . environ [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] refreshing = threading . Event ( ) [EOL] client_state [ farm . id ] = refreshing [EOL] [EOL] try : [EOL] [comment] [EOL] trigger_refresh = False [EOL] [EOL] [comment] [EOL] now = time . time ( ) [EOL] expires_at = token . expires_at [EOL] expires_in = expires_at - now [EOL] [EOL] [comment] [EOL] if expires_in - [number] <= [number] : [EOL] [comment] [EOL] token . expires_at = time . time ( ) [EOL] [comment] [EOL] trigger_refresh = True [EOL] [EOL] client = farmOS ( hostname = build_farm_url ( farm . url ) , client_id = client_id , client_secret = client_secret , scope = scope , token = token . dict ( ) , token_updater = token_updater ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if trigger_refresh : [EOL] client . info ( ) [EOL] [EOL] crud . farm . update_last_accessed ( db , farm_id = farm . id ) [EOL] crud . farm . update_is_authorized ( db , farm_id = farm . id , is_authorized = True ) [EOL] except Exception as e : [EOL] if settings . AGGREGATOR_ALERT_ALL_ERRORS : [EOL] admin_alert_email ( db = db , message = [string] + str ( farm . id ) + [string] + repr ( e ) + str ( e ) ) [EOL] logging . error ( [string] + str ( farm . id ) + [string] + repr ( e ) + str ( e ) ) [EOL] crud . farm . update_is_authorized ( db , farm_id = farm . id , is_authorized = False , auth_error = str ( e ) ) [EOL] raise ClientError ( e ) [EOL] finally : [EOL] [comment] [EOL] [comment] [EOL] refreshing . set ( ) [EOL] [comment] [EOL] client_state . pop ( farm . id , None ) [EOL] [EOL] return client [EOL] [EOL] [EOL] def get_oauth_token ( farm_url , auth_params ) : [EOL] logging . debug ( [string] + farm_url ) [EOL] data = { } [EOL] data [ [string] ] = auth_params . code [EOL] data [ [string] ] = auth_params . state [EOL] data [ [string] ] = auth_params . grant_type [EOL] data [ [string] ] = auth_params . client_id [EOL] data [ [string] ] = farm_url + [string] [EOL] [EOL] if auth_params . client_secret is not None : [EOL] data [ [string] ] = auth_params . client_secret [EOL] [EOL] if auth_params . redirect_uri is not None : [EOL] data [ [string] ] = auth_params . redirect_uri [EOL] [EOL] [comment] [EOL] token_url = build_farm_url ( farm_url ) + [string] [EOL] [EOL] response = requests . post ( token_url , data ) [EOL] [EOL] if response . status_code == [number] : [EOL] response_token = response . json ( ) [EOL] logging . debug ( [string] ) [EOL] [EOL] if [string] not in response_token : [EOL] response_token [ [string] ] = str ( time . time ( ) + int ( response_token [ [string] ] ) ) [EOL] [EOL] new_token = FarmTokenBase ( ** response_token ) [EOL] return new_token [EOL] else : [EOL] logging . error ( [string] ) [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] [EOL] [EOL] def build_farm_url ( farm_url ) : [EOL] [docstring] [EOL] [EOL] valid_schemes = [ [string] ] [EOL] default_scheme = [string] [EOL] [EOL] [comment] [EOL] if settings . AGGREGATOR_OAUTH_INSECURE_TRANSPORT : [EOL] default_scheme = [string] [EOL] valid_schemes . append ( [string] ) [EOL] [EOL] parsed_url = urlparse ( farm_url ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not parsed_url . scheme : [EOL] parsed_url = parsed_url . _replace ( scheme = default_scheme ) [EOL] [EOL] [comment] [EOL] if parsed_url . scheme not in valid_schemes : [EOL] if parsed_url . scheme == [string] : [EOL] raise Exception ( [string] ) [EOL] [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] if not parsed_url . netloc and parsed_url . path : [EOL] parsed_url = parsed_url . _replace ( netloc = parsed_url . path ) [EOL] parsed_url = parsed_url . _replace ( path = [string] ) [EOL] [EOL] [comment] [EOL] if not parsed_url . netloc : [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] if parsed_url . path or parsed_url . params or parsed_url . query : [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] return urlunparse ( parsed_url ) [EOL] [EOL] [EOL] def admin_alert_email ( db , message ) : [EOL] if settings . EMAILS_ENABLED : [EOL] logging . info ( [string] + message ) [EOL] users = crud . user . get_multi ( db ) [EOL] [EOL] for user in users : [EOL] if user . is_superuser : [EOL] send_admin_alert_email ( email_to = user . email , message = message ) [EOL] [EOL] [EOL] class ClientError ( Exception ) : [EOL] def __init__ ( self , message ) : [EOL] self . message = message	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from app import crud [EOL] from app . core . config import settings [EOL] from app . schemas . user import UserCreate [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from app . db import base [EOL] [EOL] def init_db ( db ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] user = crud . user . get_by_email ( db , email = settings . FIRST_SUPERUSER ) [EOL] if not user : [EOL] user_in = UserCreate ( email = settings . FIRST_SUPERUSER , password = settings . FIRST_SUPERUSER_PASSWORD , is_superuser = True , ) [EOL] user = crud . user . create ( db , user_in = user_in ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from app . db . base_class import Base [comment] [EOL] from app . models . user import User [comment] [EOL] from app . models . farm import Farm [EOL] from app . models . farm_token import FarmToken [EOL] from app . models . api_key import ApiKey [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from sqlalchemy . ext . declarative import declarative_base , declared_attr [EOL] [EOL] [EOL] class CustomBase ( object ) : [EOL] [comment] [EOL] @ declared_attr def __tablename__ ( cls ) : [EOL] return cls . __name__ . lower ( ) [EOL] [EOL] [EOL] Base = declarative_base ( cls = CustomBase ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] [EOL] from app . core . config import settings [EOL] [EOL] engine = create_engine ( settings . SQLALCHEMY_DATABASE_URI , pool_size = settings . SQLALCHEMY_POOL_SIZE , max_overflow = settings . SQLALCHEMY_MAX_OVERFLOW , pool_pre_ping = True , echo_pool = True ) [EOL] SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from app . schemas . api_model import APIModel [EOL] [EOL] [EOL] class Token ( APIModel ) : [EOL] access_token = ... [EOL] token_type = ... [EOL] [EOL] [EOL] class TokenData ( APIModel ) : [EOL] user_id = None [EOL] scopes = [ ] [EOL] farm_id = [ ] [EOL] all_farms = False [EOL] [EOL] [EOL] class FarmAccess ( APIModel ) : [EOL] user_id = None [EOL] scopes = [ ] [EOL] farm_id_list = [ ] [EOL] all_farms = False [EOL] [EOL] def can_access_farm ( self , farm_id ) : [EOL] if self . all_farms : [EOL] return True [EOL] else : [EOL] return farm_id in self . farm_id_list [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from app . schemas . api_model import APIModel [EOL] [EOL] [EOL] class Msg ( APIModel ) : [EOL] msg = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from app . schemas . api_model import APIModel [EOL] [EOL] [EOL] [comment] [EOL] class FarmTokenBase ( APIModel ) : [EOL] access_token = None [EOL] expires_in = None [EOL] refresh_token = None [EOL] expires_at = None [EOL] [EOL] [EOL] class FarmTokenCreate ( FarmTokenBase ) : [EOL] farm_id = ... [EOL] pass [EOL] [EOL] [EOL] class FarmToken ( FarmTokenBase ) : [EOL] id = ... [EOL] [EOL] [EOL] class FarmTokenUpdate ( FarmToken ) : [EOL] pass [EOL] [EOL] [EOL] class FarmAuthorizationParams ( APIModel ) : [EOL] grant_type = ... [EOL] code = ... [EOL] state = ... [EOL] client_id = ... [EOL] client_secret = ... [EOL] redirect_uri = ... [EOL] scope = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0
from pydantic import BaseConfig , BaseModel [EOL] [EOL] [comment] [EOL] class APIModel ( BaseModel ) : [EOL] class Config ( BaseConfig ) : [EOL] orm_mode = True [EOL] allow_population_by_field_name = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0
from typing import List , Optional [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] from typing import Optional , List [EOL] from datetime import datetime [EOL] [EOL] from app . schemas . api_model import APIModel [EOL] [EOL] [EOL] [comment] [EOL] class ApiKeyBase ( APIModel ) : [EOL] enabled = False [EOL] name = None [EOL] notes = None [EOL] [EOL] [EOL] class ApiKeyInDB ( ApiKeyBase ) : [EOL] id = ... [EOL] time_created = None [EOL] key = ... [EOL] farm_id = [ ] [EOL] all_farms = False [EOL] scopes = [ ] [EOL] [EOL] [EOL] class ApiKeyCreate ( ApiKeyBase ) : [EOL] [comment] [EOL] [comment] [EOL] farm_id = [ ] [EOL] all_farms = False [EOL] scopes = [ ] [EOL] [EOL] [EOL] class ApiKeyUpdate ( ApiKeyBase ) : [EOL] pass [EOL] [EOL] [EOL] class ApiKey ( ApiKeyInDB ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $builtins.bytes$ 0 0 0 $typing.Optional[typing.List[builtins.int]]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[builtins.int]]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] [comment] [EOL] class FarmInfo ( BaseModel ) : [EOL] name = ... [EOL] url = ... [EOL] api_version = ... [EOL] user = ... [EOL] system_of_measurement = ... [EOL] resources = ... [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import backend [EOL] from sqlalchemy import Boolean , Column , Integer , String , DateTime [EOL] from sqlalchemy . sql import func [EOL] from sqlalchemy . orm import relationship , deferred [EOL] from sqlalchemy . dialects . postgresql import JSONB [EOL] [EOL] from app . db . base_class import Base [EOL] from app . models . farm_token import FarmToken [EOL] [EOL] [EOL] class Farm ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] time_created = Column ( DateTime ( timezone = True ) , server_default = func . now ( ) ) [EOL] time_updated = Column ( DateTime ( timezone = True ) , onupdate = func . now ( ) ) [EOL] last_accessed = Column ( DateTime ( timezone = True ) ) [EOL] farm_name = Column ( String , index = True ) [EOL] url = Column ( String , index = True , unique = True ) [EOL] notes = Column ( String , nullable = True ) [EOL] tags = Column ( String , nullable = True ) [EOL] [EOL] [comment] [EOL] scope = Column ( String , nullable = True ) [EOL] [EOL] [comment] [EOL] active = Column ( Boolean , default = False ) [EOL] [EOL] [comment] [EOL] info = deferred ( Column ( JSONB , nullable = True ) ) [EOL] [EOL] is_authorized = Column ( Boolean , default = False ) [EOL] token = relationship ( [string] , uselist = False , back_populates = [string] , lazy = [string] ) [EOL] auth_error = Column ( String , nullable = True ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm.Farm]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import backend [EOL] from sqlalchemy import Column , Boolean , Integer , String , DateTime , LargeBinary [EOL] from sqlalchemy . sql import func [EOL] from sqlalchemy . dialects . postgresql import ARRAY [EOL] [EOL] from app . db . base_class import Base [EOL] [EOL] [EOL] class ApiKey ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] time_created = Column ( DateTime ( timezone = True ) , server_default = func . now ( ) ) [EOL] key = Column ( LargeBinary ) [EOL] enabled = Column ( Boolean , default = False ) [EOL] name = Column ( String ) [EOL] notes = Column ( String ) [EOL] farm_id = Column ( ARRAY ( Integer ) ) [EOL] all_farms = Column ( Boolean , default = False ) [EOL] scopes = Column ( ARRAY ( String ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.api_key.ApiKey]$ 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import backend [EOL] from sqlalchemy import Boolean , Column , ForeignKey , Integer , String [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from app . db . base_class import Base [EOL] [EOL] [EOL] class FarmToken ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] access_token = Column ( String ) [EOL] expires_in = Column ( String ) [EOL] refresh_token = Column ( String ) [EOL] expires_at = Column ( String ) [EOL] [EOL] farm_id = Column ( Integer , ForeignKey ( [string] ) , unique = True , index = True ) [EOL] farm = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.app.models.farm_token.FarmToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from passlib . context import CryptContext [EOL] [EOL] pwd_context = CryptContext ( schemes = [ [string] ] , deprecated = [string] ) [EOL] [EOL] [EOL] def verify_password ( plain_password , hashed_password ) : [EOL] return pwd_context . verify ( plain_password , hashed_password ) [EOL] [EOL] [EOL] def get_password_hash ( password ) : [EOL] return pwd_context . hash ( password ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] from typing import List [EOL] from datetime import datetime , timedelta [EOL] [EOL] import jwt [EOL] [EOL] from app . core . config import settings [EOL] [EOL] ALGORITHM = [string] [EOL] [EOL] [EOL] def create_access_token ( * , data , expires_delta = None ) : [EOL] to_encode = data . copy ( ) [EOL] if expires_delta : [EOL] expire = datetime . utcnow ( ) + expires_delta [EOL] else : [EOL] expire = datetime . utcnow ( ) + timedelta ( minutes = [number] ) [EOL] to_encode . update ( { [string] : expire } ) [EOL] encoded_jwt = jwt . encode ( to_encode , settings . SECRET_KEY , algorithm = ALGORITHM ) [EOL] return encoded_jwt [EOL] [EOL] [EOL] def create_api_key ( farm_id , scopes , all_farms = False ) : [EOL] now = datetime . utcnow ( ) [EOL] encoded_jwt = jwt . encode ( { [string] : now . timestamp ( ) , [string] : farm_id , [string] : all_farms , [string] : scopes , } , settings . SECRET_KEY , algorithm = ALGORITHM , ) [EOL] return encoded_jwt [EOL] [EOL] [EOL] def create_farm_api_token ( farm_id , scopes ) : [EOL] delta = timedelta ( hours = settings . EMAIL_RESET_TOKEN_EXPIRE_HOURS ) [EOL] now = datetime . utcnow ( ) [EOL] expires = now + delta [EOL] encoded_jwt = jwt . encode ( { [string] : expires . timestamp ( ) , [string] : now . timestamp ( ) , [string] : farm_id , [string] : scopes , } , settings . SECRET_KEY , algorithm = ALGORITHM , ) [EOL] return encoded_jwt [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0