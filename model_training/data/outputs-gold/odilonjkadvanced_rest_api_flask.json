from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] DEBUG = True [EOL] SQLALCHEMY_DATABASE_URI = os . environ . get ( [string] , [string] , ) [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] PROPAGATE_EXCEPTIONS = True [EOL] APP_SECRET_KEY = os . environ [ [string] ] [EOL] JWT_SECRET_KEY = os . environ [ [string] ] [EOL] JWT_BLACKLIST_ENABLED = True [EOL] JWT_BLACKLIST_TOKEN_CHECKS = [ [string] , [string] , ] [EOL] UPLOADED_IMAGES_DEST = os . path . join ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from flask_oauthlib . client import OAuth [EOL] from flask import g [EOL] [EOL] oauth = OAuth ( ) [EOL] [EOL] github = oauth . remote_app ( [string] , consumer_key = os . getenv ( [string] ) , consumer_secret = os . getenv ( [string] ) , request_token_params = { [string] : [string] } , base_url = [string] , request_token_url = None , access_token_method = [string] , access_token_url = [string] , authorize_url = [string] ) [EOL] [EOL] [EOL] @ github . tokengetter def get_github_token ( ) : [EOL] if [string] in g : [EOL] return g . access_token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] BLACKLIST = set ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] db = SQLAlchemy ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_marshmallow import Marshmallow [EOL] [EOL] ma = Marshmallow ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from app import app [EOL] from database import db [EOL] from ma import ma [EOL] [EOL] db . init_app ( app ) [EOL] ma . init_app ( app ) [EOL] [EOL] [EOL] @ app . before_first_request def create_tables ( ) : [EOL] db . create_all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any [EOL] import typing [EOL] import models [EOL] import flask [EOL] import os [EOL] [EOL] from dotenv import load_dotenv [EOL] from flask import Flask , jsonify [EOL] from flask_jwt_extended import JWTManager [EOL] from flask_restful import Api [EOL] from flask_uploads import configure_uploads , patch_request_class [EOL] from flask_migrate import Migrate [EOL] [EOL] load_dotenv ( [string] , verbose = True ) [EOL] [EOL] from blacklist import BLACKLIST [EOL] from database import db [EOL] from libs . image_helper import IMAGE_SET [EOL] from libs . strings import gettext [EOL] from ma import ma [EOL] from oa import oauth [EOL] from marshmallow import ValidationError [EOL] from resources . confirmation import Confirmation , ConfirmationByUser [EOL] from resources . image import ImageUpload , Image , AvatarUpload , Avatar [EOL] from resources . item import Item , ItemList [EOL] from resources . github_login import GithubLogin , GithubAuthorized [EOL] from resources . store import Store , StoreList [EOL] from resources . user import ( SetPassword , User , UserRegister , UserLogin , UserLogout , UserModel , TokenRefresh , ) [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . config . from_object ( [string] ) [EOL] app . config . from_envvar ( [string] ) [EOL] app . secret_key = [string] [EOL] patch_request_class ( app , [number] * [number] * [number] ) [comment] [EOL] configure_uploads ( app , IMAGE_SET ) [EOL] db . init_app ( app ) [EOL] [EOL] api = Api ( app ) [EOL] [EOL] jwt = JWTManager ( app ) [EOL] migrate = Migrate ( app , db ) [EOL] [EOL] [EOL] @ app . before_first_request def create_tables ( ) : [EOL] db . create_all ( ) [EOL] [EOL] [EOL] @ jwt . user_claims_loader def add_claims_to_jwt ( identity ) : [EOL] user = UserModel . find_by_id ( identity ) [EOL] return { [string] : user . is_admin } [EOL] [EOL] [EOL] @ jwt . token_in_blacklist_loader def check_if_token_in_blacklist ( decrypted_token ) : [EOL] return decrypted_token [ [string] ] in BLACKLIST [EOL] [EOL] [EOL] @ jwt . expired_token_loader def expired_token_callback ( ) : [EOL] return jsonify ( { [string] : gettext ( [string] ) , [string] : [string] } ) , [number] [EOL] [EOL] [EOL] @ jwt . invalid_token_loader def invalid_token_callback ( err ) : [EOL] return jsonify ( { [string] : gettext ( [string] ) , [string] : [string] } ) , [number] [EOL] [EOL] [EOL] @ jwt . unauthorized_loader def missing_token_callback ( err ) : [EOL] return jsonify ( { [string] : gettext ( [string] ) , [string] : [string] } ) , [number] [EOL] [EOL] [EOL] @ jwt . needs_fresh_token_loader def needs_fresh_token_callback ( ) : [EOL] return jsonify ( { [string] : gettext ( [string] ) , [string] : [string] } ) , [number] [EOL] [EOL] [EOL] @ jwt . revoked_token_loader def revoked_token_callback ( ) : [EOL] return jsonify ( { [string] : gettext ( [string] ) , [string] : [string] } ) , [number] [EOL] [EOL] [EOL] @ app . errorhandler ( ValidationError ) def handle_marshmallow_validation ( err ) : [EOL] return jsonify ( err . messages ) , [number] [EOL] [EOL] [EOL] api . add_resource ( AvatarUpload , [string] ) [EOL] api . add_resource ( Avatar , [string] ) [EOL] api . add_resource ( Confirmation , [string] ) [EOL] api . add_resource ( ConfirmationByUser , [string] ) [EOL] api . add_resource ( GithubLogin , [string] ) [EOL] api . add_resource ( GithubAuthorized , [string] ) [EOL] api . add_resource ( Image , [string] ) [EOL] api . add_resource ( ImageUpload , [string] ) [EOL] api . add_resource ( Item , [string] ) [EOL] api . add_resource ( ItemList , [string] ) [EOL] api . add_resource ( Store , [string] ) [EOL] api . add_resource ( StoreList , [string] ) [EOL] api . add_resource ( TokenRefresh , [string] ) [EOL] api . add_resource ( UserRegister , [string] ) [EOL] api . add_resource ( User , [string] ) [EOL] api . add_resource ( UserLogin , [string] ) [EOL] api . add_resource ( UserLogout , [string] ) [EOL] api . add_resource ( SetPassword , [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] from database import db [EOL] db . init_app ( app ) [EOL] ma . init_app ( app ) [EOL] oauth . init_app ( app ) [EOL] app . run ( port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import models [EOL] from flask import g , request [EOL] from flask_restful import Resource [EOL] from flask_jwt_extended import create_access_token , create_refresh_token [EOL] from oa import github [EOL] [EOL] from models . user import UserModel [EOL] from models . confirmation import ConfirmationModel [EOL] from resources . user import UserLogin [EOL] [EOL] [EOL] class GithubLogin ( Resource ) : [EOL] @ classmethod def get ( cls ) : [EOL] return github . authorize ( callback = [string] ) [EOL] [EOL] [EOL] class GithubAuthorized ( Resource ) : [EOL] @ classmethod def get ( cls ) : [EOL] resp = github . authorized_response ( ) [EOL] [EOL] if resp is None or resp . get ( [string] ) is None : [EOL] return { [string] : request . args [ [string] ] , [string] : request . args [ [string] ] } , [number] [EOL] [EOL] g . access_token = resp [ [string] ] [EOL] github_user = github . get ( [string] ) [EOL] github_username = github_user . data [ [string] ] [EOL] [EOL] user = UserModel . find_by_username ( github_username ) [EOL] if not user : [EOL] user = UserModel ( username = github_username , password = None ) [EOL] user . save_to_db ( ) [EOL] confirmation = ConfirmationModel ( user_id = user . id ) [EOL] confirmation . confirmed = True [EOL] confirmation . save_to_db ( ) [EOL] [EOL] access_token = create_access_token ( identity = user . id , fresh = True ) [EOL] refresh_token = create_refresh_token ( user . id ) [EOL] [EOL] return { [string] : access_token , [string] : refresh_token } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $models.user.UserModel$ 0 0 $models.user.UserModel$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import models [EOL] import builtins [EOL] import typing [EOL] import schemas [EOL] from flask_jwt_extended import ( jwt_required , get_jwt_identity , jwt_optional , fresh_jwt_required , ) [EOL] from flask import request [EOL] from flask_restful import Resource , reqparse [EOL] from marshmallow import ValidationError [EOL] [EOL] from libs . strings import gettext [EOL] from models . item import ItemModel [EOL] from models . user import UserModel [EOL] from schemas . item import ItemSchema [EOL] [EOL] [EOL] item_schema = ItemSchema ( ) [EOL] item_list_schema = ItemSchema ( many = True ) [EOL] [EOL] [EOL] class Item ( Resource ) : [EOL] @ classmethod @ jwt_required def get ( cls , name ) : [EOL] item = ItemModel . find_by_name ( name ) [EOL] if item : [EOL] return item_schema . dump ( item ) , [number] [EOL] return { [string] : gettext ( [string] ) . format ( item . name ) } , [number] [EOL] [EOL] @ classmethod @ fresh_jwt_required def post ( cls , name ) : [EOL] user = UserModel . find_by_id ( get_jwt_identity ( ) ) [EOL] print ( gettext ( [string] ) . format ( user . username , name ) ) [EOL] if ItemModel . find_by_name ( name ) is not None : [EOL] return { [string] : gettext ( [string] ) . format ( name ) } , [number] [EOL] [EOL] item_json = request . get_json ( ) [EOL] item_json [ [string] ] = name [EOL] [EOL] item = item_schema . load ( item_json ) [EOL] [EOL] try : [EOL] item . save_to_db ( ) [EOL] except : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] return item_schema . dump ( item ) , [number] [EOL] [EOL] @ classmethod @ fresh_jwt_required def delete ( cls , name ) : [EOL] item = ItemModel . find_by_name ( name ) [EOL] if item : [EOL] item . delete_from_db ( ) [EOL] return { [string] : gettext ( [string] ) . format ( name ) } [EOL] return { [string] : gettext ( [string] ) . format ( name ) } , [number] [EOL] [EOL] @ classmethod @ fresh_jwt_required def put ( self , name ) : [EOL] item_json = request . get_json ( ) [EOL] item_json [ [string] ] = name [EOL] [EOL] update_item = item_schema . load ( item_json ) [EOL] [EOL] item = ItemModel . find_by_name ( name ) [EOL] if item is None : [EOL] item = ItemModel ( None , name , ** update_item ) [EOL] else : [EOL] item . price = update_item . price [EOL] item . store_id = update_item . store_id [EOL] item . save_to_db ( ) [EOL] return item_schema . dump ( item ) [EOL] [EOL] [EOL] class ItemList ( Resource ) : [EOL] @ classmethod @ jwt_optional def get ( self ) : [EOL] items = ItemModel . find_all ( ) [EOL] if get_jwt_identity ( ) : [EOL] return { [string] : item_list_schema . dump ( items ) } , [number] [EOL] return { [string] : [ item . name for item in items ] , [string] : gettext ( [string] ) } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.item.ItemSchema$ 0 0 0 0 0 $schemas.item.ItemSchema$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.item.ItemSchema$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import models [EOL] import builtins [EOL] import typing [EOL] import schemas [EOL] import traceback [EOL] from time import time [EOL] [EOL] from flask import make_response , render_template [EOL] from flask_restful import Resource [EOL] [EOL] from libs . mailgun import MailGunException [EOL] from libs . strings import gettext [EOL] from models . confirmation import ConfirmationModel [EOL] from models . user import UserModel [EOL] from schemas . confirmation import ConfirmationSchema [EOL] [EOL] [EOL] confirmation_schema = ConfirmationSchema ( ) [EOL] [EOL] [EOL] class Confirmation ( Resource ) : [EOL] @ classmethod def get ( cls , confirmation_id ) : [EOL] confirmation = ConfirmationModel . find_by_id ( confirmation_id ) [EOL] if not confirmation : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] if confirmation . expired : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] if confirmation . confirmed : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] confirmation . confirmed = True [EOL] confirmation . save_to_db ( ) [EOL] [EOL] headers = { [string] : [string] } [EOL] return make_response ( render_template ( [string] , email = confirmation . user . email ) , [number] , headers ) [EOL] [EOL] [EOL] class ConfirmationByUser ( Resource ) : [EOL] @ classmethod def get ( cls , user_id ) : [EOL] user = UserModel . find_by_id ( user_id ) [EOL] if not user : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] return { [string] : int ( time ( ) ) , [string] : [ confirmation_schema . dump ( confirmation ) for confirmation in user . confirmation . order_by ( ConfirmationModel . expire_at ) ] } , [number] [EOL] [EOL] @ classmethod def post ( cls , user_id ) : [EOL] user = UserModel . find_by_id ( user_id ) [EOL] if not user : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] try : [EOL] confirmation = user . most_recent_confirmation [EOL] if confirmation : [EOL] if confirmation . confirmed : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] confirmation . force_to_expire ( ) [EOL] [EOL] new_confirmation = ConfirmationModel ( user_id ) [EOL] new_confirmation . save_to_db ( ) [EOL] user . send_confirmation_email ( ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] except MailGunException as e : [EOL] return { [string] : str ( e ) } , [number] [EOL] except : [EOL] traceback . print_exc ( ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 $models.user.UserModel$ 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 $builtins.int$ 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import models [EOL] import schemas [EOL] import typing [EOL] import builtins [EOL] from flask import request [EOL] from flask_jwt_extended import jwt_required , get_jwt_claims , fresh_jwt_required [EOL] from flask_restful import Resource , reqparse [EOL] [EOL] from models . store import StoreModel [EOL] from schemas . store import StoreSchema [EOL] [EOL] [EOL] store_schema = StoreSchema ( ) [EOL] store_list_schema = StoreSchema ( many = True ) [EOL] [EOL] [EOL] class Store ( Resource ) : [EOL] @ classmethod @ jwt_required def get ( cls , name ) : [EOL] store = StoreModel . find_by_name ( name ) [EOL] if store : [EOL] return store_schema . dump ( store ) , [number] [EOL] return { [string] : STORE_NOT_FOUND . format ( name ) } , [number] [EOL] [EOL] @ classmethod @ fresh_jwt_required def post ( cls , name ) : [EOL] claims = get_jwt_claims ( ) [EOL] if not claims [ [string] ] : [EOL] return { [string] : ONLY_ADMIN } [EOL] if StoreModel . find_by_name ( name ) is not None : [EOL] return { [string] : STORE_ALREADY_EXISTS . format ( name ) } , [number] [EOL] [EOL] new_store = StoreModel ( name = name ) [EOL] [EOL] try : [EOL] new_store . save_to_db ( ) [EOL] except : [EOL] return { [string] : ERROR_POST_STORE } , [number] [EOL] [EOL] return store_schema . dump ( new_store ) , [number] [EOL] [EOL] @ classmethod @ fresh_jwt_required def delete ( cls , name ) : [EOL] claims = get_jwt_claims ( ) [EOL] if not claims [ [string] ] : [EOL] return { [string] : ONLY_ADMIN } [EOL] store = StoreModel . find_by_name ( name ) [EOL] if store : [EOL] store . delete_from_db ( ) [EOL] return { [string] : DELETED . format ( name ) } [EOL] return { [string] : STORE_NOT_FOUND . format ( name ) } , [number] [EOL] [EOL] [EOL] class StoreList ( Resource ) : [EOL] @ classmethod @ jwt_required def get ( cls ) : [EOL] return { [string] : store_list_schema . dump ( StoreModel . find_all ( ) ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $models.store.StoreModel$ 0 0 0 0 0 0 0 0 0 $models.store.StoreModel$ 0 0 $models.store.StoreModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import models [EOL] import builtins [EOL] import typing [EOL] import schemas [EOL] import sqlite3 [EOL] import traceback [EOL] [EOL] from flask import request [EOL] from flask_restful import Resource , inputs [EOL] from werkzeug . security import safe_str_cmp [EOL] from marshmallow import ValidationError [EOL] from flask_jwt_extended import ( create_access_token , create_refresh_token , get_jwt_identity , jwt_refresh_token_required , get_raw_jwt , jwt_required , fresh_jwt_required ) [EOL] [EOL] from blacklist import BLACKLIST [EOL] from libs . mailgun import MailGunException [EOL] from libs . strings import gettext [EOL] from models . confirmation import ConfirmationModel [EOL] from models . user import UserModel [EOL] from schemas . user import UserSchema [EOL] [EOL] [EOL] user_schema = UserSchema ( ) [EOL] [EOL] [EOL] class UserRegister ( Resource ) : [EOL] @ classmethod def post ( cls ) : [EOL] user = user_schema . load ( request . get_json ( ) ) [EOL] [EOL] if UserModel . find_by_username ( user . username ) : [EOL] return { [string] : gettext ( [string] ) . format ( user . username ) } , [number] [EOL] [EOL] if UserModel . find_by_email ( user . email ) : [EOL] return { [string] : gettext ( [string] ) . format ( user . username ) } , [number] [EOL] [EOL] try : [EOL] user . save_to_db ( ) [EOL] confirmation = ConfirmationModel ( user . id ) [EOL] confirmation . save_to_db ( ) [EOL] user . send_confirmation_email ( ) [EOL] return { [string] : gettext ( [string] ) . format ( user . username ) } , [number] [EOL] except MailGunException as e : [EOL] user . delete_from_db ( ) [EOL] return { [string] : str ( e ) } , [number] [EOL] except : [EOL] traceback . print_exc ( ) [EOL] user . delete_from_db ( ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] [EOL] class User ( Resource ) : [EOL] @ classmethod def get ( cls , user_id ) : [EOL] user = UserModel . find_by_id ( user_id ) [EOL] if not user : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] return user_schema . dump ( user ) , [number] [EOL] [EOL] @ classmethod def delete ( cls , user_id ) : [EOL] user = UserModel . find_by_id ( user_id ) [EOL] if not user : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] user . delete_from_db ( ) [EOL] return { [string] : gettext ( [string] ) . format ( user . username ) } , [number] [EOL] [EOL] [EOL] class UserLogin ( Resource ) : [EOL] @ classmethod def post ( cls ) : [EOL] login_user = user_schema . load ( request . get_json ( ) , partial = ( [string] , ) ) [EOL] [EOL] user = UserModel . find_by_username ( login_user . username ) [EOL] if not ( user or user . password or safe_str_cmp ( user . password , login_user . password ) ) : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] confirmation = user . most_recent_confirmation [EOL] if not confirmation or not confirmation . confirmed : [EOL] return { [string] : gettext ( [string] ) . format ( user . username ) } , [number] [EOL] [EOL] access_token = create_access_token ( identity = user . id , fresh = True ) [EOL] refresh_token = create_refresh_token ( user . id ) [EOL] return { [string] : access_token , [string] : refresh_token } , [number] [EOL] [EOL] [EOL] class UserLogout ( Resource ) : [EOL] @ classmethod @ jwt_required def post ( cls ) : [EOL] jti = get_raw_jwt ( ) [ [string] ] [EOL] BLACKLIST . add ( jti ) [EOL] return { [string] : gettext ( [string] ) } [EOL] [EOL] [EOL] class TokenRefresh ( Resource ) : [EOL] @ classmethod @ jwt_refresh_token_required def post ( cls ) : [EOL] current_user = get_jwt_identity ( ) [EOL] new_token = create_access_token ( identity = current_user , fresh = False ) [EOL] return { [string] : new_token } , [number] [EOL] [EOL] [EOL] class SetPassword ( Resource ) : [EOL] @ classmethod @ fresh_jwt_required def post ( cls ) : [EOL] user_json = request . get_json ( ) [EOL] user_data = user_schema . load ( user_json ) [EOL] user = UserModel . find_by_username ( user_data . username ) [EOL] [EOL] if not user : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] user . password = user_data . password [EOL] user . save_to_db ( ) [EOL] [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.user.UserSchema$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $schemas.user.UserSchema$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 $typing.Any$ 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.user.UserSchema$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $schemas.user.UserSchema$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $models.user.UserModel$ 0 $models.user.UserModel$ 0 0 0 0 0 $models.user.UserModel$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 $models.user.UserModel$ 0 0 0 0 0 $models.confirmation.ConfirmationModel$ 0 0 $models.confirmation.ConfirmationModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $schemas.user.UserSchema$ 0 0 0 $typing.Any$ 0 0 $models.user.UserModel$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserModel$ 0 0 0 $typing.Any$ 0 0 0 $models.user.UserModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import builtins [EOL] import schemas [EOL] import os [EOL] import traceback [EOL] [EOL] from flask_restful import Resource [EOL] from flask_uploads import UploadNotAllowed [EOL] from flask import request , send_file [EOL] from flask_jwt_extended import jwt_required , get_jwt_identity [EOL] [EOL] from libs import image_helper [EOL] from libs . strings import gettext [EOL] from schemas . image import ImageSchema [EOL] [EOL] image_schema = ImageSchema ( ) [EOL] AVATAR_FOLDER = [string] [EOL] [EOL] [EOL] class ImageUpload ( Resource ) : [EOL] @ classmethod @ jwt_required def post ( cls ) : [EOL] [docstring] [EOL] data = image_schema . load ( request . files ) [comment] [EOL] image = data [ [string] ] [EOL] user_id = get_jwt_identity ( ) [EOL] folder = f" [string] { user_id }" [EOL] try : [EOL] image_path = image_helper . save_image ( image , folder ) [EOL] basename = image_helper . get_basename ( image_path ) [EOL] return { [string] : gettext ( [string] ) . format ( basename ) } , [number] [EOL] except UploadNotAllowed : [EOL] extension = image_helper . get_extension ( image ) [EOL] return { [string] : gettext ( [string] ) . format ( extension ) } , [number] [EOL] [EOL] [EOL] class Image ( Resource ) : [EOL] @ classmethod @ jwt_required def get ( cls , filename ) : [EOL] [docstring] [EOL] folder = f" [string] { get_jwt_identity ( ) }" [EOL] if not image_helper . is_filename_safe ( filename ) : [EOL] return { [string] : gettext ( [string] ) . format ( filename ) } , [number] [EOL] [EOL] try : [EOL] return send_file ( image_helper . get_path ( filename , folder ) ) [EOL] except FileNotFoundError : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] @ classmethod @ jwt_required def delete ( cls , filename ) : [EOL] [docstring] [EOL] folder = f" [string] { get_jwt_identity ( ) }" [EOL] if not image_helper . is_filename_safe ( filename ) : [EOL] return { [string] : gettext ( [string] ) . format ( filename ) } , [number] [EOL] [EOL] try : [EOL] os . remove ( image_helper . get_path ( filename , folder ) ) [EOL] return { [string] : gettext ( [string] ) . format ( filename ) } , [number] [EOL] except FileNotFoundError : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] except : [EOL] traceback . print_exc ( ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] [EOL] class AvatarUpload ( Resource ) : [EOL] @ classmethod @ jwt_required def put ( cls ) : [EOL] [docstring] [EOL] data = image_schema . load ( request . files ) [EOL] filename = f" [string] { get_jwt_identity ( ) }" [EOL] folder = AVATAR_FOLDER [EOL] avatar_path = image_helper . find_image_any_format ( filename , folder ) [EOL] if avatar_path : [EOL] try : [EOL] os . remove ( avatar_path ) [EOL] except : [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] [EOL] try : [EOL] image = data [ [string] ] [EOL] ext = image_helper . get_extension ( image . filename ) [EOL] avatar_name = filename + ext [EOL] avatar_path = image_helper . save_image ( image , folder , avatar_name ) [EOL] basename = image_helper . get_basename ( avatar_path ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL] except UploadNotAllowed : [EOL] extension = image_helper . get_extension ( image ) [EOL] return { [string] : gettext ( [string] ) . format ( extension ) } , [number] [EOL] [EOL] [EOL] class Avatar ( Resource ) : [EOL] @ classmethod @ jwt_required def get ( cls , user_id ) : [EOL] folder = AVATAR_FOLDER [EOL] filename = f" [string] { get_jwt_identity ( ) }" [EOL] avatar_path = image_helper . find_image_any_format ( filename , folder ) [EOL] if avatar_path : [EOL] return send_file ( avatar_path ) [EOL] return { [string] : gettext ( [string] ) } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.image.ImageSchema$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $schemas.image.ImageSchema$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $schemas.image.ImageSchema$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [comment] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( length = [number] ) , nullable = True ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( length = [number] ) , nullable = True ) [EOL] [comment] [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [comment] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( length = [number] ) , nullable = False ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( length = [number] ) , nullable = False ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import models [EOL] import schemas [EOL] from ma import ma [EOL] from models . store import StoreModel [EOL] from models . item import ItemModel [EOL] from schemas . item import ItemSchema [EOL] [EOL] [EOL] class StoreSchema ( ma . ModelSchema ) : [EOL] items = ma . Nested ( ItemSchema , many = True ) [EOL] [EOL] class Meta : [EOL] model = StoreModel [EOL] dump_only = ( [string] , ) [EOL] include_fk = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[schemas.store.StoreSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.store.StoreModel]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import schemas [EOL] from ma import ma [EOL] from models . item import ItemModel [EOL] from models . store import StoreModel [EOL] [EOL] [EOL] class ItemSchema ( ma . ModelSchema ) : [EOL] class Meta : [EOL] model = ItemModel [EOL] load_only = ( [string] , ) [EOL] dump_only = ( [string] , ) [EOL] include_fk = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[schemas.item.ItemSchema.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import models [EOL] from ma import ma [EOL] from models . confirmation import ConfirmationModel [EOL] [EOL] [EOL] class ConfirmationSchema ( ma . ModelSchema ) : [EOL] class Meta : [EOL] model = ConfirmationModel [EOL] load_only = ( [string] , ) [EOL] dump_only = ( [string] , [string] , [string] ) [EOL] include_fk = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.confirmation.ConfirmationModel]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import werkzeug [EOL] import schemas [EOL] from marshmallow import Schema , fields [EOL] from werkzeug . datastructures import FileStorage [EOL] [EOL] from libs . strings import gettext [EOL] [EOL] [EOL] class FileStorageField ( fields . Field ) : [EOL] default_error_messages = { [string] : gettext ( [string] ) } [EOL] [EOL] def _deserialize ( self , value , attr , data ) : [EOL] if value is None : [EOL] return None [EOL] [EOL] if not isinstance ( value , FileStorage ) : [EOL] self . fail ( [string] ) [comment] [EOL] [EOL] return value [EOL] [EOL] [EOL] class ImageSchema ( Schema ) : [EOL] image = FileStorageField ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $schemas.image.FileStorageField$ 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import models [EOL] import typing [EOL] from ma import ma [EOL] from marshmallow import pre_dump [EOL] from models . user import UserModel [EOL] [EOL] [EOL] class UserSchema ( ma . ModelSchema ) : [EOL] class Meta : [EOL] model = UserModel [EOL] load_only = ( [string] , [string] ) [EOL] dump_only = ( [string] , [string] ) [EOL] [EOL] @ pre_dump def _pre_dump ( self , user ) : [EOL] user . confirmation = [ user . most_recent_confirmation ] [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import models [EOL] import builtins [EOL] from typing import List [EOL] from database import db [EOL] [EOL] [EOL] class StoreModel ( db . Model ) : [EOL] __tablename__ = [string] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] name = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] items = db . relationship ( [string] , lazy = [string] ) [EOL] [EOL] @ classmethod def find_by_name ( cls , name ) : [EOL] return cls . query . filter_by ( name = name ) . first ( ) [EOL] [EOL] def save_to_db ( self ) : [EOL] db . session . add ( self ) [EOL] db . session . commit ( ) [EOL] [EOL] def delete_from_db ( self ) : [EOL] db . session . delete ( self ) [EOL] db . session . commit ( ) [EOL] [EOL] @ classmethod def find_all ( cls ) : [EOL] return cls . query . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[models.store.StoreModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.store.StoreModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.store.StoreModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'StoreModel'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['StoreModel']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import requests [EOL] import models [EOL] import builtins [EOL] from typing import Dict , Union [EOL] from database import db [EOL] from flask import request [EOL] from requests import Response [EOL] from flask import request , url_for [EOL] from libs . mailgun import Mailgun [EOL] from models . confirmation import ConfirmationModel [EOL] [EOL] [EOL] class UserModel ( db . Model ) : [EOL] __tablename__ = [string] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] username = db . Column ( db . String ( [number] ) , nullable = False , unique = True ) [EOL] password = db . Column ( db . String ( [number] ) ) [EOL] is_admin = db . Column ( db . Boolean , nullable = False , default = False ) [EOL] email = db . Column ( db . String ( [number] ) , unique = True ) [EOL] [EOL] confirmation = db . relationship ( [string] , lazy = [string] , cascade = [string] ) [EOL] [EOL] @ property def most_recent_confirmation ( self ) : [EOL] return self . confirmation . order_by ( db . desc ( ConfirmationModel . expire_at ) ) . first ( ) [EOL] [EOL] def save_to_db ( self ) : [EOL] db . session . add ( self ) [EOL] db . session . commit ( ) [EOL] [EOL] def delete_from_db ( self ) : [EOL] db . session . delete ( self ) [EOL] db . session . commit ( ) [EOL] [EOL] def send_confirmation_email ( self ) : [EOL] link = request . url_root [ [number] : - [number] ] + url_for ( [string] , confirmation_id = self . most_recent_confirmation . id ) [EOL] subject = [string] [EOL] text = f' [string] { link }' [EOL] return Mailgun . send_confirmation_email ( emails = [ self . email ] , subject = subject , text = text ) [EOL] [EOL] @ classmethod def find_by_username ( cls , username ) : [EOL] return cls . query . filter_by ( username = username ) . first ( ) [EOL] [EOL] @ classmethod def find_by_id ( cls , _id ) : [EOL] return cls . query . filter_by ( id = _id ) . first ( ) [EOL] [EOL] @ classmethod def find_by_email ( cls , email ) : [EOL] return cls . query . filter_by ( email = email ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.user.UserModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'ConfirmationModel'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $'UserModel'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $'UserModel'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $'UserModel'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import models [EOL] import builtins [EOL] from database import db [EOL] from uuid import uuid4 [EOL] from time import time [EOL] [EOL] CONFIRMATION_EXPIRATION_DELTA = [number] [comment] [EOL] [EOL] [EOL] class ConfirmationModel ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . String ( [number] ) , primary_key = True ) [EOL] expire_at = db . Column ( db . Integer , nullable = False ) [EOL] confirmed = db . Column ( db . Boolean , nullable = False ) [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] user = db . relationship ( [string] ) [EOL] [EOL] def __init__ ( self , user_id , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . user_id = user_id [EOL] self . id = uuid4 ( ) . hex [EOL] self . expire_at = int ( time ( ) ) + CONFIRMATION_EXPIRATION_DELTA [EOL] self . confirmed = False [EOL] [EOL] @ classmethod def find_by_id ( cls , _id ) : [EOL] return cls . query . filter_by ( id = _id ) . first ( ) [EOL] [EOL] @ property def expired ( self ) : [EOL] return time ( ) > self . expire_at [EOL] [EOL] def force_to_expire ( self ) : [EOL] if not self . expired ( ) : [EOL] self . expire_at = int ( time ( ) ) [EOL] self . save_to_db ( ) [EOL] [EOL] def save_to_db ( self ) : [EOL] db . session . add ( self ) [EOL] db . session . commit ( ) [EOL] [EOL] def delete_from_db ( self ) : [EOL] db . session . delete ( self ) [EOL] db . session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import requests [EOL] import libs [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] from typing import List [EOL] from requests import Response , post [EOL] from flask import request , url_for [EOL] [EOL] from libs . strings import gettext [EOL] [EOL] [EOL] class MailGunException ( Exception ) : [EOL] def __init__ ( self , message ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class Mailgun : [EOL] MAILGUN_DOMAIN = os . environ . get ( [string] ) [EOL] MAILGUN_API_KEY = os . environ . get ( [string] ) [EOL] FROM_TITLE = [string] [EOL] FROM_EMAIL = [string] [EOL] [EOL] @ classmethod def send_confirmation_email ( cls , emails , subject , text ) : [EOL] if cls . MAILGUN_API_KEY is None : [EOL] raise MailGunException ( gettext ( [string] ) ) [EOL] if cls . MAILGUN_DOMAIN is None : [EOL] raise MailGunException ( gettext ( [string] ) ) [EOL] response = post ( f" [string] { cls . MAILGUN_DOMAIN } [string] " , auth = ( [string] , cls . MAILGUN_API_KEY ) , data = { [string] : f"{ cls . FROM_TITLE } [string] { cls . FROM_EMAIL } [string] " , [string] : emails , [string] : subject , [string] : text } ) [EOL] if response . status_code != [number] : [EOL] raise MailGunException ( gettext ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] import json [EOL] [EOL] default_locale = [string] [EOL] cached_strings = { } [EOL] [EOL] [EOL] def refresh ( ) : [EOL] [docstring] [EOL] global cached_strings [EOL] with open ( f" [string] { default_locale } [string] " ) as file : [EOL] cached_strings = json . load ( file ) [EOL] [EOL] [EOL] def gettext ( name ) : [EOL] [docstring] [EOL] return cached_strings [ name ] [EOL] [EOL] [EOL] refresh ( ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0