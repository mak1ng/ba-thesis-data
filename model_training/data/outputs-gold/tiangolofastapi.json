from typing import Any , Optional , Dict [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import inspect [EOL] import os [EOL] [EOL] import requests [EOL] [EOL] room_id = [string] [comment] [EOL] [comment] [EOL] [EOL] gitter_token = os . getenv ( [string] ) [EOL] assert gitter_token [EOL] github_token = os . getenv ( [string] ) [EOL] assert github_token [EOL] tag_name = os . getenv ( [string] ) [EOL] assert tag_name [EOL] [EOL] [EOL] def get_github_graphql ( tag_name ) : [EOL] github_graphql = [string] [EOL] github_graphql = github_graphql . replace ( [string] , tag_name ) [EOL] return github_graphql [EOL] [EOL] [EOL] def get_github_release_text ( tag_name ) : [EOL] url = [string] [EOL] headers = { [string] : f" [string] { github_token }" } [EOL] github_graphql = get_github_graphql ( tag_name = tag_name ) [EOL] response = requests . post ( url , json = { [string] : github_graphql } , headers = headers ) [EOL] assert response . status_code == [number] [EOL] data = response . json ( ) [EOL] return data [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def get_gitter_message ( release_text ) : [EOL] text = f""" [string] { tag_name } [string] """ [EOL] text = inspect . cleandoc ( text ) + [string] + release_text [EOL] return text [EOL] [EOL] [EOL] def send_gitter_message ( text ) : [EOL] headers = { [string] : f" [string] { gitter_token }" } [EOL] url = f" [string] { room_id } [string] " [EOL] data = { [string] : text } [EOL] response = requests . post ( url , headers = headers , json = data ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def main ( ) : [EOL] release_text = get_github_release_text ( tag_name = tag_name ) [EOL] text = get_gitter_message ( release_text = release_text ) [EOL] send_gitter_message ( text = text ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . on_event ( [string] ) def shutdown_event ( ) : [EOL] with open ( [string] , mode = [string] ) as log : [EOL] log . write ( [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] items = { } [EOL] [EOL] [EOL] @ app . on_event ( [string] ) async def startup_event ( ) : [EOL] items [ [string] ] = { [string] : [string] } [EOL] items [ [string] ] = { [string] : [string] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( item_id ) : [EOL] return items [ item_id ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0
import builtins [EOL] import fastapi [EOL] import docs_src [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseSettings [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] app_name = [string] [EOL] admin_email = ... [EOL] items_per_user = [number] [EOL] [EOL] [EOL] settings = Settings ( ) [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def info ( ) : [EOL] return { [string] : settings . app_name , [string] : settings . admin_email , [string] : settings . items_per_user , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $docs_src.settings.tutorial001.Settings$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.settings.tutorial001.Settings$ 0 0 0 0 0 $docs_src.settings.tutorial001.Settings$ 0 0 0 0 0 $docs_src.settings.tutorial001.Settings$ 0 0 0 0 0
import fastapi [EOL] import config [EOL] from functools import lru_cache [EOL] [EOL] from fastapi import Depends , FastAPI [EOL] [EOL] from . import config [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ lru_cache ( ) def get_settings ( ) : [EOL] return config . Settings ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def info ( settings = Depends ( get_settings ) ) : [EOL] return { [string] : settings . app_name , [string] : settings . admin_email , [string] : settings . items_per_user , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from pydantic import BaseSettings [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] app_name = [string] [EOL] admin_email = ... [EOL] items_per_user = [number] [EOL] [EOL] class Config : [EOL] env_file = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] from . import config [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def info ( ) : [EOL] return { [string] : config . settings . app_name , [string] : config . settings . admin_email , [string] : config . settings . items_per_user , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import docs_src [EOL] from pydantic import BaseSettings [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] app_name = [string] [EOL] admin_email = ... [EOL] items_per_user = [number] [EOL] [EOL] [EOL] settings = Settings ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $docs_src.settings.app01.config.Settings$ 0 0 0 0 0
	0
import builtins [EOL] from pydantic import BaseSettings [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] app_name = [string] [EOL] admin_email = ... [EOL] items_per_user = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI , File , Form , UploadFile [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_file ( file = File ( ... ) , fileb = File ( ... ) , token = Form ( ... ) ) : [EOL] return { [string] : len ( file ) , [string] : token , [string] : fileb . content_type , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import uvicorn [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def root ( ) : [EOL] a = [string] [EOL] b = [string] + a [EOL] return { [string] : b } [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] uvicorn . run ( app , host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import fastapi [EOL] import typing [EOL] import time [EOL] [EOL] from fastapi import FastAPI , Request [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def add_process_time_header ( request , call_next ) : [EOL] start_time = time . time ( ) [EOL] response = await call_next ( request ) [EOL] process_time = time . time ( ) - start_time [EOL] response . headers [ [string] ] = str ( process_time ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI [EOL] from fastapi . openapi . docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) [EOL] from fastapi . staticfiles import StaticFiles [EOL] [EOL] app = FastAPI ( docs_url = None , redoc_url = None ) [EOL] [EOL] app . mount ( [string] , StaticFiles ( directory = [string] ) , name = [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] , include_in_schema = False ) async def custom_swagger_ui_html ( ) : [EOL] return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + [string] , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = [string] , swagger_css_url = [string] , ) [EOL] [EOL] [EOL] @ app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect ( ) : [EOL] return get_swagger_ui_oauth2_redirect_html ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , include_in_schema = False ) async def redoc_html ( ) : [EOL] return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + [string] , redoc_js_url = [string] , ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user ( username ) : [EOL] return { [string] : f" [string] { username }" } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . middleware . cors import CORSMiddleware [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] origins = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ [string] ] , allow_headers = [ [string] ] , ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , List , Dict , Optional [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from fastapi . encoders import jsonable_encoder [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = None [EOL] description = None [EOL] price = None [EOL] tax = [number] [EOL] tags = [ ] [EOL] [EOL] [EOL] items = { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : None , [string] : [number] , [string] : [number] , [string] : [ ] } , } [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item ) async def read_item ( item_id ) : [EOL] return items [ item_id ] [EOL] [EOL] [EOL] @ app . put ( [string] , response_model = Item ) async def update_item ( item_id , item ) : [EOL] update_item_encoded = jsonable_encoder ( item ) [EOL] items [ item_id ] = update_item_encoded [EOL] return update_item_encoded [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $builtins.float$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] import docs_src [EOL] from typing import Optional [EOL] [EOL] from fastapi import Body , FastAPI [EOL] from pydantic import BaseModel , Field [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = Field ( None , title = [string] , max_length = [number] ) [EOL] price = Field ( ... , gt = [number] , description = [string] ) [EOL] tax = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( item_id , item = Body ( ... , embed = True ) ) : [EOL] results = { [string] : item_id , [string] : item } [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI , Path , Query [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( * , item_id = Path ( ... , title = [string] , ge = [number] , le = [number] ) , q , size = Query ( ... , gt = [number] , lt = [number] ) ) : [EOL] results = { [string] : item_id } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI , Path [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( * , item_id = Path ( ... , title = [string] ) , q ) : [EOL] results = { [string] : item_id } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Path , Query [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( item_id = Path ( ... , title = [string] ) , q = Query ( None , alias = [string] ) , ) : [EOL] results = { [string] : item_id } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from fastapi import FastAPI , Response , status [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] tasks = { [string] : [string] } [EOL] [EOL] [EOL] @ app . put ( [string] , status_code = [number] ) def get_or_create_task ( task_id , response ) : [EOL] if task_id not in tasks : [EOL] tasks [ task_id ] = [string] [EOL] response . status_code = status . HTTP_201_CREATED [EOL] return tasks [ task_id ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0
import fastapi [EOL] import io [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import StreamingResponse [EOL] [EOL] some_file_path = [string] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def main ( ) : [EOL] file_like = open ( some_file_path , mode = [string] ) [EOL] return StreamingResponse ( file_like , media_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import FileResponse [EOL] [EOL] some_file_path = [string] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return FileResponse ( some_file_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] html_content = [string] [EOL] return HTMLResponse ( content = html_content , status_code = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = HTMLResponse ) async def read_items ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import ORJSONResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = ORJSONResponse ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import UJSONResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = UJSONResponse ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import PlainTextResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = PlainTextResponse ) async def main ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] def generate_html_response ( ) : [EOL] html_content = [string] [EOL] return HTMLResponse ( content = html_content , status_code = [number] ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = HTMLResponse ) async def read_items ( ) : [EOL] return generate_html_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import RedirectResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_typer ( ) : [EOL] return RedirectResponse ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import ORJSONResponse [EOL] [EOL] app = FastAPI ( default_response_class = ORJSONResponse ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import StreamingResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] async def fake_video_streamer ( ) : [EOL] for i in range ( [number] ) : [EOL] yield [string] [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return StreamingResponse ( fake_video_streamer ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , List [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from fastapi import FastAPI , Query [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( q = Query ( None ) ) : [EOL] query_items = { [string] : q } [EOL] return query_items [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI , Query [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( q = Query ( [ ] ) ) : [EOL] query_items = { [string] : q } [EOL] return query_items [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , List [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( q = None ) : [EOL] results = { [string] : [ { [string] : [string] } , { [string] : [string] } ] } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , List [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Query [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( q = Query ( None , min_length = [number] , max_length = [number] ) ) : [EOL] results = { [string] : [ { [string] : [string] } , { [string] : [string] } ] } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Path [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( * , item_id = Path ( ... , title = [string] , ge = [number] , le = [number] ) , q = None , item = None , ) : [EOL] results = { [string] : item_id } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] if item : [EOL] results . update ( { [string] : item } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] import docs_src [EOL] from typing import Optional [EOL] [EOL] from fastapi import Body , FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] username = ... [EOL] full_name = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( item_id , item , user , importance = Body ( ... ) ) : [EOL] results = { [string] : item_id , [string] : item , [string] : user , [string] : importance } [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] import docs_src [EOL] from typing import Optional [EOL] [EOL] from fastapi import Body , FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( item_id , item = Body ( ... , embed = True ) ) : [EOL] results = { [string] : item_id , [string] : item } [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import typing [EOL] import docs_src [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Body , FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] username = ... [EOL] full_name = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( * , item_id , item , user , importance = Body ( ... , gt = [number] ) , q = None ) : [EOL] results = { [string] : item_id , [string] : item , [string] : user , [string] : importance } [EOL] if q : [EOL] results . update ( { [string] : q } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from fastapi import FastAPI , File , UploadFile [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_files ( files = File ( ... ) ) : [EOL] return { [string] : [ len ( file ) for file in files ] } [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_upload_files ( files = File ( ... ) ) : [EOL] return { [string] : [ file . filename for file in files ] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] content = [string] [EOL] return HTMLResponse ( content = content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI , File , UploadFile [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_file ( file = File ( ... ) ) : [EOL] return { [string] : len ( file ) } [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_upload_file ( file = File ( ... ) ) : [EOL] return { [string] : file . filename } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI , HTTPException [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] items = { [string] : [string] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id ) : [EOL] if item_id not in items : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return { [string] : items [ item_id ] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI , Request [EOL] from fastapi . responses import JSONResponse [EOL] [EOL] [EOL] class UnicornException ( Exception ) : [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request , exc ) : [EOL] return JSONResponse ( status_code = [number] , content = { [string] : f" [string] { exc . name } [string] " } , ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_unicorn ( name ) : [EOL] if name == [string] : [EOL] raise UnicornException ( name = name ) [EOL] return { [string] : name } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI , HTTPException [EOL] from fastapi . exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) [EOL] from fastapi . exceptions import RequestValidationError [EOL] from starlette . exceptions import HTTPException as StarletteHTTPException [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ) : [EOL] print ( f" [string] { repr ( exc ) }" ) [EOL] return await http_exception_handler ( request , exc ) [EOL] [EOL] [EOL] @ app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ) : [EOL] print ( f" [string] { exc }" ) [EOL] return await request_validation_exception_handler ( request , exc ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id ) : [EOL] if item_id == [number] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return { [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Request , status [EOL] from fastapi . encoders import jsonable_encoder [EOL] from fastapi . exceptions import RequestValidationError [EOL] from fastapi . responses import JSONResponse [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ) : [EOL] return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ( { [string] : exc . errors ( ) , [string] : exc . body } ) , ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] title = ... [EOL] size = ... [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_item ( item ) : [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI , HTTPException [EOL] from fastapi . exceptions import RequestValidationError [EOL] from fastapi . responses import PlainTextResponse [EOL] from starlette . exceptions import HTTPException as StarletteHTTPException [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ) : [EOL] return PlainTextResponse ( str ( exc . detail ) , status_code = exc . status_code ) [EOL] [EOL] [EOL] @ app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ) : [EOL] return PlainTextResponse ( str ( exc ) , status_code = [number] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id ) : [EOL] if item_id == [number] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return { [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . middleware . httpsredirect import HTTPSRedirectMiddleware [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] app . add_middleware ( HTTPSRedirectMiddleware ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . middleware . gzip import GZipMiddleware [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] app . add_middleware ( GZipMiddleware , minimum_size = [number] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . middleware . trustedhost import TrustedHostMiddleware [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ [string] , [string] ] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def main ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def read_items ( ) : [EOL] return [ { [string] : [string] , [string] : [number] } ] [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def read_users ( ) : [EOL] return [ { [string] : [string] } ] [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] , deprecated = True ) async def read_elements ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional , Set [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] tags = [ ] [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = Item , summary = [string] , description = [string] , ) async def create_item ( item ) : [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional , Set [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] tags = [ ] [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = Item , tags = [ [string] ] ) async def create_item ( item ) : [EOL] return item [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def read_items ( ) : [EOL] return [ { [string] : [string] , [string] : [number] } ] [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def read_users ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Optional [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , Set [EOL] [EOL] from fastapi import FastAPI , status [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] tags = [ ] [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item ) : [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def root ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from httpx import AsyncClient [EOL] [EOL] from . main import app [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_root ( ) : [EOL] async with AsyncClient ( app = app , base_url = [string] ) as ac : [EOL] response = await ac . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] import docs_src [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseSettings [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] openapi_url = [string] [EOL] [EOL] [EOL] settings = Settings ( ) [EOL] [EOL] app = FastAPI ( openapi_url = settings . openapi_url ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def root ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $docs_src.conditional_openapi.tutorial001.Settings$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $docs_src.conditional_openapi.tutorial001.Settings$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , operation_id = [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . routing import APIRoute [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL] [EOL] [EOL] def use_route_names_as_operation_ids ( app ) : [EOL] [docstring] [EOL] for route in app . routes : [EOL] if isinstance ( route , APIRoute ) : [EOL] route . operation_id = route . name [comment] [EOL] [EOL] [EOL] use_route_names_as_operation_ids ( app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , include_in_schema = False ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI , Form [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def login ( username = Form ( ... ) , password = Form ( ... ) ) : [EOL] return { [string] : username } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Optional , Union , Dict [EOL] import typing [EOL] import docs_src [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional , Set [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , HttpUrl [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Image ( BaseModel ) : [EOL] url = ... [EOL] name = ... [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] tags = [ ] [EOL] image = None [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( item_id , item ) : [EOL] results = { [string] : item_id , [string] : item } [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.HttpUrl$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[Image]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Optional , List [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import List , Optional , Set [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , HttpUrl [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Image ( BaseModel ) : [EOL] url = ... [EOL] name = ... [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] tags = [ ] [EOL] images = None [EOL] [EOL] [EOL] class Offer ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] items = ... [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_offer ( offer ) : [EOL] return offer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.HttpUrl$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[Image]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.List[Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_index_weights ( weights ) : [EOL] return weights [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import fastapi [EOL] from typing import List [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , HttpUrl [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Image ( BaseModel ) : [EOL] url = ... [EOL] name = ... [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_multiple_images ( images ) : [EOL] return images [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.HttpUrl$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , List [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] tags_metadata = [ { [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , } , } , ] [EOL] [EOL] app = FastAPI ( openapi_tags = tags_metadata ) [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def get_users ( ) : [EOL] return [ { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] [EOL] @ app . get ( [string] , tags = [ [string] ] ) async def get_items ( ) : [EOL] return [ { [string] : [string] } , { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( title = [string] , description = [string] , version = [string] , ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( docs_url = [string] , redoc_url = None ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( openapi_url = [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import Depends , FastAPI [EOL] from fastapi . security import OAuth2PasswordBearer [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( token = Depends ( oauth2_scheme ) ) : [EOL] return { [string] : token } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import Depends , FastAPI [EOL] from fastapi . security import OAuth2PasswordBearer [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = [string] ) [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] username = ... [EOL] email = None [EOL] full_name = None [EOL] disabled = None [EOL] [EOL] [EOL] def fake_decode_token ( token ) : [EOL] return User ( username = token + [string] , email = [string] , full_name = [string] ) [EOL] [EOL] [EOL] async def get_current_user ( token = Depends ( oauth2_scheme ) ) : [EOL] user = fake_decode_token ( token ) [EOL] return user [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_users_me ( current_user = Depends ( get_current_user ) ) : [EOL] return current_user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Union , Dict [EOL] import typing [EOL] import docs_src [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Depends , FastAPI , HTTPException , status [EOL] from fastapi . security import OAuth2PasswordBearer , OAuth2PasswordRequestForm [EOL] from pydantic import BaseModel [EOL] [EOL] fake_users_db = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , } , } [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] def fake_hash_password ( password ) : [EOL] return [string] + password [EOL] [EOL] [EOL] oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = [string] ) [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] username = ... [EOL] email = None [EOL] full_name = None [EOL] disabled = None [EOL] [EOL] [EOL] class UserInDB ( User ) : [EOL] hashed_password = ... [EOL] [EOL] [EOL] def get_user ( db , username ) : [EOL] if username in db : [EOL] user_dict = db [ username ] [EOL] return UserInDB ( ** user_dict ) [EOL] [EOL] [EOL] def fake_decode_token ( token ) : [EOL] [comment] [EOL] [comment] [EOL] user = get_user ( fake_users_db , token ) [EOL] return user [EOL] [EOL] [EOL] async def get_current_user ( token = Depends ( oauth2_scheme ) ) : [EOL] user = fake_decode_token ( token ) [EOL] if not user : [EOL] raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = [string] , headers = { [string] : [string] } , ) [EOL] return user [EOL] [EOL] [EOL] async def get_current_active_user ( current_user = Depends ( get_current_user ) ) : [EOL] if current_user . disabled : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return current_user [EOL] [EOL] [EOL] @ app . post ( [string] ) async def login ( form_data = Depends ( ) ) : [EOL] user_dict = fake_users_db . get ( form_data . username ) [EOL] if not user_dict : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] user = UserInDB ( ** user_dict ) [EOL] hashed_password = fake_hash_password ( form_data . password ) [EOL] if not hashed_password == user . hashed_password : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] [EOL] return { [string] : user . username , [string] : [string] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_users_me ( current_user = Depends ( get_current_active_user ) ) : [EOL] return current_user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2PasswordBearer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] import secrets [EOL] [EOL] from fastapi import Depends , FastAPI , HTTPException , status [EOL] from fastapi . security import HTTPBasic , HTTPBasicCredentials [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] security = HTTPBasic ( ) [EOL] [EOL] [EOL] def get_current_username ( credentials = Depends ( security ) ) : [EOL] correct_username = secrets . compare_digest ( credentials . username , [string] ) [EOL] correct_password = secrets . compare_digest ( credentials . password , [string] ) [EOL] if not ( correct_username and correct_password ) : [EOL] raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = [string] , headers = { [string] : [string] } , ) [EOL] return credentials . username [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_current_user ( username = Depends ( get_current_username ) ) : [EOL] return { [string] : username } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import Depends , FastAPI [EOL] from fastapi . security import HTTPBasic , HTTPBasicCredentials [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] security = HTTPBasic ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_current_user ( credentials = Depends ( security ) ) : [EOL] return { [string] : credentials . username , [string] : credentials . password } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.http.HTTPBasic$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . put ( [string] ) async def create_item ( item_id , item , q = None ) : [EOL] result = { [string] : item_id , ** item . dict ( ) } [EOL] if q : [EOL] result . update ( { [string] : q } ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = None [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def create_item ( item ) : [EOL] item_dict = item . dict ( ) [EOL] if item . tax : [EOL] price_with_tax = item . price + item . tax [EOL] item_dict . update ( { [string] : price_with_tax } ) [EOL] return item_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def root ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] my_awesome_api = FastAPI ( ) [EOL] [EOL] [EOL] @ my_awesome_api . get ( [string] ) async def root ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def root ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable [EOL] import typing [EOL] import fastapi [EOL] import time [EOL] from typing import Callable [EOL] [EOL] from fastapi import APIRouter , FastAPI , Request , Response [EOL] from fastapi . routing import APIRoute [EOL] [EOL] [EOL] class TimedRoute ( APIRoute ) : [EOL] def get_route_handler ( self ) : [EOL] original_route_handler = super ( ) . get_route_handler ( ) [EOL] [EOL] async def custom_route_handler ( request ) : [EOL] before = time . time ( ) [EOL] response = await original_route_handler ( request ) [EOL] duration = time . time ( ) - before [EOL] response . headers [ [string] ] = str ( duration ) [EOL] print ( f" [string] { duration }" ) [EOL] print ( f" [string] { response }" ) [EOL] print ( f" [string] { response . headers }" ) [EOL] return response [EOL] [EOL] return custom_route_handler [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] router = APIRouter ( route_class = TimedRoute ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def not_timed ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ router . get ( [string] ) async def timed ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] app . include_router ( router ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.Response$ 0 $fastapi.Request$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $fastapi.Response$ 0 0 0 0 $fastapi.Request$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $fastapi.Response$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $fastapi.Response$ 0 0 0 0 0 0 0 0 $fastapi.Response$ 0 0 0 0 0 0 $fastapi.Response$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 $typing.Any$ 0 0
from typing import Any , Callable , Dict , List [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Callable , List [EOL] [EOL] from fastapi import Body , FastAPI , HTTPException , Request , Response [EOL] from fastapi . exceptions import RequestValidationError [EOL] from fastapi . routing import APIRoute [EOL] [EOL] [EOL] class ValidationErrorLoggingRoute ( APIRoute ) : [EOL] def get_route_handler ( self ) : [EOL] original_route_handler = super ( ) . get_route_handler ( ) [EOL] [EOL] async def custom_route_handler ( request ) : [EOL] try : [EOL] return await original_route_handler ( request ) [EOL] except RequestValidationError as exc : [EOL] body = await request . body ( ) [EOL] detail = { [string] : exc . errors ( ) , [string] : body . decode ( ) } [EOL] raise HTTPException ( status_code = [number] , detail = detail ) [EOL] [EOL] return custom_route_handler [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] app . router . route_class = ValidationErrorLoggingRoute [EOL] [EOL] [EOL] @ app . post ( [string] ) async def sum_numbers ( numbers = Body ( ... ) ) : [EOL] return sum ( numbers ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.Response$ 0 $fastapi.Request$ 0 0 0 0 0 0 0 0 0 0 $fastapi.Request$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $fastapi.Request$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable , List [EOL] import typing [EOL] import docs_src [EOL] import fastapi [EOL] import builtins [EOL] import gzip [EOL] from typing import Callable , List [EOL] [EOL] from fastapi import Body , FastAPI , Request , Response [EOL] from fastapi . routing import APIRoute [EOL] [EOL] [EOL] class GzipRequest ( Request ) : [EOL] async def body ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] body = await super ( ) . body ( ) [EOL] if [string] in self . headers . getlist ( [string] ) : [EOL] body = gzip . decompress ( body ) [EOL] self . _body = body [EOL] return self . _body [EOL] [EOL] [EOL] class GzipRoute ( APIRoute ) : [EOL] def get_route_handler ( self ) : [EOL] original_route_handler = super ( ) . get_route_handler ( ) [EOL] [EOL] async def custom_route_handler ( request ) : [EOL] request = GzipRequest ( request . scope , request . receive ) [EOL] return await original_route_handler ( request ) [EOL] [EOL] return custom_route_handler [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] app . router . route_class = GzipRoute [EOL] [EOL] [EOL] @ app . post ( [string] ) async def sum_numbers ( numbers = Body ( ... ) ) : [EOL] return { [string] : sum ( numbers ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.Response$ 0 $docs_src.custom_request_and_route.tutorial001.GzipRequest$ 0 0 0 $docs_src.custom_request_and_route.tutorial001.GzipRequest$ 0 0 0 $docs_src.custom_request_and_route.tutorial001.GzipRequest$ 0 0 0 $docs_src.custom_request_and_route.tutorial001.GzipRequest$ 0 0 0 0 0 0 0 0 $docs_src.custom_request_and_route.tutorial001.GzipRequest$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import builtins [EOL] import couchbase [EOL] import fastapi [EOL] import docs_src [EOL] import typing [EOL] from typing import Optional [EOL] [EOL] from couchbase import LOCKMODE_WAIT [EOL] from couchbase . bucket import Bucket [EOL] from couchbase . cluster import Cluster , PasswordAuthenticator [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] USERPROFILE_DOC_TYPE = [string] [EOL] [EOL] [EOL] def get_bucket ( ) : [EOL] cluster = Cluster ( [string] ) [EOL] authenticator = PasswordAuthenticator ( [string] , [string] ) [EOL] cluster . authenticate ( authenticator ) [EOL] bucket = cluster . open_bucket ( [string] , lockmode = LOCKMODE_WAIT ) [EOL] bucket . timeout = [number] [EOL] bucket . n1ql_timeout = [number] [EOL] return bucket [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] username = ... [EOL] email = None [EOL] full_name = None [EOL] disabled = None [EOL] [EOL] [EOL] class UserInDB ( User ) : [EOL] type = USERPROFILE_DOC_TYPE [EOL] hashed_password = ... [EOL] [EOL] [EOL] def get_user ( bucket , username ) : [EOL] doc_id = f" [string] { username }" [EOL] result = bucket . get ( doc_id , quiet = True ) [EOL] if not result . value : [EOL] return None [EOL] user = UserInDB ( ** result . value ) [EOL] return user [EOL] [EOL] [EOL] [comment] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = User ) def read_user ( username ) : [EOL] bucket = get_bucket ( ) [EOL] user = get_user ( bucket = bucket , username = username ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import BackgroundTasks , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] def write_notification ( email , message = [string] ) : [EOL] with open ( [string] , mode = [string] ) as email_file : [EOL] content = f" [string] { email } [string] { message }" [EOL] email_file . write ( content ) [EOL] [EOL] [EOL] @ app . post ( [string] ) async def send_notification ( email , background_tasks ) : [EOL] background_tasks . add_task ( write_notification , email , message = [string] ) [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import BackgroundTasks , Depends , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] def write_log ( message ) : [EOL] with open ( [string] , mode = [string] ) as log : [EOL] log . write ( message ) [EOL] [EOL] [EOL] def get_query ( background_tasks , q = None ) : [EOL] if q : [EOL] message = f" [string] { q } [string] " [EOL] background_tasks . add_task ( write_log , message ) [EOL] return q [EOL] [EOL] [EOL] @ app . post ( [string] ) async def send_notification ( email , background_tasks , q = Depends ( get_query ) ) : [EOL] message = f" [string] { email } [string] " [EOL] background_tasks . add_task ( write_log , message ) [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Header [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( strange_header = Header ( None , convert_underscores = False ) ) : [EOL] return { [string] : strange_header } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from fastapi import FastAPI , Header [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( x_token = Header ( None ) ) : [EOL] return { [string] : x_token } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Header [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( user_agent = Header ( None ) ) : [EOL] return { [string] : user_agent } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] import fastapi [EOL] import pydantic [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import APIRouter , FastAPI [EOL] from fastapi . responses import JSONResponse [EOL] from pydantic import BaseModel , HttpUrl [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Invoice ( BaseModel ) : [EOL] id = ... [EOL] title = None [EOL] customer = ... [EOL] total = ... [EOL] [EOL] [EOL] class InvoiceEvent ( BaseModel ) : [EOL] description = ... [EOL] paid = ... [EOL] [EOL] [EOL] class InvoiceEventReceived ( BaseModel ) : [EOL] ok = ... [EOL] [EOL] [EOL] invoices_callback_router = APIRouter ( default_response_class = JSONResponse ) [EOL] [EOL] [EOL] @ invoices_callback_router . post ( [string] , response_model = InvoiceEventReceived , ) def invoice_notification ( body ) : [EOL] pass [EOL] [EOL] [EOL] @ app . post ( [string] , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice , callback_url = None ) : [EOL] [docstring] [EOL] [comment] [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI , Request [EOL] from fastapi . responses import HTMLResponse [EOL] from fastapi . staticfiles import StaticFiles [EOL] from fastapi . templating import Jinja2Templates [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] app . mount ( [string] , StaticFiles ( directory = [string] ) , name = [string] ) [EOL] [EOL] [EOL] templates = Jinja2Templates ( directory = [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_class = HTMLResponse ) async def read_item ( request , id ) : [EOL] return templates . TemplateResponse ( [string] , { [string] : request , [string] : id } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from . main_b import app [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [EOL] def test_read_item ( ) : [EOL] response = client . get ( [string] , headers = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def test_read_item_bad_token ( ) : [EOL] response = client . get ( [string] , headers = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_read_inexistent_item ( ) : [EOL] response = client . get ( [string] , headers = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_create_item ( ) : [EOL] response = client . post ( [string] , headers = { [string] : [string] } , json = { [string] : [string] , [string] : [string] , [string] : [string] } , ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def test_create_item_bad_token ( ) : [EOL] response = client . post ( [string] , headers = { [string] : [string] } , json = { [string] : [string] , [string] : [string] , [string] : [string] } , ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_create_existing_item ( ) : [EOL] response = client . post ( [string] , headers = { [string] : [string] } , json = { [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_main ( ) : [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI , Header , HTTPException [EOL] from pydantic import BaseModel [EOL] [EOL] fake_secret_token = [string] [EOL] [EOL] fake_db = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , } [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] id = ... [EOL] title = ... [EOL] description = None [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item ) async def read_main ( item_id , x_token = Header ( ... ) ) : [EOL] if x_token != fake_secret_token : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] if item_id not in fake_db : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return fake_db [ item_id ] [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = Item ) async def create_item ( item , x_token = Header ( ... ) ) : [EOL] if x_token != fake_secret_token : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] if item . id in fake_db : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] fake_db [ item . id ] = item [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . testclient import TestClient [EOL] from fastapi . websockets import WebSocket [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_main ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ app . websocket_route ( [string] ) async def websocket ( websocket ) : [EOL] await websocket . accept ( ) [EOL] await websocket . send_json ( { [string] : [string] } ) [EOL] await websocket . close ( ) [EOL] [EOL] [EOL] def test_read_main ( ) : [EOL] client = TestClient ( app ) [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_websocket ( ) : [EOL] client = TestClient ( app ) [EOL] with client . websocket_connect ( [string] ) as websocket : [EOL] data = websocket . receive_json ( ) [EOL] assert data == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . testclient import TestClient [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] items = { } [EOL] [EOL] [EOL] @ app . on_event ( [string] ) async def startup_event ( ) : [EOL] items [ [string] ] = { [string] : [string] } [EOL] items [ [string] ] = { [string] : [string] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( item_id ) : [EOL] return items [ item_id ] [EOL] [EOL] [EOL] def test_read_items ( ) : [EOL] with TestClient ( app ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from fastapi . testclient import TestClient [EOL] [EOL] from . main import app [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [EOL] def test_read_main ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import fastapi [EOL] import typing [EOL] from fastapi import FastAPI [EOL] from fastapi . testclient import TestClient [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_main ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [EOL] def test_read_main ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user_item ( item_id , needy , skip = [number] , limit = None ) : [EOL] item = { [string] : item_id , [string] : needy , [string] : skip , [string] : limit } [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user_item ( user_id , item_id , q = None , short = False ) : [EOL] item = { [string] : item_id , [string] : user_id } [EOL] if q : [EOL] item . update ( { [string] : q } ) [EOL] if not short : [EOL] item . update ( { [string] : [string] } ) [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user_item ( item_id , needy ) : [EOL] item = { [string] : item_id , [string] : needy } [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] fake_items_db = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( skip = [number] , limit = [number] ) : [EOL] return fake_items_db [ skip : skip + limit ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id , q = None ) : [EOL] if q : [EOL] return { [string] : item_id , [string] : q } [EOL] return { [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id , q = None , short = False ) : [EOL] item = { [string] : item_id } [EOL] if q : [EOL] item . update ( { [string] : q } ) [EOL] if not short : [EOL] item . update ( { [string] : [string] } ) [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import fastapi [EOL] import typing [EOL] import docs_src [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from fastapi import FastAPI , WebSocket , WebSocketDisconnect [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] html = [string] [EOL] [EOL] [EOL] class ConnectionManager : [EOL] def __init__ ( self ) : [EOL] self . active_connections = [ ] [EOL] [EOL] async def connect ( self , websocket ) : [EOL] await websocket . accept ( ) [EOL] self . active_connections . append ( websocket ) [EOL] [EOL] def disconnect ( self , websocket ) : [EOL] self . active_connections . remove ( websocket ) [EOL] [EOL] async def send_personal_message ( self , message , websocket ) : [EOL] await websocket . send_text ( message ) [EOL] [EOL] async def broadcast ( self , message ) : [EOL] for connection in self . active_connections : [EOL] await connection . send_text ( message ) [EOL] [EOL] [EOL] manager = ConnectionManager ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def get ( ) : [EOL] return HTMLResponse ( html ) [EOL] [EOL] [EOL] @ app . websocket ( [string] ) async def websocket_endpoint ( websocket , client_id ) : [EOL] await manager . connect ( websocket ) [EOL] try : [EOL] while True : [EOL] data = await websocket . receive_text ( ) [EOL] await manager . send_personal_message ( f" [string] { data }" , websocket ) [EOL] await manager . broadcast ( f" [string] { client_id } [string] { data }" ) [EOL] except WebSocketDisconnect : [EOL] manager . disconnect ( websocket ) [EOL] await manager . broadcast ( f" [string] { client_id } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[fastapi.WebSocket]$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.WebSocket$ 0 0 0 0 $fastapi.WebSocket$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.WebSocket$ 0 0 0 0 0 0 0 0 $fastapi.WebSocket$ 0 0 0 0 0 0 0 0 0 $fastapi.WebSocket$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $fastapi.WebSocket$ 0 0 0 0 $fastapi.WebSocket$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 $docs_src.websockets.tutorial003.ConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Cookie , Depends , FastAPI , Query , WebSocket , status [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] html = [string] [EOL] [EOL] [EOL] @ app . get ( [string] ) async def get ( ) : [EOL] return HTMLResponse ( html ) [EOL] [EOL] [EOL] async def get_cookie_or_token ( websocket , session = Cookie ( None ) , token = Query ( None ) , ) : [EOL] if session is None and token is None : [EOL] await websocket . close ( code = status . WS_1008_POLICY_VIOLATION ) [EOL] return session or token [EOL] [EOL] [EOL] @ app . websocket ( [string] ) async def websocket_endpoint ( websocket , item_id , q = None , cookie_or_token = Depends ( get_cookie_or_token ) , ) : [EOL] await websocket . accept ( ) [EOL] while True : [EOL] data = await websocket . receive_text ( ) [EOL] await websocket . send_text ( f" [string] { cookie_or_token }" ) [EOL] if q is not None : [EOL] await websocket . send_text ( f" [string] { q }" ) [EOL] await websocket . send_text ( f" [string] { data } [string] { item_id }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import fastapi [EOL] import typing [EOL] from fastapi import FastAPI , WebSocket [EOL] from fastapi . responses import HTMLResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] html = [string] [EOL] [EOL] [EOL] @ app . get ( [string] ) async def get ( ) : [EOL] return HTMLResponse ( html ) [EOL] [EOL] [EOL] @ app . websocket ( [string] ) async def websocket_endpoint ( websocket ) : [EOL] await websocket . accept ( ) [EOL] while True : [EOL] data = await websocket . receive_text ( ) [EOL] await websocket . send_text ( f" [string] { data }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import fastapi [EOL] from enum import Enum [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] [EOL] class ModelName ( str , Enum ) : [EOL] alexnet = [string] [EOL] resnet = [string] [EOL] lenet = [string] [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def get_model ( model_name ) : [EOL] if model_name == ModelName . alexnet : [EOL] return { [string] : model_name , [string] : [string] } [EOL] [EOL] if model_name . value == [string] : [EOL] return { [string] : model_name , [string] : [string] } [EOL] [EOL] return { [string] : model_name , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_file ( file_path ) : [EOL] return { [string] : file_path } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user_me ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_user ( user_id ) : [EOL] return { [string] : user_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id ) : [EOL] return { [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_item ( item_id ) : [EOL] return { [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Request [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_main ( request ) : [EOL] return { [string] : [string] , [string] : request . scope . get ( [string] ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Request [EOL] [EOL] app = FastAPI ( root_path = [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_main ( request ) : [EOL] return { [string] : [string] , [string] : request . scope . get ( [string] ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Request [EOL] [EOL] app = FastAPI ( servers = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] , root_path = [string] , root_path_in_servers = False , ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_main ( request ) : [EOL] return { [string] : [string] , [string] : request . scope . get ( [string] ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import Cookie , Depends , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] def query_extractor ( q = None ) : [EOL] return q [EOL] [EOL] [EOL] def query_or_cookie_extractor ( q = Depends ( query_extractor ) , last_query = Cookie ( None ) ) : [EOL] if not q : [EOL] return last_query [EOL] return q [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_query ( query_or_default = Depends ( query_or_cookie_extractor ) ) : [EOL] return { [string] : query_or_default } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class MySuperContextManager : [EOL] def __init__ ( self ) : [EOL] self . db = DBSession ( ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self . db [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] self . db . close ( ) [EOL] [EOL] [EOL] async def get_db ( ) : [EOL] with MySuperContextManager ( ) as db : [EOL] yield db [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] async def get_db ( ) : [EOL] db = DBSession ( ) [EOL] try : [EOL] yield db [EOL] finally : [EOL] db . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] from fastapi import Depends , FastAPI , Header , HTTPException [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] async def verify_token ( x_token = Header ( ... ) ) : [EOL] if x_token != [string] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] [EOL] [EOL] async def verify_key ( x_key = Header ( ... ) ) : [EOL] if x_key != [string] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return x_key [EOL] [EOL] [EOL] @ app . get ( [string] , dependencies = [ Depends ( verify_token ) , Depends ( verify_key ) ] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } , { [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import fastapi [EOL] import docs_src [EOL] from fastapi import Depends , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class FixedContentQueryChecker : [EOL] def __init__ ( self , fixed_content ) : [EOL] self . fixed_content = fixed_content [EOL] [EOL] def __call__ ( self , q = [string] ) : [EOL] if q : [EOL] return self . fixed_content in q [EOL] return False [EOL] [EOL] [EOL] checker = FixedContentQueryChecker ( [string] ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_query_check ( fixed_content_included = Depends ( checker ) ) : [EOL] return { [string] : fixed_content_included } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $docs_src.dependencies.tutorial011.FixedContentQueryChecker$ 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.dependencies.tutorial011.FixedContentQueryChecker$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict , List [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import Depends , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] fake_items_db = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] [EOL] class CommonQueryParams : [EOL] def __init__ ( self , q = None , skip = [number] , limit = [number] ) : [EOL] self . q = q [EOL] self . skip = skip [EOL] self . limit = limit [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( commons = Depends ( CommonQueryParams ) ) : [EOL] response = { } [EOL] if commons . q : [EOL] response . update ( { [string] : commons . q } ) [EOL] items = fake_items_db [ commons . skip : commons . skip + commons . limit ] [EOL] response . update ( { [string] : items } ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import Depends , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] async def common_parameters ( q = None , skip = [number] , limit = [number] ) : [EOL] return { [string] : q , [string] : skip , [string] : limit } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( commons = Depends ( common_parameters ) ) : [EOL] return commons [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_users ( commons = Depends ( common_parameters ) ) : [EOL] return commons [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from fastapi import Depends [EOL] [EOL] [EOL] async def dependency_a ( ) : [EOL] dep_a = generate_dep_a ( ) [EOL] try : [EOL] yield dep_a [EOL] finally : [EOL] dep_a . close ( ) [EOL] [EOL] [EOL] async def dependency_b ( dep_a = Depends ( dependency_a ) ) : [EOL] dep_b = generate_dep_b ( ) [EOL] try : [EOL] yield dep_b [EOL] finally : [EOL] dep_b . close ( dep_a ) [EOL] [EOL] [EOL] async def dependency_c ( dep_b = Depends ( dependency_b ) ) : [EOL] dep_c = generate_dep_c ( ) [EOL] try : [EOL] yield dep_c [EOL] finally : [EOL] dep_c . close ( dep_b ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] import fastapi [EOL] from fastapi import Depends , FastAPI , Header , HTTPException [EOL] [EOL] from . routers import items , users [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] async def get_token_header ( x_token = Header ( ... ) ) : [EOL] if x_token != [string] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] [EOL] [EOL] app . include_router ( users . router ) [EOL] app . include_router ( items . router , prefix = [string] , tags = [ [string] ] , dependencies = [ Depends ( get_token_header ) ] , responses = { [number] : { [string] : [string] } } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] from fastapi import APIRouter , HTTPException [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [EOL] @ router . get ( [string] ) async def read_items ( ) : [EOL] return [ { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] [EOL] @ router . get ( [string] ) async def read_item ( item_id ) : [EOL] return { [string] : [string] , [string] : item_id } [EOL] [EOL] [EOL] @ router . put ( [string] , tags = [ [string] ] , responses = { [number] : { [string] : [string] } } , ) async def update_item ( item_id ) : [EOL] if item_id != [string] : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return { [string] : item_id , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] from fastapi import APIRouter [EOL] [EOL] router = APIRouter ( ) [EOL] [EOL] [EOL] @ router . get ( [string] , tags = [ [string] ] ) async def read_users ( ) : [EOL] return [ { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] [EOL] @ router . get ( [string] , tags = [ [string] ] ) async def read_user_me ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ router . get ( [string] , tags = [ [string] ] ) async def read_user ( username ) : [EOL] return { [string] : username } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import fastapi [EOL] import docs_src [EOL] import graphene [EOL] from fastapi import FastAPI [EOL] from starlette . graphql import GraphQLApp [EOL] [EOL] [EOL] class Query ( graphene . ObjectType ) : [EOL] hello = graphene . String ( name = graphene . String ( default_value = [string] ) ) [EOL] [EOL] def resolve_hello ( self , info , name ) : [EOL] return [string] + name [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] app . add_route ( [string] , GraphQLApp ( schema = graphene . Schema ( query = Query ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.graphql.tutorial001.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] from typing import List [EOL] [EOL] import databases [EOL] import sqlalchemy [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] [comment] [EOL] DATABASE_URL = [string] [EOL] [comment] [EOL] [EOL] database = databases . Database ( DATABASE_URL ) [EOL] [EOL] metadata = sqlalchemy . MetaData ( ) [EOL] [EOL] notes = sqlalchemy . Table ( [string] , metadata , sqlalchemy . Column ( [string] , sqlalchemy . Integer , primary_key = True ) , sqlalchemy . Column ( [string] , sqlalchemy . String ) , sqlalchemy . Column ( [string] , sqlalchemy . Boolean ) , ) [EOL] [EOL] [EOL] engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { [string] : False } ) [EOL] metadata . create_all ( engine ) [EOL] [EOL] [EOL] class NoteIn ( BaseModel ) : [EOL] text = ... [EOL] completed = ... [EOL] [EOL] [EOL] class Note ( BaseModel ) : [EOL] id = ... [EOL] text = ... [EOL] completed = ... [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . on_event ( [string] ) async def startup ( ) : [EOL] await database . connect ( ) [EOL] [EOL] [EOL] @ app . on_event ( [string] ) async def shutdown ( ) : [EOL] await database . disconnect ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ Note ] ) async def read_notes ( ) : [EOL] query = notes . select ( ) [EOL] return await database . fetch_all ( query ) [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = Note ) async def create_note ( note ) : [EOL] query = notes . insert ( ) . values ( text = note . text , completed = note . completed ) [EOL] last_record_id = await database . execute ( query ) [EOL] return { ** note . dict ( ) , [string] : last_record_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI , Request [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_root ( item_id , request ) : [EOL] client_host = request . client . host [EOL] return { [string] : client_host , [string] : item_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Response [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def get_legacy_data ( ) : [EOL] data = [string] [EOL] return Response ( content = data , media_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from datetime import datetime [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from fastapi . encoders import jsonable_encoder [EOL] from fastapi . responses import JSONResponse [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] title = ... [EOL] timestamp = ... [EOL] description = None [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . put ( [string] ) def update_item ( id , item ) : [EOL] json_compatible_item_data = jsonable_encoder ( item ) [EOL] return JSONResponse ( content = json_compatible_item_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class ItemBase ( BaseModel ) : [EOL] title = ... [EOL] description = None [EOL] [EOL] [EOL] class ItemCreate ( ItemBase ) : [EOL] pass [EOL] [EOL] [EOL] class Item ( ItemBase ) : [EOL] id = ... [EOL] owner_id = ... [EOL] [EOL] class Config : [EOL] orm_mode = True [EOL] [EOL] [EOL] class UserBase ( BaseModel ) : [EOL] email = ... [EOL] [EOL] [EOL] class UserCreate ( UserBase ) : [EOL] password = ... [EOL] [EOL] [EOL] class User ( UserBase ) : [EOL] id = ... [EOL] is_active = ... [EOL] items = [ ] [EOL] [EOL] class Config : [EOL] orm_mode = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $typing.List[Item]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import schemas [EOL] import sqlalchemy [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from . import models , schemas [EOL] [EOL] [EOL] def get_user ( db , user_id ) : [EOL] return db . query ( models . User ) . filter ( models . User . id == user_id ) . first ( ) [EOL] [EOL] [EOL] def get_user_by_email ( db , email ) : [EOL] return db . query ( models . User ) . filter ( models . User . email == email ) . first ( ) [EOL] [EOL] [EOL] def get_users ( db , skip = [number] , limit = [number] ) : [EOL] return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all ( ) [EOL] [EOL] [EOL] def create_user ( db , user ) : [EOL] fake_hashed_password = user . password + [string] [EOL] db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) [EOL] db . add ( db_user ) [EOL] db . commit ( ) [EOL] db . refresh ( db_user ) [EOL] return db_user [EOL] [EOL] [EOL] def get_items ( db , skip = [number] , limit = [number] ) : [EOL] return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all ( ) [EOL] [EOL] [EOL] def create_user_item ( db , item , user_id ) : [EOL] db_item = models . Item ( ** item . dict ( ) , owner_id = user_id ) [EOL] db . add ( db_item ) [EOL] db . commit ( ) [EOL] db . refresh ( db_item ) [EOL] return db_item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import schemas [EOL] import fastapi [EOL] import sqlalchemy [EOL] from typing import List [EOL] [EOL] from fastapi import Depends , FastAPI , HTTPException , Request , Response [EOL] from sqlalchemy . orm import Session [EOL] [EOL] from . import crud , models , schemas [EOL] from . database import SessionLocal , engine [EOL] [EOL] models . Base . metadata . create_all ( bind = engine ) [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . middleware ( [string] ) async def db_session_middleware ( request , call_next ) : [EOL] response = Response ( [string] , status_code = [number] ) [EOL] try : [EOL] request . state . db = SessionLocal ( ) [EOL] response = await call_next ( request ) [EOL] finally : [EOL] request . state . db . close ( ) [EOL] return response [EOL] [EOL] [EOL] [comment] [EOL] def get_db ( request ) : [EOL] return request . state . db [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = schemas . User ) def create_user ( user , db = Depends ( get_db ) ) : [EOL] db_user = crud . get_user_by_email ( db , email = user . email ) [EOL] if db_user : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return crud . create_user ( db = db , user = user ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ schemas . User ] ) def read_users ( skip = [number] , limit = [number] , db = Depends ( get_db ) ) : [EOL] users = crud . get_users ( db , skip = skip , limit = limit ) [EOL] return users [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = schemas . User ) def read_user ( user_id , db = Depends ( get_db ) ) : [EOL] db_user = crud . get_user ( db , user_id = user_id ) [EOL] if db_user is None : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return db_user [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = schemas . Item ) def create_item_for_user ( user_id , item , db = Depends ( get_db ) ) : [EOL] return crud . create_user_item ( db = db , item = item , user_id = user_id ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ schemas . Item ] ) def read_items ( skip = [number] , limit = [number] , db = Depends ( get_db ) ) : [EOL] items = crud . get_items ( db , skip = skip , limit = limit ) [EOL] return items [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] SQLALCHEMY_DATABASE_URL = [string] [EOL] [comment] [EOL] [EOL] engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { [string] : False } ) [EOL] SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) [EOL] [EOL] Base = declarative_base ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import docs_src [EOL] from sqlalchemy import Boolean , Column , ForeignKey , Integer , String [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from . database import Base [EOL] [EOL] [EOL] class User ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] email = Column ( String , unique = True , index = True ) [EOL] hashed_password = Column ( String ) [EOL] is_active = Column ( Boolean , default = True ) [EOL] [EOL] items = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] [EOL] class Item ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] title = Column ( String , index = True ) [EOL] description = Column ( String , index = True ) [EOL] owner_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] owner = relationship ( [string] , back_populates = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.User]$ 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from fastapi . testclient import TestClient [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] from . . database import Base [EOL] from . . main import app , get_db [EOL] [EOL] SQLALCHEMY_DATABASE_URL = [string] [EOL] [EOL] engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { [string] : False } ) [EOL] TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) [EOL] [EOL] [EOL] Base . metadata . create_all ( bind = engine ) [EOL] [EOL] [EOL] def override_get_db ( ) : [EOL] try : [EOL] db = TestingSessionLocal ( ) [EOL] yield db [EOL] finally : [EOL] db . close ( ) [EOL] [EOL] [EOL] app . dependency_overrides [ get_db ] = override_get_db [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [EOL] def test_create_user ( ) : [EOL] response = client . post ( [string] , json = { [string] : [string] , [string] : [string] } , ) [EOL] assert response . status_code == [number] , response . text [EOL] data = response . json ( ) [EOL] assert data [ [string] ] == [string] [EOL] assert [string] in data [EOL] user_id = data [ [string] ] [EOL] [EOL] response = client . get ( f" [string] { user_id }" ) [EOL] assert response . status_code == [number] , response . text [EOL] data = response . json ( ) [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == user_id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . staticfiles import StaticFiles [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] app . mount ( [string] , StaticFiles ( directory = [string] ) , name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from datetime import datetime [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from fastapi . encoders import jsonable_encoder [EOL] from pydantic import BaseModel [EOL] [EOL] fake_db = { } [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] title = ... [EOL] timestamp = ... [EOL] description = None [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . put ( [string] ) def update_item ( id , item ) : [EOL] json_compatible_item_data = jsonable_encoder ( item ) [EOL] fake_db [ id ] = json_compatible_item_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import JSONResponse [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] id = ... [EOL] value = ... [EOL] [EOL] [EOL] class Message ( BaseModel ) : [EOL] message = ... [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item , responses = { [number] : { [string] : Message , [string] : [string] } , [number] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] } } } , } , } , ) async def read_item ( item_id ) : [EOL] if item_id == [string] : [EOL] return { [string] : [string] , [string] : [string] } [EOL] else : [EOL] return JSONResponse ( status_code = [number] , content = { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import FileResponse [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] id = ... [EOL] value = ... [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item , responses = { [number] : { [string] : { [string] : { } } , [string] : [string] , } } , ) async def read_item ( item_id , img = None ) : [EOL] if img : [EOL] return FileResponse ( [string] , media_type = [string] ) [EOL] else : [EOL] return { [string] : [string] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Cookie , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( ads_id = Cookie ( None ) ) : [EOL] return { [string] : ads_id } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import fastapi [EOL] import flask [EOL] from fastapi import FastAPI [EOL] from fastapi . middleware . wsgi import WSGIMiddleware [EOL] from flask import Flask , escape , request [EOL] [EOL] flask_app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ flask_app . route ( [string] ) def flask_main ( ) : [EOL] name = request . args . get ( [string] , [string] ) [EOL] return f" [string] { escape ( name ) } [string] " [EOL] [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_main ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] app . mount ( [string] , WSGIMiddleware ( flask_app ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0
from typing import Optional , Union , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] import docs_src [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , Field [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = Field ( ... , example = [string] ) [EOL] description = Field ( None , example = [string] ) [EOL] price = Field ( ... , example = [number] ) [EOL] tax = Field ( None , example = [number] ) [EOL] [EOL] [EOL] @ app . put ( [string] ) async def update_item ( item_id , item ) : [EOL] results = { [string] : item_id , [string] : item } [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , Dict [EOL] import typing [EOL] import contextvars [EOL] from contextvars import ContextVar [EOL] [EOL] import peewee [EOL] [EOL] DATABASE_NAME = [string] [EOL] db_state_default = { [string] : None , [string] : None , [string] : None , [string] : None } [EOL] db_state = ContextVar ( [string] , default = db_state_default . copy ( ) ) [EOL] [EOL] [EOL] class PeeweeConnectionState ( peewee . _ConnectionState ) : [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __setattr__ ( [string] , db_state ) [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def __setattr__ ( self , name , value ) : [EOL] self . _state . get ( ) [ name ] = value [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] return self . _state . get ( ) [ name ] [EOL] [EOL] [EOL] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) [EOL] [EOL] db . _state = PeeweeConnectionState ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar[typing.Dict[builtins.str,None]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar[typing.Dict[builtins.str,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] import schemas [EOL] import time [EOL] from typing import List [EOL] [EOL] from fastapi import Depends , FastAPI , HTTPException [EOL] [EOL] from . import crud , database , models , schemas [EOL] from . database import db_state_default [EOL] [EOL] database . db . connect ( ) [EOL] database . db . create_tables ( [ models . User , models . Item ] ) [EOL] database . db . close ( ) [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] sleep_time = [number] [EOL] [EOL] [EOL] async def reset_db_state ( ) : [EOL] database . db . _state . _state . set ( db_state_default . copy ( ) ) [EOL] database . db . _state . reset ( ) [EOL] [EOL] [EOL] def get_db ( db_state = Depends ( reset_db_state ) ) : [EOL] try : [EOL] database . db . connect ( ) [EOL] yield [EOL] finally : [EOL] if not database . db . is_closed ( ) : [EOL] database . db . close ( ) [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = schemas . User , dependencies = [ Depends ( get_db ) ] ) def create_user ( user ) : [EOL] db_user = crud . get_user_by_email ( email = user . email ) [EOL] if db_user : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return crud . create_user ( user = user ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ schemas . User ] , dependencies = [ Depends ( get_db ) ] ) def read_users ( skip = [number] , limit = [number] ) : [EOL] users = crud . get_users ( skip = skip , limit = limit ) [EOL] return users [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = schemas . User , dependencies = [ Depends ( get_db ) ] ) def read_user ( user_id ) : [EOL] db_user = crud . get_user ( user_id = user_id ) [EOL] if db_user is None : [EOL] raise HTTPException ( status_code = [number] , detail = [string] ) [EOL] return db_user [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = schemas . Item , dependencies = [ Depends ( get_db ) ] , ) def create_item_for_user ( user_id , item ) : [EOL] return crud . create_user_item ( item = item , user_id = user_id ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ schemas . Item ] , dependencies = [ Depends ( get_db ) ] ) def read_items ( skip = [number] , limit = [number] ) : [EOL] items = crud . get_items ( skip = skip , limit = limit ) [EOL] return items [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ schemas . User ] , dependencies = [ Depends ( get_db ) ] ) def read_slow_users ( skip = [number] , limit = [number] ) : [EOL] global sleep_time [EOL] sleep_time = max ( [number] , sleep_time - [number] ) [EOL] time . sleep ( sleep_time ) [comment] [EOL] users = crud . get_users ( skip = skip , limit = limit ) [EOL] return users [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Type , List [EOL] import typing [EOL] import builtins [EOL] import docs_src [EOL] from typing import Any , List , Optional [EOL] [EOL] import peewee [EOL] from pydantic import BaseModel [EOL] from pydantic . utils import GetterDict [EOL] [EOL] [EOL] class PeeweeGetterDict ( GetterDict ) : [EOL] def get ( self , key , default = None ) : [EOL] res = getattr ( self . _obj , key , default ) [EOL] if isinstance ( res , peewee . ModelSelect ) : [EOL] return list ( res ) [EOL] return res [EOL] [EOL] [EOL] class ItemBase ( BaseModel ) : [EOL] title = ... [EOL] description = None [EOL] [EOL] [EOL] class ItemCreate ( ItemBase ) : [EOL] pass [EOL] [EOL] [EOL] class Item ( ItemBase ) : [EOL] id = ... [EOL] owner_id = ... [EOL] [EOL] class Config : [EOL] orm_mode = True [EOL] getter_dict = PeeweeGetterDict [EOL] [EOL] [EOL] class UserBase ( BaseModel ) : [EOL] email = ... [EOL] [EOL] [EOL] class UserCreate ( UserBase ) : [EOL] password = ... [EOL] [EOL] [EOL] class User ( UserBase ) : [EOL] id = ... [EOL] is_active = ... [EOL] items = [ ] [EOL] [EOL] class Config : [EOL] orm_mode = True [EOL] getter_dict = PeeweeGetterDict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.schemas.PeeweeGetterDict]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $typing.List[Item]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.schemas.PeeweeGetterDict]$ 0 0 0
import builtins [EOL] import schemas [EOL] import docs_src [EOL] from . import models , schemas [EOL] [EOL] [EOL] def get_user ( user_id ) : [EOL] return models . User . filter ( models . User . id == user_id ) . first ( ) [EOL] [EOL] [EOL] def get_user_by_email ( email ) : [EOL] return models . User . filter ( models . User . email == email ) . first ( ) [EOL] [EOL] [EOL] def get_users ( skip = [number] , limit = [number] ) : [EOL] return list ( models . User . select ( ) . offset ( skip ) . limit ( limit ) ) [EOL] [EOL] [EOL] def create_user ( user ) : [EOL] fake_hashed_password = user . password + [string] [EOL] db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) [EOL] db_user . save ( ) [EOL] return db_user [EOL] [EOL] [EOL] def get_items ( skip = [number] , limit = [number] ) : [EOL] return list ( models . Item . select ( ) . offset ( skip ) . limit ( limit ) ) [EOL] [EOL] [EOL] def create_user_item ( item , user_id ) : [EOL] db_item = models . Item ( ** item . dict ( ) , owner_id = user_id ) [EOL] db_item . save ( ) [EOL] return db_item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import docs_src [EOL] import peewee [EOL] [EOL] from . database import db [EOL] [EOL] [EOL] class User ( peewee . Model ) : [EOL] email = peewee . CharField ( unique = True , index = True ) [EOL] hashed_password = peewee . CharField ( ) [EOL] is_active = peewee . BooleanField ( default = True ) [EOL] [EOL] class Meta : [EOL] database = db [EOL] [EOL] [EOL] class Item ( peewee . Model ) : [EOL] title = peewee . CharField ( index = True ) [EOL] description = peewee . CharField ( index = True ) [EOL] owner = peewee . ForeignKeyField ( User , backref = [string] ) [EOL] [EOL] class Meta : [EOL] database = db [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.User]$ 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.Item.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docs_src.sql_databases_peewee.sql_app.models.Item.Meta]$ 0 0 0
from typing import Optional , Union , Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Body , FastAPI , status [EOL] from fastapi . responses import JSONResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] items = { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : [string] , [string] : [number] } } [EOL] [EOL] [EOL] @ app . put ( [string] ) async def upsert_item ( item_id , name = Body ( None ) , size = Body ( None ) ) : [EOL] if item_id in items : [EOL] item = items [ item_id ] [EOL] item [ [string] ] = name [EOL] item [ [string] ] = size [EOL] return item [EOL] else : [EOL] item = { [string] : name , [string] : size } [EOL] items [ item_id ] = item [EOL] return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] import fastapi [EOL] import datetime [EOL] import uuid [EOL] from datetime import datetime , time , timedelta [EOL] from typing import Optional [EOL] from uuid import UUID [EOL] [EOL] from fastapi import Body , FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . put ( [string] ) async def read_items ( item_id , start_datetime = Body ( None ) , end_datetime = Body ( None ) , repeat_at = Body ( None ) , process_after = Body ( None ) , ) : [EOL] start_process = start_datetime + process_after [EOL] duration = end_datetime - start_process [EOL] return { [string] : item_id , [string] : start_datetime , [string] : end_datetime , [string] : repeat_at , [string] : process_after , [string] : start_process , [string] : duration , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Response [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) def create_cookie ( response ) : [EOL] response . set_cookie ( key = [string] , value = [string] ) [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import JSONResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] ) def create_cookie ( ) : [EOL] content = { [string] : [string] } [EOL] response = JSONResponse ( content = content ) [EOL] response . set_cookie ( key = [string] , value = [string] ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , EmailStr [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class UserIn ( BaseModel ) : [EOL] username = ... [EOL] password = ... [EOL] email = ... [EOL] full_name = None [EOL] [EOL] [EOL] [comment] [EOL] @ app . post ( [string] , response_model = UserIn ) async def create_user ( user ) : [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pydantic.EmailStr$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , List , Dict , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = [number] [EOL] tags = [ ] [EOL] [EOL] [EOL] items = { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : None , [string] : [number] , [string] : [number] , [string] : [ ] } , } [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id ) : [EOL] return items [ item_id ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Dict [EOL] import fastapi [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = None [EOL] price = ... [EOL] tax = [number] [EOL] [EOL] [EOL] items = { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , } , } [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item , response_model_include = [ [string] , [string] ] , ) async def read_item_name ( item_id ) : [EOL] return items [ item_id ] [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Item , response_model_exclude = [ [string] ] ) async def read_item_public_data ( item_id ) : [EOL] return items [ item_id ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def read_main ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] subapi = FastAPI ( ) [EOL] [EOL] [EOL] @ subapi . get ( [string] ) def read_sub ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] app . mount ( [string] , subapi ) [EOL]	0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0
from typing import Any , Optional [EOL] import typing [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import Depends , FastAPI [EOL] from fastapi . testclient import TestClient [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] async def common_parameters ( q = None , skip = [number] , limit = [number] ) : [EOL] return { [string] : q , [string] : skip , [string] : limit } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_items ( commons = Depends ( common_parameters ) ) : [EOL] return { [string] : [string] , [string] : commons } [EOL] [EOL] [EOL] @ app . get ( [string] ) async def read_users ( commons = Depends ( common_parameters ) ) : [EOL] return { [string] : [string] , [string] : commons } [EOL] [EOL] [EOL] client = TestClient ( app ) [EOL] [EOL] [EOL] async def override_dependency ( q = None ) : [EOL] return { [string] : q , [string] : [number] , [string] : [number] } [EOL] [EOL] [EOL] app . dependency_overrides [ common_parameters ] = override_dependency [EOL] [EOL] [EOL] def test_override_in_items ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : None , [string] : [number] , [string] : [number] } , } [EOL] [EOL] [EOL] def test_override_in_items_with_q ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] } , } [EOL] [EOL] [EOL] def test_override_in_items_with_params ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] from fastapi import FastAPI , Response [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def get_headers ( response ) : [EOL] response . headers [ [string] ] = [string] [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import fastapi [EOL] from fastapi import FastAPI [EOL] from fastapi . responses import JSONResponse [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def get_headers ( ) : [EOL] content = { [string] : [string] } [EOL] headers = { [string] : [string] , [string] : [string] } [EOL] return JSONResponse ( content = content , headers = headers ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] , status_code = [number] ) async def create_item ( name ) : [EOL] return { [string] : name } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fastapi [EOL] import builtins [EOL] from fastapi import FastAPI , status [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . post ( [string] , status_code = status . HTTP_201_CREATED ) async def create_item ( name ) : [EOL] return { [string] : name } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] import docs_src [EOL] import fastapi [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel , EmailStr [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class UserIn ( BaseModel ) : [EOL] username = ... [EOL] password = ... [EOL] email = ... [EOL] full_name = None [EOL] [EOL] [EOL] class UserOut ( BaseModel ) : [EOL] username = ... [EOL] email = ... [EOL] full_name = None [EOL] [EOL] [EOL] class UserInDB ( BaseModel ) : [EOL] username = ... [EOL] hashed_password = ... [EOL] email = ... [EOL] full_name = None [EOL] [EOL] [EOL] def fake_password_hasher ( raw_password ) : [EOL] return [string] + raw_password [EOL] [EOL] [EOL] def fake_save_user ( user_in ) : [EOL] hashed_password = fake_password_hasher ( user_in . password ) [EOL] user_in_db = UserInDB ( ** user_in . dict ( ) , hashed_password = hashed_password ) [EOL] print ( [string] ) [EOL] return user_in_db [EOL] [EOL] [EOL] @ app . post ( [string] , response_model = UserOut ) async def create_user ( user_in ) : [EOL] user_saved = fake_save_user ( user_in ) [EOL] return user_saved [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pydantic.EmailStr$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pydantic.EmailStr$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pydantic.EmailStr$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] from typing import Union [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class BaseItem ( BaseModel ) : [EOL] description = ... [EOL] type = ... [EOL] [EOL] [EOL] class CarItem ( BaseItem ) : [EOL] type = [string] [EOL] [EOL] [EOL] class PlaneItem ( BaseItem ) : [EOL] type = [string] [EOL] size = ... [EOL] [EOL] [EOL] items = { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [number] , } , } [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Union [ PlaneItem , CarItem ] ) async def read_item ( item_id ) : [EOL] return items [ item_id ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List [EOL] import typing [EOL] import fastapi [EOL] from typing import List [EOL] [EOL] from fastapi import FastAPI [EOL] from pydantic import BaseModel [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] description = ... [EOL] [EOL] [EOL] items = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = List [ Item ] ) async def read_items ( ) : [EOL] return items [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0
import fastapi [EOL] from typing import Dict [EOL] [EOL] from fastapi import FastAPI [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = Dict [ str , float ] ) async def read_keyword_weights ( ) : [EOL] return { [string] : [number] , [string] : [number] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def get_full_name ( first_name , last_name ) : [EOL] full_name = first_name . title ( ) + [string] + last_name . title ( ) [EOL] return full_name [EOL] [EOL] [EOL] print ( get_full_name ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def get_name_with_age ( name , age ) : [EOL] name_with_age = name + [string] + age [EOL] return name_with_age [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def get_full_name ( first_name , last_name ) : [EOL] full_name = first_name . title ( ) + [string] + last_name . title ( ) [EOL] return full_name [EOL] [EOL] [EOL] print ( get_full_name ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Union , List [EOL] import typing [EOL] import docs_src [EOL] import datetime [EOL] import builtins [EOL] from datetime import datetime [EOL] from typing import List , Optional [EOL] [EOL] from pydantic import BaseModel [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] id = ... [EOL] name = [string] [EOL] signup_ts = None [EOL] friends = [ ] [EOL] [EOL] [EOL] external_data = { [string] : [string] , [string] : [string] , [string] : [ [number] , [string] , [string] ] , } [EOL] user = User ( ** external_data ) [EOL] print ( user ) [EOL] [comment] [EOL] print ( user . id ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Union[builtins.bytes,builtins.int,builtins.str]],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $docs_src.python_types.tutorial011.User$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Union[builtins.bytes,builtins.int,builtins.str]],builtins.str]]$ 0 0 0 0 $docs_src.python_types.tutorial011.User$ 0 0 0 0 0 0 $docs_src.python_types.tutorial011.User$ 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] def process_items ( items ) : [EOL] for item in items : [EOL] print ( item ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import Set , Tuple [EOL] [EOL] [EOL] def process_items ( items_t , items_s ) : [EOL] return items_t , items_s [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] class Person : [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] [EOL] def get_person_name ( one_person ) : [EOL] return one_person . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def get_items ( item_a , item_b , item_c , item_d , item_e ) : [EOL] return item_a , item_b , item_c , item_d , item_d , item_e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def get_name_with_age ( name , age ) : [EOL] name_with_age = name + [string] + str ( age ) [EOL] return name_with_age [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] [EOL] def process_items ( prices ) : [EOL] for item_name , item_price in prices . items ( ) : [EOL] print ( item_name ) [EOL] print ( item_price ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] [EOL] def say_hi ( name = None ) : [EOL] if name is not None : [EOL] print ( f" [string] { name } [string] " ) [EOL] else : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] from fastapi . params import Body , Cookie , Depends , Header , Param , Path , Query [EOL] [EOL] test_data = [ [string] , None , ... , [number] , [ ] ] [EOL] [EOL] [EOL] def get_user ( ) : [EOL] return { } [comment] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = test_data ) def params ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_param_repr ( params ) : [EOL] assert repr ( Param ( params ) ) == [string] + str ( params ) + [string] [EOL] [EOL] [EOL] def test_path_repr ( params ) : [EOL] assert repr ( Path ( params ) ) == [string] [EOL] [EOL] [EOL] def test_query_repr ( params ) : [EOL] assert repr ( Query ( params ) ) == [string] + str ( params ) + [string] [EOL] [EOL] [EOL] def test_header_repr ( params ) : [EOL] assert repr ( Header ( params ) ) == [string] + str ( params ) + [string] [EOL] [EOL] [EOL] def test_cookie_repr ( params ) : [EOL] assert repr ( Cookie ( params ) ) == [string] + str ( params ) + [string] [EOL] [EOL] [EOL] def test_body_repr ( params ) : [EOL] assert repr ( Body ( params ) ) == [string] + str ( params ) + [string] [EOL] [EOL] [EOL] def test_depends_repr ( ) : [EOL] assert repr ( Depends ( ) ) == [string] [EOL] assert repr ( Depends ( get_user ) ) == [string] [EOL] assert repr ( Depends ( use_cache = False ) ) == [string] [EOL] assert ( repr ( Depends ( get_user , use_cache = False ) ) == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] [EOL] import pytest [EOL] [EOL] skip_py36 = pytest . mark . skipif ( sys . version_info < ( [number] , [number] ) , reason = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
from typing import Any , Callable , Dict [EOL] import typing [EOL] from docs_src . dependency_testing . tutorial001 import ( app , client , test_override_in_items , test_override_in_items_with_params , test_override_in_items_with_q , ) [EOL] [EOL] [EOL] def test_override_in_items_run ( ) : [EOL] test_override_in_items ( ) [EOL] [EOL] [EOL] def test_override_in_items_with_q_run ( ) : [EOL] test_override_in_items_with_q ( ) [EOL] [EOL] [EOL] def test_override_in_items_with_params_run ( ) : [EOL] test_override_in_items_with_params ( ) [EOL] [EOL] [EOL] def test_override_in_users ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] , response . text [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : None , [string] : [number] , [string] : [number] } , } [EOL] [EOL] [EOL] def test_override_in_users_with_q ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] , response . text [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] } , } [EOL] [EOL] [EOL] def test_override_in_users_with_params ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] , response . text [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] } , } [EOL] [EOL] [EOL] def test_normal_app ( ) : [EOL] app . dependency_overrides = None [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] , response . text [EOL] assert response . json ( ) == { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pytest [EOL] [EOL] from docs_src . async_tests . test_main import test_root [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_async_testing ( ) : [EOL] await test_root ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
from typing import Any , Union , Dict [EOL] import typing [EOL] from docs_src . app_testing . tutorial001 import client , test_read_main [EOL] [EOL] openapi_schema = { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : { [string] : { [string] : { [string] : { [string] : [string] , [string] : { [string] : { [string] : { } } } , } } , [string] : [string] , [string] : [string] , } } } , } [EOL] [EOL] [EOL] def test_openapi_schema ( ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] , response . text [EOL] assert response . json ( ) == openapi_schema [EOL] [EOL] [EOL] def test_main ( ) : [EOL] test_read_main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from docs_src . app_testing . tutorial002 import test_read_main , test_websocket [EOL] [EOL] [EOL] def test_main ( ) : [EOL] test_read_main ( ) [EOL] [EOL] [EOL] def test_ws ( ) : [EOL] test_websocket ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from docs_src . app_testing . tutorial003 import test_read_items [EOL] [EOL] [EOL] def test_main ( ) : [EOL] test_read_items ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
import pathlib [EOL] import importlib [EOL] from pathlib import Path [EOL] [EOL] [EOL] def test_testing_dbs ( ) : [EOL] test_db = Path ( [string] ) [EOL] if test_db . is_file ( ) : [comment] [EOL] test_db . unlink ( ) [EOL] [comment] [EOL] from docs_src . sql_databases . sql_app . tests import test_sql_app [EOL] [EOL] [comment] [EOL] importlib . reload ( test_sql_app ) [EOL] test_sql_app . test_create_user ( ) [EOL] if test_db . is_file ( ) : [comment] [EOL] test_db . unlink ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
from typing import Any , Dict [EOL] import builtins [EOL] import typing [EOL] import fastapi [EOL] import pending_tests [EOL] from fastapi import ( Body , Cookie , Depends , FastAPI , File , Form , Header , Path , Query , Security , ) [EOL] from fastapi . security import ( HTTPBasic , OAuth2 , OAuth2PasswordBearer , OAuth2PasswordRequestForm , ) [EOL] from pydantic import BaseModel [EOL] from starlette . responses import HTMLResponse , JSONResponse , PlainTextResponse [EOL] from starlette . status import HTTP_202_ACCEPTED [EOL] [EOL] app = FastAPI ( ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def get_security ( sec = Security ( HTTPBasic ( ) ) ) : [EOL] return sec [EOL] [EOL] [EOL] reusable_oauth2 = OAuth2 ( flows = { [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , } } ) [EOL] [EOL] [EOL] @ app . get ( [string] ) def get_security_oauth2 ( sec = Security ( reusable_oauth2 , scopes = [ [string] ] ) ) : [EOL] return sec [EOL] [EOL] [EOL] @ app . post ( [string] ) def post_token ( request_data = Form ( ... ) ) : [EOL] data = request_data . parse ( ) [EOL] access_token = data . username + [string] + data . password [EOL] return { [string] : access_token } [EOL] [EOL] [EOL] class Item ( BaseModel ) : [EOL] name = ... [EOL] price = ... [EOL] is_offer = ... [EOL] [EOL] [EOL] class FakeDB : [EOL] def __init__ ( self ) : [EOL] self . data = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [EOL] class DBConnectionManager : [EOL] def __init__ ( self ) : [EOL] self . db = FakeDB ( ) [EOL] [EOL] def __call__ ( self ) : [EOL] return self . db [EOL] [EOL] [EOL] connection_manager = DBConnectionManager ( ) [EOL] [EOL] [EOL] class TokenUserData ( BaseModel ) : [EOL] username = ... [EOL] password = ... [EOL] [EOL] [EOL] class UserInDB ( BaseModel ) : [EOL] username = ... [EOL] password = ... [EOL] first_name = ... [EOL] last_name = ... [EOL] [EOL] [EOL] def require_token ( token = Security ( reusable_oauth2 , scopes = [ [string] , [string] ] ) ) : [EOL] raw_token = token . replace ( [string] , [string] ) [EOL] [comment] [EOL] username , password = raw_token . split ( [string] ) [EOL] return TokenUserData ( username = username , password = password ) [EOL] [EOL] [EOL] def require_user ( db = Depends ( connection_manager ) , user_data = Depends ( require_token ) , ) : [EOL] return db . data [ user_data . username ] [EOL] [EOL] [EOL] class UserOut ( BaseModel ) : [EOL] username = ... [EOL] first_name = ... [EOL] last_name = ... [EOL] [EOL] [EOL] @ app . get ( [string] , response_model = UserOut ) def get_dependency ( user = Depends ( require_user ) ) : [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pending_tests.main.FakeDB$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pending_tests.main.DBConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $fastapi.security.oauth2.OAuth2$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pending_tests.main.DBConnectionManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $fastapi.applications.FastAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict [EOL] import builtins [EOL] import github [EOL] import artifact [EOL] import pathlib [EOL] import typing [EOL] import logging [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] from typing import List , Optional [EOL] [EOL] import httpx [EOL] from pydantic import BaseModel , BaseSettings , SecretStr [EOL] [EOL] github_api = [string] [EOL] netlify_api = [string] [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] input_name = ... [EOL] input_token = ... [EOL] input_path = ... [EOL] github_repository = ... [EOL] github_event_path = ... [EOL] github_event_name = None [EOL] [EOL] [EOL] class Artifact ( BaseModel ) : [EOL] id = ... [EOL] node_id = ... [EOL] name = ... [EOL] size_in_bytes = ... [EOL] url = ... [EOL] archive_download_url = ... [EOL] expired = ... [EOL] created_at = ... [EOL] updated_at = ... [EOL] [EOL] [EOL] class ArtifactResponse ( BaseModel ) : [EOL] total_count = ... [EOL] artifacts = ... [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] settings = Settings ( ) [EOL] logging . info ( f" [string] { settings . json ( ) }" ) [EOL] github_headers = { [string] : f" [string] { settings . input_token . get_secret_value ( ) }" } [EOL] response = httpx . get ( f"{ github_api } [string] { settings . github_repository } [string] " , headers = github_headers , ) [EOL] data = response . json ( ) [EOL] artifacts_response = ArtifactResponse . parse_obj ( data ) [EOL] use_artifact = None [EOL] for artifact in artifacts_response . artifacts : [EOL] if artifact . name == settings . input_name : [EOL] use_artifact = artifact [EOL] break [EOL] assert use_artifact [EOL] file_response = httpx . get ( use_artifact . archive_download_url , headers = github_headers , timeout = [number] ) [EOL] zip_file = Path ( settings . input_path ) [EOL] zip_file . write_bytes ( file_response . content ) [EOL] logging . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pydantic.SecretStr$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[Artifact]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict , List [EOL] import typing [EOL] import previews [EOL] import github [EOL] import builtins [EOL] import logging [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] from typing import List , Optional [EOL] [EOL] import httpx [EOL] from github import Github [EOL] from github . NamedUser import NamedUser [EOL] from pydantic import BaseModel , BaseSettings , SecretStr [EOL] [EOL] github_api = [string] [EOL] netlify_api = [string] [EOL] [EOL] [EOL] class Settings ( BaseSettings ) : [EOL] input_token = ... [EOL] github_repository = ... [EOL] github_event_path = ... [EOL] github_event_name = None [EOL] [EOL] [EOL] class Artifact ( BaseModel ) : [EOL] id = ... [EOL] node_id = ... [EOL] name = ... [EOL] size_in_bytes = ... [EOL] url = ... [EOL] archive_download_url = ... [EOL] expired = ... [EOL] created_at = ... [EOL] updated_at = ... [EOL] [EOL] [EOL] class ArtifactResponse ( BaseModel ) : [EOL] total_count = ... [EOL] artifacts = ... [EOL] [EOL] [EOL] def get_message ( commit ) : [EOL] return f" [string] { commit } [string] " [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] settings = Settings ( ) [EOL] logging . info ( f" [string] { settings . json ( ) }" ) [EOL] g = Github ( settings . input_token . get_secret_value ( ) ) [EOL] repo = g . get_repo ( settings . github_repository ) [EOL] owner = repo . owner [EOL] headers = { [string] : f" [string] { settings . input_token . get_secret_value ( ) }" } [EOL] prs = list ( repo . get_pulls ( state = [string] ) ) [EOL] response = httpx . get ( f"{ github_api } [string] { settings . github_repository } [string] " , headers = headers , ) [EOL] data = response . json ( ) [EOL] artifacts_response = ArtifactResponse . parse_obj ( data ) [EOL] for pr in prs : [EOL] logging . info ( [string] ) [EOL] logging . info ( f" [string] { pr . number } [string] { pr . title }" ) [EOL] pr_comments = list ( pr . get_issue_comments ( ) ) [EOL] pr_commits = list ( pr . get_commits ( ) ) [EOL] last_commit = pr_commits [ [number] ] [EOL] for pr_commit in pr_commits : [EOL] if pr_commit . commit . author . date > last_commit . commit . author . date : [EOL] last_commit = pr_commit [EOL] commit = last_commit . commit . sha [EOL] logging . info ( f" [string] { commit }" ) [EOL] message = get_message ( commit ) [EOL] notified = False [EOL] for pr_comment in pr_comments : [EOL] if message in pr_comment . body : [EOL] notified = True [EOL] logging . info ( f" [string] { notified }" ) [EOL] if not notified : [EOL] artifact_name = f" [string] { commit }" [EOL] use_artifact = None [EOL] for artifact in artifacts_response . artifacts : [EOL] if artifact . name == artifact_name : [EOL] use_artifact = artifact [EOL] break [EOL] if not use_artifact : [EOL] logging . info ( [string] ) [EOL] else : [EOL] logging . info ( f" [string] { use_artifact . name }" ) [EOL] response = httpx . post ( [string] , headers = headers , json = { [string] : [string] , [string] : { [string] : f"{ pr . number }" , [string] : artifact_name , [string] : commit , } , } , ) [EOL] logging . info ( f" [string] { response . status_code } [string] { response . content }" ) [EOL] logging . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.SecretStr$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[Artifact]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $github.NamedUser.NamedUser$ 0 $typing.Any$ 0 $github.NamedUser.NamedUser$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0