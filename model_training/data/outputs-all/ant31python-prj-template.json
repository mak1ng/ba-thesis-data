[comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List [EOL] import typing [EOL] try : [EOL] from setuptools import setup [EOL] except ImportError : [EOL] from distutils . core import setup [EOL] [EOL] [EOL] with open ( [string] ) as readme_file : [EOL] readme = readme_file . read ( ) [EOL] [EOL] requirements = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] celery_requirements = [ [string] , [string] , ] [EOL] [EOL] test_requirements = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = readme , author = [string] , author_email = [string] , url = [string] , packages = [ [string] , [string] , [string] , [string] , ] , package_dir = { [string] : [string] } , include_package_data = True , install_requires = requirements + celery_requirements , license = [string] , zip_safe = False , keywords = [ [string] ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , ] , test_suite = [string] , tests_require = test_requirements , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Pattern , Any , Dict , Set [EOL] import typing [EOL] from __future__ import absolute_import [EOL] [EOL] import datetime [EOL] import json [EOL] import logging [EOL] import re [EOL] import traceback [EOL] [EOL] LOG_FORMAT_REGEXP = re . compile ( [string] , re . IGNORECASE ) [EOL] [EOL] [EOL] def _json_default ( obj ) : [EOL] [docstring] [EOL] if isinstance ( obj , ( datetime . date , datetime . time , datetime . datetime ) ) : [EOL] return obj . isoformat ( ) [EOL] [EOL] elif isinstance ( obj , Exception ) : [EOL] return [string] % str ( obj ) [EOL] [EOL] return str ( obj ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RESERVED_ATTRS = set ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] class JsonFormatter ( logging . Formatter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . json_default = kwargs . pop ( [string] , _json_default ) [EOL] self . json_encoder = kwargs . pop ( [string] , None ) [EOL] self . json_serializer = kwargs . pop ( [string] , json . dumps ) [EOL] self . default_values = kwargs . pop ( [string] , { } ) [EOL] self . prefix_key = kwargs . pop ( [string] , [string] ) [EOL] [EOL] logging . Formatter . __init__ ( self , * args , ** kwargs ) [EOL] [EOL] self . _fmt_parameters = self . _parse_format_string ( ) [EOL] self . _skip_fields = set ( self . _fmt_parameters ) [EOL] self . _skip_fields . update ( RESERVED_ATTRS ) [EOL] [EOL] def _parse_format_string ( self ) : [EOL] [docstring] [EOL] standard_formatters = LOG_FORMAT_REGEXP [EOL] return standard_formatters . findall ( self . _fmt ) [EOL] [EOL] def add_fields ( self , log_record , record , message_dict ) : [EOL] [docstring] [EOL] [EOL] target = log_record [EOL] if self . prefix_key : [EOL] log_record [ self . prefix_key ] = { } [EOL] target = log_record [ self . prefix_key ] [EOL] [EOL] for field , value in record . __dict__ . items ( ) : [EOL] if field in self . _fmt_parameters and field in RESERVED_ATTRS : [EOL] log_record [ field ] = value [EOL] elif field not in RESERVED_ATTRS : [EOL] target [ field ] = value [EOL] [EOL] target . update ( message_dict ) [EOL] target . update ( self . default_values ) [EOL] [EOL] def format ( self , record ) : [EOL] [docstring] [EOL] message_dict = { } [EOL] if isinstance ( record . msg , dict ) : [EOL] message_dict = record . msg [EOL] record . message = None [EOL] if [string] in message_dict : [EOL] record . message = message_dict . pop ( [string] , [string] ) [EOL] else : [EOL] record . message = record . getMessage ( ) [EOL] [EOL] [comment] [EOL] if [string] in self . _fmt_parameters : [EOL] record . asctime = self . formatTime ( record , self . datefmt ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if record . exc_info and not message_dict . get ( [string] ) : [EOL] message_dict [ [string] ] = traceback . format_list ( traceback . extract_tb ( record . exc_info [ [number] ] ) ) [EOL] log_record = { } [EOL] [EOL] self . add_fields ( log_record , record , message_dict ) [EOL] [EOL] return self . json_serializer ( log_record , default = self . json_default , cls = self . json_encoder ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] import celery [EOL] [EOL] app = celery . Celery ( [string] , include = [ [string] ] ) [EOL] app . config_from_object ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] app . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Union , Literal [EOL] import typing [EOL] import typing_extensions [EOL] import os [EOL] [EOL] broker_url = os . getenv ( [string] , [string] ) [EOL] result_backend = os . getenv ( [string] , [string] ) [EOL] task_serializer = [string] [EOL] result_serializer = [string] [EOL] accept_content = [ [string] ] [EOL] timezone = [string] [EOL] enable_utc = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
class Config ( object ) : [EOL] [docstring] [EOL] DEBUG = False [EOL] [EOL] [EOL] class ProductionConfig ( Config ) : [EOL] [docstring] [EOL] [EOL] [EOL] class DevelopmentConfig ( Config ) : [EOL] [docstring] [EOL] DEBUG = True [EOL]	0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
	0
	0