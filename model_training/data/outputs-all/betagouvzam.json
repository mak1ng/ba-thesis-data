from typing import List , Any [EOL] import pathlib [EOL] import typing [EOL] import admin [EOL] import os [EOL] from contextlib import contextmanager [EOL] from datetime import datetime [EOL] from hashlib import md5 [EOL] from pathlib import Path [EOL] from shlex import quote [EOL] from string import Template [EOL] [EOL] from pytz import UTC [EOL] [EOL] [EOL] class NginxFriendlyTemplate ( Template ) : [EOL] delimiter = [string] [EOL] [EOL] [EOL] @ contextmanager def template_local_file ( template_filename , output_filename , data ) : [EOL] with open ( template_filename , encoding = [string] ) as template_file : [EOL] template = NginxFriendlyTemplate ( template_file . read ( ) ) [EOL] with open ( output_filename , mode = [string] , encoding = [string] ) as output_file : [EOL] output_file . write ( template . substitute ( ** data ) ) [EOL] yield [EOL] os . remove ( output_filename ) [EOL] [EOL] [EOL] def sudo_put ( ctx , local , remote , chown = None ) : [EOL] tmp = str ( Path ( [string] ) / md5 ( remote . encode ( ) ) . hexdigest ( ) ) [EOL] ctx . put ( local , tmp ) [EOL] ctx . sudo ( f" [string] { quote ( tmp ) } [string] { quote ( remote ) }" ) [EOL] if chown : [EOL] ctx . sudo ( f" [string] { chown } [string] { quote ( remote ) }" ) [EOL] [EOL] [EOL] def put_dir ( ctx , local , remote , chown = None ) : [EOL] local = Path ( local ) [EOL] remote = Path ( remote ) [EOL] for path in local . rglob ( [string] ) : [EOL] relative_path = path . relative_to ( local ) [EOL] if str ( relative_path ) . startswith ( [string] ) : [EOL] [comment] [EOL] continue [EOL] if path . is_dir ( ) : [EOL] ctx . sudo ( f" [string] { quote ( remote / relative_path ) }" ) [EOL] else : [EOL] sudo_put ( ctx , str ( path ) , str ( remote / relative_path ) , chown ) [EOL] [EOL] [EOL] def create_directory ( ctx , path , owner ) : [EOL] ctx . sudo ( f" [string] { quote ( path ) }" ) [EOL] ctx . sudo ( f" [string] { owner } [string] { quote ( path ) }" ) [EOL] [EOL] [EOL] def create_user ( ctx , name , home_dir ) : [EOL] if ctx . sudo ( f" [string] { name }" , warn = True , hide = True ) . failed : [EOL] ctx . sudo ( f" [string] { quote ( home_dir ) } [string] { name }" ) [EOL] [EOL] [EOL] def clone_repo ( ctx , repo , branch , path , user ) : [EOL] if ctx . run ( f" [string] { quote ( path ) }" , warn = True , hide = True ) . failed : [EOL] ctx . sudo ( f" [string] { branch } [string] { repo } [string] { quote ( path ) }" , user = user ) [EOL] else : [EOL] git = f" [string] { quote ( path ) } [string] { quote ( path + [string] ) }" [EOL] ctx . sudo ( f"{ git } [string] " , user = user ) [EOL] ctx . sudo ( f"{ git } [string] { branch }" , user = user ) [EOL] ctx . sudo ( f"{ git } [string] { branch }" , user = user ) [EOL] [EOL] [EOL] def install_locale ( ctx , locale_name ) : [EOL] installed_locales = [ line . strip ( ) for line in ctx . sudo ( f" [string] " , hide = True ) . stdout . splitlines ( ) ] [EOL] if locale_name not in installed_locales : [EOL] ctx . sudo ( f" [string] { locale_name }" ) [EOL] [EOL] [EOL] def create_postgres_user ( ctx , dbuser , dbpassword ) : [EOL] sql = f" [string] { dbuser } [string] { dbpassword } [string] " [EOL] run_as_postgres ( ctx , f' [string] { sql } [string] ' ) [EOL] [EOL] [EOL] def create_postgres_database ( ctx , dbname , owner , encoding , locale ) : [EOL] run_as_postgres ( ctx , ( f" [string] { owner } [string] { encoding } [string] " f" [string] { locale } [string] { locale } [string] { dbname } [string] " ) , ) [EOL] [EOL] [EOL] def run_as_postgres ( ctx , cmd ) : [EOL] return ctx . run ( f" [string] { cmd }" ) [EOL] [EOL] [EOL] def timestamp ( ) : [EOL] return UTC . localize ( datetime . utcnow ( ) ) . isoformat ( timespec = [string] ) [EOL] [EOL] [EOL] def cpu_count ( ctx ) : [EOL] return int ( ctx . run ( [string] ) . stdout . strip ( ) ) [EOL] [EOL] [EOL] def install_packages ( ctx , * names ) : [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] . format ( [string] . join ( names ) ) ) [EOL] [EOL] [EOL] def debconf ( ctx , package , key , type_ , value ) : [EOL] ctx . sudo ( f" [string] { package } [string] { key } [string] { type_ } [string] { quote ( value ) } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from tasks . backup import * [EOL] from tasks . deploy import * [EOL] from tasks . monitoring import * [EOL] from tasks . system import * [EOL] [EOL] [EOL] @ task def bootstrap ( ctx , hostname = [string] , user = [string] , os_storage_url = [string] , os_auth_token = [string] ) : [EOL] if hostname : [EOL] set_hostname ( ctx , hostname ) [EOL] else : [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] [EOL] system ( ctx ) [EOL] monitoring ( ctx ) [EOL] setup_backups ( ctx , os_storage_url , os_auth_token ) [EOL] http ( ctx , ssl = False ) [EOL] [EOL] [comment] [EOL] if ( user != [string] [EOL] and not ctx . sudo ( f" [string] { user } [string] " , warn = True ) . ok ) : [EOL] basicauth ( ctx , user ) [EOL] [EOL] [comment] [EOL] if ctx . host == hostname : [EOL] letsencrypt ( ctx ) [EOL] else : [EOL] print ( [string] ) [EOL] setup_self_signed_cert ( ctx ) [EOL] [EOL] [comment] [EOL] http ( ctx , ssl = True ) [EOL] [EOL] [EOL] @ task def logs_webapp ( ctx , lines = [number] ) : [EOL] ctx . sudo ( f" [string] { lines }" ) [EOL] [EOL] [EOL] @ task def logs_worker ( ctx , lines = [number] ) : [EOL] ctx . sudo ( f" [string] { lines }" ) [EOL] [EOL] [EOL] @ task def logs_http ( ctx , lines = [number] ) : [EOL] ctx . sudo ( [string] . join ( [ [string] , [string] , [string] , f" [string] { lines }" , ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from shlex import quote [EOL] [EOL] from fabric . tasks import task [EOL] [EOL] from tools import create_user , debconf , install_packages , sudo_put , template_local_file [EOL] [EOL] [EOL] @ task def set_hostname ( ctx , hostname ) : [EOL] ctx . sudo ( f" [string] { hostname }" ) [EOL] ctx . sudo ( f" [string] { hostname } [string] " ) [EOL] [EOL] [EOL] @ task def system ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] install_packages ( ctx , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] create_user ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] setup_postgres ( ctx ) [EOL] setup_redis ( ctx ) [EOL] setup_smtp_server ( ctx ) [EOL] setup_unattended_upgrades ( ctx ) [EOL] [EOL] [EOL] @ task def setup_postgres ( ctx ) : [EOL] install_packages ( ctx , [string] ) [EOL] shared_buffers = total_memory ( ctx ) // [number] [comment] [EOL] with template_local_file ( [string] , [string] , { [string] : shared_buffers } , ) : [EOL] sudo_put ( ctx , [string] , [string] , chown = [string] , ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def total_memory ( ctx ) : [EOL] [docstring] [EOL] mem_total = int ( ctx . run ( [string] ) . stdout . strip ( ) ) [EOL] return mem_total // [number] [EOL] [EOL] [EOL] @ task def setup_redis ( ctx ) : [EOL] install_packages ( ctx , [string] ) [EOL] sudo_put ( ctx , [string] , [string] , chown = [string] , ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] @ task def setup_smtp_server ( ctx ) : [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] debconf ( ctx , [string] , [string] , [string] , [string] ) [EOL] debconf ( ctx , [string] , [string] , [string] , hostname ) [EOL] install_packages ( ctx , [string] ) [EOL] [EOL] [EOL] @ task def setup_unattended_upgrades ( ctx ) : [EOL] install_packages ( ctx , [string] , [string] ) [EOL] admins = ctx . config . get ( [string] , [ ] ) [EOL] with template_local_file ( [string] , [string] , { [string] : [string] . join ( admins ) } , ) : [EOL] sudo_put ( ctx , [string] , [string] , ) [EOL] [EOL] [EOL] @ task def http ( ctx , ssl = False ) : [EOL] sudo_put ( ctx , [string] , [string] , ) [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] [EOL] if ssl : [EOL] ssl_cert = f" [string] { hostname } [string] " [EOL] ssl_key = f" [string] { hostname } [string] " [EOL] if not ctx . sudo ( f" [string] { quote ( ssl_cert ) } [string] " , warn = True ) . ok : [EOL] ssl_cert = [string] [EOL] ssl_key = [string] [EOL] [EOL] htpasswd_exists = ctx . sudo ( f" [string] " , warn = True ) . ok [EOL] [EOL] with template_local_file ( [string] , [string] , { [string] : hostname , [string] : ctx . config [ [string] ] , [string] : ssl_cert , [string] : ssl_key , [string] : [string] if htpasswd_exists else [string] , } , ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] else : [EOL] [comment] [EOL] with template_local_file ( [string] , [string] , { [string] : hostname } , ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] @ task def basicauth ( ctx , user = [string] ) : [EOL] install_packages ( ctx , [string] ) [EOL] [comment] [EOL] ctx . sudo ( f" [string] " ) [EOL] ctx . sudo ( f" [string] { user }" ) [EOL] [EOL] [EOL] @ task def letsencrypt ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] install_packages ( ctx , [string] , [string] ) [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] with template_local_file ( [string] , [string] , { [string] : hostname } , ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] @ task def setup_self_signed_cert ( ctx ) : [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] ctx . sudo ( [string] [string] [string] [string] [string] [string] f" [string] { hostname } [string] " ) [EOL] [EOL] [EOL] @ task def sshkeys ( ctx ) : [EOL] for name , key in ctx . config . get ( [string] , { } ) . items ( ) : [EOL] ctx . run ( [string] [string] [string] . format ( key = key ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import uuid [EOL] import requests [EOL] import typing [EOL] from pathlib import Path [EOL] from shlex import quote [EOL] from uuid import uuid4 [EOL] [EOL] import requests [EOL] from commonmark import commonmark [EOL] from fabric . tasks import task [EOL] [EOL] from tools import ( clone_repo , cpu_count , create_directory , create_postgres_user , create_postgres_database , create_user , install_locale , run_as_postgres , sudo_put , template_local_file , timestamp , ) [EOL] [EOL] [EOL] DEFAULT_EMAIL_WHITELIST_PATTERN = [string] [EOL] [EOL] BADGE_COLORS = { [string] : [string] , [string] : [string] } [EOL] [EOL] app_dir = [string] [EOL] venv_dir = [string] [EOL] user = [string] [EOL] [EOL] [EOL] @ task def deploy_changelog ( ctx , source = [string] ) : [EOL] content = commonmark ( Path ( source ) . read_text ( ) ) [EOL] with template_local_file ( [string] , [string] , { [string] : content } ) : [EOL] sudo_put ( ctx , [string] , [string] , chown = [string] ) [EOL] [EOL] [EOL] @ task def deploy_repondeur ( ctx , branch = [string] , message = [string] , session_secret = [string] , auth_secret = [string] , wipe = False , dbname = [string] , dbuser = [string] , dbpassword = [string] , ) : [EOL] if not session_secret : [EOL] session_secret = retrieve_secret_from_config ( ctx , [string] ) [EOL] if not session_secret : [EOL] session_secret = uuid4 ( ) [EOL] print ( f" [string] { session_secret }" ) [EOL] [EOL] if not auth_secret : [EOL] auth_secret = retrieve_secret_from_config ( ctx , [string] ) [EOL] if not auth_secret : [EOL] auth_secret = uuid4 ( ) [EOL] print ( f" [string] { auth_secret }" ) [EOL] [EOL] hostname = ctx . run ( [string] ) . stdout . strip ( ) [EOL] environment = hostname . split ( [string] , [number] ) [ [number] ] [EOL] menu_badge_label = environment [ [number] : ] if environment . startswith ( [string] ) else [string] [EOL] menu_badge_color = BADGE_COLORS . get ( menu_badge_label , [string] ) [EOL] [EOL] deploy_id = rollbar_deploy_start ( ctx , branch , environment , comment = f" [string] { branch } [string] { message }" ) [EOL] [EOL] try : [EOL] install_locale ( ctx , [string] ) [EOL] create_user ( ctx , name = user , home_dir = [string] ) [EOL] clone_repo ( ctx , repo = [string] , branch = branch , path = [string] , user = user , ) [EOL] [EOL] [comment] [EOL] stop_worker_service ( ctx , warn = True ) [EOL] [EOL] create_virtualenv ( ctx , venv_dir = venv_dir , user = user ) [EOL] install_requirements ( ctx , app_dir = app_dir , venv_dir = venv_dir , user = user ) [EOL] [EOL] create_directory ( ctx , [string] , owner = user ) [EOL] [EOL] setup_config ( ctx , app_dir = app_dir , user = user , context = { [string] : f" [string] { dbuser } [string] { dbpassword } [string] { dbname }" , [string] : environment , [string] : branch , [string] : session_secret , [string] : auth_secret , [string] : ctx . config [ [string] ] , [string] : menu_badge_label , [string] : menu_badge_color , } , ) [EOL] [EOL] [comment] [EOL] stop_webapp_service ( ctx , warn = True ) [EOL] [EOL] if wipe : [EOL] wipe_db ( ctx , dbname = dbname ) [EOL] setup_db ( ctx , dbname = dbname , dbuser = dbuser , dbpassword = dbpassword ) [EOL] migrate_db ( ctx , app_dir = app_dir , venv_dir = venv_dir , user = user ) [EOL] [EOL] [comment] [EOL] if not whitelist_list ( ctx ) : [EOL] whitelist_add ( ctx , pattern = DEFAULT_EMAIL_WHITELIST_PATTERN , comment = [string] , ) [EOL] [EOL] setup_webapp_service ( ctx ) [EOL] setup_worker_service ( ctx ) [EOL] [EOL] reset_data_locks ( ctx , app_dir = app_dir , venv_dir = venv_dir , user = user ) [EOL] [EOL] [comment] [EOL] load_data ( ctx , app_dir = app_dir , venv_dir = venv_dir , user = user ) [EOL] [EOL] [comment] [EOL] update_dossiers ( ctx ) [EOL] [EOL] [comment] [EOL] start_webapp_service ( ctx ) [EOL] start_worker_service ( ctx ) [EOL] [EOL] except Exception as exc : [EOL] rollbar_deploy_update ( ctx . config [ [string] ] , deploy_id , status = [string] ) [EOL] else : [EOL] rollbar_deploy_update ( ctx . config [ [string] ] , deploy_id , status = [string] ) [EOL] [EOL] [EOL] def retrieve_secret_from_config ( ctx , name ) : [EOL] secret = ctx . run ( f' [string] { name } [string] ' , hide = True , ) . stdout . strip ( ) [EOL] return secret [EOL] [EOL] [EOL] def create_virtualenv ( ctx , venv_dir , user ) : [EOL] ctx . sudo ( f" [string] { venv_dir }" , user = user ) [EOL] [EOL] [EOL] def install_requirements ( ctx , app_dir , venv_dir , user ) : [EOL] ctx . sudo ( f"{ venv_dir } [string] " , user = user ) [EOL] cmd = ( f"{ venv_dir } [string] " [string] [string] [string] ) [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] def setup_config ( ctx , app_dir , user , context ) : [EOL] with template_local_file ( [string] , [string] , context ) : [EOL] sudo_put ( ctx , [string] , f"{ app_dir } [string] " , chown = user ) [EOL] [EOL] [EOL] @ task def wipe_db ( ctx , dbname ) : [EOL] backup_db ( ctx , dbname ) [EOL] [comment] [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] run_as_postgres ( ctx , f" [string] { dbname }" ) [EOL] [EOL] [EOL] @ task def backup_db ( ctx , dbname = [string] ) : [EOL] create_directory ( ctx , [string] , owner = [string] ) [EOL] backup_filename = f" [string] { timestamp ( ) } [string] " [EOL] run_as_postgres ( ctx , f" [string] { dbname } [string] { backup_filename }" , ) [EOL] [EOL] [EOL] @ task def setup_db ( ctx , dbname , dbuser , dbpassword , encoding = [string] , locale = [string] ) : [EOL] create_postgres_user ( ctx , dbuser , dbpassword ) [EOL] create_postgres_database ( ctx , dbname , dbuser , encoding , locale ) [EOL] [EOL] [EOL] @ task def migrate_db ( ctx , app_dir , venv_dir , user ) : [EOL] create_directory ( ctx , [string] , owner = user ) [EOL] cmd = f"{ venv_dir } [string] " [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] def setup_webapp_service ( ctx ) : [EOL] [comment] [EOL] ctx . sudo ( [string] . join ( [ [string] , [string] , [string] , [string] , ] ) + [string] ) [EOL] with template_local_file ( [string] , [string] , { [string] : ( cpu_count ( ctx ) * [number] ) + [number] , [string] : ctx . config [ [string] ] , } , ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def start_webapp_service ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def stop_webapp_service ( ctx , warn = False ) : [EOL] ctx . sudo ( [string] , warn = warn ) [EOL] [EOL] [EOL] def restart_webapp_service ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def setup_worker_service ( ctx ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def start_worker_service ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def stop_worker_service ( ctx , warn = False ) : [EOL] ctx . sudo ( [string] , warn = warn ) [EOL] [EOL] [EOL] def restart_worker_service ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def reset_data_locks ( ctx , app_dir , venv_dir , user ) : [EOL] cmd = f"{ venv_dir } [string] " [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] def load_data ( ctx , app_dir , venv_dir , user ) : [EOL] cmd = f"{ venv_dir } [string] " [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def update_dossiers ( ctx ) : [EOL] cmd = f"{ venv_dir } [string] " [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def whitelist_list ( ctx ) : [EOL] cmd = f"{ venv_dir } [string] " [EOL] res = ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] return res . stdout [EOL] [EOL] [EOL] @ task def whitelist_add ( ctx , pattern , comment = None ) : [EOL] cmd = f"{ venv_dir } [string] { pattern }" [EOL] if comment is not None : [EOL] cmd += [string] + quote ( comment ) [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def whitelist_remove ( ctx , pattern ) : [EOL] cmd = f"{ venv_dir } [string] { pattern }" [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def whitelist_check ( ctx , email ) : [EOL] cmd = f"{ venv_dir } [string] { email }" [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def admin_list ( ctx ) : [EOL] cmd = f"{ venv_dir } [string] " [EOL] res = ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] return res . stdout [EOL] [EOL] [EOL] @ task def admin_grant ( ctx , email ) : [EOL] cmd = f"{ venv_dir } [string] { email }" [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] @ task def admin_revoke ( ctx , email ) : [EOL] cmd = f"{ venv_dir } [string] { email }" [EOL] ctx . sudo ( f' [string] { app_dir } [string] { cmd } [string] ' , user = user ) [EOL] [EOL] [EOL] def rollbar_deploy_start ( ctx , branch , environment , comment ) : [EOL] local_username = ctx . local ( [string] ) . stdout [EOL] revision = ctx . local ( f' [string] { branch }' ) . stdout [EOL] resp = requests . post ( [string] , { [string] : ctx . config [ [string] ] , [string] : environment , [string] : local_username , [string] : revision , [string] : [string] , [string] : comment , } , timeout = [number] , ) [EOL] if resp . status_code == [number] : [EOL] return resp . json ( ) [ [string] ] [ [string] ] [EOL] else : [EOL] print ( f" [string] { resp . text }" ) [EOL] [EOL] [EOL] def rollbar_deploy_update ( rollbar_token , deploy_id , status ) : [EOL] resp = requests . patch ( f" [string] { deploy_id }" , params = { [string] : rollbar_token } , data = { [string] : status } , timeout = [number] , ) [EOL] if resp . status_code != [number] : [EOL] print ( f" [string] { resp . text }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from fabric . tasks import task [EOL] [EOL] from tools import sudo_put , template_local_file [EOL] [EOL] [EOL] @ task def setup_backups ( ctx , os_storage_url = [string] , os_tenant_id = [string] , os_tenant_name = [string] , os_username = [string] , os_password = [string] , ) : [EOL] ctx . sudo ( [string] ) [EOL] with template_local_file ( [string] , [string] , { [string] : os_storage_url , [string] : os_tenant_id , [string] : os_tenant_name , [string] : os_username , [string] : os_password , } , ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] [EOL] ctx . sudo ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from fabric . tasks import task [EOL] [EOL] from tools import install_packages , sudo_put [EOL] [EOL] [EOL] @ task def monitoring ( ctx ) : [EOL] [docstring] [EOL] install_packages ( ctx , [string] , [string] , [string] , [string] ) [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] _munin_setup_nginx_plugin ( ctx ) [EOL] _munin_setup_postgres_plugin ( ctx ) [EOL] _munin_setup_redis_plugin ( ctx ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def _munin_setup_nginx_plugin ( ctx ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def _munin_setup_postgres_plugin ( ctx ) : [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL] [EOL] [EOL] def _munin_setup_redis_plugin ( ctx ) : [EOL] sudo_put ( ctx , [string] , [string] ) [EOL] ctx . sudo ( [string] ) [EOL] ctx . sudo ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from setuptools import setup [EOL] [EOL] requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] setup ( name = [string] , version = [string] , url = [string] , install_requires = requires , entry_points = { [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import repondeur [EOL] import builtins [EOL] import pytest [EOL] [EOL] from zam_repondeur . initialize import NotInitialized , needs_init [EOL] [EOL] [EOL] class P : [EOL] def __init__ ( self ) : [EOL] self . initialized = False [EOL] [EOL] def initialize ( self , a , b ) : [EOL] self . a = a [EOL] self . b = b [EOL] self . initialized = True [EOL] [EOL] @ needs_init def f ( self , x ) : [EOL] return self . a * x + self . b [EOL] [EOL] [EOL] def test_cannot_call_f_before_initialization ( ) : [EOL] p = P ( ) [EOL] with pytest . raises ( NotInitialized ) : [EOL] p . f ( [number] ) [EOL] [EOL] [EOL] def test_can_call_f_after_initialization ( ) : [EOL] p = P ( ) [EOL] p . initialize ( a = [number] , b = [number] ) [EOL] assert p . f ( [number] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import os [EOL] from contextlib import contextmanager [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import responses [EOL] import transaction [EOL] from pyramid . threadlocal import get_current_registry [EOL] from pyramid_mailer import get_mailer [EOL] [EOL] from fixtures . dossiers import * [comment] [EOL] from fixtures . essoc2018 import * [comment] [EOL] from fixtures . lectures import * [comment] [EOL] from fixtures . organes_acteurs import * [comment] [EOL] from fixtures . plf2018 import * [comment] [EOL] from fixtures . plfss2018 import * [comment] [EOL] from fixtures . plfss2019 import * [comment] [EOL] from fixtures . scraping import * [comment] [EOL] from fixtures . shared_tables import * [comment] [EOL] from fixtures . users import * [comment] [EOL] from testapp import TestApp as BaseTestApp [EOL] [EOL] HERE = Path ( __file__ ) [EOL] [EOL] [EOL] class TestApp ( BaseTestApp ) : [EOL] def get ( self , * args , ** kwargs ) : [EOL] with self . auto_login ( kwargs ) : [EOL] return super ( ) . get ( * args , ** kwargs ) [EOL] [EOL] def post ( self , * args , ** kwargs ) : [EOL] with self . auto_login ( kwargs ) : [EOL] return super ( ) . post ( * args , ** kwargs ) [EOL] [EOL] def post_json ( self , * args , ** kwargs ) : [EOL] with self . auto_login ( kwargs ) : [EOL] return super ( ) . post_json ( * args , ** kwargs ) [EOL] [EOL] @ contextmanager def auto_login ( self , kwargs ) : [EOL] from zam_repondeur . models import User [EOL] [EOL] user = kwargs . pop ( [string] , None ) [EOL] if user is not None : [EOL] assert isinstance ( user , User ) [EOL] self . user_login ( email = user . email , headers = kwargs . get ( [string] ) ) [EOL] [EOL] yield [EOL] [EOL] def user_login ( self , email , headers = None ) : [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] token = generate_auth_token ( ) [EOL] repository . set_auth_token ( email , token ) [EOL] resp = self . get ( [string] , params = { [string] : token } , headers = headers ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def settings ( tmp_path_factory ) : [EOL] return { [string] : True , [string] : [string] , [string] : os . environ . get ( [string] , [string] ) , [string] : os . environ . get ( [string] , [string] ) , [string] : True , [string] : os . environ . get ( [string] , [string] ) , [string] : os . environ . get ( [string] , [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : os . environ . get ( [string] , [string] ) , [string] : os . environ . get ( [string] , [string] ) , [string] : os . environ . get ( [string] , [string] ) , [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : str ( tmp_path_factory . mktemp ( [string] ) ) , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def wsgi_app ( settings , mock_dossiers , mock_organes_acteurs , mock_scraping_senat ) : [EOL] from zam_repondeur import make_app [EOL] [EOL] return make_app ( None , ** settings ) [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] , autouse = True ) def use_app_registry ( wsgi_app ) : [EOL] from pyramid . testing import testConfig [EOL] [EOL] with testConfig ( registry = wsgi_app . registry ) : [EOL] yield [EOL] [EOL] [EOL] @ pytest . fixture def db ( ) : [EOL] from zam_repondeur . models import Base , DBSession [EOL] [EOL] Base . metadata . drop_all ( ) [EOL] Base . metadata . create_all ( ) [EOL] [EOL] yield DBSession [EOL] [EOL] DBSession . close ( ) [EOL] Base . metadata . drop_all ( ) [EOL] DBSession . remove ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def run_each_test_in_a_fresh_new_transaction ( ) : [EOL] with transaction . manager : [EOL] yield [EOL] transaction . abort ( ) [comment] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) @ responses . activate def data_repository ( ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] SENAT_SAMPLE_DATA_DIR = HERE . parent / [string] / [string] / [string] [EOL] responses . add ( responses . GET , [string] , body = ( SENAT_SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SENAT_SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] for path in SENAT_SAMPLE_DATA_DIR . glob ( [string] ) : [EOL] responses . add ( responses . GET , f" [string] { path . name }" , body = path . read_bytes ( ) , status = [number] , ) [EOL] repository . load_data ( ) [EOL] [EOL] [EOL] @ pytest . fixture def users_repository ( ) : [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] yield [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] [EOL] @ pytest . fixture def amendements_repository ( ) : [EOL] from zam_repondeur . services . amendements import repository [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] yield [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] [EOL] @ pytest . fixture def progress_repository ( ) : [EOL] from zam_repondeur . services . progress import repository [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] yield [EOL] [EOL] repository . clear_data ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def whitelist ( db ) : [EOL] from zam_repondeur . models . users import AllowedEmailPattern [EOL] [EOL] with transaction . manager : [EOL] allowed_email_pattern = AllowedEmailPattern . create ( pattern = [string] ) [EOL] [EOL] return allowed_email_pattern [EOL] [EOL] [EOL] @ pytest . fixture def app ( wsgi_app , db , whitelist , data_repository , users_repository , amendements_repository , progress_repository , ) : [EOL] yield TestApp ( wsgi_app , extra_environ = { [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] [EOL] @ pytest . fixture def mailer ( ) : [EOL] registry = get_current_registry ( ) [EOL] yield get_mailer ( registry ) [EOL] [EOL] [EOL] def pytest_runtest_call ( item ) : [EOL] [docstring] [EOL] clear_email_outbox ( ) [EOL] clear_rate_limiting_counters ( ) [EOL] [EOL] [EOL] def clear_email_outbox ( ) : [EOL] registry = get_current_registry ( ) [EOL] mailer = get_mailer ( registry ) [EOL] mailer . outbox = [ ] [EOL] [EOL] [EOL] def clear_rate_limiting_counters ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] redis = repository . connection [EOL] keys = redis . keys ( [string] ) [EOL] if keys : [EOL] redis . delete ( * keys ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import date [EOL] [EOL] import pytest [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , ) def test_paragriphy ( input , output ) : [EOL] from zam_repondeur . views . jinja2_filters import paragriphy [EOL] [EOL] assert paragriphy ( input ) == output [EOL] [EOL] [EOL] def test_group_by_day ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import ReponseAmendementModifiee [EOL] from zam_repondeur . views . jinja2_filters import group_by_day [EOL] [EOL] with transaction . manager : [EOL] ReponseAmendementModifiee . create ( amendement = amendements_an [ [number] ] , reponse = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert group_by_day ( amendements_an [ [number] ] . events ) == [ ( date . today ( ) , [ amendements_an [ [number] ] . events [ [number] ] ] ) ] [EOL] [EOL] [EOL] def test_number ( ) : [EOL] from zam_repondeur . views . jinja2_filters import number [EOL] [EOL] assert number ( [number] ) == [string] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import repondeur [EOL] import typing [EOL] import builtins [EOL] from pyramid . decorator import reify [EOL] from selectolax . parser import HTMLParser [EOL] from webtest import TestApp as BaseTestApp [EOL] from webtest import TestRequest as BaseTestRequest [EOL] from webtest import TestResponse as BaseTestResponse [EOL] [EOL] [EOL] class TestAmendement : [EOL] def __init__ ( self , amendement , anchor ) : [EOL] self . amendement = amendement [EOL] self . node = anchor . parent [EOL] [EOL] def number_is_in_title ( self ) : [EOL] return ( str ( self . amendement . num ) in self . node . css_first ( [string] ) . text ( ) . strip ( ) ) [EOL] [EOL] def has_gouvernemental_class ( self ) : [EOL] return [string] in self . node . attributes . get ( [string] ) [EOL] [EOL] [EOL] class TestResponse ( BaseTestResponse ) : [EOL] @ reify def parser ( self ) : [EOL] return HTMLParser ( self . text ) [EOL] [EOL] def first_element ( self , name ) : [EOL] return self . parser . css_first ( name ) . text ( ) [EOL] [EOL] def find_amendement ( self , amendement ) : [EOL] anchor = self . parser . css_first ( f" [string] { amendement . num }" ) [EOL] if anchor is None : [EOL] return None [EOL] return TestAmendement ( amendement , anchor ) [EOL] [EOL] [EOL] class TestRequest ( BaseTestRequest ) : [EOL] ResponseClass = TestResponse [EOL] [EOL] [EOL] class TestApp ( BaseTestApp ) : [EOL] RequestClass = TestRequest [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.tests.testapp.TestResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.tests.testapp.TestRequest]$ 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] ) def test_normalize_num ( input , output ) : [EOL] from zam_repondeur . utils import normalize_num [EOL] [EOL] assert normalize_num ( input ) == output [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_normalize_avis ( input , output ) : [EOL] from zam_repondeur . utils import normalize_avis [EOL] [EOL] assert normalize_avis ( input ) == output [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] ) def test_normalize_reponse ( input , previous , output ) : [EOL] from zam_repondeur . utils import normalize_reponse [EOL] [EOL] assert normalize_reponse ( input , previous ) == output [EOL] [EOL] [EOL] class TestAddURLFragment : [EOL] def test_add ( self ) : [EOL] from zam_repondeur . utils import add_url_fragment [EOL] [EOL] assert ( add_url_fragment ( [string] , [string] ) == [string] ) [EOL] [EOL] def test_update ( self ) : [EOL] from zam_repondeur . utils import add_url_fragment [EOL] [EOL] assert ( add_url_fragment ( [string] , [string] ) == [string] ) [EOL] [EOL] [EOL] class TestAddURLParams : [EOL] def test_add ( self ) : [EOL] from zam_repondeur . utils import add_url_params [EOL] [EOL] assert ( add_url_params ( [string] , c = [string] ) == [string] ) [EOL] [EOL] def test_update ( self ) : [EOL] from zam_repondeur . utils import add_url_params [EOL] [EOL] assert ( add_url_params ( [string] , c = [string] ) == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] def test_whitespace_is_stripped ( ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] assert clean_html ( [string] ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] ] ) def test_allowed_tags_are_preserved ( tag ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] html = f" [string] { tag } [string] { tag } [string] " [EOL] assert clean_html ( html ) == f" [string] { tag } [string] { tag } [string] " [EOL] [EOL] [EOL] def test_table_tags_are_preserved ( ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] html = [string] [EOL] assert clean_html ( html ) == [string] [EOL] [EOL] [EOL] def test_table_colspan_attributes_are_preserved ( ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] html = [string] [EOL] assert ( clean_html ( html ) == [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] ] ) def test_not_allowed_tags_are_removed ( tag ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] html = f" [string] { tag } [string] { tag } [string] " [EOL] assert clean_html ( html ) == [string] [EOL] [EOL] [EOL] def test_style_attributes_are_removed ( ) : [EOL] from zam_repondeur . services . clean import clean_html [EOL] [EOL] html = [string] [EOL] assert clean_html ( html ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_list_opendata_dossiers ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] dossiers = repository . list_opendata_dossiers ( ) [EOL] [EOL] assert [string] in dossiers [EOL] [EOL] [EOL] def test_get_opendata_dossier_ref ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] [EOL] dossier_ref = repository . get_opendata_dossier_ref ( [string] ) [EOL] [EOL] assert isinstance ( dossier_ref , DossierRef ) [EOL] [EOL] [EOL] def test_get_opendata_texte ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import TexteRef [EOL] [EOL] texte_ref = repository . get_opendata_texte ( [string] ) [EOL] [EOL] assert isinstance ( texte_ref , TexteRef ) [EOL] [EOL] [EOL] def test_get_opendata_organe ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] organe = repository . get_opendata_organe ( [string] ) [EOL] [EOL] assert isinstance ( organe , dict ) [EOL] [EOL] [EOL] def test_get_opendata_acteur ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] acteur = repository . get_opendata_acteur ( [string] ) [EOL] [EOL] assert isinstance ( acteur , dict ) [EOL] [EOL] [EOL] def test_get_senat_scraping_dossier_ref ( app ) : [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] [EOL] dossier_ref = repository . get_senat_scraping_dossier_ref ( [string] ) [EOL] [EOL] assert isinstance ( dossier_ref , DossierRef ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def open_liasse ( filename ) : [EOL] return ( Path ( __file__ ) . parent / [string] / filename ) . open ( mode = [string] ) [EOL] [EOL] [EOL] def test_article_changed ( lecture_essoc2018_an_nouvelle_lecture_commission_fond ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , _ = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] assert amendements [ [number] ] . article . num == [string] [EOL] [EOL] [comment] [EOL] amendements2 , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] assert amendements [ [number] ] . article . num == amendements2 [ [number] ] . article . num == [string] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_add_parent_amendement ( lecture_essoc2018_an_nouvelle_lecture_commission_fond ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , _ = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] assert amendements [ [number] ] . parent is None [EOL] [EOL] [comment] [EOL] amendements2 , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] assert amendements [ [number] ] . parent . num == amendements2 [ [number] ] . parent . num == [number] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_remove_parent_amendement ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , _ = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] assert amendements [ [number] ] . parent . num == [number] [EOL] [EOL] [comment] [EOL] amendements2 , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] assert amendements [ [number] ] . parent == amendements2 [ [number] ] . parent is None [EOL] assert errors == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import List , Any , Dict [EOL] import csv [EOL] import typing [EOL] import _csv [EOL] import csv [EOL] from pathlib import Path [EOL] [EOL] [EOL] def test_export_csv_columns ( lecture_an , amendements_an , tmpdir ) : [EOL] from zam_repondeur . services . import_export . csv import export_csv [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] counter = export_csv ( lecture_an , filename , request = { } ) [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with Path ( filename ) . open ( encoding = [string] ) as csv_file : [EOL] reader = csv . reader ( csv_file , delimiter = [string] ) [EOL] headers = next ( reader ) [EOL] assert headers == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_export_excel_columns ( lecture_an , amendements_an , tmpdir ) : [EOL] from openpyxl import load_workbook [EOL] [EOL] from zam_repondeur . services . import_export . xlsx import write_xlsx [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] counter = write_xlsx ( lecture_an , filename , request = { } ) [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] wb = load_workbook ( filename , read_only = True ) [EOL] ws = wb . active [EOL] header_row = next ( ws . rows ) [EOL] headers = [ cell . value for cell in header_row ] [EOL] assert len ( list ( ws . rows ) ) == [number] [EOL] [EOL] assert headers == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_export_excel_subset ( lecture_an , amendements_an , tmpdir ) : [EOL] from openpyxl import load_workbook [EOL] [EOL] from zam_repondeur . services . import_export . xlsx import write_xlsx [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] counter = write_xlsx ( lecture_an , filename , request = { } , amendements = [ amendements_an [ [number] ] ] ) [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] wb = load_workbook ( filename , read_only = True ) [EOL] ws = wb . active [EOL] assert len ( list ( ws . rows ) ) == [number] [EOL] [EOL] [EOL] def test_export_csv_with_parent ( lecture_an , article1_an , tmpdir ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . csv import export_csv [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] amendements [ [number] ] . parent = amendements [ [number] ] [EOL] DBSession . add_all ( amendements ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] counter = export_csv ( lecture_an , filename , request = { } ) [EOL] [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with Path ( filename ) . open ( encoding = [string] ) as csv_file : [EOL] reader = csv . DictReader ( csv_file , delimiter = [string] ) [EOL] amendement1 = next ( reader ) [EOL] assert amendement1 [ [string] ] == [string] [EOL] amendement2 = next ( reader ) [EOL] assert amendement2 [ [string] ] == [string] [EOL] [EOL] [EOL] def test_export_csv_with_auteur ( lecture_an , article1_an , tmpdir ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . csv import export_csv [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] amendements [ [number] ] . auteur = [string] [EOL] DBSession . add_all ( amendements ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] counter = export_csv ( lecture_an , filename , request = { } ) [EOL] [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with Path ( filename ) . open ( encoding = [string] ) as csv_file : [EOL] reader = csv . DictReader ( csv_file , delimiter = [string] ) [EOL] amendement1 = next ( reader ) [EOL] assert amendement1 [ [string] ] == [string] [EOL] amendement2 = next ( reader ) [EOL] assert amendement2 [ [string] ] == [string] [EOL] [EOL] [EOL] def test_export_csv_with_gouvernemental ( lecture_an , article1_an , tmpdir ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . csv import export_csv [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] amendements [ [number] ] . gouvernemental = True [EOL] DBSession . add_all ( amendements ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] counter = export_csv ( lecture_an , filename , request = { } ) [EOL] [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with Path ( filename ) . open ( encoding = [string] ) as csv_file : [EOL] reader = csv . DictReader ( csv_file , delimiter = [string] ) [EOL] amendement1 = next ( reader ) [EOL] assert amendement1 [ [string] ] == [string] [EOL] amendement2 = next ( reader ) [EOL] assert amendement2 [ [string] ] == [string] [EOL] [EOL] [EOL] def test_export_csv_with_identique ( lecture_an , article1_an , tmpdir ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . csv import export_csv [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) for position , num in enumerate ( ( [number] , [number] , [number] ) , [number] ) ] [EOL] amendements [ [number] ] . id_identique = [number] [EOL] amendements [ [number] ] . id_identique = [number] [EOL] DBSession . add_all ( amendements ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] counter = export_csv ( lecture_an , filename , request = { } ) [EOL] [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with Path ( filename ) . open ( encoding = [string] ) as csv_file : [EOL] reader = csv . DictReader ( csv_file , delimiter = [string] ) [EOL] amendement1 = next ( reader ) [EOL] assert amendement1 [ [string] ] == [string] [EOL] amendement2 = next ( reader ) [EOL] assert amendement2 [ [string] ] == [string] [EOL] amendement3 = next ( reader ) [EOL] assert amendement3 [ [string] ] == [string] [EOL]	
from typing import Any [EOL] import typing [EOL] from datetime import date [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def open_liasse ( filename ) : [EOL] return ( Path ( __file__ ) . parent / [string] / filename ) . open ( mode = [string] ) [EOL] [EOL] [EOL] def test_import_liasse_xml ( lecture_essoc2018_an_nouvelle_lecture_commission_fond ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] [EOL] assert isinstance ( amendements , list ) [EOL] assert len ( amendements ) == [number] [EOL] assert all ( isinstance ( item , Amendement ) for item in amendements ) [EOL] [EOL] _check_amendement_0 ( amendements [ [number] ] ) [EOL] _check_amendement_1 ( amendements [ [number] ] ) [EOL] _check_amendement_gouvernemental ( amendements [ [number] ] ) [EOL] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_liasse_xml_article_additionnel ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] [EOL] assert amendements [ [number] ] . article . num == [string] [EOL] assert amendements [ [number] ] . article . pos == [string] [EOL] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_liasse_xml_avant_un ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] [EOL] assert amendements [ [number] ] . article . type == [string] [EOL] assert amendements [ [number] ] . article . num == [string] [EOL] assert amendements [ [number] ] . article . pos == [string] [EOL] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_same_liasse_xml_again_preserve_response ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , _ = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] [EOL] [comment] [EOL] amendements [ [number] ] . user_content . avis = [string] [EOL] amendements [ [number] ] . user_content . objet = [string] [EOL] amendements [ [number] ] . user_content . reponse = [string] [EOL] [EOL] [comment] [EOL] amendements2 , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] [EOL] assert amendements == amendements2 [EOL] assert amendements2 [ [number] ] . user_content . avis == [string] [EOL] assert amendements2 [ [number] ] . user_content . objet == [string] [EOL] assert amendements2 [ [number] ] . user_content . reponse == [string] [EOL] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_smaller_liasse_xml_preserves_responses ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , _ = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond ) [EOL] [EOL] [comment] [EOL] amendements [ [number] ] . user_content . avis = [string] [EOL] amendements [ [number] ] . user_content . objet = [string] [EOL] amendements [ [number] ] . user_content . reponse = [string] [EOL] [EOL] [comment] [EOL] amendements [ [number] ] . user_content . avis = [string] [EOL] amendements [ [number] ] . user_content . objet = [string] [EOL] amendements [ [number] ] . user_content . reponse = [string] [EOL] [EOL] [comment] [EOL] amendements2 , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] [EOL] assert amendements [ [number] ] == amendements2 [ [number] ] [EOL] assert amendements [ [number] ] == amendements2 [ [number] ] [EOL] assert len ( amendements2 ) == [number] [EOL] assert amendements2 [ [number] ] . user_content . avis == [string] [EOL] assert amendements2 [ [number] ] . user_content . objet == [string] [EOL] assert amendements2 [ [number] ] . user_content . reponse == [string] [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] assert amendements [ [number] ] . user_content . avis == [string] [EOL] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_liasse_xml_with_unknown_parent ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] [EOL] assert amendements == [ ] [EOL] assert len ( errors ) == [number] [EOL] uid , cause = errors [ [number] ] [EOL] assert uid == [string] [EOL] assert cause == [string] [EOL] [EOL] [EOL] def test_import_liasse_xml_with_known_but_missing_parent ( lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import import_liasse_xml [EOL] [EOL] [comment] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] assert len ( amendements ) == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . parent is None [EOL] assert errors == [ ] [EOL] [EOL] [comment] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , lecture_essoc2018_an_nouvelle_lecture_commission_fond , ) [EOL] assert len ( amendements ) == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . parent . num == [number] [EOL] assert errors == [ ] [EOL] [EOL] [EOL] def test_import_liasse_second_part ( app , dossier_essoc2018 , texte_essoc2018_an_nouvelle_lecture_commission_fond ) : [EOL] from zam_repondeur . models import DBSession , Lecture , Phase [EOL] from zam_repondeur . services . import_export . liasse_xml import ( LectureDoesNotMatch , import_liasse_xml , ) [EOL] [EOL] with transaction . manager : [EOL] part1 = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_essoc2018_an_nouvelle_lecture_commission_fond , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_essoc2018 , ) [EOL] part2 = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_essoc2018_an_nouvelle_lecture_commission_fond , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_essoc2018 , ) [EOL] [EOL] DBSession . add ( part2 ) [EOL] [EOL] with pytest . raises ( LectureDoesNotMatch ) : [EOL] import_liasse_xml ( open_liasse ( [string] ) , part1 ) [EOL] [EOL] amendements , errors = import_liasse_xml ( open_liasse ( [string] ) , part2 ) [EOL] [EOL] assert ( len ( amendements ) , len ( errors ) ) == ( [number] , [number] ) [EOL] for amendement in amendements : [EOL] assert amendement . lecture == part2 [EOL] [EOL] [EOL] def test_import_liasse_xml_lecture_is_not_an ( lecture_senat ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import ( BadChambre , import_liasse_xml , ) [EOL] [EOL] with pytest . raises ( BadChambre ) : [EOL] import_liasse_xml ( open_liasse ( [string] ) , lecture_senat ) [EOL] [EOL] [EOL] def test_import_liasse_xml_lecture_does_not_match ( lecture_an ) : [EOL] from zam_repondeur . services . import_export . liasse_xml import ( LectureDoesNotMatch , import_liasse_xml , ) [EOL] [EOL] with pytest . raises ( LectureDoesNotMatch ) : [EOL] import_liasse_xml ( open_liasse ( [string] ) , lecture_an ) [EOL] [EOL] [EOL] def _check_amendement_0 ( amendement ) : [EOL] from zam_repondeur . models import Chambre [EOL] [EOL] assert amendement . lecture . chambre == Chambre . AN [EOL] assert amendement . lecture . texte . legislature == [number] [EOL] assert amendement . lecture . texte . numero == [number] [EOL] assert amendement . lecture . organe == [string] [EOL] [EOL] assert amendement . article . type == [string] [EOL] assert amendement . article . num == [string] [EOL] assert amendement . article . mult == [string] [EOL] assert amendement . article . pos == [string] [EOL] assert amendement . article . content == { } [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] assert amendement . alinea == [string] [EOL] [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] [EOL] assert amendement . auteur == [string] [EOL] assert amendement . matricule == [string] [EOL] assert amendement . groupe == [string] [EOL] [EOL] assert amendement . date_depot == date ( [number] , [number] , [number] ) [EOL] [EOL] assert amendement . sort == [string] [EOL] [EOL] assert amendement . position is None [comment] [EOL] assert amendement . id_discussion_commune is None [EOL] assert amendement . id_identique is None [EOL] [EOL] assert amendement . parent is None [EOL] [EOL] assert ( amendement . corps == [string] ) [EOL] assert amendement . expose == [string] [EOL] [EOL] assert amendement . resume is None [EOL] [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] [EOL] def _check_amendement_1 ( amendement ) : [EOL] from zam_repondeur . models import Chambre [EOL] [EOL] assert amendement . lecture . chambre == Chambre . AN [EOL] assert amendement . lecture . texte . legislature == [number] [EOL] assert amendement . lecture . texte . numero == [number] [EOL] assert amendement . lecture . organe == [string] [EOL] [EOL] assert amendement . article . type == [string] [EOL] assert amendement . article . num == [string] [EOL] assert amendement . article . mult == [string] [EOL] assert amendement . article . pos == [string] [EOL] assert amendement . article . content == { } [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] assert amendement . alinea == [string] [EOL] [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] [EOL] assert amendement . auteur == [string] [EOL] assert amendement . matricule == [string] [EOL] assert amendement . groupe == [string] [EOL] [EOL] assert amendement . date_depot == date ( [number] , [number] , [number] ) [EOL] [EOL] assert amendement . sort == [string] [EOL] [EOL] assert amendement . position is None [comment] [EOL] assert amendement . id_discussion_commune is None [EOL] assert amendement . id_identique is None [EOL] [EOL] assert amendement . parent . num == [number] [EOL] assert amendement . parent . rectif == [number] [EOL] [EOL] assert amendement . corps == ( [string] [string] [string] [string] [string] [string] ) [EOL] assert amendement . expose == ( [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] assert amendement . resume is None [EOL] [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] [EOL] def _check_amendement_gouvernemental ( amendement ) : [EOL] assert amendement . auteur == [string] [EOL] assert amendement . matricule is None [EOL] assert amendement . groupe is None [EOL] assert amendement . gouvernemental [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] from datetime import date [EOL] [EOL] import transaction [EOL] import ujson as json [EOL] [EOL] [EOL] def test_export_json ( lecture_senat , article1_senat , article1av_senat , article7bis_senat , tmpdir ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] article1_senat . user_content . title = [string] [EOL] article1_senat . user_content . presentation = [string] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] counter = export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] backup = json . loads ( f_ . read ( ) ) [EOL] amendements = backup [ [string] ] [EOL] articles = backup [ [string] ] [EOL] [EOL] assert counter [ [string] ] == len ( amendements ) == [number] [EOL] assert counter [ [string] ] == len ( articles ) == [number] [EOL] [EOL] assert amendements [ [number] ] == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] assert [ amdt [ [string] ] for amdt in amendements ] == [ [string] , [string] , [string] , [string] , [string] , ] [EOL] assert articles == [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] [EOL] def test_export_json_full ( lecture_senat , article1_senat , tmpdir ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) [EOL] counter = export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] backup = json . loads ( f_ . read ( ) ) [EOL] amendements = backup [ [string] ] [EOL] articles = backup [ [string] ] [EOL] [EOL] assert counter [ [string] ] == len ( amendements ) == [number] [EOL] assert counter [ [string] ] == len ( articles ) == [number] [EOL] [EOL] assert amendements [ [number] ] == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def test_write_with_affectation ( lecture_senat , article1_senat , tmpdir , user_david_table_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_senat ) [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] user_david_table_senat . add_amendement ( amendement ) [EOL] [EOL] counter = export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] backup = json . loads ( f_ . read ( ) ) [EOL] amendements = backup [ [string] ] [EOL] articles = backup [ [string] ] [EOL] [EOL] assert counter [ [string] ] == len ( amendements ) == [number] [EOL] assert counter [ [string] ] == len ( articles ) == [number] [EOL] assert amendements [ [number] ] [ [string] ] == [string] [EOL] assert amendements [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_write_with_affectation_box ( lecture_senat , article1_senat , tmpdir , user_david_table_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession , SharedTable [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_senat ) [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] shared_table = SharedTable . create ( titre = [string] , lecture = lecture_senat ) [EOL] shared_table . add_amendement ( amendement ) [EOL] [EOL] counter = export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] backup = json . loads ( f_ . read ( ) ) [EOL] amendements = backup [ [string] ] [EOL] articles = backup [ [string] ] [EOL] [EOL] assert counter [ [string] ] == len ( amendements ) == [number] [EOL] assert counter [ [string] ] == len ( articles ) == [number] [EOL] assert amendements [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_export_json_sous_amendement ( lecture_senat , article1_senat , article1av_senat , article7bis_senat , tmpdir ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] counter = export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] backup = json . loads ( f_ . read ( ) ) [EOL] amendements = backup [ [string] ] [EOL] articles = backup [ [string] ] [EOL] [EOL] assert counter [ [string] ] == len ( amendements ) == [number] [EOL] assert counter [ [string] ] == len ( articles ) == [number] [EOL] [EOL] assert amendements [ - [number] ] == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] class TestAmendementsHaveSessionOrLegislature : [EOL] def test_an_amendements_have_legislature ( self , lecture_an , amendements_an , tmpdir ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] export_json ( lecture_an , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] export = json . loads ( f_ . read ( ) ) [EOL] [EOL] for amendement in export [ [string] ] : [EOL] assert amendement [ [string] ] == [number] [EOL] assert amendement [ [string] ] == [string] [EOL] [EOL] def test_senat_amendements_have_session ( self , lecture_senat , amendements_senat , tmpdir ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] export_json ( lecture_senat , filename , request = { } ) [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as f_ : [EOL] export = json . loads ( f_ . read ( ) ) [EOL] [EOL] for amendement in export [ [string] ] : [EOL] assert amendement [ [string] ] == [string] [EOL] assert amendement [ [string] ] == [string] [EOL]	typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] from selectolax . parser import HTMLParser [EOL] [EOL] [EOL] def _html_page_titles ( parser , selector = [string] ) : [EOL] return [ node . text ( ) . strip ( ) for node in parser . css ( selector ) ] [EOL] [EOL] [EOL] def _cartouche_to_list ( response_node ) : [EOL] return [ [string] . join ( part . strip ( ) for part in node . text ( ) . strip ( ) . split ( [string] ) ) for node in response_node . css ( [string] ) if node . text ( ) . strip ( ) ] [EOL] [EOL] [EOL] def test_generate_pdf_without_responses ( app , lecture_senat , article1_senat , article1av_senat , article7bis_senat ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert parser . css_first ( [string] ) . text ( ) == [string] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_responses ( app , lecture_senat , article1_senat , article1av_senat , article7bis_senat ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_content ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_content_factor_authors_groups ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] [EOL] amendement_9999 = amendements_senat [ [number] ] [EOL] amendement_9999 . auteur = [string] [EOL] amendement_9999 . groupe = [string] [EOL] amendement_9999 . user_content . avis = [string] [EOL] amendement_9999 . user_content . objet = [string] [EOL] amendement_9999 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_9999 ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_content_factor_only_groups ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] [EOL] amendement_9999 = amendements_senat [ [number] ] [EOL] amendement_9999 . auteur = [string] [EOL] amendement_9999 . groupe = [string] [EOL] amendement_9999 . user_content . avis = [string] [EOL] amendement_9999 . user_content . objet = [string] [EOL] amendement_9999 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_9999 ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_content_factor_many_authors_groups ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] [EOL] amendement_9999 = amendements_senat [ [number] ] [EOL] amendement_9999 . auteur = [string] [EOL] amendement_9999 . groupe = [string] [EOL] amendement_9999 . user_content . avis = [string] [EOL] amendement_9999 . user_content . objet = [string] [EOL] amendement_9999 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_9999 ) [EOL] [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_content_gouvernemental ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_with_amendement_and_sous_amendement_responses ( app , lecture_senat , article1_senat , article1av_senat , article7bis_senat ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , avis = [string] , ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_generate_pdf_with_additional_article_amendements_having_responses ( app , lecture_senat , article1_senat , article1av_senat , article7bis_senat ) : [EOL] from zam_repondeur . models import Amendement [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1av_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , avis = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = None , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , parent = amendement , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : lecture_senat } ) ) [EOL] [EOL] assert ( parser . css_first ( [string] ) . text ( ) == [string] ) [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_generate_pdf_amendement_without_responses ( app , lecture_senat , article1_senat ) : [EOL] from zam_repondeur . models import Amendement , AmendementList [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , ) [EOL] [EOL] amdt_list = AmendementList ( [ amendement ] ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : amdt_list , [string] : amdt_list } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] ] [EOL] [EOL] [EOL] def test_generate_pdf_amendement_with_responses ( app , lecture_senat , article1_senat ) : [EOL] from zam_repondeur . models import Amendement , AmendementList [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , ) [EOL] [EOL] amdt_list = AmendementList ( [ amendement ] ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : amdt_list , [string] : amdt_list } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_generate_pdf_amendement_with_content ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import AmendementList , DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 = amendements_senat [ [number] ] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] DBSession . add ( amendement_6666 ) [EOL] DBSession . flush ( ) [EOL] [EOL] amdt_list = AmendementList ( [ amendement_6666 ] ) [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : amdt_list , [string] : amdt_list } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_amendement_with_similaire ( app , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import AmendementList , DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 , amendement_9999 = amdt_list = AmendementList ( amendements_senat ) [EOL] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] [EOL] amendement_9999 . auteur = [string] [EOL] amendement_9999 . groupe = [string] [EOL] amendement_9999 . user_content . avis = [string] [EOL] amendement_9999 . user_content . objet = [string] [EOL] amendement_9999 . user_content . reponse = [string] [EOL] [EOL] DBSession . add_all ( amendements_senat ) [EOL] DBSession . flush ( ) [EOL] [EOL] assert amdt_list . similaires ( amendement_6666 ) == [ amendement_9999 ] [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : AmendementList ( [ amendement_6666 ] ) , [string] : amdt_list , } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] def test_generate_pdf_amendement_with_similaire_different_articles ( app , lecture_senat , article1_senat , article7bis_senat , amendements_senat ) : [EOL] from zam_repondeur . models import Amendement , AmendementList , DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_6666 , amendement_9999 = amendements_senat [EOL] [EOL] amendement_6666 . auteur = [string] [EOL] amendement_6666 . groupe = [string] [EOL] amendement_6666 . user_content . avis = [string] [EOL] amendement_6666 . user_content . objet = [string] [EOL] amendement_6666 . user_content . reponse = [string] [EOL] [EOL] amendement_9999 . auteur = [string] [EOL] amendement_9999 . groupe = [string] [EOL] amendement_9999 . user_content . avis = [string] [EOL] amendement_9999 . user_content . objet = [string] [EOL] amendement_9999 . user_content . reponse = [string] [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article7bis_senat , alinea = [string] , num = [number] , rectif = [number] , auteur = [string] , groupe = [string] , matricule = [string] , corps = [string] , expose = [string] , resume = [string] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] DBSession . add_all ( amendements_senat ) [EOL] DBSession . flush ( ) [EOL] [EOL] amdt_list = AmendementList ( amendements_senat + [ amendement ] ) [EOL] [EOL] assert amdt_list . similaires ( amendement_6666 ) == [ amendement_9999 ] [EOL] assert amdt_list . similaires ( amendement ) == [ ] [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : AmendementList ( [ amendement_6666 , amendement ] ) , [string] : amdt_list , } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , ] [EOL] response_node_6666 , response_node_42_rect = parser . css ( [string] ) [EOL] [EOL] assert _cartouche_to_list ( response_node_6666 ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node_6666 . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node_6666 . css_first ( [string] ) . text ( ) [EOL] assert response_node_6666 . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node_6666 . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] assert _cartouche_to_list ( response_node_42_rect ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node_42_rect . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node_42_rect . css_first ( [string] ) . text ( ) [EOL] assert response_node_42_rect . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node_42_rect . css ( [string] ) [ - [number] ] . text ( ) [EOL] [EOL] [EOL] @ pytest . fixture def another_amendements_an_batch ( lecture_an , article1_an ) : [EOL] from zam_repondeur . models import Amendement , Batch , DBSession [EOL] [EOL] with transaction . manager : [EOL] batch = Batch . create ( ) [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , batch = batch , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] DBSession . add_all ( amendements ) [EOL] [EOL] return amendements [EOL] [EOL] [EOL] def test_generate_pdf_amendement_with_batches ( app , lecture_an , amendements_an_batch , another_amendements_an_batch ) : [EOL] from zam_repondeur . models import AmendementList , DBSession [EOL] from zam_repondeur . services . import_export . pdf import generate_html_for_pdf [EOL] [EOL] amendement_666 , amendement_999 = amendements_an_batch [EOL] amendement_666 . auteur = [string] [EOL] amendement_666 . groupe = [string] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_666 . user_content . objet = [string] [EOL] amendement_666 . user_content . reponse = [string] [EOL] [EOL] amendement_999 . auteur = [string] [EOL] amendement_999 . groupe = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] amendement_999 . user_content . objet = [string] [EOL] amendement_999 . user_content . reponse = [string] [EOL] [EOL] amendement_555 , amendement_888 = another_amendements_an_batch [EOL] amendement_555 . auteur = [string] [EOL] amendement_555 . groupe = [string] [EOL] amendement_555 . user_content . avis = [string] [EOL] amendement_555 . user_content . objet = [string] [EOL] amendement_555 . user_content . reponse = [string] [EOL] [EOL] amendement_888 . auteur = [string] [EOL] amendement_888 . groupe = [string] [EOL] amendement_888 . user_content . avis = [string] [EOL] amendement_888 . user_content . objet = [string] [EOL] amendement_888 . user_content . reponse = [string] [EOL] [EOL] amdt_list = AmendementList ( [ amendement_666 , amendement_999 , amendement_555 , amendement_888 ] ) [EOL] DBSession . add_all ( amdt_list ) [EOL] DBSession . flush ( ) [EOL] [EOL] assert amdt_list . similaires ( amendement_666 ) == [ amendement_999 ] [EOL] assert amdt_list . similaires ( amendement_555 ) == [ amendement_888 ] [EOL] [EOL] parser = HTMLParser ( generate_html_for_pdf ( DummyRequest ( ) , [string] , { [string] : AmendementList ( [ amendement_666 , amendement_555 ] ) , [string] : amdt_list , } , ) ) [EOL] [EOL] assert _html_page_titles ( parser ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] response_node = parser . css_first ( [string] ) [EOL] assert _cartouche_to_list ( response_node ) == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] assert response_node . css_first ( [string] ) . text ( ) == [string] [EOL] assert [string] in response_node . css_first ( [string] ) . text ( ) [EOL] assert response_node . css ( [string] ) [ - [number] ] . text ( ) == [string] [EOL] assert [string] in response_node . css ( [string] ) [ - [number] ] . text ( ) [EOL]	
from typing import Type [EOL] import repondeur [EOL] import typing [EOL] class TestRepr : [EOL] def test_no_repr_keys ( self ) : [EOL] from sqlalchemy import Column , Integer [EOL] [EOL] from zam_repondeur . models . base import Base [EOL] [EOL] class Foo ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True ) [EOL] [EOL] foo = Foo ( ) [EOL] assert repr ( foo ) == f" [string] { id ( foo ) : [string] } [string] " [EOL] [EOL] def test_dossier ( self , dossier_plfss2018 ) : [EOL] expected_repr = ( [string] [string] [string] ) [EOL] [EOL] assert repr ( dossier_plfss2018 ) == expected_repr [EOL] [EOL] def test_lecture ( self , lecture_an ) : [EOL] expected_repr = ( [string] [string] ) [EOL] assert repr ( lecture_an ) == expected_repr [EOL] [EOL] def test_article ( self , article1_an ) : [EOL] expected_repr = ( [string] ) [EOL] assert repr ( article1_an ) == expected_repr [EOL] [EOL] def test_amendement ( self , amendements_an ) : [EOL] expected_repr = ( [string] [string] ) [EOL] assert repr ( amendements_an [ [number] ] ) == expected_repr [EOL] [EOL] def test_team ( self , team_zam ) : [EOL] expected_repr = [string] [EOL] assert repr ( team_zam ) == expected_repr [EOL] [EOL] def test_user ( self , user_ronan ) : [EOL] expected_repr = [string] [EOL] assert repr ( user_ronan ) == expected_repr [EOL] [EOL] def test_user_with_team ( self , user_david ) : [EOL] expected_repr = ( [string] [string] ) [EOL] assert repr ( user_david ) == expected_repr [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[repondeur.tests.models.test_base.TestRepr.test_no_repr_keys.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 $repondeur.tests.models.test_base.TestRepr.test_no_repr_keys.Foo$ 0 0 0 0 0 0 0 0 $repondeur.tests.models.test_base.TestRepr.test_no_repr_keys.Foo$ 0 0 0 0 0 0 0 $repondeur.tests.models.test_base.TestRepr.test_no_repr_keys.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] [EOL] import pytest [EOL] from freezegun import freeze_time [EOL] [EOL] [EOL] class TestUserActivity : [EOL] def test_user_activity_default ( self , users_repository , user_david ) : [EOL] assert not user_david . is_active [EOL] [EOL] def test_user_activity_in_use ( self , app , user_david , dossier_plfss2018 ) : [EOL] app . get ( [string] , user = user_david ) [EOL] assert user_david . is_active [EOL] [EOL] def test_user_activity_not_anymore_in_use ( self , app , user_david , dossier_plfss2018 ) : [EOL] app . get ( [string] , user = user_david ) [EOL] assert user_david . is_active [EOL] [EOL] with freeze_time ( datetime . utcnow ( ) + timedelta ( minutes = [number] ) ) : [EOL] assert user_david . is_active [EOL] [EOL] with freeze_time ( datetime . utcnow ( ) + timedelta ( minutes = [number] ) ) : [EOL] assert not user_david . is_active [EOL] [EOL] [EOL] class TestUserTeamRelationship : [EOL] def test_user_set_team ( self , user_david ) : [EOL] from zam_repondeur . models import DBSession , Team , User [EOL] [EOL] team_zam = DBSession . query ( Team ) . first ( ) [EOL] assert DBSession . query ( User ) . first ( ) . teams == [ team_zam ] [EOL] [EOL] def test_user_unset_team ( self , user_david ) : [EOL] from zam_repondeur . models import DBSession , Team , User [EOL] [EOL] user_david = DBSession . query ( User ) . first ( ) [EOL] team_zam = DBSession . query ( Team ) . first ( ) [EOL] user_david . teams . remove ( team_zam ) [EOL] assert DBSession . query ( User ) . first ( ) . teams == [ ] [EOL] [EOL] [EOL] class TestAllowedEmailPattern : [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_pattern_allows_email ( self , pattern , email ) : [EOL] from zam_repondeur . models . users import AllowedEmailPattern [EOL] [EOL] p = AllowedEmailPattern ( pattern = pattern ) [EOL] assert p . is_allowed ( email ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_pattern_does_not_allow_email ( self , pattern , email ) : [EOL] from zam_repondeur . models . users import AllowedEmailPattern [EOL] [EOL] p = AllowedEmailPattern ( pattern = pattern ) [EOL] assert not p . is_allowed ( email ) [EOL] [EOL] [EOL] class TestEmailWellFormed : [EOL] @ pytest . mark . parametrize ( [string] , [ [string] ] ) def test_email_is_well_formed ( self , email ) : [EOL] from zam_repondeur . models . users import User [EOL] [EOL] assert User . email_is_well_formed ( email ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_email_is_not_well_formed ( self , email ) : [EOL] from zam_repondeur . models . users import User [EOL] [EOL] assert not User . email_is_well_formed ( email ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from itertools import tee [EOL] [EOL] import pytest [EOL] [EOL] [EOL] def pairwise ( iterable ) : [EOL] [docstring] [EOL] a , b = tee ( iterable ) [EOL] next ( b , None ) [EOL] return zip ( a , b ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_stringify ( lecture_an , type_ , pos , num , mult , output ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article = Article . create ( lecture = lecture_an , type = type_ , num = num , mult = mult , pos = pos ) [EOL] assert str ( article ) == output [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_slug ( lecture_an , type_ , pos , num , mult , output ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article = Article . create ( lecture = lecture_an , type = type_ , num = num , mult = mult , pos = pos ) [EOL] assert article . slug == output [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_url_key ( lecture_an , type_ , pos , num , mult , output ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article = Article . create ( lecture = lecture_an , type = type_ , num = num , mult = mult , pos = pos ) [EOL] assert article . url_key == output [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_format ( lecture_an , type_ , pos , num , mult , output ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article = Article . create ( lecture = lecture_an , type = type_ , num = num , mult = mult , pos = pos ) [EOL] assert article . format ( short = False ) == output [EOL] [EOL] [EOL] class TestOrdering : [EOL] def test_types ( self , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] titre = Article . create ( lecture = lecture_an , type = [string] ) [EOL] motion = Article . create ( lecture = lecture_an , type = [string] ) [EOL] chapitre = Article . create ( lecture = lecture_an , type = [string] ) [EOL] section = Article . create ( lecture = lecture_an , type = [string] ) [EOL] sous_section = Article . create ( lecture = lecture_an , type = [string] ) [EOL] article = Article . create ( lecture = lecture_an , type = [string] ) [EOL] annexe = Article . create ( lecture = lecture_an , type = [string] ) [EOL] vide = Article . create ( lecture = lecture_an , type = [string] ) [EOL] assert ( titre < motion < chapitre < section < sous_section < article < annexe < vide ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , list ( pairwise ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) ) , ) def test_andouillette ( self , lecture_an , before , after ) : [EOL] [docstring] [EOL] from zam_repondeur . models import Article [EOL] [EOL] def make_article ( type_ , s ) : [EOL] if [string] in s : [EOL] num , mult = s . split ( [string] , [number] ) [EOL] else : [EOL] num , mult = s , [string] [EOL] return Article . create ( lecture = lecture_an , type = type_ , num = num , mult = mult ) [EOL] [EOL] article_before = make_article ( * before ) [EOL] article_after = make_article ( * after ) [EOL] assert article_before < article_after [EOL] assert article_before . sort_key_as_str < article_after . sort_key_as_str [EOL] [EOL] def test_avant_apres ( self , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] apres_article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] avant_article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] [EOL] assert article_6 < apres_article_6 < avant_article_7 < article_7 [EOL] [EOL] def test_previous_next ( self , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] apres_article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] avant_article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] [EOL] assert article_6 . previous_article is None [EOL] assert article_6 . next_article == apres_article_6 [EOL] assert apres_article_6 . previous_article == article_6 [EOL] assert apres_article_6 . next_article == avant_article_7 [EOL] assert avant_article_7 . previous_article == apres_article_6 [EOL] assert avant_article_7 . next_article == article_7 [EOL] assert article_7 . previous_article == avant_article_7 [EOL] assert article_7 . next_article is None [EOL] [EOL] def test_previous_next_displayable ( self , article1_an , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Article , DBSession [EOL] [EOL] article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] apres_article_6 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] avant_article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] , pos = [string] ) [EOL] article_7 = Article . create ( lecture = lecture_an , type = [string] , num = [number] ) [EOL] amendements_an [ [number] ] . article = avant_article_7 [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] assert article1_an . previous_displayable_article is None [EOL] assert article1_an . next_displayable_article == article_6 [EOL] assert article_6 . previous_displayable_article == article1_an [EOL] assert article_6 . next_displayable_article == avant_article_7 [EOL] assert apres_article_6 . previous_displayable_article == article_6 [EOL] assert apres_article_6 . next_displayable_article == avant_article_7 [EOL] assert avant_article_7 . previous_displayable_article == article_6 [EOL] assert avant_article_7 . next_displayable_article == article_7 [EOL] assert article_7 . previous_displayable_article == avant_article_7 [EOL] assert article_7 . next_displayable_article is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Iterator , List , Any , Iterable [EOL] import typing [EOL] import builtins [EOL] from datetime import timedelta [EOL] from itertools import islice [EOL] from random import randint , shuffle [EOL] from typing import Any , Iterable [EOL] [EOL] import pytest [EOL] from hypothesis import given , settings [EOL] from hypothesis . strategies import integers [EOL] [EOL] [EOL] @ pytest . fixture def amendements ( db , lecture_an , article1_an ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] return [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position ) for position , num in enumerate ( ( [number] , [number] , [number] , [number] ) , [number] ) ] [EOL] [EOL] [EOL] class TestCollapsedBatches : [EOL] def test_unbatched_amendements_are_left_alone ( self , amendements ) : [EOL] from zam_repondeur . models . batch import Batch [EOL] [EOL] assert [ a . num for a in Batch . collapsed_batches ( amendements ) ] == [ [number] , [number] , [number] , [number] ] [EOL] [EOL] def test_batched_amendements_are_grouped ( self , amendements ) : [EOL] from zam_repondeur . models . batch import Batch [EOL] [EOL] amendements [ [number] ] . location . batch = amendements [ [number] ] . location . batch = Batch . create ( ) [EOL] assert [ a . num for a in Batch . collapsed_batches ( amendements ) ] == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] class TestExpandedBatches : [EOL] def test_unbatched_amendements_are_left_alone ( self , amendements ) : [EOL] from zam_repondeur . models . batch import Batch [EOL] [EOL] assert [ a . num for a in Batch . expanded_batches ( amendements ) ] == [ [number] , [number] , [number] , [number] ] [EOL] [EOL] def test_batched_amendements_are_expanded ( self , amendements ) : [EOL] from zam_repondeur . models . batch import Batch [EOL] [EOL] amendements [ [number] ] . location . batch = amendements [ [number] ] . location . batch = Batch . create ( ) [EOL] assert { a . num for a in Batch . expanded_batches ( [ amendements [ [number] ] , amendements [ [number] ] , amendements [ [number] ] ] ) } == { [number] , [number] , [number] , [number] } [EOL] [EOL] [EOL] def partition ( li , min_chunk = [number] , max_chunk = [number] ) : [EOL] it = iter ( li ) [EOL] while True : [EOL] nxt = list ( islice ( it , randint ( min_chunk , max_chunk ) ) ) [EOL] if nxt : [EOL] yield nxt [EOL] else : [EOL] break [EOL] [EOL] [EOL] @ given ( integers ( min_value = [number] , max_value = [number] ) ) @ settings ( deadline = timedelta ( milliseconds = [number] ) ) def test_reversibility ( lecture_an , article1_an , nb_amendements ) : [EOL] from zam_repondeur . models import Amendement , Batch [EOL] [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) for i in range ( nb_amendements ) ] [EOL] [EOL] shuffle ( amendements ) [EOL] [EOL] batches = [ ] [EOL] for chunk in partition ( amendements , max_chunk = max ( [number] , len ( amendements ) ) ) : [EOL] if len ( chunk ) < [number] : [EOL] continue [EOL] batch = Batch . create ( ) [EOL] batch . amendements . extend ( chunk ) [EOL] batches . append ( batch ) [EOL] [EOL] assert not any ( len ( batch . amendements ) == [number] for batch in batches ) [EOL] [EOL] assert set ( Batch . expanded_batches ( Batch . collapsed_batches ( amendements ) ) ) == set ( amendements ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import date [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] class TestLectureToStr : [EOL] def test_an_seance_publique_15e_legislature ( self , dossier_plfss2018 , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , dossier = dossier_plfss2018 , texte = texte_plfss2018_an_premiere_lecture , titre = [string] , organe = [string] , ) [EOL] result = ( [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] def test_an_seance_publique_14e_legislature ( self , db ) : [EOL] from zam_repondeur . models import ( Chambre , Dossier , Lecture , Phase , Texte , TypeTexte , ) [EOL] [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , dossier = dossier , texte = texte , titre = [string] , organe = [string] , ) [EOL] result = ( [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] def test_an_commission ( self , dossier_plfss2018 , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , dossier = dossier_plfss2018 , texte = texte_plfss2018_an_premiere_lecture , titre = [string] , organe = [string] , ) [EOL] result = ( [string] [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] def test_an_commission_speciale ( self , dossier_essoc2018 , texte_essoc2018_an_nouvelle_lecture_commission_fond ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , dossier = dossier_essoc2018 , texte = texte_essoc2018_an_nouvelle_lecture_commission_fond , titre = [string] , organe = [string] , ) [EOL] result = ( [string] [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] def test_senat_seance_publique ( self , dossier_plfss2018 , texte_plfss2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , dossier = dossier_plfss2018 , texte = texte_plfss2018_senat_premiere_lecture , titre = [string] , organe = [string] , ) [EOL] result = ( [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] [EOL] class TestSimilairesMap : [EOL] def test_empty ( self , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] assert lecture_an . all_amendements . similaires_map == { } [EOL] [EOL] def test_no_reponses ( self , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] amdt_666 , amdt_999 = amendements_an [EOL] assert lecture_an . all_amendements . similaires_map == { [number] : { amdt_666 , amdt_999 } , [number] : { amdt_666 , amdt_999 } , } [EOL] [EOL] def test_same_reponses ( self , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] lecture_an = DBSession . query ( Lecture ) . one ( ) [EOL] amdt_666 = DBSession . query ( Amendement ) . filter_by ( num = [number] ) . one ( ) [EOL] amdt_999 = DBSession . query ( Amendement ) . filter_by ( num = [number] ) . one ( ) [EOL] [EOL] assert amdt_666 . user_content . reponse_hash == amdt_999 . user_content . reponse_hash [EOL] [EOL] assert lecture_an . all_amendements . similaires_map == { [number] : { amdt_666 , amdt_999 } , [number] : { amdt_666 , amdt_999 } , } [EOL] [EOL] def test_different_reponses ( self , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] lecture_an = DBSession . query ( Lecture ) . one ( ) [EOL] amdt_666 = DBSession . query ( Amendement ) . filter_by ( num = [number] ) . one ( ) [EOL] amdt_999 = DBSession . query ( Amendement ) . filter_by ( num = [number] ) . one ( ) [EOL] [EOL] assert amdt_666 . user_content . reponse_hash != amdt_999 . user_content . reponse_hash [EOL] [EOL] assert lecture_an . all_amendements . similaires_map == { [number] : { amdt_666 } , [number] : { amdt_999 } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Tuple , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] EXAMPLES = [ ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ( [string] , [number] , [number] , [string] ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , EXAMPLES ) def test_parse_num ( text , num , rectif , disp ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] assert Amendement . parse_num ( text ) == ( num , rectif ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , EXAMPLES ) def test_num_disp ( lecture_senat , article1_senat , text , num , rectif , disp ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] amendement = Amendement . create ( lecture = lecture_senat , article = article1_senat , alinea = [string] , num = num , rectif = rectif , auteur = [string] , parent = None , ) [EOL] assert amendement . num_disp == disp [EOL] [EOL] [EOL] def test_amendement_parent_relationship ( amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] a , b = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] assert a . parent is None [EOL] assert b . parent is None [EOL] [EOL] b . parent = a [EOL] [EOL] [comment] [EOL] DBSession . flush ( ) [EOL] assert b . parent_pk == a . pk [EOL] [EOL] [EOL] def test_amendement_batches ( amendements_an ) : [EOL] from zam_repondeur . models import Amendement , Batch , DBSession [EOL] [EOL] a , b = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] assert a . location . batch is None [EOL] assert b . location . batch is None [EOL] [EOL] batch = Batch . create ( ) [EOL] a . location . batch = batch [EOL] b . location . batch = batch [EOL] [EOL] a , b = DBSession . query ( Amendement ) . all ( ) [EOL] assert a . location . batch == b . location . batch == batch [EOL] [EOL] [EOL] def test_amendement_unicity ( amendements_an , article1av_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] existing = amendements_an [ [number] ] [EOL] with transaction . manager , pytest . raises ( IntegrityError ) as error_info : [EOL] Amendement . create ( lecture = existing . lecture , num = existing . num , rectif = existing . rectif + [number] , article = article1av_an , parent = None , objet = [string] , ) [EOL] DBSession . flush ( ) [EOL] assert [string] in error_info . value . _message ( ) [EOL] [EOL] [EOL] class TestDisplayableIdentiques : [EOL] def test_without_batch ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] [EOL] def test_with_batch ( self , amendements_an_batch ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendements_an_batch = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] amendement_666 , amendement_999 = amendements_an_batch [EOL] [comment] [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an_batch ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] [EOL] amendements_an_batch = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] amendement_666 , amendement_999 = amendements_an_batch [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] [EOL] class TestDisplayableIdentiquesAreSimilaire : [EOL] def test_same_avis_and_no_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] assert amendement_666 . all_displayable_identiques_have_same_response ( ) [EOL] assert amendement_999 . all_displayable_identiques_have_same_response ( ) [EOL] [EOL] def test_same_avis_and_same_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] amendement_666 . user_content . reponse = [string] [EOL] amendement_999 . user_content . reponse = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] assert amendement_666 . all_displayable_identiques_have_same_response ( ) [EOL] assert amendement_999 . all_displayable_identiques_have_same_response ( ) [EOL] [EOL] def test_same_avis_and_same_reponse_with_spaces ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] amendement_666 . user_content . reponse = [string] [EOL] amendement_999 . user_content . reponse = [string] [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] assert amendement_666 . all_displayable_identiques_have_same_response ( ) [EOL] assert amendement_999 . all_displayable_identiques_have_same_response ( ) [EOL] [EOL] def test_different_avis ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] assert not amendement_666 . all_displayable_identiques_have_same_response ( ) [EOL] assert not amendement_999 . all_displayable_identiques_have_same_response ( ) [EOL] [EOL] def test_different_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement_666 . id_identique = [number] [EOL] amendement_999 . id_identique = [number] [EOL] amendement_666 . id_discussion_commune = [number] [EOL] amendement_999 . id_discussion_commune = [number] [EOL] amendement_666 . user_content . avis = [string] [EOL] amendement_999 . user_content . avis = [string] [EOL] amendement_666 . user_content . reponse = [string] [EOL] amendement_999 . user_content . reponse = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [comment] [EOL] [EOL] amendement_666 , amendement_999 = amendements_an [EOL] [EOL] assert list ( amendement_666 . _displayable_identiques ( ) ) == [ amendement_999 ] [EOL] assert list ( amendement_999 . _displayable_identiques ( ) ) == [ amendement_666 ] [EOL] assert not amendement_666 . all_displayable_identiques_have_same_response ( ) [EOL] assert not amendement_999 . all_displayable_identiques_have_same_response ( ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestAmendementEdition : [EOL] def test_amendement_is_not_being_edited ( self , amendements_an ) : [EOL] assert not amendements_an [ [number] ] . is_being_edited [EOL] [EOL] def test_amendement_is_being_edited ( self , amendements_an , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] assert amendements_an [ [number] ] . is_being_edited [EOL] [EOL] def test_amendement_no_longer_being_edited ( self , amendements_an , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] assert amendements_an [ [number] ] . is_being_edited [EOL] amendements_an [ [number] ] . stop_editing ( ) [EOL] assert not amendements_an [ [number] ] . is_being_edited [EOL] [EOL] [EOL] class TestHasObjet : [EOL] def test_non_empty_objet ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert amendements_an [ [number] ] . user_content . has_objet [EOL] [EOL] def test_empty_objet ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_objet [EOL] [EOL] def test_whitespace_objet ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_objet [EOL] [EOL] def test_empty_paragraph_objet ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_objet [EOL] [EOL] def test_null_objet ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . objet = None [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_objet [EOL] [EOL] [EOL] class TestHasReponse : [EOL] def test_non_empty_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert amendements_an [ [number] ] . user_content . has_reponse [EOL] [EOL] def test_empty_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_reponse [EOL] [EOL] def test_whitespace_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_reponse [EOL] [EOL] def test_empty_paragraph_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_reponse [EOL] [EOL] def test_null_reponse ( self , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . user_content . reponse = None [EOL] [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] assert not amendements_an [ [number] ] . user_content . has_reponse [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.int,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.int,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.int,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from datetime import date [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plf2018 ( db , team_zam ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] with transaction . manager : [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] dossier . team = team_zam [EOL] [EOL] return dossier [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf2018_an_premiere_lecture ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] return texte [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_commission_fond_1 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_commission_fond_2 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_commission_avis_1 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_commission_avis_2 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_seance_publique_1 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_premiere_lecture_seance_publique_2 ( db , dossier_plf2018 , texte_plf2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def article1_plf2018_an_premiere_lecture_seance_publique_2 ( db , lecture_plf2018_an_premiere_lecture_seance_publique_2 ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_plf2018_an_premiere_lecture_seance_publique_2 , type = [string] , num = [string] , ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def amendements_plf2018_an_premiere_lecture_seance_publique_2 ( db , lecture_plf2018_an_premiere_lecture_seance_publique_2 , article1_plf2018_an_premiere_lecture_seance_publique_2 , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements = [ Amendement . create ( lecture = lecture_plf2018_an_premiere_lecture_seance_publique_2 , article = article1_plf2018_an_premiere_lecture_seance_publique_2 , num = num , position = position , mission_titre = [string] , mission_titre_court = [string] , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] [EOL] DBSession . add_all ( amendements ) [EOL] return amendements [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf2018_senat_premiere_lecture ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] return texte [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_premiere_lecture_commission_fond_1 ( db , dossier_plf2018 , texte_plf2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_senat_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_premiere_lecture_commission_fond_2 ( db , dossier_plf2018 , texte_plf2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_senat_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_premiere_lecture_seance_publique_1 ( db , dossier_plf2018 , texte_plf2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_senat_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_premiere_lecture_seance_publique_2 ( db , dossier_plf2018 , texte_plf2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , partie = [number] , texte = texte_plf2018_senat_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf2018_an_nouvelle_lecture ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] return texte [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_nouvelle_lecture_commission_fond ( db , dossier_plf2018 , texte_plf2018_an_nouvelle_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_an_nouvelle_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_nouvelle_lecture_seance_publique ( db , dossier_plf2018 , texte_plf2018_an_nouvelle_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_an_nouvelle_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf2018_senat_nouvelle_lecture ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] return texte [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_nouvelle_lecture_commission_fond ( db , dossier_plf2018 , texte_plf2018_senat_nouvelle_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_senat_nouvelle_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_senat_nouvelle_lecture_seance_publique ( db , dossier_plf2018 , texte_plf2018_senat_nouvelle_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_senat_nouvelle_lecture , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf2018_an_lecture_definitive ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] return texte [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_lecture_definitive_commission_fond ( db , dossier_plf2018 , texte_plf2018_an_lecture_definitive ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_an_lecture_definitive , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf2018_an_lecture_definitive_seance_publique ( db , dossier_plf2018 , texte_plf2018_an_lecture_definitive ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte_plf2018_an_lecture_definitive , titre = [string] , organe = [string] , dossier = dossier_plf2018 , ) [EOL] [EOL] return lecture [EOL]	
	0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import responses [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent . parent / [string] / [string] / [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def mock_scraping_senat ( ) : [EOL] with responses . RequestsMock ( assert_all_requests_are_fired = False ) as mock_resp : [EOL] mock_resp . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] for path in SAMPLE_DATA_DIR . glob ( [string] ) : [EOL] mock_resp . add ( responses . GET , f" [string] { path . name }" , body = path . read_bytes ( ) , status = [number] , ) [EOL] yield [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Optional , List , Union [EOL] import typing [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] SAMPLE_ORGANES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : [string] , [string] : None , [string] : { [string] : [string] , [string] : None } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : { [string] : [string] , [string] : None , } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : [string] , } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : None , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , [string] : [string] , } , [string] : { [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , [string] : [string] , [string] : { [string] : None , [string] : [string] , [string] : None } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : None } , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : None , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : { [string] : None , [string] : None } , [string] : [string] , } , } [EOL] [EOL] SAMPLE_ACTEURS = { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : None , } , [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , } , } , [string] : [string] , [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , [string] : { [string] : { [string] : [string] , [string] : None , [string] : [string] , } } , [string] : None , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : None , } , [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , } , ] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , } , ] } , } } [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] , autouse = True ) def mock_organes_acteurs ( ) : [EOL] with patch ( [string] ) as m_organes : [EOL] m_organes . return_value = ( SAMPLE_ORGANES , SAMPLE_ACTEURS ) [EOL] yield [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plfss2019 ( db ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] with transaction . manager : [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] [EOL] return dossier [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def shared_table_lecture_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import SharedTable [EOL] [EOL] with transaction . manager : [EOL] shared_table = SharedTable . create ( titre = [string] , lecture = lecture_an ) [EOL] [EOL] return shared_table [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def team_zam ( db ) : [EOL] from zam_repondeur . models import Team [EOL] [EOL] return Team . create ( name = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def user_david ( db , team_zam ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( team_zam ) [EOL] user = User . create ( name = [string] , email = [string] ) [EOL] team_zam . users . append ( user ) [EOL] [EOL] return user [EOL] [EOL] [EOL] @ pytest . fixture def user_ronan ( db ) : [EOL] from zam_repondeur . models import User [EOL] [EOL] return User . create ( name = [string] , email = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def user_daniel ( db ) : [EOL] from zam_repondeur . models import User [EOL] [EOL] return User . create ( name = [string] , email = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def user_sgg ( db ) : [EOL] from zam_repondeur . models import User [EOL] [EOL] with transaction . manager : [EOL] return User . create ( name = [string] , email = [string] , admin_at = datetime . utcnow ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture def user_david_table_an ( user_david , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] table = user_david . table_for ( lecture_an ) [EOL] DBSession . add ( table ) [EOL] [EOL] return table [EOL] [EOL] [EOL] @ pytest . fixture def user_david_table_senat ( user_david , lecture_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] table = user_david . table_for ( lecture_senat ) [EOL] DBSession . add ( table ) [EOL] [EOL] return table [EOL] [EOL] [EOL] @ pytest . fixture def user_ronan_table_an ( user_ronan , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan ) [EOL] table = user_ronan . table_for ( lecture_an ) [EOL] DBSession . add ( table ) [EOL] [EOL] return table [EOL] [EOL] [EOL] @ pytest . fixture def user_daniel_table_an ( user_daniel , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_daniel ) [EOL] table = user_daniel . table_for ( lecture_an ) [EOL] DBSession . add ( table ) [EOL] [EOL] return table [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def lecture_an ( db , dossier_plfss2018 , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plfss2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plfss2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def lecture_an_url ( lecture_an ) : [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture def lecture_senat ( db , dossier_plfss2018 , texte_plfss2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plfss2018_senat_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plfss2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] @ pytest . fixture def chapitre_1er_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_an , type = [string] , num = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article1_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_an , type = [string] , num = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article1av_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article7bis_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_an , type = [string] , num = [string] , mult = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def annexe_an ( db , lecture_an ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_an , type = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article1_senat ( db , lecture_senat ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_senat , type = [string] , num = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article1av_senat ( db , lecture_senat ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_senat , type = [string] , num = [string] , pos = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def article7bis_senat ( db , lecture_senat ) : [EOL] from zam_repondeur . models import Article [EOL] [EOL] with transaction . manager : [EOL] article = Article . create ( lecture = lecture_senat , type = [string] , num = [string] , mult = [string] ) [EOL] [EOL] return article [EOL] [EOL] [EOL] @ pytest . fixture def amendements_an ( db , lecture_an , article1_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements = [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] [EOL] DBSession . add_all ( amendements ) [EOL] return amendements [EOL] [EOL] [EOL] @ pytest . fixture def amendements_an_batch ( amendements_an ) : [EOL] from zam_repondeur . models import Batch , DBSession [EOL] [EOL] with transaction . manager : [EOL] batch = Batch . create ( ) [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] return amendements_an [EOL] [EOL] [EOL] @ pytest . fixture def amendements_senat ( db , lecture_senat , article1_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements = [ Amendement . create ( lecture = lecture_senat , article = article1_senat , num = num , position = position , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] [EOL] DBSession . add_all ( amendements ) [EOL] return amendements [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent / [string] / [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] , ) def test_parse ( matricule , nom , groupe ) : [EOL] from zam_repondeur . services . fetch . senat . senateurs . parse import parse_senateurs [EOL] [EOL] filename = SAMPLE_DATA_DIR / [string] [EOL] with filename . open ( [string] , encoding = [string] ) as file_ : [EOL] senateurs_by_matricule = parse_senateurs ( file_ ) [EOL] [EOL] senateur = senateurs_by_matricule [ matricule ] [EOL] [EOL] assert senateur . nom == nom [EOL] assert senateur . groupe == groupe [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] from contextlib import contextmanager [EOL] [EOL] import responses [EOL] [EOL] [EOL] @ contextmanager def setup_mock_responses ( lecture , liste , amendements ) : [EOL] [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] with responses . RequestsMock ( assert_all_requests_are_fired = False ) as mock_resp : [EOL] [EOL] [comment] [EOL] mock_resp . add ( responses . GET , build_url ( lecture ) , body = liste , status = [number] ) [EOL] [EOL] [comment] [EOL] for number , data in amendements : [EOL] mock_resp . add ( responses . GET , build_url ( lecture , number ) , body = data , status = [number] ) [EOL] [EOL] [comment] [EOL] url_pattern = re . escape ( build_url ( lecture , [string] ) ) . replace ( [string] , [string] ) [EOL] mock_resp . add ( responses . GET , re . compile ( url_pattern ) , status = [number] ) [EOL] [EOL] yield mock_resp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def source_senat ( settings ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] return Senat ( settings = settings ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def source_an ( settings ) : [EOL] from zam_repondeur . services . fetch . an . amendements import AssembleeNationale [EOL] [EOL] return AssembleeNationale ( settings = settings ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] from pathlib import Path [EOL] from textwrap import dedent [EOL] [EOL] import pytest [EOL] import responses [EOL] [EOL] from fetch . mock_an import setup_mock_responses [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent / [string] [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( SAMPLE_DATA_DIR / basename ) . read_text ( ) [EOL] [EOL] [EOL] @ responses . activate def test_position_changed ( lecture_an , source_an ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] assert [ amdt . num for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] assert [ amdt . position for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] assert [ amdt . num for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] assert [ amdt . position for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] [EOL] [EOL] @ responses . activate def test_abandoned_before_seance ( lecture_an , source_an ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] assert [ amdt . num for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] assert [ amdt . position for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] assert [ amdt . num for amdt in lecture_an . amendements ] == [ [number] , [number] ] [EOL] assert [ amdt . position for amdt in lecture_an . amendements ] == [ None , [number] ] [EOL] [EOL] [EOL] @ responses . activate def test_article_changed ( lecture_an , source_an ) : [EOL] [docstring] [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert str ( amendement . article ) == [string] [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) . replace ( [string] , [string] , ) , ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert str ( amendement . article ) == [string] [EOL] [EOL] [EOL] @ responses . activate def test_add_parent_amendement ( lecture_an , source_an ) : [EOL] [docstring] [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . parent is None [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) . replace ( [string] , [string] , ) , ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . parent is not None [EOL] assert amendement . parent . num == [number] [EOL] [EOL] [EOL] @ responses . activate def test_remove_parent_amendement ( lecture_an , source_an ) : [EOL] [docstring] [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) . replace ( [string] , [string] , ) , ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . parent is not None [EOL] assert amendement . parent . num == [number] [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . parent is None [EOL] [EOL] [EOL] @ responses . activate def test_rectif ( lecture_an , source_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementRectifie [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . rectif == [number] [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) . replace ( [string] , [string] , ) , ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . rectif == [number] [EOL] [EOL] event = next ( e for e in amendement . events if isinstance ( e , AmendementRectifie ) ) [EOL] assert event . data [ [string] ] == [number] [EOL] assert event . data [ [string] ] == [number] [EOL] [EOL] [EOL] @ responses . activate def test_rectif_with_nil ( lecture_an , source_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementRectifie [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . rectif == [number] [EOL] [EOL] [comment] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) . replace ( [string] , ( [string] [string] ) , ) , ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = source_an . fetch ( lecture = lecture_an ) [EOL] [EOL] assert result . errored == set ( ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . rectif == [number] [EOL] [EOL] with pytest . raises ( StopIteration ) : [EOL] next ( e for e in amendement . events if isinstance ( e , AmendementRectifie ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path
	0
import pathlib [EOL] [docstring] [EOL] from pathlib import Path [EOL] [EOL] import responses [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent / [string] / [string] [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( SAMPLE_DATA_DIR / basename ) . read_bytes ( ) [EOL] [EOL] [EOL] @ responses . activate def test_position_changed ( lecture_senat , source_senat ) : [EOL] [docstring] [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . position for amdt in lecture_senat . amendements } == { [number] : [number] , [number] : [number] , } [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . position for amdt in lecture_senat . amendements } == { [number] : [number] , [number] : [number] , } [EOL] [EOL] [EOL] @ responses . activate def test_abandoned_before_seance ( lecture_senat , source_senat ) : [EOL] [docstring] [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . position for amdt in lecture_senat . amendements } == { [number] : [number] , [number] : [number] , } [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . position for amdt in lecture_senat . amendements } == { [number] : [number] , [number] : None , } [EOL] [EOL] [EOL] @ responses . activate def test_article_changed ( lecture_senat , source_senat ) : [EOL] [docstring] [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : str ( amdt . article ) for amdt in lecture_senat . amendements } == { [number] : [string] , [number] : [string] , } [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : str ( amdt . article ) for amdt in lecture_senat . amendements } == { [number] : [string] , [number] : [string] , } [EOL] [EOL] [EOL] @ responses . activate def test_add_parent_amendement ( lecture_senat , source_senat ) : [EOL] [docstring] [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . parent . num if amdt . parent else None for amdt in lecture_senat . amendements } == { [number] : None , [number] : None } [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . parent . num if amdt . parent else None for amdt in lecture_senat . amendements } == { [number] : None , [number] : [number] } [EOL] [EOL] [EOL] @ responses . activate def test_remove_parent_amendement ( lecture_senat , source_senat ) : [EOL] [docstring] [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . parent . num if amdt . parent else None for amdt in lecture_senat . amendements } == { [number] : None , [number] : [number] } [EOL] [EOL] source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert { amdt . num : amdt . parent . num if amdt . parent else None for amdt in lecture_senat . amendements } == { [number] : None , [number] : None } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path
from typing import Any [EOL] import typing [EOL] from collections import OrderedDict [EOL] from textwrap import dedent [EOL] from unittest . mock import patch [EOL] [EOL] import transaction [EOL] [EOL] from fetch . mock_an import setup_mock_responses [EOL] [EOL] [EOL] def test_fetch_amendements_senat ( app , source_senat , lecture_senat , article1_senat , amendements_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendement = amendements_senat [ [number] ] [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DBSession . add ( amendement ) [EOL] [EOL] [comment] [EOL] with patch ( [string] ) as mock_fetch_all , patch ( [string] ) as mock_fetch_discussion_details : [EOL] mock_fetch_all . return_value = ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] mock_fetch_discussion_details . return_value = [ ( { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] , } ] , } , MissionRef ( titre = [string] , titre_court = [string] ) , ) ] [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] result = source_senat . fetch ( lecture_senat ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] [comment] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis == [string] [EOL] assert amendement . user_content . objet == [string] [EOL] assert amendement . user_content . reponse == [string] [EOL] [EOL] [comment] [EOL] assert amendement . position == [number] [EOL] [EOL] [comment] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . position == [number] [EOL] [EOL] [EOL] def test_fetch_amendements_an ( app , source_an , lecture_an , article1_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] [EOL] amendement_9 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] amendement_9 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [comment] [EOL] assert amendement_9 . user_content . avis == [string] [EOL] assert amendement_9 . user_content . objet == [string] [EOL] assert amendement_9 . user_content . reponse == [string] [EOL] [EOL] [comment] [EOL] assert amendement_9 . matricule == [string] [EOL] assert amendement_9 . groupe == [string] [EOL] assert amendement_9 . auteur == [string] [EOL] [EOL] [comment] [EOL] assert amendement_9 . position == [number] [EOL] [EOL] [comment] [EOL] amendement_7 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement_7 . position == [number] [EOL] [EOL] [EOL] def test_fetch_amendements_an_with_mission ( app , source_an , lecture_an , article1_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] [EOL] amendement_9 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] amendement_9 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [comment] [EOL] assert amendement_9 . mission_titre == [string] [EOL] assert amendement_9 . mission_titre_court == [string] [EOL] [EOL] [EOL] def test_fetch_amendements_an_without_auteur_key ( app , source_an , lecture_an , article1_an , caplog ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] amendement_6 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] DBSession . add ( amendement_6 ) [EOL] [EOL] amendement_9 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] DBSession . add ( amendement_9 ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] for num in [ [number] , [number] , [number] ] : [EOL] assert any ( record . levelname == [string] [EOL] and record . message . startswith ( f" [string] { num }" ) for record in caplog . records ) [EOL] [EOL] amendement_9 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [comment] [EOL] assert amendement_9 . matricule == [string] [EOL] assert amendement_9 . groupe == [string] [EOL] assert amendement_9 . auteur == [string] [EOL] [EOL] [EOL] def test_fetch_amendements_an_without_group_tribun_id ( app , source_an , lecture_an , article1_an , caplog ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] amendement_6 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] DBSession . add ( amendement_6 ) [EOL] [EOL] amendement_9 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] DBSession . add ( amendement_9 ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] for num in [ [number] , [number] , [number] ] : [EOL] assert any ( record . levelname == [string] [EOL] and record . message . startswith ( f" [string] { num }" ) for record in caplog . records ) [EOL] [EOL] amendement_9 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [comment] [EOL] assert amendement_9 . matricule == [string] [EOL] assert amendement_9 . groupe == [string] [EOL] assert amendement_9 . auteur == [string] [EOL] [EOL] [EOL] def test_fetch_amendements_an_with_unknown_group_tribun_id ( app , source_an , lecture_an , article1_an , caplog ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] amendement_6 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] DBSession . add ( amendement_6 ) [EOL] [EOL] amendement_9 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] DBSession . add ( amendement_9 ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] , [number] } [EOL] assert result . created == { [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] for num in [ [number] , [number] , [number] ] : [EOL] assert any ( record . levelname == [string] [EOL] and record . message . startswith ( f" [string] { num }" ) for record in caplog . records ) [EOL] [EOL] amendement_9 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [comment] [EOL] assert amendement_9 . matricule == [string] [EOL] assert amendement_9 . groupe == [string] [EOL] assert amendement_9 . auteur == [string] [EOL] [EOL] [EOL] def test_fetch_amendements_with_errored ( app , source_an , lecture_an , article1_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] mock_retrieve_amendement . side_effect = NotFound [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == set ( ) [EOL] assert result . created == set ( ) [EOL] assert result . errored == { [number] , [number] , [number] } [EOL] assert DBSession . query ( Amendement ) . count ( ) == len ( amendements_an ) == [number] [EOL] [EOL] [EOL] def test_fetch_amendements_with_emptiness ( app , source_an , lecture_an , article1_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ) , ) : [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == set ( ) [EOL] assert result . created == set ( ) [EOL] assert result . errored == set ( ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == len ( amendements_an ) == [number] [EOL] [EOL] [EOL] def test_fetch_amendements_with_connection_errors ( app , source_an , lecture_an , article1_an , amendements_an ) : [EOL] from requests . exceptions import ConnectionError [EOL] [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_http_session : [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] mock_http_session . return_value . get . side_effect = ConnectionError [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == set ( ) [EOL] assert result . created == set ( ) [EOL] assert result . errored == { [number] , [number] , [number] } [EOL] assert DBSession . query ( Amendement ) . count ( ) == len ( amendements_an ) == [number] [EOL] [EOL] [EOL] def test_fetch_update_amendements_an_with_batch_preserve_batch ( app , source_an , lecture_an , article1_an , amendements_an_batch ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] assert amendements_an_batch [ [number] ] . location . batch . nums == [ [number] , [number] ] [EOL] [EOL] with transaction . manager , patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] DBSession . add ( lecture_an ) [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] } [EOL] assert result . created == set ( ) [EOL] assert result . errored == set ( ) [EOL] [EOL] amendement_666 = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement_666 . location . batch . nums == [ [number] , [number] ] [EOL] [EOL] [EOL] def test_fetch_update_amendements_an_with_batch_and_changing_article ( app , source_an , lecture_an , article1_an , amendements_an_batch ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import BatchUnset [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] assert amendements_an_batch [ [number] ] . location . batch . nums == [ [number] , [number] ] [EOL] [EOL] with transaction . manager , patch ( [string] ) as mock_fetch_discussion_list , patch ( [string] ) as mock_retrieve_amendement : [EOL] DBSession . add ( lecture_an ) [EOL] mock_fetch_discussion_list . return_value = ANDerouleurData ( lecture_an , { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] } } } , ) [EOL] [EOL] def dynamic_return_value ( urls , force_list = None ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] from zam_repondeur . services . fetch . exceptions import NotFound [EOL] [EOL] numero_prefixe = urls [ [number] ] . rsplit ( [string] , [number] ) [ - [number] ] [ : - [number] ] [EOL] [EOL] if numero_prefixe not in { [string] , [string] } : [EOL] raise NotFound [EOL] [EOL] return ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : numero_prefixe , [string] : numero_prefixe , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : [string] , [string] : [string] , [string] : OrderedDict ( { [string] : [string] } ) , [string] : OrderedDict ( { [string] : [string] } ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] + numero_prefixe , } } ) [EOL] [EOL] mock_retrieve_amendement . side_effect = dynamic_return_value [EOL] [EOL] result = source_an . fetch ( lecture_an ) [EOL] [EOL] assert result . fetched == { [number] , [number] } [EOL] assert result . created == set ( ) [EOL] assert result . errored == set ( ) [EOL] [EOL] for num in [ [number] , [number] ] : [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == num ) . one ( ) [EOL] assert amendement . location . batch is None [EOL] [EOL] event = next ( e for e in amendement . events if isinstance ( e , BatchUnset ) ) [EOL] assert event . render_summary ( ) == ( [string] ) [EOL]	
from typing import Any , Dict [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] import os [EOL] from pathlib import Path [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] HERE = Path ( os . path . dirname ( __file__ ) ) [EOL] ORGANES_ACTEURS = HERE / [string] / [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def sample_data ( ) : [EOL] from zam_repondeur . services . fetch . an . common import extract_from_zip [EOL] [EOL] with open ( ORGANES_ACTEURS , [string] ) as f_ : [EOL] data = { filename : json . load ( json_file ) for filename , json_file in extract_from_zip ( f_ ) if filename . endswith ( [string] ) } [EOL] return data [EOL] [EOL] [EOL] def test_get_organes_acteurs ( sample_data ) : [EOL] from zam_repondeur . services . fetch . an . organes_acteurs import get_organes_acteurs [EOL] [EOL] with patch ( [string] , return_value = sample_data , ) : [EOL] organes , acteurs = get_organes_acteurs ( ) [EOL] [EOL] assert ( organes [ [string] ] [ [string] ] == [string] ) [EOL] assert organes [ [string] ] [ [string] ] == [string] [EOL] assert organes [ [string] ] [ [string] ] == [string] [EOL] [EOL] assert [string] in acteurs [EOL] [EOL] [EOL] def test_extract_organes ( sample_data ) : [EOL] from zam_repondeur . services . fetch . an . organes_acteurs import extract_organes [EOL] [EOL] organes = extract_organes ( dict_ [ [string] ] for filename , dict_ in sample_data . items ( ) if filename . startswith ( [string] ) ) [EOL] [EOL] assert ( organes [ [string] ] [ [string] ] == [string] ) [EOL] assert organes [ [string] ] [ [string] ] == [string] [EOL] assert organes [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_extract_acteurs ( sample_data ) : [EOL] from zam_repondeur . services . fetch . an . organes_acteurs import extract_acteurs [EOL] [EOL] acteurs = extract_acteurs ( dict_ [ [string] ] for filename , dict_ in sample_data . items ( ) if filename . startswith ( [string] ) ) [EOL] [EOL] assert [string] in acteurs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import date [EOL] [EOL] [EOL] def test_parse_date_short ( ) : [EOL] from zam_repondeur . services . fetch . dates import parse_date [EOL] [EOL] assert parse_date ( [string] ) == date ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_parse_date_long ( ) : [EOL] from zam_repondeur . services . fetch . dates import parse_date [EOL] [EOL] assert parse_date ( [string] ) == date ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_parse_date_empty_string ( ) : [EOL] from zam_repondeur . services . fetch . dates import parse_date [EOL] [EOL] assert parse_date ( [string] ) is None [EOL] [EOL] [EOL] def test_parse_date_none ( ) : [EOL] from zam_repondeur . services . fetch . dates import parse_date [EOL] [EOL] assert parse_date ( None ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import pathlib [EOL] import typing [EOL] from datetime import date [EOL] from pathlib import Path [EOL] from textwrap import dedent [EOL] from unittest . mock import call , patch [EOL] [EOL] import pytest [EOL] import responses [EOL] import transaction [EOL] [EOL] from fetch . mock_an import setup_mock_responses [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent / [string] [EOL] [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( SAMPLE_DATA_DIR / basename ) . read_text ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def source ( settings ) : [EOL] from zam_repondeur . services . fetch . an . amendements import AssembleeNationale [EOL] [EOL] return AssembleeNationale ( settings = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] def assert_html_looks_like ( value , expected ) : [EOL] from textwrap import dedent [EOL] [EOL] from selectolax . parser import HTMLParser [EOL] [EOL] assert HTMLParser ( value ) . html == HTMLParser ( dedent ( expected ) ) . html [EOL] [EOL] [EOL] class TestFetchAndParseAll : [EOL] @ responses . activate def test_simple_amendements ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = source . fetch ( lecture = lecture_an ) [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture_an , num ) for num in result . fetched ) [EOL] [EOL] assert len ( amendements ) == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique is None [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique is None [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique == [number] [EOL] [EOL] assert result . created == { [number] , [number] , [number] , [number] , [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] @ responses . activate def test_simple_amendements_progress_status ( self , lecture_an , app , source , settings ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] assert lecture_an . get_fetch_progress ( ) == { } [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) , patch ( [string] ) as mocked_set_fetch_progress : [EOL] result = source . fetch ( lecture = lecture_an ) [EOL] [comment] [EOL] assert mocked_set_fetch_progress . call_args_list == [ call ( [string] , i + [number] , [number] ) for i in range ( source . batch_size ) ] [EOL] [EOL] [comment] [EOL] assert lecture_an . get_fetch_progress ( ) == { } [EOL] [EOL] assert len ( result . fetched ) == [number] [EOL] assert result . created == { [number] , [number] , [number] , [number] , [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] @ responses . activate def test_fetch_amendements_not_in_discussion_list ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . amendements import FetchResult [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = FetchResult . create ( next_start_index = [number] ) [EOL] while True : [EOL] batch_result = source . fetch ( lecture = lecture_an , start_index = result . next_start_index ) [EOL] result += batch_result [EOL] if batch_result . next_start_index is None : [EOL] break [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture_an , num ) for num in result . fetched ) [EOL] [EOL] assert len ( amendements ) == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position is None [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique is None [EOL] [EOL] assert result . created == { [number] , [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] @ responses . activate def test_commission ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = source . fetch ( lecture = lecture_an ) [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture_an , num ) for num in result . fetched ) [EOL] [EOL] assert len ( amendements ) == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position is None [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] [EOL] assert result . created == { [number] , [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] @ responses . activate def test_sous_amendements ( self , app , source , dossier_plfss2018 , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] texte_plfss2018_an_premiere_lecture . numero = [number] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plfss2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plfss2018 , ) [EOL] [EOL] DBSession . add ( lecture ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = source . fetch ( lecture = lecture ) [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture , num ) for num in result . fetched ) [EOL] [EOL] assert len ( amendements ) == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune == [number] [EOL] assert amendements [ [number] ] . id_identique == [number] [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique is None [EOL] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . position == [number] [EOL] assert ( amendements [ [number] ] . tri_amendement == [string] ) [EOL] assert amendements [ [number] ] . id_discussion_commune is None [EOL] assert amendements [ [number] ] . id_identique is None [EOL] [EOL] for amendement in amendements [ [number] : ] : [EOL] assert amendement . parent is amendements [ [number] ] [EOL] assert amendement . parent_pk == amendements [ [number] ] . pk [EOL] [EOL] assert result . created == { [number] , [number] , [number] } [EOL] assert result . errored == set ( ) [EOL] [EOL] @ responses . activate def test_with_404 ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] result = source . fetch ( lecture = lecture_an ) [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture_an , num ) for num in result . fetched ) [EOL] [EOL] assert len ( amendements ) == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] assert amendements [ [number] ] . num == [number] [EOL] [EOL] assert [ amdt . position for amdt in amendements ] == [ [number] , [number] , [number] , [number] ] [EOL] assert result . created == { [number] , [number] , [number] , [number] } [EOL] assert result . errored == { [number] } [EOL] [EOL] [EOL] class TestGetOrganeAbrev : [EOL] def test_an ( self ) : [EOL] from zam_repondeur . services . fetch . an . amendements import get_organe_abrev [EOL] [EOL] assert get_organe_abrev ( [string] ) == [string] [EOL] [EOL] def test_commission ( self ) : [EOL] from zam_repondeur . services . fetch . an . amendements import get_organe_abrev [EOL] [EOL] assert get_organe_abrev ( [string] ) == [string] [EOL] [EOL] def test_organe_not_found ( self ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ( OrganeNotFound , get_organe_abrev , ) [EOL] [EOL] with pytest . raises ( OrganeNotFound ) as exc_info : [EOL] get_organe_abrev ( [string] ) [EOL] assert str ( exc_info . value ) == [string] [EOL] [EOL] [EOL] class TestFetchDiscussionList : [EOL] @ responses . activate def test_simple_amendements ( self , lecture_an , app ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ( ANDerouleurItem , build_url , fetch_discussion_list , ) [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] derouleur = fetch_discussion_list ( lecture = lecture_an ) [EOL] [EOL] assert len ( derouleur . items ) == [number] [EOL] assert derouleur . items [ [string] ] == ANDerouleurItem ( prefixe = [string] , numero = [number] , id_discussion_commune = None , id_identique = [number] , position = [number] , ) [EOL] [EOL] @ responses . activate def test_only_one_amendement ( self , lecture_an , app ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ( ANDerouleurItem , build_url , fetch_discussion_list , ) [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an ) , body = dedent ( [string] ) , status = [number] , ) [EOL] [EOL] derouleur = fetch_discussion_list ( lecture = lecture_an ) [EOL] [EOL] assert derouleur . items [ [string] ] == ANDerouleurItem ( prefixe = [string] , numero = [number] , id_discussion_commune = None , id_identique = [number] , position = [number] , ) [EOL] [EOL] @ responses . activate def test_list_not_found ( self , lecture_an , app ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ( NotFound , build_url , fetch_discussion_list , ) [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an ) , status = [number] ) [EOL] [EOL] with pytest . raises ( NotFound ) : [EOL] fetch_discussion_list ( lecture = lecture_an ) [EOL] [EOL] [EOL] class TestFetchAmendement : [EOL] @ responses . activate def test_simple_amendement ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert created [EOL] [EOL] assert amendement . lecture == lecture_an [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] assert amendement . auteur == [string] [EOL] assert amendement . matricule == [string] [EOL] assert amendement . date_depot == date ( [number] , [number] , [number] ) [EOL] assert amendement . sort == [string] [EOL] assert amendement . position == [number] [EOL] assert ( amendement . tri_amendement == [string] ) [EOL] assert amendement . id_discussion_commune is None [EOL] assert amendement . id_identique is None [EOL] assert amendement . parent is None [EOL] assert amendement . corps == [string] [EOL] assert amendement . expose == ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] assert amendement . resume is None [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] @ responses . activate def test_fetch_amendement_gouvernement ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . gouvernemental is True [EOL] assert amendement . groupe == [string] [EOL] [EOL] @ responses . activate def test_fetch_amendement_commission ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . gouvernemental is False [EOL] assert amendement . auteur == [string] [EOL] assert amendement . groupe == [string] [comment] [EOL] [EOL] @ responses . activate def test_fetch_amendement_with_mission_cp_ae_identical ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . mission_titre == [string] [EOL] assert amendement . mission_titre_court == [string] [EOL] [EOL] assert_html_looks_like ( amendement . corps , [string] , ) [EOL] [EOL] @ responses . activate def test_fetch_amendement_with_mission_cp_ae_old ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . mission_titre == [string] [EOL] assert amendement . mission_titre_court == [string] [EOL] [EOL] assert_html_looks_like ( amendement . corps , [string] , ) [EOL] [EOL] @ responses . activate def test_fetch_amendement_with_mission_cp_ae_different ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . mission_titre == [string] [EOL] assert amendement . mission_titre_court == [string] [EOL] assert_html_looks_like ( amendement . corps , [string] , ) [EOL] [EOL] @ responses . activate def test_fetch_amendement_with_mission_cp_only ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . mission_titre == [string] [EOL] assert amendement . mission_titre_court == [string] [EOL] assert_html_looks_like ( amendement . corps , [string] , ) [EOL] [EOL] @ pytest . fixture def lecture_plf_2019 ( self , db ) : [EOL] from zam_repondeur . models import ( Chambre , Dossier , Lecture , Phase , Texte , TypeTexte , ) [EOL] [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] lecture = Lecture . create ( phase = Phase . NOUVELLE_LECTURE , texte = texte , titre = [string] , organe = [string] , dossier = dossier , ) [EOL] return lecture [EOL] [EOL] @ responses . activate def test_fetch_amendement_with_single_programme ( self , lecture_plf_2019 , source ) : [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_plf_2019 , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_plf_2019 , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . mission_titre == [string] [EOL] assert amendement . mission_titre_court == [string] [EOL] assert_html_looks_like ( amendement . corps , [string] , ) [EOL] [EOL] @ responses . activate def test_fetch_sous_amendement ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] amendement2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] [EOL] assert amendement2 . parent is amendement1 [EOL] [EOL] @ responses . activate def test_fetch_amendement_sort_nil ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . sort == [string] [EOL] [EOL] @ responses . activate def test_fetch_amendement_apres ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] assert amendement . article . type == [string] [EOL] assert amendement . article . num == [string] [EOL] assert amendement . article . mult == [string] [EOL] assert amendement . article . pos == [string] [EOL] [EOL] @ responses . activate def test_fetch_amendement_not_found ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . services . fetch . an . amendements import NotFound , build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , status = [number] ) [EOL] [EOL] with pytest . raises ( NotFound ) : [EOL] source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] @ responses . activate def test_fetch_amendement_content_empty ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . services . fetch . an . amendements import NotFound , build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , status = [number] , body = [string] ) [EOL] [EOL] with pytest . raises ( NotFound ) : [EOL] source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] [EOL] class TestFetchAmendementAgain : [EOL] @ responses . activate def test_response_is_preserved ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] amendement1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] [EOL] [comment] [EOL] amendement1 . user_content . avis = [string] [EOL] amendement1 . user_content . objet = [string] [EOL] amendement1 . user_content . reponse = [string] [EOL] [EOL] [comment] [EOL] amendement2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert not created [EOL] assert amendement2 is amendement1 [EOL] [EOL] [comment] [EOL] assert amendement2 . user_content . avis == [string] [EOL] assert amendement2 . user_content . objet == [string] [EOL] assert amendement2 . user_content . reponse == [string] [EOL] [EOL] @ responses . activate def test_sort_turn_irrecevable ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementIrrecevable [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = sample_data , status = [number] ) [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = sample_data . replace ( [string] , [string] , ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] amendement1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [comment] [EOL] amendement2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] [comment] [EOL] event = next ( e for e in amendement1 . events if isinstance ( e , AmendementIrrecevable ) ) [EOL] assert event . created_at is not None [EOL] assert event . user is None [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] @ responses . activate def test_sort_turn_irrecevable_transfers_to_index ( self , lecture_an , app , source , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . amendement import ( AmendementIrrecevable , AmendementTransfere , ) [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = sample_data , status = [number] ) [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = sample_data . replace ( [string] , [string] , ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] amendement1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] [comment] [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement1 ) [EOL] assert user_david_table_an . amendements == [ amendement1 ] [EOL] assert amendement1 . location . user_table == user_david_table_an [EOL] [EOL] [comment] [EOL] amendement2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementIrrecevable ) for event in amendement2 . events ) [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementTransfere ) for event in amendement2 . events ) [EOL] transfer_event = next ( event for event in amendement2 . events if isinstance ( event , AmendementTransfere ) ) [EOL] assert transfer_event . user is None [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . render_summary ( ) == ( [string] ) [EOL] [EOL] [comment] [EOL] assert amendement2 . location . user_table is None [EOL] assert user_david_table_an . amendements == [ ] [EOL] [EOL] @ responses . activate def test_article_has_changed ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] [EOL] amendement1 . article = None [comment] [EOL] [EOL] amendement2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert not created [EOL] assert amendement2 is amendement1 [EOL] [EOL] @ responses . activate def test_parent_has_changed ( self , lecture_an , app , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . an . amendements import build_url [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , build_url ( lecture_an , [number] ) , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] parent1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] [EOL] child1 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert created [EOL] [EOL] assert child1 . parent is parent1 [EOL] assert child1 . parent_pk == parent1 . pk [EOL] [EOL] child1 . parent = None [comment] [EOL] DBSession . flush ( ) [EOL] [EOL] parent2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert not created [EOL] assert parent2 is parent1 [EOL] [EOL] child2 , created = source . fetch_amendement ( lecture = lecture_an , numero_prefixe = [string] , position = [number] ) [EOL] assert not created [EOL] assert child2 is child1 [EOL] [EOL] assert child2 . parent_pk == parent2 . pk [EOL] assert child2 . parent is parent2 [EOL] [EOL] [EOL] def test_amendements_to_collect ( lecture_an , source ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANDerouleurData [EOL] [EOL] derouleur = ANDerouleurData ( lecture = lecture_an , content = { [string] : { [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ] } } } , ) [EOL] [EOL] prefixed_nums = source . _amendements_to_collect ( derouleur ) [EOL] [EOL] assert next ( prefixed_nums ) == [string] [comment] [EOL] assert next ( prefixed_nums ) == [string] [comment] [EOL] assert next ( prefixed_nums ) == [string] [comment] [EOL] [EOL] [EOL] class TestBatching : [EOL] @ responses . activate def test_no_amendements_stop ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] source . batch_size = [number] [EOL] source . max_404 = [number] [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = [ ] , ) : [EOL] changes = source . collect_changes ( lecture_an ) [EOL] [EOL] assert changes . next_start_index is None [EOL] [EOL] @ responses . activate def test_one_amendement_stop ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] source . batch_size = [number] [EOL] source . max_404 = [number] [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = [ ( [string] , read_sample_data ( [string] ) ) ] , ) : [EOL] changes = source . collect_changes ( lecture_an ) [EOL] [EOL] assert changes . next_start_index is None [EOL] [EOL] @ responses . activate def test_one_amendement_go_on ( self , lecture_an , source ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] source . batch_size = [number] [EOL] source . max_404 = [number] [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = dedent ( [string] ) , amendements = [ ( [string] , read_sample_data ( [string] ) ) ] , ) : [EOL] changes = source . collect_changes ( lecture_an ) [EOL] assert changes . next_start_index == [number] [EOL] [EOL] changes = source . collect_changes ( lecture_an , start_index = [number] ) [EOL] assert changes . next_start_index is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : [string] , } , [string] , [string] , [string] , [string] , ) ] , ) def test_get_division ( division , type_ , num , mult , pos ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] [EOL] amend_data = ANAmendementData ( { [string] : { [string] : division } } ) [EOL] assert amend_data . get_division ( ) == ( type_ , num , mult , pos ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] , ) def test_parse_numero_long_with_rect ( text , expected ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] [EOL] assert ANAmendementData . parse_numero_long_with_rect ( text ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [string] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ] , ) def test_parse_mission_visee ( text , expected ) : [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] [EOL] assert ANAmendementData . parse_mission_visee ( text ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import List , Any [EOL] import pathlib [EOL] import typing [EOL] import datetime [EOL] import json [EOL] import os [EOL] from pathlib import Path [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] HERE = Path ( os . path . dirname ( __file__ ) ) [EOL] DOSSIERS = HERE / [string] / [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def dossiers_and_textes ( ) : [EOL] from zam_repondeur . services . fetch . an . common import extract_from_zip [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( get_dossiers_legislatifs_and_textes , ) [EOL] [EOL] with patch ( [string] [string] ) as extract : [EOL] extract . return_value = extract_from_zip ( open ( DOSSIERS , [string] ) ) [EOL] dossiers_by_uid , textes_by_uid = get_dossiers_legislatifs_and_textes ( [number] ) [EOL] [EOL] return dossiers_by_uid , textes_by_uid [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def dossiers ( dossiers_and_textes ) : [EOL] return dossiers_and_textes [ [number] ] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def textes ( dossiers_and_textes ) : [EOL] return dossiers_and_textes [ [number] ] [EOL] [EOL] [EOL] def test_number_of_dossiers ( dossiers ) : [EOL] assert len ( dossiers ) == [number] [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plfss_2018 ( ) : [EOL] with open ( HERE / [string] / [string] ) as f_ : [EOL] return json . load ( f_ ) [ [string] ] [EOL] [EOL] [EOL] def test_parse_dossier_plfss_2018 ( dossier_plfss_2018 , textes ) : [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_dossier , ) [EOL] from zam_repondeur . services . fetch . an . dossiers . models import ( LectureRef , TexteRef , TypeTexte , ) [EOL] [EOL] dossier = parse_dossier ( dossier_plfss_2018 , textes ) [EOL] [EOL] assert dossier . uid == [string] [EOL] assert dossier . titre == [string] [EOL] texte_269 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_63 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_387 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_121 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_434 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] assert dossier . lectures == [ LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_269 , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_269 , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_269 , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_63 , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_63 , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_63 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_387 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_387 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_121 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_121 , organe = [string] , ) , LectureRef ( phase = Phase . LECTURE_DEFINITIVE , chambre = Chambre . AN , titre = [string] , texte = texte_434 , organe = [string] , ) , LectureRef ( phase = Phase . LECTURE_DEFINITIVE , chambre = Chambre . AN , titre = [string] , texte = texte_434 , organe = [string] , ) , ] [EOL] [EOL] [EOL] @ pytest . fixture def dossier_ecole_de_la_confiance ( ) : [EOL] with open ( HERE / [string] / [string] ) as f_ : [EOL] return json . load ( f_ ) [ [string] ] [EOL] [EOL] [EOL] def test_parse_dossier_ecole_de_la_confiance ( dossier_ecole_de_la_confiance , textes ) : [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_dossier , ) [EOL] [EOL] dossier = parse_dossier ( dossier_ecole_de_la_confiance , textes ) [EOL] [EOL] assert dossier . uid == [string] [EOL] assert dossier . titre == [string] [EOL] [EOL] lecture = dossier . lectures [ [number] ] [EOL] assert lecture . phase == Phase . PREMIERE_LECTURE [EOL] assert lecture . chambre == Chambre . SENAT [EOL] assert lecture . organe == [string] [comment] [EOL] assert lecture . texte . numero == [number] [EOL] assert lecture . partie is None [EOL] [EOL] lecture = dossier . lectures [ [number] ] [EOL] assert lecture . phase == Phase . PREMIERE_LECTURE [EOL] assert lecture . chambre == Chambre . SENAT [EOL] assert lecture . organe == [string] [comment] [EOL] assert lecture . texte . numero == [number] [EOL] assert lecture . partie is None [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plf_2018 ( ) : [EOL] with open ( HERE / [string] / [string] ) as f_ : [EOL] return json . load ( f_ ) [ [string] ] [EOL] [EOL] [EOL] def test_parse_dossier_plf_2018 ( dossier_plf_2018 , textes ) : [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_dossier , ) [EOL] from zam_repondeur . services . fetch . an . dossiers . models import ( LectureRef , TexteRef , TypeTexte , ) [EOL] [EOL] dossier = parse_dossier ( dossier_plf_2018 , textes ) [EOL] [EOL] assert dossier . uid == [string] [EOL] assert dossier . titre == [string] [EOL] texte_235 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_107 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_485 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_172 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] texte_506 = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) [EOL] assert dossier . lectures == [ LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_235 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_107 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_107 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_107 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . PREMIERE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_107 , partie = [number] , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_485 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = texte_485 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_172 , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . SENAT , titre = [string] , texte = texte_172 , organe = [string] , ) , LectureRef ( phase = Phase . LECTURE_DEFINITIVE , chambre = Chambre . AN , titre = [string] , texte = texte_506 , organe = [string] , ) , LectureRef ( phase = Phase . LECTURE_DEFINITIVE , chambre = Chambre . AN , titre = [string] , texte = texte_506 , organe = [string] , ) , ] [EOL] [EOL] [EOL] @ pytest . fixture def dossier_essoc ( ) : [EOL] with open ( HERE / [string] / [string] ) as f_ : [EOL] return json . load ( f_ ) [ [string] ] [EOL] [EOL] [EOL] def test_parse_dossier_essoc ( dossier_essoc , textes ) : [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_dossier , ) [EOL] from zam_repondeur . services . fetch . an . dossiers . models import ( DossierRef , LectureRef , TexteRef , TypeTexte , ) [EOL] [EOL] lectures = [ LectureRef ( chambre = Chambre . AN , titre = [string] , phase = Phase . PREMIERE_LECTURE , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , LectureRef ( chambre = Chambre . AN , titre = [string] , phase = Phase . PREMIERE_LECTURE , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , LectureRef ( chambre = Chambre . SENAT , titre = [string] , phase = Phase . PREMIERE_LECTURE , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , LectureRef ( chambre = Chambre . SENAT , titre = [string] , phase = Phase . PREMIERE_LECTURE , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , legislature = None , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , LectureRef ( phase = Phase . NOUVELLE_LECTURE , chambre = Chambre . AN , titre = [string] , texte = TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = datetime . date ( [number] , [number] , [number] ) , ) , organe = [string] , ) , ] [EOL] [EOL] dossier = parse_dossier ( dossier_essoc , textes ) [EOL] [EOL] for lecture1 , lecture2 in zip ( dossier . lectures , lectures ) : [EOL] assert lecture1 == lecture2 [EOL] [EOL] assert dossier == DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = lectures , ) [EOL] [EOL] [EOL] @ pytest . fixture def dossier_pacte_ferroviaire ( ) : [EOL] with open ( HERE / [string] / [string] ) as f_ : [EOL] return json . load ( f_ ) [ [string] ] [EOL] [EOL] [EOL] def test_dossier_pacte_ferroviaire ( dossier_pacte_ferroviaire , textes ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_dossier , ) [EOL] [EOL] dossier = parse_dossier ( dossier_pacte_ferroviaire , textes ) [EOL] [EOL] assert dossier . uid == [string] [EOL] assert len ( dossier . lectures ) > [number] [EOL] [EOL] [EOL] def test_extract_actes ( dossier_essoc ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( extract_actes , ) [EOL] [EOL] assert len ( extract_actes ( dossier_essoc ) ) == [number] [EOL] [EOL] [EOL] class TestGenLectures : [EOL] def test_gen_lectures_essoc ( self , dossier_essoc , textes ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( gen_lectures , ) [EOL] [EOL] acte = dossier_essoc [ [string] ] [ [string] ] [ [number] ] [EOL] [EOL] lectures = list ( gen_lectures ( acte , textes , [string] ) ) [EOL] [EOL] assert len ( lectures ) == [number] [EOL] assert [string] in lectures [ [number] ] . titre [EOL] assert [string] in lectures [ [number] ] . titre [EOL] [EOL] def test_gen_lectures_pacte_ferroviaire ( self , dossier_pacte_ferroviaire , textes ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( gen_lectures , ) [EOL] [EOL] acte = dossier_pacte_ferroviaire [ [string] ] [ [string] ] [ [number] ] [EOL] [EOL] lectures = list ( gen_lectures ( acte , textes , [string] ) ) [EOL] [EOL] assert len ( lectures ) == [number] [EOL] assert [string] in lectures [ [number] ] . titre [EOL] assert [string] in lectures [ [number] ] . titre [EOL] assert [string] in lectures [ [number] ] . titre [EOL] [EOL] [EOL] def test_walk_actes ( dossier_essoc , textes ) : [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( Chambre , WalkResult , walk_actes , ) [EOL] [EOL] acte = dossier_essoc [ [string] ] [ [string] ] [ [number] ] [EOL] assert list ( walk_actes ( acte , [string] ) ) == [ WalkResult ( chambre = Chambre . AN , phase = Phase . PREMIERE_LECTURE , etape = [string] , organe = [string] , texte_examine = [string] , ) , WalkResult ( chambre = Chambre . AN , phase = Phase . PREMIERE_LECTURE , etape = [string] , organe = [string] , texte_examine = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Pathpathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Pathpathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import date [EOL] [EOL] [EOL] class TestDateDepot : [EOL] def test_date_depot_not_null ( self ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_texte , ) [EOL] [EOL] texte_ref = parse_texte ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , } , } , [string] : None , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , } , [string] : None , [string] : None , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } , [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] , [string] : None , [string] : [string] , } } , [string] : { [string] : [string] , [string] : None } , } , [string] : None , [string] : [string] , [string] : { [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , } , [string] : None , [string] : [string] , [string] : { [string] : [string] , [string] : [string] [string] [string] [string] [string] [string] , [string] : [string] , } , [string] : [string] , [string] : None , [string] : { [string] : [string] [string] [string] [string] [string] [string] , [string] : [string] [string] [string] , } , [string] : [string] , } ) [EOL] assert texte_ref . date_depot == date ( [number] , [number] , [number] ) [EOL] [EOL] def test_date_depot_null ( self ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( parse_texte , ) [EOL] [EOL] texte_ref = parse_texte ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , } , } , [string] : None , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , } , [string] : None , [string] : None , [string] : { [string] : { [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , } } , [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] , [string] : None , [string] : [string] , } } , [string] : { [string] : [string] , [string] : None } , } , [string] : None , [string] : [string] , [string] : { [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , } , [string] : None , [string] : [string] , [string] : { [string] : [string] , [string] : [string] [string] [string] [string] [string] [string] , [string] : [string] , } , [string] : [string] , [string] : None , [string] : { [string] : [string] [string] [string] [string] [string] [string] , [string] : [string] [string] [string] , } , [string] : [string] , } ) [EOL] assert texte_ref . date_depot == date ( [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from zam_repondeur . models . division import SubDiv [EOL] [EOL] [EOL] def test_avant_article_premier ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . fetch . an . amendements import ANAmendementData [EOL] [EOL] data = ANAmendementData ( { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } } ) [EOL] division = data . get_division ( ) [EOL] assert division . type_ == [string] [EOL] assert division . num == [string] [EOL] assert division . mult == [string] [EOL] assert division . pos == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_numero ( text , num ) : [EOL] from zam_repondeur . services . fetch . division import NUMERO [EOL] [EOL] assert NUMERO . parse ( text ) == num [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_multiplicatif ( text , mult ) : [EOL] from zam_repondeur . services . fetch . division import MULTIPLICATIF [EOL] [EOL] assert MULTIPLICATIF . parse ( text ) == mult [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_mult_add ( text , mult ) : [EOL] from zam_repondeur . services . fetch . division import MULT_ADD [EOL] [EOL] assert MULT_ADD . parse ( text ) == mult [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , SubDiv . create ( type_ = [string] , num = [string] ) ) , ( [string] , SubDiv . create ( type_ = [string] , num = [string] , mult = [string] ) ) , ] , ) def test_intervalle ( text , subdiv ) : [EOL] from zam_repondeur . services . fetch . division import INTERVALLE [EOL] [EOL] assert INTERVALLE . parse ( text ) == subdiv [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_parse_article ( text , type_ , num , mult , pos ) : [EOL] from zam_repondeur . services . fetch . division import ARTICLE_UNIQUE [EOL] [EOL] assert ARTICLE_UNIQUE . parse ( text ) == SubDiv ( type_ , num , mult , pos ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_parse_article_additionnel ( text , type_ , num , mult , pos ) : [EOL] from zam_repondeur . services . fetch . division import ARTICLE_ADDITIONNEL [EOL] [EOL] assert ARTICLE_ADDITIONNEL . parse ( text ) == SubDiv ( type_ , num , mult , pos ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] ) , ] , ) def test_parse_subdiv ( text , type_ , num , mult , pos ) : [EOL] from zam_repondeur . services . fetch . division import DIVISION [EOL] [EOL] assert DIVISION . parse ( text ) == SubDiv ( type_ , num , mult , pos ) [EOL] [EOL] [EOL] def test_parse_subdiv_art_add_av_texte_title ( texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . services . fetch . division import parse_subdiv [EOL] [EOL] subdiv = parse_subdiv ( [string] , texte = texte_plfss2018_an_premiere_lecture , ) [EOL] assert subdiv == SubDiv ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def test_parse_subdiv_error ( texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . services . fetch . division import parse_subdiv [EOL] [EOL] subdiv = parse_subdiv ( [string] , texte = texte_plfss2018_an_premiere_lecture ) [EOL] assert subdiv == SubDiv ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from datetime import date [EOL] [EOL] import pytest [EOL] [EOL] [EOL] def test_parse_from_csv ( lecture_senat , settings ) : [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] amend = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] amendement , created = source . parse_from_csv ( amend , lecture_senat ) [EOL] [EOL] assert created [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] assert amendement . num_disp == [string] [EOL] assert amendement . date_depot == date ( [number] , [number] , [number] ) [EOL] assert amendement . sort == [string] [EOL] assert ( amendement . corps == [string] ) [EOL] assert ( amendement . expose == [string] ) [EOL] assert amendement . article . num == [string] [EOL] assert str ( amendement . article ) == [string] [EOL] [EOL] [EOL] def test_parse_from_csv_unparsable_article ( lecture_senat , settings ) : [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] amend = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] amendement , created = source . parse_from_csv ( amend , lecture_senat ) [EOL] [EOL] assert created [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] assert amendement . num_disp == [string] [EOL] [EOL] assert amendement . article . num == [string] [EOL] assert str ( amendement . article ) == [string] [EOL] [EOL] [EOL] class TestExtractMatricule : [EOL] def test_empty_url ( self ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import extract_matricule [EOL] [EOL] assert extract_matricule ( [string] ) is None [EOL] [EOL] def test_malformed_url ( self ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import extract_matricule [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] extract_matricule ( [string] ) [EOL] [EOL] def test_csv_format ( self ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import extract_matricule [EOL] [EOL] url = [string] [EOL] assert extract_matricule ( url ) == [string] [EOL] [EOL] def test_json_format ( self ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import extract_matricule [EOL] [EOL] url = [string] [EOL] assert extract_matricule ( url ) == [string] [EOL] [EOL] [EOL] class TestParseDiscussionDetails : [EOL] def test_parse_basic_data ( self ) : [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( parse_discussion_details , ) [EOL] [EOL] amend = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] details = parse_discussion_details ( { } , amend , position = [number] , mission_ref = MissionRef ( titre = [string] , titre_court = [string] ) ) [EOL] [EOL] assert details . num == [number] [EOL] assert details . position == [number] [EOL] assert details . id_discussion_commune is None [EOL] assert details . id_identique is None [EOL] assert details . parent_num is None [EOL] [EOL] def test_discussion_commune ( self ) : [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( parse_discussion_details , ) [EOL] [EOL] amend = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] details = parse_discussion_details ( { } , amend , position = [number] , mission_ref = MissionRef ( titre = [string] , titre_court = [string] ) ) [EOL] [EOL] assert details . id_discussion_commune == [number] [EOL] [EOL] def test_not_discussion_commune ( self ) : [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( parse_discussion_details , ) [EOL] [EOL] amend = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] details = parse_discussion_details ( { } , amend , position = [number] , mission_ref = MissionRef ( titre = [string] , titre_court = [string] ) ) [EOL] [EOL] assert details . id_discussion_commune is None [EOL] [EOL] def test_parse_sous_amendement ( self ) : [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( parse_discussion_details , ) [EOL] [EOL] amend1 = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] amend2 = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] details1 = parse_discussion_details ( { } , amend1 , position = [number] , mission_ref = MissionRef ( titre = [string] , titre_court = [string] ) ) [EOL] details2 = parse_discussion_details ( { [string] : details1 . num } , amend2 , position = [number] , mission_ref = MissionRef ( titre = [string] , titre_court = [string] ) , ) [EOL] [EOL] assert details2 . num == [number] [EOL] assert details2 . parent_num == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] from datetime import date [EOL] from operator import attrgetter [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import responses [EOL] import transaction [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent / [string] / [string] [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( SAMPLE_DATA_DIR / basename ) . read_bytes ( ) [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plf_2019 ( db ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] with transaction . manager : [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] [EOL] return dossier [EOL] [EOL] [EOL] @ pytest . fixture def dossier_plf_2020 ( db ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] with transaction . manager : [EOL] dossier = Dossier . create ( an_id = [string] , titre = [string] , slug = [string] , ) [EOL] [EOL] return dossier [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf_2019 ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] return Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def texte_plf_2020 ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] with transaction . manager : [EOL] return Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf_1re_partie ( dossier_plf_2019 , texte_plf_2019 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] return Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2019 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2019 , ) [EOL] [EOL] [EOL] @ pytest . fixture def lecture_plf_2e_partie ( dossier_plf_2019 , texte_plf_2019 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] return Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2019 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2019 , ) [EOL] [EOL] [EOL] class TestBuildAmendementsURL : [EOL] def test_seance_publique ( self , lecture_plf2018_senat_premiere_lecture_seance_publique_1 ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import ( _build_amendements_url , ) [EOL] [EOL] assert _build_amendements_url ( lecture_plf2018_senat_premiere_lecture_seance_publique_1 ) == ( [string] [string] ) [EOL] [EOL] def test_commission ( self , lecture_plf2018_senat_premiere_lecture_commission_fond_1 ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import ( _build_amendements_url , ) [EOL] [EOL] assert _build_amendements_url ( lecture_plf2018_senat_premiere_lecture_commission_fond_1 ) == ( [string] [string] ) [EOL] [EOL] [EOL] @ responses . activate def test_aspire_senat ( app , lecture_senat , settings ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import ( AmendementRectifie , CorpsAmendementModifie , ExposeAmendementModifie , ) [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] odsen_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = odsen_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] [EOL] result = source . fetch ( lecture_senat ) [EOL] [EOL] [comment] [EOL] assert len ( result . fetched ) == [number] [EOL] [EOL] [comment] [EOL] assert [number] in result . fetched [EOL] amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert amendement . num == [number] [EOL] assert amendement . rectif == [number] [EOL] assert amendement . article . num == [string] [EOL] assert amendement . article . pos == [string] [EOL] assert amendement . parent is None [EOL] [comment] [EOL] assert amendement . mission_titre is None [EOL] [EOL] events = sorted ( amendement . events , key = attrgetter ( [string] ) , reverse = True ) [EOL] [EOL] assert len ( events ) == [number] [EOL] assert isinstance ( events [ [number] ] , ExposeAmendementModifie ) [EOL] assert events [ [number] ] . created_at is not None [EOL] assert events [ [number] ] . user is None [EOL] assert events [ [number] ] . data [ [string] ] == [string] [EOL] assert events [ [number] ] . data [ [string] ] . startswith ( [string] ) [EOL] assert events [ [number] ] . render_summary ( ) == [string] [EOL] [EOL] assert isinstance ( events [ [number] ] , CorpsAmendementModifie ) [EOL] assert events [ [number] ] . created_at is not None [EOL] assert events [ [number] ] . user is None [EOL] assert events [ [number] ] . data [ [string] ] == [string] [EOL] assert events [ [number] ] . data [ [string] ] . startswith ( [string] ) [EOL] assert events [ [number] ] . render_summary ( ) == [string] [EOL] [EOL] assert isinstance ( events [ [number] ] , AmendementRectifie ) [EOL] assert events [ [number] ] . created_at is not None [EOL] assert events [ [number] ] . user is None [EOL] assert events [ [number] ] . data [ [string] ] == [number] [EOL] assert events [ [number] ] . data [ [string] ] == [number] [EOL] assert events [ [number] ] . render_summary ( ) == [string] [EOL] [EOL] [comment] [EOL] assert [number] in result . fetched [EOL] sous_amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert sous_amendement . parent is not None [EOL] assert sous_amendement . parent . num == [number] [EOL] assert sous_amendement . parent . rectif == [number] [EOL] [EOL] [EOL] @ responses . activate def test_aspire_senat_again_with_irrecevable ( app , lecture_senat , settings ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementIrrecevable [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , body = sample_data . decode ( [string] ) . replace ( [string] , [string] , ) . encode ( [string] ) , status = [number] , ) [EOL] [EOL] odsen_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = odsen_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] [EOL] result = source . fetch ( lecture_senat ) [EOL] assert [number] in result . fetched [EOL] amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] result = source . fetch ( lecture_senat ) [EOL] assert [number] in result . fetched [EOL] amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] assert isinstance ( amendement . events [ [number] ] , AmendementIrrecevable ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user is None [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendement . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] [EOL] @ responses . activate def test_aspire_senat_again_with_irrecevable_transfers_to_index ( app , lecture_senat , user_david_table_an , settings ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import ( AmendementIrrecevable , AmendementTransfere , ) [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , body = sample_data . decode ( [string] ) . replace ( [string] , [string] , ) . encode ( [string] ) , status = [number] , ) [EOL] [EOL] odsen_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = odsen_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] [EOL] [comment] [EOL] result = source . fetch ( lecture_senat ) [EOL] assert [number] in result . fetched [EOL] amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] [comment] [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] assert user_david_table_an . amendements == [ amendement ] [EOL] assert amendement . location . user_table == user_david_table_an [EOL] [EOL] [comment] [EOL] result = source . fetch ( lecture_senat ) [EOL] assert [number] in result . fetched [EOL] amendement = Amendement . get ( lecture_senat , [number] ) [EOL] assert len ( amendement . events ) == [number] [comment] [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementIrrecevable ) for event in amendement . events ) [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementTransfere ) for event in amendement . events ) [EOL] transfer_event = next ( event for event in amendement . events if isinstance ( event , AmendementTransfere ) ) [EOL] assert transfer_event . user is None [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . render_summary ( ) == ( [string] ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert user_david_table_an . amendements == [ ] [EOL] [EOL] [EOL] @ responses . activate def test_aspire_senat_plf2019_1re_partie ( app , lecture_plf_1re_partie , settings ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] odsen_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = odsen_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_plf_1re_partie ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] [EOL] result = source . fetch ( lecture_plf_1re_partie ) [EOL] [EOL] [comment] [EOL] assert len ( result . fetched ) == [number] [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_plf_1re_partie , [number] ) [EOL] assert amendement . mission_titre is None [EOL] [EOL] [EOL] @ responses . activate def test_aspire_senat_plf2019_2e_partie ( app , lecture_plf_2e_partie , settings ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . senat . amendements import Senat [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] odsen_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = odsen_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] for i in range ( [number] , [number] + [number] ) : [EOL] responses . add ( responses . GET , f" [string] { i } [string] " , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_plf_2e_partie ) [EOL] [EOL] source = Senat ( settings = settings ) [EOL] [EOL] result = source . fetch ( lecture_plf_2e_partie ) [EOL] [EOL] [comment] [EOL] assert len ( result . fetched ) == [number] [EOL] [EOL] amendements = sorted ( Amendement . get ( lecture_plf_2e_partie , num ) for num in result . fetched ) [EOL] [EOL] [comment] [EOL] positions = [ amdt . position for amdt in amendements if amdt . position is not None ] [EOL] assert len ( set ( positions ) ) == len ( positions ) == [number] [EOL] [EOL] [comment] [EOL] assert ( amendements [ [number] ] . mission_titre == [string] ) [EOL] assert ( amendements [ [number] ] . mission_titre == [string] ) [EOL] assert amendements [ [number] ] . mission_titre_court == [string] [EOL] assert amendements [ [number] ] . mission_titre_court == [string] [EOL] assert amendements [ [number] ] . mission_titre is None [EOL] [EOL] [EOL] @ responses . activate def test_fetch_all ( lecture_senat ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import _fetch_all [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] items = _fetch_all ( lecture_senat ) [EOL] [EOL] assert len ( items ) == [number] [EOL] [EOL] assert items [ [number] ] == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] @ responses . activate def test_fetch_all_with_dry_run ( lecture_senat ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import _fetch_all [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] items = _fetch_all ( lecture_senat , dry_run = True ) [EOL] assert len ( items ) == [number] [EOL] [EOL] items = _fetch_all ( lecture_senat , dry_run = False ) [EOL] assert len ( items ) == [number] [EOL] [EOL] assert items [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] , ) @ responses . activate def test_fetch_all_buggy_csv ( lecture_senat , filename ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import _fetch_all [EOL] [EOL] sample_data = read_sample_data ( filename ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] for item in _fetch_all ( lecture_senat ) : [EOL] assert set ( item . keys ( ) ) == { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] assert item [ [string] ] . startswith ( [string] ) or item [ [string] ] == [string] [EOL] assert item [ [string] ] . startswith ( [string] ) or item [ [string] ] == [string] [EOL] [EOL] [EOL] @ responses . activate def test_fetch_all_commission ( db ) : [EOL] from zam_repondeur . models import Chambre , Dossier , Lecture , Phase , Texte , TypeTexte [EOL] from zam_repondeur . services . fetch . senat . amendements import _fetch_all [EOL] [EOL] with transaction . manager : [EOL] dossier = Dossier . create ( senat_id = [string] , titre = [string] , slug = [string] , ) [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte , titre = [string] , organe = None , dossier = dossier , ) [EOL] [EOL] sample_data = read_sample_data ( [string] ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = sample_data , status = [number] , ) [EOL] [EOL] items = _fetch_all ( lecture ) [EOL] [EOL] assert len ( items ) == [number] [EOL] [EOL] assert items [ [number] ] == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] @ responses . activate def test_fetch_all_not_found ( lecture_senat ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import NotFound , _fetch_all [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] with pytest . raises ( NotFound ) : [EOL] _fetch_all ( lecture_senat ) [EOL] [EOL] [EOL] @ responses . activate def test_fetch_discussion_details ( dossier_plfss2018 ) : [EOL] from zam_repondeur . models import ( Chambre , DBSession , Lecture , Phase , Texte , TypeTexte , ) [EOL] from zam_repondeur . services . fetch . senat . derouleur import _fetch_discussion_details [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte , titre = [string] , organe = [string] , dossier = dossier_plfss2018 , ) [EOL] DBSession . add ( lecture ) [EOL] [EOL] json_data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = json_data , status = [number] , ) [EOL] [EOL] data = list ( _fetch_discussion_details ( lecture ) ) [EOL] [EOL] assert len ( data ) == [number] [EOL] assert data [ [number] ] [ [number] ] == json_data [EOL] [EOL] [EOL] @ responses . activate def test_fetch_discussion_details_empty_when_url_not_found ( lecture_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . derouleur import _fetch_discussion_details [EOL] [EOL] with transaction . manager : [EOL] lecture_senat . organe = [string] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] assert list ( _fetch_discussion_details ( lecture_senat ) ) == [ ] [EOL] [EOL] [EOL] @ responses . activate def test_fetch_and_parse_discussion_details_empty_and_logs_when_url_not_found ( lecture_senat , caplog ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( fetch_and_parse_discussion_details , ) [EOL] [EOL] with transaction . manager : [EOL] lecture_senat . organe = [string] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] assert fetch_and_parse_discussion_details ( lecture_senat ) == [ ] [EOL] [EOL] url = [string] [EOL] assert f" [string] { url }" in [ rec . message for rec in caplog . records ] [EOL] [EOL] [EOL] @ responses . activate def test_fetch_and_parse_discussion_details_parent_before ( lecture_senat , caplog ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( fetch_and_parse_discussion_details , ) [EOL] [EOL] with transaction . manager : [EOL] lecture_senat . organe = [string] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = data , status = [number] , ) [EOL] [EOL] details = fetch_and_parse_discussion_details ( lecture_senat ) [EOL] [EOL] assert len ( details ) == [number] [EOL] assert details [ [number] ] . parent_num == [number] [EOL] assert details [ [number] ] . parent_num is None [EOL] [EOL] [EOL] @ responses . activate def test_fetch_and_parse_discussion_details_parent_missing ( lecture_senat , caplog ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( fetch_and_parse_discussion_details , ) [EOL] [EOL] with transaction . manager : [EOL] lecture_senat . organe = [string] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] data = json . loads ( read_sample_data ( [string] ) ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = data , status = [number] , ) [EOL] [EOL] details = fetch_and_parse_discussion_details ( lecture_senat ) [EOL] [EOL] assert len ( details ) == [number] [EOL] assert details [ [number] ] . parent_num is None [EOL] assert details [ [number] ] . parent_num is None [EOL] assert [string] in [ rec . message for rec in caplog . records ] [EOL] [EOL] [EOL] def test_derouleur_urls_and_mission_refs ( lecture_senat ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( derouleur_urls_and_mission_refs , ) [EOL] [EOL] assert list ( derouleur_urls_and_mission_refs ( lecture_senat ) ) == [ ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) ] [EOL] [EOL] with transaction . manager : [EOL] lecture_senat . organe = [string] [EOL] DBSession . add ( lecture_senat ) [EOL] [EOL] assert list ( derouleur_urls_and_mission_refs ( lecture_senat ) ) == [ ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) ] [EOL] [EOL] [EOL] def test_derouleur_urls_and_mission_refs_plf2019_1re_partie ( dossier_plf_2019 , texte_plf_2019 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( derouleur_urls_and_mission_refs , ) [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2019 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2019 , ) [EOL] [EOL] assert list ( derouleur_urls_and_mission_refs ( lecture ) ) == [ ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) ] [EOL] [EOL] [EOL] def test_derouleur_urls_and_mission_refs_plf2020_1re_partie ( dossier_plf_2020 , texte_plf_2020 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( derouleur_urls_and_mission_refs , ) [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2020 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2020 , ) [EOL] [EOL] assert list ( derouleur_urls_and_mission_refs ( lecture ) ) == [ ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) ] [EOL] [EOL] [EOL] def test_derouleur_urls_and_mission_refs_plf2019_2e_partie ( dossier_plf_2019 , texte_plf_2019 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( derouleur_urls_and_mission_refs , ) [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2019 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2019 , ) [EOL] [EOL] urls = list ( derouleur_urls_and_mission_refs ( lecture ) ) [EOL] assert len ( urls ) == [number] [EOL] assert urls [ [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) [EOL] assert urls [ [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) [EOL] assert urls [ - [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) [EOL] [EOL] [EOL] def test_derouleur_urls_and_mission_refs_plf2020_2e_partie ( dossier_plf_2020 , texte_plf_2020 ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] from zam_repondeur . services . fetch . missions import MissionRef [EOL] from zam_repondeur . services . fetch . senat . derouleur import ( derouleur_urls_and_mission_refs , ) [EOL] [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plf_2020 , partie = [number] , titre = [string] , organe = [string] , dossier = dossier_plf_2020 , ) [EOL] [EOL] urls = list ( derouleur_urls_and_mission_refs ( lecture ) ) [EOL] assert len ( urls ) == [number] [EOL] assert urls [ [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) [EOL] assert urls [ [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) [EOL] assert urls [ - [number] ] == ( [string] , MissionRef ( titre = [string] , titre_court = [string] ) , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , None ) ] ) def test_parse_partie ( numero , partie ) : [EOL] from zam_repondeur . services . fetch . senat . amendements import parse_partie [EOL] [EOL] assert parse_partie ( numero ) == partie [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path
from typing import Any [EOL] import typing [EOL] class TestMatchDossierRef : [EOL] def test_match_with_an_url_alt ( self ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] [EOL] dossier_an = DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) [EOL] dossier_senat = DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) [EOL] assert dossier_an . matches ( dossier_senat ) [EOL] assert dossier_senat . matches ( dossier_an ) [EOL] [EOL] def test_match_with_senat_url_https ( self ) : [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] [EOL] dossier_an = DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) [EOL] dossier_senat = DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) [EOL] assert dossier_an . matches ( dossier_senat ) [EOL] assert dossier_senat . matches ( dossier_an ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from typing import List , Union , Any , Dict [EOL] import pathlib [EOL] import typing [EOL] from datetime import date [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import responses [EOL] import transaction [EOL] [EOL] SAMPLE_DATA_DIR = Path ( __file__ ) . parent . parent / [string] [EOL] [EOL] [EOL] class TestGetPossibleUrls : [EOL] def test_assemblee_nationale_pjl ( self , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . services . fetch . articles import get_possible_texte_urls [EOL] [EOL] assert get_possible_texte_urls ( texte_plfss2018_an_premiere_lecture ) == [ [string] , [string] , ] [EOL] [EOL] def test_assemblee_nationale_ppl ( self , db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] from zam_repondeur . services . fetch . articles import get_possible_texte_urls [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROPOSITION , chambre = Chambre . AN , legislature = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] assert get_possible_texte_urls ( texte ) == [ [string] , [string] , ] [EOL] [EOL] def test_senat_pjl ( self , texte_plfss2018_senat_premiere_lecture ) : [EOL] from zam_repondeur . services . fetch . articles import get_possible_texte_urls [EOL] [EOL] assert get_possible_texte_urls ( texte_plfss2018_senat_premiere_lecture ) == [ [string] ] [EOL] [EOL] def test_senat_ppl ( self , db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] from zam_repondeur . services . fetch . articles import get_possible_texte_urls [EOL] [EOL] with transaction . manager : [EOL] texte = Texte . create ( type_ = TypeTexte . PROPOSITION , chambre = Chambre . SENAT , session = [number] , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , ) [EOL] [EOL] assert get_possible_texte_urls ( texte ) == [ [string] ] [EOL] [EOL] [EOL] class TestGetArticlesAN : [EOL] @ responses . activate def test_new_articles_are_created ( self , app , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . article import ( ContenuArticleModifie , TitreArticleModifie , ) [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture_an . articles } == { [string] } [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture_an . articles } == { [string] , [string] } [EOL] [EOL] [comment] [EOL] assert len ( lecture_an . articles [ [number] ] . events ) == [number] [EOL] assert isinstance ( lecture_an . articles [ [number] ] . events [ [number] ] , TitreArticleModifie ) [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . created_at is not None [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . user is None [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( lecture_an . articles [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( lecture_an . articles [ [number] ] . events [ [number] ] , ContenuArticleModifie ) [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . created_at is not None [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . user is None [EOL] assert lecture_an . articles [ [number] ] . events [ [number] ] . data [ [string] ] == { } [EOL] assert ( lecture_an . articles [ [number] ] . events [ [number] ] . data [ [string] ] [ [string] ] == [string] ) [EOL] [EOL] @ responses . activate def test_article_ranges ( self , app , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] ) . encode ( [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture_an . articles } == set ( ) [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] nums = { article . num for article in lecture_an . articles } [EOL] [EOL] [comment] [EOL] assert { [string] , [string] } . issubset ( nums ) [EOL] [EOL] [comment] [EOL] assert { [string] , [string] , [string] , [string] , [string] , [string] } . issubset ( nums ) [EOL] [EOL] @ responses . activate def test_existing_articles_are_updated ( self , app , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . content == { } [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] [comment] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert ( amendement . article . user_content . title == [string] ) [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] @ responses . activate def test_annexes_are_retrieved ( self , app , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Article , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] lecture_an . texte . numero = [number] [EOL] lecture_an . organe = [string] [EOL] lecture_an . titre = [string] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] ) . encode ( [string] ) , status = [number] , ) [EOL] [EOL] assert get_articles ( lecture_an ) [EOL] [EOL] annexe = DBSession . query ( Article ) . filter ( Article . type == [string] ) . first ( ) [EOL] assert annexe . num == [string] [EOL] assert ( annexe . user_content . title == [string] ) [EOL] assert annexe . content [ [string] ] . startswith ( [string] ) [EOL] assert annexe . content [ [string] ] . startswith ( ( [string] [string] [string] ) ) [EOL] [EOL] @ responses . activate def test_custom_article_titles_are_preserved ( self , app , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . content == { } [EOL] [EOL] [comment] [EOL] amendement . article . user_content . title = [string] [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] [comment] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] @ responses . activate def test_intersticial_articles_are_not_updated ( self , app , lecture_an ) : [EOL] from zam_repondeur . models import Article , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] article_avant_2 = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] DBSession . add ( article_avant_2 ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] article = DBSession . query ( Article ) . filter ( Article . pos == [string] ) . first ( ) [EOL] assert article . user_content . title == [string] [EOL] assert article . content == { } [EOL] [EOL] @ responses . activate def test_fallback_to_alternative_url_pattern ( self , app , dossier_plfss2018 , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] with transaction . manager : [EOL] lecture_an . texte . numero = [number] [EOL] lecture_an . organe = [string] [EOL] lecture_an . titre = [string] [EOL] [EOL] amendements_an [ [number] ] . article . num = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DBSession . add ( lecture_an ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_an ) [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] @ responses . activate def test_not_found ( self , app , lecture_an , amendements_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] [EOL] changed = get_articles ( lecture_an ) [EOL] [EOL] assert not changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content == { } [EOL] [EOL] [EOL] class TestGetArticlesSenat : [EOL] @ responses . activate def test_get_articles_senat ( self , app , dossier_plfss2018 , lecture_senat , amendements_senat , article1_an ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] from zam_repondeur . models . events . article import ( ContenuArticleModifie , TitreArticleModifie , ) [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_senat ) [EOL] changed = get_articles ( lecture_senat ) [EOL] [EOL] assert changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] [comment] [EOL] article = DBSession . query ( Article ) . filter_by ( pk = article1_an . pk ) . one ( ) [EOL] assert article is not amendement . article [EOL] assert article . content == { } [EOL] [EOL] [comment] [EOL] assert len ( amendement . article . events ) == [number] [EOL] assert isinstance ( amendement . article . events [ [number] ] , TitreArticleModifie ) [EOL] assert amendement . article . events [ [number] ] . created_at is not None [EOL] assert amendement . article . events [ [number] ] . user is None [EOL] assert amendement . article . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendement . article . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( amendement . article . events [ [number] ] , ContenuArticleModifie ) [EOL] assert amendement . article . events [ [number] ] . created_at is not None [EOL] assert amendement . article . events [ [number] ] . user is None [EOL] assert amendement . article . events [ [number] ] . data [ [string] ] == { } [EOL] assert ( amendement . article . events [ [number] ] . data [ [string] ] [ [string] ] == [string] ) [EOL] [EOL] @ responses . activate def test_get_articles_senat_with_mult ( self , app , dossier_plfss2018 , lecture_senat , amendements_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] amendement = amendements_senat [ [number] ] [EOL] amendement . article . num = [string] [EOL] amendement . article . mult = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DBSession . add ( amendement ) [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_senat ) [EOL] changed = get_articles ( lecture_senat ) [EOL] [EOL] assert changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] @ responses . activate def test_get_articles_senat_with_dots ( self , app , dossier_plfss2018 , lecture_senat , amendements_senat ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_senat ) [EOL] changed = get_articles ( lecture_senat ) [EOL] [EOL] assert changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content [ [string] ] . startswith ( [string] ) [EOL] [EOL] @ responses . activate def test_get_articles_missing_data ( self , app , dossier_plfss2018 , lecture_senat , amendements_senat , article1_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_senat ) [EOL] changed = get_articles ( lecture_senat ) [EOL] [EOL] assert not changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content == { } [EOL] [EOL] [comment] [EOL] assert len ( amendement . article . events ) == [number] [EOL] [EOL] @ responses . activate def test_get_articles_tlfp_parse_error ( self , app , dossier_plfss2018 , lecture_senat , amendements_senat , article1_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . services . fetch . articles import get_articles [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] DBSession . add ( lecture_senat ) [EOL] changed = get_articles ( lecture_senat ) [EOL] [EOL] assert not changed [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . content == { } [EOL] [EOL] [comment] [EOL] assert len ( amendement . article . events ) == [number] [EOL] [EOL] [EOL] def test_get_section_title ( ) : [EOL] from zam_repondeur . services . fetch . articles import get_section_title [EOL] [EOL] items = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : { } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] [EOL] article = { [string] : { } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] title = get_section_title ( items , article ) [EOL] assert title == [string] [EOL] [EOL] [EOL] def test_get_section_title_unknown_reference ( ) : [EOL] from zam_repondeur . services . fetch . articles import get_section_title [EOL] [EOL] items = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : { } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ] [EOL] article = { [string] : { } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] assert get_section_title ( items , article ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ] , ) def test_get_article_num_mult ( input , num , mult ) : [EOL] from zam_repondeur . services . fetch . articles import get_article_num_mult [EOL] [EOL] assert get_article_num_mult ( input ) == ( num , mult ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [ ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) , ] , ) def test_get_article_nums_mults ( input , output ) : [EOL] from zam_repondeur . services . fetch . articles import get_article_nums_mults [EOL] [EOL] assert get_article_nums_mults ( { [string] : input } ) == output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.set$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.set$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.set$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import unittest [EOL] import typing [EOL] from unittest . mock import Mock [EOL] [EOL] import pytest [EOL] import transaction [EOL] from redis . exceptions import ConnectionError [EOL] from transaction . interfaces import DoomedTransaction [EOL] [EOL] [EOL] class FakeHuey : [EOL] def __init__ ( self , immediate ) : [EOL] self . immediate = immediate [EOL] self . enqueued = [ ] [EOL] self . pending_count = Mock ( return_value = [number] ) [EOL] [EOL] def really_enqueue ( self , task ) : [EOL] self . enqueued . append ( task ) [EOL] [EOL] [EOL] @ pytest . fixture def huey ( ) : [EOL] return FakeHuey ( immediate = False ) [EOL] [EOL] [EOL] class TestManagedTask : [EOL] def test_managed_task_can_join_the_current_transaction ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] with transaction . manager as txn : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] assert managed_task in txn . _resources [EOL] assert managed_task . transaction is txn [EOL] [EOL] def test_managed_task_is_enqueud_if_transaction_is_committed ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] with transaction . manager : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] [EOL] assert task in huey . enqueued [EOL] [EOL] def test_managed_task_is_not_enqueud_if_transaction_is_aborted ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] with transaction . manager as txn : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] txn . abort ( ) [EOL] [EOL] assert task not in huey . enqueued [EOL] [EOL] def test_managed_task_is_not_enqueud_if_transaction_is_doomed ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] with pytest . raises ( DoomedTransaction ) : [EOL] with transaction . manager as txn : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] txn . doom ( ) [EOL] [EOL] assert task not in huey . enqueued [EOL] [EOL] def test_redis_connection_error_in_voting_aborts_the_transaction ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] huey . pending_count . side_effect = ConnectionError ( ) [EOL] [EOL] with pytest . raises ( ConnectionError ) : [EOL] with transaction . manager : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] [EOL] assert task not in huey . enqueued [EOL] [EOL] def test_redis_connection_error_in_finish_aborts_the_transaction ( self , huey ) : [EOL] from zam_repondeur . tasks . queue import ManagedTask [EOL] [EOL] huey . really_enqueue = Mock ( side_effect = ConnectionError ( ) ) [EOL] [EOL] with pytest . raises ( ConnectionError ) : [EOL] with transaction . manager : [EOL] task = object ( ) [EOL] managed_task = ManagedTask ( huey , task ) [EOL] managed_task . join_transaction ( ) [EOL] [EOL] assert task not in huey . enqueued [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.object$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import date [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def existing_texte ( db ) : [EOL] from zam_repondeur . models import Chambre , Texte , TypeTexte [EOL] [EOL] return Texte . create ( type_ = TypeTexte . PROJET , chambre = Chambre . AN , numero = [number] , date_depot = date ( [number] , [number] , [number] ) , legislature = [number] , ) [EOL] [EOL] [EOL] class TestCreateMissingtexte : [EOL] def test_new_texte_is_added ( self ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Texte , TypeTexte [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import TexteRef [EOL] from zam_repondeur . tasks . periodic import create_missing_textes [EOL] [EOL] assert ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . AN , numero = [number] , legislature = [number] ) . first ( ) is None ) [EOL] [EOL] repository . set_opendata_texte_ref ( TexteRef ( uid = [string] , type_ = TypeTexte . PROJET , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = date ( [number] , [number] , [number] ) , ) ) [EOL] [EOL] create_missing_textes ( { [string] } ) [EOL] [EOL] texte = ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . AN , numero = [number] , legislature = [number] ) . one ( ) ) [EOL] assert texte . type_ == TypeTexte . PROJET [EOL] assert texte . date_depot == date ( [number] , [number] , [number] ) [EOL] [EOL] def test_existing_texte_is_not_modified ( self ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Texte , TypeTexte [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import TexteRef [EOL] from zam_repondeur . tasks . periodic import create_missing_textes [EOL] [EOL] repository . set_opendata_texte_ref ( TexteRef ( uid = [string] , type_ = TypeTexte . PROPOSITION , chambre = Chambre . AN , legislature = [number] , numero = [number] , titre_long = [string] , titre_court = [string] , date_depot = date ( [number] , [number] , [number] ) , ) ) [EOL] create_missing_textes ( { [string] } ) [EOL] [EOL] texte = ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . AN , numero = [number] , legislature = [number] ) . one ( ) ) [EOL] assert texte . type_ == TypeTexte . PROJET [EOL] assert texte . date_depot == date ( [number] , [number] , [number] ) [EOL] [EOL] def test_removed_texte_is_not_deleted ( self ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Texte [EOL] from zam_repondeur . tasks . periodic import create_missing_textes [EOL] [EOL] assert ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . AN , numero = [number] , legislature = [number] ) . first ( ) ) is not None [EOL] [EOL] create_missing_textes ( set ( ) ) [EOL] [EOL] assert ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . AN , numero = [number] , legislature = [number] ) . first ( ) ) is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] [EOL] class TestCreateMissingDossierAN : [EOL] @ pytest . fixture ( autouse = True ) def existing_dossier ( self , db ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] return Dossier . create ( an_id = [string] , titre = [string] , slug = [string] ) [EOL] [EOL] def test_new_dossier_is_added ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_an [EOL] [EOL] assert DBSession . query ( Dossier ) . filter_by ( an_id = [string] ) . first ( ) is None [EOL] [EOL] repository . set_opendata_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] , [string] ] [EOL] [EOL] create_missing_dossiers_an ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( an_id = [string] ) . one ( ) [EOL] [EOL] assert dossier . an_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_existing_dossier_is_not_modified ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_an [EOL] [EOL] repository . set_opendata_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] ] [EOL] [EOL] create_missing_dossiers_an ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( an_id = [string] ) . one ( ) [EOL] assert dossier . an_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_new_dossier_with_identical_slug_gets_a_suffix ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_an [EOL] [EOL] repository . set_opendata_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] , [string] ] [EOL] [EOL] create_missing_dossiers_an ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( an_id = [string] ) . one ( ) [EOL] [EOL] assert dossier . an_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_removed_dossier_is_not_deleted ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_an [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ ] [EOL] [EOL] create_missing_dossiers_an ( ) [EOL] [EOL] assert DBSession . query ( Dossier ) . filter_by ( an_id = [string] ) . first ( ) is not None [EOL] [EOL] [EOL] class TestCreateMissingDossierSénat : [EOL] @ pytest . fixture ( autouse = True ) def existing_dossier ( self , db ) : [EOL] from zam_repondeur . models import Dossier [EOL] [EOL] return Dossier . create ( senat_id = [string] , titre = [string] , slug = [string] ) [EOL] [EOL] def test_new_dossier_is_added ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_senat [EOL] [EOL] assert DBSession . query ( Dossier ) . filter_by ( senat_id = [string] ) . first ( ) is None [EOL] [EOL] repository . set_senat_scraping_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] , [string] ] [EOL] [EOL] create_missing_dossiers_senat ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( senat_id = [string] ) . one ( ) [EOL] [EOL] assert dossier . senat_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_existing_dossier_is_not_modified ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_senat [EOL] [EOL] repository . set_senat_scraping_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] ] [EOL] [EOL] create_missing_dossiers_senat ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( senat_id = [string] ) . one ( ) [EOL] assert dossier . senat_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_new_dossier_with_identical_slug_gets_a_suffix ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_senat [EOL] [EOL] repository . set_senat_scraping_dossier_ref ( DossierRef ( uid = [string] , titre = [string] , slug = [string] , an_url = [string] , senat_url = [string] , lectures = [ ] , ) ) [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ [string] , [string] ] [EOL] [EOL] create_missing_dossiers_senat ( ) [EOL] [EOL] dossier = DBSession . query ( Dossier ) . filter_by ( senat_id = [string] ) . one ( ) [EOL] [EOL] assert dossier . senat_id == [string] [EOL] assert dossier . titre == [string] [EOL] assert dossier . slug == [string] [EOL] [EOL] def test_removed_dossier_is_not_deleted ( self ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . tasks . periodic import create_missing_dossiers_senat [EOL] [EOL] with patch . object ( repository , [string] ) as mock_list : [EOL] mock_list . return_value = [ ] [EOL] [EOL] create_missing_dossiers_senat ( ) [EOL] [EOL] assert ( DBSession . query ( Dossier ) . filter_by ( senat_id = [string] ) . first ( ) is not None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from huey . storage import MemoryStorage [EOL] [EOL] [EOL] class TestTransactionalHuey : [EOL] def test_task_is_enqueued_in_normal_mode ( self ) : [EOL] from zam_repondeur . tasks . queue import TransactionalHuey [EOL] [EOL] huey = TransactionalHuey ( storage_class = MemoryStorage ) [EOL] [EOL] assert huey . immediate is False [EOL] assert huey . pending_count ( ) == [number] [EOL] [EOL] called = False [EOL] [EOL] @ huey . task ( ) def my_task ( ) : [EOL] nonlocal called [EOL] called = True [EOL] [EOL] with transaction . manager : [EOL] my_task ( ) [EOL] [EOL] assert called is False [EOL] assert huey . pending_count ( ) == [number] [EOL] [EOL] def test_task_is_executed_in_immediate_mode ( self ) : [EOL] from zam_repondeur . tasks . queue import TransactionalHuey [EOL] [EOL] huey = TransactionalHuey ( storage_class = MemoryStorage , immediate = True ) [EOL] [EOL] assert huey . immediate is True [EOL] assert huey . pending_count ( ) == [number] [EOL] [EOL] called = False [EOL] [EOL] @ huey . task ( ) def my_task ( ) : [EOL] nonlocal called [EOL] called = True [EOL] [EOL] my_task ( ) [EOL] [EOL] assert called is True [EOL] assert huey . pending_count ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import transaction [EOL] [EOL] [EOL] class TestAdminList : [EOL] def test_only_accessible_to_admin ( self , app , user_sgg ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert ( resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] ) [EOL] [EOL] def test_not_accessible_to_regular_user ( self , app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] [EOL] class TestAdminAdd : [EOL] def test_create ( self , app , user_sgg , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] form = resp . form [EOL] form [ [string] ] = user_david . pk [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert ( resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] ) [EOL] assert ( resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] ) [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . events ) == [number] [EOL] assert user_sgg . events [ [number] ] . render_summary ( ) == ( [string] [string] [string] ) [EOL] [EOL] def test_submit_empty ( self , app , user_sgg , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] form = resp . form [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert [string] in resp . text [EOL] [EOL] def test_not_possible_to_regular_user ( self , app , user_sgg , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] resp = app . post ( [string] , { [string] : user_david . pk } , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] [EOL] class TestAdminDelete : [EOL] def test_delete ( self , app , user_sgg , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] user_david . admin_at = datetime . utcnow ( ) [EOL] DBSession . add ( user_david ) [EOL] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = user_david . pk [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . events ) == [number] [EOL] assert user_sgg . events [ [number] ] . render_summary ( ) == ( [string] [string] [string] ) [EOL] [EOL] def test_not_possible_to_regular_user ( self , app , user_sgg , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] user_david . admin_at = datetime . utcnow ( ) [EOL] DBSession . add ( user_david ) [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] resp = app . post ( [string] , { [string] : user_david . pk } , user = user_ronan ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] def test_not_possible_to_yourself ( self , app , user_sgg , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] user_david . admin_at = datetime . utcnow ( ) [EOL] DBSession . add ( user_david ) [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL] [EOL] resp = app . post ( [string] , { [string] : user_david . pk } , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert ( [string] in resp . text ) [EOL] assert DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) . count ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_get_shared_tables_empty ( app , lecture_an , amendements_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] not in resp . text [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_shared_tables_list ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] assert [string] not in resp . text [EOL] [EOL] [EOL] def test_get_shared_tables_create_form ( app , lecture_an , amendements_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_shared_tables_create_form ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession , Lecture , SharedTable [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] shared_table = ( DBSession . query ( SharedTable ) . filter ( SharedTable . titre == [string] ) . one ( ) ) [EOL] assert shared_table . slug == [string] [EOL] assert shared_table . lecture . pk == lecture_an . pk [EOL] [EOL] [comment] [EOL] lecture_an = Lecture . get_by_pk ( lecture_an . pk ) [comment] [EOL] assert len ( lecture_an . events ) == [number] [EOL] assert lecture_an . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_get_shared_tables_edit_form ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] assert [string] in resp . text [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_shared_tables_edit_form_has_active_delete_link_if_no_amendement ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_shared_tables_edit_form_has_disabled_delete_link_if_amendement ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( shared_table_lecture_an ) [EOL] shared_table_lecture_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_shared_tables_edit_form ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import DBSession , Lecture , SharedTable [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] shared_table = ( DBSession . query ( SharedTable ) . filter ( SharedTable . titre == [string] ) . one ( ) ) [EOL] assert shared_table . slug == [string] [EOL] assert shared_table . lecture . pk == lecture_an . pk [EOL] [EOL] [comment] [EOL] lecture_an = Lecture . get_by_pk ( lecture_an . pk ) [comment] [EOL] assert len ( lecture_an . events ) == [number] [EOL] assert lecture_an . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_get_shared_tables_edit_form_with_existing_same_name_shared_table ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an , lecture_senat ) : [EOL] from zam_repondeur . models import DBSession , SharedTable [EOL] [EOL] with transaction . manager : [EOL] SharedTable . create ( titre = [string] , lecture = lecture_senat ) [EOL] DBSession . add ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_shared_tables_delete_form ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_shared_tables_delete_form ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import DBSession , Lecture , SharedTable [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] assert ( DBSession . query ( SharedTable ) . filter ( SharedTable . titre == [string] ) . count ( ) == [number] ) [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] resp = resp . forms [ [string] ] . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [comment] [EOL] assert ( DBSession . query ( SharedTable ) . filter ( SharedTable . titre == [string] ) . count ( ) == [number] ) [EOL] [EOL] [comment] [EOL] lecture_an = Lecture . get_by_pk ( lecture_an . pk ) [comment] [EOL] assert len ( lecture_an . events ) == [number] [EOL] assert lecture_an . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [comment] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def test_get_article_edit_form ( app , lecture_an , amendements_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] [EOL] [EOL] def test_get_article_edit_form_not_found_bad_format ( app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , expect_errors = True , ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_post_article_edit_form_title ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] assert len ( amendement . article . events ) == [number] [EOL] [EOL] [EOL] def test_post_article_edit_form_title_cleaned ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] assert len ( amendement . article . events ) == [number] [EOL] [EOL] [EOL] def test_post_article_edit_form_title_redirect_next ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] [EOL] with transaction . manager : [EOL] article_2 = Article . create ( lecture = lecture_an , type = [string] , num = [string] ) [EOL] DBSession . add ( article_2 ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] [EOL] def test_post_article_edit_form_title_redirect_amendements_if_intersticial_is_last ( app , lecture_an , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] [EOL] with transaction . manager : [EOL] article_1_apres = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] DBSession . add ( article_1_apres ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] [EOL] def test_post_article_edit_form_title_redirect_next_with_apres ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] [EOL] with transaction . manager : [EOL] article_1_apres = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] DBSession . add ( article_1_apres ) [EOL] article_2 = Article . create ( lecture = lecture_an , type = [string] , num = [string] ) [EOL] DBSession . add ( article_2 ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] [EOL] def test_post_article_edit_form_title_redirect_next_with_apres_and_avant ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] [EOL] with transaction . manager : [EOL] article_1_apres = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] DBSession . add ( article_1_apres ) [EOL] article_2_avant = Article . create ( lecture = lecture_an , type = [string] , num = [string] , pos = [string] ) [EOL] article_2 = Article . create ( lecture = lecture_an , type = [string] , num = [string] ) [EOL] DBSession . add ( article_2_avant ) [EOL] DBSession . add ( article_2 ) [EOL] DBSession . add ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] [EOL] [EOL] def test_post_article_edit_form_presentation ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] assert len ( amendement . article . events ) == [number] [EOL] [EOL] [EOL] def test_post_article_edit_form_presentation_cleaned ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . article . user_content . presentation == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] def test_team_member_can_access_owned_dossier ( app , dossier_plfss2018 , team_zam , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_non_team_member_cannot_access_owned_dossier ( app , dossier_plfss2018 , user_ronan ) : [EOL] resp = app . get ( [string] , user = user_ronan ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_download ( app , lecture_an , amendements_an , format_ , content_type , user_david ) : [EOL] [EOL] resp = app . get ( [string] , { [string] : format_ } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == content_type [EOL] assert ( resp . headers [ [string] ] == f" [string] { format_ }" ) [EOL] [EOL] [EOL] def test_download_bad_format ( app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , { [string] : [string] } , user = user_david , expect_errors = True , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_download_pdf_multiple_amendements ( app , lecture_an , article1_an , amendements_an , user_david ) : [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] " ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_pdf_multiple_amendements_multiple_articles ( app , lecture_an , article7bis_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] with transaction . manager : [EOL] Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] [EOL] resp = app . get ( ( [string] [string] ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_pdf_lots_of_amendements ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = [number] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] params = [string] . join ( f" [string] { i + [number] }" for i in range ( nb_amendements ) ) [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] { params }" ) , user = user_david , ) [EOL] assert resp . content_type == [string] [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_pdf_multiple_amendements_same_batch ( app , lecture_an , article1_an , amendements_an_batch , user_david ) : [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] " ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_xlsx_multiple_amendements ( app , lecture_an , article1_an , amendements_an , user_david ) : [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] " ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . content_type == [string] ) [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_xlsx_multiple_amendements_multiple_articles ( app , lecture_an , article7bis_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] with transaction . manager : [EOL] Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] [EOL] resp = app . get ( ( [string] [string] ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . content_type == [string] ) [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_xlsx_lots_of_amendements ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = [number] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] params = [string] . join ( f" [string] { i + [number] }" for i in range ( nb_amendements ) ) [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] { params }" ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . content_type == [string] ) [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] def test_download_xlsx_multiple_amendements_same_batch ( app , lecture_an , article1_an , amendements_an_batch , user_david ) : [EOL] resp = app . get ( ( f" [string] " f" [string] { article1_an . url_key } [string] " ) , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . content_type == [string] ) [EOL] assert ( resp . headers [ [string] ] == [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] def _text_from_node ( node , selector ) : [EOL] return [string] . join ( node . css_first ( selector ) . text ( ) . strip ( ) . split ( ) ) [EOL] [EOL] [EOL] def test_reponses_empty ( app , lecture_an , amendements_an , user_david ) : [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . first_element ( [string] ) == [string] [EOL] assert resp . find_amendement ( amendements_an [ [number] ] ) is None [EOL] assert resp . find_amendement ( amendements_an [ [number] ] ) is None [EOL] [EOL] [EOL] def test_reponses_full ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 is not None [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] assert not test_amendement_666 . has_gouvernemental_class ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 is not None [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] assert not test_amendement_999 . has_gouvernemental_class ( ) [EOL] [EOL] assert ( test_amendement_666 . node . css_first ( [string] ) . text ( ) . strip ( ) != test_amendement_999 . node . css_first ( [string] ) . text ( ) . strip ( ) ) [EOL] assert _text_from_node ( test_amendement_666 . node , [string] ) == [string] [EOL] [EOL] [EOL] def test_reponses_grouping ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( test_amendement_666 . node . css_first ( [string] ) . text ( ) . strip ( ) == test_amendement_999 . node . css_first ( [string] ) . text ( ) . strip ( ) ) [EOL] assert ( _text_from_node ( test_amendement_666 . node , [string] ) == [string] ) [EOL] [EOL] [EOL] def test_reponses_authors_not_grouping ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] amendement . auteur = [string] [EOL] amendement . groupe = [string] [EOL] amendement . auteur = [string] [EOL] amendement . groupe = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( _text_from_node ( test_amendement_666 . node , [string] ) == [string] ) [EOL] [EOL] [EOL] def test_reponses_authors_grouping ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] amendement . auteur = [string] [EOL] amendement . groupe = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( _text_from_node ( test_amendement_666 . node , [string] ) == [string] ) [EOL] [EOL] [EOL] def test_reponses_groupe_grouping ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] amendement . auteur = [string] [EOL] amendement . groupe = [string] [EOL] amendement . auteur = [string] [comment] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( _text_from_node ( test_amendement_666 . node , [string] ) == [string] ) [EOL] [EOL] [EOL] def test_reponses_many_grouping ( app , lecture_an , article1_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] amendement . auteur = [string] [EOL] amendement . groupe = [string] [EOL] amendement . auteur = [string] [comment] [EOL] DBSession . add_all ( amendements_an ) [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , auteur = [string] , groupe = [string] , avis = [string] , objet = [string] , reponse = [string] , ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( _text_from_node ( test_amendement_666 . node , [string] ) == [string] ) [EOL] assert _text_from_node ( test_amendement_666 . node , [string] ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_reponses_not_grouping_on_same_reponse_only ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] test_amendement_666 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_666 . number_is_in_title ( ) [EOL] [EOL] test_amendement_999 = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement_999 . number_is_in_title ( ) [EOL] [EOL] assert ( test_amendement_666 . node . css_first ( [string] ) . text ( ) . strip ( ) != test_amendement_999 . node . css_first ( [string] ) . text ( ) . strip ( ) ) [EOL] [EOL] [EOL] def test_reponses_gouvernemental ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . auteur = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] test_amendement = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement is not None [EOL] assert test_amendement . number_is_in_title ( ) [EOL] assert test_amendement . has_gouvernemental_class ( ) [EOL] [EOL] test_amendement = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement is not None [EOL] assert test_amendement . number_is_in_title ( ) [EOL] assert test_amendement . has_gouvernemental_class ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] ] , ) def test_reponses_abandoned_not_displayed ( app , lecture_an , amendements_an , sort , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] [comment] [EOL] amendement . sort = sort [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] test_amendement = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement is not None [EOL] assert test_amendement . number_is_in_title ( ) [EOL] assert not test_amendement . has_gouvernemental_class ( ) [EOL] [EOL] assert resp . find_amendement ( amendements_an [ [number] ] ) is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] ] , ) def test_reponses_abandoned_and_gouvernemental_not_displayed ( app , lecture_an , amendements_an , sort , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendement . auteur = [string] [EOL] [comment] [EOL] amendement . sort = sort [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] test_amendement = resp . find_amendement ( amendements_an [ [number] ] ) [EOL] assert test_amendement is not None [EOL] assert test_amendement . number_is_in_title ( ) [EOL] assert test_amendement . has_gouvernemental_class ( ) [EOL] [EOL] assert resp . find_amendement ( amendements_an [ [number] ] ) is None [EOL] [EOL] [EOL] def test_reponses_with_textes ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendement . article . user_content . title = [string] [EOL] amendement . article . content = { [string] : [string] } [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] fake_anchor = resp . parser . css_first ( [string] ) [EOL] article_content = fake_anchor . parent . css_first ( [string] ) [EOL] assert article_content . css_first ( [string] ) . text ( ) == [string] [EOL] assert article_content . css_first ( [string] ) . text ( ) == [string] [EOL] assert article_content . css_first ( [string] ) . text ( ) == [string] [EOL] assert article_content . css_first ( [string] ) . text ( ) . strip ( ) == [string] [EOL] [EOL] [EOL] def test_reponses_with_presentations ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendement . article . user_content . presentation = ( [string] ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] fake_anchor = resp . parser . css_first ( [string] ) [EOL] article_content = fake_anchor . parent . css_first ( [string] ) [EOL] assert article_content . css_first ( [string] ) . text ( ) == [string] [EOL] assert article_content . css_first ( [string] ) . text ( ) . strip ( ) == [string] [EOL] [EOL] [EOL] def test_reponses_without_textes_or_presentations ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] fake_anchor = resp . parser . css_first ( [string] ) [EOL] article_content = fake_anchor . parent . css_first ( [string] ) [EOL] assert article_content . css_first ( [string] ) is None [EOL] [EOL] [EOL] def test_reponses_with_different_articles ( app , lecture_an , amendements_an , article7bis_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for index , amendement in enumerate ( amendements_an , [number] ) : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendement . article . user_content . title = f" [string] { index }" [EOL] [comment] [EOL] amendement . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) == [string] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) == [string] ) [EOL] assert ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) == [string] ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) == [string] [EOL] assert ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) == [string] ) [EOL] assert ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) == [string] ) [EOL] [EOL] [EOL] def test_reponses_with_annexes ( app , lecture_an , amendements_an , annexe_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for index , amendement in enumerate ( amendements_an , [number] ) : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendement . article . user_content . title = f" [string] { index }" [EOL] [comment] [EOL] amendement . article = annexe_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) == [string] [EOL] [EOL] [EOL] def test_reponses_article_additionnel_avant ( app , lecture_an , amendements_an , article1av_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] amendements_an [ [number] ] . article = article1av_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] section_ids = [ section . attributes . get ( [string] ) for section in resp . parser . tags ( [string] ) if [string] in section . attributes ] [EOL] assert section_ids == [ [string] ] [EOL] article_titles = [ item . text ( ) for item in resp . parser . css ( [string] ) ] [EOL] assert article_titles == [ [string] ] [EOL] [EOL] [EOL] def test_reponses_amendement_rect ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = f" [string] { amendement . num }" [EOL] amendement . user_content . reponse = f" [string] { amendement . num }" [EOL] [comment] [EOL] amendement . rectif = [number] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert [string] in resp [EOL] assert [string] in resp [EOL] [EOL] [EOL] def test_links_to_previous_and_next_articles ( app , lecture_an , amendements_an , article1av_an , article7bis_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article1av_an [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( ( [string] [string] [string] [string] ) , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] nav_links = [ node . text ( ) for node in resp . parser . css ( [string] ) ] [EOL] assert nav_links == [ [string] , [string] ] [EOL]	
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_dossier_delete ( app , lecture_an , amendements_an , user_sgg , team_zam ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Dossier , Lecture , Team [EOL] [EOL] assert Dossier . exists ( slug = [string] ) [EOL] assert Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] assert DBSession . query ( Team ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] assert Dossier . exists ( slug = [string] ) [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . slug == lecture_an . dossier . slug ) . one ( ) ) [EOL] assert dossier_plfss2018 . team is None [EOL] assert not Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] assert DBSession . query ( Team ) . count ( ) == [number] [EOL] [EOL] [comment] [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] assert ( dossier_plfss2018 . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] [EOL] def test_dossier_delete_non_sgg_whitelisted_user ( app , lecture_an , amendements_an , team_zam ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture , User [EOL] [EOL] with transaction . manager : [EOL] user_sgg_not_whitelisted = User . create ( name = [string] , email = [string] ) [EOL] DBSession . add ( team_zam ) [EOL] team_zam . users . append ( user_sgg_not_whitelisted ) [EOL] [EOL] assert Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg_not_whitelisted ) [EOL] assert [string] not in resp . forms [EOL] [EOL] [comment] [EOL] resp = app . post ( [string] , user = user_sgg_not_whitelisted ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] assert Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] [EOL] [EOL] def test_dossier_delete_non_sgg_user ( app , lecture_an , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture [EOL] [EOL] assert not user_david . email . endswith ( [string] ) [EOL] [EOL] assert Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert [string] not in resp . forms [EOL] [EOL] [comment] [EOL] resp = app . post ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] assert Lecture . exists ( dossier = lecture_an . dossier , texte = lecture_an . texte , partie = None , phase = lecture_an . phase , chambre = lecture_an . chambre , organe = lecture_an . organe , ) [EOL] assert DBSession . query ( Amendement ) . count ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] def test_get_list_empty ( app , dossier_plfss2018 , user_david ) : [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] [EOL] [EOL] @ pytest . fixture def lecture_commission ( db , dossier_plfss2018 , texte_plfss2018_an_premiere_lecture ) : [EOL] from zam_repondeur . models import Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = texte_plfss2018_an_premiere_lecture , titre = [string] , organe = [string] , dossier = dossier_plfss2018 , ) [EOL] [EOL] return lecture [EOL] [EOL] [EOL] def test_get_list_not_empty ( app , lecture_an , lecture_commission , user_david ) : [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] [EOL] [EOL] def test_get_list_reverse_datetime_order ( app , lecture_an , user_david ) : [EOL] from zam_repondeur . models import DBSession , Lecture , Phase [EOL] [EOL] with transaction . manager : [EOL] lecture2 = Lecture . create ( phase = Phase . PREMIERE_LECTURE , texte = lecture_an . texte , titre = [string] , organe = lecture_an . organe , dossier = lecture_an . dossier , ) [EOL] DBSession . add ( lecture2 ) [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] lectures = resp . parser . css ( [string] ) [EOL] assert [string] in lectures [ [number] ] . text ( ) [EOL] assert [string] in lectures [ [number] ] . text ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def user_david ( user_david ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] return user_david [EOL] [EOL] [EOL] @ pytest . fixture def user_ronan ( user_ronan , team_zam ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan ) [EOL] user_ronan . teams . append ( team_zam ) [EOL] [EOL] return user_ronan [EOL] [EOL] [EOL] @ pytest . fixture def david_has_no_amendement ( user_david , lecture_an , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] [EOL] assert len ( user_david . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [EOL] @ pytest . fixture def david_has_one_amendement ( user_david , lecture_an , user_david_table_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] assert len ( user_david . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [EOL] @ pytest . fixture def david_has_two_amendements ( user_david , lecture_an , user_david_table_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] assert len ( user_david . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [EOL] def assert_amendements_are_on_table_for ( amendements , user ) : [EOL] for amendement in amendements : [EOL] assert amendement . location . user_table . user . email == user . email [EOL] [EOL] [EOL] def assert_amendement_is_on_table_for ( amendement , user ) : [EOL] assert_amendements_are_on_table_for ( [ amendement ] , user ) [EOL] [EOL] [EOL] def assert_amendements_are_on_the_index ( amendements ) : [EOL] for amendement in amendements : [EOL] assert amendement . location . user_table is None [EOL] [EOL] [EOL] def assert_amendement_is_on_the_index ( amendement ) : [EOL] assert_amendements_are_on_the_index ( [ amendement ] ) [EOL] [EOL] [EOL] def assert_amendement_has_event_with_summary ( amendement , summary ) : [EOL] events = amendement . events [EOL] assert len ( events ) == [number] [EOL] [EOL] event = events [ [number] ] [EOL] assert event . render_summary ( ) == summary [EOL] [EOL] [EOL] def assert_amendements_have_event_with_summary ( amendements , summary ) : [EOL] for amendement in amendements : [EOL] assert_amendement_has_event_with_summary ( amendement , summary ) [EOL] [EOL] [EOL] def test_tables_empty ( app , lecture_an , user_david ) : [EOL] resp = app . get ( f" [string] { user_david . email }" , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_tables_with_amendement ( app , lecture_an , amendements_an , user_david , david_has_one_amendement ) : [EOL] resp = app . get ( f" [string] { user_david . email }" , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] assert f' [string] { amendements_an [ [number] ] } [string] ' in resp . text [EOL] assert f' [string] { amendements_an [ [number] ] } [string] ' not in resp . text [EOL] [EOL] [EOL] def test_tables_grab_amendement ( app , lecture_an , amendements_an , user_david , david_has_no_amendement ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] [EOL] [comment] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : True } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_table_for ( amendement , user_david ) [EOL] assert_amendement_has_event_with_summary ( amendement , ( [string] [string] ) , ) [EOL] [EOL] [EOL] def test_tables_grab_amendements ( app , lecture_an , amendements_an , user_david , david_has_no_amendement ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amdt . num for amdt in amendements_an ] , [string] : True } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendements = [ Amendement . get ( lecture_an , amdt . num ) for amdt in amendements_an ] [EOL] [EOL] assert_amendements_are_on_table_for ( amendements , user_david ) [EOL] assert_amendements_have_event_with_summary ( amendements , ( [string] [string] ) , ) [EOL] [EOL] [EOL] def test_tables_release_amendement ( app , lecture_an , amendements_an , user_david , david_has_one_amendement ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] [EOL] assert_amendement_is_on_table_for ( amendements_an [ [number] ] , user_david ) [EOL] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : True } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_the_index ( amendement ) [EOL] assert_amendement_has_event_with_summary ( amendement , [string] [string] , ) [EOL] [EOL] [EOL] def test_tables_release_amendements ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num , amendements_an [ [number] ] . num ] , [string] : True } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendements = [ Amendement . get ( lecture_an , amdt . num ) for amdt in amendements_an ] [EOL] [EOL] assert_amendements_are_on_the_index ( amendements ) [EOL] assert_amendements_have_event_with_summary ( amendements , [string] [string] , ) [EOL] [EOL] [EOL] class TestTransfer : [EOL] def test_transfer_one_amendement_to_someone_else ( self , app , lecture_an , amendements_an , user_david , user_david_table_an , user_ronan , user_ronan_table_an , david_has_one_amendement , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] [EOL] assert len ( user_ronan . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] email = user_david . email [EOL] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : user_ronan . email } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_table_for ( amendement , user_ronan ) [EOL] assert_amendement_has_event_with_summary ( amendement , [string] [string] , ) [EOL] [EOL] def test_transfer_one_amendement_to_myself_is_a_no_op ( self , app , lecture_an , amendements_an , user_david , david_has_one_amendement ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : True } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_table_for ( amendement , user_david ) [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] def test_transfer_one_amendement_to_index_manually_is_forbidden ( self , app , lecture_an , amendements_an , user_david , david_has_one_amendement ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] email = user_david . email [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : [string] } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_table_for ( amendement , user_david ) [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] def test_transfer_multiple_amendements_to_someone_else ( self , app , lecture_an , amendements_an , user_david , david_has_two_amendements , user_ronan , ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] assert len ( user_ronan . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] email = user_david . email [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num , amendements_an [ [number] ] . num ] , [string] : user_ronan . email , } , user = user_david , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendements = [ Amendement . get ( lecture_an , amdt . num ) for amdt in amendements_an ] [EOL] assert_amendements_are_on_table_for ( amendements , user_ronan ) [EOL] assert_amendements_have_event_with_summary ( amendements , [string] [string] , ) [EOL] [EOL] [EOL] def test_tables_steal_amendement ( app , lecture_an , amendements_an , user_david , david_has_one_amendement , user_ronan , team_zam , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] team_zam . users . append ( user_ronan ) [EOL] DBSession . add ( team_zam ) [EOL] [EOL] assert len ( user_ronan . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [comment] [EOL] email = user_ronan . email [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : True } , user = user_ronan , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] assert_amendement_is_on_table_for ( amendement , user_ronan ) [EOL] assert_amendement_has_event_with_summary ( amendement , [string] [string] [string] , ) [EOL] [EOL] [EOL] def test_tables_steal_amendement_resets_editing_status ( app , lecture_an , amendements_an , user_david , david_has_one_amendement , user_ronan , team_zam , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] team_zam . users . append ( user_ronan ) [EOL] DBSession . add ( team_zam ) [EOL] [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] assert amendements_an [ [number] ] . is_being_edited [EOL] [EOL] [comment] [EOL] email = user_ronan . email [EOL] app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num ] , [string] : True } , user = user_ronan , ) [EOL] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] assert not amendement . is_being_edited [EOL] [EOL] [EOL] def test_tables_steal_amendements ( app , lecture_an , amendements_an , user_david , david_has_two_amendements , user_ronan , team_zam , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] team_zam . users . append ( user_ronan ) [EOL] DBSession . add ( team_zam ) [EOL] [EOL] assert len ( user_ronan . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] email = user_ronan . email [EOL] [EOL] [comment] [EOL] resp = app . post ( f" [string] { email }" , { [string] : [ amendements_an [ [number] ] . num , amendements_an [ [number] ] . num ] , [string] : True } , user = user_ronan , ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendements = [ Amendement . get ( lecture_an , amdt . num ) for amdt in amendements_an ] [EOL] [EOL] assert_amendements_are_on_table_for ( amendements , user_ronan ) [EOL] assert_amendements_have_event_with_summary ( amendements , [string] [string] [string] , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , { [string] : [string] } ] , [ [string] , { [string] : [string] } ] , [ [string] , { } ] ] , ) def test_tables_check_with_amendements ( app , user_david , david_has_two_amendements , current , updated ) : [EOL] email = user_david . email [EOL] resp = app . get ( f" [string] { email } [string] " , { [string] : current } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . json == updated [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , { } ] , [ [string] , { [string] : [string] } ] , [ [string] , { [string] : [string] } ] ] , ) def test_tables_check_without_amendements ( app , lecture_an , amendements_an , user_david , current , updated ) : [EOL] email = user_david . email [EOL] resp = app . get ( f" [string] { email } [string] " , { [string] : current } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . json == updated [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] def first_description_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) . strip ( ) [EOL] [EOL] [EOL] def first_details_text ( resp ) : [EOL] return ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) . split ( [string] ) [ - [number] ] . strip ( ) ) [EOL] [EOL] [EOL] def first_summary_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) [EOL] [EOL] [EOL] def test_amendement_journal_avis ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import AvisAmendementModifie [EOL] [EOL] with transaction . manager : [EOL] AvisAmendementModifie . create ( amendement = amendements_an [ [number] ] , avis = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_avis_with_existing_avis ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import AvisAmendementModifie [EOL] [EOL] with transaction . manager : [EOL] AvisAmendementModifie . create ( amendement = amendements_an [ [number] ] , avis = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] AvisAmendementModifie . create ( amendement = amendements_an [ [number] ] , avis = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert ( first_description_text ( resp ) == [string] ) [EOL] [EOL] [EOL] def test_amendement_journal_objet ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import ObjetAmendementModifie [EOL] [EOL] with transaction . manager : [EOL] ObjetAmendementModifie . create ( amendement = amendements_an [ [number] ] , objet = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_objet_clean ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import ObjetAmendementModifie [EOL] [EOL] with transaction . manager : [EOL] ObjetAmendementModifie . create ( amendement = amendements_an [ [number] ] , objet = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert ( resp . parser . css_first ( [string] ) . html == [string] ) [EOL] [EOL] [EOL] def test_amendement_journal_reponse ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import ReponseAmendementModifiee [EOL] [EOL] with transaction . manager : [EOL] ReponseAmendementModifiee . create ( amendement = amendements_an [ [number] ] , reponse = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_comments ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import CommentsAmendementModifie [EOL] [EOL] with transaction . manager : [EOL] CommentsAmendementModifie . create ( amendement = amendements_an [ [number] ] , comments = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_affectation ( app , lecture_an_url , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = str ( user_david ) , new_value = str ( user_ronan ) , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert ( first_description_text ( resp ) == [string] ) [EOL] [EOL] [EOL] def test_amendement_journal_affectation_by_other ( app , lecture_an_url , amendements_an , user_david , user_ronan , user_daniel ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = str ( user_ronan ) , new_value = str ( user_daniel ) , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_description_text ( resp ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_amendement_journal_affectation_taken ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = [string] , new_value = str ( user_david ) , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_affectation_taken_by_other ( app , lecture_an_url , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = [string] , new_value = str ( user_david ) , request = DummyRequest ( remote_addr = [string] , user = user_ronan ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert ( first_description_text ( resp ) == [string] ) [EOL] [EOL] [EOL] def test_amendement_journal_affectation_released ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = str ( user_david ) , new_value = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_amendement_journal_affectation_released_by_other ( app , lecture_an_url , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] AmendementTransfere . create ( amendement = amendements_an [ [number] ] , old_value = str ( user_david ) , new_value = [string] , request = DummyRequest ( remote_addr = [string] , user = user_ronan ) , ) [EOL] assert len ( amendements_an [ [number] ] . events ) == [number] [EOL] assert ( amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert amendements_an [ [number] ] . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] assert first_description_text ( resp ) == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] [EOL] import transaction [EOL] from webtest import Upload [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA = HERE . parent . parent / [string] / [string] / [string] [EOL] [EOL] [EOL] def test_get_form ( app , lecture_essoc2018_an_nouvelle_lecture_commission_fond , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] form = resp . forms [ [string] ] [EOL] [EOL] assert form . method == [string] [EOL] assert form . action == ( [string] [string] [string] [string] ) [EOL] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] ] [EOL] [EOL] assert form . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] def test_upload_liasse_success ( app , lecture_essoc2018_an_nouvelle_lecture_commission_fond , user_david ) : [EOL] from zam_repondeur . models import DBSession , Lecture [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = Upload ( [string] , ( SAMPLE_DATA / [string] ) . read_bytes ( ) ) [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] lecture = Lecture . get_by_pk ( lecture_essoc2018_an_nouvelle_lecture_commission_fond . pk ) [EOL] assert lecture . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_upload_liasse_with_table ( app , lecture_essoc2018_an_nouvelle_lecture_commission_fond , user_david ) : [EOL] from zam_repondeur . models import Lecture [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = Upload ( [string] , ( SAMPLE_DATA / [string] ) . read_bytes ( ) ) [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] lecture = Lecture . get_by_pk ( lecture_essoc2018_an_nouvelle_lecture_commission_fond . pk ) [EOL] assert ( [string] in lecture . amendements [ [number] ] . corps ) [EOL] assert ( [string] in lecture . amendements [ [number] ] . expose ) [EOL] [EOL] [EOL] def test_upload_liasse_success_with_a_deposer ( app , lecture_essoc2018_an_nouvelle_lecture_commission_fond , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [comment] [EOL] form [ [string] ] = Upload ( [string] , ( SAMPLE_DATA / [string] ) . read_bytes ( ) ) [EOL] resp = form . submit ( ) [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_upload_liasse_missing_file ( app , lecture_essoc2018_an_nouvelle_lecture_commission_fond , user_david ) : [EOL] from zam_repondeur . models import Lecture [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] [comment] [EOL] lecture = Lecture . get_by_pk ( lecture_essoc2018_an_nouvelle_lecture_commission_fond . pk ) [EOL] assert lecture . events == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def user_david ( user_david ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] return user_david [EOL] [EOL] [EOL] @ pytest . fixture def david_has_one_amendement ( user_david , lecture_an , user_david_table_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] assert len ( user_david . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [EOL] @ pytest . fixture def david_has_two_amendements ( user_david , lecture_an , user_david_table_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] assert len ( user_david . table_for ( lecture_an ) . amendements ) == [number] [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements ( app , amendements_an , user_david , david_has_two_amendements ) : [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . parser . css_first ( [string] ) . text ( ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_not_all_on_table ( app , amendements_an , user_david , david_has_one_amendement ) : [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] in resp . text ) [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_only_one_reponse ( app , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_same_reponses ( app , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_different_reponses ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_same_reponses_different_comments ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . comments = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_different_articles ( app , lecture_an , article7bis_an , amendements_an , user_david , david_has_two_amendements , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_same_mission ( app , lecture_an , article7bis_an , amendements_an , user_david , david_has_two_amendements , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . mission_titre = [string] [EOL] amendements_an [ [number] ] . mission_titre = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_lecture_get_batch_amendements_different_mission ( app , lecture_an , article7bis_an , amendements_an , user_david , david_has_two_amendements , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . mission_titre = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] resp = resp . forms [ [string] ] . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] assert amendement_666 . location . batch . amendements == [ amendement_666 , amendement_999 ] [EOL] [EOL] [comment] [EOL] assert len ( amendement_666 . events ) == [number] [EOL] assert amendement_666 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert len ( amendement_999 . events ) == [number] [EOL] assert amendement_999 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_not_all_on_table ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . location . user_table = None [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] in resp . text ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert not amendement_666 . location . batch [EOL] assert not amendement_999 . location . batch [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_only_one_reponse ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] amendements_an [ [number] ] . user_content . comments = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] [EOL] [comment] [EOL] assert amendement_666 . user_content . avis == [string] [EOL] assert amendement_999 . user_content . avis == [string] [EOL] [EOL] [comment] [EOL] assert amendement_666 . user_content . reponse == [string] [EOL] assert amendement_999 . user_content . reponse == [string] [EOL] [EOL] [comment] [EOL] assert len ( amendement_999 . events ) == [number] [EOL] assert [ str ( event . render_summary ( ) ) for event in reversed ( amendement_999 . events ) ] == [ ( [string] [string] ) , ( [string] [string] ) , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_update_all_user_content ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] amendements_an [ [number] ] . user_content . comments = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . user_content . avis == [string] [EOL] assert amendement_666 . user_content . objet == [string] [EOL] assert amendement_666 . user_content . reponse == [string] [EOL] assert amendement_666 . user_content . comments == [string] [EOL] assert amendement_999 . user_content . avis == [string] [EOL] assert amendement_999 . user_content . objet == [string] [EOL] assert amendement_999 . user_content . reponse == [string] [EOL] assert amendement_999 . user_content . comments == [string] [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_same_reponses ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_different_reponses ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] in resp . text ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert not amendement_666 . location . batch [EOL] assert not amendement_999 . location . batch [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_same_reponses_different_comments ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] in resp . text ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert not amendement_666 . location . batch [EOL] assert not amendement_999 . location . batch [EOL] [EOL] [EOL] def test_lecture_post_batch_set_amendements_different_articles ( app , lecture_an , article7bis_an , amendements_an , user_david , david_has_two_amendements , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] resp = resp . follow ( ) [EOL] assert ( [string] [string] in resp . text ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert not amendement_666 . location . batch [EOL] assert not amendement_999 . location . batch [EOL] [EOL] [EOL] def test_lecture_post_batch_unset_amendement ( app , lecture_an , amendements_an , user_david , david_has_two_amendements ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import BatchUnset [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] assert amendement_666 . location . batch . amendements == [ amendement_666 , amendement_999 ] [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , { [string] : amendement_666 } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert not amendement_666 . location . batch [EOL] assert not amendement_999 . location . batch [EOL] [EOL] [comment] [EOL] assert len ( amendement_666 . events ) == [number] [EOL] assert isinstance ( amendement_666 . events [ [number] ] , BatchUnset ) [EOL] assert amendement_666 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert len ( amendement_999 . events ) == [number] [EOL] assert isinstance ( amendement_999 . events [ [number] ] , BatchUnset ) [EOL] assert amendement_999 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_batch_reset_amendement ( app , lecture_an , article1_an , amendements_an , user_david , user_david_table_an , david_has_two_amendements , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] DBSession . add_all ( amendements_an ) [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] assert not amendements_an [ [number] ] . location . batch [EOL] [EOL] with transaction . manager : [EOL] amendement_777 = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] ) [EOL] user_david_table_an . add_amendement ( amendement_777 ) [EOL] assert not amendement_777 . location . batch [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] amendement_999 = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] assert amendement_666 . location . batch . amendements == [ amendement_666 , amendement_999 ] [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , { [string] : [ amendement_666 , amendement_777 ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] amendement_666 = Amendement . get ( lecture_an , [number] ) [EOL] amendement_999 = Amendement . get ( lecture_an , [number] ) [EOL] amendement_777 = Amendement . get ( lecture_an , [number] ) [EOL] [EOL] [comment] [EOL] assert amendement_666 . location . batch . pk == [number] [EOL] assert amendement_999 . location . batch . pk == [number] [EOL] assert amendement_777 . location . batch . pk == [number] [EOL] assert amendement_666 . location . batch . amendements == [ amendement_666 , amendement_999 , amendement_777 , ] [EOL] [EOL] [comment] [EOL] assert len ( amendement_666 . events ) == [number] [EOL] assert amendement_666 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement_666 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement_666 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( amendement_999 . events ) == [number] [EOL] assert amendement_999 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement_999 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement_999 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( amendement_777 . events ) == [number] [EOL] assert amendement_777 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL]	
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_post_amendement_init_form_events ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import ( AvisAmendementModifie , CommentsAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location . endswith ( f" [string] { amendement . num }" ) [EOL] [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == amendement . num ) . one ( ) ) [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] assert isinstance ( amendement . events [ [number] ] , CommentsAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendement . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( amendement . events [ [number] ] , ReponseAmendementModifiee ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendement . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( amendement . events [ [number] ] , ObjetAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert isinstance ( amendement . events [ [number] ] , AvisAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert amendement . events [ [number] ] . render_details ( ) == ( [string] [string] [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert ( amendement . events [ [number] ] . render_details ( ) == [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert ( amendement . events [ [number] ] . render_details ( ) == [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert amendement . events [ [number] ] . render_details ( ) == [string] [EOL] [EOL] [EOL] def test_post_amendement_edit_form_events ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import ( AvisAmendementModifie , CommentsAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] amendement . user_content . comments = [string] [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location . endswith ( f" [string] { amendement . num }" ) [EOL] [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == amendement . num ) . one ( ) ) [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] assert isinstance ( amendement . events [ [number] ] , CommentsAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert ( amendement . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( amendement . events [ [number] ] , ReponseAmendementModifiee ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert ( amendement . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert ( amendement . events [ [number] ] . data [ [string] ] == [string] ) [EOL] assert isinstance ( amendement . events [ [number] ] , ObjetAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert isinstance ( amendement . events [ [number] ] , AvisAmendementModifie ) [EOL] assert amendement . events [ [number] ] . created_at is not None [EOL] assert amendement . events [ [number] ] . user . email == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] assert amendement . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] [comment] [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert amendement . events [ [number] ] . render_details ( ) == ( [string] [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert amendement . events [ [number] ] . render_details ( ) == ( [string] [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] ) [EOL] assert ( amendement . events [ [number] ] . render_details ( ) == [string] ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement . events [ [number] ] . render_details ( ) == [string] [EOL] [EOL] [EOL] def test_post_amendement_edit_form_events_empty ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location . endswith ( f" [string] { amendement . num }" ) [EOL] [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == amendement . num ) . one ( ) ) [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL]	
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] def first_description_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) . strip ( ) [EOL] [EOL] [EOL] def first_details_text ( resp ) : [EOL] return ( resp . parser . css_first ( [string] ) . text ( ) . strip ( ) . split ( [string] ) [ - [number] ] . strip ( ) ) [EOL] [EOL] [EOL] def first_summary_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) [EOL] [EOL] [EOL] def test_article_journal_title ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models . events . article import TitreArticleModifie [EOL] [EOL] with transaction . manager : [EOL] TitreArticleModifie . create ( article = article1_an , title = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( article1_an . events ) == [number] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_article_journal_title_clean ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models . events . article import TitreArticleModifie [EOL] [EOL] with transaction . manager : [EOL] TitreArticleModifie . create ( article = article1_an , title = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( article1_an . events ) == [number] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert ( resp . parser . css_first ( [string] ) . html == [string] ) [EOL] [EOL] [EOL] def test_article_journal_title_from_services ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models . events . article import TitreArticleModifie [EOL] [EOL] with transaction . manager : [EOL] TitreArticleModifie . create ( article = article1_an , title = [string] ) [EOL] assert len ( article1_an . events ) == [number] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert first_summary_text ( resp ) == ( [string] [string] ) [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_article_journal_presentation ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models . events . article import PresentationArticleModifiee [EOL] [EOL] with transaction . manager : [EOL] PresentationArticleModifiee . create ( article = article1_an , presentation = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( article1_an . events ) == [number] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == [string] [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert first_summary_text ( resp ) == [string] [EOL] assert first_details_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_article_journal_content ( app , lecture_an , article1_an , user_david ) : [EOL] from zam_repondeur . models . events . article import ContenuArticleModifie [EOL] [EOL] with transaction . manager : [EOL] ContenuArticleModifie . create ( article = article1_an , content = { [string] : [string] } ) [EOL] assert len ( article1_an . events ) == [number] [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == { } [EOL] assert article1_an . events [ [number] ] . data [ [string] ] == { [string] : [string] } [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert first_description_text ( resp ) == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_get_amendement_edit_form ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement . expose = [string] [EOL] amendement . corps = [string] [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] assert list ( resp . forms [ [string] ] . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) . strip ( ) == [string] [EOL] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] [EOL] [EOL] def test_get_amendement_edit_form_only_if_owner ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amdt = amendements_an [ [number] ] [EOL] amdt . expose = [string] [EOL] amdt . corps = [string] [EOL] amdt . user_content . avis = [string] [EOL] DBSession . add ( amdt ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] [EOL] [comment] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] assert resp . parser . css_first ( [string] ) . text ( ) == [string] [EOL] [EOL] [EOL] def test_transfer_amendement_from_edit_form ( app , lecture_an , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] [comment] [EOL] table = user_david . table_for ( lecture_an ) [EOL] assert len ( table . amendements ) == [number] [EOL] [EOL] amdt = amendements_an [ [number] ] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] form = resp . forms [ [string] ] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] DBSession . add ( amdt ) [EOL] user_david = DBSession . query ( User ) . filter ( User . email == user_david . email ) . first ( ) [EOL] table = user_david . table_for ( lecture_an ) [EOL] assert len ( table . amendements ) == [number] [EOL] assert table . amendements [ [number] ] is amdt [EOL] [EOL] [comment] [EOL] assert len ( amdt . events ) == [number] [EOL] assert amdt . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_transfer_amendement_from_edit_form_given_activity ( app , lecture_an , lecture_an_url , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amdt = amendements_an [ [number] ] [EOL] [EOL] [comment] [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] submit_button = resp . parser . css_first ( [string] ) [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] link_to_transfer = resp . parser . css_first ( [string] ) [EOL] assert link_to_transfer . text ( ) == [string] [EOL] assert link_to_transfer . attributes . get ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] table_ronan . add_amendement ( amdt ) [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] submit_button = resp . parser . css_first ( [string] ) [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] link_to_transfer = resp . parser . css_first ( [string] ) [EOL] assert link_to_transfer . text ( ) == [string] [EOL] assert link_to_transfer . attributes . get ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] user_ronan . record_activity ( ) [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] submit_button = resp . parser . css_first ( [string] ) [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] link_to_transfer = resp . parser . css_first ( [string] ) [EOL] assert link_to_transfer . text ( ) == [string] [EOL] assert link_to_transfer . attributes . get ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] amdt . start_editing ( ) [EOL] resp = app . get ( f"{ lecture_an_url } [string] { amdt . num } [string] " , user = user_david ) [EOL] [EOL] submit_button = resp . parser . css_first ( [string] ) [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] assert submit_button . attributes . get ( [string] ) == [string] [EOL] link_to_transfer = resp . parser . css_first ( [string] ) [EOL] assert link_to_transfer . text ( ) == [string] [EOL] assert link_to_transfer . attributes . get ( [string] ) == [string] [EOL] [EOL] [EOL] def test_get_amendement_edit_form_gouvernemental ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement . auteur = [string] [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] assert list ( resp . forms [ [string] ] . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def test_get_amendement_edit_form_not_found ( app , lecture_an_url , amendements_an , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david , expect_errors = True , ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_post_amendement_edit_form ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis == [string] [EOL] assert amendement . user_content . objet == [string] [EOL] assert ( amendement . user_content . reponse == [string] ) [EOL] assert ( amendement . user_content . comments == [string] ) [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] [EOL] def test_post_amendement_edit_form_reset_editing_state ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] amendement . start_editing ( ) [EOL] assert amendement . is_being_edited [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert not amendement . is_being_edited [EOL] [EOL] [EOL] def test_post_amendement_edit_form_switch_table ( app , lecture_an_url , amendements_an , user_david , user_david_table_an , user_ronan , user_ronan_table_an , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] user_ronan_table_an . add_amendement ( amendement ) [EOL] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] resp = resp . maybe_follow ( ) [EOL] assert [string] in resp . text [EOL] assert [string] in resp . text [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] assert amendement . user_content . comments is None [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] [EOL] def test_post_amendement_edit_form_and_transfer ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis == [string] [EOL] assert amendement . user_content . objet == [string] [EOL] assert ( amendement . user_content . reponse == [string] ) [EOL] assert ( amendement . user_content . comments == [string] ) [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] [EOL] [EOL] def test_post_amendement_edit_form_gouvernemental ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement . auteur = [string] [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] assert amendement . gouvernemental [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( [string] ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert ( amendement . user_content . reponse == [string] ) [EOL] assert ( amendement . user_content . comments == [string] ) [EOL] [EOL] [EOL] def test_post_amendement_edit_form_creates_event_only_if_modified ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . objet = [string] [EOL] amendement . user_content . reponse = [string] [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] [comment] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] [comment] [EOL] form [ [string] ] = [string] [EOL] form [ [string] ] = [string] [EOL] form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] DBSession . add ( amendement ) [EOL] assert len ( amendement . events ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] from pathlib import Path [EOL] [EOL] import responses [EOL] import transaction [EOL] [EOL] from fetch . mock_an import setup_mock_responses [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent . parent / [string] [EOL] FETCH_SAMPLE_DATA_DIR = HERE . parent . parent / [string] / [string] [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( FETCH_SAMPLE_DATA_DIR / basename ) . read_text ( ) [EOL] [EOL] [EOL] def test_get_form ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( lecture_an ) [EOL] lecture_an . texte . date_depot = datetime . utcnow ( ) . date ( ) - timedelta ( days = [number] ) [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] assert resp . forms [ [string] ] . action == ( [string] [string] [string] [string] ) [EOL] [EOL] assert list ( resp . forms [ [string] ] . fields . keys ( ) ) == [ [string] ] [EOL] [EOL] assert resp . forms [ [string] ] . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_form_absent_if_old_texte ( app , lecture_an , amendements_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert [string] not in resp . forms [EOL] [EOL] [EOL] @ responses . activate def test_post_form ( app , lecture_an , lecture_an_url , article1_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession , Lecture [EOL] [EOL] [comment] [EOL] with transaction . manager : [EOL] DBSession . add ( lecture_an ) [EOL] lecture_an . texte . date_depot = datetime . utcnow ( ) . date ( ) - timedelta ( days = [number] ) [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] assert lecture_an . events == [ ] [EOL] [EOL] [comment] [EOL] assert lecture_an . get_fetch_progress ( ) == { } [EOL] [EOL] with setup_mock_responses ( lecture = lecture_an , liste = read_sample_data ( [string] ) , amendements = ( ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ( [string] , read_sample_data ( [string] ) ) , ) , ) : [EOL] [EOL] [comment] [EOL] form = app . get ( [string] , user = user_david ) . forms [ [string] ] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] lecture_an = Lecture . get_by_pk ( lecture_an . pk ) [comment] [EOL] [EOL] events = lecture_an . events [EOL] assert len ( events ) == [number] [EOL] assert events [ [number] ] . render_summary ( ) == [string] [EOL] assert [string] in resp . text [EOL] [EOL] [comment] [EOL] assert lecture_an . get_fetch_progress ( ) == { [string] : [number] , [string] : [number] } [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] assert [string] not in resp . forms [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] def first_description_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) . strip ( ) [EOL] [EOL] [EOL] def test_dossier_activation ( app , dossier_plfss2018 , user_david ) : [EOL] from zam_repondeur . models . events . dossier import DossierActive [EOL] [EOL] with transaction . manager : [EOL] DossierActive . create ( dossier = dossier_plfss2018 , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_dossier_lectures_recuperation ( app , dossier_plfss2018 , user_david ) : [EOL] from zam_repondeur . models . events . dossier import LecturesRecuperees [EOL] [EOL] with transaction . manager : [EOL] LecturesRecuperees . create ( dossier = dossier_plfss2018 , user = user_david ) [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL] [EOL] [EOL] def test_dossier_invitation_envoyee ( app , dossier_plfss2018 , user_david ) : [EOL] from zam_repondeur . models . events . dossier import InvitationEnvoyee [EOL] [EOL] with transaction . manager : [EOL] InvitationEnvoyee . create ( dossier = dossier_plfss2018 , email = [string] , request = DummyRequest ( remote_addr = [string] , user = user_david ) , ) [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert first_description_text ( resp ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import datetime [EOL] import logging [EOL] from datetime import datetime , timedelta , timezone [EOL] from textwrap import dedent [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] import transaction [EOL] from freezegun import freeze_time [EOL] [EOL] [EOL] @ pytest . fixture def email ( ) : [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture def auth_token ( email ) : [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] token = [string] [EOL] repository . set_auth_token ( email , token ) [EOL] yield token [EOL] repository . delete_auth_token ( token ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def extra_whitelist ( db ) : [EOL] from zam_repondeur . models . users import AllowedEmailPattern [EOL] [EOL] with transaction . manager : [EOL] AllowedEmailPattern . create ( pattern = [string] ) [EOL] AllowedEmailPattern . create ( pattern = [string] ) [EOL] [EOL] [EOL] class TestLoginPage : [EOL] def test_unauthentified_user_can_view_login_page ( self , app ) : [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] [EOL] def test_unauthentified_user_do_not_have_link_to_dossiers ( self , app ) : [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] not in resp . text ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_an_email_with_a_token_is_sent_if_address_is_valid ( self , app , mailer , valid_email ) : [EOL] resp = app . get ( [string] ) [EOL] form = resp . form [EOL] form [ [string] ] = valid_email [EOL] [EOL] with patch ( [string] ) as mock_generate_auth_token : [EOL] mock_generate_auth_token . return_value = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] assert len ( mailer . outbox ) == [number] [EOL] assert mailer . outbox [ [number] ] . subject == [string] [EOL] assert mailer . outbox [ [number] ] . body == dedent ( [string] ) [EOL] [EOL] def test_user_can_ask_for_a_token_with_a_whitelisted_domain ( self , app , mailer ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL] assert len ( mailer . outbox ) == [number] [EOL] [EOL] def test_user_can_ask_for_a_token_with_a_whitelisted_email_address ( self , app , mailer ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL] assert len ( mailer . outbox ) == [number] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_user_cannot_ask_for_a_token_with_a_missing_email ( self , app , missing_email ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = missing_email [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] , ) def test_user_cannot_ask_for_a_token_with_an_invalid_email ( self , app , incorrect_email ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = incorrect_email [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] , ) def test_user_cannot_ask_for_a_token_if_email_is_not_whitelisted ( self , app , notgouvfr_email ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = notgouvfr_email [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] def test_user_cannot_ask_for_a_token_if_csrf_token_is_missing ( self , app ) : [EOL] resp = app . post ( [string] , { [string] : [string] } , expect_errors = True ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . text . startswith ( [string] ) [EOL] [EOL] def test_user_cannot_ask_for_a_token_if_csrf_token_is_wrong ( self , app ) : [EOL] resp = app . post ( [string] , { [string] : [string] , [string] : [string] } , expect_errors = True , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . text . startswith ( [string] ) [EOL] [EOL] def test_successful_auth_token_request_is_logged ( self , app , caplog ) : [EOL] caplog . set_level ( logging . INFO ) [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] assert ( [string] in caplog . text ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_failed_auth_token_request_is_logged ( self , app , caplog , email ) : [EOL] caplog . set_level ( logging . WARNING ) [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = email [EOL] resp = resp . form . submit ( ) [EOL] assert ( f" [string] { email } [string] " in caplog . text ) [EOL] [EOL] def test_many_token_requests_for_the_same_email_get_throttled ( self , app , settings ) : [EOL] [comment] [EOL] [comment] [EOL] for n in range ( [number] ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( extra_environ = { [string] : f" [string] { n + [number] }" } ) [EOL] [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( expect_errors = True ) [EOL] [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] initial_time = datetime . now ( tz = timezone . utc ) [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] ) ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( expect_errors = True ) [EOL] [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] + [number] ) ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] def test_many_token_requests_from_the_same_ip_get_throttled ( self , app ) : [EOL] [comment] [EOL] for n in range ( [number] ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = f"{ n + [number] } [string] " [EOL] resp = resp . form . submit ( expect_errors = True ) [EOL] [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( expect_errors = True ) [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] initial_time = datetime . now ( tz = timezone . utc ) [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] ) ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( expect_errors = True ) [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] + [number] ) ) : [EOL] resp = app . get ( [string] ) [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] [EOL] class TestLoginWithToken : [EOL] def test_user_can_login_with_auth_token ( self , app , auth_token ) : [EOL] [EOL] resp = app . get ( [string] , params = { [string] : auth_token } ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( resp . location == [string] ) [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] def test_successful_authentication_attempt_is_logged ( self , app , auth_token , caplog ) : [EOL] caplog . set_level ( logging . INFO ) [EOL] app . get ( [string] , params = { [string] : auth_token } ) [EOL] assert ( [string] in caplog . text ) [EOL] [EOL] def test_user_cannot_login_with_bad_auth_token ( self , app , auth_token ) : [EOL] [EOL] resp = app . get ( [string] , params = { [string] : [string] } ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] def test_user_can_access_with_old_auth_token_if_already_logged ( self , app , user_david ) : [EOL] [EOL] resp = app . get ( [string] , params = { [string] : [string] } , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert [string] not in resp . text [EOL] [EOL] def test_failed_authentication_attempt_is_logged ( self , app , caplog ) : [EOL] app . get ( [string] , params = { [string] : [string] } ) [EOL] assert ( [string] in caplog . text ) [EOL] [EOL] def test_authentication_attempts_from_same_ip_are_throttled ( self , app ) : [EOL] [comment] [EOL] for n in range ( [number] ) : [EOL] resp = app . get ( [string] , params = { [string] : f" [string] { n + [number] }" } ) [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] [comment] [EOL] resp = app . get ( [string] , params = { [string] : [string] } , expect_errors = True ) [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] initial_time = datetime . now ( tz = timezone . utc ) [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] ) ) : [EOL] resp = app . get ( [string] , params = { [string] : [string] } , expect_errors = True ) [EOL] assert resp . status_code == [number] [comment] [EOL] [EOL] [comment] [EOL] with freeze_time ( initial_time + timedelta ( seconds = [number] + [number] ) ) : [EOL] resp = app . get ( [string] , params = { [string] : [string] } ) [EOL] assert [number] <= resp . status_code < [number] [EOL] [EOL] def test_authenticated_user_gets_an_auth_cookie ( self , app , auth_token ) : [EOL] assert [string] not in app . cookies [comment] [EOL] [EOL] initial_time = datetime . now ( tz = timezone . utc ) [EOL] [EOL] with freeze_time ( initial_time ) : [EOL] app . get ( [string] , params = { [string] : auth_token } ) [EOL] [EOL] assert [string] in app . cookies [comment] [EOL] [EOL] domains = { cookie . domain for cookie in app . cookiejar } [EOL] assert domains == { [string] , [string] } [EOL] [EOL] auth_cookies = [ cookie for cookie in app . cookiejar if cookie . name == [string] ] [EOL] for cookie in auth_cookies : [EOL] assert cookie . path == [string] [EOL] assert cookie . secure is True [EOL] [EOL] [comment] [EOL] in_7_days = int ( datetime . timestamp ( initial_time ) ) + ( [number] * [number] * [number] ) [EOL] assert cookie . expires == in_7_days [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert cookie . get_nonstandard_attr ( [string] ) == [string] [EOL] [EOL] def test_auth_token_is_deleted_after_use ( self , app , auth_token ) : [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] assert repository . get_auth_token_data ( auth_token ) is not None [comment] [EOL] [EOL] app . get ( [string] , params = { [string] : auth_token } ) [EOL] [EOL] assert repository . get_auth_token_data ( auth_token ) is None [comment] [EOL] [EOL] [EOL] class TestLogout : [EOL] def test_user_loses_the_auth_cookie_when_logging_out ( self , app , auth_token ) : [EOL] [EOL] app . get ( [string] , params = { [string] : auth_token } ) [EOL] assert [string] in app . cookies [comment] [EOL] [EOL] app . get ( [string] ) [EOL] assert [string] not in app . cookies [comment] [EOL] [EOL] def test_user_is_redirected_to_explicit_logout_page ( self , app ) : [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] class TestAuthenticationRequired : [EOL] def test_unauthenticated_user_is_redirected_to_login_page ( self , app , dossier_plfss2018 ) : [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] ) [EOL] [EOL] def test_authenticated_user_is_not_redirected_to_login_page ( self , app , dossier_plfss2018 , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] class TestOnboarding : [EOL] def test_new_user_must_enter_their_name_on_the_welcome_page ( self , app ) : [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . models import DBSession , User [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user is None [EOL] [EOL] token = generate_auth_token ( ) [EOL] [EOL] repository . set_auth_token ( [string] , token ) [EOL] [EOL] resp = app . get ( [string] , params = { [string] : token } ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . location == [string] ) [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user . name is None [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . form [ [string] ] . value == [string] [comment] [EOL] [EOL] resp . form [ [string] ] = [string] [EOL] resp . form . submit ( ) [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user . name == [string] [EOL] [EOL] def test_new_user_without_name_get_an_error ( self , app ) : [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . models import DBSession , User [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user is None [EOL] [EOL] token = generate_auth_token ( ) [EOL] [EOL] repository . set_auth_token ( [string] , token ) [EOL] [EOL] resp = app . get ( [string] , params = { [string] : token } ) [EOL] assert resp . status_code == [number] [EOL] assert ( resp . location == [string] ) [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user . name is None [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . form [ [string] ] . value == [string] [comment] [EOL] [EOL] resp . form [ [string] ] = [string] [EOL] resp = resp . form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] resp = resp . follow ( ) [EOL] assert [string] in resp . text [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) [EOL] assert user . name is None [EOL] [EOL] def test_user_with_name_can_edit_it ( self , app , user_david ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] assert resp . form [ [string] ] . value == [string] [EOL] resp . form [ [string] ] = [string] [EOL] resp . form . submit ( ) [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = user_david . email ) . first ( ) [EOL] assert user . name == [string] [EOL] [EOL] def test_admin_with_name_can_edit_it ( self , app , user_sgg ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert resp . status_code == [number] [EOL] assert resp . form [ [string] ] . value == [string] [EOL] resp . form [ [string] ] = [string] [EOL] resp . form . submit ( ) [EOL] [EOL] user = DBSession . query ( User ) . filter_by ( email = user_sgg . email ) . first ( ) [EOL] assert user . name == [string] [EOL] [EOL] def test_user_with_a_name_skips_the_welcome_page ( self , app , user_david ) : [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] assert user_david . name == [string] [EOL] [EOL] token = generate_auth_token ( ) [EOL] [EOL] repository . set_auth_token ( user_david . email , token ) [EOL] [EOL] resp = app . get ( [string] , params = { [string] : token } ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] [EOL] class TestAuthTokenExpiration : [EOL] def test_can_get_auth_token_before_expiration ( self , auth_token ) : [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] assert repository . get_auth_token_data ( auth_token ) is not None [EOL] [EOL] def test_cannot_get_auth_token_after_expiration ( self , settings , auth_token ) : [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] initial_time = datetime . now ( tz = timezone . utc ) [EOL] expiration_delay = int ( settings [ [string] ] ) [EOL] with freeze_time ( initial_time + timedelta ( seconds = expiration_delay + [number] ) ) : [EOL] assert repository . get_auth_token_data ( auth_token ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.set$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.set$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] class TestLectureMenuActions : [EOL] @ pytest . fixture def menu_actions ( self , app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] return [ elem . text ( ) . strip ( ) for elem in resp . parser . css ( [string] ) ] [EOL] [EOL] def test_user_can_see_dossier_de_banc ( self , menu_actions ) : [EOL] assert [string] in menu_actions [EOL] [EOL] def test_user_can_see_options_avancees ( self , menu_actions ) : [EOL] assert [string] in menu_actions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_lecture_progress_status ( app , lecture_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( lecture_an ) [EOL] lecture_an . set_fetch_progress ( [number] , [number] ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . json == { [string] : [number] , [string] : [number] } [EOL] [EOL] [EOL] def test_lecture_no_progress_status ( app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . json == { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestMenuAction : [EOL] def test_admin_can_see_menu_action ( self , app , user_sgg ) : [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] menu_actions = [ elem . text ( ) . strip ( ) for elem in resp . parser . css ( [string] ) ] [EOL] assert [string] in menu_actions [EOL] [EOL] def test_regular_user_cannot_see_menu_action ( self , app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] menu_actions = [ elem . text ( ) . strip ( ) for elem in resp . parser . css ( [string] ) ] [EOL] assert [string] not in menu_actions [EOL] [EOL] [EOL] def test_get_form ( app , user_sgg , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] dossier_plfss2018 . team . users . append ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] assert len ( resp . forms ) == [number] [EOL] form = resp . forms [ [number] ] [EOL] assert form . method == [string] [EOL] assert form . action == [string] [EOL] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == str ( user_david . pk ) [EOL] assert form . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_form_not_kicking_itself ( app , user_sgg , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] dossier_plfss2018 . team . users . append ( user_sgg ) [EOL] dossier_plfss2018 . team . users . append ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . forms ) == [number] [EOL] [EOL] [EOL] def test_get_form_not_admin ( app , user_sgg , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] dossier_plfss2018 . team . users . append ( user_david ) [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_form ( app , user_sgg , user_david , dossier_plfss2018 , mailer ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] dossier_plfss2018 . team . users . append ( user_david ) [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert ( [string] in resp . text ) [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_home_redirects_to_dossiers ( app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] class TestWhitelistList : [EOL] def test_only_accessible_to_admin ( self , app , user_sgg ) : [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession [EOL] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] [EOL] [EOL] def test_not_accessible_to_regular_user ( self , app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] [EOL] class TestWhitelistAdd : [EOL] def test_create ( self , app , user_sgg ) : [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession [EOL] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] form = resp . form [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] [EOL] assert resp . parser . css ( [string] ) [ [number] ] . text ( ) . strip ( ) == [string] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . events ) == [number] [EOL] assert user_sgg . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] def test_not_possible_to_regular_user ( self , app , user_david ) : [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession [EOL] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] [EOL] resp = app . post ( [string] , { [string] : [string] } , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] [EOL] [EOL] class TestWhitelistDelete : [EOL] def test_delete ( self , app , user_sgg ) : [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession [EOL] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] existing_pattern = DBSession . query ( AllowedEmailPattern ) . first ( ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] form = resp . form [EOL] form [ [string] ] = existing_pattern . pk [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . events ) == [number] [EOL] assert user_sgg . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] def test_not_possible_to_regular_user ( self , app , user_david ) : [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession [EOL] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL] existing_pattern = DBSession . query ( AllowedEmailPattern ) . first ( ) [EOL] [EOL] resp = app . post ( [string] , { [string] : existing_pattern . pk } , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] assert DBSession . query ( AllowedEmailPattern ) . count ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] import re [EOL] from pathlib import Path [EOL] [EOL] import responses [EOL] import transaction [EOL] from webtest . forms import Select [EOL] [EOL] HERE = Path ( __file__ ) [EOL] SAMPLE_DATA_DIR = HERE . parent . parent / [string] [EOL] FETCH_SAMPLE_DATA_DIR = HERE . parent . parent / [string] / [string] [EOL] [EOL] [EOL] def read_sample_data ( basename ) : [EOL] return ( FETCH_SAMPLE_DATA_DIR / basename ) . read_text ( ) [EOL] [EOL] [EOL] def read_sample_data_bytes ( basename ) : [EOL] return ( FETCH_SAMPLE_DATA_DIR / basename ) . read_bytes ( ) [EOL] [EOL] [EOL] def test_get_form ( app , user_sgg , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] dossier_plfss2018 . team = None [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert form . action == [string] [EOL] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] ] [EOL] [EOL] assert isinstance ( form . fields [ [string] ] [ [number] ] , Select ) [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] assert form . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_form_non_sgg_user ( app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_form_does_not_propose_dossiers_with_teams ( app , user_sgg , dossier_plfss2018 ) : [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] form = resp . forms [ [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) ] [EOL] [EOL] [EOL] class TestPostForm : [EOL] @ responses . activate def test_plfss_2018_an ( self , app , user_sgg , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Dossier , Lecture , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . teams ) == [number] [EOL] [EOL] assert not DBSession . query ( Lecture ) . all ( ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , ( [string] [string] ) , body = read_sample_data_bytes ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , json = json . loads ( read_sample_data_bytes ( [string] ) ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( FETCH_SAMPLE_DATA_DIR / [string] / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] dossier_plfss2018 . team = None [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] user_sgg = DBSession . query ( User ) . filter ( User . pk == user_sgg . pk ) . one ( ) [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . slug == [string] ) . one ( ) ) [EOL] assert len ( user_sgg . teams ) == [number] [EOL] assert dossier_plfss2018 . team in user_sgg . teams [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] assert ( dossier_plfss2018 . events [ [number] ] . render_summary ( ) == [string] ) [EOL] assert ( dossier_plfss2018 . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] lecture = Lecture . get ( chambre = Chambre . AN , session_or_legislature = [string] , num_texte = [number] , partie = None , organe = [string] , ) [EOL] [EOL] assert lecture . chambre == Chambre . AN [EOL] assert lecture . titre == [string] [EOL] assert lecture . dossier . titre == [string] [EOL] result = ( [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] [comment] [EOL] assert len ( lecture . events ) == [number] [EOL] assert lecture . events [ [number] ] . render_summary ( ) == [string] [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture . articles } == { [string] , [string] , [string] , [string] , [string] , } [EOL] [EOL] [comment] [EOL] assert [ amdt . num for amdt in lecture . amendements ] == [ [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] @ responses . activate def test_plfss_2018_an_using_fallback ( self , app , user_sgg , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Dossier , Lecture , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_sgg ) [EOL] assert len ( user_sgg . teams ) == [number] [EOL] [EOL] assert not DBSession . query ( Lecture ) . all ( ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = read_sample_data ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , re . compile ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , re . compile ( [string] ) , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , ( [string] [string] ) , body = read_sample_data_bytes ( [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , json = json . loads ( read_sample_data_bytes ( [string] ) ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( FETCH_SAMPLE_DATA_DIR / [string] / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] [EOL] with transaction . manager : [EOL] dossier_plfss2018 . team = None [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] user_sgg = DBSession . query ( User ) . filter ( User . pk == user_sgg . pk ) . one ( ) [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . slug == [string] ) . one ( ) ) [EOL] assert len ( user_sgg . teams ) == [number] [EOL] assert dossier_plfss2018 . team in user_sgg . teams [EOL] assert len ( dossier_plfss2018 . events ) == [number] [EOL] assert ( dossier_plfss2018 . events [ [number] ] . render_summary ( ) == [string] ) [EOL] assert ( dossier_plfss2018 . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] lecture = Lecture . get ( chambre = Chambre . AN , session_or_legislature = [string] , num_texte = [number] , partie = None , organe = [string] , ) [EOL] [EOL] assert lecture . chambre == Chambre . AN [EOL] assert lecture . titre == [string] [EOL] assert lecture . dossier . titre == [string] [EOL] result = ( [string] [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] [comment] [EOL] assert len ( lecture . events ) == [number] [EOL] assert lecture . events [ [number] ] . render_summary ( ) == [string] [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture . articles } == { [string] , [string] , [string] , [string] , [string] , } [EOL] [EOL] [comment] [EOL] assert [ amdt . num for amdt in lecture . amendements ] == [ [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] @ responses . activate def test_plfss_2019_senat ( self , app , user_sgg , dossier_plfss2019 ) : [EOL] from zam_repondeur . models import Chambre , DBSession , Lecture [EOL] [EOL] assert not DBSession . query ( Lecture ) . all ( ) [EOL] [EOL] responses . add ( responses . GET , [string] , body = ( FETCH_SAMPLE_DATA_DIR / [string] / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( FETCH_SAMPLE_DATA_DIR / [string] / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( SAMPLE_DATA_DIR / [string] ) . read_text ( [string] , [string] ) , status = [number] , ) [EOL] responses . add ( responses . GET , [string] , body = ( FETCH_SAMPLE_DATA_DIR / [string] / [string] ) . read_bytes ( ) , status = [number] , ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] lecture = Lecture . get ( chambre = Chambre . SENAT , session_or_legislature = [string] , num_texte = [number] , partie = None , organe = [string] , ) [EOL] assert lecture . chambre == Chambre . SENAT [EOL] assert lecture . titre == [string] [EOL] assert lecture . dossier . titre == [string] [EOL] result = ( [string] ) [EOL] assert str ( lecture ) == result [EOL] [EOL] [comment] [EOL] assert len ( lecture . events ) == [number] [EOL] assert lecture . events [ [number] ] . render_summary ( ) == [string] [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] assert ( lecture . events [ [number] ] . render_summary ( ) == [string] ) [EOL] [EOL] [comment] [EOL] assert { article . num for article in lecture . articles } == { [string] , [string] , [string] } [EOL] [EOL] [comment] [EOL] assert [ amdt . num for amdt in lecture . amendements ] == [ [number] , [number] ] [EOL] [EOL] @ responses . activate def test_plfss_2018_an_dossier_already_activated ( self , app , dossier_plfss2018 , lecture_an , user_sgg ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] [comment] [EOL] resp = app . post ( [string] , { [string] : [string] } , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] assert len ( lecture_an . events ) == [number] [EOL] [EOL] @ responses . activate def test_plfss_2018_an_dossier_unknown ( self , app , dossier_plfss2018 , lecture_an , user_sgg ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] [comment] [EOL] resp = app . post ( [string] , { [string] : [string] } , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] assert len ( lecture_an . events ) == [number] [EOL] [EOL] @ responses . activate def test_plfss_2018_an_dossier_empty ( self , app , dossier_plfss2018 , lecture_an , user_sgg ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] [comment] [EOL] resp = app . post ( [string] , { [string] : [string] } , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] assert len ( lecture_an . events ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_get_amendements ( app , lecture_an_url , amendements_an , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_no_amendements ( app , lecture_an_url , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_get_amendements_order_default ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) for node in resp . parser . css ( [string] ) ] == [ [string] , [string] , ] [EOL] headers_rows_length = [number] [EOL] assert [ [string] . join ( node . text ( ) . strip ( ) . split ( ) ) for node in resp . parser . css ( [string] ) ] [ headers_rows_length : ] == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_get_amendements_order_abandoned_last ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . position = None [EOL] amendements_an [ [number] ] . sort = [string] [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] headers_rows_length = [number] [EOL] assert [ [string] . join ( node . text ( ) . strip ( ) . split ( ) ) for node in resp . parser . css ( [string] ) ] [ headers_rows_length : ] == [ [string] , ( [string] [string] ) , [string] , ] [EOL] [EOL] [EOL] def test_get_amendements_order_with_missing_position ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . position = None [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] headers_rows_length = [number] [EOL] assert [ [string] . join ( node . text ( ) . strip ( ) . split ( ) ) for node in resp . parser . css ( [string] ) ] [ headers_rows_length : ] == [ [string] , ( [string] [string] ) , [string] , ] [EOL] [EOL] [EOL] def test_get_amendements_order_with_abandoned_next_do_not_display_limit_derouleur ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . sort = [string] [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] headers_rows_length = [number] [EOL] assert [ [string] . join ( node . text ( ) . strip ( ) . split ( ) ) for node in resp . parser . css ( [string] ) ] [ headers_rows_length : ] == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_get_amendements_not_found_bad_format ( app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , expect_errors = True , ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_get_amendements_not_found_does_not_exist ( app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , expect_errors = True , ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_get_amendements_columns_default ( app , lecture_an_url , amendements_an , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) . split ( ) for node in resp . parser . css ( [string] ) if node . text ( ) . strip ( ) . split ( ) ] == [ [ [string] , [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] ] , ] [EOL] options = resp . parser . css ( [string] ) [EOL] assert [string] in options [ [number] ] . attributes [EOL] [EOL] [EOL] def test_get_amendements_columns_too_many_amendements ( app , settings , article1_an , lecture_an , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = int ( settings [ [string] ] ) [EOL] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) . split ( ) for node in resp . parser . css ( [string] ) if node . text ( ) . strip ( ) . split ( ) ] == [ [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] ] , ] [EOL] options = resp . parser . css ( [string] ) [EOL] assert [string] in options [ [number] ] . attributes [EOL] [EOL] [EOL] def test_get_amendements_columns_not_default_article ( app , lecture_an_url , amendements_an , article7bis_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , params = { [string] : [string] } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) . split ( ) for node in resp . parser . css ( [string] ) if node . text ( ) . strip ( ) . split ( ) ] == [ [ [string] , [string] , [string] , [string] , [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] ] , ] [EOL] options = resp . parser . css ( [string] ) [EOL] assert [string] not in options [ [number] ] . attributes [EOL] assert [string] not in options [ [number] ] . attributes [EOL] assert [string] in options [ [number] ] . attributes [EOL] [EOL] [EOL] def test_get_amendements_columns_missions_for_plf2 ( app , amendements_plf2018_an_premiere_lecture_seance_publique_2 , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) . split ( ) for node in resp . parser . css ( [string] ) if node . text ( ) . strip ( ) . split ( ) ] == [ [ [string] , [string] , [string] ] , [ [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] ] , ] [EOL] [EOL] [EOL] def test_get_amendements_missions_title_for_plf2 ( app , amendements_plf2018_an_premiere_lecture_seance_publique_2 , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [ node . text ( ) . strip ( ) for node in resp . parser . css ( [string] ) ] == [ [string] , [string] , ] [EOL]	
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_amendement_start_editing ( app , lecture_an_url , amendements_an_batch , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 = amendements_an_batch [ [number] ] [EOL] amendement_999 = amendements_an_batch [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement_666 ) [EOL] user_david_table_an . add_amendement ( amendement_999 ) [EOL] [EOL] assert not amendement_666 . is_being_edited [EOL] assert not amendement_999 . is_being_edited [EOL] [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement_666 . num } [string] " , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] amendement_666 = DBSession . query ( Amendement ) . get ( amendement_666 . pk ) [EOL] assert amendement_666 . is_being_edited [EOL] assert amendement_999 . is_being_edited [EOL] [EOL] [EOL] def test_amendement_stop_editing ( app , lecture_an_url , amendements_an_batch , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement_666 = amendements_an_batch [ [number] ] [EOL] amendement_999 = amendements_an_batch [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement_666 ) [EOL] user_david_table_an . add_amendement ( amendement_999 ) [EOL] [EOL] assert not amendement_666 . is_being_edited [EOL] assert not amendement_999 . is_being_edited [EOL] [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement_666 . num } [string] " , user = user_david , ) [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement_666 . num } [string] " , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] amendement_666 = DBSession . query ( Amendement ) . get ( amendement_666 . pk ) [EOL] amendement_999 = DBSession . query ( Amendement ) . get ( amendement_999 . pk ) [EOL] assert not amendement_666 . is_being_edited [EOL] assert not amendement_999 . is_being_edited [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_post_article_edit_form_title ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . article import TitreArticleModifie [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [EOL] assert len ( amendement . article . events ) == [number] [EOL] event = amendement . article . events [ [number] ] [EOL] assert isinstance ( event , TitreArticleModifie ) [EOL] assert event . created_at is not None [EOL] assert event . user . email == [string] [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . render_summary ( ) == ( [string] ) [EOL] assert event . render_details ( ) == [string] [EOL] [EOL] [EOL] def test_post_article_edit_form_presentation ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . article import PresentationArticleModifiee [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = [string] [EOL] resp = form . submit ( ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . one ( ) [EOL] [EOL] assert len ( amendement . article . events ) == [number] [EOL] event = amendement . article . events [ [number] ] [EOL] assert isinstance ( event , PresentationArticleModifiee ) [EOL] assert event . created_at is not None [EOL] assert event . user . email == [string] [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . data [ [string] ] == [string] [EOL] assert event . render_summary ( ) == ( [string] ) [EOL] assert event . render_details ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] def first_description_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) . strip ( ) [EOL] [EOL] [EOL] def test_whitelist_add ( app , user_sgg , user_david ) : [EOL] from zam_repondeur . models . events . whitelist import WhitelistAdd [EOL] [EOL] with transaction . manager : [EOL] WhitelistAdd . create ( email_pattern = [string] , comment = None , request = DummyRequest ( remote_addr = [string] , user = user_sgg ) , ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert first_description_text ( resp ) == ( [string] ) [EOL] [EOL] [EOL] def test_whitelist_remove ( app , user_sgg , whitelist ) : [EOL] from zam_repondeur . models . events . whitelist import WhitelistRemove [EOL] [EOL] with transaction . manager : [EOL] WhitelistRemove . create ( allowed_email_pattern = whitelist , request = DummyRequest ( remote_addr = [string] , user = user_sgg ) , ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert first_description_text ( resp ) == ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_search_amendement ( app , lecture_an_url , amendements_an , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , params = { [string] : amendements_an [ [number] ] . num } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . json == { [string] : ( [string] [string] [string] ) } [EOL] [EOL] [EOL] def test_search_amendement_too_many ( app , settings , lecture_an , article1_an , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = int ( settings [ [string] ] ) [EOL] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , params = { [string] : amendements_an [ [number] ] . num } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . json == { [string] : ( [string] [string] [string] ) } [EOL] [EOL] [EOL] def test_search_amendement_with_reponse ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendement . user_content . avis = [string] [EOL] amendement . user_content . reponse = [string] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , params = { [string] : amendements_an [ [number] ] . num } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] assert resp . json == { [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] [string] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] class TestListArticles : [EOL] def test_articles_are_sorted ( self , app , article1_an , article1av_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article1av_an [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] titles = [ node . text ( ) . strip ( ) for node in resp . parser . css ( [string] ) ] [EOL] assert titles == [ [string] , [string] ] [EOL] [EOL] def test_uppercase_roman_numbers_are_preserved ( self , app , chapitre_1er_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] titles = [ node . text ( ) . strip ( ) for node in resp . parser . css ( [string] ) ] [EOL] assert titles == [ [string] ] [EOL] [EOL] def test_link_to_articles_list ( self , app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] link = resp . parser . css_first ( [string] ) . attributes . get ( [string] ) [EOL] assert link == ( [string] [string] [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_team_member_can_see_owned_dossier ( app , lecture_an , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] [EOL] [EOL] def test_sgg_member_can_see_all_dossiers ( app , lecture_an , user_sgg ) : [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] [EOL] [EOL] def test_non_team_member_cannot_see_their_dossier ( app , lecture_an , user_ronan ) : [EOL] resp = app . get ( [string] , user = user_ronan ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] assert len ( resp . parser . css ( [string] ) ) == [number] [EOL] [EOL] assert [string] in resp . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Type , Any , Dict [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import transaction [EOL] from webtest import Upload [EOL] from webtest . forms import File [EOL] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def test_get_form ( app , user_david ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] assert resp . forms [ [string] ] . method == [string] [EOL] assert resp . forms [ [string] ] . action == ( [string] [string] [string] [string] ) [EOL] [EOL] assert list ( resp . forms [ [string] ] . fields . keys ( ) ) == [ [string] , [string] ] [EOL] [EOL] assert isinstance ( resp . forms [ [string] ] . fields [ [string] ] [ [number] ] , File ) [EOL] assert resp . forms [ [string] ] . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] , [string] ) class TestPostForm : [EOL] def _get_upload_form ( self , app , user , headers = None ) : [EOL] return app . get ( [string] , user = user , headers = headers , ) . forms [ [string] ] [EOL] [EOL] def _upload_backup ( self , app , filename , user , team = None ) : [EOL] headers = { [string] : team . name } if team is not None else None [EOL] form = self . _get_upload_form ( app , user = user , headers = headers ) [EOL] path = Path ( __file__ ) . parent . parent / [string] / filename [EOL] form [ [string] ] = Upload ( [string] , path . read_bytes ( ) ) [EOL] return form . submit ( user = user , headers = headers ) [EOL] [EOL] def test_upload_redirects_to_index ( self , app , user_david , lecture_an_url ) : [EOL] resp = self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] def test_upload_success_message ( self , app , user_david ) : [EOL] resp = self . _upload_backup ( app , [string] , user_david ) . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] def test_upload_success_event ( self , app , user_david , lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) . follow ( ) [EOL] [EOL] DBSession . add ( lecture_an ) [EOL] assert len ( lecture_an . events ) == [number] [EOL] assert lecture_an . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] def test_upload_updates_user_content ( self , app , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import ( AvisAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . avis is None [EOL] assert amendement . user_content . objet is None [EOL] assert amendement . user_content . reponse is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . avis == [string] [EOL] assert [string] in amendement . user_content . objet [EOL] assert [string] not in amendement . user_content . objet [EOL] [EOL] assert [string] in amendement . user_content . reponse [EOL] assert [string] not in amendement . user_content . reponse [EOL] [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert AvisAmendementModifie in events [EOL] assert ObjetAmendementModifie in events [EOL] assert ReponseAmendementModifiee in events [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . objet . startswith ( [string] ) [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert ObjetAmendementModifie in events [EOL] [EOL] def test_upload_does_not_update_position ( self , app , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . position == [number] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . position == [number] [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . position == [number] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . position == [number] [EOL] [EOL] def test_upload_backup_with_comments ( self , app , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import CommentsAmendementModifie [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . comments == [string] [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert CommentsAmendementModifie in events [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . user_content . comments is None [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert CommentsAmendementModifie not in events [EOL] [EOL] def test_upload_backup_with_affectation_to_unknown_user_without_team ( self , app , user_david , team_zam ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table . user . email == [string] [EOL] assert amendement . location . user_table . user . name == [string] [EOL] assert amendement . location . user_table . user . teams [ [number] ] . pk == team_zam . pk [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert AmendementTransfere in events [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert AmendementTransfere not in events [EOL] [EOL] def test_upload_backup_with_affectation_to_unknown_user_with_team ( self , app , lecture_an , user_david , team_zam ) : [EOL] from zam_repondeur . models import Amendement , DBSession , User [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] user_melodie = ( DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) ) [EOL] assert user_melodie is None [EOL] assert [string] not in { user . email for user in team_zam . users } [EOL] [EOL] self . _upload_backup ( app , [string] , user = user_david , team = team_zam ) [EOL] [EOL] DBSession . add ( team_zam ) [EOL] DBSession . refresh ( team_zam ) [EOL] [EOL] [comment] [EOL] user_melodie = ( DBSession . query ( User ) . filter_by ( email = [string] ) . first ( ) ) [EOL] assert user_melodie is not None [EOL] assert user_melodie . email == [string] [EOL] assert user_melodie . name == [string] [EOL] [EOL] [comment] [EOL] assert [string] in { user . email for user in team_zam . users } [EOL] assert user_melodie . teams == [ team_zam ] [EOL] [EOL] [comment] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table . user is user_melodie [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert AmendementTransfere in events [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] events = { type ( event ) : event for event in amendement . events } [EOL] assert AmendementTransfere not in events [EOL] [EOL] def test_upload_updates_affectation ( self , app , lecture_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( [ user_david , user_ronan ] ) [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) ) [EOL] amendement . location . user_table = user_david . table_for ( lecture_an ) [EOL] [EOL] assert amendement . location . user_table . user . email == [string] [EOL] assert amendement . location . user_table . user . name == [string] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table . user . email == [string] [EOL] assert ( amendement . location . user_table . user . name == [string] ) [comment] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . user_table is None [EOL] [EOL] def test_upload_affectation_box_new ( self , app , lecture_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementTransfere ) for event in amendement . events ) [EOL] transfer_event = next ( event for event in amendement . events if isinstance ( event , AmendementTransfere ) ) [EOL] assert str ( transfer_event . user ) == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] def test_upload_affectation_box_existing_not_updated ( self , app , lecture_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession , SharedTable [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( [ user_david ] ) [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) ) [EOL] shared_table = SharedTable . create ( lecture = lecture_an , titre = [string] ) [EOL] shared_table . add_amendement ( amendement ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] [comment] [EOL] assert not any ( event for event in amendement . events if isinstance ( event , AmendementTransfere ) ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] def test_upload_affectation_box_existing_updated ( self , app , lecture_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession , SharedTable [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( [ user_david ] ) [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) ) [EOL] shared_table = SharedTable . create ( lecture = lecture_an , titre = [string] ) [EOL] shared_table . add_amendement ( amendement ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementTransfere ) for event in amendement . events ) [EOL] transfer_event = next ( event for event in amendement . events if isinstance ( event , AmendementTransfere ) ) [EOL] assert str ( transfer_event . user ) == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] def test_upload_affectation_box_from_user ( self , app , lecture_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] from zam_repondeur . models . events . amendement import AmendementTransfere [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( [ user_david , user_ronan ] ) [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) ) [EOL] amendement . location . user_table = user_ronan . table_for ( lecture_an ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . location . user_table is not None [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] self . _upload_backup ( app , [string] , user_david ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table . titre == [string] [EOL] [EOL] [comment] [EOL] assert any ( isinstance ( event , AmendementTransfere ) for event in amendement . events ) [EOL] transfer_event = next ( event for event in amendement . events if isinstance ( event , AmendementTransfere ) ) [EOL] assert str ( transfer_event . user ) == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . data [ [string] ] == [string] [EOL] assert transfer_event . render_summary ( ) == ( [string] [string] [string] ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . location . shared_table is None [EOL] [EOL] def test_upload_backup_with_articles ( self , app , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] resp = self . _upload_backup ( app , [string] , user_david ) . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . text ) [EOL] [EOL] amendement = DBSession . query ( Amendement ) . filter ( Amendement . num == [number] ) . first ( ) [EOL] assert amendement . article . user_content . title == [string] [EOL] assert amendement . article . user_content . presentation == [string] [EOL] [EOL] def test_upload_response_for_unknown_amendement ( self , app , user_david ) : [EOL] resp = self . _upload_backup ( app , [string] , user_david ) . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . text ) [EOL] [EOL] def test_upload_missing_file ( self , app , user_david ) : [EOL] form = self . _get_upload_form ( app , user_david ) [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( [string] [string] [string] [string] ) [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_form_from_export ( app , lecture_an , lecture_an_url , article1_an , tmpdir , user_david ) : [EOL] from zam_repondeur . models import Amendement , Article , DBSession [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] [EOL] filename = str ( tmpdir . join ( [string] ) ) [EOL] [EOL] with transaction . manager : [EOL] article1_an . user_content . title = [string] [EOL] article1_an . user_content . presentation = [string] [EOL] [ Amendement . create ( lecture = lecture_an , article = article1_an , num = num , position = position , avis = [string] , objet = [string] , reponse = [string] , comments = [string] , ) for position , num in enumerate ( ( [number] , [number] ) , [number] ) ] [EOL] counter = export_json ( lecture_an , filename , request = { } ) [EOL] [EOL] assert counter [ [string] ] == [number] [EOL] assert counter [ [string] ] == [number] [EOL] [EOL] with transaction . manager : [EOL] article1_an . user_content . title = [string] [EOL] article1_an . user_content . presentation = [string] [EOL] [EOL] form = app . get ( [string] , user = user_david ) . forms [ [string] ] [EOL] form [ [string] ] = Upload ( [string] , Path ( filename ) . read_bytes ( ) ) [EOL] [EOL] resp = form . submit ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] [EOL] resp = resp . follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . text ) [EOL] [EOL] article = DBSession . query ( Article ) . filter ( Article . num == [string] ) . first ( ) [EOL] assert article . user_content . title == [string] [EOL] assert article . user_content . presentation == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,unknown]]$ 0 $typing.Optional[typing.Dict[builtins.str,unknown]]$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,unknown]]$ 0 $typing.Optional[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_amendements_not_identiques ( app , lecture_an_url , amendements_an , user_david ) : [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] amendements = resp . parser . css ( [string] ) [EOL] assert len ( amendements ) == [number] [EOL] [EOL] identiques = resp . parser . css ( [string] ) [EOL] assert len ( identiques ) == [number] [EOL] [EOL] [EOL] def test_amendements_identiques ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendements_an [ [number] ] . id_identique = [number] [EOL] amendements_an [ [number] ] . id_identique = [number] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] assert amendements_an [ [number] ] . identiques == [ amendements_an [ [number] ] ] [EOL] assert amendements_an [ [number] ] . identiques == [ amendements_an [ [number] ] ] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] amendements = resp . parser . css ( [string] ) [EOL] assert len ( amendements ) == [number] [EOL] [EOL] identiques = resp . parser . css ( [string] ) [EOL] assert len ( identiques ) == [number] [EOL] [EOL] assert [string] in identiques [ [number] ] . attributes [ [string] ] [EOL] assert [string] not in identiques [ [number] ] . attributes [ [string] ] [EOL] assert [string] not in identiques [ [number] ] . attributes [ [string] ] [EOL] assert [string] in identiques [ [number] ] . attributes [ [string] ] [EOL] [EOL] [EOL] def test_amendements_identiques_with_abandoned ( app , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] amendements_an [ [number] ] . id_identique = [number] [EOL] amendements_an [ [number] ] . id_identique = [number] [EOL] amendements_an [ [number] ] . sort = [string] [EOL] [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] [EOL] assert amendements_an [ [number] ] . is_abandoned [EOL] [EOL] assert amendements_an [ [number] ] . identiques == [ ] [EOL] assert amendements_an [ [number] ] . identiques == [ amendements_an [ [number] ] ] [EOL] [EOL] resp = app . get ( f"{ lecture_an_url } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] amendements = resp . parser . css ( [string] ) [EOL] assert len ( amendements ) == [number] [EOL] [EOL] identiques = resp . parser . css ( [string] ) [EOL] assert len ( identiques ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from textwrap import dedent [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def extra_whitelist ( db ) : [EOL] from zam_repondeur . models . users import AllowedEmailPattern [EOL] [EOL] with transaction . manager : [EOL] AllowedEmailPattern . create ( pattern = [string] ) [EOL] [EOL] [EOL] def test_menu_action ( app , user_david , dossier_plfss2018 ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] menu_actions = [ elem . text ( ) . strip ( ) for elem in resp . parser . css ( [string] ) ] [EOL] assert [string] in menu_actions [EOL] [EOL] [EOL] def test_get_form ( app , user_david , dossier_plfss2018 ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] [comment] [EOL] form = resp . forms [ [number] ] [EOL] assert form . method == [string] [EOL] assert form . action == [string] [EOL] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . attrs [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_form_user_not_in_dossier_team ( app , user_ronan , dossier_plfss2018 ) : [EOL] resp = app . get ( [string] , user = user_ronan ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == [string] [EOL] [EOL] resp = resp . maybe_follow ( ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_form ( app , user_david , dossier_plfss2018 , mailer ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( mailer . outbox ) == [number] [EOL] assert mailer . outbox [ [number] ] . recipients == [ [string] ] [EOL] assert ( mailer . outbox [ [number] ] . subject == [string] ) [EOL] assert mailer . outbox [ [number] ] . body == dedent ( [string] ) [EOL] [EOL] [EOL] def test_post_form_existing_user ( app , user_david , user_ronan , dossier_plfss2018 , mailer ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan ) [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( mailer . outbox ) == [number] [EOL] assert mailer . outbox [ [number] ] . recipients == [ [string] ] [EOL] assert ( mailer . outbox [ [number] ] . subject == [string] ) [EOL] assert mailer . outbox [ [number] ] . body == dedent ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_post_form_invalid_address ( app , user_david , dossier_plfss2018 , email ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = email [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] assert ( f" [string] { email } [string] " [string] ) in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] [EOL] def test_post_form_xss_address ( app , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] [EOL] def test_post_form_already_invited ( app , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] for _ in range ( [number] ) : [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) . maybe_follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] [EOL] def test_post_form_whitelisted ( app , user_david , dossier_plfss2018 ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] [EOL] def test_post_form_multiple_invites ( app , user_david , dossier_plfss2018 , mailer ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( mailer . outbox ) == [number] [EOL] assert mailer . outbox [ [number] ] . sender == [string] [EOL] assert mailer . outbox [ [number] ] . extra_headers [ [string] ] == [string] [EOL] assert mailer . outbox [ [number] ] . recipients == [ [string] ] [EOL] assert ( mailer . outbox [ [number] ] . subject == [string] ) [EOL] assert mailer . outbox [ [number] ] . body == dedent ( [string] ) [EOL] assert mailer . outbox [ [number] ] . recipients == [ [string] ] [EOL] assert mailer . outbox [ [number] ] . sender == [string] [EOL] assert mailer . outbox [ [number] ] . extra_headers [ [string] ] == [string] [EOL] assert ( mailer . outbox [ [number] ] . subject == [string] ) [EOL] assert mailer . outbox [ [number] ] . body == dedent ( [string] ) [EOL] [EOL] [EOL] def test_post_form_multiple_invites_one_not_gouv ( app , user_david , dossier_plfss2018 , mailer ) : [EOL] from zam_repondeur . models import DBSession , Dossier [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( dossier_plfss2018 ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events == [ ] [EOL] [EOL] resp = app . get ( [string] , user = user_david ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [number] ] [EOL] form [ [string] ] = [string] [EOL] [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] resp = resp . follow ( ) [EOL] assert resp . status_code == [number] [EOL] [EOL] assert [string] in resp . text [EOL] [EOL] assert ( [string] [string] ) in resp . text [EOL] [EOL] dossier_plfss2018 = ( DBSession . query ( Dossier ) . filter ( Dossier . pk == dossier_plfss2018 . pk ) . one ( ) ) [EOL] assert len ( dossier_plfss2018 . team . users ) == [number] [EOL] assert dossier_plfss2018 . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] assert len ( mailer . outbox ) == [number] [EOL]	
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_amendement_start_editing ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] assert not amendement . is_being_edited [EOL] [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . get ( amendement . pk ) [EOL] assert amendement . is_being_edited [EOL] [EOL] [EOL] def test_amendement_stop_editing ( app , lecture_an_url , amendements_an , user_david , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] assert not amendement . is_being_edited [EOL] [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] resp = app . post_json ( f"{ lecture_an_url } [string] { amendement . num } [string] " , user = user_david ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert resp . content_type == [string] [EOL] [EOL] amendement = DBSession . query ( Amendement ) . get ( amendement . pk ) [EOL] assert not amendement . is_being_edited [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] from pyramid . testing import DummyRequest [EOL] [EOL] [EOL] def first_description_text ( resp ) : [EOL] return resp . parser . css_first ( [string] ) . text ( ) . strip ( ) [EOL] [EOL] [EOL] def test_admin_grant ( app , user_sgg , user_david ) : [EOL] from zam_repondeur . models . events . admin import AdminGrant [EOL] [EOL] with transaction . manager : [EOL] AdminGrant . create ( target = user_david , request = DummyRequest ( remote_addr = [string] , user = user_sgg ) , ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert first_description_text ( resp ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_admin_revoke ( app , user_sgg , user_david ) : [EOL] from zam_repondeur . models . events . admin import AdminRevoke [EOL] [EOL] with transaction . manager : [EOL] AdminRevoke . create ( target = user_david , request = DummyRequest ( remote_addr = [string] , user = user_sgg ) , ) [EOL] [EOL] resp = app . get ( [string] , user = user_sgg ) [EOL] assert first_description_text ( resp ) == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] @ pytest . fixture def user_david ( user_david ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david ) [EOL] [EOL] return user_david [EOL] [EOL] [EOL] @ pytest . fixture def user_ronan ( user_ronan , team_zam ) : [EOL] [docstring] [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan ) [EOL] user_ronan . teams . append ( team_zam ) [EOL] [EOL] return user_ronan [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements ( app , lecture_an , amendements_an , user_david ) : [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_with_shared_table ( app , lecture_an , amendements_an , user_david , user_ronan , shared_table_lecture_an ) : [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_index ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] , [string] : [number] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_me ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_shared_table ( app , lecture_an , amendements_an , user_david , user_ronan , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . location . shared_table = shared_table_lecture_an [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_including_me ( app , lecture_an , amendements_an , user_david , user_ronan , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : amendements_an } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_me_from_save ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] , [string] : [number] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert [string] == [string] . join ( resp . parser . css_first ( [string] ) . text ( ) . split ( ) ) [EOL] assert not resp . parser . css_first ( [string] ) [EOL] assert resp . parser . css_first ( [string] ) . attributes [ [string] ] == [string] [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_other ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] table_ronan . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] assert ( resp . parser . css_first ( [string] ) . attributes . get ( [string] ) == [string] ) [EOL] [EOL] form = resp . forms [ [string] ] [EOL] assert form . method == [string] [EOL] assert list ( form . fields . keys ( ) ) == [ [string] , [string] , [string] , [string] ] [EOL] assert form . fields [ [string] ] [ [number] ] . value == [string] [EOL] assert form . fields [ [string] ] [ [number] ] . options == [ ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , False , [string] ) , ] [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_other_active ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] table_ronan . add_amendement ( amendements_an [ [number] ] ) [EOL] user_ronan . record_activity ( ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] in resp . parser . css_first ( [string] ) . attributes [EOL] assert ( resp . parser . css_first ( [string] ) . attributes . get ( [string] ) == [string] ) [EOL] [EOL] [EOL] def test_lecture_get_transfer_amendements_from_edited_amendement ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] table_ronan . add_amendement ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] assert resp . status_code == [number] [EOL] assert ( [string] in resp . parser . css_first ( [string] ) . text ( ) ) [EOL] assert [string] not in resp . parser . css_first ( [string] ) . attributes [EOL] assert ( resp . parser . css_first ( [string] ) . attributes . get ( [string] ) == [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_me ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] [comment] [EOL] table = user_david . table_for ( lecture_an ) [EOL] assert len ( table . amendements ) == [number] [EOL] [EOL] amdt = amendements_an [ [number] ] [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amdt ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_david . email [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table . user . email == user_david . email [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . table_name == [string] [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_me_from_index ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] [comment] [EOL] table = user_david . table_for ( lecture_an ) [EOL] assert len ( table . amendements ) == [number] [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendement ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_david . email [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table . user . email == user_david . email [EOL] [EOL] [comment] [EOL] assert len ( amendement . events ) == [number] [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_index ( app , lecture_an , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] resp = resp . forms [ [string] ] . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement . table_name == [string] [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_index_from_index ( app , lecture_an , lecture_an_url , amendements_an , user_david ) : [EOL] from zam_repondeur . models import Amendement , DBSession , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] , [string] : [number] } , user = user_david , ) [EOL] resp = resp . forms [ [string] ] . submit ( [string] ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] user_david = DBSession . query ( User ) . filter ( User . email == user_david . email ) . first ( ) [EOL] table = user_david . table_for ( lecture_an ) [EOL] assert len ( table . amendements ) == [number] [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . num == amendements_an [ [number] ] . num ) . first ( ) ) [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_other ( app , lecture_an , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_ronan . email [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] user_david = DBSession . query ( User ) . filter ( User . email == user_david . email ) . first ( ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] assert len ( table_david . amendements ) == [number] [EOL] user_ronan = DBSession . query ( User ) . filter ( User . email == user_ronan . email ) . first ( ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] assert len ( table_ronan . amendements ) == [number] [EOL] assert table_ronan . amendements [ [number] ] . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_to_other_from_index ( app , lecture_an , lecture_an_url , amendements_an , user_david , user_ronan ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] , [string] : [number] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_ronan . email [EOL] resp = form . submit ( ) [EOL] assert resp . status_code == [number] [EOL] assert resp . location == f" [string] { lecture_an_url } [string] " [EOL] user_david = DBSession . query ( User ) . filter ( User . email == user_david . email ) . first ( ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] assert len ( table_david . amendements ) == [number] [EOL] user_ronan = DBSession . query ( User ) . filter ( User . email == user_ronan . email ) . first ( ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] assert len ( table_ronan . amendements ) == [number] [EOL] assert table_ronan . amendements [ [number] ] . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_void_to_shared_table ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = shared_table_lecture_an . slug [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert amendement . location . shared_table . pk == shared_table_lecture_an . pk [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement . table_name == [string] [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_me_to_shared_table ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_david = user_david . table_for ( lecture_an ) [EOL] table_david . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = shared_table_lecture_an . slug [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert amendement . location . shared_table . pk == shared_table_lecture_an . pk [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_other_to_shared_table ( app , lecture_an , amendements_an , user_david , user_ronan , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] table_ronan = user_ronan . table_for ( lecture_an ) [EOL] table_ronan . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = shared_table_lecture_an . slug [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert amendement . location . shared_table . pk == shared_table_lecture_an . pk [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_shared_table_to_void ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . location . shared_table = shared_table_lecture_an [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] resp = resp . forms [ [string] ] . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table is None [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_shared_table_to_me ( app , lecture_an , amendements_an , user_david , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . location . shared_table = shared_table_lecture_an [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_david . email [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table . user . email == user_david . email [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_shared_table_to_other ( app , lecture_an , amendements_an , user_david , user_ronan , shared_table_lecture_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( amendements_an [ [number] ] ) [EOL] amendements_an [ [number] ] . location . shared_table = shared_table_lecture_an [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_ronan . email [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table . user . email == user_ronan . email [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_lecture_post_transfer_amendements_from_void_to_noname_user ( app , lecture_an , amendements_an , user_david , team_zam ) : [EOL] from zam_repondeur . models import Amendement , DBSession , User [EOL] [EOL] with transaction . manager : [EOL] [comment] [EOL] user_noname = User . create ( email = [string] ) [EOL] user_noname . teams . append ( team_zam ) [EOL] DBSession . add ( user_noname ) [EOL] [EOL] resp = app . get ( [string] , { [string] : [ amendements_an [ [number] ] ] } , user = user_david , ) [EOL] form = resp . forms [ [string] ] [EOL] form [ [string] ] = user_noname . email [EOL] resp = form . submit ( [string] ) [EOL] [EOL] [comment] [EOL] assert resp . status_code == [number] [EOL] assert resp . location == ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] amendement = Amendement . get ( lecture_an , amendements_an [ [number] ] . num ) [EOL] [EOL] [comment] [EOL] assert amendement . location . user_table . pk == user_noname . pk [EOL] assert amendement . location . shared_table is None [EOL] assert amendement . events [ [number] ] . render_summary ( ) == ( [string] [string] ) [EOL] assert amendement . table_name == [string] [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from selenium . webdriver . common . keys import Keys [EOL] [EOL] from . helpers import extract_item_text [EOL] [EOL] [EOL] def test_filters_are_hidden_by_default ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] thead = driver . find_element_by_css_selector ( [string] ) [EOL] assert not thead . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_filters_are_opened_by_click ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] thead = driver . find_element_by_css_selector ( [string] ) [EOL] assert thead . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_filters_are_absent_without_amendements ( wsgi_server , driver , lecture_an_url , user_david ) : [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] assert driver . find_elements_by_css_selector ( [string] ) == [ ] [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] , [string] ] , ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ ] , ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] , ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] , ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] ) , ] , ) def test_column_filtering_by_value ( wsgi_server , driver , lecture_an , lecture_an_url , article7bis_an , amendements_an , user_david , user_david_table_an , column_index , selector , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add_all ( amendements_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == filtered [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] { user_david . email }" f" [string] { kind } [string] { input_text . replace ( [string] , [string] ) }" ) [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] , ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ] , ) def test_column_filtering_by_value_with_batches ( wsgi_server , driver , lecture_an , lecture_an_url , article7bis_an , amendements_an , user_david_table_an , user_david , column_index , selector , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , Batch , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] batch = Batch . create ( ) [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == filtered [EOL] assert ( driver . current_url == f"{ lecture_an_url } [string] { user_david . email } [string] { kind } [string] { input_text }" ) [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] ) ] , ) def test_column_filtering_by_checkbox ( wsgi_server , driver , lecture_an , lecture_an_url , article7bis_an , amendements_an , user_david_table_an , user_david , column_index , selector , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] , auteur = [string] , ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] label = driver . find_element_by_css_selector ( f" [string] { column_index } [string] { kind } [string] " ) [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == filtered [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email } [string] { kind } [string] " [EOL] [EOL] [comment] [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email }" [EOL] [EOL] [comment] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email } [string] { kind } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == filtered [EOL] label = driver . find_element_by_css_selector ( f" [string] { column_index } [string] { kind } [string] " ) [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_item_text ( selector , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email }" [EOL]	
from typing import Any [EOL] import typing [EOL] from selenium . common . exceptions import NoSuchElementException [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . services . users import repository [EOL] [EOL] [EOL] def find_header_by_index ( index , headers ) : [EOL] return headers . find_element_by_css_selector ( f" [string] { index } [string] " ) [EOL] [EOL] [EOL] def extract_column_text ( index , trs ) : [EOL] texts = [ ] [EOL] for tr in trs : [EOL] td = tr . find_element_by_css_selector ( f" [string] { index } [string] " ) [EOL] text = td . text [EOL] if not text : [EOL] [comment] [EOL] try : [EOL] text = td . find_element_by_tag_name ( [string] ) . get_attribute ( [string] ) [EOL] except NoSuchElementException : [EOL] pass [EOL] texts . append ( text ) [EOL] return texts [EOL] [EOL] [EOL] def extract_item_text ( selector , trs ) : [EOL] return [ item . find_element_by_css_selector ( selector ) . text for item in trs ] [EOL] [EOL] [EOL] def login ( driver , base_url , email ) : [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] [EOL] [comment] [EOL] token = generate_auth_token ( ) [EOL] repository . set_auth_token ( email , token ) [EOL] driver . get ( f"{ base_url } [string] { token }" ) [EOL] [EOL] [comment] [EOL] welcome_url = f"{ base_url } [string] " [EOL] if not driver . current_url . startswith ( welcome_url ) : [EOL] return [comment] [EOL] assert ( driver . find_element_by_css_selector ( [string] ) . text == [string] ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] wait . until ( lambda driver : not driver . current_url . startswith ( welcome_url ) ) [EOL] [EOL] [EOL] def logout ( driver , base_url , email ) : [EOL] logout_url = f"{ base_url } [string] " [EOL] driver . get ( logout_url ) [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] wait . until ( lambda driver : not driver . current_url . startswith ( logout_url ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from selenium . webdriver . support import expected_conditions as EC [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] pytestmark = pytest . mark . flaky ( max_runs = [number] ) [EOL] [EOL] [EOL] def test_group_actions_not_visible_by_default ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert not batch_amendements . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_are_visible_by_selection ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert not batch_amendements . is_displayed ( ) [EOL] [EOL] [EOL] def test_batch_amendements_are_visible_with_at_least_two_selections ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert batch_amendements . is_displayed ( ) [EOL] [EOL] [EOL] def test_batch_amendements_is_hidden_when_selected_amendements_have_different_articles ( wsgi_server , driver , lecture_an , article7bis_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert not batch_amendements . is_displayed ( ) [EOL] [EOL] [EOL] def test_batch_amendements_is_hidden_when_selected_amendements_have_different_missions ( wsgi_server , driver , lecture_an , article1_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] mission1_titre = [string] [EOL] amendements_an [ [number] ] . mission_titre = amendements_an [ [number] ] . mission_titre = mission1_titre [EOL] [EOL] mission2_titre = [string] [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , mission_titre = mission2_titre , num = [number] , ) [EOL] [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert not batch_amendements . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_are_made_invisible_by_unselection ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_button_urls_change_with_selection ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] find = driver . find_element_by_css_selector [EOL] [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] WebDriverWait ( driver , [number] ) . until ( EC . visibility_of ( find ( [string] ) ) ) [EOL] [EOL] assert find ( [string] ) . is_displayed ( ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] assert not find ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_button_urls_change_on_the_fly ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] find = driver . find_element_by_css_selector [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] [EOL] [comment] [EOL] input_field = find ( [string] ) [EOL] input_field . send_keys ( [string] ) [EOL] [comment] [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] transfer_link = find ( [string] ) [EOL] assert ( transfer_link . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] transfer_link . click ( ) [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] " f" [string] { lecture_an . dossier . url_key }" f" [string] { lecture_an . url_key } [string] " f" [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] from time import sleep [EOL] [EOL] import transaction [EOL] from selenium . webdriver . common . keys import Keys [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] [EOL] def test_amendements_search ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] url = f"{ lecture_an_url } [string] " [EOL] driver . get ( url ) [EOL] input_field = driver . find_element_by_css_selector ( [string] ) [EOL] input_field . send_keys ( [string] ) [comment] [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] wait . until ( lambda driver : driver . current_url != url ) [EOL] filter_url = driver . current_url [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f"{ amendements_an [ [number] ] . num }{ Keys . ENTER }" ) [EOL] wait . until ( lambda driver : driver . current_url != filter_url ) [EOL] assert driver . current_url == f"{ url } [string] " [EOL] [EOL] [EOL] def test_amendements_search_too_many ( wsgi_server , settings , driver , lecture_an , article1_an , lecture_an_url , amendements_an , ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = int ( settings [ [string] ] ) [EOL] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] url = f"{ lecture_an_url } [string] " [EOL] driver . get ( url ) [EOL] input_field = driver . find_element_by_css_selector ( [string] ) [EOL] input_field . send_keys ( [string] ) [comment] [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] wait . until ( lambda driver : driver . current_url != url ) [EOL] filter_url = driver . current_url [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f"{ amendements_an [ [number] ] . num }{ Keys . ENTER }" ) [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] wait . until ( lambda driver : driver . current_url != filter_url ) [EOL] assert driver . current_url == f"{ url } [string] " [EOL] [EOL] [EOL] def test_amendements_search_not_found ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] assert not driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] input_field = driver . find_element_by_css_selector ( [string] ) [EOL] input_field . send_keys ( [string] ) [comment] [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f" [string] { Keys . ENTER }" ) [EOL] sleep ( [number] ) [comment] [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] def test_select_all_not_visible_by_default ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] assert not all_selected . is_displayed ( ) [EOL] [EOL] [EOL] def test_select_all_is_visible_with_filters ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] assert all_selected . is_displayed ( ) [EOL] [EOL] [EOL] def test_select_all_toggle_group_actions ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] all_selected . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_select_all_change_transfer_url ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] transfer_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert ( transfer_amendements . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] , ) def test_select_all_checks_only_visible_amendements ( wsgi_server , driver , lecture_an , lecture_an_url , article7bis_an , amendements_an , user_david , user_david_table_an , column_index , input_text , expected_nums , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add_all ( amendements_an ) [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article7bis_an , num = [number] ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email }" ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] transfer_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert ( transfer_amendements . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { expected_nums }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_create_batch_from_table ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email } [string] " ) [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] batch_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert batch_amendements . is_displayed ( ) [EOL] batch_amendements . click ( ) [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] submit_button = driver . find_element_by_css_selector ( [string] ) [EOL] submit_button . click ( ) [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email } [string] " [EOL] [EOL] with transaction . manager : [EOL] amendements = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements [ [number] ] . location . batch . pk == amendements [ [number] ] . location . batch . pk == [number] [EOL] [EOL] [EOL] def test_dissociate_batch_from_amendement_edit ( wsgi_server , driver , lecture_an , amendements_an_batch , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an_batch [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an_batch [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an_batch [ [number] ] } [string] " ) [EOL] dissociate_button = driver . find_element_by_css_selector ( [string] ) [EOL] dissociate_button . click ( ) [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email } [string] " [EOL] [EOL] with transaction . manager : [EOL] amendements = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements [ [number] ] . location . batch is None [EOL] assert amendements [ [number] ] . location . batch is None [EOL] [EOL] [EOL] def test_transfer_batch_from_table ( wsgi_server , driver , lecture_an , amendements_an_batch , lecture_an_url , user_david , user_david_table_an , ) : [EOL] from zam_repondeur . models import DBSession , User [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an_batch [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an_batch [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { user_david . email } [string] " ) [EOL] checkbox = driver . find_element_by_css_selector ( [string] ) [EOL] checkbox . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] transfer_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert transfer_amendements . is_displayed ( ) [EOL] transfer_amendements . click ( ) [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] " f" [string] { lecture_an . dossier . url_key }" [string] ) [EOL] submit_button = driver . find_element_by_css_selector ( [string] ) [EOL] submit_button . click ( ) [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { user_david . email } [string] " [EOL] [EOL] with transaction . manager : [EOL] user = DBSession . query ( User ) . filter ( User . email == user_david . email ) . first ( ) [EOL] table = user . table_for ( lecture_an ) [EOL] assert table . amendements == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_visionneuse_article ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . find_element_by_css_selector ( [string] ) . text == [string] [EOL] [EOL] [EOL] def test_visionneuse_articles ( wsgi_server , driver , lecture_an_url , article7bis_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . find_element_by_css_selector ( [string] ) . text == [string] [EOL] assert articles [ [number] ] . find_element_by_css_selector ( [string] ) . text == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from selenium . webdriver . common . keys import Keys [EOL] [EOL] from . helpers import extract_column_text [EOL] [EOL] [EOL] def test_filters_are_visible_by_default ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] thead = driver . find_element_by_css_selector ( [string] ) [EOL] assert thead . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_filters_are_always_visible ( wsgi_server , driver , lecture_an_url ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] thead = driver . find_element_by_css_selector ( [string] ) [EOL] assert thead . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_number_of_amendements_is_displayed ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( trs ) == [number] [EOL] counter = driver . find_element_by_css_selector ( [string] ) [EOL] assert counter . text == [string] [EOL] [EOL] [EOL] def test_number_of_amendements_is_displayed_too_many_amendements ( wsgi_server , driver , settings , article1_an , lecture_an , lecture_an_url , amendements_an , ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = int ( settings [ [string] ] ) [EOL] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( trs ) == [number] [EOL] counter = driver . find_element_by_css_selector ( [string] ) [EOL] assert counter . text == [string] [EOL] [EOL] [EOL] def test_number_of_amendements_is_displayed_with_limit_derouleur ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . position = None [EOL] for amendement in amendements_an : [EOL] amendement . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( trs ) == [number] [EOL] counter = driver . find_element_by_css_selector ( [string] ) [EOL] assert counter . text == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] , [string] ] ) , ] , ) def test_column_filtering_by_value ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , user_ronan_table_an , user_daniel_table_an , column_index , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( user_daniel_table_an ) [EOL] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] user_daniel_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] assert ( driver . current_url == f"{ lecture_an_url } [string] { kind } [string] { input_text . replace ( [string] , [string] ) }" ) [EOL] [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [comment] [EOL] driver . get ( f"{ lecture_an_url } [string] { kind } [string] { input_text }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ ] ) , ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ ] ) , ] , ) def test_column_filtering_by_value_when_empty_results ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , user_ronan_table_an , user_daniel_table_an , column_index , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( user_daniel_table_an ) [EOL] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] user_daniel_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] empty_message = driver . find_element_by_css_selector ( [string] ) [EOL] assert empty_message . is_displayed ( ) [EOL] [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] assert not empty_message . is_displayed ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ] , ) def test_column_filtering_by_value_with_shared_tables ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , shared_table_lecture_an , column_index , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( shared_table_lecture_an ) [EOL] [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] shared_table_lecture_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] assert ( driver . current_url == f"{ lecture_an_url } [string] { kind } [string] { input_text . replace ( [string] , [string] ) }" ) [EOL] [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [comment] [EOL] driver . get ( f"{ lecture_an_url } [string] { kind } [string] { input_text }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [string] , [ [string] , [string] ] , [ [string] ] ) , ] , ) def test_column_filtering_by_value_with_batches ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , user_ronan_table_an , user_daniel_table_an , column_index , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , Batch , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( user_daniel_table_an ) [EOL] [EOL] batch = Batch . create ( ) [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] amendements_an [ [number] ] . location . batch = batch [EOL] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] ) [EOL] user_daniel_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { kind } [string] { input_text }" [EOL] [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [comment] [EOL] driver . get ( f"{ lecture_an_url } [string] { kind } [string] { input_text }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] ) , ( [string] , [string] , [ [string] , [string] , [string] ] , [ [string] , [string] ] ) , ( [string] , [string] , [ [string] , [string] , [string] ] , [ [string] , [string] ] ) , ] , ) def test_column_filtering_by_checkbox ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , column_index , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] , position = [number] , auteur = [string] , ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] label = driver . find_element_by_css_selector ( f" [string] { column_index } [string] { kind } [string] " ) [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] assert driver . current_url == f"{ lecture_an_url } [string] { kind } [string] " [EOL] [EOL] [comment] [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [comment] [EOL] driver . get ( f"{ lecture_an_url } [string] { kind } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] label = driver . find_element_by_css_selector ( f" [string] { column_index } [string] { kind } [string] " ) [EOL] label . click ( ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , ) , ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] , ) , ( [string] , [string] , [string] , [ [string] , [string] , [string] ] , [ [string] ] ) , ] , ) def test_column_filtering_by_value_for_missions ( wsgi_server , driver , lecture_plf2018_an_premiere_lecture_seance_publique_2 , article1_plf2018_an_premiere_lecture_seance_publique_2 , amendements_plf2018_an_premiere_lecture_seance_publique_2 , column_index , input_text , kind , initial , filtered , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] LECTURE_URL = ( f"{ wsgi_server . application_url }" f" [string] " f"{ lecture_plf2018_an_premiere_lecture_seance_publique_2 . dossier . url_key } [string] " f" [string] { lecture_plf2018_an_premiere_lecture_seance_publique_2 . url_key }" ) [EOL] with transaction . manager : [EOL] amendement = Amendement . create ( lecture = lecture_plf2018_an_premiere_lecture_seance_publique_2 , article = article1_plf2018_an_premiere_lecture_seance_publique_2 , num = [number] , position = [number] , mission_titre = [string] , mission_titre_court = [string] , ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] driver . get ( f"{ LECTURE_URL } [string] " ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] assert ( driver . current_url == f"{ LECTURE_URL } [string] { kind } [string] { input_text . replace ( [string] , [string] ) }" ) [EOL] [EOL] [comment] [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ LECTURE_URL } [string] " [EOL] [EOL] [comment] [EOL] driver . get ( f"{ LECTURE_URL } [string] { kind } [string] { input_text }" ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == filtered [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( Keys . BACKSPACE * len ( input_text ) ) [EOL] trs = driver . find_elements_by_css_selector ( f" [string] { kind } [string] " ) [EOL] assert extract_column_text ( column_index , trs ) == initial [EOL] assert driver . current_url == f"{ LECTURE_URL } [string] " [EOL]	
from typing import Any [EOL] import typing [EOL] from time import sleep [EOL] [EOL] import transaction [EOL] from selenium . webdriver . common . keys import Keys [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] [EOL] def test_visionneuse_articles_search ( wsgi_server , driver , lecture_an_url , article7bis_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . article = article7bis_an [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . find_element_by_css_selector ( [string] ) . text == [string] [EOL] assert articles [ [number] ] . is_displayed ( ) [EOL] assert articles [ [number] ] . find_element_by_css_selector ( [string] ) . text == [string] [EOL] assert articles [ [number] ] . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f" [string] { Keys . ENTER }" ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . is_displayed ( ) [EOL] assert not articles [ [number] ] . is_displayed ( ) [EOL] [EOL] [EOL] def test_visionneuse_articles_search_not_found ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . is_displayed ( ) [EOL] assert not driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f" [string] { Keys . ENTER }" ) [EOL] articles = driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( articles ) == [number] [EOL] assert articles [ [number] ] . is_displayed ( ) [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_visionneuse_amendements_search ( wsgi_server , driver , lecture_an_url , article7bis_an , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] url = f"{ lecture_an_url } [string] " [EOL] driver . get ( url ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f"{ amendements_an [ [number] ] . num }{ Keys . ENTER }" ) [EOL] wait = WebDriverWait ( driver , [number] ) [EOL] wait . until ( lambda driver : driver . current_url != url ) [EOL] assert driver . current_url == f"{ url } [string] " [EOL] [EOL] [EOL] def test_visionneuse_amendements_search_not_found ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] assert not driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] driver . find_element_by_link_text ( [string] ) . click ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . send_keys ( f" [string] { Keys . ENTER }" ) [EOL] sleep ( [number] ) [comment] [EOL] assert driver . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] from selenium . webdriver . support import expected_conditions as EC [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] pytestmark = pytest . mark . flaky ( max_runs = [number] ) [EOL] [EOL] [EOL] def test_visionneuse_detail_amendement ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . auteur = [string] [EOL] amendements_an [ [number] ] . groupe = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] [EOL] article = driver . find_element_by_css_selector ( [string] ) [EOL] header = article . find_element_by_css_selector ( [string] ) [EOL] assert header . find_element_by_css_selector ( [string] ) . text == [string] [EOL] assert ( header . find_element_by_css_selector ( [string] ) . text == [string] ) [EOL] assert header . find_element_by_css_selector ( [string] ) . text == [string] [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_visionneuse_detail_amendement_reponse ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] [EOL] article = driver . find_element_by_css_selector ( [string] ) [EOL] header = article . find_element_by_css_selector ( [string] ) [EOL] header . find_element_by_link_text ( [string] ) . click ( ) [EOL] assert article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] assert [string] in article . find_element_by_css_selector ( [string] ) . text [EOL] article . find_element_by_css_selector ( [string] ) . find_element_by_link_text ( [string] ) . click ( ) [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_visionneuse_detail_amendement_texte ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . corps = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] [EOL] article = driver . find_element_by_css_selector ( [string] ) [EOL] header = article . find_element_by_css_selector ( [string] ) [EOL] [EOL] [comment] [EOL] header . find_element_by_link_text ( [string] ) . click ( ) [EOL] WebDriverWait ( driver , [number] ) . until ( EC . visibility_of ( article . find_element_by_css_selector ( [string] ) ) ) [EOL] assert [string] in article . find_element_by_css_selector ( [string] ) . text [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] [EOL] [comment] [EOL] button = article . find_element_by_css_selector ( [string] ) . find_element_by_link_text ( [string] ) [EOL] assert button . is_displayed ( ) [EOL] button . click ( ) [EOL] WebDriverWait ( driver , [number] ) . until ( EC . invisibility_of_element ( article . find_element_by_css_selector ( [string] ) ) ) [EOL] [EOL] [EOL] def test_visionneuse_detail_amendement_reponse_then_texte ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . user_content . avis = [string] [EOL] amendements_an [ [number] ] . user_content . reponse = [string] [EOL] amendements_an [ [number] ] . user_content . objet = [string] [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] [EOL] article = driver . find_element_by_css_selector ( [string] ) [EOL] header = article . find_element_by_css_selector ( [string] ) [EOL] header . find_element_by_link_text ( [string] ) . click ( ) [EOL] assert article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] header . find_element_by_link_text ( [string] ) . click ( ) [EOL] assert not article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL] assert article . find_element_by_css_selector ( [string] ) . is_displayed ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import platform [EOL] from textwrap import dedent [EOL] [EOL] import pyperclip [EOL] import pytest [EOL] from selenium . webdriver . common . keys import Keys [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( dedent ( [string] ) , dedent ( [string] ) , ) , ( [string] , dedent ( [string] ) , ) , ( ( [string] [string] ) , dedent ( [string] ) , ) , ( [string] , dedent ( [string] ) , ) , ( [string] , [string] ) , ] , ) def test_dossier_paste_emails ( wsgi_server , driver , dossier_an_url , copied , expected ) : [EOL] if driver . options ( ) . headless : [EOL] pytest . skip ( [string] ) [EOL] driver . get ( f"{ dossier_an_url } [string] " ) [EOL] emails_textarea = driver . find_element_by_css_selector ( [string] ) [EOL] assert emails_textarea . is_displayed ( ) [EOL] pyperclip . copy ( copied ) [EOL] if platform . system ( ) == [string] : [EOL] emails_textarea . send_keys ( Keys . COMMAND , [string] ) [comment] [EOL] else : [EOL] emails_textarea . send_keys ( Keys . CONTROL , [string] ) [EOL] assert emails_textarea . get_attribute ( [string] ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , dedent ( [string] ) , dedent ( [string] ) , ) , ( [string] , [string] , dedent ( [string] ) , ) , ] , ) def test_dossier_paste_emails_with_existing_content ( wsgi_server , driver , dossier_an_url , initial , copied , expected ) : [EOL] if driver . options ( ) . headless : [EOL] pytest . skip ( [string] ) [EOL] driver . get ( f"{ dossier_an_url } [string] " ) [EOL] emails_textarea = driver . find_element_by_css_selector ( [string] ) [EOL] assert emails_textarea . is_displayed ( ) [EOL] emails_textarea . send_keys ( initial ) [EOL] pyperclip . copy ( copied ) [EOL] if platform . system ( ) == [string] : [EOL] emails_textarea . send_keys ( Keys . COMMAND , [string] ) [comment] [EOL] else : [EOL] emails_textarea . send_keys ( Keys . CONTROL , [string] ) [EOL] assert emails_textarea . get_attribute ( [string] ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import transaction [EOL] [EOL] [EOL] def test_group_actions_not_visible_by_default ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_are_visible_by_selection ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_are_made_invisible_by_unselection ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_button_urls_change_with_selection ( wsgi_server , driver , lecture_an_url , amendements_an , article1_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] find = driver . find_element_by_css_selector [EOL] [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert find ( [string] ) . is_displayed ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] assert not find ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_button_urls_change_with_selection_too_many_amendements ( wsgi_server , settings , driver , lecture_an , lecture_an_url , amendements_an , article1_an , ) : [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] nb_amendements = int ( settings [ [string] ] ) [EOL] [EOL] with transaction . manager : [EOL] for i in range ( nb_amendements ) : [EOL] Amendement . create ( lecture = lecture_an , article = article1_an , num = i + [number] ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] find = driver . find_element_by_css_selector [EOL] [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert find ( [string] ) . is_displayed ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key } [string] " ) [EOL] [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key }" ) [EOL] assert ( find ( [string] ) . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { article1_an . url_key }" ) [EOL] [EOL] assert not find ( [string] ) . is_displayed ( ) [EOL] [EOL] [EOL] def test_group_actions_button_urls_change_on_the_fly ( wsgi_server , driver , lecture_an , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] find = driver . find_element_by_css_selector [EOL] [EOL] [comment] [EOL] input_field = find ( [string] ) [EOL] input_field . send_keys ( [string] ) [EOL] [comment] [EOL] checkboxes = driver . find_elements_by_css_selector ( [string] ) [EOL] checkboxes [ [number] ] . click ( ) [EOL] [EOL] transfer_link = find ( [string] ) [EOL] assert ( transfer_link . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] transfer_link . click ( ) [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] " f" [string] { lecture_an . dossier . url_key }" f" [string] { lecture_an . url_key } [string] " ) [EOL]	
from typing import Any [EOL] import typing [EOL] from time import sleep [EOL] [EOL] import pytest [EOL] import transaction [EOL] [EOL] pytestmark = pytest . mark . flaky ( max_runs = [number] ) [EOL] [EOL] [EOL] def test_amendement_edit_notification_on_amendement_transfer ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] status = driver . find_element_by_css_selector ( [string] ) [EOL] assert not status . is_displayed ( ) [EOL] assert not status . text [EOL] [EOL] with transaction . manager : [EOL] amendements_an [ [number] ] . location . user_table = None [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] sleep ( wsgi_server . settings [ [string] ] ) [EOL] [EOL] assert status . is_displayed ( ) [EOL] assert status . text == ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] [EOL] def test_select_all_is_visible_by_default ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] assert all_selected . is_displayed ( ) [EOL] [EOL] [EOL] def test_select_all_toggle_group_actions ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert group_actions . is_displayed ( ) [EOL] all_selected . click ( ) [EOL] group_actions = driver . find_element_by_css_selector ( [string] ) [EOL] assert not group_actions . is_displayed ( ) [EOL] [EOL] [EOL] def test_select_all_change_transfer_url ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] transfer_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert ( transfer_amendements . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] , ) def test_select_all_checks_only_visible_amendements ( wsgi_server , driver , lecture_an , lecture_an_url , article1_an , amendements_an , user_david_table_an , user_ronan_table_an , user_daniel_table_an , column_index , input_text , expected_nums , ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( user_ronan_table_an ) [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( user_daniel_table_an ) [EOL] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] amendement = Amendement . create ( lecture = lecture_an , article = article1_an , num = [number] ) [EOL] user_daniel_table_an . add_amendement ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] input_field = driver . find_element_by_css_selector ( f" [string] { column_index } [string] " ) [EOL] input_field . send_keys ( input_text ) [EOL] all_selected = driver . find_element_by_css_selector ( [string] ) [EOL] all_selected . click ( ) [EOL] transfer_amendements = driver . find_element_by_css_selector ( [string] ) [EOL] assert ( transfer_amendements . get_attribute ( [string] ) == f"{ lecture_an_url } [string] { expected_nums }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_repondeur_does_not_contains_link_to_visionneuse ( wsgi_server , driver , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] menu_items = [ item . text for item in driver . find_elements_by_css_selector ( [string] ) ] [EOL] assert [string] in menu_items [EOL] [EOL] [EOL] def test_column_filtering_changes_edit_url_on_the_fly ( wsgi_server , driver , lecture_an , lecture_an_url , amendements_an ) : [EOL] driver . get ( f"{ lecture_an_url } [string] " ) [EOL] input_field = driver . find_element_by_css_selector ( [string] ) [EOL] input_field . send_keys ( [string] ) [EOL] assert driver . current_url == f"{ lecture_an_url } [string] " [EOL] see_td = driver . find_element_by_css_selector ( [string] ) [EOL] see_link = see_td . find_element_by_css_selector ( [string] ) [EOL] assert see_link . get_attribute ( [string] ) == f"{ lecture_an_url } [string] " [EOL] see_link . click ( ) [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] " f" [string] { lecture_an . dossier . url_key }" f" [string] { lecture_an . url_key } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from contextlib import contextmanager [EOL] [EOL] import pytest [EOL] from selenium import webdriver [EOL] from selenium . common . exceptions import WebDriverException [EOL] from webtest . http import StopableWSGIServer [EOL] [EOL] from . helpers import login [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ [string] , [string] ] ) def driver ( request , wsgi_server , user_david ) : [EOL] factory = driver_factory ( request . param ) [EOL] with factory ( ) as _driver : [EOL] try : [EOL] login ( _driver , wsgi_server . application_url , user_david . email ) [EOL] yield _driver [EOL] finally : [EOL] _driver . quit ( ) [EOL] [EOL] [EOL] def driver_factory ( name ) : [EOL] if name == [string] : [EOL] return firefox_driver [EOL] elif name == [string] : [EOL] return chrome_driver [EOL] [EOL] [EOL] @ contextmanager def firefox_driver ( ) : [EOL] try : [EOL] yield HeadlessFirefox ( ) [EOL] except WebDriverException as e : [EOL] if str ( e ) . startswith ( [string] ) : [EOL] pytest . skip ( [string] ) [EOL] else : [EOL] raise [EOL] [EOL] [EOL] @ contextmanager def chrome_driver ( ) : [EOL] try : [EOL] yield HeadlessChrome ( ) [EOL] except WebDriverException as e : [EOL] if str ( e ) . startswith ( [string] ) : [EOL] pytest . skip ( [string] ) [EOL] else : [EOL] raise [EOL] [EOL] [EOL] @ pytest . fixture def wsgi_server ( settings , db , mock_dossiers , mock_organes_acteurs , amendements_repository ) : [EOL] from zam_repondeur import make_app [EOL] [EOL] settings = { ** settings , [string] : False } [EOL] wsgi_app = make_app ( None , ** settings ) [EOL] server = StopableWSGIServer . create ( wsgi_app ) [EOL] server . settings = settings [EOL] yield server [EOL] server . shutdown ( ) [EOL] [EOL] [EOL] class HeadlessFirefox ( webdriver . Firefox ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( options = self . options ( ) ) [EOL] [EOL] @ staticmethod def options ( ) : [EOL] firefox_options = webdriver . firefox . options . Options ( ) [EOL] firefox_options . add_argument ( [string] ) [EOL] firefox_options . set_preference ( [string] , False ) [EOL] return firefox_options [EOL] [EOL] def get ( self , url ) : [EOL] [docstring] [EOL] if url == self . current_url : [EOL] self . refresh ( ) [EOL] else : [EOL] super ( ) . get ( url ) [EOL] [EOL] [EOL] class HeadlessChrome ( webdriver . Chrome ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( options = self . options ( ) ) [EOL] [EOL] @ staticmethod def options ( ) : [EOL] chrome_options = webdriver . chrome . options . Options ( ) [EOL] chrome_options . add_argument ( [string] ) [EOL] chrome_options . add_argument ( [string] ) [EOL] return chrome_options [EOL] [EOL] [EOL] @ pytest . fixture def dossier_an_url ( wsgi_server , lecture_an ) : [EOL] return f"{ wsgi_server . application_url } [string] { lecture_an . dossier . url_key }" [EOL] [EOL] [EOL] @ pytest . fixture def lecture_an_url ( wsgi_server , lecture_an , dossier_an_url ) : [EOL] return f"{ dossier_an_url } [string] { lecture_an . url_key }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] import pytest [EOL] import transaction [EOL] from selenium . common . exceptions import NoAlertPresentException [EOL] from selenium . webdriver . common . by import By [EOL] from selenium . webdriver . support import expected_conditions as EC [EOL] from selenium . webdriver . support . ui import Select , WebDriverWait [EOL] [EOL] [EOL] def test_amendement_edition_start_editing_status ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] assert not amendement . is_being_edited [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] avis = Select ( driver . find_element_by_css_selector ( [string] ) ) [EOL] avis . select_by_visible_text ( [string] ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] assert amendement . is_being_edited [EOL] [EOL] [EOL] def test_amendement_edition_exit_stop_editing_status ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] assert not amendement . is_being_edited [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] avis = Select ( driver . find_element_by_css_selector ( [string] ) ) [EOL] avis . select_by_visible_text ( [string] ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] assert amendement . is_being_edited [EOL] [EOL] exit_link = driver . find_element_by_css_selector ( [string] ) [EOL] exit_link . click ( ) [EOL] driver . switch_to . alert . accept ( ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] assert not amendement . is_being_edited [EOL] [EOL] [EOL] def test_amendement_edition_with_avis ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] avis = Select ( driver . find_element_by_css_selector ( [string] ) ) [EOL] avis . select_by_visible_text ( [string] ) [EOL] save_button = driver . find_element_by_css_selector ( [string] ) [EOL] save_button . click ( ) [EOL] [EOL] with pytest . raises ( NoAlertPresentException ) : [EOL] driver . switch_to . alert [EOL] [EOL] with transaction . manager : [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements_an [ [number] ] . user_content . avis == [string] [EOL] [EOL] [EOL] def test_amendement_edition_with_avis_and_reponse ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] avis = Select ( driver . find_element_by_css_selector ( [string] ) ) [EOL] avis . select_by_visible_text ( [string] ) [EOL] [EOL] driver . switch_to . frame ( [string] ) [EOL] WebDriverWait ( driver , [number] ) . until ( EC . element_to_be_clickable ( ( By . CSS_SELECTOR , [string] , ) ) ) . send_keys ( [string] ) [EOL] [EOL] driver . switch_to . default_content ( ) [EOL] save_button = driver . find_element_by_css_selector ( [string] ) [EOL] save_button . click ( ) [EOL] [EOL] with pytest . raises ( NoAlertPresentException ) : [EOL] driver . switch_to . alert [EOL] [EOL] with transaction . manager : [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements_an [ [number] ] . user_content . avis == [string] [EOL] assert amendements_an [ [number] ] . user_content . reponse == [string] [EOL] [EOL] [EOL] def test_amendement_edition_with_reponse_only_and_accept ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] [EOL] driver . switch_to . frame ( [string] ) [EOL] WebDriverWait ( driver , [number] ) . until ( EC . element_to_be_clickable ( ( By . CSS_SELECTOR , [string] , ) ) ) . send_keys ( [string] ) [EOL] [EOL] driver . switch_to . default_content ( ) [EOL] save_button = driver . find_element_by_css_selector ( [string] ) [EOL] save_button . click ( ) [EOL] driver . switch_to . alert . accept ( ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] with transaction . manager : [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements_an [ [number] ] . user_content . reponse == [string] [EOL] [EOL] assert driver . current_url == ( f"{ lecture_an_url } [string] " f" [string] { amendements_an [ [number] ] . num }" ) [EOL] [EOL] [EOL] def test_amendement_edition_with_reponse_only_and_deny ( wsgi_server , driver , lecture_an , amendements_an , lecture_an_url , user_david_table_an ) : [EOL] from zam_repondeur . models import Amendement , DBSession [EOL] [EOL] amendement = amendements_an [ [number] ] [EOL] with transaction . manager : [EOL] DBSession . add ( user_david_table_an ) [EOL] user_david_table_an . add_amendement ( amendement ) [EOL] DBSession . add ( amendement ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL] [EOL] driver . switch_to . frame ( [string] ) [EOL] WebDriverWait ( driver , [number] ) . until ( EC . element_to_be_clickable ( ( By . CSS_SELECTOR , [string] , ) ) ) . send_keys ( [string] ) [EOL] [EOL] driver . switch_to . default_content ( ) [EOL] save_button = driver . find_element_by_css_selector ( [string] ) [EOL] save_button . click ( ) [EOL] driver . switch_to . alert . dismiss ( ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] with transaction . manager : [EOL] amendements_an = DBSession . query ( Amendement ) . all ( ) [EOL] assert amendements_an [ [number] ] . user_content . reponse is None [EOL] [EOL] assert ( driver . current_url == f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import transaction [EOL] [EOL] pytestmark = pytest . mark . flaky ( max_runs = [number] ) [EOL] [EOL] [EOL] def test_transfer_amendements_switch_color_on_check_from_inactive_user ( wsgi_server , driver , users_repository , amendements_repository , team_zam , user_david , user_ronan , user_david_table_an , lecture_an_url , amendements_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( team_zam ) [EOL] team_zam . users . append ( user_ronan ) [EOL] DBSession . add ( user_david_table_an ) [EOL] [comment] [EOL] user_david_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num }" ) [EOL] [EOL] checkbox = driver . find_element_by_css_selector ( [string] ) [EOL] submit_button = driver . find_element_by_css_selector ( [string] ) [EOL] submit_index_button = driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] [comment] [EOL] assert checkbox . is_selected ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [EOL] def test_transfer_amendements_switch_color_on_check_from_edited_amendement ( wsgi_server , driver , users_repository , amendements_repository , team_zam , user_david , user_ronan , user_david_table_an , user_ronan_table_an , lecture_an_url , amendements_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( team_zam ) [EOL] team_zam . users . append ( user_ronan ) [EOL] user_ronan . record_activity ( ) [EOL] DBSession . add ( user_ronan_table_an ) [EOL] [comment] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [comment] [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] { amendements_an [ [number] ] . num }" ) [EOL] [EOL] checkbox = driver . find_element_by_css_selector ( [string] ) [EOL] submit_button = driver . find_element_by_css_selector ( [string] ) [EOL] submit_index_button = driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] [comment] [EOL] assert not checkbox . is_selected ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [EOL] def test_transfer_amendements_switch_color_on_check_from_edited_an_unedited_amendements ( wsgi_server , driver , users_repository , amendements_repository , team_zam , user_david , user_ronan , user_daniel , user_david_table_an , user_ronan_table_an , user_daniel_table_an , lecture_an_url , amendements_an , ) : [EOL] from zam_repondeur . models import DBSession [EOL] [EOL] with transaction . manager : [EOL] DBSession . add ( team_zam ) [EOL] team_zam . users . append ( user_ronan ) [EOL] team_zam . users . append ( user_daniel ) [EOL] user_ronan . record_activity ( ) [EOL] DBSession . add ( user_david_table_an ) [EOL] DBSession . add ( user_ronan_table_an ) [EOL] DBSession . add ( user_daniel_table_an ) [EOL] [comment] [EOL] user_ronan_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] [comment] [EOL] amendements_an [ [number] ] . start_editing ( ) [EOL] [comment] [EOL] user_daniel_table_an . add_amendement ( amendements_an [ [number] ] ) [EOL] DBSession . add_all ( amendements_an ) [EOL] [EOL] driver . get ( f"{ lecture_an_url } [string] " f" [string] { amendements_an [ [number] ] . num } [string] { amendements_an [ [number] ] . num }" ) [EOL] [EOL] checkbox_active , checkbox_inactive = driver . find_elements_by_css_selector ( [string] ) [EOL] submit_button = driver . find_element_by_css_selector ( [string] ) [EOL] submit_index_button = driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] [comment] [EOL] assert not checkbox_active . is_selected ( ) [EOL] [comment] [EOL] assert checkbox_inactive . is_selected ( ) [EOL] [comment] [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox_active . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox_inactive . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox_active . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL] [EOL] [comment] [EOL] checkbox_inactive . click ( ) [EOL] assert submit_button . get_attribute ( [string] ) == [string] [EOL] assert submit_index_button . get_attribute ( [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] from typing import Dict [EOL] [EOL] import pyramid_retry [EOL] import rollbar [EOL] from pyramid . config import Configurator [EOL] from rollbar . contrib . pyramid import EXCEPTION_BLACKLIST , EXCEPTION_WHITELIST [EOL] from rollbar . logger import RollbarHandler [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] settings = config . registry . settings [EOL] rollbar_settings = extract_settings ( settings , prefix = [string] ) [EOL] if [string] in rollbar_settings and [string] in rollbar_settings : [EOL] [EOL] [comment] [EOL] rollbar . contrib . pyramid . handle_error = handle_error [EOL] [EOL] [comment] [EOL] config . include ( [string] ) [EOL] [EOL] [comment] [EOL] setup_rollbar_log_handler ( rollbar_settings ) [EOL] [EOL] [EOL] def extract_settings ( settings , prefix ) : [EOL] prefix_length = len ( prefix ) [EOL] return { key [ prefix_length : ] : settings [ key ] for key in settings if key . startswith ( prefix ) } [EOL] [EOL] [EOL] def handle_error ( request , exception , exc_info ) : [comment] [EOL] if isinstance ( exception , EXCEPTION_BLACKLIST ) and not isinstance ( exception , EXCEPTION_WHITELIST ) : [EOL] return [EOL] if pyramid_retry . is_error_retryable ( request , exception ) : [EOL] logging . info ( [string] ) [EOL] return [EOL] rollbar . report_exc_info ( exc_info , request ) [EOL] [EOL] [EOL] def setup_rollbar_log_handler ( rollbar_settings ) : [EOL] [docstring] [EOL] rollbar . init ( ** rollbar_settings ) [EOL] [EOL] rollbar_handler = RollbarHandler ( ) [EOL] rollbar_handler . setLevel ( logging . ERROR ) [EOL] [EOL] root_logger = logging . getLogger ( ) [EOL] root_logger . addHandler ( rollbar_handler ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import NamedTuple [EOL] [EOL] [EOL] class Message ( NamedTuple ) : [EOL] cls = ... [EOL] text = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import time [EOL] from typing import Any [EOL] from urllib . parse import parse_qsl , urlencode , urlparse , urlunparse [EOL] [EOL] from webob . multidict import MultiDict [EOL] [EOL] from zam_repondeur . models import AVIS [EOL] [EOL] [EOL] def normalize_num ( num ) : [EOL] try : [EOL] num_int = int ( num ) [EOL] except ValueError : [EOL] num_int = int ( num . split ( [string] ) [ [number] ] . strip ( [string] ) ) [EOL] return num_int [EOL] [EOL] [EOL] def normalize_avis ( avis ) : [EOL] avis = avis . strip ( ) [EOL] avis_lower = avis . lower ( ) [EOL] if avis_lower in ( [string] , [string] ) : [EOL] avis = [string] [EOL] elif avis_lower in ( [string] , ) : [EOL] avis = [string] [EOL] elif avis_lower in ( [string] , ) : [EOL] avis = [string] [EOL] elif avis_lower in ( [string] , ) : [EOL] avis = [string] [EOL] if avis and avis not in AVIS : [EOL] pass [comment] [EOL] return avis [EOL] [EOL] [EOL] def normalize_reponse ( reponse , previous_reponse ) : [EOL] reponse = reponse . strip ( ) [EOL] if reponse . lower ( ) == [string] : [EOL] reponse = previous_reponse [EOL] return reponse [EOL] [EOL] [EOL] def add_url_fragment ( url , fragment ) : [EOL] scheme , netloc , path , params , query , _ = urlparse ( url ) [EOL] return urlunparse ( ( scheme , netloc , path , params , query , fragment ) ) [EOL] [EOL] [EOL] def add_url_params ( url , ** extra_params ) : [EOL] scheme , netloc , path , params , query , fragment = urlparse ( url ) [EOL] query_dict = MultiDict ( parse_qsl ( query ) ) [EOL] query_dict . update ( ** extra_params ) [EOL] query = urlencode ( query_dict ) [EOL] return urlunparse ( ( scheme , netloc , path , params , query , fragment ) ) [EOL] [EOL] [EOL] class Timer : [EOL] start_time = [number] [EOL] stop_time = [number] [EOL] [EOL] def start ( self ) : [EOL] self . start_time = time . monotonic ( ) [EOL] [EOL] def stop ( self ) : [EOL] self . stop_time = time . monotonic ( ) [EOL] [EOL] def __enter__ ( self ) : [EOL] self . start ( ) [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , tb ) : [EOL] self . stop ( ) [EOL] [EOL] def elapsed ( self ) : [EOL] return self . stop_time - self . start_time [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $"Timer"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import TypeVar , Any [EOL] import typing [EOL] from functools import wraps [EOL] from typing import Any , Callable , TypeVar , cast [EOL] [EOL] [EOL] class NotInitialized ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] F = TypeVar ( [string] , bound = Callable ) [EOL] [EOL] [EOL] def needs_init ( func ) : [EOL] [docstring] [EOL] [EOL] @ wraps ( func ) def wrapped ( self , * args , ** kwargs ) : [EOL] if not self . initialized : [EOL] raise NotInitialized [EOL] return func ( self , * args , ** kwargs ) [EOL] [EOL] return cast ( F , wrapped ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $F$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import pyramid [EOL] import hashlib [EOL] import typing [EOL] import builtins [EOL] from hashlib import sha256 [EOL] from typing import BinaryIO , Dict , cast [EOL] [EOL] from pyramid . config import Configurator [EOL] from pyramid . path import AssetResolver [EOL] from pyramid . path import PkgResourcesAssetDescriptor as AssetDescriptor [EOL] from pyramid . request import Request [EOL] from pyramid . static import QueryStringCacheBuster [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] config . add_static_view ( [string] , [string] , cache_max_age = [number] ) [EOL] config . add_cache_buster ( [string] , ContentHashCacheBuster ( package = [string] , base_path = [string] ) , ) [EOL] [EOL] [EOL] class ContentHashCacheBuster ( QueryStringCacheBuster ) : [EOL] def __init__ ( self , package , base_path , param = [string] ) : [EOL] super ( ) . __init__ ( param = param ) [EOL] self . asset_resolver = AssetResolver ( package ) [EOL] self . base_path = base_path [EOL] self . token_cache = { } [EOL] [EOL] def tokenize ( self , request , subpath , kw ) : [EOL] token = self . token_cache . get ( subpath ) [EOL] if token is None : [EOL] asset = self . _resolve_asset ( subpath ) [EOL] self . token_cache [ subpath ] = token = self . _hash_asset ( asset ) [EOL] return token [EOL] [EOL] def _resolve_asset ( self , subpath ) : [EOL] return self . asset_resolver . resolve ( self . base_path + subpath ) [EOL] [EOL] def _hash_asset ( self , asset ) : [EOL] hash_ = sha256 ( ) [EOL] with cast ( BinaryIO , asset . stream ( ) ) as stream : [EOL] for block in iter ( lambda : stream . read ( [number] ) , [string] ) : [EOL] hash_ . update ( block ) [EOL] return hash_ . hexdigest ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pyramid.request.Request$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.path.PkgResourcesAssetDescriptor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $pyramid.path.PkgResourcesAssetDescriptor$ 0 0 0 $hashlib._Hash$ 0 0 0 0 0 0 0 0 0 0 $pyramid.path.PkgResourcesAssetDescriptor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0
from typing import Iterator , Optional [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] from abc import ABC , abstractmethod [EOL] from typing import TYPE_CHECKING , Iterator , Optional [EOL] [EOL] from pyramid . config import Configurator [EOL] from pyramid . request import Request [EOL] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] from zam_repondeur . resources import Resource [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] config . add_request_method ( get_menu_actions , [string] ) [EOL] [EOL] [EOL] def get_menu_actions ( request ) : [EOL] for resource in request . context . self_and_parents : [EOL] for menu_action_class in resource . menu_actions : [EOL] yield menu_action_class ( request , resource ) [EOL] [EOL] [EOL] class MenuAction ( ABC ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , request , resource ) : [EOL] self . request = request [EOL] self . resource = resource [EOL] [EOL] @ property @ abstractmethod def title ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ property @ abstractmethod def url ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ property def should_show ( self ) : [EOL] return True [EOL] [EOL] [comment] [EOL] [comment] [EOL] tab_name = None [EOL] [EOL] [comment] [EOL] link_class = None [EOL] [EOL] [comment] [EOL] open_in_new_window = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator["MenuAction"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from slugify import slugify as _slugify [EOL] [EOL] STOPWORDS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def slugify ( text ) : [EOL] return _slugify ( text , stopwords = STOPWORDS ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
from typing import Dict [EOL] import typing [EOL] GROUPS_COLORS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] from typing import TYPE_CHECKING [EOL] [EOL] if TYPE_CHECKING : [EOL] [comment] [EOL] reify = property [EOL] else : [EOL] from pyramid . decorator import reify [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.property]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.property]$ 0 0
from typing import Iterator , Any , Optional , List , Union , Tuple , Type [EOL] import typing [EOL] import repondeur [EOL] import sqlalchemy [EOL] import builtins [EOL] import pyramid [EOL] import zam_repondeur [EOL] from itertools import chain [EOL] from typing import Any , Iterator , List , Optional , Tuple , Type , cast [EOL] [EOL] from pyramid . httpexceptions import HTTPNotFound [EOL] from pyramid . request import Request [EOL] from pyramid . security import Allow , Authenticated , Deny , Everyone [EOL] from sqlalchemy import desc [EOL] from sqlalchemy . orm import Query , joinedload , lazyload , subqueryload [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from zam_repondeur . decorator import reify [EOL] from zam_repondeur . menu import MenuAction [EOL] from zam_repondeur . models import ( AllowedEmailPattern , Amendement , Article , Chambre , DBSession , Dossier , Lecture , SharedTable , User , UserTable , ) [EOL] from zam_repondeur . models . events . admin import AdminEvent [EOL] from zam_repondeur . models . events . whitelist import WhitelistEvent [EOL] [EOL] [comment] [EOL] ACE = Tuple [ str , str , str ] [EOL] [EOL] [EOL] class ResourceNotFound ( HTTPNotFound ) : [EOL] pass [EOL] [EOL] [EOL] class Resource ( dict ) : [EOL] [docstring] [EOL] [EOL] __name__ = None [EOL] __parent__ = None [EOL] [EOL] def __init__ ( self , name , parent ) : [EOL] self . __name__ = name [EOL] self . __parent__ = parent [EOL] [EOL] @ property def parent ( self ) : [EOL] return self . __parent__ [EOL] [EOL] @ property def parents ( self ) : [EOL] parent = self . parent [EOL] while parent is not None : [EOL] yield parent [EOL] parent = parent . parent [EOL] [EOL] @ property def self_and_parents ( self ) : [EOL] return chain ( [ self ] , self . parents ) [EOL] [EOL] def add_child ( self , child ) : [EOL] self [ child . __name__ ] = child [EOL] [EOL] def breadcrumbs ( self , request ) : [EOL] resources = list ( reversed ( list ( self . parents ) ) ) [EOL] resources . append ( self ) [EOL] for resource in resources : [EOL] if resource . breadcrumbs_label is not None : [EOL] yield resource [EOL] [EOL] @ property def breadcrumbs_label ( self ) : [EOL] return None [EOL] [EOL] @ property def breadcrumbs_class ( self ) : [EOL] return [string] [EOL] [EOL] def back_url ( self , request ) : [EOL] [comment] [EOL] if getattr ( request , [string] ) : [EOL] return request . resource_url ( request . root . self_or_child ( ) ) [EOL] [EOL] [comment] [EOL] if request . view_name != [string] : [EOL] return request . resource_url ( self . self_or_child ( ) ) [EOL] [EOL] [comment] [EOL] resource = self . back_resource ( request ) [EOL] if resource is None : [EOL] return None [EOL] resource = resource . self_or_child ( ) [EOL] if resource is self : [EOL] return None [EOL] return request . resource_url ( resource ) [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . parent [EOL] [EOL] def self_or_child ( self ) : [EOL] resource = self [EOL] while resource . default_child is not None : [EOL] resource = resource . default_child [EOL] return resource [EOL] [EOL] @ property def default_child ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] @ property def menu_actions ( self ) : [EOL] return [ ] [EOL] [EOL] [EOL] class Root ( Resource ) : [EOL] __acl__ = [ ( Allow , Authenticated , [string] ) , ( Allow , [string] , [string] ) , ( Deny , Everyone , [string] ) , ] [EOL] [EOL] def __init__ ( self , _request ) : [EOL] self . add_child ( WhitelistCollection ( name = [string] , parent = self ) ) [EOL] self . add_child ( AdminsCollection ( name = [string] , parent = self ) ) [EOL] self . add_child ( DossierCollection ( name = [string] , parent = self ) ) [EOL] [EOL] @ property def default_child ( self ) : [EOL] return cast ( Resource , self [ [string] ] ) [EOL] [EOL] class ManageWhiteList ( MenuAction ) : [EOL] title = [string] [EOL] tab_name = [string] [EOL] [EOL] @ property def should_show ( self ) : [EOL] return self . request . has_permission ( [string] , self . resource [ [string] ] ) [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource [ [string] ] ) [EOL] [EOL] class ManageAdmins ( MenuAction ) : [EOL] title = [string] [EOL] tab_name = [string] [EOL] [EOL] @ property def should_show ( self ) : [EOL] return self . request . has_permission ( [string] , self . resource [ [string] ] ) [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource [ [string] ] ) [EOL] [EOL] class EditProfile ( MenuAction ) : [EOL] link_class = [string] [EOL] [EOL] @ property def title ( self ) : [EOL] return self . request . user . name or [string] [EOL] [EOL] @ property def should_show ( self ) : [EOL] return bool ( self . request . user . name ) [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . route_url ( [string] ) [EOL] [EOL] class Logout ( MenuAction ) : [EOL] title = [string] [EOL] link_class = [string] [EOL] [EOL] @ property def should_show ( self ) : [EOL] return self . request . user is not None [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . route_url ( [string] ) [EOL] [EOL] menu_actions = [ ManageWhiteList , ManageAdmins , EditProfile , Logout ] [EOL] [EOL] [EOL] class WhitelistCollection ( Resource ) : [EOL] __acl__ = [ ( Allow , [string] , [string] ) , ( Deny , Everyone , [string] ) ] [EOL] [EOL] def models ( self , * options ) : [EOL] result = DBSession . query ( AllowedEmailPattern ) . options ( * options ) [EOL] return result [EOL] [EOL] def events ( self ) : [EOL] return DBSession . query ( WhitelistEvent ) . order_by ( desc ( WhitelistEvent . created_at ) ) [EOL] [EOL] [EOL] class AdminsCollection ( Resource ) : [EOL] __acl__ = [ ( Allow , [string] , [string] ) , ( Deny , Everyone , [string] ) ] [EOL] [EOL] def models ( self ) : [EOL] result = DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) [EOL] return result [EOL] [EOL] def events ( self ) : [EOL] return DBSession . query ( AdminEvent ) . order_by ( desc ( AdminEvent . created_at ) ) [EOL] [EOL] [EOL] class DossierCollection ( Resource ) : [EOL] __acl__ = [ ( Allow , [string] , [string] ) , ( Deny , Everyone , [string] ) ] [EOL] [EOL] def models ( self , * options ) : [EOL] result = DBSession . query ( Dossier ) . options ( * options ) [EOL] return result [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] resource = DossierResource ( name = key , parent = self ) [EOL] try : [EOL] resource . model ( ) [EOL] except ResourceNotFound : [EOL] raise KeyError [EOL] return resource [EOL] [EOL] [EOL] class DossierResource ( Resource ) : [EOL] def __acl__ ( self ) : [EOL] [comment] [EOL] return [ ( Allow , [string] , [string] ) , ( Allow , f" [string] { self . dossier . team . pk }" , [string] ) , ( Deny , Authenticated , [string] ) , ( Allow , [string] , [string] ) , ( Deny , Authenticated , [string] ) , ( Allow , [string] , [string] ) , ( Deny , Everyone , [string] ) , ] [EOL] [EOL] def __init__ ( self , name , parent ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] self . slug = name [EOL] self . add_child ( LectureCollection ( name = [string] , parent = self ) ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( DossierCollection , self . __parent__ ) [EOL] [EOL] @ reify def dossier ( self ) : [EOL] return self . model ( subqueryload ( [string] ) . load_only ( [string] ) , lazyload ( [string] ) . options ( joinedload ( [string] ) , lazyload ( [string] ) . load_only ( [string] ) ) , ) [EOL] [EOL] def model ( self , * options ) : [EOL] dossier = Dossier . get ( self . slug , * options ) [EOL] if dossier is None : [EOL] raise ResourceNotFound ( self ) [EOL] return dossier [EOL] [EOL] breadcrumbs_class = [string] [EOL] [EOL] @ property def breadcrumbs_label ( self ) : [EOL] dossier = self . model ( ) [EOL] return dossier . titre [EOL] [EOL] class InviterAuDossier ( MenuAction ) : [EOL] title = [string] [EOL] tab_name = [string] [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource , [string] ) [EOL] [EOL] class RetirerAccesAuDossier ( MenuAction ) : [EOL] title = [string] [EOL] tab_name = [string] [EOL] [EOL] @ property def should_show ( self ) : [EOL] return self . request . has_permission ( [string] , self . resource ) [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource , [string] ) [EOL] [EOL] menu_actions = [ InviterAuDossier , RetirerAccesAuDossier ] [EOL] [EOL] [EOL] class LectureCollection ( Resource ) : [EOL] @ property def parent ( self ) : [EOL] return cast ( DossierResource , self . __parent__ ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] try : [EOL] chambre , session_or_legislature , num_texte , organe = key . split ( [string] ) [EOL] partie = ... [EOL] if [string] in num_texte : [EOL] num_texte , partie_str = num_texte . split ( [string] , [number] ) [EOL] partie = int ( partie_str ) [EOL] else : [EOL] partie = None [EOL] except ValueError : [EOL] raise KeyError [EOL] return LectureResource ( name = key , parent = self , chambre = chambre , session_or_legislature = session_or_legislature , num_texte = int ( num_texte ) , partie = partie , organe = organe , ) [EOL] [EOL] [EOL] class LectureResource ( Resource ) : [EOL] __acl__ = [ ( Allow , Authenticated , [string] ) , ( Deny , Everyone , [string] ) , ] [EOL] [EOL] def __init__ ( self , name , parent , chambre , session_or_legislature , num_texte , partie , organe , ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] self . chambre = Chambre . from_string ( chambre ) [EOL] self . session_or_legislature = session_or_legislature [EOL] self . num_texte = num_texte [EOL] self . partie = partie [EOL] self . organe = organe [EOL] self . add_child ( AmendementCollection ( name = [string] , parent = self ) ) [EOL] self . add_child ( ArticleCollection ( name = [string] , parent = self ) ) [EOL] self . add_child ( TableCollection ( name = [string] , parent = self ) ) [EOL] self . add_child ( SharedTableCollection ( name = [string] , parent = self ) ) [EOL] [EOL] @ property def default_child ( self ) : [EOL] return cast ( Resource , self [ [string] ] ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( LectureCollection , self . __parent__ ) [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . dossier_resource [EOL] [EOL] @ property def dossier_resource ( self ) : [EOL] return self . parent . parent [EOL] [EOL] @ reify def lecture ( self ) : [EOL] return self . model ( ) [EOL] [EOL] def model ( self , * options ) : [EOL] lecture = Lecture . get ( self . chambre , self . session_or_legislature , self . num_texte , self . partie , self . organe , * options , ) [EOL] if lecture is None : [EOL] raise ResourceNotFound ( self ) [EOL] return lecture [EOL] [EOL] @ property def breadcrumbs_label ( self ) : [EOL] lecture = self . model ( ) [EOL] return ( [string] . join ( [ lecture . format_num_lecture ( ) , lecture . format_chambre ( ) , lecture . format_organe ( ) , ] ) + lecture . format_partie ( ) ) [EOL] [EOL] class DossierDeBanc ( MenuAction ) : [EOL] title = [string] [EOL] open_in_new_window = True [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource [ [string] ] ) [EOL] [EOL] class OptionsAvancees ( MenuAction ) : [EOL] title = [string] [EOL] tab_name = [string] [EOL] [EOL] @ property def url ( self ) : [EOL] return self . request . resource_url ( self . resource , [string] ) [EOL] [EOL] menu_actions = [ DossierDeBanc , OptionsAvancees ] [EOL] [EOL] [EOL] class AmendementCollection ( Resource ) : [EOL] def __getitem__ ( self , key ) : [EOL] return AmendementResource ( name = key , parent = self ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( LectureResource , self . __parent__ ) [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . parent . back_resource ( request ) [EOL] [EOL] [EOL] class AmendementResource ( Resource ) : [EOL] def __init__ ( self , name , parent ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] self . num = int ( name ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( AmendementCollection , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent . parent [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . lecture_resource [EOL] [EOL] def model ( self ) : [EOL] try : [EOL] amendement = ( DBSession . query ( Amendement ) . filter_by ( lecture = self . lecture_resource . model ( ) , num = self . num ) . options ( joinedload ( [string] ) , joinedload ( [string] ) ) . one ( ) ) [EOL] except NoResultFound : [EOL] raise ResourceNotFound ( self ) [EOL] return amendement [EOL] [EOL] [EOL] class ArticleCollection ( Resource ) : [EOL] def __getitem__ ( self , key ) : [EOL] try : [EOL] type , num , mult , pos = key . split ( [string] ) [EOL] except ValueError : [EOL] raise KeyError [EOL] return ArticleResource ( key , self , type , num , mult , pos ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( LectureResource , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent [EOL] [EOL] [EOL] class ArticleResource ( Resource ) : [EOL] def __init__ ( self , name , parent , type , num , mult , pos ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] self . type = type [EOL] self . num = num [EOL] self . mult = mult [EOL] self . pos = pos [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( ArticleCollection , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent . parent [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . lecture_resource [EOL] [EOL] def model ( self , * options ) : [EOL] lecture = self . lecture_resource . model ( ) [EOL] try : [EOL] article = ( DBSession . query ( Article ) . filter_by ( lecture = lecture , type = self . type , num = self . num , mult = self . mult , pos = self . pos , ) . options ( * options ) . one ( ) ) [EOL] except NoResultFound : [EOL] raise ResourceNotFound ( self ) [EOL] return article [EOL] [EOL] [EOL] class TableCollection ( Resource ) : [EOL] def __getitem__ ( self , key ) : [EOL] return TableResource ( name = key , parent = self ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( LectureResource , self . __parent__ ) [EOL] [EOL] [EOL] class TableResource ( Resource ) : [EOL] def __init__ ( self , name , parent ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( TableCollection , self . __parent__ ) [EOL] [EOL] def back_resource ( self , request ) : [EOL] return self . lecture_resource [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent . parent [EOL] [EOL] @ property def owner ( self ) : [EOL] try : [EOL] user = DBSession . query ( User ) . filter ( User . email == self . __name__ ) . one ( ) [EOL] return user [EOL] except NoResultFound : [EOL] raise ResourceNotFound [EOL] [EOL] def model ( self , options = None ) : [EOL] return self . owner . table_for ( lecture = self . lecture_resource . model ( ) , options = options ) [EOL] [EOL] [EOL] class SharedTableCollection ( Resource ) : [EOL] def __getitem__ ( self , key ) : [EOL] if key == [string] : [EOL] raise KeyError [EOL] return SharedTableResource ( name = key , parent = self ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( LectureResource , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent [EOL] [EOL] [EOL] class SharedTableResource ( Resource ) : [EOL] def __init__ ( self , name , parent ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] self . add_child ( SharedTableDeleteResource ( name = [string] , parent = self ) ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( SharedTableCollection , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent . parent [EOL] [EOL] def model ( self ) : [EOL] try : [EOL] shared_table = ( DBSession . query ( SharedTable ) . filter ( SharedTable . slug == self . __name__ , SharedTable . lecture == self . lecture_resource . model ( ) , ) . one ( ) ) [EOL] except NoResultFound : [EOL] raise ResourceNotFound ( self ) [EOL] return shared_table [EOL] [EOL] [EOL] class SharedTableDeleteResource ( Resource ) : [EOL] def __init__ ( self , name , parent ) : [EOL] super ( ) . __init__ ( name = name , parent = parent ) [EOL] [EOL] @ property def parent ( self ) : [EOL] return cast ( SharedTableResource , self . __parent__ ) [EOL] [EOL] @ property def lecture_resource ( self ) : [EOL] return self . parent . parent . parent [EOL] [EOL] def model ( self ) : [EOL] return self . parent . model ( ) [EOL]	esource$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $LectureResource$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $LectureResource$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $Resource$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $Resource$ 0 $Resource$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $Resource$ 0 0 0 0 0 0 0 0 0 $SharedTableCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $LectureResource$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.SharedTable$ 0 0 0 0 0 0 0 0 $zam_repondeur.models.SharedTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.SharedTable$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $Resource$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $Resource$ 0 $Resource$ 0 0 0 0 0 0 $SharedTableResource$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $LectureResource$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.SharedTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] from subprocess import STDOUT , CalledProcessError , check_output [comment] [EOL] from typing import List [EOL] [EOL] from pyramid . config import Configurator [EOL] [EOL] [EOL] def load_version ( config ) : [EOL] config . registry . settings [ [string] ] = { [string] : run ( [ [string] , [string] , [string] , [string] ] ) , [string] : run ( [ [string] , [string] , [string] ] ) , [string] : run ( [ [string] , [string] , [string] , [string] , [string] ] ) , } [EOL] [EOL] [EOL] def run ( command ) : [EOL] try : [EOL] [comment] [EOL] res = check_output ( command , stderr = STDOUT ) [comment] [EOL] return res . decode ( [string] ) . strip ( ) [EOL] except CalledProcessError : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] from multiprocessing import cpu_count [EOL] from typing import Any [EOL] [EOL] from paste . deploy . converters import asbool [EOL] from pyramid . config import Configurator [EOL] from pyramid . request import Request [EOL] from pyramid . router import Router [EOL] from pyramid . session import JSONSerializer , SignedCookieSessionFactory [EOL] from pyramid . view import view_config [EOL] from sqlalchemy import engine_from_config , event [EOL] [EOL] from zam_repondeur . models import Base , DBSession , log_query_with_origin [EOL] from zam_repondeur . resources import Root [EOL] from zam_repondeur . version import load_version [EOL] [EOL] BASE_SETTINGS = { [string] : [string] , [string] : [number] * [number] * [number] , [string] : True , [string] : [string] , [string] : ( cpu_count ( ) // [number] ) + [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] [EOL] def make_app ( global_settings , ** settings ) : [EOL] [EOL] settings = { ** BASE_SETTINGS , ** settings } [EOL] [EOL] session_factory = SignedCookieSessionFactory ( secret = settings [ [string] ] , serializer = JSONSerializer ( ) , secure = asbool ( settings [ [string] ] ) , httponly = True , ) [EOL] [EOL] with Configurator ( settings = settings , root_factory = Root , session_factory = session_factory ) as config : [EOL] [EOL] config . include ( [string] ) [EOL] [EOL] setup_database ( config , settings ) [EOL] [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] [EOL] config . add_route ( [string] , [string] ) [EOL] [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] config . include ( [string] ) [EOL] load_version ( config ) [EOL] [EOL] config . scan ( ) [EOL] [EOL] app = config . make_wsgi_app ( ) [EOL] [EOL] return app [EOL] [EOL] [EOL] @ view_config ( route_name = [string] ) def error ( request ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] def setup_database ( config , settings ) : [EOL] [EOL] [comment] [EOL] pool_size = max ( [number] , settings [ [string] ] ) [EOL] [EOL] config . include ( [string] ) [EOL] [EOL] engine = engine_from_config ( settings , [string] , pool_size = pool_size ) [EOL] DBSession . configure ( bind = engine ) [EOL] Base . metadata . bind = engine [EOL] [EOL] if asbool ( settings . get ( [string] ) ) : [EOL] event . listen ( engine , [string] , log_query_with_origin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.router.Router$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import Lecture [EOL] from typing import Any , Dict , Optional , List , Tuple , Type [EOL] import texte [EOL] import chambre [EOL] import typing [EOL] import datetime [EOL] import amendement [EOL] import division [EOL] import repondeur [EOL] import phase [EOL] import sqlalchemy [EOL] import builtins [EOL] import article [EOL] from datetime import datetime , timedelta [EOL] from typing import TYPE_CHECKING , Any , Dict , List , Optional , Tuple [EOL] [EOL] from sqlalchemy import ( Column , DateTime , Enum , ForeignKey , Index , Integer , Text , func , select , ) [EOL] from sqlalchemy . orm import Query , column_property , relationship [EOL] [EOL] from zam_repondeur . decorator import reify [EOL] [EOL] from . amendement import Amendement , AmendementList [EOL] from . article import Article [EOL] from . base import Base , DBSession [EOL] from . chambre import Chambre [EOL] from . division import SubDiv [EOL] from . events . base import LastEventMixin [EOL] from . organe import ORGANE_SENAT , ORGANES_SEANCE_PUBLIQUE [EOL] from . phase import Phase [EOL] from . texte import Texte [EOL] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] from . dossier import Dossier [comment] [EOL] [EOL] [EOL] class Lecture ( Base , LastEventMixin ) : [EOL] __tablename__ = [string] [EOL] __table_args__ = ( Index ( [string] , [string] , [string] , [string] , unique = True , ) , ) [EOL] [EOL] pk = Column ( Integer , primary_key = True ) [EOL] created_at = Column ( DateTime ) [EOL] [EOL] dossier_pk = Column ( Integer , ForeignKey ( [string] ) ) [EOL] dossier = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] texte_pk = Column ( Integer , ForeignKey ( [string] ) ) [EOL] texte = relationship ( Texte , back_populates = [string] ) [EOL] [EOL] partie = Column ( Integer , nullable = True ) [comment] [EOL] [EOL] phase = Column ( Enum ( Phase ) , nullable = False ) [EOL] chambre = Column ( Enum ( Chambre ) ) [EOL] organe = Column ( Text ) [EOL] [EOL] titre = Column ( Text ) [EOL] [EOL] amendements = relationship ( Amendement , order_by = ( Amendement . position , Amendement . num ) , back_populates = [string] , cascade = [string] , passive_deletes = True , ) [EOL] [EOL] nb_amendements = column_property ( select ( [ func . count ( Amendement . pk ) ] ) . where ( Amendement . lecture_pk == pk ) . correlate_except ( Amendement ) ) [EOL] [EOL] articles = relationship ( Article , back_populates = [string] , cascade = [string] , passive_deletes = True , ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( f" [string] { self . pk }" f" [string] { self . dossier . titre !r}" f" [string] { self . phase . name }" f" [string] { self . chambre . name }" f" [string] { self . organe }" f" [string] { self . texte . numero }" f" [string] { self . partie } [string] " ) [EOL] [EOL] def __lt__ ( self , other ) : [EOL] return self . sort_key < other . sort_key [EOL] [EOL] @ property def sort_key ( self ) : [EOL] return self . texte . date_depot , self . organe , self . partie or [number] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . join ( [ self . format_chambre ( ) , self . format_session_or_legislature ( ) , self . format_organe ( ) , self . format_num_lecture ( ) , self . format_texte ( ) , ] ) [EOL] [EOL] def format_chambre ( self ) : [EOL] return str ( self . chambre . value ) [EOL] [EOL] def format_session_or_legislature ( self ) : [EOL] if self . chambre == Chambre . AN : [EOL] return f"{ self . texte . legislature } [string] " [EOL] else : [EOL] return f" [string] { self . texte . session_str }" [EOL] [EOL] def format_organe ( self ) : [EOL] from zam_repondeur . services . data import repository [comment] [EOL] [EOL] result = self . organe [EOL] organe_data = repository . get_opendata_organe ( self . organe ) [EOL] if organe_data is not None : [EOL] result = organe_data [ [string] ] [EOL] return self . rewrite_organe ( result ) [EOL] [EOL] def rewrite_organe ( self , label ) : [EOL] if label in { [string] , [string] , [string] , } : [EOL] return [string] [EOL] if label . startswith ( [string] ) : [EOL] return label [EOL] if label : [EOL] return f" [string] { label . lower ( ) }" [EOL] return [string] [EOL] [EOL] def format_num_lecture ( self ) : [EOL] num_lecture , _ = self . titre . split ( [string] , [number] ) [EOL] return str ( num_lecture . strip ( ) ) [EOL] [EOL] def format_texte ( self ) : [EOL] return f" [string] { self . texte . numero }" + self . format_partie ( ) [EOL] [EOL] def format_partie ( self ) : [EOL] if self . partie == [number] : [EOL] return [string] [EOL] elif self . partie == [number] : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] @ property def is_commission ( self ) : [EOL] return self . organe not in ORGANES_SEANCE_PUBLIQUE [EOL] [EOL] @ property def has_missions ( self ) : [EOL] return bool ( self . partie and self . partie == [number] ) [EOL] [EOL] def refreshable_for ( self , kind , settings ) : [EOL] return bool ( datetime . utcnow ( ) . date ( ) - self . texte . date_depot <= timedelta ( days = int ( settings . get ( f" [string] { kind }" ) or [number] ) ) ) [EOL] [EOL] @ classmethod def get_by_pk ( cls , pk ) : [EOL] lecture = DBSession . query ( cls ) . get ( pk ) [EOL] return lecture [EOL] [EOL] @ classmethod def get ( cls , chambre , session_or_legislature , num_texte , partie , organe , * options , ) : [EOL] query = ( DBSession . query ( cls ) . join ( Texte ) . filter ( cls . chambre == chambre , cls . partie == partie , cls . organe == organe , Texte . chambre == chambre , Texte . numero == num_texte , ) . options ( * options ) ) [EOL] if chambre == Chambre . AN : [EOL] query = query . filter ( Texte . legislature == int ( session_or_legislature ) ) [EOL] elif chambre == Chambre . SENAT : [EOL] query = query . filter ( Texte . session == int ( session_or_legislature . split ( [string] ) [ [number] ] ) ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] res = query . first ( ) [EOL] return res [EOL] [EOL] @ classmethod def exists ( cls , dossier , texte , partie , phase , chambre , organe , ) : [EOL] query = cls . _query_helper ( dossier = dossier , texte = texte , partie = partie , phase = phase , chambre = chambre , organe = organe , ) [EOL] res = DBSession . query ( query . exists ( ) ) . scalar ( ) [EOL] return res [EOL] [EOL] @ classmethod def create ( cls , phase , texte , titre , organe , dossier , partie = None , ) : [EOL] now = datetime . utcnow ( ) [EOL] chambre = texte . chambre [EOL] lecture = cls ( phase = phase , chambre = chambre , texte = texte , titre = titre , organe = organe , dossier = dossier , partie = partie , created_at = now , ) [EOL] DBSession . add ( lecture ) [EOL] return lecture [EOL] [EOL] @ classmethod def create_from_ref ( cls , lecture_ref , dossier , texte ) : [EOL] lecture = cls . create ( dossier = dossier , phase = lecture_ref . phase , organe = lecture_ref . organe , texte = texte , partie = lecture_ref . partie , titre = lecture_ref . titre , ) [EOL] return lecture [EOL] [EOL] @ classmethod def get_from_ref ( cls , lecture_ref , dossier ) : [EOL] [docstring] [EOL] [EOL] lecture = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] query = cls . _query_helper ( dossier = dossier , partie = lecture_ref . partie , phase = lecture_ref . phase , chambre = lecture_ref . chambre , organe = lecture_ref . organe , ) [EOL] lecture = query . one_or_none ( ) [EOL] if lecture is not None : [EOL] return lecture [EOL] [EOL] [comment] [EOL] [comment] [EOL] if lecture_ref . chambre == Chambre . SENAT and lecture_ref . organe != ORGANE_SENAT : [EOL] query = cls . _query_helper ( dossier = dossier , partie = lecture_ref . partie , phase = lecture_ref . phase , chambre = lecture_ref . chambre , ) [EOL] query = query . filter ( cls . organe != ORGANE_SENAT ) [comment] [EOL] lecture = query . one_or_none ( ) [EOL] return lecture [EOL] [EOL] return None [EOL] [EOL] @ classmethod def _query_helper ( cls , dossier , partie , phase , chambre , texte = None , organe = None , ) : [EOL] query = DBSession . query ( cls ) . filter ( cls . dossier == dossier , cls . partie == partie , cls . phase == phase , cls . chambre == chambre , ) [EOL] if texte is not None : [EOL] query = query . filter ( cls . texte == texte ) [EOL] if organe is not None : [EOL] query = query . filter ( cls . organe == organe ) [EOL] return query [EOL] [EOL] @ property def url_key ( self ) : [EOL] if self . partie is not None : [EOL] partie = f" [string] { self . partie }" [EOL] else : [EOL] partie = [string] [EOL] return [string] . join ( [ self . chambre . name . lower ( ) , self . _session_or_legislature , f"{ self . texte . numero }{ partie }" , self . organe , ] ) [EOL] [EOL] @ property def _session_or_legislature ( self ) : [EOL] if self . texte . chambre == Chambre . AN : [EOL] return str ( self . texte . legislature ) [EOL] assert self . texte . session_str is not None [comment] [EOL] return self . texte . session_str [EOL] [EOL] def find_article ( self , subdiv ) : [EOL] article = ... [EOL] for article in self . articles : [EOL] if article . matches ( subdiv ) : [EOL] return article [EOL] return None [EOL] [EOL] def find_or_create_article ( self , subdiv ) : [EOL] article = self . find_article ( subdiv ) [EOL] created = False [EOL] if article is None : [EOL] article = Article . create ( lecture = self , type = subdiv . type_ , num = subdiv . num , mult = subdiv . mult , pos = subdiv . pos , ) [EOL] created = True [EOL] return article , created [EOL] [EOL] def find_amendement ( self , num ) : [EOL] amendement = ... [EOL] for amendement in self . amendements : [EOL] if amendement . num == num : [EOL] return amendement [EOL] return None [EOL] [EOL] def find_or_create_amendement ( self , num , article ) : [EOL] amendement = self . find_amendement ( num ) [EOL] created = False [EOL] if amendement is None : [EOL] amendement = Amendement . create ( lecture = self , article = article , num = num ) [EOL] created = True [EOL] return amendement , created [EOL] [EOL] @ reify def all_amendements ( self ) : [EOL] return AmendementList ( self . amendements ) [EOL] [EOL] def set_fetch_progress ( self , current , total ) : [EOL] from zam_repondeur . services . progress import repository [comment] [EOL] [EOL] return repository . set_fetch_progress ( str ( self . pk ) , current , total ) [EOL] [EOL] def reset_fetch_progress ( self ) : [EOL] from zam_repondeur . services . progress import repository [comment] [EOL] [EOL] return repository . reset_fetch_progress ( str ( self . pk ) ) [EOL] [EOL] def get_fetch_progress ( self ) : [EOL] from zam_repondeur . services . progress import repository [comment] [EOL] [EOL] return repository . get_fetch_progress ( str ( self . pk ) ) [EOL]	ecture"$ 0 0 0 $typing.Any$ 0 $"Dossier"$ 0 $"Texte"$ 0 0 0 $repondeur.zam_repondeur.models.lecture.Lecture$ 0 0 0 0 0 $"Dossier"$ 0 $"Dossier"$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $"Texte"$ 0 $"Texte"$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $repondeur.zam_repondeur.models.lecture.Lecture$ 0 0 0 0 0 $typing.Optional["Lecture"]$ 0 0 0 $typing.Any$ 0 $"Dossier"$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $"Dossier"$ 0 $"Dossier"$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $"Dossier"$ 0 $"Dossier"$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $sqlalchemy.orm.Query$ 0 0 0 $"Dossier"$ 0 $typing.Optional[builtins.int]$ 0 $Lecture.phase.Phase$ 0 $Lecture.chambre.Chambre$ 0 $typing.Optional["Texte"]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $"Dossier"$ 0 $"Dossier"$ 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 $Lecture.phase.Phase$ 0 $Lecture.phase.Phase$ 0 0 0 $Lecture.chambre.Chambre$ 0 $Lecture.chambre.Chambre$ 0 0 0 0 $typing.Optional["Texte"]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional["Texte"]$ 0 $typing.Optional["Texte"]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[article.Article]$ 0 0 0 $division.SubDiv$ 0 0 0 $article.Article$ 0 0 0 0 $article.Article$ 0 0 0 0 0 0 0 $article.Article$ 0 0 0 $division.SubDiv$ 0 0 0 0 $article.Article$ 0 0 0 0 0 0 $typing.Tuple[article.Article,builtins.bool]$ 0 0 0 $division.SubDiv$ 0 0 0 $repondeur.zam_repondeur.models.article.Article$ 0 0 0 0 0 $division.SubDiv$ 0 0 $builtins.str$ 0 0 0 0 $repondeur.zam_repondeur.models.article.Article$ 0 0 0 0 $repondeur.zam_repondeur.models.article.Article$ 0 0 0 0 0 0 0 0 0 0 0 $division.SubDiv$ 0 0 0 0 0 $division.SubDiv$ 0 0 0 0 0 $division.SubDiv$ 0 0 0 0 0 $division.SubDiv$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $repondeur.zam_repondeur.models.article.Article$ 0 $builtins.str$ 0 0 0 $typing.Optional[amendement.Amendement]$ 0 0 0 $builtins.int$ 0 0 0 $amendement.Amendement$ 0 0 0 0 $amendement.Amendement$ 0 0 0 0 0 0 0 $amendement.Amendement$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $amendement.Amendement$ 0 0 0 0 0 0 $typing.Tuple[amendement.Amendement,builtins.bool]$ 0 0 0 $builtins.int$ 0 $article.Article$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $article.Article$ 0 $article.Article$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 $amendement.AmendementList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import NamedTuple , Optional [EOL] [EOL] [EOL] class SubDiv ( NamedTuple ) : [EOL] type_ = ... [EOL] num = ... [EOL] mult = ... [EOL] pos = ... [EOL] [EOL] @ classmethod def create ( cls , type_ , num = None , mult = None , pos = None , ) : [EOL] return cls ( type_ = type_ , num = [string] if num is None else num , mult = [string] if mult is None else mult , pos = [string] if pos is None else pos , ) [EOL] [EOL] [EOL] ADJECTIFS_MULTIPLICATIFS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $"SubDiv"$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , TypeVar , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Tuple , Type , TypeVar [EOL] [EOL] from pyramid_retry import mark_error_retryable [EOL] from sqlalchemy . exc import IntegrityError [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from . amendement import AVIS , Amendement , AmendementList [comment] [EOL] from . article import Article , ArticleUserContent [comment] [EOL] from . base import Base , DBSession , log_query_with_origin [comment] [EOL] from . batch import Batch [comment] [EOL] from . chambre import Chambre [comment] [EOL] from . dossier import Dossier [comment] [EOL] from . events . amendement import ( AmendementIrrecevable , AmendementRectifie , AmendementTransfere , AvisAmendementModifie , BatchSet , BatchUnset , CommentsAmendementModifie , CorpsAmendementModifie , ExposeAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] from . events . article import ( ContenuArticleModifie , PresentationArticleModifiee , TitreArticleModifie , ) [EOL] from . events . base import Event [comment] [EOL] from . events . lecture import ( AmendementsAJour , AmendementsNonRecuperes , AmendementsNonTrouves , AmendementsRecuperes , AmendementsRecuperesLiasse , ArticlesRecuperes , LectureCreee , ReponsesImportees , ReponsesImporteesJSON , SharedTableCreee , SharedTableRenommee , SharedTableSupprimee , ) [EOL] from . lecture import Lecture [comment] [EOL] from . phase import Phase [comment] [EOL] from . table import SharedTable , UserTable [comment] [EOL] from . texte import Texte , TypeTexte [comment] [EOL] from . users import AllowedEmailPattern , Team , User [comment] [EOL] [EOL] mark_error_retryable ( IntegrityError ) [EOL] [EOL] [EOL] def _get_one ( model , options = None , ** kwargs ) : [EOL] query = DBSession . query ( model ) . filter_by ( ** kwargs ) [EOL] if options is not None : [EOL] query = query . options ( options ) [EOL] return query . one ( ) , False [EOL] [EOL] [EOL] def _create ( model , create_kwargs = None , ** kwargs ) : [EOL] kwargs . update ( create_kwargs or { } ) [EOL] created = model . create ( ** kwargs ) [EOL] return created , True [EOL] [EOL] [EOL] Model = TypeVar ( [string] , bound = Base ) [EOL] [EOL] [EOL] def get_one_or_create ( model , create_kwargs = None , options = None , ** kwargs ) : [EOL] try : [EOL] return _get_one ( model , options , ** kwargs ) [EOL] except NoResultFound : [EOL] return _create ( model , create_kwargs , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[Model,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import SharedTable [EOL] from typing import List , Type , Tuple , Any [EOL] import users [EOL] import typing [EOL] import lecture [EOL] import amendement [EOL] import repondeur [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from slugify import slugify [EOL] from sqlalchemy import ( Column , ForeignKey , Index , Integer , Text , UniqueConstraint , func , select , ) [EOL] from sqlalchemy . orm import backref , column_property , relationship [EOL] [EOL] from . amendement import Amendement , AmendementList , AmendementLocation [EOL] from . base import Base , DBSession [EOL] from . lecture import Lecture [EOL] from . users import User [EOL] [EOL] [EOL] class UserTable ( Base ) : [EOL] __tablename__ = [string] [EOL] __table_args__ = ( Index ( [string] , [string] ) , Index ( [string] , [string] ) , UniqueConstraint ( [string] , [string] ) , ) [EOL] [EOL] pk = Column ( Integer , primary_key = True ) [EOL] [EOL] user_pk = Column ( Integer , ForeignKey ( [string] ) , nullable = False ) [EOL] user = relationship ( User , back_populates = [string] ) [EOL] [EOL] lecture_pk = Column ( Integer , ForeignKey ( [string] , ondelete = [string] ) , nullable = False ) [EOL] lecture = relationship ( Lecture , backref = backref ( [string] , cascade = [string] , passive_deletes = True ) , ) [EOL] [EOL] amendements_locations = relationship ( AmendementLocation , back_populates = [string] ) [EOL] [EOL] __repr_keys__ = ( [string] , [string] , [string] ) [EOL] [EOL] def __lt__ ( self , other ) : [EOL] return self . user . email < other . user . email [EOL] [EOL] @ classmethod def create ( cls , user , lecture ) : [EOL] table = cls ( user = user , lecture = lecture ) [EOL] DBSession . add ( table ) [EOL] return table [EOL] [EOL] @ property def amendements ( self ) : [EOL] return AmendementList ( location . amendement for location in self . amendements_locations ) [EOL] [EOL] def add_amendement ( self , amendement ) : [EOL] self . amendements_locations . append ( amendement . location ) [EOL] [EOL] @ property def amendements_as_string ( self ) : [EOL] return [string] . join ( str ( amendement . num ) for amendement in self . amendements ) [EOL] [EOL] [EOL] class SharedTable ( Base ) : [EOL] __tablename__ = [string] [EOL] __table_args__ = ( Index ( [string] , [string] ) , UniqueConstraint ( [string] , [string] ) , ) [EOL] [EOL] pk = Column ( Integer , primary_key = True ) [EOL] [EOL] titre = Column ( Text , nullable = False ) [EOL] slug = Column ( Text , nullable = False ) [EOL] [EOL] lecture_pk = Column ( Integer , ForeignKey ( [string] , ondelete = [string] ) , nullable = False ) [EOL] lecture = relationship ( Lecture , backref = backref ( [string] , cascade = [string] , passive_deletes = True ) , ) [EOL] [EOL] amendements_locations = relationship ( AmendementLocation , back_populates = [string] ) [EOL] [EOL] __repr_keys__ = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] nb_amendements = column_property ( select ( [ func . count ( AmendementLocation . pk ) ] ) . where ( AmendementLocation . shared_table_pk == pk ) . correlate_except ( AmendementLocation ) ) [EOL] [EOL] @ classmethod def create ( cls , titre , lecture ) : [EOL] slug = slugify ( titre ) [EOL] table = cls ( titre = titre , slug = slug , lecture = lecture ) [EOL] DBSession . add ( table ) [EOL] return table [EOL] [EOL] @ classmethod def all_but_me ( self , table , lecture ) : [EOL] shared_tables = DBSession . query ( SharedTable ) . filter ( SharedTable . slug != table . slug , SharedTable . lecture == lecture ) . all ( ) [EOL] return shared_tables [EOL] [EOL] @ property def amendements ( self ) : [EOL] return sorted ( location . amendement for location in self . amendements_locations ) [EOL] [EOL] def add_amendement ( self , amendement ) : [EOL] self . amendements_locations . append ( amendement . location ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SharedTable.lecture.Lecture$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.zam_repondeur.models.table.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.zam_repondeur.models.table.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $"SharedTable"$ 0 0 0 $builtins.str$ 0 $SharedTable.lecture.Lecture$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 $SharedTable.lecture.Lecture$ 0 $SharedTable.lecture.Lecture$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List["SharedTable"]$ 0 0 0 $"SharedTable"$ 0 $"Lecture"$ 0 0 0 $typing.List["SharedTable"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"SharedTable"$ 0 0 0 0 0 $"Lecture"$ 0 $"Lecture"$ 0 0 0 0 0 0 0 $typing.List["SharedTable"]$ 0 0 0 0 0 $typing.List[amendement.Amendement]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $amendement.Amendement$ 0 0 0 0 0 0 0 0 0 $amendement.Amendement$ 0 0 0 0
from typing import Set [EOL] import typing [EOL] ORGANE_AN_14 = [string] [EOL] ORGANE_AN_15 = [string] [EOL] [EOL] ORGANES_AN = { ORGANE_AN_14 , ORGANE_AN_15 } [EOL] [EOL] ORGANE_SENAT = [string] [EOL] [EOL] ORGANES_SEANCE_PUBLIQUE = ORGANES_AN | { ORGANE_SENAT } [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 $builtins.str$ 0 0
from typing import Sequence , Any [EOL] import typing [EOL] import builtins [EOL] import inspect [EOL] import os [EOL] from typing import Any , Sequence [EOL] [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] from sqlalchemy . schema import MetaData [EOL] from zope . sqlalchemy import register [EOL] [EOL] PROJECT_ROOT = os . path . dirname ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] class _Base : [EOL] [EOL] __repr_keys__ = tuple ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] if self . __repr_keys__ : [EOL] fields = [string] . join ( f" [string] { key } [string] { getattr ( self , key ) !r}" for key in self . __repr_keys__ ) [EOL] return f" [string] { self . __class__ . __name__ }{ fields } [string] " [EOL] else : [EOL] return f" [string] { self . __class__ . __name__ } [string] { id ( self ) : [string] } [string] " [EOL] [EOL] [EOL] DBSession = scoped_session ( sessionmaker ( expire_on_commit = False ) ) [EOL] register ( DBSession ) [EOL] [EOL] metadata = MetaData ( naming_convention = { [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] [EOL] Base = declarative_base ( cls = _Base , metadata = metadata ) [EOL] [EOL] [EOL] def log_query_with_origin ( conn , cursor , statement , parameters , context , executemany , ) : [EOL] print ( [string] ) [EOL] for frame in inspect . stack ( ) [ [number] : ] : [EOL] if frame . filename . startswith ( PROJECT_ROOT ) : [EOL] print ( f" [string] { frame . filename } [string] { frame . lineno } [string] { frame . function }" ) [EOL] if not frame . code_context : [EOL] break [EOL] for line in frame . code_context : [EOL] print ( line ) [EOL] break [EOL] print ( statement ) [EOL] print ( parameters ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import repondeur [EOL] import typing [EOL] from enum import Enum [EOL] [EOL] [EOL] class Phase ( Enum ) : [EOL] INCONNUE = [number] [EOL] PREMIERE_LECTURE = [number] [EOL] DEUXIEME_LECTURE = [number] [EOL] NOUVELLE_LECTURE = [number] [EOL] LECTURE_DEFINITIVE = [number] [EOL] [EOL] [EOL] ALL_PHASES = [ Phase . PREMIERE_LECTURE , Phase . DEUXIEME_LECTURE , Phase . NOUVELLE_LECTURE , Phase . LECTURE_DEFINITIVE , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import enum [EOL] [EOL] [EOL] class Chambre ( enum . Enum ) : [EOL] AN = [string] [EOL] SENAT = [string] [EOL] [EOL] @ staticmethod def from_string ( chambre ) : [EOL] if chambre == [string] : [EOL] return Chambre . AN [EOL] if chambre == [string] : [EOL] return Chambre . SENAT [EOL] raise ValueError ( f" [string] { chambre !r} [string] " ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name . lower ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $"Chambre"$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterable , List , Optional , Set , Tuple , Type [EOL] import repondeur [EOL] import typing [EOL] import builtins [EOL] from typing import TYPE_CHECKING , Iterable , List , Optional , Set [EOL] [EOL] from sqlalchemy import Column , Integer [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from . base import Base , DBSession [EOL] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] from . amendement import Amendement , AmendementLocation [comment] [EOL] [EOL] [EOL] class Batch ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] pk = Column ( Integer , primary_key = True ) [EOL] [EOL] amendements_locations = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] __repr_keys__ = ( [string] , ) [EOL] [EOL] @ property def amendements ( self ) : [EOL] return sorted ( location . amendement for location in self . amendements_locations ) [EOL] [EOL] @ property def nums ( self ) : [EOL] return [ amendement . num for amendement in self . amendements ] [EOL] [EOL] @ property def groupes ( self ) : [EOL] return deduplicate ( amendement . groupe or amendement . auteur for amendement in self . amendements ) [EOL] [EOL] @ classmethod def create ( cls ) : [EOL] batch = cls ( ) [EOL] DBSession . add ( batch ) [EOL] return batch [EOL] [EOL] @ staticmethod def collapsed_batches ( amendements ) : [EOL] [docstring] [EOL] [EOL] def _collapsed_batches ( amendements , ) : [EOL] seen_batches = set ( ) [EOL] for amendement in amendements : [EOL] if amendement . location . batch : [EOL] if amendement . location . batch in seen_batches : [EOL] continue [EOL] seen_batches . add ( amendement . location . batch ) [EOL] yield amendement [EOL] [EOL] return list ( _collapsed_batches ( amendements ) ) [EOL] [EOL] @ staticmethod def expanded_batches ( amendements ) : [EOL] [docstring] [EOL] for amendement in amendements : [EOL] if amendement . location . batch : [EOL] yield from amendement . location . batch . amendements [EOL] else : [EOL] yield amendement [EOL] [EOL] [EOL] def deduplicate ( items ) : [EOL] return set ( filter ( None , items ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.zam_repondeur.models.batch.Batch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List["Amendement"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"Batch"$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List["Amendement"]$ 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 $typing.Iterable["Amendement"]$ 0 0 0 0 $typing.Set[Batch]$ 0 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[Batch]$ 0 0 0 0 $typing.Set[Batch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable["Amendement"]$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import LectureEvent [EOL] from typing import Any , Dict , Optional , List , Type [EOL] import texte [EOL] import users [EOL] import typing [EOL] import lecture [EOL] import repondeur [EOL] import string [EOL] import builtins [EOL] import pyramid [EOL] from string import Template [EOL] from typing import Any , List , Optional [EOL] [EOL] from jinja2 import Markup [EOL] from pyramid . request import Request [EOL] from sqlalchemy import Column , ForeignKey , Integer [EOL] from sqlalchemy . orm import backref , relationship [EOL] [EOL] from . . lecture import Lecture [EOL] from . . texte import Texte [EOL] from . . users import User [EOL] from . base import Event [EOL] [EOL] [EOL] class LectureEvent ( Event ) : [EOL] lecture_pk = Column ( Integer , ForeignKey ( [string] , ondelete = [string] ) ) [EOL] lecture = relationship ( Lecture , backref = backref ( [string] , order_by = [string] , cascade = [string] , passive_deletes = True , ) , ) [EOL] [EOL] details_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture , request = None , ** kwargs ) : [EOL] super ( ) . __init__ ( request = request , ** kwargs ) [EOL] self . lecture = lecture [EOL] [EOL] @ property def template_vars ( self ) : [EOL] if self . user : [EOL] return { [string] : self . user . name , [string] : self . user . email } [EOL] return { } [EOL] [EOL] def render_summary ( self ) : [EOL] return Markup ( self . summary_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] def render_details ( self ) : [EOL] return Markup ( self . details_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] [EOL] class LectureCreee ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , lecture , user ) : [EOL] super ( ) . __init__ ( lecture = lecture , user = user ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] def render_summary ( self ) : [EOL] if self . user is None : [EOL] return Markup ( [string] ) [EOL] return Markup ( f" [string] { self . user . email } [string] { self . user . name } [string] " [string] ) [EOL] [EOL] [EOL] class TexteMisAJour ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , lecture , texte ) : [EOL] super ( ) . __init__ ( lecture = lecture , old_value = lecture . texte . numero , new_value = texte . numero ) [EOL] self . texte = texte [EOL] [EOL] @ property def summary_template ( self ) : [EOL] old_value = self . data [ [string] ] [EOL] new_value = self . data [ [string] ] [EOL] return Template ( f" [string] { old_value } [string] { new_value } [string] " ) [EOL] [EOL] def apply ( self ) : [EOL] self . lecture . texte = self . texte [EOL] [EOL] [EOL] class ArticlesRecuperes ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture ) : [EOL] super ( ) . __init__ ( lecture = lecture ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class AmendementsRecuperes ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] count = self . data [ [string] ] [EOL] if count == [number] : [EOL] message = [string] [EOL] else : [EOL] message = f"{ count } [string] " [EOL] return Template ( message ) [EOL] [EOL] def __init__ ( self , lecture , count ) : [EOL] super ( ) . __init__ ( lecture = lecture , count = count ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class AmendementsRecuperesLiasse ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] count = self . data [ [string] ] [EOL] base = [string] [EOL] if count == [number] : [EOL] message = [string] [EOL] else : [EOL] message = f"{ count } [string] " [EOL] return Template ( f"{ base } [string] { message }" ) [EOL] [EOL] def __init__ ( self , lecture , count , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , count = count , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class AmendementsNonRecuperes ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] missings = [string] . join ( self . data [ [string] ] ) [EOL] return Template ( f" [string] { missings } [string] " ) [EOL] [EOL] def __init__ ( self , lecture , missings ) : [EOL] super ( ) . __init__ ( lecture = lecture , missings = missings ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class AmendementsAJour ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture ) : [EOL] super ( ) . __init__ ( lecture = lecture ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class AmendementsNonTrouves ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture ) : [EOL] super ( ) . __init__ ( lecture = lecture ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class ReponsesImportees ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class ReponsesImporteesJSON ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , lecture , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class SharedTableCreee ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] titre = self . data [ [string] ] [EOL] return Template ( f" [string] { titre } [string] " ) [EOL] [EOL] def __init__ ( self , lecture , titre , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , titre = titre , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class SharedTableRenommee ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] old_titre = self . data [ [string] ] [EOL] new_titre = self . data [ [string] ] [EOL] return Template ( f" [string] " f" [string] { old_titre } [string] { new_titre } [string] " ) [EOL] [EOL] def __init__ ( self , lecture , old_titre , new_titre , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , old_titre = old_titre , new_titre = new_titre , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class SharedTableSupprimee ( LectureEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] titre = self . data [ [string] ] [EOL] return Template ( f" [string] { titre } [string] " ) [EOL] [EOL] def __init__ ( self , lecture , titre , request ) : [EOL] super ( ) . __init__ ( lecture = lecture , titre = titre , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[repondeur.zam_repondeur.models.events.lecture.LectureEvent]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[pyramid.request.Request]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[pyramid.request.Request]$ 0 $typing.Optional[pyramid.request.Request]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $users.User$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $users.User$ 0 $users.User$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $repondeur.zam_repondeur.models.texte.Texte$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 0 0 $lecture.Lecture$ 0 $repondeur.zam_repondeur.models.texte.Texte$ 0 0 0 0 0 $repondeur.zam_repondeur.models.texte.Texte$ 0 0 0 0 0 0 $repondeur.zam_repondeur.models.texte.Texte$ 0 $repondeur.zam_repondeur.models.texte.Texte$ 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $builtins.int$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $builtins.int$ 0 $builtins.int$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $lecture.Lecture$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $lecture.Lecture$ 0 $lecture.Lecture$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from datetime import date [EOL] [EOL] from pyramid . httpexceptions import HTTPBadRequest , HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import load_only , noload [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import Amendement , DBSession , SharedTable [EOL] from zam_repondeur . resources import LectureResource [EOL] from zam_repondeur . tasks . fetch import fetch_amendements [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , permission = [string] ) def manual_refresh ( context , request ) : [EOL] lecture = context . model ( ) [EOL] amendements_collection = context [ [string] ] [EOL] if lecture . get_fetch_progress ( ) : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( amendements_collection ) ) [EOL] fetch_amendements ( lecture . pk ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] total = len ( lecture . amendements ) * [number] if lecture . amendements else [number] [EOL] lecture . set_fetch_progress ( [number] , total ) [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( amendements_collection ) ) [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , renderer = [string] ) def lecture_journal ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) ) [EOL] settings = request . registry . settings [EOL] refreshable = lecture . refreshable_for ( [string] , settings ) or lecture . refreshable_for ( [string] , settings ) [EOL] can_refresh = request . has_permission ( [string] , context ) [EOL] refreshing = lecture . get_fetch_progress ( ) [EOL] allowed_to_refresh = refreshable and can_refresh and not refreshing [EOL] return { [string] : lecture , [string] : context . dossier_resource , [string] : context , [string] : [string] , [string] : date . today ( ) , [string] : allowed_to_refresh , } [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , renderer = [string] ) def lecture_options ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) ) [EOL] shared_tables = ( DBSession . query ( SharedTable ) . filter ( SharedTable . lecture_pk == lecture . pk ) . options ( load_only ( [string] , [string] , [string] , [string] ) ) ) . all ( ) [EOL] return { [string] : lecture , [string] : context . dossier_resource , [string] : context , [string] : [string] , [string] : shared_tables , } [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , renderer = [string] ) def progress_status ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) ) [EOL] return lecture . get_fetch_progress ( ) or { } [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , renderer = [string] ) def search_amendement ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) ) [EOL] [EOL] try : [EOL] num_param = request . params . get ( [string] , [string] ) [EOL] num = int ( num_param ) [EOL] except ValueError : [EOL] raise HTTPBadRequest ( ) [EOL] [EOL] amendement = ( DBSession . query ( Amendement ) . filter ( Amendement . lecture == lecture , Amendement . num == num ) . first ( ) ) [EOL] if amendement is None : [EOL] raise HTTPBadRequest ( ) [EOL] [EOL] total_count_amendements = lecture . nb_amendements [EOL] max_amendements_for_full_index = int ( request . registry . settings . get ( [string] , [number] ) ) [EOL] too_many_amendements = total_count_amendements > max_amendements_for_full_index [EOL] [EOL] result = { [string] : request . resource_url ( context [ [string] ] , query = { [string] : amendement . article . url_key if too_many_amendements else [string] } , anchor = amendement . slug , ) , } [EOL] if amendement . is_displayable : [EOL] result [ [string] ] = request . resource_url ( context [ [string] ] [ amendement . article . url_key ] , [string] , anchor = amendement . slug , ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import logging [EOL] import limiter [EOL] import typing [EOL] import builtins [EOL] import urllib [EOL] import pyramid [EOL] import zam_repondeur [EOL] import logging [EOL] from datetime import datetime [EOL] from typing import Any , Dict [EOL] from urllib . parse import urlparse [EOL] [EOL] from limiter import SlidingWindowLimiter [EOL] from pyramid . httpexceptions import HTTPForbidden , HTTPFound , HTTPTooManyRequests [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . security import NO_PERMISSION_REQUIRED , ACLDenied , forget , remember [EOL] from pyramid . view import forbidden_view_config , view_config , view_defaults [EOL] from pyramid_mailer import get_mailer [EOL] from pyramid_mailer . message import Message as MailMessage [EOL] [EOL] from zam_repondeur . auth import generate_auth_token [EOL] from zam_repondeur . decorator import reify [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession , User , get_one_or_create [EOL] from zam_repondeur . resources import Root [EOL] from zam_repondeur . services . users import TokenAlreadyExists , repository [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class RateLimiterMixin : [EOL] request = ... [EOL] [EOL] def make_limiter ( self , action , key ) : [EOL] return SlidingWindowLimiter ( threshold = self . _get_max_actions_per_minute ( action , key ) , interval = [number] , redis_config = self . redis_config , name_space = f"{ action } [string] { key }" , ) [EOL] [EOL] @ reify def redis_config ( self ) : [EOL] settings = self . request . registry . settings [EOL] url = urlparse ( settings [ [string] ] ) [EOL] return { [string] : url . hostname , [string] : int ( url . port or [number] ) , [string] : int ( url . path . replace ( [string] , [string] ) ) , } [EOL] [EOL] def _get_max_actions_per_minute ( self , action , name ) : [EOL] settings = self . request . registry . settings [EOL] key = f" [string] { action } [string] { name } [string] " [EOL] return int ( settings [ key ] ) [EOL] [EOL] [EOL] @ view_defaults ( route_name = [string] , permission = NO_PERMISSION_REQUIRED , context = Root ) class UserLogin ( RateLimiterMixin ) : [EOL] def __init__ ( self , context , request ) : [EOL] self . request = request [EOL] self . email_limiter = self . make_limiter ( action = [string] , key = [string] ) [EOL] self . ip_limiter = self . make_limiter ( action = [string] , key = [string] ) [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] [comment] [EOL] if self . request . unauthenticated_userid : [EOL] return HTTPFound ( location = self . next_url ) [EOL] return { } [EOL] [EOL] @ property def next_url ( self ) : [EOL] url = self . request . params . get ( [string] ) [EOL] if url is None or url == self . request . route_url ( [string] ) : [EOL] url = self . request . resource_url ( self . request . root [ [string] ] ) [EOL] return url [EOL] [EOL] @ view_config ( request_method = [string] , require_csrf = True ) def post ( self ) : [EOL] if self . ip_limiter . exceeded ( self . request . remote_addr ) : [EOL] return HTTPTooManyRequests ( ) [EOL] [EOL] email = User . normalize_email ( self . request . params . get ( [string] ) ) [EOL] [EOL] if self . email_limiter . exceeded ( email ) : [EOL] return HTTPTooManyRequests ( ) [EOL] [EOL] [comment] [EOL] if not email : [EOL] return self . invalid_email ( email = email , reason = [string] ) [EOL] [EOL] [comment] [EOL] if not User . email_is_well_formed ( email ) : [EOL] return self . invalid_email ( email = email , reason = [string] ) [EOL] [EOL] [comment] [EOL] if not User . email_is_allowed ( email ) : [EOL] return self . invalid_email ( email = email , reason = [string] ) [EOL] [EOL] token = self . create_auth_token ( email ) [EOL] self . send_auth_token_email ( token = token , email = email ) [EOL] self . log_successful_token_request ( email ) [EOL] [EOL] return HTTPFound ( location = self . request . route_url ( [string] , _query = { [string] : email } ) ) [EOL] [EOL] def invalid_email ( self , email , reason ) : [EOL] self . log_failed_token_request ( email ) [EOL] self . request . session [ reason ] = True [EOL] return HTTPFound ( location = self . request . route_url ( [string] ) ) [EOL] [EOL] def create_auth_token ( self , email ) : [EOL] while True : [EOL] token = generate_auth_token ( ) [EOL] try : [EOL] repository . set_auth_token ( email = email , token = token ) [EOL] except TokenAlreadyExists : [EOL] logger . warning ( [string] ) [EOL] else : [EOL] return token [EOL] [EOL] def send_auth_token_email ( self , token , email ) : [EOL] app_name = self . request . registry . settings [ [string] ] [EOL] url = self . request . route_url ( [string] , _query = { [string] : token } ) [EOL] url_dossiers = self . request . resource_url ( self . request . root [ [string] ] ) [EOL] mailer = get_mailer ( self . request ) [EOL] message = MailMessage ( subject = f" [string] { app_name }" , sender = [string] , recipients = [ email ] , body = f""" [string] { app_name } [string] { url } [string] { app_name } [string] { app_name } [string] { url_dossiers } [string] """ . strip ( ) , ) [EOL] mailer . send ( message ) [EOL] [EOL] def log_successful_token_request ( self , email ) : [EOL] ip = self . request . remote_addr [EOL] logger . info ( [string] , email , ip ) [EOL] [EOL] def log_failed_token_request ( self , email ) : [EOL] ip = self . request . remote_addr [EOL] logger . warning ( [string] , email , ip ) [EOL] [EOL] [EOL] @ view_config ( route_name = [string] , permission = NO_PERMISSION_REQUIRED , context = Root , renderer = [string] , ) def email_sent ( context , request ) : [EOL] email = request . params . get ( [string] ) [EOL] if email is None : [EOL] raise HTTPFound ( location = request . route_url ( [string] ) ) [EOL] return { [string] : email } [EOL] [EOL] [EOL] @ view_defaults ( route_name = [string] , permission = NO_PERMISSION_REQUIRED , context = Root ) class Authenticate ( RateLimiterMixin ) : [EOL] def __init__ ( self , context , request ) : [EOL] self . request = request [EOL] self . context = context [EOL] self . ip_limiter = self . make_limiter ( action = [string] , key = [string] ) [EOL] [EOL] @ view_config ( request_method = [string] ) def get ( self ) : [EOL] [EOL] if self . ip_limiter . exceeded ( self . request . remote_addr ) : [EOL] return HTTPTooManyRequests ( ) [EOL] [EOL] if self . request . unauthenticated_userid : [EOL] return HTTPFound ( location = self . next_url ) [EOL] [EOL] token = self . request . params . get ( [string] ) [EOL] auth = repository . get_auth_token_data ( token ) [EOL] if auth is None : [EOL] self . log_failed_login_attempt ( token ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] , ) ) [EOL] raise HTTPFound ( location = self . request . route_url ( [string] ) ) [EOL] [EOL] [comment] [EOL] repository . delete_auth_token ( token ) [EOL] [EOL] email = auth [ [string] ] [EOL] user , created = get_one_or_create ( User , email = email ) [EOL] [EOL] if created : [EOL] DBSession . flush ( ) [comment] [EOL] [EOL] self . log_successful_login_attempt ( email ) [EOL] [EOL] user . last_login_at = datetime . utcnow ( ) [EOL] [EOL] next_url = self . next_url [EOL] if not user . name : [EOL] next_url = self . request . route_url ( [string] , _query = { [string] : next_url } ) [EOL] [EOL] [comment] [EOL] headers = remember ( self . request , user . pk ) [EOL] [EOL] app_name = self . request . registry . settings [ [string] ] [EOL] self . request . session . flash ( Message ( cls = [string] , text = f" [string] { app_name } [string] " ) ) [EOL] [EOL] return HTTPFound ( location = next_url , headers = headers ) [EOL] [EOL] @ property def next_url ( self ) : [EOL] url = self . request . params . get ( [string] ) [EOL] if url is None or url == self . request . route_url ( [string] ) : [EOL] url = self . request . resource_url ( self . request . root [ [string] ] ) [EOL] return url [EOL] [EOL] def log_successful_login_attempt ( self , email ) : [EOL] ip = self . request . remote_addr [EOL] logger . info ( [string] , email , ip ) [EOL] [EOL] def log_failed_login_attempt ( self , token ) : [EOL] ip = self . request . remote_addr [EOL] logger . warning ( [string] , token , ip ) [EOL] [EOL] [EOL] @ view_defaults ( route_name = [string] , context = Root ) class Welcome : [EOL] def __init__ ( self , context , request ) : [EOL] self . request = request [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . request . user . name or self . request . user . default_name ( ) } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] name = self . request . params . get ( [string] ) [EOL] if not name : [EOL] self . request . session [ [string] ] = True [EOL] return HTTPFound ( location = self . request . route_url ( [string] ) ) [EOL] [EOL] self . request . user . name = User . normalize_name ( name ) [EOL] next_url = self . request . params . get ( [string] ) or self . request . resource_url ( self . request . root [ [string] ] ) [EOL] return HTTPFound ( location = next_url ) [EOL] [EOL] [EOL] @ view_config ( route_name = [string] , permission = NO_PERMISSION_REQUIRED ) def logout ( request ) : [EOL] [docstring] [EOL] headers = forget ( request ) [EOL] next_url = request . route_url ( [string] ) [EOL] return HTTPFound ( location = next_url , headers = headers ) [EOL] [EOL] [EOL] @ view_config ( route_name = [string] , context = Root , renderer = [string] , permission = NO_PERMISSION_REQUIRED , ) def logout_confirm ( context , request ) : [EOL] [docstring] [EOL] return { } [EOL] [EOL] [EOL] @ forbidden_view_config ( ) def forbidden_view ( exception , request ) : [EOL] [EOL] [comment] [EOL] if request . user is None : [EOL] return HTTPFound ( location = request . route_url ( [string] , _query = { [string] : request . url } ) ) [EOL] [EOL] [comment] [EOL] message = [string] [EOL] next_resource = request . root [EOL] [EOL] if isinstance ( exception . result , ACLDenied ) : [EOL] acl_denied = exception . result [EOL] if acl_denied . permission == [string] : [EOL] message = [string] [EOL] next_resource = request . context [EOL] elif acl_denied . permission == [string] : [EOL] message = [string] [EOL] next_resource = request . context [EOL] [EOL] request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] return HTTPFound ( location = request . resource_url ( next_resource ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.request.Request$ 0 0 0 0 0 $limiter.SlidingWindowLimiter$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $zam_repondeur.resources.Root$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $zam_repondeur.resources.Root$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pyramid [EOL] import zam_repondeur [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] [EOL] from zam_repondeur . resources import Root [EOL] [EOL] [EOL] @ view_config ( context = Root ) def home ( context , request ) : [EOL] return HTTPFound ( location = request . resource_url ( context . default_child ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Generator , Any , Iterable , List , Tuple [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from email . utils import formataddr [EOL] from typing import Iterable , Iterator , List , Tuple [EOL] [EOL] from more_itertools import partition , unique_everseen [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] from pyramid_mailer import get_mailer [EOL] from pyramid_mailer . message import Message as MailMessage [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession , Team , User , get_one_or_create [EOL] from zam_repondeur . models . events . dossier import DossierRetrait , InvitationEnvoyee [EOL] from zam_repondeur . resources import DossierResource [EOL] from zam_repondeur . views . jinja2_filters import enumeration [EOL] [EOL] from . dossier import DossierViewBase [EOL] [EOL] [EOL] @ view_defaults ( context = DossierResource , name = [string] ) class DossierInviteForm ( DossierViewBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . dossier , [string] : self . context , [string] : self . dossier . team , [string] : [string] , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] [EOL] [comment] [EOL] emails = self . _extract_emails ( self . request . POST . get ( [string] ) ) [EOL] bad_emails , clean_emails = self . _clean_emails ( emails ) [EOL] [EOL] [comment] [EOL] new_users , existing_users = self . _find_or_create_users ( clean_emails ) [EOL] [EOL] team = self . dossier . team [EOL] [EOL] [comment] [EOL] new_members , existing_members = self . _identify_members ( existing_users , team ) [EOL] [EOL] users_to_invite = new_users + new_members [EOL] [EOL] team . add_members ( users_to_invite ) [EOL] [EOL] invitations_sent = [number] [EOL] if new_users : [EOL] invitations_sent += self . _send_new_users_invitations ( new_users ) [EOL] if new_members : [EOL] invitations_sent += self . _send_existing_users_invitations ( new_members ) [EOL] [EOL] for user in users_to_invite : [EOL] InvitationEnvoyee . create ( dossier = self . dossier , email = user . email , request = self . request ) [EOL] [EOL] if invitations_sent : [EOL] if invitations_sent > [number] : [EOL] message = [string] [EOL] else : [EOL] message = [string] [EOL] cls = [string] [EOL] else : [EOL] message = [string] [EOL] cls = [string] [EOL] [EOL] if existing_members : [EOL] existing_emails = [ user . email for user in existing_members ] [EOL] message += [string] [EOL] if len ( existing_emails ) > [number] : [EOL] message += ( f" [string] { enumeration ( existing_emails ) } [string] " [string] ) [EOL] else : [EOL] message += ( f" [string] { existing_emails [ [number] ] } [string] " [string] ) [EOL] [EOL] if bad_emails : [EOL] message += [string] [EOL] if len ( bad_emails ) > [number] : [EOL] message += ( f" [string] { enumeration ( bad_emails ) } [string] " [string] ) [EOL] else : [EOL] message += ( f" [string] { bad_emails [ [number] ] } [string] " [string] ) [EOL] [EOL] self . request . session . flash ( Message ( cls = cls , text = message ) ) [EOL] [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] def _extract_emails ( self , text ) : [EOL] emails = ( line . strip ( ) for line in text . split ( [string] ) ) [comment] [EOL] non_empty_emails = ( email for email in emails if email != [string] ) [EOL] unique_emails = unique_everseen ( non_empty_emails ) [EOL] return unique_emails [EOL] [EOL] def _clean_emails ( self , emails ) : [EOL] normalized_emails = ( User . normalize_email ( email ) for email in emails ) [EOL] bad_emails , clean_emails = partition ( self . _is_email_valid , normalized_emails ) [EOL] return list ( bad_emails ) , list ( clean_emails ) [EOL] [EOL] @ staticmethod def _is_email_valid ( email ) : [EOL] return User . email_is_well_formed ( email ) and User . email_is_allowed ( email ) [EOL] [EOL] def _find_or_create_users ( self , emails ) : [EOL] new_users = [ ] [EOL] existing_users = [ ] [EOL] for email in emails : [EOL] user , created = get_one_or_create ( User , email = email ) [EOL] if created : [EOL] new_users . append ( user ) [EOL] else : [EOL] existing_users . append ( user ) [EOL] return new_users , existing_users [EOL] [EOL] def _identify_members ( self , users , team ) : [EOL] not_members , members = partition ( team . is_member , users ) [EOL] return list ( not_members ) , list ( members ) [EOL] [EOL] def _send_new_users_invitations ( self , users ) : [EOL] [comment] [EOL] mailer = get_mailer ( self . request ) [EOL] reply_to = formataddr ( ( self . request . user . name , self . request . user . email ) ) [EOL] app_name = self . request . registry . settings [ [string] ] [EOL] subject = f" [string] { app_name }" [EOL] url = self . request . resource_url ( self . request . context ) [EOL] body = f""" [string] { app_name } [string] { self . request . user } [string] { self . dossier . titre } [string] { url } [string] """ [EOL] for user in users : [EOL] message = MailMessage ( subject = subject , sender = [string] , recipients = [ user . email ] , body = body . strip ( ) , extra_headers = { [string] : reply_to } , ) [EOL] mailer . send ( message ) [EOL] return len ( users ) [EOL] [EOL] def _send_existing_users_invitations ( self , users ) : [EOL] [comment] [EOL] mailer = get_mailer ( self . request ) [EOL] reply_to = formataddr ( ( self . request . user . name , self . request . user . email ) ) [EOL] app_name = self . request . registry . settings [ [string] ] [EOL] subject = f" [string] { app_name }" [EOL] url = self . request . resource_url ( self . request . context ) [EOL] body = f""" [string] { self . request . user } [string] { app_name } [string] { self . dossier . titre } [string] { url } [string] """ [EOL] for user in users : [EOL] message = MailMessage ( subject = subject , sender = [string] , recipients = [ user . email ] , body = body . strip ( ) , extra_headers = { [string] : reply_to } , ) [EOL] mailer . send ( message ) [EOL] return len ( users ) [EOL] [EOL] [EOL] @ view_defaults ( context = DossierResource , name = [string] , permission = [string] ) class DossierRetraitForm ( DossierViewBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . dossier , [string] : self . context , [string] : [string] , [string] : self . dossier . team , [string] : self . request . user , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] user_pk = self . request . POST . get ( [string] ) [EOL] user = DBSession . query ( User ) . filter ( User . pk == user_pk ) . one ( ) [EOL] target = str ( user ) [EOL] [EOL] self . dossier . team . users . remove ( user ) [EOL] [EOL] DossierRetrait . create ( dossier = self . dossier , target = target , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( f"{ target } [string] " ) ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 $typing.Tuple[typing.List[builtins.str],typing.List[builtins.str]]$ 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.List[zam_repondeur.models.User],typing.List[zam_repondeur.models.User]]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Tuple[typing.List[zam_repondeur.models.User],typing.List[zam_repondeur.models.User]]$ 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 $zam_repondeur.models.Team$ 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.Team$ 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[zam_repondeur.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from datetime import date [EOL] from typing import Any , Dict [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models . events . article import ( PresentationArticleModifiee , TitreArticleModifie , ) [EOL] from zam_repondeur . resources import ArticleResource [EOL] from zam_repondeur . services . clean import clean_all_html , clean_html [EOL] [EOL] [EOL] @ view_defaults ( context = ArticleResource ) class ArticleEdit : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . article = self . context . model ( ) [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] lecture = self . article . lecture [EOL] return { [string] : self . article , [string] : lecture , [string] : self . context . lecture_resource , [string] : self . context . lecture_resource . dossier_resource , [string] : [string] , [string] : self . back_url ( ) , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] changed = False [EOL] [EOL] new_title = clean_all_html ( self . request . POST [ [string] ] ) [EOL] if new_title != self . article . user_content . title : [EOL] TitreArticleModifie . create ( article = self . article , title = new_title , request = self . request ) [EOL] changed = True [EOL] [EOL] new_presentation = clean_html ( self . request . POST [ [string] ] ) [EOL] if new_presentation != self . article . user_content . presentation : [EOL] PresentationArticleModifiee . create ( article = self . article , presentation = new_presentation , request = self . request , ) [EOL] changed = True [EOL] [EOL] if changed : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] [EOL] return HTTPFound ( location = self . next_url ( ) ) [EOL] [EOL] def back_url ( self ) : [EOL] amendements_collection = self . context . lecture_resource [ [string] ] [EOL] return self . request . resource_url ( amendements_collection ) [EOL] [EOL] def next_url ( self ) : [EOL] next_article = self . article . next_article [EOL] if next_article is None : [EOL] return self . back_url ( ) [EOL] [EOL] [comment] [EOL] while next_article . pos : [EOL] next_article = next_article . next_article [EOL] if next_article is None : [EOL] return self . back_url ( ) [EOL] [EOL] return self . request . resource_url ( self . context . parent [ next_article . url_key ] ) [EOL] [EOL] [EOL] @ view_config ( context = ArticleResource , name = [string] , renderer = [string] ) def article_journal ( context , request ) : [EOL] return { [string] : context . lecture_resource . model ( ) , [string] : context . lecture_resource , [string] : context . lecture_resource . dossier_resource , [string] : [string] , [string] : context . model ( ) , [string] : date . today ( ) , [string] : request . resource_url ( context ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Any , List , Callable , Union , Tuple [EOL] import typing [EOL] import builtins [EOL] import typing_extensions [EOL] import pyramid [EOL] import zam_repondeur [EOL] from typing import Callable , Tuple [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import joinedload , load_only , subqueryload [EOL] [EOL] from zam_repondeur . models import Amendement , AmendementList , Article , Batch , DBSession [EOL] from zam_repondeur . resources import AmendementCollection , LectureResource [EOL] [EOL] AMDTS_OPTIONS = [ load_only ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , joinedload ( [string] ) . load_only ( [string] , [string] , [string] , [string] ) , joinedload ( [string] ) . options ( subqueryload ( [string] ) . joinedload ( [string] ) . joinedload ( [string] ) . load_only ( [string] , [string] ) , subqueryload ( [string] ) . load_only ( [string] ) , subqueryload ( [string] ) . joinedload ( [string] ) . load_only ( [string] , [string] ) , ) , ( subqueryload ( [string] ) . load_only ( [string] ) . joinedload ( [string] ) . load_only ( [string] ) ) , ] [EOL] [EOL] [EOL] @ view_config ( context = LectureResource ) def default_view ( context , request ) : [EOL] return HTTPFound ( location = request . resource_url ( context [ [string] ] ) ) [EOL] [EOL] [EOL] @ view_config ( context = AmendementCollection , renderer = [string] ) def lecture_index ( context , request ) : [EOL] [docstring] [EOL] lecture_resource = context . parent [EOL] lecture = lecture_resource . model ( subqueryload ( [string] ) . defer ( [string] ) ) [EOL] total_count_amendements = lecture . nb_amendements [EOL] max_amendements_for_full_index = int ( request . registry . settings . get ( [string] , [number] ) ) [EOL] too_many_amendements = total_count_amendements > max_amendements_for_full_index [EOL] default_param = [string] if too_many_amendements else [string] [EOL] article_param = request . params . get ( [string] , default_param ) [EOL] if article_param == [string] : [EOL] amendements = ( DBSession . query ( Amendement ) . join ( Article ) . filter ( Amendement . lecture == lecture , ) . options ( * AMDTS_OPTIONS ) ) [EOL] else : [EOL] article_type , article_num , article_mult , article_pos = article_param . split ( [string] ) [EOL] amendements = ( DBSession . query ( Amendement ) . join ( Article ) . filter ( Article . pk == Amendement . article_pk , Amendement . lecture == lecture , Article . type == article_type , Article . num == article_num , Article . mult == article_mult , Article . pos == article_pos , ) . options ( * AMDTS_OPTIONS ) ) [EOL] [EOL] amendements = AmendementList ( amendements , sort_key = get_sort_key ( request ) ) [EOL] article_count_amendements = len ( amendements ) [EOL] return { [string] : lecture , [string] : lecture_resource . dossier_resource , [string] : lecture_resource , [string] : [string] , [string] : total_count_amendements , [string] : article_count_amendements , [string] : amendements , [string] : Batch . collapsed_batches ( amendements ) , [string] : lecture . articles , [string] : article_param , [string] : request . resource_url ( lecture_resource , [string] ) , [string] : request . registry . settings [ [string] ] , [string] : too_many_amendements , } [EOL] [EOL] [EOL] def get_sort_key ( request ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] tri_amendement_enabled = int ( request . params . get ( [string] , [string] ) ) [EOL] except ValueError : [EOL] tri_amendement_enabled = [number] [EOL] [EOL] return sort_by_tri_amendement if tri_amendement_enabled else sort_by_position [EOL] [EOL] [EOL] def sort_by_tri_amendement ( amendement ) : [EOL] return ( amendement . is_abandoned , amendement . tri_amendement or [string] , amendement . article , amendement . num , ) [EOL] [EOL] [EOL] def sort_by_position ( amendement ) : [EOL] return amendement . sort_key [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[zam_repondeur.models.Amendement],builtins.tuple]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.bool,builtins.str,zam_repondeur.models.Article,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.bool,builtins.int,zam_repondeur.models.Article,builtins.int]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] from datetime import date [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] from sqlalchemy . orm import subqueryload [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . dossier import DossierDesactive [EOL] from zam_repondeur . resources import DossierResource [EOL] from zam_repondeur . tasks . fetch import update_dossier [EOL] [EOL] [EOL] class DossierViewBase : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . dossier = context . dossier [EOL] [EOL] [EOL] @ view_defaults ( context = DossierResource ) class DossierView ( DossierViewBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . dossier , [string] : self . context , [string] : [string] , [string] : sorted ( self . dossier . lectures ) , [string] : self . request . has_permission ( [string] , self . context ) , } [EOL] [EOL] @ view_config ( request_method = [string] , permission = [string] ) def post ( self ) : [EOL] DBSession . delete ( self . dossier . team ) [EOL] for lecture in self . dossier . lectures : [EOL] DBSession . delete ( lecture ) [EOL] DBSession . flush ( ) [EOL] DossierDesactive . create ( dossier = self . dossier , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context . parent ) ) [EOL] [EOL] [EOL] @ view_config ( context = DossierResource , name = [string] , renderer = [string] ) def dossier_journal ( context , request ) : [EOL] dossier = context . model ( subqueryload ( [string] ) . joinedload ( [string] ) . load_only ( [string] , [string] ) ) [EOL] allowed_to_refresh = request . has_permission ( [string] , context ) [EOL] return { [string] : dossier , [string] : context , [string] : date . today ( ) , [string] : [string] , [string] : allowed_to_refresh , } [EOL] [EOL] [EOL] @ view_config ( context = DossierResource , name = [string] , permission = [string] ) def manual_refresh ( context , request ) : [EOL] dossier = context . dossier [EOL] update_dossier ( dossier . pk , force = True ) [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Union , Set , Tuple [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from typing import List , Set , Tuple [EOL] [EOL] from pyramid . request import Request [EOL] from pyramid . view import view_config , view_defaults [EOL] [EOL] from zam_repondeur . models import Amendement , DBSession , SharedTable , User [EOL] from zam_repondeur . models . users import Team [EOL] from zam_repondeur . resources import LectureResource [EOL] [EOL] [EOL] @ view_defaults ( context = LectureResource , renderer = [string] , name = [string] , ) class TransferAmendements : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . from_index = bool ( request . GET . get ( [string] ) ) [EOL] self . amendements_nums = self . get_nums ( ) [EOL] self . lecture = self . context . model ( ) [comment] [EOL] [EOL] def get_nums ( self ) : [EOL] params = self . request . GET [EOL] nums = params . getall ( [string] ) [EOL] return nums [EOL] [EOL] @ view_config ( request_method = [string] ) def get ( self ) : [EOL] from_save = bool ( self . request . GET . get ( [string] ) ) [EOL] my_table = self . request . user . table_for ( self . lecture ) [EOL] amendements = [ amendement for amendement in self . lecture . amendements if str ( amendement . num ) in self . amendements_nums ] [EOL] amendements_being_edited = [ ] [EOL] amendements_not_being_edited = [ ] [EOL] amendements_without_table = [ ] [EOL] amendements_with_shared_table = [ ] [EOL] for amendement in amendements : [EOL] if amendement . location . user_table : [EOL] if ( amendement . is_being_edited [EOL] and not amendement . location . user_table . user == self . request . user ) : [EOL] amendements_being_edited . append ( amendement ) [EOL] else : [EOL] amendements_not_being_edited . append ( amendement ) [EOL] elif amendement . location . shared_table : [EOL] amendements_with_shared_table . append ( amendement ) [EOL] else : [EOL] amendements_without_table . append ( amendement ) [EOL] amendements_with_table = ( amendements_being_edited + amendements_not_being_edited + amendements_with_shared_table ) [EOL] show_transfer_to_myself = ( amendements_without_table or amendements_with_shared_table or not all ( amendement . location . user_table is my_table for amendement in amendements_with_table ) ) [EOL] return { [string] : self . lecture , [string] : self . context , [string] : self . context . dossier_resource , [string] : [string] , [string] : amendements , [string] : amendements_with_table , [string] : amendements_being_edited , [string] : amendements_not_being_edited , [string] : amendements_with_shared_table , [string] : amendements_without_table , [string] : self . target_users , [string] : self . target_tables ( amendements_with_shared_table ) , [string] : int ( self . from_index ) , [string] : from_save , [string] : bool ( amendements_with_table ) , [string] : show_transfer_to_myself , [string] : self . back_url , } [EOL] [EOL] @ property def target_users ( self ) : [EOL] team = self . lecture . dossier . team [EOL] if team is not None : [EOL] users = team . everyone_but_me ( self . request . user ) [EOL] else : [EOL] users = User . everyone_but_me ( self . request . user ) [EOL] return [ ( user . email , str ( user ) ) for user in users ] [EOL] [EOL] def target_tables ( self , amendements_with_shared_table ) : [EOL] shared_tables = set ( amendement . location . shared_table for amendement in amendements_with_shared_table if amendement . location . shared_table ) [EOL] if len ( shared_tables ) == [number] : [EOL] return SharedTable . all_but_me ( list ( shared_tables ) [ [number] ] , self . lecture ) [EOL] else : [EOL] result = DBSession . query ( SharedTable ) . filter ( SharedTable . lecture == self . lecture ) [EOL] return result [EOL] [EOL] @ property def back_url ( self ) : [EOL] url = self . request . GET . get ( [string] ) [EOL] if url is None : [EOL] return self . request . resource_url ( self . context [ [string] ] ) [EOL] return url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.Union[typing.List[typing.Any],builtins.bool]$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Union[typing.List[typing.Any],builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 $zam_repondeur.models.users.Team$ 0 0 0 0 0 0 0 $zam_repondeur.models.users.Team$ 0 0 $zam_repondeur.models.users.Team$ 0 0 0 0 0 $typing.Any$ 0 $zam_repondeur.models.users.Team$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[zam_repondeur.models.SharedTable]$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $typing.Set[zam_repondeur.models.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[zam_repondeur.models.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[zam_repondeur.models.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.SharedTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.SharedTable]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
from typing import Optional , Any [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import pathlib [EOL] import pyramid [EOL] import zam_repondeur [EOL] import logging [EOL] import os [EOL] import shutil [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] from typing import Any , Optional [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . lecture import AmendementsRecuperesLiasse [EOL] from zam_repondeur . resources import LectureResource [EOL] from zam_repondeur . services . import_export . liasse_xml import ( LectureDoesNotMatch , import_liasse_xml , ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] ) def upload_liasse_xml ( context , request ) : [EOL] try : [EOL] liasse_field = request . POST [ [string] ] [EOL] except KeyError : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] if liasse_field == [string] : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] [comment] [EOL] backup_path = get_backup_path ( request ) [EOL] if backup_path is not None : [EOL] save_uploaded_file ( liasse_field , backup_path ) [EOL] [EOL] lecture = context . model ( ) [EOL] [EOL] try : [EOL] amendements , errors = import_liasse_xml ( liasse_field . file , lecture ) [EOL] except ValueError : [EOL] logger . exception ( [string] ) [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] except LectureDoesNotMatch as exc : [EOL] request . session . flash ( Message ( cls = [string] , text = f" [string] { exc . lecture_fmt } [string] " , ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] if errors : [EOL] if len ( errors ) == [number] : [EOL] what = [string] [EOL] else : [EOL] what = [string] [EOL] uids = [string] . join ( uid for uid , cause in errors ) [EOL] request . session . flash ( Message ( cls = [string] , text = f" [string] { what } [string] { uids } [string] " ) ) [EOL] [EOL] if len ( amendements ) == [number] : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] , ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] if len ( amendements ) == [number] : [EOL] message = [string] [EOL] else : [EOL] message = ( f"{ len ( amendements ) } [string] " ) [EOL] request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] AmendementsRecuperesLiasse . create ( lecture = lecture , count = len ( amendements ) , request = request ) [EOL] DBSession . add ( lecture ) [EOL] return HTTPFound ( location = request . resource_url ( context [ [string] ] ) ) [EOL] [EOL] [EOL] def get_backup_path ( request ) : [EOL] backup_dir = request . registry . settings . get ( [string] ) [EOL] if not backup_dir : [EOL] return None [EOL] backup_path = Path ( backup_dir ) [EOL] backup_path . mkdir ( parents = True , exist_ok = True ) [EOL] return backup_path [EOL] [EOL] [EOL] def save_uploaded_file ( form_field , backup_dir ) : [EOL] form_field . file . seek ( [number] ) [EOL] timestamp = datetime . utcnow ( ) . isoformat ( timespec = [string] ) [EOL] sanitized_filename = os . path . basename ( form_field . filename ) [EOL] backup_filename = Path ( backup_dir ) / f" [string] { timestamp } [string] { sanitized_filename }" [EOL] with backup_filename . open ( [string] ) as backup_file : [EOL] shutil . copyfileobj ( form_field . file , backup_file ) [EOL] logger . info ( [string] , backup_filename ) [EOL] form_field . file . seek ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Any , Dict [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Dict , Tuple [EOL] [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import joinedload , lazyload , load_only [EOL] [EOL] from zam_repondeur . models import Article [EOL] from zam_repondeur . models . article import mult_key [EOL] from zam_repondeur . resources import ArticleCollection , ArticleResource [EOL] [EOL] [EOL] @ view_config ( context = ArticleCollection , renderer = [string] ) def list_articles ( context , request ) : [EOL] def _sort_key ( item ) : [EOL] [docstring] [EOL] return ( Article . _ORDER_TYPE [ [string] ] [EOL] if item . type == [string] [EOL] else Article . _ORDER_TYPE [ item . type or [string] ] , str ( item . num or [string] ) . zfill ( [number] ) , mult_key ( item . mult or [string] ) , Article . _ORDER_POS [ item . pos or [string] ] , ) [EOL] [EOL] lecture = context . lecture_resource . model ( load_only ( [string] , [string] , [string] , [string] , [string] , [string] ) , lazyload ( [string] ) . options ( load_only ( [string] , [string] , [string] , [string] , [string] ) , joinedload ( [string] ) . load_only ( [string] ) , ) , joinedload ( [string] ) . load_only ( [string] , [string] ) , ) [EOL] articles = sorted ( lecture . articles , key = _sort_key ) [EOL] return { [string] : lecture , [string] : articles } [EOL] [EOL] [EOL] @ view_config ( context = ArticleResource , name = [string] , renderer = [string] ) def list_reponses ( context , request ) : [EOL] article = context . model ( lazyload ( [string] ) . options ( load_only ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , joinedload ( [string] ) . load_only ( [string] , [string] , [string] , [string] , [string] ) , ) , lazyload ( [string] ) . options ( lazyload ( [string] ) . options ( load_only ( [string] , [string] , [string] , [string] , [string] ) , joinedload ( [string] ) . load_only ( [string] ) , ) , joinedload ( [string] ) . load_only ( [string] , [string] ) , lazyload ( [string] ) . options ( load_only ( [string] , [string] , [string] , [string] , [string] ) , ) , ) , ) [EOL] return { [string] : article . lecture , [string] : article , [string] : list ( article . grouped_displayable_amendements ( ) ) , [string] : article . next_article , [string] : article . previous_article , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.str,typing.Tuple[builtins.int,builtins.str],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pyramid [EOL] import zam_repondeur [EOL] import builtins [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] from slugify import slugify [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession , SharedTable , get_one_or_create [EOL] from zam_repondeur . models . events . lecture import ( SharedTableCreee , SharedTableRenommee , SharedTableSupprimee , ) [EOL] from zam_repondeur . resources import ( SharedTableCollection , SharedTableDeleteResource , SharedTableResource , ) [EOL] [EOL] [EOL] @ view_defaults ( context = SharedTableCollection , name = [string] ) class SharedTableCollectionView : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . lecture = context . lecture_resource . model ( ) [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . lecture , [string] : self . context . lecture_resource , [string] : self . context . lecture_resource . dossier_resource , [string] : [string] , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] titre = self . request . POST . get ( [string] ) [EOL] table , created = get_one_or_create ( SharedTable , titre = titre , lecture = self . lecture ) [EOL] if created : [EOL] SharedTableCreee . create ( lecture = self . lecture , titre = titre , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = f" [string] { table . titre } [string] " ) ) [EOL] else : [EOL] self . request . session . flash ( Message ( cls = [string] , text = f" [string] { table . titre } [string] " ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context . lecture_resource , [string] , anchor = [string] ) ) [EOL] [EOL] [EOL] @ view_defaults ( context = SharedTableResource ) class SharedTableResourceView : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . lecture = context . lecture_resource . model ( ) [EOL] self . shared_table = self . context . model ( ) [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . lecture , [string] : self . context . lecture_resource , [string] : self . context . lecture_resource . dossier_resource , [string] : self . shared_table , [string] : [string] , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] old_titre = self . shared_table . titre [EOL] titre = self . request . POST . get ( [string] ) [EOL] self . shared_table . titre = titre [EOL] self . shared_table . slug = slugify ( titre ) [EOL] SharedTableRenommee . create ( lecture = self . lecture , old_titre = old_titre , new_titre = titre , request = self . request , ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = f" [string] { titre } [string] " ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context . lecture_resource , [string] , anchor = [string] ) ) [EOL] [EOL] [EOL] @ view_defaults ( context = SharedTableDeleteResource ) class SharedTableResourceDeleteView : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . lecture = context . lecture_resource . model ( ) [EOL] self . shared_table = self . context . model ( ) [EOL] [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : self . lecture , [string] : self . context . lecture_resource , [string] : self . context . lecture_resource . dossier_resource , [string] : self . shared_table , [string] : [string] , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] titre = self . shared_table . titre [EOL] DBSession . delete ( self . shared_table ) [EOL] SharedTableSupprimee . create ( lecture = self . lecture , titre = titre , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = f" [string] { titre } [string] " ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context . lecture_resource , [string] , anchor = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import joinedload , load_only , subqueryload [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models . events . lecture import ReponsesImportees [EOL] from zam_repondeur . resources import LectureResource [EOL] from zam_repondeur . services . import_export . csv import CSVImportError , import_csv [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , request_method = [string] ) def upload_csv ( context , request ) : [EOL] [EOL] lecture = context . model ( subqueryload ( [string] ) . options ( load_only ( [string] ) , joinedload ( [string] ) . load_only ( [string] , [string] , [string] , [string] ) , joinedload ( [string] ) . options ( subqueryload ( [string] ) , subqueryload ( [string] ) , ) , ) ) [EOL] [EOL] next_url = request . resource_url ( context [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if request . POST [ [string] ] == [string] : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] try : [EOL] counter = import_csv ( request = request , reponses_file = request . POST [ [string] ] . file , lecture = lecture , amendements = { amendement . num : amendement for amendement in lecture . amendements } , team = context . dossier_resource . dossier . team , ) [EOL] except CSVImportError as exc : [EOL] request . session . flash ( Message ( cls = [string] , text = str ( exc ) ) ) [EOL] return HTTPFound ( location = next_url ) [EOL] [EOL] if counter [ [string] ] : [EOL] request . session . flash ( Message ( cls = [string] , text = f"{ counter [ [string] ] } [string] " , ) ) [EOL] ReponsesImportees . create ( lecture = lecture , request = request ) [EOL] [EOL] if counter [ [string] ] : [EOL] request . session . flash ( Message ( cls = [string] , text = ( f"{ counter [ [string] ] } [string] " [string] [string] [string] [string] ) , ) ) [EOL] [EOL] return HTTPFound ( location = next_url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response
from typing import Any , Dict [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from datetime import date [EOL] from typing import Any , Dict [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] [EOL] from zam_repondeur . decorator import reify [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import AVIS , Batch [EOL] from zam_repondeur . models . events . amendement import ( AvisAmendementModifie , CommentsAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] from zam_repondeur . resources import AmendementResource [EOL] from zam_repondeur . services . clean import clean_html [EOL] from zam_repondeur . utils import add_url_fragment , add_url_params [EOL] [EOL] [EOL] @ view_defaults ( context = AmendementResource , renderer = [string] ) class AmendementEdit : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . amendement = context . model ( ) [EOL] self . amendements = list ( Batch . expanded_batches ( [ self . amendement ] ) ) [EOL] self . lecture = self . amendement . lecture [EOL] self . my_table_resource = self . context . lecture_resource [ [string] ] [ self . request . user . email ] [EOL] self . is_on_my_table = ( self . amendement . location . user_table [EOL] and self . amendement . location . user_table . user == self . request . user ) [EOL] [EOL] @ view_config ( request_method = [string] ) @ view_config ( request_method = [string] , name = [string] ) def get ( self ) : [EOL] check_url = self . request . resource_path ( self . my_table_resource , [string] ) [EOL] return { [string] : self . amendement , [string] : self . amendements , [string] : self . amendement . identiques , [string] : [string] , [string] : self . context . lecture_resource . dossier_resource , [string] : self . context . lecture_resource , [string] : AVIS , [string] : self . amendement . location . user_table , [string] : self . is_on_my_table , [string] : self . back_url , [string] : self . submit_url , [string] : check_url , [string] : self . my_table_url , [string] : self . request . resource_url ( self . context . lecture_resource , [string] , query = { [string] : self . amendement . num , [string] : [number] } , ) , [string] : self . amendement . article . grouped_displayable_amendements ( ) , } [EOL] [EOL] @ view_config ( request_method = [string] ) @ view_config ( request_method = [string] , name = [string] ) def post ( self ) : [EOL] avis = self . request . POST . get ( [string] , [string] ) [EOL] objet = clean_html ( self . request . POST . get ( [string] , [string] ) ) [EOL] reponse = clean_html ( self . request . POST . get ( [string] , [string] ) ) [EOL] comments = clean_html ( self . request . POST . get ( [string] , [string] ) ) [EOL] [EOL] avis_changed = avis != ( self . amendement . user_content . avis or [string] ) [EOL] objet_changed = objet != ( self . amendement . user_content . objet or [string] ) [EOL] reponse_changed = reponse != ( self . amendement . user_content . reponse or [string] ) [EOL] comments_changed = comments != ( self . amendement . user_content . comments or [string] ) [EOL] [EOL] if not self . is_on_my_table : [EOL] message = ( [string] [string] ) [EOL] if self . amendement . location . user_table : [EOL] message += ( f" [string] " f"{ self . amendement . location . user_table . user } [string] " ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] return HTTPFound ( location = self . my_table_url ) [EOL] [EOL] for amendement in self . amendements : [EOL] if avis_changed : [EOL] AvisAmendementModifie . create ( amendement = amendement , avis = avis , request = self . request ) [EOL] [EOL] if objet_changed : [EOL] ObjetAmendementModifie . create ( amendement = amendement , objet = objet , request = self . request ) [EOL] [EOL] if reponse_changed : [EOL] ReponseAmendementModifiee . create ( amendement = amendement , reponse = reponse , request = self . request ) [EOL] [EOL] if comments_changed : [EOL] CommentsAmendementModifie . create ( amendement = amendement , comments = comments , request = self . request ) [EOL] [EOL] amendement . stop_editing ( ) [EOL] [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] if [string] in self . request . POST : [EOL] return HTTPFound ( location = self . request . resource_url ( self . context . lecture_resource , [string] , query = { [string] : [ amendement . num for amendement in self . amendements ] , [string] : [number] , [string] : self . back_url , } , ) ) [EOL] else : [EOL] self . request . session [ [string] ] = self . amendements [ [number] ] . slug [EOL] return HTTPFound ( location = self . back_url ) [EOL] [EOL] @ reify def back_url ( self ) : [EOL] url = self . request . GET . get ( [string] ) [EOL] if url is None or not url . startswith ( [string] ) : [EOL] url = self . my_table_url [EOL] return add_url_fragment ( url , self . amendements [ [number] ] . slug ) [EOL] [EOL] @ property def submit_url ( self ) : [EOL] return add_url_params ( self . request . path , back = self . back_url ) [EOL] [EOL] @ property def my_table_url ( self ) : [EOL] return self . request . resource_url ( self . my_table_resource ) [EOL] [EOL] [EOL] @ view_config ( context = AmendementResource , name = [string] , renderer = [string] ) def amendement_journal ( context , request ) : [EOL] return { [string] : context . lecture_resource . model ( ) , [string] : context . lecture_resource , [string] : context . lecture_resource . dossier_resource , [string] : [string] , [string] : context . model ( ) , [string] : date . today ( ) , } [EOL] [EOL] [EOL] @ view_config ( context = AmendementResource , name = [string] , renderer = [string] ) def start_editing ( context , request ) : [EOL] for amendement in Batch . expanded_batches ( [ context . model ( ) ] ) : [EOL] amendement . start_editing ( ) [EOL] return { } [EOL] [EOL] [EOL] @ view_config ( context = AmendementResource , name = [string] , renderer = [string] ) def stop_editing ( context , request ) : [EOL] for amendement in Batch . expanded_batches ( [ context . model ( ) ] ) : [EOL] amendement . stop_editing ( ) [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from datetime import date , datetime [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession , User [EOL] from zam_repondeur . models . events . admin import AdminGrant , AdminRevoke [EOL] from zam_repondeur . resources import AdminsCollection [EOL] [EOL] [EOL] class AdminsCollectionBase : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] [EOL] [EOL] @ view_defaults ( context = AdminsCollection , permission = [string] ) class AdminsList ( AdminsCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] admins = self . context . models ( ) [EOL] last_event = self . context . events ( ) . first ( ) [EOL] if last_event : [EOL] last_event_datetime = last_event . created_at [EOL] last_event_timestamp = ( last_event_datetime - datetime ( [number] , [number] , [number] ) ) . total_seconds ( ) [EOL] else : [EOL] last_event_datetime = None [EOL] last_event_timestamp = None [EOL] return { [string] : admins , [string] : [string] , [string] : last_event_datetime , [string] : last_event_timestamp , } [EOL] [EOL] [EOL] @ view_defaults ( context = AdminsCollection , permission = [string] ) class AdminsRemove ( AdminsCollectionBase ) : [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] user_pk = self . request . POST [ [string] ] [EOL] if str ( self . request . user . pk ) == user_pk : [EOL] message = [string] [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] user = DBSession . query ( User ) . filter_by ( pk = user_pk ) . first ( ) [EOL] AdminRevoke . create ( target = user , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( [string] ) ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] [EOL] @ view_defaults ( context = AdminsCollection , name = [string] , permission = [string] ) class AdminsAddForm ( AdminsCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] users = DBSession . query ( User ) . all ( ) [EOL] return { [string] : [string] , [string] : users } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] user_pk = self . request . POST [ [string] ] [EOL] if not user_pk : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] , ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context , [string] ) ) [EOL] user = DBSession . query ( User ) . filter_by ( pk = user_pk ) . first ( ) [EOL] AdminGrant . create ( target = user , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( [string] ) ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] [EOL] @ view_config ( context = AdminsCollection , permission = [string] , name = [string] , renderer = [string] , ) def admins_journal ( context , request ) : [EOL] events = context . events ( ) . all ( ) [EOL] return { [string] : events , [string] : date . today ( ) , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from pyramid . httpexceptions import HTTPBadRequest , HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] from sqlalchemy . orm import joinedload [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import DBSession , Dossier , Team , User [EOL] from zam_repondeur . models . events . dossier import DossierActive [EOL] from zam_repondeur . resources import DossierCollection [EOL] from zam_repondeur . tasks . fetch import create_missing_lectures [EOL] [EOL] [EOL] class DossierCollectionBase : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . dossiers = context . models ( joinedload ( [string] ) ) [EOL] [EOL] [EOL] @ view_defaults ( context = DossierCollection ) class DossierList ( DossierCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] my_dossiers = [ dossier for dossier in self . dossiers if dossier . team [EOL] and ( self . request . user . is_admin or dossier . team in self . request . user . teams ) ] [EOL] return { [string] : my_dossiers , [string] : self . request . has_permission ( [string] , self . context ) , [string] : [string] , } [EOL] [EOL] [EOL] @ view_defaults ( context = DossierCollection , name = [string] , permission = [string] ) class DossierAddForm ( DossierCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] available_dossiers = [ dossier for dossier in self . dossiers if not dossier . team ] [EOL] return { [string] : available_dossiers , [string] : [string] } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] dossier_slug = self . _get_dossier_slug ( ) [EOL] [EOL] if not dossier_slug : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] dossier = Dossier . get ( slug = dossier_slug ) [EOL] [EOL] if dossier is None : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] if dossier . team : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] team = Team . create ( name = dossier . slug ) [EOL] dossier . team = team [EOL] for admin in DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) : [EOL] admin . teams . append ( team ) [EOL] [EOL] [comment] [EOL] create_missing_lectures ( dossier_pk = dossier . pk , user_pk = self . request . user . pk ) [EOL] [EOL] DossierActive . create ( dossier = dossier , request = self . request ) [EOL] [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( [string] ) , ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context [ dossier . url_key ] ) ) [EOL] [EOL] def _get_dossier_slug ( self ) : [EOL] try : [EOL] dossier_slug = self . request . POST [ [string] ] or [string] [EOL] except KeyError : [EOL] raise HTTPBadRequest [EOL] return dossier_slug [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Literal , Any , Dict , List , Union , Tuple [EOL] import typing [EOL] import builtins [EOL] import typing_extensions [EOL] import pyramid [EOL] import zam_repondeur [EOL] import os [EOL] from tempfile import NamedTemporaryFile [EOL] from typing import List , Tuple [EOL] [EOL] from pyramid . httpexceptions import HTTPBadRequest [EOL] from pyramid . request import Request [EOL] from pyramid . response import FileResponse , Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import joinedload , load_only , noload , subqueryload [EOL] [EOL] from zam_repondeur . models import ( Amendement , AmendementList , Article , Batch , DBSession , Lecture , ) [EOL] from zam_repondeur . resources import LectureResource [EOL] from zam_repondeur . services . import_export . json import export_json [EOL] from zam_repondeur . services . import_export . pdf import write_pdf , write_pdf_multiple [EOL] from zam_repondeur . services . import_export . xlsx import write_xlsx [EOL] [EOL] DOWNLOAD_FORMATS = { [string] : ( export_json , [string] ) , [string] : ( write_pdf , [string] ) , [string] : ( write_xlsx , [string] , ) , } [EOL] [EOL] USER_CONTENT_OPTIONS = joinedload ( [string] ) [EOL] LOCATION_OPTIONS = joinedload ( [string] ) . options ( joinedload ( [string] ) . joinedload ( [string] ) . load_only ( [string] , [string] ) ) [EOL] ARTICLE_OPTIONS = joinedload ( [string] ) . options ( load_only ( [string] , [string] , [string] , [string] , [string] ) , joinedload ( [string] ) , ) [EOL] DOSSIER_OPTIONS = joinedload ( [string] ) . load_only ( [string] ) [EOL] [EOL] EXPORT_OPTIONS = [ subqueryload ( [string] ) . options ( USER_CONTENT_OPTIONS , LOCATION_OPTIONS , ARTICLE_OPTIONS , ) , subqueryload ( [string] ) . joinedload ( [string] ) , ] [EOL] [EOL] PDF_OPTIONS = [ DOSSIER_OPTIONS , subqueryload ( [string] ) . options ( USER_CONTENT_OPTIONS , subqueryload ( [string] ) . options ( subqueryload ( [string] ) , joinedload ( [string] ) . defer ( [string] ) , USER_CONTENT_OPTIONS , LOCATION_OPTIONS , ARTICLE_OPTIONS , ) , ) , ] [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] ) def download_amendements ( context , request ) : [EOL] fmt = request . params . get ( [string] , [string] ) [EOL] if fmt not in DOWNLOAD_FORMATS . keys ( ) : [EOL] raise HTTPBadRequest ( f' [string] { fmt } [string] ' ) [EOL] [EOL] if fmt == [string] : [EOL] options = PDF_OPTIONS [EOL] else : [EOL] options = EXPORT_OPTIONS [EOL] [EOL] lecture = context . model ( * options ) [EOL] [EOL] with NamedTemporaryFile ( ) as file_ : [EOL] [EOL] tmp_file_path = os . path . abspath ( file_ . name ) [EOL] [EOL] write_func , content_type = DOWNLOAD_FORMATS [ fmt ] [EOL] write_func ( lecture , tmp_file_path , request ) [comment] [EOL] [EOL] response = FileResponse ( tmp_file_path ) [EOL] attach_name = ( f" [string] { lecture . chambre } [string] { lecture . texte . numero } [string] " f"{ lecture . organe } [string] { fmt }" ) [EOL] response . content_type = content_type [EOL] response . headers [ [string] ] = f" [string] { attach_name }" [EOL] return response [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] ) def export_xlsx ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) ) [EOL] nums , article_param = parse_params ( request , lecture = lecture ) [EOL] if article_param == [string] : [EOL] amendements = ( DBSession . query ( Amendement ) . join ( Article ) . filter ( Amendement . lecture == lecture , Amendement . num . in_ ( nums ) , ) . options ( USER_CONTENT_OPTIONS , LOCATION_OPTIONS ) ) [EOL] else : [EOL] article_type , article_num , article_mult , article_pos = article_param . split ( [string] ) [EOL] amendements = ( DBSession . query ( Amendement ) . filter ( Article . pk == Amendement . article_pk , Amendement . lecture == lecture , Article . type == article_type , Article . num == article_num , Article . mult == article_mult , Article . pos == article_pos , Amendement . num . in_ ( nums ) , ) . options ( USER_CONTENT_OPTIONS , LOCATION_OPTIONS ) ) [EOL] [EOL] expanded_amendements = list ( Batch . expanded_batches ( amendements ) ) [EOL] [EOL] with NamedTemporaryFile ( ) as file_ : [EOL] tmp_file_path = os . path . abspath ( file_ . name ) [EOL] write_xlsx ( lecture , tmp_file_path , request , amendements = expanded_amendements ) [EOL] return write_response ( tmp_file_path = tmp_file_path , fmt = [string] , lecture = lecture , article_param = article_param , amendements = expanded_amendements , ) [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] ) def export_pdf ( context , request ) : [EOL] lecture = context . model ( noload ( [string] ) , DOSSIER_OPTIONS , subqueryload ( [string] ) . options ( joinedload ( [string] ) ) , ) [EOL] nums , article_param = parse_params ( request , lecture = lecture ) [EOL] if article_param == [string] : [EOL] article_amendements = ( DBSession . query ( Amendement ) . join ( Article ) . filter ( Amendement . lecture == lecture , ) . options ( USER_CONTENT_OPTIONS , LOCATION_OPTIONS ) ) [EOL] else : [EOL] article_type , article_num , article_mult , article_pos = article_param . split ( [string] ) [EOL] article_amendements = ( DBSession . query ( Amendement ) . filter ( Article . pk == Amendement . article_pk , Amendement . lecture == lecture , Article . type == article_type , Article . num == article_num , Article . mult == article_mult , Article . pos == article_pos , ) . options ( USER_CONTENT_OPTIONS , LOCATION_OPTIONS , ) ) [EOL] [EOL] amendements = [ amendement for amendement in article_amendements if amendement . num in nums ] [EOL] expanded_amendements = list ( Batch . expanded_batches ( amendements ) ) [EOL] [EOL] with NamedTemporaryFile ( ) as file_ : [EOL] tmp_file_path = os . path . abspath ( file_ . name ) [EOL] write_pdf_multiple ( lecture = lecture , amendements = amendements , article_amendements = AmendementList ( article_amendements ) , filename = tmp_file_path , request = request , ) [EOL] return write_response ( tmp_file_path = tmp_file_path , fmt = [string] , lecture = lecture , article_param = article_param , amendements = expanded_amendements , ) [EOL] [EOL] [EOL] def parse_params ( request , lecture ) : [EOL] params = request . params . getall ( [string] ) [EOL] try : [EOL] nums = [ int ( num ) for num in params ] [EOL] except ValueError : [EOL] raise HTTPBadRequest ( ) [EOL] [EOL] total_count_amendements = lecture . nb_amendements [EOL] max_amendements_for_full_index = int ( request . registry . settings . get ( [string] , [number] ) ) [EOL] too_many_amendements = total_count_amendements > max_amendements_for_full_index [EOL] default_param = [string] if too_many_amendements else [string] [EOL] article_param = request . params . get ( [string] , default_param ) [EOL] return nums , article_param [EOL] [EOL] [EOL] def write_response ( tmp_file_path , fmt , lecture , article_param , amendements , ) : [EOL] response = FileResponse ( tmp_file_path ) [EOL] attach_name = generate_attach_name ( lecture = lecture , article_param = article_param , amendements = amendements , extension = fmt , ) [EOL] response . content_type = DOWNLOAD_FORMATS [ fmt ] [ [number] ] [EOL] response . headers [ [string] ] = f" [string] { attach_name }" [EOL] return response [EOL] [EOL] [EOL] def generate_attach_name ( lecture , article_param , amendements , extension ) : [EOL] lecture_name = f"{ lecture . chambre } [string] { lecture . texte . numero } [string] { lecture . organe } [string] " [EOL] article_name = ( f"{ article_param . replace ( [string] , [string] ) } [string] " if article_param != [string] else [string] ) [EOL] nums = sorted ( amdt . num for amdt in amendements ) [EOL] nb_amendements = len ( nums ) [EOL] if nb_amendements > [number] : [EOL] amendements_name = f"{ nb_amendements } [string] { nums [ [number] ] } [string] " [EOL] else : [EOL] amendements_name = ( f" [string] { [string] if nb_amendements > [number] else [string] } [string] " f"{ [string] . join ( str ( num ) for num in nums ) }" ) [EOL] return f"{ lecture_name }{ article_name }{ amendements_name } [string] { extension }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[builtins.int],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.FileResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config [EOL] from sqlalchemy . orm import joinedload [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models . events . lecture import ReponsesImporteesJSON [EOL] from zam_repondeur . resources import LectureResource [EOL] from zam_repondeur . services . import_export . json import import_json [EOL] [EOL] [EOL] @ view_config ( context = LectureResource , name = [string] , request_method = [string] ) def upload_json ( context , request ) : [EOL] [EOL] lecture = context . model ( joinedload ( [string] ) ) [EOL] [EOL] next_url = request . resource_url ( context [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if request . POST [ [string] ] == [string] : [EOL] request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = request . resource_url ( context , [string] ) ) [EOL] [EOL] try : [EOL] counter = import_json ( request = request , backup_file = request . POST [ [string] ] . file , lecture = lecture , amendements = { amendement . num : amendement for amendement in lecture . amendements } , articles = { article . sort_key_as_str : article for article in lecture . articles } , team = context . dossier_resource . dossier . team , ) [EOL] except ValueError as exc : [EOL] request . session . flash ( Message ( cls = [string] , text = str ( exc ) ) ) [EOL] return HTTPFound ( location = next_url ) [EOL] [EOL] if counter [ [string] ] or counter [ [string] ] : [EOL] if counter [ [string] ] : [EOL] message = f"{ counter [ [string] ] } [string] " [EOL] if counter [ [string] ] : [EOL] message += f" [string] { counter [ [string] ] } [string] " [EOL] elif counter [ [string] ] : [EOL] message = f"{ counter [ [string] ] } [string] " [EOL] request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] ReponsesImporteesJSON . create ( lecture = lecture , request = request ) [EOL] [EOL] if counter [ [string] ] or counter [ [string] ] : [EOL] message = [string] [EOL] if counter [ [string] ] : [EOL] message += f" [string] { counter [ [string] ] } [string] " [EOL] if counter [ [string] ] : [EOL] message += f" [string] { counter [ [string] ] } [string] " [EOL] elif counter [ [string] ] : [EOL] message += f" [string] { counter [ [string] ] } [string] " [EOL] request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] [EOL] return HTTPFound ( location = next_url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyramid [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from datetime import date , datetime [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import AllowedEmailPattern , DBSession , User [EOL] from zam_repondeur . models . events . whitelist import WhitelistAdd , WhitelistRemove [EOL] from zam_repondeur . resources import WhitelistCollection [EOL] [EOL] [EOL] class WhitelistCollectionBase : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] [EOL] [EOL] @ view_defaults ( context = WhitelistCollection , permission = [string] ) class WhitelistList ( WhitelistCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] email_patterns = self . context . models ( ) [EOL] last_event = self . context . events ( ) . first ( ) [EOL] if last_event : [EOL] last_event_datetime = last_event . created_at [EOL] last_event_timestamp = ( last_event_datetime - datetime ( [number] , [number] , [number] ) ) . total_seconds ( ) [EOL] else : [EOL] last_event_datetime = None [EOL] last_event_timestamp = None [EOL] return { [string] : email_patterns , [string] : [string] , [string] : last_event_datetime , [string] : last_event_timestamp , } [EOL] [EOL] [EOL] @ view_defaults ( context = WhitelistCollection , permission = [string] ) class WhitelistDelete ( WhitelistCollectionBase ) : [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] email_pattern_pk = self . request . POST [ [string] ] [EOL] allowed_email_pattern = ( DBSession . query ( AllowedEmailPattern ) . filter_by ( pk = email_pattern_pk ) . first ( ) ) [EOL] WhitelistRemove . create ( allowed_email_pattern = allowed_email_pattern , request = self . request ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( [string] ) , ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] [EOL] @ view_defaults ( context = WhitelistCollection , name = [string] , permission = [string] ) class WhitelistAddForm ( WhitelistCollectionBase ) : [EOL] @ view_config ( request_method = [string] , renderer = [string] ) def get ( self ) : [EOL] return { [string] : [string] } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] email_pattern = self . request . POST [ [string] ] or [string] [EOL] [EOL] if not email_pattern : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] allowed_email_pattern = ( DBSession . query ( AllowedEmailPattern ) . filter_by ( pattern = email_pattern ) . first ( ) ) [EOL] [EOL] if allowed_email_pattern : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] if User . email_is_allowed ( email_pattern ) : [EOL] self . request . session . flash ( Message ( cls = [string] , text = [string] ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] WhitelistAdd . create ( email_pattern = email_pattern , comment = None , request = self . request ) [EOL] [EOL] self . request . session . flash ( Message ( cls = [string] , text = ( [string] ) , ) ) [EOL] return HTTPFound ( location = self . request . resource_url ( self . context ) ) [EOL] [EOL] [EOL] @ view_config ( context = WhitelistCollection , permission = [string] , name = [string] , renderer = [string] , ) def whitelist_journal ( context , request ) : [EOL] events = context . events ( ) . all ( ) [EOL] return { [string] : events , [string] : date . today ( ) , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Generator , Any [EOL] import typing [EOL] import webob [EOL] import builtins [EOL] import pyramid [EOL] import zam_repondeur [EOL] from typing import Any , List , Optional [EOL] [EOL] from pyramid . httpexceptions import HTTPFound [EOL] from pyramid . request import Request [EOL] from pyramid . response import Response [EOL] from pyramid . view import view_config , view_defaults [EOL] from sqlalchemy . orm import joinedload [EOL] from webob . multidict import MultiDict [EOL] [EOL] from zam_repondeur . message import Message [EOL] from zam_repondeur . models import Amendement , Batch [EOL] from zam_repondeur . models . amendement import ReponseTuple [EOL] from zam_repondeur . models . events . amendement import ( AvisAmendementModifie , BatchSet , BatchUnset , CommentsAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] from zam_repondeur . resources import LectureResource [EOL] [EOL] [EOL] @ view_defaults ( context = LectureResource , renderer = [string] , name = [string] ) class BatchAmendements : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . lecture = self . context . model ( joinedload ( [string] ) ) [EOL] [EOL] @ view_config ( request_method = [string] ) def get ( self ) : [EOL] amendements = self . get_amendements_from ( self . request . GET ) [EOL] [EOL] self . check_amendements_are_all_on_my_table ( amendements ) [EOL] self . check_amendements_have_all_same_reponse_or_empty ( amendements ) [EOL] self . check_amendements_are_all_from_same_article ( amendements ) [EOL] self . check_amendements_are_all_from_same_mission ( amendements ) [EOL] [EOL] return { [string] : self . lecture , [string] : self . context , [string] : self . context . dossier_resource , [string] : [string] , [string] : amendements , [string] : self . my_table_url , } [EOL] [EOL] @ view_config ( request_method = [string] ) def post ( self ) : [EOL] [comment] [EOL] if len ( self . get_nums ( self . request . POST ) ) == [number] : [EOL] amendement = self . get_amendements_from ( self . request . POST ) [ [number] ] [EOL] BatchUnset . create ( amendement = amendement , request = self . request ) [EOL] return HTTPFound ( location = self . my_table_url ) [EOL] [EOL] amendements = list ( Batch . expanded_batches ( self . get_amendements_from ( self . request . POST ) ) ) [EOL] [EOL] self . check_amendements_are_all_on_my_table ( amendements ) [EOL] self . check_amendements_have_all_same_reponse_or_empty ( amendements ) [EOL] self . check_amendements_are_all_from_same_article ( amendements ) [EOL] [EOL] batch = Batch . create ( ) [EOL] shared_reponse = None [EOL] to_be_updated = [ ] [EOL] for amendement in amendements : [EOL] if amendement . location . batch : [EOL] BatchUnset . create ( amendement = amendement , request = self . request ) [EOL] BatchSet . create ( amendement = amendement , batch = batch , amendements_nums = [ amendement . num for amendement in amendements ] , request = self . request , ) [EOL] reponse = amendement . user_content . as_tuple ( ) [EOL] if not reponse . is_empty : [EOL] shared_reponse = reponse [EOL] else : [EOL] to_be_updated . append ( amendement ) [EOL] [EOL] if shared_reponse is not None and to_be_updated : [EOL] for amendement in to_be_updated : [EOL] if ( amendement . user_content . avis or [string] ) != shared_reponse . avis : [EOL] AvisAmendementModifie . create ( amendement = amendement , avis = shared_reponse . avis , request = self . request , ) [EOL] if ( amendement . user_content . objet or [string] ) != shared_reponse . objet : [EOL] ObjetAmendementModifie . create ( amendement = amendement , objet = shared_reponse . objet , request = self . request , ) [EOL] if ( amendement . user_content . reponse or [string] ) != shared_reponse . content : [EOL] ReponseAmendementModifiee . create ( amendement = amendement , reponse = shared_reponse . content , request = self . request , ) [EOL] if ( amendement . user_content . comments or [string] ) != shared_reponse . comments : [EOL] CommentsAmendementModifie . create ( amendement = amendement , comments = shared_reponse . comments , request = self . request , ) [EOL] [EOL] return HTTPFound ( location = self . my_table_url ) [EOL] [EOL] @ property def my_table_url ( self ) : [EOL] table_resource = self . context [ [string] ] [ self . request . user . email ] [EOL] return self . request . resource_url ( table_resource ) [EOL] [EOL] def get_amendements_from ( self , source ) : [EOL] return [ amendement for amendement in self . lecture . amendements if str ( amendement . num ) in self . get_nums ( source ) ] [EOL] [EOL] def get_nums ( self , source ) : [EOL] nums = source . getall ( [string] ) [EOL] return nums [EOL] [EOL] def check_amendements_are_all_on_my_table ( self , amendements ) : [EOL] are_all_on_my_table = all ( amendement . location . user_table . user == self . request . user [EOL] if amendement . location . user_table [EOL] else False for amendement in amendements ) [EOL] if are_all_on_my_table : [EOL] return [EOL] [EOL] message = ( [string] [string] ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] raise HTTPFound ( location = self . my_table_url ) [EOL] [EOL] def check_amendements_have_all_same_reponse_or_empty ( self , amendements ) : [EOL] reponses = ( amendement . user_content . as_tuple ( ) for amendement in amendements ) [EOL] non_empty_reponses = ( reponse for reponse in reponses if not reponse . is_empty ) [EOL] [EOL] if len ( set ( non_empty_reponses ) ) <= [number] : [comment] [EOL] return [EOL] [EOL] message = ( [string] [string] ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] raise HTTPFound ( location = self . my_table_url ) [EOL] [EOL] def check_amendements_are_all_from_same_article ( self , amendements ) : [EOL] first_article = amendements [ [number] ] . article [EOL] are_all_from_same_article = all ( amdt . article == first_article for amdt in amendements ) [EOL] if are_all_from_same_article : [EOL] return [EOL] [EOL] message = ( [string] [string] ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] raise HTTPFound ( location = self . my_table_url ) [EOL] [EOL] def check_amendements_are_all_from_same_mission ( self , amendements ) : [EOL] first_mission_titre = amendements [ [number] ] . mission_titre [EOL] are_all_from_same_mission = all ( amdt . mission_titre == first_mission_titre for amdt in amendements ) [EOL] if are_all_from_same_mission : [EOL] return [EOL] [EOL] message = ( [string] [string] ) [EOL] self . request . session . flash ( Message ( cls = [string] , text = message ) ) [EOL] raise HTTPFound ( location = self . my_table_url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $typing.Any$ 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $webob.multidict.MultiDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $webob.multidict.MultiDict$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $webob.multidict.MultiDict$ 0 0 0 $typing.List[builtins.str]$ 0 $webob.multidict.MultiDict$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $None$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[zam_repondeur.models.Amendement]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import datetime [EOL] import builtins [EOL] from datetime import datetime , timedelta , timezone [EOL] [EOL] from redis import Redis [EOL] [EOL] [EOL] class Repository : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . initialized = True [EOL] [EOL] def initialize ( self , redis_url ) : [EOL] self . connection = Redis . from_url ( redis_url ) [EOL] self . initialized = True [EOL] return self [EOL] [EOL] @ staticmethod def now ( ) : [EOL] return datetime . now ( tz = timezone . utc ) [EOL] [EOL] @ staticmethod def from_timestamp ( timestamp ) : [EOL] return datetime ( [number] , [number] , [number] , tzinfo = timezone . utc ) + timedelta ( seconds = timestamp ) [EOL] [EOL] @ staticmethod def to_timestamp ( dt ) : [EOL] return int ( ( dt - datetime ( [number] , [number] , [number] , tzinfo = timezone . utc ) ) . total_seconds ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Any , Dict [EOL] import typing [EOL] import datetime [EOL] import repondeur [EOL] import builtins [EOL] import pyramid [EOL] from datetime import datetime [EOL] from typing import Optional [EOL] [EOL] from pyramid . config import Configurator [EOL] [EOL] from zam_repondeur . initialize import needs_init [EOL] from zam_repondeur . services import Repository [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] repository . initialize ( redis_url = config . registry . settings [ [string] ] ) [EOL] [EOL] [EOL] class AmendementsRepository ( Repository ) : [EOL] [docstring] [EOL] [EOL] @ needs_init def clear_data ( self ) : [EOL] self . connection . flushdb ( ) [EOL] [EOL] @ needs_init def get_last_activity_time ( self , pk ) : [EOL] timestamp_bytes = self . connection . hget ( str ( pk ) , [string] ) [EOL] if timestamp_bytes : [EOL] return datetime . strptime ( timestamp_bytes . decode ( ) , [string] ) [EOL] else : [EOL] return None [EOL] [EOL] @ needs_init def start_editing ( self , pk , user_pk ) : [EOL] timestamp = datetime . utcnow ( ) . isoformat ( timespec = [string] ) [EOL] data = { [string] : timestamp , [string] : user_pk } [EOL] self . connection . hmset ( str ( pk ) , data ) [EOL] [EOL] @ needs_init def stop_editing ( self , pk ) : [EOL] self . connection . delete ( str ( pk ) ) [EOL] [EOL] [EOL] repository = AmendementsRepository ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict [EOL] import typing [EOL] import builtins [EOL] import threading [EOL] import threading [EOL] from html import unescape [EOL] [EOL] from bleach . sanitizer import Cleaner [EOL] [EOL] ALLOWED_TAGS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ALLOWED_ATTRIBUTES = { [string] : [ [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _THREAD_LOCALS = threading . local ( ) [EOL] [EOL] [EOL] def clean_html ( html ) : [EOL] text = unescape ( html ) [comment] [EOL] [EOL] if not hasattr ( _THREAD_LOCALS , [string] ) : [EOL] _THREAD_LOCALS . cleaner = Cleaner ( tags = ALLOWED_TAGS , attributes = ALLOWED_ATTRIBUTES , strip = True ) [EOL] [EOL] sanitized = _THREAD_LOCALS . cleaner . clean ( text ) [EOL] return sanitized . strip ( ) [EOL] [EOL] [EOL] def clean_all_html ( html ) : [EOL] text = unescape ( html ) [comment] [EOL] [EOL] if not hasattr ( _THREAD_LOCALS , [string] ) : [EOL] _THREAD_LOCALS . cleaner_all = Cleaner ( tags = [ ] , attributes = { } , strip = True ) [EOL] [EOL] sanitized = _THREAD_LOCALS . cleaner_all . clean ( text ) [EOL] return sanitized . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.local$ 0 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.local$ 0 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Any , Dict [EOL] import typing [EOL] import repondeur [EOL] import builtins [EOL] import pyramid [EOL] import zam_repondeur [EOL] import json [EOL] import pickle [comment] [EOL] from io import BytesIO [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] from pyramid . config import Configurator [EOL] from redis_lock import Lock , reset_all [EOL] [EOL] from zam_repondeur . initialize import needs_init [EOL] from zam_repondeur . services import Repository [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( get_dossiers_legislatifs_and_textes , ) [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef , TexteRef [EOL] from zam_repondeur . services . fetch . an . organes_acteurs import get_organes_acteurs [EOL] from zam_repondeur . services . fetch . senat . scraping import get_dossier_refs_senat [EOL] from zam_repondeur . services . fetch . senat . senateurs import ( Senateur , fetch_and_parse_senateurs , ) [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] init_repository ( config . registry . settings ) [EOL] [EOL] [EOL] def init_repository ( settings ) : [EOL] repository . initialize ( redis_url = settings [ [string] ] ) [EOL] repository . legislatures = [ int ( legi ) for legi in settings [ [string] ] . split ( [string] ) ] [EOL] [EOL] [EOL] class BackwardsCompatibleUnpickler ( pickle . Unpickler ) : [EOL] def find_class ( self , module , name ) : [EOL] if module . startswith ( [string] ) : [EOL] module = [string] + module [ [number] : ] [EOL] return super ( ) . find_class ( module , name ) [EOL] [EOL] [EOL] class DataRepository ( Repository ) : [EOL] [docstring] [EOL] [EOL] legislatures = [ ] [EOL] [EOL] @ needs_init def clear_data ( self ) : [EOL] self . connection . flushdb ( ) [EOL] [EOL] @ needs_init def reset_locks ( self ) : [EOL] reset_all ( self . connection ) [EOL] [EOL] @ needs_init def load_data ( self ) : [EOL] self . _load_opendata_organes_acteurs ( ) [EOL] self . _load_opendata_dossiers_textes ( ) [EOL] self . _load_scraping_senat_dossiers ( ) [EOL] self . _load_senateurs_groupes ( ) [EOL] [EOL] def _load_opendata_organes_acteurs ( self ) : [EOL] organes , acteurs = get_organes_acteurs ( ) [EOL] with Lock ( self . connection , [string] ) : [EOL] for uid , organe in organes . items ( ) : [EOL] self . _set_json_data ( self . _key_for_opendata_organe ( uid ) , organe ) [EOL] [EOL] for uid , acteur in acteurs . items ( ) : [EOL] self . _set_json_data ( self . _key_for_opendata_acteur ( uid ) , acteur ) [EOL] [EOL] def _load_opendata_dossiers_textes ( self ) : [EOL] dossiers , textes = get_dossiers_legislatifs_and_textes ( * self . legislatures ) [EOL] with Lock ( self . connection , [string] ) : [EOL] for dossier_ref in dossiers . values ( ) : [EOL] self . set_opendata_dossier_ref ( dossier_ref ) [EOL] [EOL] for texte_ref in textes . values ( ) : [EOL] self . set_opendata_texte_ref ( texte_ref ) [EOL] [EOL] def _load_scraping_senat_dossiers ( self ) : [EOL] dossier_refs = get_dossier_refs_senat ( ) [EOL] with Lock ( self . connection , [string] ) : [EOL] self . _clear_scraping_senat_dossiers ( ) [EOL] for dossier_ref in dossier_refs . values ( ) : [EOL] self . set_senat_scraping_dossier_ref ( dossier_ref ) [EOL] [EOL] def _clear_scraping_senat_dossiers ( self ) : [EOL] for pattern in [ self . _key_for_senat_scraping_dossier ( [string] ) , self . _key_for_senat_scraping_dossier_by_an_url ( [string] ) , ] : [EOL] keys = self . connection . keys ( pattern ) [EOL] if keys : [EOL] self . connection . delete ( * keys ) [EOL] [EOL] def set_senat_scraping_dossier_ref ( self , dossier_ref , ttl = [number] * [number] ) : [EOL] self . set_senat_scraping_dossier_ref_ref_by_id ( dossier_ref , ttl = ttl ) [EOL] self . set_senat_scraping_dossier_ref_ref_by_an_url ( dossier_ref , ttl = ttl ) [EOL] [EOL] def _load_senateurs_groupes ( self ) : [EOL] senateurs_by_matricule = fetch_and_parse_senateurs ( ) [EOL] with Lock ( self . connection , [string] ) : [EOL] for matricule , senateur in senateurs_by_matricule . items ( ) : [EOL] self . _set_pickled_data ( self . _key_for_senateur ( matricule ) , senateur ) [EOL] [EOL] def set_opendata_dossier_ref ( self , dossier_ref ) : [EOL] self . set_opendata_dossier_ref_by_uid ( dossier_ref ) [EOL] self . set_opendata_dossier_ref_by_an_url ( dossier_ref ) [EOL] self . set_opendata_dossier_ref_by_senat_url ( dossier_ref ) [EOL] [EOL] def set_opendata_dossier_ref_by_uid ( self , dossier_ref ) : [EOL] key = self . _key_for_opendata_dossier ( dossier_ref . uid ) [EOL] self . _set_pickled_data ( key , dossier_ref ) [EOL] [EOL] def set_opendata_dossier_ref_by_an_url ( self , dossier_ref ) : [EOL] an_url = dossier_ref . normalized_an_url [EOL] if an_url : [EOL] key = self . _key_for_opendata_dossier_by_an_url ( an_url ) [EOL] self . _set_pickled_data ( key , dossier_ref ) [EOL] [EOL] def set_opendata_dossier_ref_by_senat_url ( self , dossier_ref ) : [EOL] senat_url = dossier_ref . normalized_senat_url [EOL] if senat_url : [EOL] key = self . _key_for_opendata_dossier_by_senat_url ( senat_url ) [EOL] self . _set_pickled_data ( key , dossier_ref ) [EOL] [EOL] def set_opendata_texte_ref ( self , texte_ref ) : [EOL] key = self . _key_for_opendata_texte ( texte_ref . uid ) [EOL] self . _set_pickled_data ( key , texte_ref ) [EOL] [EOL] def set_senat_scraping_dossier_ref_ref_by_id ( self , dossier_ref , ttl ) : [EOL] if dossier_ref . senat_dossier_id : [EOL] key = self . _key_for_senat_scraping_dossier ( dossier_ref . senat_dossier_id ) [EOL] self . _set_pickled_data ( key , dossier_ref , ttl ) [EOL] [EOL] def set_senat_scraping_dossier_ref_ref_by_an_url ( self , dossier_ref , ttl ) : [EOL] an_url = dossier_ref . normalized_an_url [EOL] if an_url : [EOL] key = self . _key_for_senat_scraping_dossier_by_an_url ( an_url ) [EOL] self . _set_pickled_data ( key , dossier_ref , ttl ) [EOL] [EOL] @ staticmethod def _key_for_opendata_dossier ( uid ) : [EOL] return f" [string] { uid }" [EOL] [EOL] @ staticmethod def _key_for_opendata_dossier_by_an_url ( an_url ) : [EOL] return f" [string] { an_url }" [EOL] [EOL] @ staticmethod def _key_for_opendata_dossier_by_senat_url ( senat_url ) : [EOL] return f" [string] { senat_url }" [EOL] [EOL] @ staticmethod def _key_for_opendata_texte ( uid ) : [EOL] return f" [string] { uid }" [EOL] [EOL] @ staticmethod def _key_for_opendata_organe ( uid ) : [EOL] return f" [string] { uid }" [EOL] [EOL] @ staticmethod def _key_for_opendata_acteur ( uid ) : [EOL] return f" [string] { uid }" [EOL] [EOL] @ staticmethod def _key_for_senat_scraping_dossier ( uid ) : [EOL] return f" [string] { uid }" [EOL] [EOL] @ staticmethod def _key_for_senat_scraping_dossier_by_an_url ( an_url ) : [EOL] return f" [string] { an_url }" [EOL] [EOL] @ staticmethod def _key_for_senateur ( matricule ) : [EOL] return f" [string] { matricule }" [EOL] [EOL] @ needs_init def get_opendata_organe ( self , uid ) : [EOL] key = self . _key_for_opendata_organe ( uid ) [EOL] organe = self . _get_json_data ( key ) [EOL] return organe [EOL] [EOL] @ needs_init def get_opendata_acteur ( self , uid ) : [EOL] key = self . _key_for_opendata_acteur ( uid ) [EOL] acteur = self . _get_json_data ( key ) [EOL] return acteur [EOL] [EOL] @ needs_init def get_opendata_dossier_ref ( self , uid ) : [EOL] key = self . _key_for_opendata_dossier ( uid ) [EOL] dossier_ref = self . _get_pickled_data ( key ) [EOL] return dossier_ref [EOL] [EOL] @ needs_init def get_opendata_dossier_ref_by_an_url ( self , an_url ) : [EOL] key = self . _key_for_opendata_dossier_by_an_url ( an_url ) [EOL] dossier_ref = self . _get_pickled_data ( key ) [EOL] return dossier_ref [EOL] [EOL] @ needs_init def get_opendata_dossier_ref_by_senat_url ( self , senat_url ) : [EOL] key = self . _key_for_opendata_dossier ( senat_url ) [EOL] dossier_ref = self . _get_pickled_data ( key ) [EOL] return dossier_ref [EOL] [EOL] @ needs_init def list_opendata_dossiers ( self ) : [EOL] keys = self . connection . keys ( self . _key_for_opendata_dossier ( [string] ) ) [EOL] return [ key . decode ( [string] ) . split ( [string] ) [ - [number] ] for key in keys ] [EOL] [EOL] @ needs_init def list_opendata_textes ( self ) : [EOL] keys = self . connection . keys ( self . _key_for_opendata_texte ( [string] ) ) [EOL] return [ key . decode ( [string] ) . split ( [string] ) [ - [number] ] for key in keys ] [EOL] [EOL] @ needs_init def list_senat_scraping_dossiers ( self ) : [EOL] keys = self . connection . keys ( self . _key_for_senat_scraping_dossier ( [string] ) ) [EOL] return [ key . decode ( [string] ) . split ( [string] ) [ - [number] ] for key in keys ] [EOL] [EOL] @ needs_init def get_opendata_texte ( self , uid ) : [EOL] key = self . _key_for_opendata_texte ( uid ) [EOL] texte_ref = self . _get_pickled_data ( key ) [EOL] return texte_ref [EOL] [EOL] @ needs_init def get_senat_scraping_dossier_ref ( self , uid ) : [EOL] key = self . _key_for_senat_scraping_dossier ( uid ) [EOL] dossier_ref = self . _get_pickled_data ( key ) [EOL] return dossier_ref [EOL] [EOL] @ needs_init def get_senat_scraping_dossier_ref_by_an_url ( self , an_url ) : [EOL] key = self . _key_for_senat_scraping_dossier_by_an_url ( an_url ) [EOL] dossier_ref = self . _get_pickled_data ( key ) [EOL] return dossier_ref [EOL] [EOL] @ needs_init def get_senateur ( self , matricule ) : [EOL] key = self . _key_for_senateur ( matricule ) [EOL] senateur = self . _get_pickled_data ( key ) [EOL] return senateur [EOL] [EOL] @ needs_init def _set_pickled_data ( self , key , value , ttl = None ) : [EOL] self . connection . set ( key , pickle . dumps ( value ) , ex = ttl ) [EOL] [EOL] @ needs_init def _get_pickled_data ( self , key ) : [EOL] raw_bytes = self . _get_raw_data ( key ) [EOL] if raw_bytes is None : [EOL] return None [EOL] unpickler = BackwardsCompatibleUnpickler ( BytesIO ( raw_bytes ) ) [EOL] return unpickler . load ( ) [EOL] [EOL] @ needs_init def _set_json_data ( self , key , value ) : [EOL] self . connection . set ( key , json . dumps ( value ) ) [EOL] [EOL] @ needs_init def _get_json_data ( self , key ) : [EOL] raw_bytes = self . _get_raw_data ( key ) [EOL] if raw_bytes is None : [EOL] return None [EOL] return json . loads ( raw_bytes ) [EOL] [EOL] @ needs_init def _get_raw_data ( self , key ) : [EOL] with Lock ( self . connection , [string] ) : [EOL] response = self . connection . get ( key ) [EOL] return response [EOL] [EOL] [EOL] repository = DataRepository ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 $builtins.str$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 $builtins.str$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.dict$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.dict$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $typing.Optional[zam_repondeur.services.fetch.an.dossiers.models.DossierRef]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $typing.Optional[zam_repondeur.services.fetch.an.dossiers.models.DossierRef]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.TexteRef$ 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $typing.Optional[zam_repondeur.services.fetch.an.dossiers.models.DossierRef]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 $zam_repondeur.services.fetch.senat.senateurs.Senateur$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $zam_repondeur.services.fetch.senat.senateurs.Senateur$ 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.services.fetch.senat.senateurs.Senateur$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $repondeur.zam_repondeur.services.data.BackwardsCompatibleUnpickler$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $repondeur.zam_repondeur.services.data.BackwardsCompatibleUnpickler$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import repondeur [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] from datetime import timedelta [EOL] from typing import Dict , Optional [EOL] [EOL] from pyramid . config import Configurator [EOL] [EOL] from zam_repondeur . initialize import needs_init [EOL] from zam_repondeur . services import Repository [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] repository . initialize ( redis_url = config . registry . settings [ [string] ] ) [EOL] repository . max_duration = int ( config . registry . settings [ [string] ] ) [EOL] [EOL] [EOL] class ProgressRepository ( Repository ) : [EOL] [docstring] [EOL] [EOL] max_duration = [number] [EOL] [EOL] @ needs_init def clear_data ( self ) : [EOL] self . connection . flushdb ( ) [EOL] [EOL] @ staticmethod def _key_for_progress ( lecture_pk ) : [EOL] return f" [string] { lecture_pk }" [EOL] [EOL] @ needs_init def set_fetch_progress ( self , lecture_pk , current , total ) : [EOL] key = self . _key_for_progress ( lecture_pk ) [EOL] expires_at = self . to_timestamp ( self . now ( ) + timedelta ( seconds = self . max_duration * [number] ) ) [EOL] self . connection . hmset ( key , { [string] : current , [string] : total } ) [EOL] self . connection . expireat ( key , expires_at ) [EOL] [EOL] @ needs_init def reset_fetch_progress ( self , lecture_pk ) : [EOL] key = self . _key_for_progress ( lecture_pk ) [EOL] self . connection . hdel ( key , [string] , [string] ) [EOL] [EOL] @ needs_init def get_fetch_progress ( self , lecture_pk ) : [EOL] key = self . _key_for_progress ( lecture_pk ) [EOL] progress = { key . decode ( ) : int ( value ) for key , value in self . connection . hgetall ( key ) . items ( ) } [EOL] return progress [EOL] [EOL] [EOL] repository = ProgressRepository ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $repondeur.zam_repondeur.services.progress.ProgressRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $repondeur.zam_repondeur.services.progress.ProgressRepository$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.int]]$ 0 0 0 $repondeur.zam_repondeur.services.progress.ProgressRepository$ 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import typing [EOL] import datetime [EOL] import repondeur [EOL] import builtins [EOL] import pyramid [EOL] from datetime import datetime , timedelta [EOL] from typing import Dict , Optional [EOL] [EOL] from pyramid . config import Configurator [EOL] from redis . exceptions import WatchError [EOL] [EOL] from zam_repondeur . initialize import needs_init [EOL] from zam_repondeur . services import Repository [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] repository . initialize ( redis_url = config . registry . settings [ [string] ] ) [EOL] repository . auth_token_duration = int ( config . registry . settings [ [string] ] ) [EOL] [EOL] [EOL] class TokenAlreadyExists ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class UsersRepository ( Repository ) : [EOL] [docstring] [EOL] [EOL] auth_token_duration = [number] [EOL] [EOL] @ needs_init def clear_data ( self ) : [EOL] self . connection . flushdb ( ) [EOL] [EOL] @ needs_init def get_last_activity_time ( self , email ) : [EOL] timestamp_bytes = self . connection . get ( email ) [EOL] if timestamp_bytes : [EOL] return datetime . strptime ( timestamp_bytes . decode ( ) , [string] ) [EOL] else : [EOL] return None [EOL] [EOL] @ needs_init def set_last_activity_time ( self , email ) : [EOL] timestamp = datetime . utcnow ( ) . isoformat ( timespec = [string] ) [EOL] self . connection . set ( email , timestamp ) [EOL] [EOL] @ needs_init def set_auth_token ( self , email , token ) : [EOL] key = self . _auth_key ( token ) [EOL] expires_at = self . to_timestamp ( self . now ( ) + timedelta ( seconds = self . auth_token_duration ) ) [EOL] pipe = self . connection . pipeline ( ) [EOL] try : [EOL] pipe . watch ( key ) [comment] [EOL] if pipe . exists ( key ) : [EOL] pipe . unwatch ( ) [EOL] raise TokenAlreadyExists [EOL] pipe . multi ( ) [comment] [EOL] pipe . hmset ( key , { [string] : email , [string] : expires_at } ) [EOL] pipe . expireat ( key , expires_at ) [EOL] pipe . execute ( ) [comment] [EOL] except WatchError : [EOL] raise TokenAlreadyExists [EOL] [EOL] @ needs_init def get_auth_token_data ( self , token ) : [EOL] key = self . _auth_key ( token ) [EOL] auth = self . connection . hgetall ( key ) [EOL] if auth == { } : [comment] [EOL] return None [EOL] [EOL] [comment] [EOL] expires_at = self . from_timestamp ( float ( auth [ [string] ] ) ) [EOL] if self . now ( ) >= expires_at : [EOL] return None [EOL] [EOL] return { key . decode ( [string] ) : value . decode ( [string] ) for key , value in auth . items ( ) } [EOL] [EOL] @ needs_init def delete_auth_token ( self , token ) : [EOL] key = self . _auth_key ( token ) [EOL] self . connection . delete ( key ) [EOL] [EOL] @ staticmethod def _auth_key ( token ) : [EOL] return f" [string] { token }" [EOL] [EOL] [EOL] repository = UsersRepository ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0
import zam_repondeur [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRefsByUID [EOL] [EOL] [EOL] def get_dossiers_legislatifs_open_data_from_cache ( ) : [EOL] dossiers = { uid : repository . get_opendata_dossier_ref ( uid ) for uid in repository . list_opendata_dossiers ( ) } [EOL] return dossiers [EOL] [EOL] [EOL] def get_dossiers_legislatifs_scraping_senat_from_cache ( ) : [EOL] dossiers = { uid : repository . get_senat_scraping_dossier_ref ( uid ) for uid in repository . list_senat_scraping_dossiers ( ) } [EOL] return dossiers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] from datetime import date [EOL] from typing import Optional [EOL] [EOL] [EOL] def parse_date ( rfc339_datetime_string ) : [EOL] if not rfc339_datetime_string : [EOL] return None [EOL] return date ( year = int ( rfc339_datetime_string [ [number] : [number] ] ) , month = int ( rfc339_datetime_string [ [number] : [number] ] ) , day = int ( rfc339_datetime_string [ [number] : [number] ] ) , ) [EOL] [EOL] [EOL] def parse_french_date ( french_datetime_string ) : [EOL] if french_datetime_string == [string] : [EOL] return None [EOL] return date ( day = int ( french_datetime_string [ [number] : [number] ] ) , month = int ( french_datetime_string [ [number] : [number] ] ) , year = int ( french_datetime_string [ [number] : [number] ] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union , Tuple , Any [EOL] import requests [EOL] import typing [EOL] import cachecontrol [EOL] import builtins [EOL] import pyramid [EOL] from typing import Any , Optional , Union [EOL] [EOL] import requests [EOL] from cachecontrol import CacheControl , CacheController [EOL] from cachecontrol . caches . file_cache import FileCache [EOL] from cachecontrol . heuristics import ExpiresAfter [EOL] from pyramid . config import Configurator [EOL] from pyramid . registry import Registry [EOL] from pyramid . threadlocal import get_current_registry [EOL] from zope . interface import Interface [EOL] [EOL] [EOL] class CustomCacheController ( CacheController ) : [EOL] def __init__ ( self , cache = None , cache_etags = True , serializer = None , status_codes = None , ) : [EOL] [comment] [EOL] [comment] [EOL] status_codes = ( [number] , [number] , [number] , [number] ) + ( [number] , ) [EOL] super ( ) . __init__ ( cache , cache_etags , serializer , status_codes ) [EOL] [EOL] [EOL] class IHTTPSession ( Interface ) : [EOL] pass [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] session = requests . session ( ) [EOL] http_cache_dir = config . registry . settings [ [string] ] [EOL] http_cache_duration = int ( config . registry . settings [ [string] ] ) [EOL] cached_session = CacheControl ( session , cache = FileCache ( http_cache_dir ) , heuristic = ExpiresAfter ( minutes = http_cache_duration ) , controller_class = CustomCacheController , ) [EOL] config . registry . registerUtility ( component = cached_session , provided = IHTTPSession ) [EOL] [EOL] [EOL] def get_http_session ( registry = None , ) : [EOL] if registry is None : [EOL] registry = get_current_registry ( ) [EOL] cached_session = registry . queryUtility ( IHTTPSession ) [EOL] if cached_session is None : [EOL] return requests . session ( ) [comment] [EOL] return cached_session [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 $typing.Any$ 0 $typing.Optional[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[requests.Session,cachecontrol.CacheControl]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . articles import get_articles [comment] [EOL]	0 0 0 0 0 0 0
from typing import Optional , List , Any [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] import unicodedata [EOL] from typing import Any , List , Optional [EOL] [EOL] from parsy import ParseError , regex , seq , string , string_from , whitespace [EOL] [EOL] from zam_repondeur . models . division import ADJECTIFS_MULTIPLICATIFS , SubDiv [EOL] from zam_repondeur . models . texte import Texte [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def case_insensitive_string ( expected_string ) : [EOL] return string ( expected_string , transform = lambda s : s . lower ( ) ) [EOL] [EOL] [EOL] def case_insensitive_string_from ( * expected_strings ) : [EOL] return string_from ( * expected_strings , transform = lambda s : s . lower ( ) ) [EOL] [EOL] [EOL] def remove_accents ( s ) : [EOL] return [string] . join ( c for c in unicodedata . normalize ( [string] , s ) if not unicodedata . combining ( c ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] CHIFFRES_ARABES = case_insensitive_string_from ( [string] , [string] , [string] ) . result ( [string] ) | regex ( [string] ) [EOL] [EOL] CHIFFRES_ROMAINS = case_insensitive_string ( [string] ) | regex ( [string] ) [EOL] [EOL] LETTRES_CAPITALES = regex ( [string] ) . map ( remove_accents ) [comment] [EOL] [EOL] NUMERO = ( string ( [string] ) . result ( [string] ) | case_insensitive_string_from ( [string] , [string] ) . result ( [string] ) | string ( [string] ) | CHIFFRES_ARABES | CHIFFRES_ROMAINS | LETTRES_CAPITALES ) [EOL] [EOL] MULTIPLICATIF = string_from ( * ADJECTIFS_MULTIPLICATIFS ) [EOL] [EOL] ADDITIONNEL = LETTRES_CAPITALES [comment] [EOL] [EOL] MULT_ADD = ( seq ( MULTIPLICATIF << whitespace . optional ( ) , ADDITIONNEL ) . map ( [string] . join ) | MULTIPLICATIF | ADDITIONNEL ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INTITULE = ( ( case_insensitive_string ( [string] ) >> whitespace >> case_insensitive_string_from ( [string] , [string] , [string] ) >> whitespace ) . optional ( ) >> case_insensitive_string_from ( [string] , [string] , [string] ) . result ( [string] ) << regex ( [string] ) ) [EOL] [EOL] MOTION = string ( [string] ) . result ( [string] ) [EOL] [EOL] DIVISION_UNIQUE = ( INTITULE | MOTION ) . map ( lambda type_ : SubDiv . create ( type_ = type_ ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] CHAPITRE = ( case_insensitive_string ( [string] ) << whitespace ) . result ( [string] ) [EOL] [EOL] TITRE = ( case_insensitive_string ( [string] ) << whitespace ) . result ( [string] ) [EOL] [EOL] SECTION = ( case_insensitive_string ( [string] ) << whitespace ) . result ( [string] ) [EOL] [EOL] SOUS_SECTION = ( case_insensitive_string_from ( [string] , [string] ) << whitespace ) . result ( [string] ) [EOL] [EOL] BLA_BLA = ( regex ( [string] ) | regex ( [string] ) | regex ( [string] ) | regex ( [string] ) | regex ( [string] ) | regex ( [string] ) | whitespace ) [EOL] [EOL] DIVISION_NUMEROTEE = ( seq ( ( CHAPITRE | TITRE | SECTION | SOUS_SECTION ) . tag ( [string] ) , NUMERO . tag ( [string] ) , ( whitespace >> MULTIPLICATIF ) . optional ( ) . tag ( [string] ) , ) . combine_dict ( SubDiv . create ) . skip ( BLA_BLA . optional ( ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def check_all_equal ( pos_list ) : [EOL] if len ( set ( pos_list ) ) != [number] : [EOL] raise RuntimeError ( f" [string] { pos_list !r} [string] " ) [EOL] return pos_list [ [number] ] [EOL] [EOL] [EOL] ARTICLE = ( ( case_insensitive_string_from ( [string] , [string] , [string] ) << whitespace ) . optional ( ) . result ( [string] ) ) [EOL] [EOL] AVANT_APRES = ( ( string_from ( [string] , [string] , [string] , [string] , [string] , ) << whitespace ) . optional ( ) >> ( case_insensitive_string ( [string] ) . result ( [string] ) | case_insensitive_string ( [string] ) . result ( [string] ) | case_insensitive_string ( [string] ) . result ( [string] ) ) << whitespace ) . at_least ( [number] ) . map ( check_all_equal ) << case_insensitive_string ( [string] ) . optional ( ) [EOL] [EOL] [EOL] ARTICLE_UNIQUE = ( seq ( ARTICLE . tag ( [string] ) , ( case_insensitive_string ( [string] ) << whitespace ) . optional ( ) . tag ( None ) , NUMERO . tag ( [string] ) , ( whitespace . optional ( ) >> MULT_ADD << whitespace . optional ( ) ) . optional ( ) . tag ( [string] ) , ) . combine_dict ( SubDiv . create ) . skip ( BLA_BLA . optional ( ) ) ) [EOL] [EOL] [EOL] ART_ADD_TITRE = seq ( AVANT_APRES . tag ( [string] ) , INTITULE . tag ( [string] ) ) . combine_dict ( SubDiv . create ) [EOL] [EOL] ART_ADD_DIVISION = ( seq ( AVANT_APRES . tag ( [string] ) , ( CHAPITRE | TITRE ) . tag ( [string] ) , NUMERO . tag ( [string] ) , ( whitespace >> MULTIPLICATIF ) . optional ( ) . tag ( [string] ) , ) . combine_dict ( SubDiv . create ) . skip ( BLA_BLA . optional ( ) ) ) [EOL] [EOL] ART_ADD_ARTICLE = ( seq ( AVANT_APRES . tag ( [string] ) , ARTICLE . tag ( [string] ) , NUMERO . tag ( [string] ) , ( whitespace >> MULT_ADD ) . optional ( ) . tag ( [string] ) , ) . combine_dict ( SubDiv . create ) . skip ( BLA_BLA . optional ( ) ) ) [EOL] [EOL] ARTICLE_ADDITIONNEL = ART_ADD_TITRE | ART_ADD_DIVISION | ART_ADD_ARTICLE [EOL] [EOL] [EOL] INTERVALLE = seq ( ARTICLE . tag ( [string] ) , NUMERO . tag ( [string] ) , ( whitespace >> MULT_ADD ) . optional ( ) . tag ( [string] ) , seq ( whitespace , string ( [string] ) , whitespace , NUMERO , ( whitespace >> MULT_ADD ) . optional ( ) , ) . tag ( None ) , ) . combine_dict ( SubDiv . create ) [EOL] [EOL] [EOL] ANNEXE = seq ( case_insensitive_string ( [string] ) . result ( [string] ) . tag ( [string] ) , ( whitespace >> NUMERO ) . optional ( ) . tag ( [string] ) , ) . combine_dict ( SubDiv . create ) [EOL] [EOL] [EOL] EMPTY = string ( [string] ) . result ( SubDiv . create ( type_ = [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] DIVISION = ( ANNEXE | DIVISION_UNIQUE | DIVISION_NUMEROTEE | INTERVALLE | ARTICLE_ADDITIONNEL | ARTICLE_UNIQUE | EMPTY ) [EOL] [EOL] [EOL] def parse_subdiv ( libelle , texte = None ) : [EOL] try : [EOL] subdiv = DIVISION . parse ( libelle ) [EOL] return subdiv [EOL] except ( ParseError , RuntimeError ) : [EOL] logger . exception ( f" [string] { libelle !r}" ) [EOL] return SubDiv ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $zam_repondeur.models.division.SubDiv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import requests [EOL] import builtins [EOL] from requests import Response [EOL] [EOL] [EOL] class NotFound ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class FetchError ( Exception ) : [EOL] def __init__ ( self , url , response ) : [EOL] self . url = url [EOL] self . response = response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 $requests.models.Response$ 0
from typing import Dict , Optional , List , Tuple , Type [EOL] import typing [EOL] import logging [EOL] import logging [EOL] from typing import Dict , List , NamedTuple , Optional , Tuple [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class MissionRef ( NamedTuple ) : [EOL] titre = ... [EOL] titre_court = ... [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] Session = str [EOL] Texte = int [EOL] Partie = Optional [ int ] [EOL] IdTxt = int [EOL] [EOL] ID_TXT_MISSIONS = { [string] : { [number] : { [number] : [ ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) ] , [number] : [ ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ] , } } , [string] : { [number] : { [number] : [ ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) ] , [number] : [ ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] , ) , ) , ( [number] , MissionRef ( titre = [string] , titre_court = [string] ) ) , ] , } } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[Session,typing.Dict[Texte,typing.Dict[Partie,typing.List[typing.Tuple[IdTxt,MissionRef
	0
from typing import Iterator , Generator , Any , Dict , Iterable , Optional , List , Match , Set , Tuple [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] import bs4 [EOL] import builtins [EOL] import zam_repondeur [EOL] import logging [EOL] import re [EOL] from datetime import datetime , timedelta [EOL] from http import HTTPStatus [EOL] from typing import Dict , Iterable , Iterator , List , Optional , Set , Tuple [EOL] from urllib . parse import urljoin [EOL] [EOL] from bs4 import BeautifulSoup , element [EOL] [EOL] from zam_repondeur . models . phase import ALL_PHASES , Phase [EOL] from zam_repondeur . services . fetch . an . dossiers . models import ( Chambre , DossierRef , DossierRefsByUID , LectureRef , TexteRef , TypeTexte , ) [EOL] from zam_repondeur . services . fetch . http import get_http_session [EOL] from zam_repondeur . slugs import slugify [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] BASE_URL_SENAT = [string] [EOL] TEXTES_RECENTS_URL = f"{ BASE_URL_SENAT } [string] " [EOL] [EOL] [EOL] def get_dossier_refs_senat ( ) : [EOL] html = download_textes_recents ( ) [EOL] webpages_urls = extract_recent_urls ( html ) [EOL] dossier_ids = ( extract_dossier_id ( webpage_url ) for webpage_url in webpages_urls ) [EOL] dossier_refs = ( create_dossier_ref ( dossier_id ) for dossier_id in dossier_ids ) [EOL] dossier_refs_by_uid = { dossier_ref . uid : dossier_ref for dossier_ref in dossier_refs } [EOL] return dossier_refs_by_uid [EOL] [EOL] [EOL] def download_textes_recents ( ) : [EOL] http_session = get_http_session ( ) [EOL] resp = http_session . get ( TEXTES_RECENTS_URL ) [EOL] if resp . status_code != HTTPStatus . OK : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] content = resp . text [EOL] return content [EOL] [EOL] [EOL] def extract_recent_urls ( html ) : [EOL] soup = BeautifulSoup ( html , [string] ) [EOL] next_textes_box = soup . select ( [string] ) [ [number] ] [EOL] return { link . attrs . get ( [string] , [string] ) for link in next_textes_box . select ( [string] ) if [string] in link . attrs . get ( [string] , [string] ) } [EOL] [EOL] [EOL] def extract_dossier_id ( webpage_url ) : [EOL] prefix = len ( [string] ) [EOL] suffix = len ( [string] ) [EOL] return webpage_url [ prefix : - suffix ] [EOL] [EOL] [EOL] def build_webpage_url ( dossier_id ) : [EOL] return urljoin ( BASE_URL_SENAT , f" [string] { dossier_id } [string] " ) [EOL] [EOL] [EOL] def build_rss_url ( dossier_id ) : [EOL] return urljoin ( BASE_URL_SENAT , f" [string] { dossier_id } [string] " ) [EOL] [EOL] [EOL] def create_dossier_ref ( dossier_id ) : [EOL] webpage_url = build_webpage_url ( dossier_id ) [EOL] rss_url = build_rss_url ( dossier_id ) [EOL] title , lecture_refs = extract_from_rss ( dossier_id , rss_url ) [EOL] dossier_ref = DossierRef ( uid = dossier_id , titre = title , slug = slugify ( title ) , an_url = [string] , senat_url = webpage_url , lectures = lecture_refs , ) [EOL] return dossier_ref [EOL] [EOL] [EOL] def extract_from_rss ( dossier_id , rss_url ) : [EOL] rss_content = download_rss ( rss_url ) [EOL] soup = BeautifulSoup ( rss_content , [string] ) [EOL] [EOL] prefix = len ( [string] ) [EOL] title = soup . title . string [ prefix : ] [EOL] [EOL] lecture_refs = [ ] [EOL] entries = sorted ( soup . select ( [string] ) , key = lambda e : e . created . string ) [EOL] senat_entries = [ entry for entry in entries if guess_chambre ( entry ) == Chambre . SENAT ] [EOL] texte_refs = extract_texte_refs ( dossier_id , senat_entries ) [EOL] lecture_refs = list ( extract_lecture_refs ( dossier_id , senat_entries , texte_refs ) ) [EOL] return title , lecture_refs [EOL] [EOL] [EOL] def canonical_senat_url ( url ) : [EOL] [comment] [EOL] return url . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def download_rss ( url ) : [EOL] http_session = get_http_session ( ) [EOL] resp = http_session . get ( url ) [EOL] if resp . status_code != HTTPStatus . OK : [EOL] raise RuntimeError ( f" [string] { url }" ) [EOL] [EOL] content = resp . text [EOL] return content [EOL] [EOL] [EOL] def extract_texte_refs ( dossier_id , entries ) : [EOL] textes = { } [EOL] for entry in entries : [EOL] if entry . title . string . startswith ( [string] ) : [EOL] texte = create_texte_ref ( dossier_id , entry ) [EOL] textes [ texte . numero ] = texte [EOL] return textes [EOL] [EOL] [EOL] def extract_lecture_refs ( dossier_id , entries , textes ) : [EOL] for phase in ALL_PHASES : [EOL] parties = _list_parties ( dossier_id , phase ) [EOL] for partie in parties : [EOL] lecture_commission = find_examen_commission ( phase , entries , textes , partie ) [EOL] if lecture_commission : [EOL] yield lecture_commission [EOL] texte_initial = lecture_commission . texte if lecture_commission else None [EOL] texte_commission = find_texte_commission ( phase , entries , textes ) [EOL] texte_examine = texte_commission or texte_initial [EOL] if not texte_examine : [EOL] continue [EOL] for partie in parties : [EOL] yield from find_examens_seance_publique ( phase , entries , textes , texte_examine , partie ) [EOL] [EOL] [EOL] def _list_parties ( dossier_id , phase ) : [EOL] if dossier_id . startswith ( [string] ) and phase == Phase . PREMIERE_LECTURE : [EOL] return [ [number] , [number] ] [EOL] return [ None ] [EOL] [EOL] [EOL] def find_texte_commission ( phase , entries , textes ) : [EOL] for entry in entries : [EOL] if extract_phase ( entry ) != phase : [EOL] continue [EOL] if is_texte_initial ( entry . summary . string ) : [EOL] continue [EOL] [EOL] num_texte = extract_texte_num ( entry . title . string , regexp = [string] ) [EOL] if not num_texte : [EOL] continue [EOL] [EOL] return textes [ num_texte ] [EOL] return None [EOL] [EOL] [EOL] def find_examen_commission ( phase , entries , textes , partie , ) : [EOL] for entry in entries : [EOL] if not entry . title . string . startswith ( [string] ) : [EOL] continue [EOL] [EOL] if extract_phase ( entry ) != phase : [EOL] continue [EOL] [EOL] if not is_texte_initial ( entry . summary . string ) : [EOL] continue [EOL] [EOL] num_texte = extract_texte_num ( entry . title . string ) [EOL] if not num_texte : [EOL] continue [EOL] [EOL] texte = textes [ num_texte ] [EOL] [EOL] return LectureRef ( chambre = Chambre . SENAT , phase = phase , titre = f"{ _PHASE_TO_STR [ phase ] } [string] " , organe = [string] , texte = texte , partie = partie , ) [EOL] return None [EOL] [EOL] [EOL] def find_examens_seance_publique ( phase , entries , textes , texte_examine , partie , ) : [EOL] lecture_refs = list ( find_amendements_seance_publique ( phase , entries , textes , partie ) ) [EOL] if lecture_refs : [EOL] return lecture_refs [EOL] [comment] [EOL] return [ LectureRef ( chambre = Chambre . SENAT , phase = phase , titre = f"{ _PHASE_TO_STR [ phase ] } [string] " , organe = [string] , texte = texte_examine , partie = partie , ) ] [EOL] [EOL] [EOL] def find_amendements_seance_publique ( phase , entries , textes , partie , ) : [EOL] for entry in entries : [EOL] if extract_phase ( entry ) != phase : [EOL] continue [EOL] [EOL] num_texte = extract_texte_num ( entry . title . string , regexp = [string] ) [EOL] if not num_texte : [EOL] continue [EOL] [EOL] texte = textes [ num_texte ] [EOL] [EOL] yield LectureRef ( chambre = Chambre . SENAT , phase = phase , titre = f"{ _PHASE_TO_STR [ phase ] } [string] " , organe = [string] , texte = texte , partie = partie , ) [EOL] [EOL] [EOL] def extract_texte_num ( title , regexp = [string] ) : [EOL] mo = re . search ( regexp , title ) [EOL] if mo is None : [EOL] return [number] [EOL] [EOL] return int ( mo . group ( [number] ) ) [EOL] [EOL] [EOL] def extract_phase ( entry ) : [EOL] phase = entry . summary . string . split ( [string] , [number] ) [ [number] ] [EOL] return _STR_TO_PHASE . get ( phase , None ) [EOL] [EOL] [EOL] _STR_TO_PHASE = { [string] : Phase . PREMIERE_LECTURE , [string] : Phase . DEUXIEME_LECTURE , [string] : Phase . NOUVELLE_LECTURE , [string] : Phase . LECTURE_DEFINITIVE , } [EOL] [EOL] [EOL] _PHASE_TO_STR = { Phase . PREMIERE_LECTURE : [string] , Phase . DEUXIEME_LECTURE : [string] , Phase . NOUVELLE_LECTURE : [string] , Phase . LECTURE_DEFINITIVE : [string] , } [EOL] [EOL] [EOL] def is_texte_initial ( summary ) : [EOL] if re . search ( [string] , summary ) : [EOL] return True [EOL] if re . search ( [string] , summary ) : [EOL] return False [EOL] logger . warning ( f" [string] { summary }" ) [EOL] return False [EOL] [EOL] [EOL] def create_texte_ref ( dossier_id , entry ) : [EOL] numero = entry . title . string . split ( [string] , [number] ) [ [number] ] [EOL] type_dict = { [string] : TypeTexte . PROPOSITION , [string] : TypeTexte . PROPOSITION , [string] : TypeTexte . PROJET , [string] : TypeTexte . PROJET , } [EOL] type_ = dossier_id [ : [number] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] datetime_depot = datetime . strptime ( entry . created . string , [string] ) [EOL] date_depot = datetime_depot . date ( ) + timedelta ( days = [number] ) [EOL] uid = f"{ type_ . upper ( ) } [string] { date_depot . year } [string] { numero }" [EOL] return TexteRef ( uid = uid , type_ = type_dict [ type_ ] , chambre = Chambre . SENAT , legislature = None , numero = int ( numero ) , titre_long = [string] , titre_court = [string] , date_depot = date_depot , ) [EOL] [EOL] [EOL] def guess_chambre ( entry ) : [EOL] entry_id = entry . id . string or [string] [EOL] [EOL] if entry_id . startswith ( BASE_URL_SENAT ) : [EOL] return Chambre . SENAT [EOL] [EOL] if re . search ( [string] , entry_id ) : [EOL] return Chambre . AN [EOL] [EOL] if [string] in entry . summary . string : [EOL] return Chambre . AN [EOL] [EOL] if entry . summary . string . startswith ( [string] ) : [EOL] return None [EOL] [EOL] [comment] [EOL] return Chambre . SENAT [EOL]	typing.Optional[zam_repondeur.services.fetch.an.dossiers.models.Chambre]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict [EOL] import typing [EOL] import builtins [EOL] import models [EOL] from typing import Dict [EOL] [EOL] from . fetch import fetch_senateurs [EOL] from . models import Senateur [EOL] from . parse import parse_senateurs [EOL] [EOL] [EOL] def fetch_and_parse_senateurs ( ) : [EOL] [comment] [EOL] data = fetch_senateurs ( ) [EOL] for encoding in [ [string] , [string] ] : [EOL] try : [EOL] lines = data . decode ( encoding ) . splitlines ( ) [EOL] by_matricule = parse_senateurs ( lines ) [EOL] return by_matricule [EOL] except ( UnicodeDecodeError , KeyError ) : [EOL] continue [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Senateur]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterable , Generator , Dict [EOL] import repondeur [EOL] import typing [EOL] import builtins [EOL] import models [EOL] import csv [EOL] from typing import Dict , Iterable [EOL] [EOL] from . models import Senateur [EOL] [EOL] [EOL] def parse_senateurs ( iterable ) : [EOL] lines = ( line for line in iterable if not line . startswith ( [string] ) ) [EOL] senateurs = ( Senateur ( matricule = row [ [string] ] , qualite = row [ [string] ] , nom = row [ [string] ] , prenom = row [ [string] ] , groupe = row [ [string] ] , ) for row in csv . DictReader ( lines ) ) [EOL] by_matricule = { senateur . matricule : senateur for senateur in senateurs } [EOL] return by_matricule [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Senateur]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from http import HTTPStatus [EOL] [EOL] from zam_repondeur . services . fetch . http import get_http_session [EOL] [EOL] URL = [string] [EOL] [EOL] [EOL] def fetch_senateurs ( ) : [EOL] http_session = get_http_session ( ) [EOL] resp = http_session . get ( URL ) [EOL] if resp . status_code != HTTPStatus . OK : [comment] [EOL] raise RuntimeError ( [string] ) [EOL] content = resp . content [EOL] return content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class Senateur : [EOL] matricule = ... [EOL] qualite = ... [EOL] nom = ... [EOL] prenom = ... [EOL] groupe = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
import builtins [EOL] def parse_avant_apres ( value ) : [EOL] normalized_value = value . lower ( ) [EOL] if normalized_value == [string] : [EOL] return [string] [EOL] if normalized_value == [string] : [EOL] return [string] [EOL] if normalized_value in ( [string] , [string] ) : [EOL] return [string] [EOL] raise ValueError ( f" [string] { value } [string] " ) [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Any , Dict [EOL] import typing [EOL] import builtins [EOL] from json import load [EOL] from typing import Any , Dict , List , Tuple [EOL] [EOL] from . common import extract_from_remote_zip [EOL] [EOL] [EOL] def get_organes_acteurs ( ) : [EOL] data = fetch_organes_acteurs ( ) [EOL] organes_data = [ dict_ [ [string] ] for filename , dict_ in data . items ( ) if filename . startswith ( [string] ) ] [EOL] organes = extract_organes ( organes_data ) [EOL] acteurs_data = [ dict_ [ [string] ] for filename , dict_ in data . items ( ) if filename . startswith ( [string] ) ] [EOL] acteurs = extract_acteurs ( acteurs_data ) [EOL] return organes , acteurs [EOL] [EOL] [EOL] def fetch_organes_acteurs ( ) : [EOL] url = ( [string] [string] [string] ) [EOL] return { filename : load ( json_file ) for filename , json_file in extract_from_remote_zip ( url ) if filename . endswith ( [string] ) } [EOL] [EOL] [EOL] def extract_organes ( organes ) : [EOL] return { organe [ [string] ] : organe for organe in organes } [EOL] [EOL] [EOL] def extract_acteurs ( acteurs ) : [EOL] return { acteur [ [string] ] [ [string] ] : acteur for acteur in acteurs } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Dict[builtins.str,builtins.dict],typing.Dict[builtins.str,builtins.dict]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Tuple , Any , IO [EOL] import io [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] from http import HTTPStatus [EOL] from io import BytesIO , TextIOWrapper [EOL] from typing import IO , BinaryIO , Generator , Tuple , cast [EOL] from zipfile import ZipFile [EOL] [EOL] from zam_repondeur . services . fetch . http import get_http_session [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def roman ( n ) : [EOL] if n == [number] : [EOL] return [string] [EOL] if n == [number] : [EOL] return [string] [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def extract_from_remote_zip ( url ) : [EOL] http_session = get_http_session ( ) [EOL] response = http_session . get ( url ) [EOL] [EOL] if response . status_code not in ( HTTPStatus . OK , HTTPStatus . NOT_MODIFIED ) : [EOL] message = f" [string] { response . status_code } [string] { url }" [EOL] logger . error ( message ) [EOL] raise RuntimeError ( message ) [EOL] [EOL] content_type = response . headers [ [string] ] [EOL] if content_type != [string] : [EOL] message = ( f" [string] { content_type } [string] { url } [string] " [string] ) [EOL] logger . error ( message ) [EOL] raise RuntimeError ( message ) [EOL] [EOL] yield from extract_from_zip ( BytesIO ( response . content ) ) [EOL] [EOL] [EOL] def extract_from_zip ( content ) : [EOL] with ZipFile ( content ) as zip_file : [EOL] for filename in zip_file . namelist ( ) : [EOL] with zip_file . open ( filename ) as file_ : [EOL] [comment] [EOL] [comment] [EOL] yield ( filename , TextIOWrapper ( cast ( BinaryIO , file_ ) , encoding = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,typing.IO[builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,typing.IO[builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Type , Any , Dict [EOL] import repondeur [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass [EOL] from datetime import date [EOL] from typing import Dict , List , Optional [EOL] [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . models . phase import Phase [EOL] from zam_repondeur . models . texte import TypeTexte [EOL] [EOL] [EOL] @ dataclass ( eq = True , frozen = True ) class TexteRef : [EOL] uid = ... [EOL] type_ = ... [EOL] chambre = ... [EOL] legislature = ... [EOL] numero = ... [EOL] titre_long = ... [EOL] titre_court = ... [EOL] date_depot = ... [EOL] [EOL] @ property def session ( self ) : [EOL] if self . chambre == Chambre . AN : [EOL] return None [EOL] if not self . date_depot : [EOL] raise NotImplementedError [EOL] [comment] [EOL] if self . date_depot . month >= [number] : [EOL] return self . date_depot . year [EOL] else : [EOL] return self . date_depot . year - [number] [EOL] [EOL] [EOL] @ dataclass class LectureRef : [EOL] chambre = ... [EOL] phase = ... [EOL] titre = ... [EOL] texte = ... [EOL] organe = ... [EOL] partie = None [EOL] [EOL] @ property def key ( self ) : [EOL] return f"{ self . texte . uid } [string] { self . organe } [string] { self . partie or [string] }" [EOL] [EOL] @ property def label ( self ) : [EOL] if self . partie == [number] : [EOL] partie = [string] [EOL] elif self . partie == [number] : [EOL] partie = [string] [EOL] else : [EOL] partie = [string] [EOL] return [string] . join ( [ self . chambre . value , self . titre , f" [string] { self . texte . numero }{ partie }" ] ) [EOL] [EOL] [EOL] MIN_DATE = date ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] DossierRefsByUID = Dict [ str , [string] ] [EOL] [EOL] [EOL] @ dataclass class DossierRef : [EOL] uid = ... [EOL] titre = ... [EOL] slug = ... [EOL] an_url = ... [EOL] senat_url = ... [EOL] lectures = ... [EOL] [EOL] def matches ( self , other ) : [EOL] if self . an_url and self . normalized_an_url == other . normalized_an_url : [EOL] return True [EOL] if self . senat_url and self . normalized_senat_url == other . normalized_senat_url : [EOL] return True [EOL] return False [EOL] [EOL] @ property def normalized_an_url ( self ) : [EOL] return self . an_url . replace ( [string] , [string] ) [EOL] [EOL] @ property def normalized_senat_url ( self ) : [EOL] if self . senat_url is None : [EOL] return None [EOL] return self . senat_url . replace ( [string] , [string] ) [EOL] [EOL] @ property def senat_dossier_id ( self ) : [EOL] [docstring] [EOL] if self . senat_url is None : [EOL] return None [EOL] last_part = self . senat_url . split ( [string] ) [ - [number] ] [EOL] suffix = len ( [string] ) [EOL] return last_part [ : - suffix ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $zam_repondeur.models.texte.TypeTexte$ 0 0 0 $zam_repondeur.models.chambre.Chambre$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.chambre.Chambre$ 0 0 0 $zam_repondeur.models.phase.Phase$ 0 0 0 $builtins.str$ 0 0 0 $TexteRef$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,repondeur.zam_repondeur.services.fetch.an.dossiers.models.DossierRef]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List[LectureRef]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $"DossierRef"$ 0 0 0 0 0 0 0 0 0 0 0 0 $"DossierRef"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"DossierRef"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0
from typing import Iterator , Generator , Any , Dict , Optional , List , Match , Tuple [EOL] import logging [EOL] import models [EOL] import typing [EOL] import datetime [EOL] import repondeur [EOL] import builtins [EOL] import zam_repondeur [EOL] import logging [EOL] import re [EOL] from datetime import date [EOL] from json import load [EOL] from typing import Any , Dict , Iterator , List , NamedTuple , Optional , Tuple [EOL] [EOL] from zam_repondeur . models . chambre import Chambre [EOL] from zam_repondeur . slugs import slugify [EOL] [EOL] from . . . dates import parse_date [EOL] from . . common import extract_from_remote_zip , roman [EOL] from . models import DossierRef , DossierRefsByUID , LectureRef , Phase , TexteRef , TypeTexte [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_dossiers_legislatifs_and_textes ( * legislatures , ) : [EOL] all_dossiers = { } [EOL] all_textes = { } [EOL] for legislature in legislatures : [EOL] dossiers , textes = _get_dossiers_legislatifs_and_textes ( legislature ) [EOL] all_dossiers . update ( dossiers ) [EOL] all_textes . update ( textes ) [EOL] return all_dossiers , all_textes [EOL] [EOL] [EOL] def _get_dossiers_legislatifs_and_textes ( legislature , ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if legislature <= [number] : [EOL] data = list ( fetch_dossiers_legislatifs_and_textes ( legislature ) . values ( ) ) [ [number] ] [EOL] textes = parse_textes ( data [ [string] ] [ [string] ] [ [string] ] ) [EOL] dossiers = parse_dossiers ( data [ [string] ] [ [string] ] [ [string] ] , textes ) [EOL] else : [EOL] data = fetch_dossiers_legislatifs_and_textes ( legislature ) [EOL] textes_data = [ dict_ [ [string] ] for filename , dict_ in data . items ( ) if filename . startswith ( [string] ) ] [EOL] textes = parse_textes ( textes_data ) [EOL] dossiers_data = [ dict_ for filename , dict_ in data . items ( ) if filename . startswith ( [string] ) ] [EOL] dossiers = parse_dossiers ( dossiers_data , textes ) [EOL] return dossiers , textes [EOL] [EOL] [EOL] def fetch_dossiers_legislatifs_and_textes ( legislature ) : [EOL] legislature_roman = roman ( legislature ) [EOL] url = ( f" [string] " f"{ legislature } [string] " f" [string] { legislature_roman } [string] " ) [EOL] return { filename : load ( json_file ) for filename , json_file in extract_from_remote_zip ( url ) } [EOL] [EOL] [EOL] def parse_textes ( textes ) : [EOL] return { item [ [string] ] : parse_texte ( item ) for item in textes if item [ [string] ] == [string] if item [ [string] ] [ [string] ] [ [string] ] in { [string] , [string] } } [EOL] [EOL] [EOL] def parse_texte ( item ) : [EOL] uid = item [ [string] ] [EOL] date_depot = parse_date ( item [ [string] ] [ [string] ] [ [string] ] ) [EOL] if date_depot is None : [EOL] date_creation = parse_date ( item [ [string] ] [ [string] ] [ [string] ] ) [EOL] if date_creation is None : [EOL] raise ValueError ( f" [string] { uid }" ) [EOL] logger . warning ( [string] , uid ) [EOL] date_depot = date_creation [EOL] return TexteRef ( uid = uid , type_ = type_texte ( item ) , chambre = chambre_texte ( item ) , legislature = legislature_texte ( item ) , numero = int ( item [ [string] ] [ [string] ] ) , titre_long = item [ [string] ] [ [string] ] , titre_court = item [ [string] ] [ [string] ] , date_depot = date_depot , ) [EOL] [EOL] [EOL] def type_texte ( item ) : [EOL] code = item [ [string] ] [ [string] ] [ [string] ] [EOL] if code == [string] : [EOL] return TypeTexte . PROPOSITION [EOL] if code == [string] : [EOL] return TypeTexte . PROJET [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def chambre_texte ( item ) : [EOL] if item [ [string] ] [ [number] : [number] ] == [string] : [EOL] return Chambre . AN [EOL] if item [ [string] ] [ [number] : [number] ] == [string] : [EOL] return Chambre . SENAT [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def legislature_texte ( item ) : [EOL] legislature = item [ [string] ] [EOL] if not legislature : [EOL] return None [EOL] return int ( legislature ) [EOL] [EOL] [EOL] def parse_dossiers ( dossiers , textes ) : [EOL] dossier_dicts = ( item [ [string] ] for item in dossiers if isinstance ( item , dict ) ) [EOL] dossier_models = [ ] [EOL] for dossier_dict in dossier_dicts : [EOL] if is_dossier ( dossier_dict ) : [EOL] dossier_models . append ( parse_dossier ( dossier_dict , textes ) ) [EOL] return { dossier . uid : dossier for dossier in dossier_models } [EOL] [EOL] [EOL] def is_dossier ( data ) : [EOL] [comment] [EOL] return _has_dossier_type ( data ) or _has_dossier_uid ( data ) [EOL] [EOL] [EOL] def _has_dossier_type ( data ) : [EOL] return data . get ( [string] ) == [string] [EOL] [EOL] [EOL] def _has_dossier_uid ( data ) : [EOL] uid = data [ [string] ] [EOL] return uid . startswith ( [string] ) [EOL] [EOL] [EOL] TOP_LEVEL_ACTES = { [string] : ( Chambre . AN , [string] ) , [string] : ( Chambre . SENAT , [string] ) , [string] : ( Chambre . AN , [string] ) , [string] : ( Chambre . SENAT , [string] ) , [string] : ( Chambre . AN , [string] ) , } [EOL] [EOL] [EOL] def parse_dossier ( dossier , textes ) : [EOL] uid = dossier [ [string] ] [EOL] titre = dossier [ [string] ] [ [string] ] [EOL] slug = slugify ( dossier [ [string] ] [ [string] ] or titre ) [EOL] an_url = build_an_url ( dossier [ [string] ] [ [string] ] ) [EOL] senat_url = dossier [ [string] ] [ [string] ] [EOL] is_plf = [string] in dossier [EOL] lectures = [ lecture for acte in top_level_actes ( dossier ) for lecture in gen_lectures ( acte , textes , uid , is_plf ) ] [EOL] return DossierRef ( uid = uid , titre = titre , slug = slug , an_url = an_url , senat_url = senat_url , lectures = lectures , ) [EOL] [EOL] [EOL] def build_an_url ( slug ) : [EOL] return f" [string] { slug }" [EOL] [EOL] [EOL] def top_level_actes ( dossier ) : [EOL] for acte in extract_actes ( dossier ) : [EOL] if acte [ [string] ] in TOP_LEVEL_ACTES : [EOL] yield acte [EOL] [EOL] [EOL] def gen_lectures ( acte , textes , dossier_uid , is_plf = False ) : [EOL] for result in walk_actes ( acte , dossier_uid ) : [EOL] chambre , titre = TOP_LEVEL_ACTES [ acte [ [string] ] ] [EOL] if result . etape == [string] : [EOL] titre += [string] [EOL] elif result . etape == [string] : [EOL] titre += [string] [EOL] elif result . etape == [string] : [EOL] titre += [string] [EOL] else : [EOL] raise NotImplementedError [EOL] [EOL] try : [EOL] texte = textes [ result . texte_examine ] [EOL] except KeyError : [EOL] logger . warning ( f" [string] { result . texte_examine }" ) [EOL] continue [EOL] [EOL] [comment] [EOL] parties = [ [number] , [number] , ] if is_plf and result . phase == Phase . PREMIERE_LECTURE else [ None ] [EOL] [EOL] for partie in parties : [EOL] yield LectureRef ( phase = result . phase , chambre = chambre , titre = titre , texte = texte , partie = partie , organe = result . organe , ) [EOL] [EOL] [EOL] class WalkResult ( NamedTuple ) : [EOL] chambre = ... [EOL] phase = ... [EOL] etape = ... [EOL] organe = ... [EOL] texte_examine = ... [EOL] [EOL] [EOL] def walk_actes ( acte , dossier_uid ) : [EOL] texte_depose = None [EOL] texte_commission = None [EOL] [EOL] def _walk_actes ( acte ) : [EOL] nonlocal texte_depose , texte_commission [EOL] [EOL] chambre , phase , etape = parse_code_acte ( acte [ [string] ] ) [EOL] [EOL] if etape in { [string] , [string] } : [EOL] texte_examine = texte_depose [EOL] elif etape == [string] : [EOL] texte_examine = texte_commission [EOL] if texte_commission is None : [EOL] logger . warning ( f"{ dossier_uid } [string] { acte [ [string] ] } [string] " [string] ) [EOL] texte_examine = texte_depose [EOL] else : [EOL] texte_examine = None [EOL] [EOL] if texte_examine is not None : [EOL] yield WalkResult ( chambre = chambre , phase = phase , etape = etape , organe = acte [ [string] ] , texte_examine = texte_examine , ) [EOL] [EOL] [comment] [EOL] if etape == [string] : [EOL] texte_depose = acte [ [string] ] [EOL] texte_commission = None [EOL] [EOL] [comment] [EOL] if etape == [string] : [EOL] if acte [ [string] ] is not None : [EOL] texte_commission = acte [ [string] ] [EOL] else : [EOL] texte_commission = texte_depose [EOL] [EOL] for sous_acte in extract_actes ( acte ) : [EOL] yield from _walk_actes ( sous_acte ) [EOL] [EOL] yield from _walk_actes ( acte ) [EOL] [EOL] [EOL] _CHAMBRES = { [string] : Chambre . AN , [string] : Chambre . SENAT } [EOL] [EOL] [EOL] _PHASES = { [string] : Phase . PREMIERE_LECTURE , [string] : Phase . DEUXIEME_LECTURE , [string] : Phase . NOUVELLE_LECTURE , [string] : Phase . LECTURE_DEFINITIVE , } [EOL] [EOL] [EOL] def parse_code_acte ( code_acte ) : [EOL] [docstring] [EOL] mo = re . match ( [string] , code_acte ) [EOL] if mo is None : [EOL] raise ValueError ( f" [string] { code_acte !r}" ) [EOL] chambre = _CHAMBRES [ mo . group ( [string] ) ] [EOL] phase = _PHASES . get ( mo . group ( [string] ) , Phase . INCONNUE ) [EOL] etape = mo . group ( [string] ) or [string] [EOL] return chambre , phase , etape [EOL] [EOL] [EOL] def extract_actes ( acte ) : [EOL] children = ( acte . get ( [string] ) or { } ) . get ( [string] , [ ] ) [EOL] if isinstance ( children , list ) : [EOL] return children [EOL] else : [EOL] return [ children ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.TexteRef$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.TypeTexte$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.chambre.Chambre$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.DossierRefsByUID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.DossierRef$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[models.LectureRef]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.chambre.Chambre$ 0 0 0 $models.Phase$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Iterator[WalkResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[WalkResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[zam_repondeur.models.chambre.Chambre,models.Phase,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import BinaryIO , Dict , Optional , TextIO , Counter , Type [EOL] import typing [EOL] import zam_repondeur [EOL] import csv [EOL] import builtins [EOL] import _csv [EOL] import pyramid [EOL] import collections [EOL] import io [EOL] import csv [EOL] import io [EOL] from collections import Counter [EOL] from typing import BinaryIO , Dict , TextIO [EOL] [EOL] from pyramid . request import Request [EOL] [EOL] from zam_repondeur . models import Amendement , Lecture , Team [EOL] [EOL] from . common import import_amendement [EOL] from . spreadsheet import ( FIELDS , HEADERS , column_name_to_field , export_amendement_for_spreadsheet , ) [EOL] [EOL] [EOL] def export_csv ( lecture , filename , request ) : [EOL] counter = Counter ( { [string] : [number] } ) [EOL] with open ( filename , [string] , encoding = [string] ) as file_ : [EOL] file_ . write ( [string] . join ( HEADERS ) + [string] ) [EOL] writer = csv . DictWriter ( file_ , fieldnames = list ( FIELDS . keys ( ) ) , delimiter = [string] , quoting = csv . QUOTE_MINIMAL , lineterminator = [string] , ) [EOL] for amendement in sorted ( lecture . amendements ) : [EOL] writer . writerow ( export_amendement_for_spreadsheet ( amendement ) ) [EOL] counter [ [string] ] += [number] [EOL] return counter [EOL] [EOL] [EOL] class CSVImportError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def import_csv ( request , reponses_file , lecture , amendements , team , ) : [EOL] previous_reponse = [string] [EOL] counter = Counter ( { [string] : [number] , [string] : [number] } ) [EOL] [EOL] reponses_text_file = io . TextIOWrapper ( reponses_file , encoding = [string] ) [EOL] [EOL] delimiter = _guess_csv_delimiter ( reponses_text_file ) [EOL] [EOL] for line in csv . DictReader ( reponses_text_file , delimiter = delimiter ) : [EOL] item = { column_name_to_field ( column_name ) : value for column_name , value in line . items ( ) if column_name is not None } [EOL] import_amendement ( request , lecture , amendements , item , counter , previous_reponse , team ) [EOL] [EOL] return counter [EOL] [EOL] [EOL] def _guess_csv_delimiter ( text_file ) : [EOL] try : [EOL] sample = text_file . readline ( ) [EOL] except UnicodeDecodeError : [EOL] raise CSVImportError ( [string] ) [EOL] except Exception : [EOL] raise CSVImportError ( [string] ) [EOL] [EOL] try : [EOL] dialect = csv . Sniffer ( ) . sniff ( sample , delimiters = [string] ) [EOL] except csv . Error : [EOL] raise CSVImportError ( [string] [string] ) [EOL] [EOL] text_file . seek ( [number] ) [EOL] [EOL] return dialect . delimiter [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Union , Dict , Iterable [EOL] import typing [EOL] import builtins [EOL] import pathlib [EOL] import pyramid [EOL] import zam_repondeur [EOL] from contextlib import contextmanager [EOL] from pathlib import Path [EOL] from typing import Generator , Iterable [EOL] [EOL] import pdfkit [EOL] from pyramid . request import Request [EOL] from xvfbwrapper import Xvfb [EOL] [EOL] from zam_repondeur . models import Amendement , AmendementList , Lecture [EOL] from zam_repondeur . templating import render_template [EOL] [EOL] [comment] [EOL] [comment] [EOL] PDFKIT_OPTIONS = { [string] : [string] , [string] : [string] , [string] : [number] , } [EOL] [EOL] [EOL] STATIC_PATH = Path ( __file__ ) . parent . parent . parent / [string] [EOL] PDF_CSS = str ( STATIC_PATH / [string] / [string] ) [EOL] [EOL] [EOL] @ contextmanager def xvfb_if_supported ( ) : [EOL] try : [EOL] with Xvfb ( ) : [EOL] yield [EOL] except ( EnvironmentError , OSError , RuntimeError ) : [EOL] yield [EOL] [EOL] [EOL] def generate_html_for_pdf ( request , template_name , context ) : [EOL] [docstring] [EOL] return render_template ( template_name , context , registry = request . registry ) [EOL] [EOL] [EOL] def write_pdf ( lecture , filename , request ) : [EOL] content = generate_html_for_pdf ( request , [string] , { [string] : lecture } ) [EOL] with xvfb_if_supported ( ) : [EOL] pdfkit . from_string ( content , filename , options = PDFKIT_OPTIONS , css = PDF_CSS ) [EOL] [EOL] [EOL] def write_pdf_multiple ( lecture , amendements , article_amendements , filename , request , ) : [EOL] content = generate_html_for_pdf ( request , [string] , { [string] : amendements , [string] : article_amendements } , ) [EOL] with xvfb_if_supported ( ) : [EOL] pdfkit . from_string ( content , filename , options = PDFKIT_OPTIONS , css = PDF_CSS ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $builtins.str$ 0 0
from typing import Any , Dict , List , Counter , Set , BinaryIO [EOL] import typing [EOL] import zam_repondeur [EOL] import builtins [EOL] import pyramid [EOL] import collections [EOL] import logging [EOL] from collections import Counter [EOL] from typing import BinaryIO , Dict [EOL] [EOL] import ujson as json [EOL] from pyramid . request import Request [EOL] [EOL] from zam_repondeur . models import Amendement , Article , Lecture , Team [EOL] from zam_repondeur . services . import_export . common import import_amendement [EOL] [EOL] [EOL] def import_json ( request , backup_file , lecture , amendements , articles , team , ) : [EOL] previous_reponse = [string] [EOL] counter = Counter ( { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] backup = json . loads ( backup_file . read ( ) . decode ( [string] ) ) [EOL] [EOL] for item in backup . get ( [string] , [ ] ) : [EOL] import_amendement ( request , lecture , amendements , item , counter , previous_reponse , team ) [EOL] [EOL] for item in backup . get ( [string] , [ ] ) : [EOL] try : [EOL] sort_key_as_str = item [ [string] ] [EOL] except KeyError : [EOL] counter [ [string] ] += [number] [EOL] continue [EOL] [EOL] article = articles . get ( sort_key_as_str ) [EOL] if not article : [EOL] logging . warning ( [string] , item ) [EOL] counter [ [string] ] += [number] [EOL] continue [EOL] [EOL] if [string] in item : [EOL] article . user_content . title = item [ [string] ] [EOL] if [string] in item : [EOL] article . user_content . presentation = item [ [string] ] [EOL] counter [ [string] ] += [number] [EOL] [EOL] return counter [EOL] [EOL] [EOL] EXCLUDED_FIELDS = { [string] } [EOL] [EOL] [EOL] def export_json ( lecture , filename , request ) : [EOL] counter = Counter ( { [string] : [number] , [string] : [number] } ) [EOL] with open ( filename , [string] , encoding = [string] ) as file_ : [EOL] amendements = [ ] [EOL] for amendement in sorted ( lecture . amendements ) : [EOL] amendements . append ( export_amendement_for_json ( amendement ) ) [EOL] counter [ [string] ] += [number] [EOL] articles = [ ] [EOL] for article in sorted ( lecture . articles ) : [EOL] articles . append ( article . asdict ( ) ) [EOL] counter [ [string] ] += [number] [EOL] file_ . write ( json . dumps ( { [string] : amendements , [string] : articles } , indent = [number] ) ) [EOL] return counter [EOL] [EOL] [EOL] def export_amendement_for_json ( amendement ) : [EOL] return { k : v for k , v in amendement . asdict ( ) . items ( ) if k not in EXCLUDED_FIELDS } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Counter , Any , Dict [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import pyramid [EOL] import zam_repondeur [EOL] import collections [EOL] import logging [EOL] from collections import Counter [EOL] from typing import Dict [EOL] [EOL] from pyramid . request import Request [EOL] [EOL] from zam_repondeur . models import ( Amendement , Lecture , SharedTable , Team , User , UserTable , get_one_or_create , ) [EOL] from zam_repondeur . models . events . amendement import ( AmendementTransfere , AvisAmendementModifie , CommentsAmendementModifie , ObjetAmendementModifie , ReponseAmendementModifiee , ) [EOL] from zam_repondeur . services . clean import clean_html [EOL] from zam_repondeur . utils import normalize_avis , normalize_num , normalize_reponse [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def import_amendement ( request , lecture , amendements , item , counter , previous_reponse , team , ) : [EOL] try : [EOL] numero = item [ [string] ] [EOL] avis = item [ [string] ] or [string] [EOL] objet = item [ [string] ] or [string] [EOL] reponse = item [ [string] ] or [string] [EOL] except KeyError : [EOL] counter [ [string] ] += [number] [EOL] return [EOL] [EOL] try : [EOL] num = normalize_num ( numero ) [EOL] except ValueError : [EOL] logging . warning ( [string] , numero ) [EOL] counter [ [string] ] += [number] [EOL] return [EOL] [EOL] amendement = amendements . get ( num ) [EOL] if not amendement : [EOL] logging . warning ( [string] , num ) [EOL] counter [ [string] ] += [number] [EOL] return [EOL] [EOL] avis = normalize_avis ( avis ) [EOL] if avis != ( amendement . user_content . avis or [string] ) : [EOL] AvisAmendementModifie . create ( amendement = amendement , avis = avis , request = request ) [EOL] [EOL] objet = clean_html ( objet ) [EOL] if objet != ( amendement . user_content . objet or [string] ) : [EOL] ObjetAmendementModifie . create ( amendement = amendement , objet = objet , request = request ) [EOL] [EOL] reponse = clean_html ( normalize_reponse ( reponse , previous_reponse ) ) [EOL] if reponse != ( amendement . user_content . reponse or [string] ) : [EOL] ReponseAmendementModifiee . create ( amendement = amendement , reponse = reponse , request = request ) [EOL] [EOL] if [string] in item : [EOL] comments = clean_html ( item [ [string] ] ) [EOL] if comments != ( amendement . user_content . comments or [string] ) : [EOL] CommentsAmendementModifie . create ( amendement = amendement , comments = comments , request = request ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in item and item [ [string] ] : [EOL] _transfer_to_box_amendement_on_import ( request , lecture , amendement , item ) [EOL] [EOL] if [string] in item and item [ [string] ] : [EOL] _transfer_to_user_amendement_on_import ( request , lecture , amendement , item , team ) [EOL] [EOL] previous_reponse = reponse [EOL] counter [ [string] ] += [number] [EOL] [EOL] [EOL] def _transfer_to_box_amendement_on_import ( request , lecture , amendement , item ) : [EOL] shared_table , created = get_one_or_create ( SharedTable , titre = item [ [string] ] , lecture = lecture ) [EOL] [EOL] if amendement . location . shared_table is shared_table : [EOL] return [EOL] [EOL] old = amendement . table_name_with_email [EOL] new = shared_table . titre [EOL] [EOL] amendement . location . shared_table = shared_table [EOL] amendement . location . user_table = None [EOL] [EOL] AmendementTransfere . create ( amendement = amendement , old_value = old , new_value = new , request = request ) [EOL] [EOL] [EOL] def _transfer_to_user_amendement_on_import ( request , lecture , amendement , item , team ) : [EOL] email = User . normalize_email ( item [ [string] ] ) [EOL] [EOL] if not User . email_is_well_formed ( email ) : [EOL] logger . warning ( [string] , email ) [EOL] return [EOL] [EOL] user , created = get_one_or_create ( User , email = email ) [EOL] if created : [EOL] affectation_name = User . normalize_name ( item [ [string] ] ) [EOL] user . name = affectation_name if affectation_name != [string] else email [EOL] user . teams . append ( team ) [EOL] [EOL] user_table , _ = get_one_or_create ( UserTable , user = user , lecture = lecture ) [EOL] if amendement . location . user_table is user_table : [EOL] return [EOL] [EOL] old = amendement . table_name_with_email [EOL] new = str ( user ) [EOL] [EOL] amendement . location . user_table = user_table [EOL] amendement . location . shared_table = None [EOL] [EOL] AmendementTransfere . create ( amendement = amendement , old_value = old , new_value = new , request = request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict , Optional , List , Match , Tuple , IO [EOL] import defusedxml [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import functools [EOL] import zam_repondeur [EOL] import logging [EOL] import re [EOL] from datetime import date [EOL] from functools import partial [EOL] from typing import IO , Dict , List , Optional , Tuple [EOL] [EOL] from defusedxml . lxml import RestrictedElement , parse [EOL] from lxml . etree import XMLSyntaxError [comment] [EOL] [EOL] from zam_repondeur . models import ( Amendement , Article , Chambre , DBSession , Lecture , get_one_or_create , ) [EOL] from zam_repondeur . models . division import SubDiv [EOL] from zam_repondeur . services . clean import clean_html [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . dossiers import ( get_dossiers_legislatifs_open_data_from_cache , ) [EOL] from zam_repondeur . services . fetch . an . division import parse_avant_apres [EOL] from zam_repondeur . services . fetch . an . dossiers . models import ( DossierRef , LectureRef , TexteRef , ) [EOL] from zam_repondeur . services . fetch . dates import parse_date [EOL] from zam_repondeur . services . fetch . division import parse_subdiv [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] NS = [string] [EOL] [EOL] [EOL] class BadChambre ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class LectureDoesNotMatch ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , lecture_fmt ) : [EOL] self . lecture_fmt = lecture_fmt [EOL] [EOL] [EOL] def import_liasse_xml ( xml_file , lecture ) : [EOL] [EOL] if lecture . chambre != Chambre . AN : [EOL] raise BadChambre [EOL] [EOL] try : [EOL] tree = parse ( xml_file ) [EOL] except XMLSyntaxError : [EOL] message = [string] [EOL] logger . exception ( message ) [EOL] raise ValueError ( message ) [EOL] except Exception : [EOL] message = [string] [EOL] logger . exception ( message ) [EOL] raise ValueError ( message ) [EOL] [EOL] root = tree . getroot ( ) [EOL] if root . tag != [string] : [EOL] message = [string] [EOL] logger . error ( message ) [EOL] raise ValueError ( message ) [EOL] [EOL] uid_map = { } [EOL] errors = [ ] [EOL] for child in root : [EOL] if extract_from_node ( child , [string] ) == [string] : [EOL] num_long = extract_from_node ( child , [string] ) [EOL] logger . warning ( f" [string] { num_long } [string] " ) [EOL] continue [EOL] [EOL] uid = child . find ( f" [string] { NS } [string] " ) . text [EOL] try : [EOL] amendement = _make_amendement ( child , uid_map , lecture ) [EOL] uid_map [ uid ] = amendement [EOL] except LectureDoesNotMatch : [EOL] raise [EOL] except Exception as exc : [EOL] logger . exception ( f" [string] { uid } [string] " ) [EOL] errors . append ( ( uid , str ( exc ) ) ) [EOL] [EOL] return list ( uid_map . values ( ) ) , errors [EOL] [EOL] [EOL] def _make_amendement ( node , uid_map , lecture ) : [EOL] extract = partial ( extract_from_node , node ) [EOL] [EOL] subdiv = _parse_division ( node ) [EOL] [EOL] texte_uid = extract ( [string] , [string] , [string] ) [EOL] if texte_uid is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] is_gouvernemental = extract ( [string] , [string] , [string] ) == [string] [EOL] [EOL] if is_gouvernemental : [EOL] auteur_name = Amendement . AUTEUR_GOUVERNEMENT [EOL] groupe_name = None [EOL] matricule = None [EOL] else : [EOL] auteur_uid = extract ( [string] , [string] , [string] ) [EOL] if auteur_uid is None : [EOL] raise ValueError ( [string] ) [EOL] auteur_name = get_auteur_name ( auteur_uid ) [EOL] matricule = auteur_uid [EOL] [EOL] groupe_uid = extract ( [string] , [string] , [string] ) [EOL] if groupe_uid is None : [EOL] raise ValueError ( [string] ) [EOL] groupe_name = get_groupe_name ( groupe_uid ) [EOL] [EOL] check_same_lecture ( lecture = lecture , texte_uid = texte_uid , partie = extract_partie ( node ) , organe = extract ( [string] , [string] , [string] ) , ) [EOL] [EOL] article , created = get_one_or_create ( Article , lecture = lecture , type = subdiv . type_ , num = subdiv . num , mult = subdiv . mult , pos = subdiv . pos , ) [EOL] parent = get_parent ( extract ( [string] ) , uid_map , lecture ) [EOL] amendement , created = get_one_or_create ( Amendement , create_kwargs = { [string] : article , [string] : parent } , lecture = lecture , num = to_int ( extract ( [string] , [string] ) ) , ) [EOL] if not created : [EOL] amendement . article = article [EOL] amendement . parent = parent [EOL] amendement . alinea = extract ( [string] , [string] , [string] ) [EOL] amendement . auteur = auteur_name [EOL] amendement . matricule = matricule [EOL] amendement . groupe = groupe_name [EOL] amendement . date_depot = to_date ( extract ( [string] ) ) [EOL] amendement . sort = get_sort ( sort = extract ( [string] , [string] ) , etat = extract ( [string] ) ) [EOL] amendement . corps = clean_html ( extract ( [string] , [string] ) or [string] ) [EOL] amendement . expose = clean_html ( extract ( [string] , [string] ) or [string] ) [EOL] return amendement [EOL] [EOL] [EOL] def check_same_lecture ( lecture , texte_uid , partie , organe ) : [EOL] if organe is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] texte_ref = repository . get_opendata_texte ( texte_uid ) [EOL] if texte_ref is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if ( texte_ref . chambre != lecture . texte . chambre or texte_ref . legislature != lecture . texte . legislature or texte_ref . numero != lecture . texte . numero or partie != lecture . partie or organe != lecture . organe ) : [EOL] dossier_ref , lecture_ref = _find_dossier_lecture ( texte_ref ) [EOL] lecture_fmt = f"{ lecture_ref . label } [string] { dossier_ref . titre } [string] " [EOL] raise LectureDoesNotMatch ( lecture_fmt ) [EOL] [EOL] [EOL] def _parse_division ( node ) : [EOL] extract = partial ( extract_from_node , node ) [EOL] [EOL] division_titre = extract ( [string] , [string] , [string] ) [EOL] [EOL] division_type = extract ( [string] , [string] , [string] ) [EOL] if division_type is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] pos = parse_avant_apres ( extract ( [string] , [string] , [string] ) or [string] ) [EOL] if division_type == [string] : [EOL] return SubDiv ( type_ = [string] , num = [string] , mult = [string] , pos = pos ) [EOL] [EOL] if division_type == [string] : [EOL] division_rattachee = extract ( [string] , [string] , [string] ) [EOL] if division_rattachee : [EOL] return parse_subdiv ( division_rattachee ) [EOL] else : [EOL] mo = re . match ( [string] , division_titre or [string] ) [EOL] num = mo . group ( [number] ) if mo is not None else [string] [EOL] return SubDiv ( type_ = [string] , num = num , mult = [string] , pos = pos ) [EOL] [EOL] if division_titre is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] subdiv = parse_subdiv ( division_titre ) [EOL] return subdiv . _replace ( pos = pos ) [EOL] [EOL] [EOL] def extract_from_node ( node , * path ) : [EOL] element_path = [string] + [string] . join ( ( NS + elem ) for elem in path ) [EOL] elem = node . find ( element_path ) [EOL] if elem is None : [EOL] return None [EOL] text = elem . text [EOL] return text [EOL] [EOL] [EOL] def to_int ( text ) : [EOL] if text is None : [EOL] return None [EOL] return int ( text ) [EOL] [EOL] [EOL] def to_date ( text ) : [EOL] if text is None : [EOL] return None [EOL] return parse_date ( text ) [EOL] [EOL] [EOL] def _find_dossier_lecture ( texte_ref ) : [EOL] [comment] [EOL] for dossier_ref in get_dossiers_legislatifs_open_data_from_cache ( ) . values ( ) : [EOL] for lecture_ref in dossier_ref . lectures : [EOL] if lecture_ref . texte == texte_ref : [EOL] return dossier_ref , lecture_ref [EOL] raise ValueError ( f" [string] { texte_ref }" ) [EOL] [EOL] [EOL] def extract_partie ( node ) : [EOL] text = extract_from_node ( node , [string] , [string] , [string] ) [EOL] if text is not None and text != [string] : [EOL] return int ( text ) [EOL] return None [EOL] [EOL] [EOL] def get_sort ( sort , etat ) : [EOL] if sort is not None : [EOL] return sort [EOL] if etat is not None and etat not in ( [string] , [string] ) : [EOL] return etat [EOL] return [string] [EOL] [EOL] [EOL] def get_auteur_name ( uid ) : [EOL] acteur = repository . get_opendata_acteur ( uid ) [EOL] if acteur is None : [EOL] raise ValueError ( f" [string] { uid }" ) [EOL] ident = acteur [ [string] ] [ [string] ] [EOL] return ident [ [string] ] + [string] + ident [ [string] ] [EOL] [EOL] [EOL] def get_groupe_name ( uid ) : [EOL] groupe = repository . get_opendata_organe ( uid ) [EOL] if groupe is None : [EOL] raise ValueError ( f" [string] { uid }" ) [EOL] libelle = groupe [ [string] ] [EOL] return libelle [EOL] [EOL] [EOL] def get_parent ( uid , uid_map , lecture ) : [EOL] if uid is None : [EOL] return None [EOL] try : [EOL] return uid_map [ uid ] [EOL] except KeyError : [EOL] num = get_number_from_uid ( uid ) [EOL] parent = ( DBSession . query ( Amendement ) . filter ( Amendement . lecture == lecture , Amendement . num == num ) . first ( ) ) [EOL] if parent is None : [EOL] raise ValueError ( f" [string] { num }" ) from None [EOL] return parent [EOL] [EOL] [EOL] def get_number_from_uid ( uid ) : [EOL] [docstring] [EOL] mo = re . match ( [string] , uid ) [EOL] if mo is None : [EOL] raise ValueError ( f" [string] { uid }" ) from None [EOL] return int ( mo . group ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.List[zam_repondeur.models.Amendement],typing.List[typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.Amendement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.division.SubDiv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[zam_repondeur.services.fetch.an.dossiers.models.DossierRef,zam_repondeur.services.fetch.an.dossiers.models.LectureRef]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[zam_repondeur.models.Amendement]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , List , ValuesView , Union [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , Optional , Union [EOL] [EOL] from inscriptis import get_text [EOL] [EOL] from zam_repondeur . models import Amendement [EOL] [EOL] [comment] [EOL] FIELDS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] COLUMN_NAME_TO_FIELD = { col : attr for attr , col in FIELDS . items ( ) } [EOL] [EOL] [EOL] def column_name_to_field ( column_name ) : [EOL] return COLUMN_NAME_TO_FIELD . get ( column_name ) [EOL] [EOL] [EOL] HEADERS = FIELDS . values ( ) [EOL] [EOL] [EOL] HTML_FIELDS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def export_amendement_for_spreadsheet ( amendement ) : [EOL] data = { [string] : amendement . article . format ( ) , [string] : amendement . article . user_content . title or [string] , [string] : amendement . num , [string] : amendement . rectif or [string] , [string] : amendement . parent and amendement . parent . num_disp or [string] , [string] : amendement . auteur or [string] , [string] : amendement . groupe or [string] , [string] : [string] if amendement . gouvernemental else [string] , [string] : html_to_text ( amendement . corps or [string] ) , [string] : html_to_text ( amendement . expose or [string] ) , [string] : amendement . first_identique_num or [string] , [string] : amendement . user_content . avis or [string] , [string] : html_to_text ( amendement . user_content . objet or [string] ) , [string] : html_to_text ( amendement . user_content . reponse or [string] ) , [string] : html_to_text ( amendement . user_content . comments or [string] ) , [string] : ( amendement . location . user_table [EOL] and amendement . location . user_table . user . email or [string] ) , [string] : ( amendement . location . user_table [EOL] and amendement . location . user_table . user . name or [string] ) , [string] : ( amendement . location . shared_table [EOL] and amendement . location . shared_table . titre or [string] ) , [string] : amendement . sort or [string] , } [EOL] return data [EOL] [EOL] [EOL] def html_to_text ( html ) : [EOL] text = get_text ( html ) . strip ( ) [EOL] return text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.ValuesView[builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Any , Dict [EOL] import logging [EOL] import typing [EOL] import argparse [EOL] import builtins [EOL] import zam_repondeur [EOL] import logging [EOL] import random [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] import transaction [EOL] from progressist import ProgressBar [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . models import Dossier , Lecture , Texte , get_one_or_create [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch . amendements import RemoteSource [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef [EOL] from zam_repondeur . utils import Timer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] log_level = logging . WARNING [EOL] if args . verbose : [EOL] log_level = logging . INFO [EOL] if args . debug : [EOL] log_level = logging . DEBUG [EOL] logging . getLogger ( ) . setLevel ( log_level ) [EOL] logging . getLogger ( [string] ) . setLevel ( log_level ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) as env : [EOL] settings = env [ [string] ] . settings [EOL] [EOL] repository . load_data ( ) [EOL] [EOL] try : [EOL] fetch_amendements ( args . chambre , args . num , args . progress , settings ) [EOL] finally : [EOL] transaction . abort ( ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] , choices = [ [string] , [string] ] , required = False ) [EOL] parser . add_argument ( [string] , type = int , required = False , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] ) [EOL] parser . add_argument ( [string] , dest = [string] , action = [string] ) [EOL] return parser . parse_args ( argv ) [EOL] [EOL] [EOL] def fetch_amendements ( chambre , num , progress , settings ) : [EOL] an_ids = repository . list_opendata_dossiers ( ) [EOL] if progress : [EOL] bar = ProgressBar ( total = len ( an_ids ) ) [EOL] random . shuffle ( an_ids ) [EOL] for an_id in an_ids : [EOL] dossier_ref = repository . get_opendata_dossier_ref ( an_id ) [EOL] fetch_amendements_for_dossier ( dossier_ref , chambre , num , settings ) [EOL] if progress : [EOL] bar . update ( step = len ( dossier_ref . lectures ) ) [EOL] [EOL] [EOL] def fetch_amendements_for_dossier ( dossier_ref , chambre , num , settings , ) : [EOL] dossier , _ = get_one_or_create ( Dossier , an_id = dossier_ref . uid , create_kwargs = dict ( titre = dossier_ref . titre , slug = dossier_ref . slug ) , ) [EOL] for lecture_ref in dossier_ref . lectures : [EOL] texte_ref = lecture_ref . texte [EOL] if chambre is not None and texte_ref . chambre . name . lower ( ) != chambre : [EOL] continue [EOL] if num is not None and texte_ref . numero != num : [EOL] continue [EOL] texte , _ = get_one_or_create ( Texte , type_ = texte_ref . type_ , chambre = texte_ref . chambre , legislature = texte_ref . legislature , session = texte_ref . session , numero = texte_ref . numero , date_depot = texte_ref . date_depot , ) [EOL] lecture = Lecture . create ( phase = lecture_ref . phase , dossier = dossier , texte = texte , partie = lecture_ref . partie , organe = lecture_ref . organe , titre = lecture_ref . titre , ) [EOL] fetch_amendements_for_lecture ( lecture , settings ) [EOL] [EOL] [EOL] def fetch_amendements_for_lecture ( lecture , settings ) : [EOL] chambre = lecture . texte . chambre [EOL] source = RemoteSource . get_remote_source_for_chambre ( chambre = chambre , settings = settings ) [EOL] try : [EOL] with Timer ( ) as prepare_timer : [EOL] source . prepare ( lecture ) [EOL] logger . info ( [string] , prepare_timer . elapsed ( ) ) [EOL] [EOL] with Timer ( ) as collect_timer : [EOL] changes = source . collect_changes ( lecture ) [EOL] logger . info ( [string] , collect_timer . elapsed ( ) ) [EOL] [EOL] with Timer ( ) as apply_timer : [EOL] source . apply_changes ( lecture , changes ) [EOL] logger . info ( [string] , apply_timer . elapsed ( ) ) [EOL] [EOL] logger . info ( [string] , sum ( t . elapsed ( ) for t in ( prepare_timer , collect_timer , apply_timer ) ) , ) [EOL] except Exception : [EOL] logger . exception ( f" [string] { lecture }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from operator import attrgetter [EOL] from typing import List [EOL] [EOL] import transaction [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . admin import AdminGrant , AdminRevoke [EOL] from zam_repondeur . models . users import User [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] logging . getLogger ( ) . setLevel ( logging . WARNING ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] if args . command == [string] : [EOL] grant_admin ( email = args . email ) [EOL] elif args . command == [string] : [EOL] list_admins ( ) [EOL] elif args . command == [string] : [EOL] revoke_admin ( email = args . email ) [EOL] else : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] [EOL] subparsers = parser . add_subparsers ( dest = [string] , metavar = [string] ) [EOL] [EOL] parser_grant = subparsers . add_parser ( [string] , help = [string] ) [EOL] parser_grant . add_argument ( [string] ) [EOL] [EOL] subparsers . add_parser ( [string] , help = [string] ) [EOL] [EOL] parser_revoke = subparsers . add_parser ( [string] , help = [string] ) [EOL] parser_revoke . add_argument ( [string] ) [EOL] [EOL] args = parser . parse_args ( argv ) [EOL] [EOL] if args . command is None : [EOL] parser . print_help ( ) [EOL] sys . exit ( [number] ) [EOL] [EOL] return args [EOL] [EOL] [EOL] def grant_admin ( email ) : [EOL] with transaction . manager : [EOL] user = DBSession . query ( User ) . filter ( User . email == email ) . first ( ) [EOL] if not user : [EOL] print ( f" [string] { email } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] if user . is_admin : [EOL] print ( f" [string] { user } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] AdminGrant . create ( target = user ) [EOL] [EOL] [EOL] def list_admins ( ) : [EOL] for user in sorted ( DBSession . query ( User ) . filter ( User . admin_at . isnot ( None ) ) , key = attrgetter ( [string] ) , ) : [EOL] print ( user , user . admin_at , sep = [string] ) [EOL] [EOL] [EOL] def revoke_admin ( email ) : [EOL] with transaction . manager : [EOL] user = DBSession . query ( User ) . filter ( User . email == email ) . first ( ) [EOL] if not user : [EOL] print ( f" [string] { email } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] if not user . is_admin : [EOL] print ( f" [string] { user } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] AdminRevoke . create ( target = user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import List [EOL] [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] repository . reset_locks ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] return parser . parse_args ( argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Any [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from operator import attrgetter [EOL] from typing import List , Optional [EOL] [EOL] import transaction [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . models import DBSession [EOL] from zam_repondeur . models . events . whitelist import WhitelistAdd , WhitelistRemove [EOL] from zam_repondeur . models . users import AllowedEmailPattern , User [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] logging . getLogger ( ) . setLevel ( logging . WARNING ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] if args . command == [string] : [EOL] add_pattern ( pattern = args . pattern , comment = args . comment ) [EOL] elif args . command == [string] : [EOL] list_patterns ( ) [EOL] elif args . command == [string] : [EOL] remove_pattern ( pattern = args . pattern ) [EOL] elif args . command == [string] : [EOL] check_email ( email = args . email ) [EOL] else : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] [EOL] subparsers = parser . add_subparsers ( dest = [string] , metavar = [string] ) [EOL] [EOL] parser_add = subparsers . add_parser ( [string] , help = [string] ) [EOL] parser_add . add_argument ( [string] , help = AllowedEmailPattern . pattern . doc ) [EOL] parser_add . add_argument ( [string] , help = AllowedEmailPattern . comment . doc ) [EOL] [EOL] subparsers . add_parser ( [string] , help = [string] ) [EOL] [EOL] parser_remove = subparsers . add_parser ( [string] , help = [string] ) [EOL] parser_remove . add_argument ( [string] , help = AllowedEmailPattern . pattern . doc ) [EOL] [EOL] parser_check = subparsers . add_parser ( [string] , help = [string] ) [EOL] parser_check . add_argument ( [string] ) [EOL] [EOL] args = parser . parse_args ( argv ) [EOL] [EOL] if args . command is None : [EOL] parser . print_help ( ) [EOL] sys . exit ( [number] ) [EOL] [EOL] return args [EOL] [EOL] [EOL] def add_pattern ( pattern , comment ) : [EOL] with transaction . manager : [EOL] allowed_email_pattern = ( DBSession . query ( AllowedEmailPattern ) . filter_by ( pattern = pattern ) . first ( ) ) [EOL] if allowed_email_pattern is not None : [EOL] print ( f" [string] { pattern } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] WhitelistAdd . create ( email_pattern = pattern , comment = comment ) [EOL] [EOL] [EOL] def list_patterns ( ) : [EOL] for p in sorted ( DBSession . query ( AllowedEmailPattern ) , key = attrgetter ( [string] ) ) : [EOL] print ( p . created_at . isoformat ( [string] ) [ : [number] ] , p . pattern , p . comment or [string] , sep = [string] ) [EOL] [EOL] [EOL] def remove_pattern ( pattern ) : [EOL] with transaction . manager : [EOL] allowed_email_pattern = ( DBSession . query ( AllowedEmailPattern ) . filter_by ( pattern = pattern ) . first ( ) ) [EOL] if allowed_email_pattern is None : [EOL] print ( f" [string] { pattern } [string] " , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] WhitelistRemove . create ( allowed_email_pattern = allowed_email_pattern ) [EOL] [EOL] [EOL] def check_email ( email ) : [EOL] normalized_email = User . normalize_email ( email ) [EOL] if User . email_is_allowed ( normalized_email ) : [EOL] print ( f"{ normalized_email } [string] " ) [EOL] else : [EOL] print ( f"{ normalized_email } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Any [EOL] import logging [EOL] import typing [EOL] import argparse [EOL] import datetime [EOL] import builtins [EOL] import zam_repondeur [EOL] [docstring] [EOL] import logging [EOL] import random [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from datetime import date [EOL] from typing import List , Optional [EOL] [EOL] import transaction [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . models import Amendement , Chambre , DBSession , Lecture , Texte [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] log_level = logging . WARNING [EOL] if args . verbose : [EOL] log_level = logging . INFO [EOL] if args . debug : [EOL] log_level = logging . DEBUG [EOL] logging . getLogger ( ) . setLevel ( log_level ) [EOL] logging . getLogger ( [string] ) . setLevel ( log_level ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] with transaction . manager : [EOL] lecture = find_lecture ( chambre = args . chambre , legislature = args . legislature , session = args . session , organe = args . organe , num = args . num , partie = args . partie , ) [EOL] print ( lecture . dossier . titre ) [EOL] print ( lecture ) [EOL] print ( [string] , len ( lecture . amendements ) , [string] ) [EOL] create_fake_amendements ( lecture , count = args . count ) [EOL] print ( [string] , len ( lecture . amendements ) , [string] ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] , type = int , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , type = int , required = False , default = None ) [EOL] parser . add_argument ( [string] , required = True , choices = [ [string] , [string] ] ) [EOL] parser . add_argument ( [string] , type = int , required = False ) [EOL] parser . add_argument ( [string] , type = int , required = False ) [EOL] parser . add_argument ( [string] , required = True ) [EOL] parser . add_argument ( [string] , [string] , action = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] ) [EOL] parser . add_argument ( [string] , type = int ) [EOL] return parser . parse_args ( argv ) [EOL] [EOL] [EOL] def find_lecture ( num , partie , chambre , legislature , session , organe , ) : [EOL] texte = ( DBSession . query ( Texte ) . filter_by ( chambre = Chambre . from_string ( chambre ) , legislature = legislature , session = session , numero = num , ) . one ( ) ) [EOL] lecture = ( DBSession . query ( Lecture ) . filter_by ( texte = texte , partie = partie , organe = organe ) . one ( ) ) [EOL] return lecture [EOL] [EOL] [EOL] def create_fake_amendements ( lecture , count ) : [EOL] start = max ( amdt . num for amdt in lecture . amendements ) + [number] [EOL] today = date . today ( ) [EOL] for num in range ( start , start + count ) : [EOL] Amendement . create ( lecture = lecture , article = random . choice ( lecture . articles ) , num = num , auteur = [string] , date_depot = today , expose = ( [string] [string] [string] [string] ) , corps = ( [string] [string] [string] ) , ) [EOL] print ( [string] , start , [string] , start + count - [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.models.Lecture$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import argparse [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import List [EOL] [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] logging . getLogger ( ) . setLevel ( logging . WARNING ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] from zam_repondeur . services . amendements import ( repository as repository_amendements , ) [EOL] from zam_repondeur . services . data import repository as repository_data [EOL] from zam_repondeur . services . progress import repository as repository_progress [EOL] from zam_repondeur . services . users import repository as repository_users [EOL] [EOL] repository_amendements . clear_data ( ) [EOL] repository_data . clear_data ( ) [EOL] repository_progress . clear_data ( ) [EOL] repository_users . clear_data ( ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] return parser . parse_args ( argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Dict [EOL] import logging [EOL] import huey [EOL] import typing [EOL] import argparse [EOL] import builtins [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import Any , Dict , List [EOL] [EOL] from huey import Huey [EOL] from huey . constants import WORKER_PROCESS [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] from redis . exceptions import ConnectionError [EOL] [EOL] from zam_repondeur . errors import extract_settings , setup_rollbar_log_handler [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] options = { [string] : [string] } [EOL] [EOL] with bootstrap ( args . config_uri , options = options ) as env : [EOL] settings = env [ [string] ] . settings [EOL] request = env [ [string] ] [EOL] [EOL] rollbar_settings = extract_settings ( settings , prefix = [string] ) [EOL] if [string] in rollbar_settings and [string] in rollbar_settings : [EOL] setup_rollbar_log_handler ( rollbar_settings ) [EOL] [EOL] start_huey ( args . config_uri , options , settings , request . huey ) [EOL] [EOL] [EOL] def start_huey ( config_uri , options , settings , huey ) : [EOL] from zam_repondeur . tasks . fetch import ( fetch_amendements , fetch_articles , update_dossier , ) [EOL] from zam_repondeur . tasks . periodic import update_all_dossiers , update_data [comment] [EOL] [EOL] try : [EOL] flush_stale_locks ( huey ) [EOL] except ConnectionError : [EOL] logger . exception ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] @ huey . on_startup ( ) def startup_hook ( ) : [EOL] bootstrap ( config_uri , options = options ) [EOL] [EOL] consumer = huey . create_consumer ( worker_type = WORKER_PROCESS , workers = int ( settings [ [string] ] ) , max_delay = [number] , flush_locks = True , ) [EOL] consumer . run ( ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] return parser . parse_args ( argv ) [EOL] [EOL] [EOL] def flush_stale_locks ( huey ) : [EOL] [docstring] [EOL] redis_conn = huey . storage . conn [EOL] results = redis_conn . hgetall ( [string] ) [EOL] locks = [ key for key in results . keys ( ) if key . startswith ( [string] ) ] [EOL] if locks : [EOL] logger . info ( [string] , locks ) [EOL] response = redis_conn . hdel ( [string] , * locks ) [EOL] if response == len ( locks ) : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . warning ( [string] , response ) [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import List [EOL] [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] logging . getLogger ( ) . setLevel ( logging . WARNING ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) : [EOL] repository . load_data ( ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] return parser . parse_args ( argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import argparse [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] import sys [EOL] from argparse import ArgumentParser , Namespace [EOL] from typing import List [EOL] [EOL] from pyramid . paster import bootstrap , setup_logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( argv = sys . argv ) : [EOL] [EOL] args = parse_args ( argv [ [number] : ] ) [EOL] [EOL] setup_logging ( args . config_uri ) [EOL] [EOL] with bootstrap ( args . config_uri , options = { [string] : [string] } ) as env : [EOL] request = env [ [string] ] [EOL] huey = request . huey [EOL] count = huey . pending_count ( ) [EOL] if args . count_only : [EOL] print ( count ) [EOL] else : [EOL] print ( f"{ count } [string] " ) [EOL] for task in huey . pending ( ) : [EOL] print ( task ) [EOL] [EOL] [EOL] def parse_args ( argv ) : [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , ) [EOL] return parser . parse_args ( argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pyramid [EOL] import huey [EOL] from huey import Huey [EOL] from pyramid . config import Configurator [EOL] from pyramid . request import Request [EOL] from zope . interface import Interface [EOL] [EOL] from . huey import init_huey [EOL] [EOL] [EOL] class IHuey ( Interface ) : [EOL] pass [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] [docstring] [EOL] huey = init_huey ( config . registry . settings ) [EOL] config . registry . registerUtility ( component = huey , provided = IHuey ) [EOL] config . add_request_method ( get_huey , [string] , reify = True ) [EOL] [EOL] [EOL] def get_huey ( request ) : [EOL] return request . registry . queryUtility ( IHuey ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $huey.Huey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import zam_repondeur [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] from typing import Optional [EOL] [EOL] import transaction [EOL] [EOL] from zam_repondeur . models import Chambre , DBSession , Dossier , Lecture , Texte , User [EOL] from zam_repondeur . models . events . dossier import LecturesRecuperees [EOL] from zam_repondeur . models . events . lecture import ( AmendementsAJour , AmendementsNonRecuperes , AmendementsNonTrouves , AmendementsRecuperes , ArticlesRecuperes , LectureCreee , TexteMisAJour , ) [EOL] from zam_repondeur . services . data import repository [EOL] from zam_repondeur . services . fetch import get_articles [EOL] from zam_repondeur . services . fetch . amendements import FetchResult , RemoteSource [EOL] from zam_repondeur . services . fetch . an . dossiers . models import DossierRef , LectureRef [EOL] from zam_repondeur . services . fetch . senat . scraping import create_dossier_ref [EOL] from zam_repondeur . tasks . huey import huey [EOL] from zam_repondeur . utils import Timer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] RETRY_DELAY = [number] * [number] [comment] [EOL] [EOL] [EOL] @ huey . task ( retries = [number] , retry_delay = RETRY_DELAY ) def update_dossier ( dossier_pk , force = False ) : [EOL] with huey . lock_task ( f" [string] { dossier_pk }" ) : [EOL] dossier = DBSession . query ( Dossier ) . get ( dossier_pk ) [EOL] if dossier is None : [EOL] logger . error ( f" [string] { dossier_pk } [string] " ) [EOL] return [EOL] [EOL] [comment] [EOL] for lecture in reversed ( dossier . lectures ) : [EOL] [EOL] [comment] [EOL] if force or lecture . refreshable_for ( [string] , huey . settings ) : [EOL] fetch_articles ( lecture . pk ) [EOL] [EOL] [comment] [EOL] if force or lecture . refreshable_for ( [string] , huey . settings ) : [EOL] fetch_amendements ( lecture . pk ) [EOL] [EOL] [comment] [EOL] create_missing_lectures ( dossier . pk ) [EOL] [EOL] [EOL] @ huey . task ( retries = [number] , retry_delay = RETRY_DELAY ) def fetch_articles ( lecture_pk ) : [EOL] if lecture_pk is None : [EOL] logger . error ( [string] ) [EOL] return False [EOL] [EOL] with huey . lock_task ( f" [string] { lecture_pk }" ) : [EOL] lecture = DBSession . query ( Lecture ) . with_for_update ( ) . get ( lecture_pk ) [EOL] if lecture is None : [EOL] logger . error ( f" [string] { lecture_pk } [string] " ) [EOL] return False [EOL] [EOL] changed = get_articles ( lecture ) [EOL] if changed : [EOL] ArticlesRecuperes . create ( lecture = lecture ) [EOL] return changed [EOL] [EOL] [EOL] @ huey . task ( retries = [number] , retry_delay = RETRY_DELAY ) def fetch_amendements ( lecture_pk ) : [EOL] if lecture_pk is None : [EOL] logger . error ( [string] ) [EOL] return False [EOL] [EOL] with huey . lock_task ( f" [string] { lecture_pk }" ) : [EOL] [EOL] lecture = DBSession . query ( Lecture ) . get ( lecture_pk ) [EOL] if lecture is None : [EOL] logger . error ( f" [string] { lecture_pk } [string] " ) [EOL] return False [EOL] [EOL] total_timer = Timer ( ) [EOL] total_timer . start ( ) [EOL] [EOL] logger . info ( [string] , lecture ) [EOL] [EOL] [comment] [EOL] prefetching_enabled = int ( huey . settings [ [string] ] ) > [number] [EOL] [EOL] source = RemoteSource . get_remote_source_for_chambre ( chambre = lecture . chambre , settings = huey . settings , prefetching_enabled = prefetching_enabled , ) [EOL] [EOL] [comment] [EOL] with Timer ( ) as prepare_timer : [EOL] source . prepare ( lecture ) [EOL] logger . info ( [string] , prepare_timer . elapsed ( ) ) [EOL] [EOL] cumulated_result = FetchResult . create ( ) [EOL] [EOL] nb_batches = [number] [EOL] start_index = [number] [EOL] [EOL] while True : [EOL] [EOL] logger . info ( [string] , nb_batches ) [EOL] [EOL] [comment] [EOL] with Timer ( ) as collect_timer : [EOL] changes = source . collect_changes ( lecture = lecture , start_index = start_index ) [EOL] logger . info ( [string] , collect_timer . elapsed ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not huey . immediate : [EOL] transaction . commit ( ) [EOL] transaction . abort ( ) [EOL] transaction . begin ( ) [EOL] [EOL] lecture = DBSession . query ( Lecture ) . with_for_update ( ) . get ( lecture_pk ) [EOL] if lecture is None : [EOL] logger . error ( f" [string] { lecture_pk } [string] " ) [EOL] return False [EOL] [EOL] with Timer ( ) as apply_timer : [EOL] batch_result = source . apply_changes ( lecture , changes ) [EOL] logger . info ( [string] , apply_timer . elapsed ( ) ) [EOL] [EOL] logger . info ( [string] , sum ( t . elapsed ( ) for t in ( prepare_timer , collect_timer , apply_timer ) ) , ) [EOL] [EOL] if batch_result . created : [EOL] AmendementsRecuperes . create ( lecture = lecture , count = len ( batch_result . created ) ) [EOL] [EOL] if batch_result . errored : [EOL] AmendementsNonRecuperes . create ( lecture = lecture , missings = [ str ( num ) for num in sorted ( batch_result . errored ) ] , ) [EOL] [EOL] cumulated_result += batch_result [EOL] if batch_result . next_start_index is None : [EOL] break [EOL] [EOL] start_index = batch_result . next_start_index [EOL] [EOL] nb_batches += [number] [EOL] [EOL] total_timer . stop ( ) [EOL] logger . info ( [string] , nb_batches , total_timer . elapsed ( ) ) [EOL] [EOL] if not cumulated_result . fetched : [EOL] AmendementsNonTrouves . create ( lecture = lecture ) [EOL] [EOL] if cumulated_result . changed : [EOL] AmendementsAJour . create ( lecture = lecture ) [EOL] [EOL] return cumulated_result . changed [EOL] [EOL] [EOL] @ huey . task ( ) def create_missing_lectures ( dossier_pk , user_pk = None ) : [EOL] with huey . lock_task ( f" [string] { dossier_pk }" ) : [EOL] dossier = DBSession . query ( Dossier ) . get ( dossier_pk ) [EOL] if dossier is None : [EOL] logger . error ( f" [string] { dossier_pk } [string] " ) [EOL] return [EOL] [EOL] if user_pk is not None : [EOL] user = DBSession . query ( User ) . get ( user_pk ) [EOL] else : [EOL] user = None [EOL] [EOL] changed = False [EOL] changed |= create_missing_lectures_an ( dossier , user ) [EOL] changed |= create_missing_lectures_senat ( dossier , user ) [EOL] [EOL] if changed : [EOL] LecturesRecuperees . create ( dossier = dossier , user = user ) [EOL] [EOL] [EOL] def create_missing_lectures_an ( dossier , user ) : [EOL] [comment] [EOL] [EOL] dossier_ref_an = ... [EOL] [EOL] if dossier . an_id : [EOL] dossier_ref_an = repository . get_opendata_dossier_ref ( dossier . an_id ) [EOL] else : [EOL] dossier_ref_senat = repository . get_senat_scraping_dossier_ref ( dossier . senat_id ) [EOL] dossier_ref_an = find_matching_dossier_ref_an ( dossier_ref_senat ) [EOL] [EOL] changed = False [EOL] if dossier_ref_an : [EOL] for lecture_ref in dossier_ref_an . lectures : [EOL] if lecture_ref . chambre == Chambre . AN : [EOL] changed |= create_or_update_lecture ( dossier , lecture_ref , user ) [EOL] return changed [EOL] [EOL] [EOL] def find_matching_dossier_ref_an ( dossier_ref_senat ) : [EOL] [comment] [EOL] [comment] [EOL] an_url = dossier_ref_senat . normalized_an_url [EOL] if an_url : [EOL] dossier_ref = repository . get_opendata_dossier_ref_by_an_url ( an_url ) [EOL] if dossier_ref : [EOL] return dossier_ref [EOL] [EOL] [comment] [EOL] senat_url = dossier_ref_senat . normalized_senat_url [EOL] if senat_url : [EOL] dossier_ref = repository . get_opendata_dossier_ref_by_senat_url ( senat_url ) [EOL] if dossier_ref : [EOL] return dossier_ref [EOL] [EOL] return None [EOL] [EOL] [EOL] def create_missing_lectures_senat ( dossier , user ) : [EOL] dossier_ref_senat = ... [EOL] [EOL] if dossier . senat_id : [EOL] dossier_ref_senat = get_senat_dossier_ref_from_cache_or_scrape ( dossier_id = dossier . senat_id ) [EOL] else : [EOL] dossier_ref_an = repository . get_opendata_dossier_ref ( dossier . an_id ) [EOL] dossier_ref_senat = find_matching_dossier_ref_senat ( dossier_ref_an ) [EOL] [EOL] changed = False [EOL] if dossier_ref_senat is not None : [EOL] for lecture_ref in dossier_ref_senat . lectures : [EOL] if lecture_ref . chambre == Chambre . SENAT : [EOL] changed |= create_or_update_lecture ( dossier , lecture_ref , user ) [EOL] return changed [EOL] [EOL] [EOL] def find_matching_dossier_ref_senat ( dossier_ref_an ) : [EOL] [comment] [EOL] senat_url = dossier_ref_an . senat_url [EOL] dossier_id = dossier_ref_an . senat_dossier_id [EOL] if senat_url and dossier_id : [EOL] return get_senat_dossier_ref_from_cache_or_scrape ( dossier_id = dossier_id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] an_url = dossier_ref_an . normalized_an_url [EOL] return repository . get_senat_scraping_dossier_ref_by_an_url ( an_url ) [EOL] [EOL] [EOL] def get_senat_dossier_ref_from_cache_or_scrape ( dossier_id ) : [EOL] [docstring] [EOL] dossier_ref_senat = repository . get_senat_scraping_dossier_ref ( dossier_id ) [EOL] if dossier_ref_senat is None : [EOL] dossier_ref_senat = create_dossier_ref ( dossier_id ) [EOL] return dossier_ref_senat [EOL] [EOL] [EOL] def create_or_update_lecture ( dossier , lecture_ref , user ) : [EOL] changed = False [EOL] [EOL] lecture_created = False [EOL] lecture_updated = False [EOL] [EOL] texte = Texte . get_or_create_from_ref ( lecture_ref . texte , lecture_ref . chambre ) [EOL] [EOL] lecture = Lecture . get_from_ref ( lecture_ref , dossier ) [EOL] [EOL] if lecture is not None and lecture . texte is not texte : [EOL] [comment] [EOL] [comment] [EOL] TexteMisAJour . create ( lecture = lecture , texte = texte ) [EOL] lecture_updated = True [EOL] [EOL] if lecture is None : [EOL] lecture = Lecture . create_from_ref ( lecture_ref , dossier , texte ) [EOL] LectureCreee . create ( lecture = lecture , user = user ) [EOL] lecture_created = True [EOL] [EOL] if lecture_created or lecture_updated : [EOL] changed = True [EOL] [EOL] [comment] [EOL] DBSession . flush ( ) [EOL] [EOL] [comment] [EOL] huey . enqueue_on_transaction_commit ( fetch_articles . s ( lecture . pk ) ) [EOL] huey . enqueue_on_transaction_commit ( fetch_amendements . s ( lecture . pk ) ) [EOL] [EOL] return changed [EOL]	builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[zam_repondeur.services.fetch.an.dossiers.models.DossierRef]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zam_repondeur.services.fetch.an.dossiers.models.DossierRef$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] from typing import Set [EOL] [EOL] from huey import crontab [EOL] [EOL] from zam_repondeur . models import DBSession , Dossier , Team , Texte [EOL] from zam_repondeur . tasks . fetch import ( find_matching_dossier_ref_an , find_matching_dossier_ref_senat , update_dossier , ) [EOL] from zam_repondeur . tasks . huey import huey [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ huey . periodic_task ( crontab ( minute = [string] , hour = [string] ) ) def update_data ( ) : [EOL] update_data_repository ( ) [EOL] update_dossiers ( ) [EOL] update_textes ( ) [EOL] [EOL] [EOL] def update_data_repository ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] logger . info ( [string] ) [EOL] repository . load_data ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def update_dossiers ( ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] create_missing_dossiers_an ( ) [EOL] create_missing_dossiers_senat ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def create_missing_dossiers_an ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] known_an_ids = _known_an_ids ( ) [EOL] existing_an_ids = _existing_an_ids ( ) [EOL] existing_senat_ids = _existing_senat_ids ( ) [EOL] missing_an_ids = known_an_ids - existing_an_ids [EOL] [EOL] for an_id in missing_an_ids : [EOL] [EOL] dossier_ref_an = repository . get_opendata_dossier_ref ( an_id ) [EOL] if dossier_ref_an is None : [EOL] continue [EOL] [EOL] [comment] [EOL] dossier_ref_senat = find_matching_dossier_ref_senat ( dossier_ref_an ) [EOL] if dossier_ref_senat : [EOL] if dossier_ref_senat . uid in existing_senat_ids : [EOL] continue [EOL] [EOL] senat_id = dossier_ref_senat . uid if dossier_ref_senat else None [EOL] [EOL] Dossier . create ( an_id = an_id , senat_id = senat_id , titre = dossier_ref_an . titre , slug = dossier_ref_an . slug , ) [EOL] [EOL] [EOL] def create_missing_dossiers_senat ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] known_senat_ids = _known_senat_ids ( ) [EOL] existing_senat_ids = _existing_senat_ids ( ) [EOL] existing_an_ids = _existing_an_ids ( ) [EOL] missing_senat_ids = known_senat_ids - existing_senat_ids [EOL] [EOL] for senat_id in missing_senat_ids : [EOL] [EOL] dossier_ref_senat = repository . get_senat_scraping_dossier_ref ( senat_id ) [EOL] if dossier_ref_senat is None : [EOL] continue [EOL] [EOL] [comment] [EOL] dossier_ref_an = find_matching_dossier_ref_an ( dossier_ref_senat ) [EOL] if dossier_ref_an : [EOL] if dossier_ref_an . uid in existing_an_ids : [EOL] continue [EOL] [EOL] an_id = dossier_ref_an . uid if dossier_ref_an else None [EOL] [EOL] Dossier . create ( an_id = an_id , senat_id = senat_id , titre = dossier_ref_senat . titre , slug = dossier_ref_senat . slug , ) [EOL] [EOL] [EOL] def _known_an_ids ( ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] return set ( repository . list_opendata_dossiers ( ) ) [EOL] [EOL] [EOL] def _known_senat_ids ( ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] return set ( repository . list_senat_scraping_dossiers ( ) ) [EOL] [EOL] [EOL] def _existing_an_ids ( ) : [EOL] return set ( t [ [number] ] for t in DBSession . query ( Dossier . an_id ) . filter ( Dossier . an_id . __ne__ ( None ) ) ) [EOL] [EOL] [EOL] def _existing_senat_ids ( ) : [EOL] return set ( t [ [number] ] for t in DBSession . query ( Dossier . senat_id ) . filter ( Dossier . senat_id . __ne__ ( None ) ) ) [EOL] [EOL] [EOL] def update_textes ( ) : [EOL] [docstring] [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] logger . info ( [string] ) [EOL] create_missing_textes ( set ( repository . list_opendata_textes ( ) ) ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def create_missing_textes ( all_textes ) : [EOL] from zam_repondeur . services . data import repository [EOL] [EOL] existing_textes = set ( DBSession . query ( Texte . chambre , Texte . session , Texte . legislature , Texte . numero ) ) [EOL] texte_refs = { repository . get_opendata_texte ( uid ) for uid in all_textes } [EOL] new_texte_refs = { texte_ref for texte_ref in texte_refs if ( texte_ref . chambre , texte_ref . session , texte_ref . legislature , texte_ref . numero , ) not in existing_textes } [EOL] for texte_ref in new_texte_refs : [EOL] if texte_ref . date_depot is None : [EOL] logger . warning ( [string] , texte_ref . uid ) [EOL] continue [EOL] Texte . create ( type_ = texte_ref . type_ , chambre = texte_ref . chambre , session = texte_ref . session , legislature = texte_ref . legislature , numero = texte_ref . numero , date_depot = texte_ref . date_depot , ) [EOL] [EOL] [EOL] [comment] [EOL] @ huey . periodic_task ( crontab ( minute = [string] , hour = [string] ) ) def update_all_dossiers ( ) : [EOL] for team in DBSession . query ( Team ) . filter ( Team . dossier_pk . isnot ( None ) ) : [EOL] dossier_pk = team . dossier_pk [EOL] delay = ( dossier_pk % [number] ) * [number] [comment] [EOL] update_dossier . schedule ( args = ( dossier_pk , ) , delay = delay ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import repondeur [EOL] import huey [EOL] import queue [EOL] import builtins [EOL] from huey . api import Huey , RedisStorage [EOL] from paste . deploy . converters import asbool [EOL] [EOL] from . queue import TransactionalHuey [EOL] [EOL] huey = None [comment] [EOL] [EOL] [EOL] def init_huey ( settings ) : [EOL] global huey [EOL] if huey is None : [EOL] huey = TransactionalHuey ( storage_class = RedisStorage , url = settings [ [string] ] , immediate = asbool ( settings . get ( [string] , [string] ) ) , transactional_enqueue = asbool ( settings . get ( [string] , [string] ) ) , ) [EOL] huey . settings = settings [EOL] return huey [EOL]	0 0 0 0 $queue.TransactionalHuey$ 0 0 0 0 0 0 0 0 $queue.TransactionalHuey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $queue.TransactionalHuey$ 0 0 0 0 0 0 0 $huey.api.Huey$ 0 0 0 0 0 0 $queue.TransactionalHuey$ 0 0 $queue.TransactionalHuey$ 0 0 0 0 $queue.TransactionalHuey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $queue.TransactionalHuey$ 0 0 0 0 0 0 $queue.TransactionalHuey$ 0
from typing import Optional , Any , Callable [EOL] import logging [EOL] import huey [EOL] import typing [EOL] import repondeur [EOL] import builtins [EOL] import logging [EOL] from enum import Enum [EOL] from functools import wraps [EOL] from typing import Any , Callable , Optional [EOL] [EOL] import transaction [EOL] from huey . api import Huey , PeriodicTask , Task , TaskWrapper [EOL] from transaction . interfaces import IDataManager [EOL] from zope . interface import implementer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class State ( Enum ) : [EOL] INIT = [number] [EOL] NO_WORK = [number] [EOL] COMMITTED = [number] [EOL] ABORTED = [number] [EOL] TPC_NONE = [number] [EOL] TPC_BEGIN = [number] [EOL] TPC_VOTED = [number] [EOL] TPC_COMMITED = [number] [EOL] TPC_FINISHED = [number] [EOL] TPC_ABORTED = [number] [EOL] [EOL] [EOL] class TransactionalHuey ( Huey ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * , transactional_enqueue = True , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . transactional_enqueue = transactional_enqueue [EOL] [EOL] def enqueue ( self , task ) : [EOL] logger . debug ( [string] , task ) [EOL] [EOL] [comment] [EOL] if self . transactional_enqueue : [EOL] logger . debug ( [string] [string] ) [EOL] self . enqueue_on_transaction_commit ( task ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] self . really_enqueue ( task ) [EOL] [EOL] def enqueue_on_transaction_commit ( self , task ) : [EOL] [comment] [EOL] [comment] [EOL] if self . immediate : [EOL] logger . debug ( [string] ) [EOL] self . really_enqueue ( task ) [EOL] return [EOL] [EOL] managed_task = ManagedTask ( self , task ) [EOL] managed_task . join_transaction ( ) [EOL] [EOL] def really_enqueue ( self , task ) : [EOL] super ( ) . enqueue ( task ) [EOL] [EOL] def task ( self , retries = [number] , retry_delay = [number] , priority = None , context = False , name = None , ** kwargs ) : [EOL] def decorator ( func ) : [comment] [EOL] return TaskWrapper ( self , self . _transaction_wrapper ( func ) , retries = retries , retry_delay = retry_delay , default_priority = priority , context = context , name = name , ** kwargs ) [EOL] [EOL] return decorator [EOL] [EOL] def periodic_task ( self , validate_datetime , retries = [number] , retry_delay = [number] , priority = None , context = False , name = None , ** kwargs ) : [EOL] def decorator ( func ) : [comment] [EOL] def method_validate ( self , timestamp ) : [comment] [EOL] return validate_datetime ( timestamp ) [EOL] [EOL] return TaskWrapper ( self , self . _transaction_wrapper ( func ) , context = context , name = name , default_retries = retries , default_retry_delay = retry_delay , default_priority = priority , validate_datetime = method_validate , task_base = PeriodicTask , ** kwargs ) [EOL] [EOL] return decorator [EOL] [EOL] def _transaction_wrapper ( self , func ) : [EOL] if isinstance ( func , TaskWrapper ) : [EOL] func = func . func [EOL] if not self . immediate : [EOL] func = self . run_in_transaction ( func ) [EOL] return func [EOL] [EOL] @ staticmethod def run_in_transaction ( func ) : [EOL] @ wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] with transaction . manager : [EOL] return func ( * args , ** kwargs ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] @ implementer ( IDataManager ) class ManagedTask : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , huey , task , transaction_manager = None ) : [EOL] logger . debug ( [string] , task ) [EOL] self . huey = huey [EOL] self . task = task [EOL] if transaction_manager is None : [EOL] transaction_manager = transaction . manager [EOL] self . transaction_manager = transaction_manager [EOL] self . transaction = None [EOL] self . state = State . INIT [EOL] self . tpc_phase = [number] [EOL] [EOL] def join_transaction ( self , trans = None ) : [EOL] [docstring] [EOL] if trans is not None : [EOL] logger . debug ( [string] , trans ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] [EOL] _before = self . transaction [EOL] [EOL] if trans is not None : [EOL] _after = trans [EOL] else : [EOL] _after = self . transaction_manager . get ( ) [EOL] [EOL] if _before is not None and _before is not _after : [EOL] if self in _before . _resources : [EOL] raise ValueError ( [string] [string] [string] ) [EOL] [EOL] if self not in _after . _resources : [EOL] _after . join ( self ) [EOL] [EOL] self . transaction = _after [EOL] [EOL] def _finish ( self , final_state ) : [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] self . state = final_state [EOL] self . tpc_phase = [number] [EOL] [EOL] def commit ( self , trans ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] [comment] [EOL] [EOL] def abort ( self , trans ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] if self . tpc_phase != [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def sortKey ( self ) : [EOL] return str ( id ( self ) ) [EOL] [EOL] def tpc_begin ( self , trans , subtransaction = False ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] if self . tpc_phase != [number] : [EOL] raise ValueError ( [string] ) [EOL] if subtransaction : [EOL] raise ValueError ( [string] ) [EOL] self . tpc_phase = [number] [EOL] [EOL] def tpc_vote ( self , trans ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] if self . tpc_phase != [number] : [EOL] raise ValueError ( [string] % self . tpc_phase ) [EOL] [EOL] [comment] [EOL] self . huey . pending_count ( ) [EOL] [EOL] self . tpc_phase = [number] [EOL] [EOL] def tpc_finish ( self , trans ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] if self . tpc_phase != [number] : [EOL] raise ValueError ( [string] % self . tpc_phase ) [EOL] [EOL] [comment] [EOL] self . huey . really_enqueue ( self . task ) [EOL] [EOL] self . _finish ( State . TPC_FINISHED ) [EOL] [EOL] def tpc_abort ( self , trans ) : [EOL] logger . debug ( [string] , trans ) [EOL] if self . transaction is None : [EOL] raise ValueError ( [string] ) [EOL] if self . transaction is not trans : [EOL] raise ValueError ( [string] ) [EOL] if self . tpc_phase == [number] : [EOL] raise ValueError ( [string] % self . tpc_phase ) [EOL] if self . state is State . TPC_FINISHED : [EOL] raise ValueError ( [string] ) [EOL] self . _finish ( State . TPC_ABORTED ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $repondeur.zam_repondeur.tasks.queue.ManagedTask$ 0 0 0 0 0 $typing.Any$ 0 0 $repondeur.zam_repondeur.tasks.queue.ManagedTask$ 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Callable$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 $typing.Callable$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 $typing.Callable[...,typing.Any]$ 0 $typing.Callable[...,typing.Any]$ 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 $typing.Callable$ 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $State$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] from datetime import datetime [EOL] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] [EOL] from zam_repondeur . services . fetch . an . dossiers . dossiers_legislatifs import ( get_dossiers_legislatifs_and_textes , ) [EOL] [EOL] LEGISLATURES = [ [number] , [number] ] [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] connection = op . get_bind ( ) [EOL] [EOL] dossiers_table = op . create_table ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . Column ( [string] , sa . DateTime ( ) , nullable = False ) , sa . Column ( [string] , sa . DateTime ( ) , nullable = False ) , sa . PrimaryKeyConstraint ( [string] ) , ) [EOL] textes_table = op . create_table ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . Column ( [string] , sa . Enum ( [string] , [string] , name = [string] ) , nullable = False ) , sa . Column ( [string] , sa . Enum ( [string] , [string] , name = [string] ) , nullable = False ) , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) , sa . Column ( [string] , sa . Integer ( ) , nullable = False ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . Column ( [string] , sa . Text ( ) , nullable = False ) , sa . Column ( [string] , sa . Date ( ) , nullable = False ) , sa . Column ( [string] , sa . DateTime ( ) , nullable = False ) , sa . Column ( [string] , sa . DateTime ( ) , nullable = False ) , sa . PrimaryKeyConstraint ( [string] ) , sa . UniqueConstraint ( [string] , name = op . f ( [string] ) ) , ) [EOL] op . create_index ( [string] , [string] , [ [string] , [string] , [string] , [string] ] , unique = True , ) [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) ) [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) ) [EOL] op . create_index ( [string] , [string] , [ [string] , [string] , [string] , [string] ] , unique = True , ) [EOL] op . drop_index ( [string] , table_name = [string] , ) [EOL] op . create_foreign_key ( op . f ( [string] ) , [string] , [string] , [ [string] ] , [ [string] ] ) [EOL] op . create_foreign_key ( op . f ( [string] ) , [string] , [string] , [ [string] ] , [ [string] ] ) [EOL] [EOL] [comment] [EOL] dossiers_by_uid , _ = get_dossiers_legislatifs_and_textes ( * LEGISLATURES ) [EOL] [EOL] now = datetime . utcnow ( ) [EOL] [EOL] print ( [string] ) [EOL] op . bulk_insert ( dossiers_table , [ { [string] : uid , [string] : dossier . titre , [string] : now , [string] : now } for uid , dossier in dossiers_by_uid . items ( ) ] , ) [EOL] [EOL] print ( [string] ) [EOL] textes = { lecture . texte for dossier in dossiers_by_uid . values ( ) for lecture in dossier . lectures } [EOL] textes_data = [ { [string] : texte . uid , [string] : texte . type_ . name , [string] : texte . chambre . name , [string] : texte . session , [string] : texte . legislature , [string] : texte . numero , [string] : texte . titre_long , [string] : texte . titre_court , [string] : texte . date_depot , [string] : now , [string] : now , } for texte in textes ] [EOL] op . bulk_insert ( textes_table , textes_data ) [EOL] [EOL] print ( [string] ) [EOL] lectures = connection . execute ( [string] ) [EOL] for lecture in lectures : [EOL] texte = _find_texte_from_lecture ( connection , lecture ) [EOL] dossier = _find_dossier_by_titre ( connection , dossiers_table , lecture . dossier_legislatif ) [EOL] connection . execute ( f" [string] { texte . pk } [string] { dossier . pk } [string] " f" [string] { lecture . pk } [string] " ) [EOL] [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] [EOL] def _find_texte_from_lecture ( connection , lecture ) : [EOL] if lecture . chambre == [string] : [EOL] chambre = [string] [EOL] session_or_legislature_key = [string] [EOL] session_or_legislature_value = int ( lecture . session ) [EOL] elif lecture . chambre == [string] : [EOL] chambre = [string] [EOL] session_or_legislature_key = [string] [EOL] session_or_legislature_value = int ( lecture . session . split ( [string] ) [ [number] ] ) [EOL] else : [EOL] raise NotImplementedError [EOL] textes = connection . execute ( f" [string] " f" [string] { chambre } [string] " f" [string] { session_or_legislature_key } [string] { session_or_legislature_value } [string] " f" [string] { lecture . num_texte } [string] " f" [string] " ) [EOL] try : [EOL] return next ( textes ) [EOL] except StopIteration : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def _find_dossier_by_titre ( connection , dossiers_table , titre ) : [EOL] [comment] [EOL] [comment] [EOL] query = dossiers_table . select ( ) . where ( dossiers_table . c . titre . like ( titre + [string] ) ) [EOL] matches = connection . execute ( query ) . fetchall ( ) [EOL] if len ( matches ) == [number] : [EOL] raise ValueError ( f" [string] { titre } [string] " ) [EOL] if len ( matches ) > [number] : [EOL] for match in matches : [EOL] print ( match ) [EOL] raise ValueError ( f" [string] { titre } [string] " ) [EOL] return matches [ [number] ] [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] from sqlalchemy . dialects import postgresql [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Integer ( ) , nullable = True ) ) [EOL] op . create_foreign_key ( op . f ( [string] ) , [string] , [string] , [ [string] ] , [ [string] ] ) [EOL] [EOL] [comment] [EOL] connection = op . get_bind ( ) [EOL] results = connection . execute ( [string] ) [EOL] [EOL] for dossier_pk , team_pk in results : [EOL] connection . execute ( sa . text ( [string] ) , team_pk = team_pk , dossier_pk = dossier_pk , ) [EOL] [EOL] op . drop_constraint ( [string] , [string] , type_ = [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , postgresql . TIMESTAMP ( ) , autoincrement = False , nullable = True ) , ) [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . INTEGER ( ) , autoincrement = False , nullable = True ) , ) [EOL] op . create_foreign_key ( [string] , [string] , [string] , [ [string] ] , [ [string] ] , ) [EOL] [EOL] [comment] [EOL] connection = op . get_bind ( ) [EOL] results = connection . execute ( [string] ) [EOL] [EOL] for team_pk , dossier_pk in results : [EOL] connection . execute ( sa . text ( [string] ) , team_pk = team_pk , dossier_pk = dossier_pk , ) [EOL] [EOL] op . drop_constraint ( op . f ( [string] ) , [string] , type_ = [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] for col_name in [ [string] , [string] , [string] , [string] ] : [EOL] op . execute ( f" [string] { col_name } [string] { col_name } [string] " ) [EOL] op . alter_column ( [string] , col_name , nullable = False ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] for col_name in [ [string] , [string] , [string] , [string] ] : [EOL] op . alter_column ( [string] , col_name , nullable = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . rename_table ( [string] , [string] ) [EOL] [EOL] op . alter_column ( [string] , [string] , new_column_name = [string] ) [EOL] [EOL] [comment] [EOL] op . drop_constraint ( [string] , [string] , type_ = [string] ) [EOL] op . create_foreign_key ( [string] , [string] , [string] , [ [string] ] , [ [string] ] , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . rename_table ( [string] , [string] ) [EOL] [EOL] op . alter_column ( [string] , [string] , new_column_name = [string] ) [EOL] [EOL] op . drop_constraint ( [string] , [string] , type_ = [string] ) [EOL] op . create_foreign_key ( [string] , [string] , [string] , [ [string] ] , [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_unique_constraint ( op . f ( [string] ) , [string] , [ [string] ] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_constraint ( op . f ( [string] ) , [string] , type_ = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . alter_column ( [string] , [string] , type_ = sa . Enum ( name = [string] ) , postgresql_using = [string] , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . alter_column ( [string] , [string] , type_ = sa . Text , postgresql_using = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . DateTime ( ) , nullable = True ) ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Any , Dict , List , Tuple , IO [EOL] import requests [EOL] import io [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] from http import HTTPStatus [EOL] from io import BytesIO , TextIOWrapper [EOL] from json import load [EOL] from typing import IO , Any , Dict , Generator , List , Tuple [EOL] from zipfile import ZipFile [EOL] [EOL] import requests [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] from slugify import slugify as _slugify [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def get_dossiers_slugs ( * legislatures ) : [EOL] all_dossiers = { } [EOL] for legislature in legislatures : [EOL] dossiers = _get_dossiers_slugs ( legislature ) [EOL] all_dossiers . update ( dossiers ) [EOL] return all_dossiers [EOL] [EOL] [EOL] def _get_dossiers_slugs ( legislature ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if legislature <= [number] : [EOL] data = list ( fetch_dossiers_legislatifs_and_textes ( legislature ) . values ( ) ) [ [number] ] [EOL] slugs = parse_slugs ( data [ [string] ] [ [string] ] [ [string] ] ) [EOL] else : [EOL] data = fetch_dossiers_legislatifs_and_textes ( legislature ) [EOL] dossiers_data = [ dict_ for filename , dict_ in data . items ( ) if filename . startswith ( [string] ) ] [EOL] slugs = parse_slugs ( dossiers_data ) [EOL] return slugs [EOL] [EOL] [EOL] def fetch_dossiers_legislatifs_and_textes ( legislature ) : [EOL] legislature_roman = roman ( legislature ) [EOL] url = ( f" [string] " f"{ legislature } [string] " f" [string] { legislature_roman } [string] " ) [EOL] return { filename : load ( json_file ) for filename , json_file in extract_from_remote_zip ( url ) } [EOL] [EOL] [EOL] def roman ( n ) : [EOL] if n == [number] : [EOL] return [string] [EOL] if n == [number] : [EOL] return [string] [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def extract_from_remote_zip ( url ) : [EOL] response = requests . get ( url ) [EOL] [EOL] if response . status_code not in ( HTTPStatus . OK , HTTPStatus . NOT_MODIFIED ) : [EOL] message = f" [string] { response . status_code } [string] { url }" [EOL] raise RuntimeError ( message ) [EOL] [EOL] content_type = response . headers [ [string] ] [EOL] if content_type != [string] : [EOL] message = ( f" [string] { content_type } [string] { url } [string] " [string] ) [EOL] raise RuntimeError ( message ) [EOL] [EOL] yield from extract_from_zip ( BytesIO ( response . content ) ) [EOL] [EOL] [EOL] def extract_from_zip ( content ) : [EOL] with ZipFile ( content ) as zip_file : [EOL] for filename in zip_file . namelist ( ) : [EOL] with zip_file . open ( filename ) as file_ : [EOL] yield ( filename , TextIOWrapper ( file_ , encoding = [string] ) ) [EOL] [EOL] [EOL] def parse_slugs ( dossiers ) : [EOL] dossier_dicts = ( item [ [string] ] for item in dossiers if isinstance ( item , dict ) ) [EOL] return { dossier_dict [ [string] ] : dossier_dict [ [string] ] [ [string] ] for dossier_dict in dossier_dicts if is_dossier ( dossier_dict ) } [EOL] [EOL] [EOL] def is_dossier ( data ) : [EOL] [comment] [EOL] return _has_dossier_type ( data ) or _has_dossier_uid ( data ) [EOL] [EOL] [EOL] def _has_dossier_type ( data ) : [EOL] return data . get ( [string] ) == [string] [EOL] [EOL] [EOL] def _has_dossier_uid ( data ) : [EOL] uid = data [ [string] ] [EOL] return uid . startswith ( [string] ) [EOL] [EOL] [EOL] def generate_unique_slug ( connection , slugs , uid , titre ) : [EOL] slug = base_slug = slugify ( slugs . get ( uid ) or titre ) [EOL] counter = [number] [EOL] while True : [EOL] if counter > [number] : [EOL] slug = f"{ base_slug } [string] { counter }" [EOL] result = connection . execute ( sa . text ( [string] ) , slug = slug ) [EOL] if result . first ( ) is None : [EOL] break [EOL] counter += [number] [EOL] return slug [EOL] [EOL] [EOL] STOPWORDS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def slugify ( text ) : [EOL] return _slugify ( text , stopwords = STOPWORDS ) [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] print ( [string] ) [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Text ( ) ) ) [EOL] connection = op . get_bind ( ) [EOL] slugs = get_dossiers_slugs ( [number] , [number] ) [EOL] rows = connection . execute ( [string] ) [EOL] for pk , uid , titre in rows : [EOL] slug = generate_unique_slug ( connection , slugs , uid , titre ) [EOL] connection . execute ( sa . text ( [string] ) , slug = slug , pk = pk , ) [EOL] op . alter_column ( [string] , [string] , nullable = False ) [EOL] op . create_index ( [string] , [string] , [ [string] ] , unique = True ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_index ( [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,typing.IO[builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,typing.IO[builtins.str]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . drop_constraint ( [string] , [string] , type_ = [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise NotImplementedError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_unique_constraint ( None , [string] , [ [string] ] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_constraint ( None , [string] , type_ = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . execute ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from alembic import op [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_index ( [string] , [string] , [ [string] , [string] , [string] , [string] ] , unique = True , ) [EOL] op . create_index ( [string] , [string] , [ [string] ] ) [EOL] op . create_index ( [string] , [string] , [ [string] ] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_index ( [string] ) [EOL] op . drop_index ( [string] ) [EOL] op . drop_index ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import users [EOL] import typing [EOL] import repondeur [EOL] import string [EOL] import builtins [EOL] import pyramid [EOL] from datetime import datetime [EOL] from string import Template [EOL] from typing import Any , Optional [EOL] [EOL] from jinja2 import Markup [EOL] from pyramid . request import Request [EOL] [EOL] from . . users import User [EOL] from . base import Event [EOL] [EOL] [EOL] class AdminEvent ( Event ) : [EOL] details_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , target , request = None , ** kwargs ) : [EOL] kwargs [ [string] ] = str ( target ) [EOL] kwargs [ [string] ] = target . email [EOL] super ( ) . __init__ ( request = request , ** kwargs ) [EOL] self . target = target [EOL] [EOL] @ property def template_vars ( self ) : [EOL] template_vars = { [string] : self . data [ [string] ] , [string] : self . data [ [string] ] , } [EOL] if self . user : [EOL] template_vars . update ( { [string] : self . user . name , [string] : self . user . email } ) [EOL] return template_vars [EOL] [EOL] def render_summary ( self ) : [EOL] return Markup ( self . summary_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] def render_details ( self ) : [EOL] return Markup ( self . details_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] [EOL] class AdminGrant ( AdminEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] if self . user : [EOL] who = [string] [EOL] else : [EOL] who = [string] [EOL] return Template ( f"{ who } [string] " [string] ) [EOL] [EOL] def apply ( self ) : [EOL] self . target . admin_at = datetime . utcnow ( ) [EOL] [EOL] [EOL] class AdminRevoke ( AdminEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] @ property def summary_template ( self ) : [EOL] if self . user : [EOL] who = [string] [EOL] else : [EOL] who = [string] [EOL] return Template ( f"{ who } [string] " [string] ) [EOL] [EOL] def apply ( self ) : [EOL] self . target . admin_at = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import users [EOL] import typing [EOL] import repondeur [EOL] import string [EOL] import builtins [EOL] import pyramid [EOL] from string import Template [EOL] from typing import Any , Optional [EOL] [EOL] from jinja2 import Markup [EOL] from pyramid . request import Request [EOL] [EOL] from . . base import DBSession [EOL] from . . users import AllowedEmailPattern [EOL] from . base import Event [EOL] [EOL] [EOL] class WhitelistEvent ( Event ) : [EOL] details_template = Template ( [string] ) [EOL] [EOL] @ property def template_vars ( self ) : [EOL] template_vars = { [string] : self . data [ [string] ] } [EOL] if self . user : [EOL] template_vars . update ( { [string] : self . user . name , [string] : self . user . email } ) [EOL] return template_vars [EOL] [EOL] def render_summary ( self ) : [EOL] return Markup ( self . summary_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] def render_details ( self ) : [EOL] return Markup ( self . details_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] [EOL] class WhitelistAdd ( WhitelistEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , email_pattern , comment , request = None , ** kwargs , ) : [EOL] kwargs [ [string] ] = email_pattern [EOL] super ( ) . __init__ ( request = request , ** kwargs ) [EOL] self . email_pattern = email_pattern [EOL] self . comment = comment [EOL] [EOL] @ property def summary_template ( self ) : [EOL] if self . user : [EOL] who = [string] [EOL] else : [EOL] who = [string] [EOL] return Template ( f"{ who } [string] " ) [EOL] [EOL] def apply ( self ) : [EOL] AllowedEmailPattern . create ( pattern = self . email_pattern , comment = self . comment ) [EOL] [EOL] [EOL] class WhitelistRemove ( WhitelistEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , allowed_email_pattern , request = None , ** kwargs , ) : [EOL] kwargs [ [string] ] = allowed_email_pattern . pattern [EOL] super ( ) . __init__ ( request = request , ** kwargs ) [EOL] self . allowed_email_pattern = allowed_email_pattern [EOL] [EOL] @ property def summary_template ( self ) : [EOL] if self . user : [EOL] who = [string] [EOL] else : [EOL] who = [string] [EOL] return Template ( f"{ who } [string] " ) [EOL] [EOL] def apply ( self ) : [EOL] DBSession . delete ( self . allowed_email_pattern ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[pyramid.request.Request]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[pyramid.request.Request]$ 0 $typing.Optional[pyramid.request.Request]$ 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $repondeur.zam_repondeur.models.users.AllowedEmailPattern$ 0 $typing.Optional[pyramid.request.Request]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $repondeur.zam_repondeur.models.users.AllowedEmailPattern$ 0 0 0 0 0 0 0 0 0 $typing.Optional[pyramid.request.Request]$ 0 $typing.Optional[pyramid.request.Request]$ 0 0 $typing.Any$ 0 0 0 0 $repondeur.zam_repondeur.models.users.AllowedEmailPattern$ 0 $repondeur.zam_repondeur.models.users.AllowedEmailPattern$ 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import users [EOL] import typing [EOL] import repondeur [EOL] import string [EOL] import dossier [EOL] import builtins [EOL] import pyramid [EOL] from string import Template [EOL] from typing import Any , Optional [EOL] [EOL] from jinja2 import Markup [EOL] from pyramid . request import Request [EOL] [EOL] from . . dossier import Dossier [EOL] from . . users import User [EOL] from . base import Event [EOL] [EOL] [EOL] class DossierEvent ( Event ) : [EOL] details_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , dossier , request = None , ** kwargs ) : [EOL] super ( ) . __init__ ( request = request , ** kwargs ) [EOL] self . dossier = dossier [EOL] [EOL] @ property def template_vars ( self ) : [EOL] if self . user : [EOL] return { [string] : self . user . name , [string] : self . user . email } [EOL] return { } [EOL] [EOL] def render_summary ( self ) : [EOL] return Markup ( self . summary_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] def render_details ( self ) : [EOL] return Markup ( self . details_template . safe_substitute ( ** self . template_vars ) ) [EOL] [EOL] [EOL] class DossierActive ( DossierEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , dossier , request ) : [EOL] super ( ) . __init__ ( dossier = dossier , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class DossierDesactive ( DossierEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , dossier , request ) : [EOL] super ( ) . __init__ ( dossier = dossier , request = request ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class LecturesRecuperees ( DossierEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] summary_template = Template ( [string] ) [EOL] [EOL] def __init__ ( self , dossier , user ) : [EOL] super ( ) . __init__ ( dossier = dossier , user = user ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class InvitationEnvoyee ( DossierEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , dossier , email , request ) : [EOL] super ( ) . __init__ ( dossier = dossier , email = email , request = request ) [EOL] [EOL] @ property def summary_template ( self ) : [EOL] email = self . data [ [string] ] [EOL] return Template ( f" [string] { email } [string] " ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL] [EOL] [EOL] class DossierRetrait ( DossierEvent ) : [EOL] __mapper_args__ = { [string] : [string] } [EOL] icon = [string] [EOL] [EOL] def __init__ ( self , dossier , target , request ) : [EOL] super ( ) . __init__ ( dossier = dossier , target = target , request = request ) [EOL] [EOL] @ property def summary_template ( self ) : [EOL] target = self . data [ [string] ] [EOL] return Template ( f" [string] { target } [string] " ) [EOL] [EOL] def apply ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $dossier.Dossier$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $dossier.Dossier$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $users.User$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $dossier.Dossier$ 0 $users.User$ 0 $users.User$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $dossier.Dossier$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 $dossier.Dossier$ 0 $dossier.Dossier$ 0 $builtins.str$ 0 $builtins.str$ 0 $pyramid.request.Request$ 0 $pyramid.request.Request$ 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0