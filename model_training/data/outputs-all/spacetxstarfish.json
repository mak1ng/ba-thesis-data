[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] from pathlib import Path [EOL] import setuptools [EOL] import versioneer [EOL] [EOL] install_requires = [ line . rstrip ( ) for line in open ( Path ( __file__ ) . parent / [string] ) ] [EOL] [EOL] with open ( Path ( [string] ) / [string] / [string] ) as f : [EOL] for line in f . readlines ( ) : [EOL] if line . startswith ( [string] ) : [EOL] napari_version = line . split ( [string] ) [ [number] ] [EOL] break [EOL] [EOL] setuptools . setup ( packages = setuptools . find_packages ( ) , install_requires = install_requires , extras_require = { [string] : [ f" [string] { napari_version }" ] , } , entry_points = { [string] : [ [string] , ] } , include_package_data = True , version = versioneer . get_version ( ) , cmdclass = versioneer . get_cmdclass ( ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import Any , Tuple , Union , Dict [EOL] import starfish [EOL] import functools [EOL] import typing [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish import FieldOfView [EOL] from starfish . types import Axes , Levels [EOL] from starfish . util . plot import ( imshow_plane , intensity_histogram , overlay_spot_calls ) [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] exp = starfish . data . BaristaSeq ( use_test_data = False ) [EOL] [EOL] nissl = exp . fov ( ) . get_image ( [string] ) [EOL] img = exp . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plane_selector = { Axes . CH : [number] , Axes . ROUND : [number] , Axes . ZPLANE : [number] } [EOL] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] imshow_plane ( img , sel = plane_selector , ax = ax1 , title = [string] ) [EOL] imshow_plane ( nissl , sel = plane_selector , ax = ax2 , title = [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from starfish . image import Filter [EOL] from starfish . types import FunctionSource [EOL] max_projector = Filter . Reduce ( ( Axes . ZPLANE , ) , func = FunctionSource . np ( [string] ) ) [EOL] z_projected_image = max_projector . run ( img ) [EOL] z_projected_nissl = max_projector . run ( nissl ) [EOL] [EOL] [comment] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] imshow_plane ( z_projected_image , sel = { Axes . CH : [number] , Axes . ROUND : [number] } , ax = ax1 , title = [string] ) [EOL] imshow_plane ( z_projected_nissl , sel = { Axes . CH : [number] , Axes . ROUND : [number] } , title = [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] registration_corrected = z_projected_image . sel ( { Axes . Y : ( [number] , - [number] ) , Axes . X : ( [number] , - [number] ) } ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] data = np . array ( [ [ [number] , - [number] , [number] , [number] ] , [ - [number] , [number] , [number] , [number] ] , [ [number] , - [number] , [number] , - [number] ] , [ [number] , [number] , - [number] , [number] ] ] ) [EOL] rows = pd . Index ( np . arange ( [number] ) , name = [string] ) [EOL] cols = pd . Index ( np . arange ( [number] ) , name = [string] ) [EOL] unmixing_coeff = pd . DataFrame ( data , rows , cols ) [EOL] [EOL] lum = starfish . image . Filter . LinearUnmixing ( unmixing_coeff ) [EOL] bleed_corrected = lum . run ( registration_corrected , in_place = False ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] ch2_r0 = { Axes . CH : [number] , Axes . ROUND : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] ch3_r0 = { Axes . CH : [number] , Axes . ROUND : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] f , ( ( ax1 , ax2 ) , ( ax3 , ax4 ) ) = plt . subplots ( nrows = [number] , ncols = [number] ) [EOL] imshow_plane ( registration_corrected , sel = ch2_r0 , ax = ax1 , title = [string] ) [EOL] imshow_plane ( registration_corrected , sel = ch3_r0 , ax = ax2 , title = [string] ) [EOL] imshow_plane ( bleed_corrected , sel = ch2_r0 , ax = ax3 , title = [string] ) [EOL] imshow_plane ( bleed_corrected , sel = ch3_r0 , ax = ax4 , title = [string] ) [EOL] f . tight_layout ( ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from skimage . morphology import opening , dilation , disk [EOL] from functools import partial [EOL] [EOL] [comment] [EOL] opening = partial ( opening , selem = disk ( [number] ) ) [EOL] [EOL] background = bleed_corrected . apply ( opening , group_by = { Axes . ROUND , Axes . CH , Axes . ZPLANE } , verbose = False , in_place = False ) [EOL] [EOL] wth = starfish . image . Filter . WhiteTophat ( masking_radius = [number] ) [EOL] background_corrected = wth . run ( bleed_corrected , in_place = False ) [EOL] [EOL] f , ( ax1 , ax2 , ax3 ) = plt . subplots ( ncols = [number] ) [EOL] selector = { Axes . CH : [number] , Axes . ROUND : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] imshow_plane ( bleed_corrected , sel = selector , ax = ax1 , title = [string] ) [EOL] imshow_plane ( background , sel = selector , ax = ax2 , title = [string] ) [EOL] imshow_plane ( background_corrected , sel = selector , ax = ax3 , title = [string] ) [EOL] f . tight_layout ( ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] sbp = starfish . image . Filter . Clip ( p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] scaled = sbp . run ( background_corrected , n_processes = [number] , in_place = False ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] def plot_scaling_result ( template , scaled ) : [EOL] f , ( before , after ) = plt . subplots ( ncols = [number] , nrows = [number] ) [EOL] for channel , ax in enumerate ( before ) : [EOL] title = f' [string] { channel }' [EOL] intensity_histogram ( template , sel = { Axes . CH : channel , Axes . ROUND : [number] } , ax = ax , title = title , log = True , bins = [number] , ) [EOL] ax . set_xlim ( [number] , [number] ) [EOL] for channel , ax in enumerate ( after ) : [EOL] title = f' [string] { channel }' [EOL] intensity_histogram ( scaled , sel = { Axes . CH : channel , Axes . ROUND : [number] } , ax = ax , title = title , log = True , bins = [number] , ) [EOL] f . tight_layout ( ) [EOL] return f [EOL] [EOL] f = plot_scaling_result ( background_corrected , scaled ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] sbp = starfish . image . Filter . Clip ( p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] scaled = sbp . run ( background_corrected , n_processes = [number] , in_place = False ) [EOL] [EOL] f = plot_scaling_result ( background_corrected , scaled ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] psd = starfish . spots . DetectPixels . PixelSpotDecoder ( codebook = exp . codebook , metric = [string] , distance_threshold = [number] , magnitude_threshold = [number] , min_area = [number] , max_area = [number] ) [EOL] pixel_decoded , ccdr = psd . run ( scaled ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] f , ax = plt . subplots ( ) [EOL] ax . imshow ( np . squeeze ( ccdr . decoded_image ) , cmap = plt . cm . nipy_spectral ) [EOL] ax . axis ( [string] ) [EOL] ax . set_title ( [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pixel_decoded_gene_counts = pd . Series ( * np . unique ( pixel_decoded [ [string] ] , return_counts = True ) [ : : - [number] ] ) [EOL] [EOL] print ( pixel_decoded_gene_counts . sort_values ( ascending = False ) [ : [number] ] ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.reduce.Reduce$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.reduce.Reduce$ 0 0 0 $typing.Any$ 0 0 0 0 $starfish.core.image.Filter.reduce.Reduce$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $starfish.core.image.Filter.linear_unmixing.LinearUnmixing$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starfish.core.image.Filter.linear_unmixing.LinearUnmixing$ 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import starfish [EOL] import functools [EOL] import typing [EOL] import os [EOL] from copy import deepcopy [EOL] from itertools import product [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] import skimage . filters [EOL] import skimage . morphology [EOL] from skimage . transform import SimilarityTransform , warp [EOL] from tqdm import tqdm [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish . types import Axes , Levels , TraceBuildingStrategies [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] exp = starfish . data . SeqFISH ( use_test_data = True ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] img = exp [ [string] ] . get_image ( [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from skimage . morphology import opening , dilation , disk [EOL] from functools import partial [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] opening = partial ( opening , selem = disk ( [number] ) ) [EOL] [EOL] background = img . apply ( opening , group_by = { Axes . ROUND , Axes . CH , Axes . ZPLANE } , verbose = False , in_place = False ) [EOL] [EOL] starfish . display ( background ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] wth = starfish . image . Filter . WhiteTophat ( masking_radius = [number] ) [EOL] background_corrected = wth . run ( img , in_place = False ) [EOL] starfish . display ( background_corrected ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] clip = starfish . image . Filter . Clip ( p_max = [number] , is_volume = True , level_method = Levels . SCALE_BY_CHUNK ) [EOL] scaled = clip . run ( background_corrected , in_place = False ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] starfish . display ( scaled ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from copy import deepcopy [EOL] clipped = deepcopy ( scaled ) [EOL] clipped . xarray . values [ clipped . xarray . values < [number] ] = [number] [EOL] [comment] [EOL] [EOL] [comment] [EOL] starfish . display ( clipped ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] threshold = [number] [EOL] [EOL] bd = starfish . spots . FindSpots . BlobDetector ( min_sigma = ( [number] , [number] , [number] ) , max_sigma = ( [number] , [number] , [number] ) , num_sigma = [number] , threshold = threshold ) [EOL] [EOL] spots = bd . run ( clipped ) [EOL] decoder = starfish . spots . DecodeSpots . PerRoundMaxChannel ( codebook = exp . codebook , search_radius = [number] , trace_building_strategy = TraceBuildingStrategies . NEAREST_NEIGHBOR ) [EOL] [EOL] decoded = decoder . run ( spots = spots ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] starfish . display ( clipped , decoded ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] glp = starfish . image . Filter . GaussianLowPass ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] blurred = glp . run ( clipped ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] psd = starfish . spots . DetectPixels . PixelSpotDecoder ( codebook = exp . codebook , metric = [string] , distance_threshold = [number] , magnitude_threshold = [number] , min_area = [number] , max_area = [number] , ) [EOL] pixel_decoded , ccdr = psd . run ( blurred ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] import matplotlib . pyplot as plt [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] label_image = starfish . ImageStack . from_numpy ( np . reshape ( ccdr . decoded_image , ( [number] , [number] , [number] , [number] , [number] ) ) ) [EOL] starfish . display ( label_image ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] print ( [string] , int ( np . sum ( pixel_decoded [ [string] ] != [string] ) ) ) [EOL] print ( [string] , int ( np . sum ( decoded [ [string] ] != [string] ) ) ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from scipy . stats import pearsonr [EOL] [EOL] [comment] [EOL] pixel_decoded_gene_counts = pd . Series ( * np . unique ( pixel_decoded [ [string] ] , return_counts = True ) [ : : - [number] ] ) [EOL] decoded_gene_counts = pd . Series ( * np . unique ( decoded [ [string] ] , return_counts = True ) [ : : - [number] ] ) [EOL] [EOL] [comment] [EOL] codetected = pixel_decoded_gene_counts . index . intersection ( decoded_gene_counts . index ) . drop ( [string] ) [EOL] [EOL] [comment] [EOL] pearsonr ( pixel_decoded_gene_counts [ codetected ] , decoded_gene_counts [ codetected ] ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 $starfish.core.spots.DecodeSpots.per_round_max_channel_decoder.PerRoundMaxChannel$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.spots.DecodeSpots.per_round_max_channel_decoder.PerRoundMaxChannel$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import unittest [EOL] [EOL] from starfish . core . util import exec [EOL] [EOL] [EOL] class TestValidateCommand ( unittest . TestCase ) : [EOL] [EOL] STAGES = ( [ [string] , [string] , [string] ] , ) [EOL] [EOL] def test_run_pipeline ( self ) : [EOL] exec . stages ( TestValidateCommand . STAGES ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Any , Tuple , Mapping [EOL] import starfish [EOL] import builtins [EOL] import pandas [EOL] import slicedimage [EOL] import examples [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] import functools [EOL] import os [EOL] from typing import Mapping , Union [EOL] [EOL] import click [EOL] import numpy as np [EOL] import pandas as pd [EOL] import skimage . io [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish import Codebook [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue , Features [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_read_fn ( file_path ) : [EOL] return skimage . io . imread ( file_path ) [EOL] [EOL] [EOL] class SeqFISHTile ( FetchedTile ) : [EOL] def __init__ ( self , file_path , coordinates , zplane , ch , ) : [EOL] self . _file_path = file_path [EOL] self . _zplane = zplane [EOL] self . _ch = ch [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] [docstring] [EOL] raw_shape = self . tile_data ( ) . shape [EOL] return { Axes . Y : raw_shape [ [number] ] , Axes . X : raw_shape [ [number] ] } [EOL] [EOL] @ property def coordinates ( self ) : [EOL] [docstring] [EOL] return self . _coordinates [EOL] [EOL] @ property def format ( self ) : [EOL] [docstring] [EOL] return ImageFormat . TIFF [EOL] [EOL] def tile_data ( self ) : [EOL] [docstring] [EOL] return cached_read_fn ( self . _file_path ) [ self . _zplane , self . _ch ] [EOL] [EOL] [EOL] class SeqFISHTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir ) : [EOL] [docstring] [EOL] self . input_dir = input_dir [EOL] [EOL] @ property def coordinates ( self ) : [EOL] [docstring] [EOL] return { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] [docstring] [EOL] file_path = os . path . join ( self . input_dir , f"{ round_label + [number] } [string] " ) [EOL] return SeqFISHTile ( file_path , self . coordinates , zplane_label , ch_label ) [EOL] [EOL] [EOL] def parse_codebook ( codebook_csv ) : [EOL] [docstring] [EOL] csv = pd . read_csv ( codebook_csv , index_col = [number] ) [EOL] integer_round_ids = range ( csv . shape [ [number] ] ) [EOL] csv . columns = integer_round_ids [EOL] [EOL] mappings = [ ] [EOL] [EOL] for gene , channel_series in csv . iterrows ( ) : [EOL] mappings . append ( { Features . CODEWORD : [ { Axes . ROUND . value : r , Axes . CH . value : c - [number] , Features . CODE_VALUE : [number] } for r , c in channel_series . items ( ) ] , Features . TARGET : gene } ) [EOL] [EOL] return Codebook . from_code_array ( mappings ) [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , type = str , required = True , help = [string] ) @ click . option ( [string] , type = str , required = True , help = [string] ) @ click . option ( [string] , type = str , required = True , help = [string] ) def cli ( input_dir , output_dir , codebook_csv ) : [EOL] [docstring] [EOL] os . makedirs ( output_dir , exist_ok = True ) [EOL] primary_tile_fetcher = SeqFISHTileFetcher ( os . path . expanduser ( input_dir ) ) [EOL] [EOL] [comment] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = [number] , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = { } , primary_tile_fetcher = primary_tile_fetcher , tile_format = ImageFormat . TIFF , dimension_order = ( Axes . ROUND , Axes . CH , Axes . ZPLANE ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] codebook = parse_codebook ( codebook_csv ) [EOL] codebook . to_json ( [string] ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Mapping[typing.Union[starfish.core.types._constants.Coordinates,builtins.str],typing.Union[builtins.float,builtins.int,typing.Tuple[typing.Union[builtins.float,builtins.int],typing.Union[builtins.float,builtins.int]]]]$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $slicedimage.ImageFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SeqFISHTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $starfish.Codebook$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , IO , Any , Tuple , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import numpy [EOL] [docstring] [EOL] import argparse [EOL] import functools [EOL] import json [EOL] import os [EOL] from typing import IO , Mapping , Union [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish . core . util . argparse import FsExistsType [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue [EOL] [EOL] SHAPE = { Axes . Y : [number] , Axes . X : [number] } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_read_fn ( file_path ) : [EOL] return imread ( file_path ) [EOL] [EOL] [EOL] class MERFISHTile ( FetchedTile ) : [EOL] def __init__ ( self , file_path , r , ch , coordinates ) : [EOL] self . file_path = file_path [EOL] [comment] [EOL] [comment] [EOL] self . map = { ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] , ( [number] , [number] ) : [number] } [EOL] self . r = r [EOL] self . ch = ch [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] return SHAPE [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [EOL] [EOL] def tile_data ( self ) : [EOL] return cached_read_fn ( self . file_path ) [ self . map [ ( self . r , self . ch ) ] , : , : ] [EOL] [EOL] [EOL] class MERFISHAuxTile ( FetchedTile ) : [EOL] def __init__ ( self , file_path , coordinates ) : [EOL] self . file_path = file_path [EOL] self . dapi_index = [number] [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] return SHAPE [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [EOL] [EOL] def tile_data ( self ) : [EOL] return cached_read_fn ( self . file_path ) [ self . dapi_index , : , : ] [EOL] [EOL] [EOL] class MERFISHTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir , is_dapi ) : [EOL] self . input_dir = input_dir [EOL] self . is_dapi = is_dapi [EOL] self . coordinates = self . parse_coordinates ( input_dir ) [EOL] [EOL] @ staticmethod def parse_coordinates ( input_dir ) : [EOL] filename = os . path . join ( input_dir , [string] ) [EOL] data = pd . read_csv ( filename , names = [ [string] , [string] ] ) [EOL] data [ [string] ] = data [ [string] ] + [number] [EOL] data [ [string] ] = data [ [string] ] + [number] [EOL] return data [EOL] [EOL] def make_coordinates ( self , fov ) : [EOL] return { Coordinates . X : ( float ( self . coordinates . loc [ fov , [string] ] ) , float ( self . coordinates . loc [ fov , [string] ] ) ) , Coordinates . Y : ( float ( self . coordinates . loc [ fov , [string] ] ) , float ( self . coordinates . loc [ fov , [string] ] ) ) , Coordinates . Z : ( [number] , [number] ) } [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] filename = os . path . join ( self . input_dir , [string] . format ( fov_id ) ) [EOL] file_path = os . path . join ( self . input_dir , filename ) [EOL] if self . is_dapi : [EOL] return MERFISHAuxTile ( file_path , self . make_coordinates ( fov_id ) ) [EOL] else : [EOL] return MERFISHTile ( file_path , round_label , ch_label , self . make_coordinates ( fov_id ) ) [EOL] [EOL] [EOL] def format_data ( input_dir , output_dir ) : [EOL] [EOL] input_dir = os . path . abspath ( input_dir ) [EOL] output_dir = os . path . abspath ( output_dir ) [EOL] [EOL] def add_scale_factors ( experiment_json_doc ) : [EOL] filename = os . path . join ( input_dir , [string] ) [EOL] with open ( filename , [string] ) as f : [EOL] data = json . load ( f ) [EOL] experiment_json_doc [ [string] ] = { [string] : data } [EOL] return experiment_json_doc [EOL] [EOL] num_fovs = [number] [EOL] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] [EOL] aux_name_to_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } } [EOL] [EOL] write_experiment_json ( output_dir , num_fovs , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = aux_name_to_dimensions , primary_tile_fetcher = MERFISHTileFetcher ( input_dir , is_dapi = False ) , aux_tile_fetcher = { [string] : MERFISHTileFetcher ( input_dir , is_dapi = True ) , } , postprocess_func = add_scale_factors , default_shape = SHAPE ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] s3_bucket = [string] [EOL] input_help_msg = [string] . format ( s3_bucket ) [EOL] output_help_msg = [string] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) , help = input_help_msg ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) , help = output_help_msg ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] format_data ( args . input_dir , args . output_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0
from typing import Union , List , Any , Tuple , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import examples [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] [EOL] import functools [EOL] import os [EOL] from typing import Mapping , Tuple , Union [EOL] [EOL] import click [EOL] import numpy as np [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish import Codebook [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , Features [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_read_fn ( file_path ) : [EOL] return imread ( file_path ) [EOL] [EOL] [EOL] class StarMapTile ( FetchedTile ) : [EOL] [EOL] def __init__ ( self , file_path , z ) : [EOL] [docstring] [EOL] self . file_path = file_path [EOL] self . z = z [EOL] [EOL] [comment] [EOL] self . _coordinates = { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } [EOL] [EOL] @ property def shape ( self ) : [EOL] return { Axes . Y : [number] , Axes . X : [number] } [comment] [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [comment] [EOL] [EOL] def tile_data ( self ) : [EOL] return cached_read_fn ( self . file_path ) [ self . z ] [comment] [EOL] [EOL] [EOL] class StarMapTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir ) : [EOL] [docstring] [EOL] [EOL] self . input_dir = input_dir [EOL] self . num_z = [number] [comment] [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] basename = f" [string] { round_label + [number] } [string] { ch_label + [number] } [string] " [comment] [EOL] file_path = os . path . join ( self . input_dir , [string] , basename ) [EOL] return StarMapTile ( file_path , zplane_label ) [EOL] [EOL] def generate_codebook ( self , output_dir ) : [EOL] [docstring] [EOL] dinucleotides_to_channels = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] with open ( os . path . join ( self . input_dir , [string] ) , [string] ) as f : [EOL] codes = [ l . strip ( ) . split ( [string] ) for l in f . readlines ( ) ] [comment] [EOL] [EOL] def iter_dinucleotides ( sequence ) : [EOL] i = [number] [EOL] while i + [number] < len ( sequence ) : [EOL] yield sequence [ i : i + [number] ] [EOL] i += [number] [EOL] [EOL] [comment] [EOL] code_array = [ ] [EOL] for gene , dna_barcode in codes : [EOL] dna_barcode = dna_barcode [ : : - [number] ] [comment] [EOL] spacetx_barcode = [ { Axes . ROUND . value : r , Axes . CH . value : dinucleotides_to_channels [ dinucleotide ] , Features . CODE_VALUE : [number] } for r , dinucleotide in enumerate ( iter_dinucleotides ( dna_barcode ) ) ] [EOL] code_array . append ( { Features . CODEWORD : spacetx_barcode , Features . TARGET : gene } ) [EOL] [EOL] codebook = Codebook . from_code_array ( code_array ) [EOL] codebook . to_json ( os . path . join ( output_dir , [string] ) ) [EOL] [EOL] [EOL] class StarMapDapiTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir ) : [EOL] [docstring] [EOL] self . input_dir = input_dir [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] basename = f" [string] { round_label + [number] } [string] { ch_label + [number] } [string] " [EOL] file_path = os . path . join ( self . input_dir , [string] , basename ) [EOL] return StarMapTile ( file_path , zplane_label ) [EOL] [EOL] [EOL] class StarMapNisslTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir , channels ) : [EOL] [docstring] [EOL] self . input_dir = input_dir [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] basename = f" [string] { round_label + [number] } [string] { ch_label + [number] } [string] " [EOL] file_path = os . path . join ( self . input_dir , [string] , basename ) [EOL] return StarMapTile ( file_path , zplane_label ) [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , type = str , required = True , help = [string] ) @ click . option ( [string] , type = str , required = True , help = [string] ) def cli ( input_dir , output_dir ) : [EOL] [docstring] [EOL] abs_output_dir = os . path . expanduser ( output_dir ) [EOL] abs_input_dir = os . path . expanduser ( input_dir ) [EOL] os . makedirs ( abs_output_dir , exist_ok = True ) [EOL] [EOL] primary_tile_fetcher = StarMapTileFetcher ( abs_input_dir ) [EOL] dapi_tile_fetcher = StarMapDapiTileFetcher ( abs_input_dir ) [EOL] nissl_00_tile_fetcher = StarMapNisslTileFetcher ( abs_input_dir , channels = ( [number] , [number] ) ) [EOL] nissl_01_tile_fetcher = StarMapNisslTileFetcher ( abs_input_dir , channels = ( [number] , [number] ) ) [EOL] nissl_02_tile_fetcher = StarMapNisslTileFetcher ( abs_input_dir , channels = ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] [EOL] aux_images_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , } [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = [number] , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = aux_images_dimensions , primary_tile_fetcher = primary_tile_fetcher , aux_tile_fetcher = { [string] : dapi_tile_fetcher , [string] : nissl_00_tile_fetcher , [string] : nissl_01_tile_fetcher , [string] : nissl_02_tile_fetcher } , dimension_order = ( Axes . ROUND , Axes . CH , Axes . ZPLANE ) ) [EOL] [EOL] primary_tile_fetcher . generate_codebook ( abs_output_dir ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.List[builtins.str]]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
from typing import Union , List , Any , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import examples [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] import json [EOL] import os [EOL] from typing import List , Mapping , Union [EOL] [EOL] import click [EOL] import numpy as np [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue , Features [EOL] [EOL] [EOL] class ImagingMassCytometryTile ( FetchedTile ) : [EOL] [EOL] def __init__ ( self , file_path ) : [EOL] [docstring] [EOL] self . file_path = file_path [EOL] self . _tile_data = imread ( self . file_path ) [EOL] [EOL] @ property def shape ( self ) : [EOL] return { Axes . Y : self . _tile_data . shape [ [number] ] , Axes . X : self . _tile_data . shape [ [number] ] } [EOL] [EOL] @ property def coordinates ( self ) : [EOL] [comment] [EOL] return { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } [EOL] [EOL] def tile_data ( self ) : [EOL] return self . _tile_data [EOL] [EOL] [EOL] class ImagingMassCytometryTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir ) : [EOL] [docstring] [EOL] self . input_dir = input_dir [EOL] [EOL] @ property def _ch_dict ( self ) : [EOL] channels = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] mapping = dict ( enumerate ( channels ) ) [EOL] return mapping [EOL] [EOL] def ch_dict ( self , ch ) : [EOL] return self . _ch_dict [ ch ] [EOL] [EOL] @ property def _fov_map ( self ) : [EOL] fov_names = [ d for d in os . listdir ( self . input_dir ) if os . path . isdir ( os . path . join ( self . input_dir , d ) ) ] [EOL] mapping = dict ( enumerate ( fov_names ) ) [EOL] return mapping [EOL] [EOL] def fov_map ( self , fov ) : [EOL] return self . _fov_map [ fov ] [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] fov_name = self . fov_map ( fov_id ) [EOL] basename = f'{ self . ch_dict ( ch_label ) } [string] ' [EOL] file_path = os . path . join ( self . input_dir , fov_name , fov_name , basename ) [EOL] return ImagingMassCytometryTile ( file_path ) [EOL] [EOL] def generate_codebook ( self ) : [EOL] mappings = [ ] [EOL] for idx , target in self . _ch_dict . items ( ) : [EOL] mappings . append ( { Features . CODEWORD : [ { Axes . ROUND . value : [number] , Axes . CH . value : idx , Features . CODE_VALUE : [number] } ] , Features . TARGET : target } ) [EOL] [EOL] return { [string] : [string] , [string] : mappings } [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , type = str , help = [string] ) @ click . option ( [string] , type = str , help = [string] ) def cli ( input_dir , output_dir ) : [EOL] [docstring] [EOL] [EOL] os . makedirs ( output_dir , exist_ok = True ) [EOL] [EOL] primary_tile_fetcher = ImagingMassCytometryTileFetcher ( os . path . expanduser ( input_dir ) ) [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : len ( primary_tile_fetcher . _ch_dict ) , Axes . ZPLANE : [number] } [EOL] [EOL] def postprocess_func ( experiment_json_doc ) : [EOL] experiment_json_doc [ [string] ] = [string] [EOL] return experiment_json_doc [EOL] [EOL] with open ( os . path . join ( output_dir , [string] ) , [string] ) as f : [EOL] codebook = primary_tile_fetcher . generate_codebook ( ) [EOL] json . dump ( codebook , f ) [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = len ( primary_tile_fetcher . _fov_map ) , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = { } , primary_tile_fetcher = primary_tile_fetcher , postprocess_func = postprocess_func , ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Mapping[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Mapping[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Mapping$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Any , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import zipfile [EOL] import requests [EOL] import typing [EOL] import argparse [EOL] import numpy [EOL] [docstring] [EOL] import argparse [EOL] import io [EOL] import json [EOL] import os [EOL] import zipfile [EOL] from typing import Mapping , Union [EOL] [EOL] import numpy as np [EOL] import requests [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish import Codebook [EOL] from starfish . core . util . argparse import FsExistsType [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue , Features [EOL] [EOL] SHAPE = { Axes . Y : [number] , Axes . X : [number] } [EOL] [EOL] [EOL] class ISSTile ( FetchedTile ) : [EOL] def __init__ ( self , file_path ) : [EOL] self . file_path = file_path [EOL] [EOL] @ property def shape ( self ) : [EOL] return SHAPE [EOL] [EOL] @ property def coordinates ( self ) : [EOL] [comment] [EOL] return { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } [EOL] [EOL] def tile_data ( self ) : [EOL] return imread ( self . file_path ) [EOL] [EOL] [EOL] class ISSPrimaryTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir ) : [EOL] self . input_dir = input_dir [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] return ISSTile ( os . path . join ( self . input_dir , str ( round_label + [number] ) , [string] . format ( ch_label + [number] ) ) ) [EOL] [EOL] [EOL] class ISSAuxTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , path ) : [EOL] self . path = path [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] return ISSTile ( self . path ) [EOL] [EOL] [EOL] def download ( input_dir , url ) : [EOL] print ( [string] ) [EOL] r = requests . get ( url ) [EOL] z = zipfile . ZipFile ( io . BytesIO ( r . content ) ) [EOL] z . extractall ( input_dir ) [EOL] [EOL] [EOL] def write_json ( res , output_path ) : [EOL] json_doc = json . dumps ( res , indent = [number] ) [EOL] print ( json_doc ) [EOL] print ( [string] . format ( output_path ) ) [EOL] with open ( output_path , [string] ) as outfile : [EOL] json . dump ( res , outfile , indent = [number] ) [EOL] [EOL] [EOL] def format_data ( input_dir , output_dir , d ) : [EOL] if not input_dir . endswith ( [string] ) : [EOL] input_dir += [string] [EOL] [EOL] if not output_dir . endswith ( [string] ) : [EOL] output_dir += [string] [EOL] [EOL] if d : [EOL] url = [string] [EOL] download ( input_dir , url ) [EOL] input_dir += [string] [EOL] print ( [string] . format ( input_dir ) ) [EOL] else : [EOL] input_dir += [string] [EOL] print ( [string] . format ( input_dir ) ) [EOL] [EOL] def add_codebook ( experiment_json_doc ) : [EOL] experiment_json_doc [ [string] ] = [string] [EOL] [EOL] return experiment_json_doc [EOL] [EOL] [comment] [EOL] write_experiment_json ( output_dir , [number] , ImageFormat . TIFF , primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , aux_name_to_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } } , primary_tile_fetcher = ISSPrimaryTileFetcher ( input_dir ) , aux_tile_fetcher = { [string] : ISSAuxTileFetcher ( os . path . join ( input_dir , [string] , [string] ) ) , [string] : ISSAuxTileFetcher ( os . path . join ( input_dir , [string] , [string] ) ) , } , postprocess_func = add_codebook , default_shape = SHAPE ) [EOL] [EOL] codebook_array = [ { Features . CODEWORD : [ { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } ] , Features . TARGET : [string] } , { Features . CODEWORD : [ { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } , { Axes . ROUND . value : [number] , Axes . CH . value : [number] , Features . CODE_VALUE : [number] } ] , Features . TARGET : [string] } , ] [EOL] codebook = Codebook . from_code_array ( codebook_array ) [EOL] codebook_json_filename = [string] [EOL] codebook . to_json ( os . path . join ( output_dir , codebook_json_filename ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) ) [EOL] parser . add_argument ( [string] , help = [string] , type = bool ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] format_data ( args . input_dir , args . output_dir , args . d ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0
from typing import Union , Match , List , Optional , Any , Tuple , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import numpy [EOL] import typing [EOL] [docstring] [EOL] [EOL] import functools [EOL] import json [EOL] import os [EOL] import re [EOL] from typing import Mapping , Union [EOL] [EOL] import click [EOL] import numpy as np [EOL] from slicedimage import ImageFormat [EOL] [EOL] import starfish . core . util . try_import [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue , Features [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_read_fn ( file_path ) : [EOL] return np . load ( file_path ) [EOL] [EOL] [EOL] class osmFISHTile ( FetchedTile ) : [EOL] [EOL] def __init__ ( self , file_path , coordinates , z ) : [EOL] [docstring] [EOL] self . file_path = file_path [EOL] self . z = z [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] [docstring] [EOL] raw_shape = self . tile_data ( ) . shape [EOL] return { Axes . Y : raw_shape [ [number] ] , Axes . X : raw_shape [ [number] ] } [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [EOL] [EOL] def tile_data ( self ) : [EOL] return cached_read_fn ( self . file_path ) [ self . z ] [comment] [EOL] [EOL] [EOL] class osmFISHTileFetcher ( TileFetcher ) : [EOL] [EOL] @ starfish . core . util . try_import . try_import ( { [string] } ) def __init__ ( self , input_dir , metadata_yaml ) : [EOL] [docstring] [EOL] import yaml [EOL] [EOL] with open ( metadata_yaml , [string] ) as f : [EOL] self . osmfish_metadata = yaml . load ( f ) [EOL] self . num_z = self . osmfish_metadata [ [string] ] [ [string] ] [ [string] ] [EOL] self . input_dir = input_dir [EOL] [EOL] @ property def channel_map ( self ) : [EOL] return { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] @ property def target_map ( self ) : [EOL] [docstring] [EOL] parsed_metadata = { } [EOL] for round_ , round_data in self . osmfish_metadata [ [string] ] . items ( ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] round_match = re . match ( [string] , round_ ) [EOL] if round_match is None : [EOL] continue [EOL] [EOL] round_id = int ( round_match . group ( [number] ) ) - [number] [EOL] for target_name , fluorophore in round_data . items ( ) : [EOL] if fluorophore in { [string] , [string] } : [EOL] continue [EOL] channel = self . channel_map [ fluorophore ] [EOL] parsed_metadata [ round_id , channel ] = target_name [EOL] [EOL] return parsed_metadata [EOL] [EOL] @ property def fov_map ( self ) : [EOL] [docstring] [EOL] return { [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] def coordinate_map ( self , round_ , z ) : [EOL] pixel_size = self . osmfish_metadata [ [string] ] [ [string] ] [EOL] y_pixels , x_pixels , z_pixels = ( self . osmfish_metadata [ [string] ] [ [string] ] . values ( ) ) [EOL] y_size = y_pixels * pixel_size [EOL] x_size = x_pixels * pixel_size [EOL] z_size = z_pixels * pixel_size [EOL] position_string = ( self . osmfish_metadata [ [string] ] [ f' [string] { round_ + [number] }' ] [ z ] ) [EOL] y_pos , x_pos , z_pos = ( float ( v ) for v in position_string . split ( [string] ) ) [EOL] return { Coordinates . X : ( x_pos , x_pos + x_size ) , Coordinates . Y : ( y_pos , y_pos + y_size ) , Coordinates . Z : ( z_pos , z_pos + z_size ) , } [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] target = self . target_map [ round_label , ch_label ] [EOL] fov = self . fov_map [ fov_id ] [EOL] basename = f" [string] { round_label + [number] } [string] { target } [string] { fov } [string] " [EOL] file_path = os . path . join ( self . input_dir , basename ) [EOL] coordinates = self . coordinate_map ( round_label , zplane_label ) [EOL] return osmFISHTile ( file_path , coordinates , zplane_label ) [EOL] [EOL] def generate_codebook ( self ) : [EOL] mappings = [ ] [EOL] for ( round_ , channel ) , target in self . target_map . items ( ) : [EOL] mappings . append ( { Features . CODEWORD : [ { Axes . ROUND . value : round_ , Axes . CH . value : channel , Features . CODE_VALUE : [number] } ] , Features . TARGET : target } ) [EOL] return { [string] : [string] , [string] : mappings } [EOL] [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] , type = str ) @ click . argument ( [string] , type = str ) @ click . argument ( [string] , type = str ) def cli ( input_dir , metadata_yaml , output_dir ) : [EOL] [docstring] [EOL] os . makedirs ( output_dir , exist_ok = True ) [EOL] primary_tile_fetcher = osmFISHTileFetcher ( os . path . expanduser ( input_dir ) , metadata_yaml ) [EOL] [EOL] [comment] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : len ( primary_tile_fetcher . channel_map ) , Axes . ZPLANE : primary_tile_fetcher . num_z } [EOL] [EOL] def postprocess_func ( experiment_json_doc ) : [EOL] experiment_json_doc [ [string] ] = [string] [EOL] return experiment_json_doc [EOL] [EOL] with open ( os . path . join ( output_dir , [string] ) , [string] ) as f : [EOL] codebook = primary_tile_fetcher . generate_codebook ( ) [EOL] json . dump ( codebook , f ) [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = len ( primary_tile_fetcher . fov_map ) , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = { } , primary_tile_fetcher = primary_tile_fetcher , postprocess_func = postprocess_func , dimension_order = ( Axes . ROUND , Axes . CH , Axes . ZPLANE ) ) [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Mapping[typing.Union[starfish.core.types._constants.Coordinates,builtins.str],typing.Union[builtins.float,builtins.int,typing.Tuple[typing.Union[builtins.float,builtins.int],typing.Union[builtins.float,builtins.int]]]]$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Mapping[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Mapping[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import slicedimage [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] [EOL] import os [EOL] import shutil [EOL] from typing import Mapping , Union [EOL] [EOL] import click [EOL] import numpy as np [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue [EOL] [EOL] DEFAULT_TILE_SHAPE = { Axes . Y : [number] , Axes . X : [number] } [EOL] [EOL] [EOL] class BaristaSeqTile ( FetchedTile ) : [EOL] def __init__ ( self , file_path ) : [EOL] self . file_path = file_path [EOL] [EOL] @ property def shape ( self ) : [EOL] return DEFAULT_TILE_SHAPE [EOL] [EOL] @ property def coordinates ( self ) : [EOL] [comment] [EOL] return { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } [EOL] [EOL] @ property def format ( self ) : [EOL] return ImageFormat . TIFF [EOL] [EOL] def tile_data ( self ) : [EOL] return imread ( self . file_path ) [EOL] [EOL] [EOL] class BaristaSeqTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir ) : [EOL] self . input_dir = input_dir [EOL] [EOL] def get_tile ( self , fov_id , hyb , ch_label , zplane_label ) : [EOL] subdir = [string] [EOL] round_dir = f" [string] { hyb }" [EOL] if hyb == [number] : [EOL] filename = f" [string] { fov_id + [number] : [string] } [string] { ch_label + [number] : [string] } [string] { zplane_label + [number] : [string] } [string] " [EOL] else : [EOL] filename = f" [string] { fov_id + [number] : [string] } [string] { ch_label + [number] : [string] } [string] { zplane_label + [number] : [string] } [string] " [EOL] file_path = os . path . join ( self . input_dir , subdir , round_dir , filename ) [EOL] return BaristaSeqTile ( file_path ) [EOL] [EOL] [EOL] class BaristaSeqNucleiTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir , aux_type ) : [EOL] self . input_dir = input_dir [EOL] [EOL] def get_tile ( self , fov_id , hyb , ch_label , zplane_label ) : [EOL] subdir = [string] [EOL] filename = f" [string] { zplane_label + [number] : [string] } [string] " [EOL] file_path = os . path . join ( self . input_dir , subdir , filename ) [EOL] [EOL] return BaristaSeqTile ( file_path ) [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , type = str , required = True , help = [string] ) @ click . option ( [string] , type = str , required = True , help = [string] ) def format_data ( input_dir , output_dir ) : [EOL] [docstring] [EOL] [EOL] num_fovs = [number] [EOL] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] [EOL] aux_name_to_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } } [EOL] [EOL] os . makedirs ( output_dir , exist_ok = True ) [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = num_fovs , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = aux_name_to_dimensions , primary_tile_fetcher = BaristaSeqTileFetcher ( input_dir ) , aux_tile_fetcher = { [string] : BaristaSeqNucleiTileFetcher ( input_dir , [string] ) , } , tile_format = ImageFormat . TIFF , default_shape = DEFAULT_TILE_SHAPE ) [EOL] [EOL] shutil . copyfile ( src = os . path . join ( input_dir , [string] ) , dst = os . path . join ( output_dir , [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] format_data ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $slicedimage.ImageFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Any , Dict , Mapping [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import numpy [EOL] [docstring] [EOL] import argparse [EOL] import json [EOL] import os [EOL] from typing import Mapping , Union [EOL] [EOL] import numpy as np [EOL] from skimage . io import imread [EOL] from slicedimage import ImageFormat [EOL] [EOL] from starfish . core . util . argparse import FsExistsType [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher , write_experiment_json [EOL] from starfish . types import Axes , Coordinates , CoordinateValue [EOL] [EOL] [EOL] class IssCroppedBreastTile ( FetchedTile ) : [EOL] [EOL] def __init__ ( self , file_path , coordinates ) : [EOL] self . file_path = file_path [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] return { Axes . Y : [number] , Axes . X : [number] } [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [EOL] [EOL] @ staticmethod def crop ( img ) : [EOL] crp = img [ [number] : [number] , [number] : [number] ] [EOL] return crp [EOL] [EOL] def tile_data ( self ) : [EOL] return self . crop ( imread ( self . file_path ) ) [EOL] [EOL] [EOL] class ISSCroppedBreastPrimaryTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir ) : [EOL] self . input_dir = input_dir [EOL] coordinates = os . path . join ( input_dir , [string] ) [EOL] with open ( coordinates ) as f : [EOL] self . coordinates_dict = json . load ( f ) [EOL] [EOL] @ property def ch_dict ( self ) : [EOL] ch_dict = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } [EOL] return ch_dict [EOL] [EOL] @ property def round_dict ( self ) : [EOL] round_str = [ [string] , [string] , [string] , [string] ] [EOL] round_dict = dict ( enumerate ( round_str ) ) [EOL] return round_dict [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] [EOL] [comment] [EOL] fov_ = str ( fov_id + [number] ) [EOL] round_ = self . round_dict [ round_label ] [EOL] ch_ = self . ch_dict [ ch_label ] [EOL] filename = f" [string] { fov_ } [string] { round_ } [string] { ch_ } [string] " [EOL] file_path = os . path . join ( self . input_dir , filename ) [EOL] [EOL] [comment] [EOL] fov_c_id = f" [string] { fov_id : [string] }" [EOL] coordinates = { Coordinates . X : self . coordinates_dict [ fov_c_id ] [ [string] ] , Coordinates . Y : self . coordinates_dict [ fov_c_id ] [ [string] ] , } [EOL] [EOL] return IssCroppedBreastTile ( file_path , coordinates ) [EOL] [EOL] [EOL] class ISSCroppedBreastAuxTileFetcher ( TileFetcher ) : [EOL] def __init__ ( self , input_dir , aux_type ) : [EOL] self . input_dir = input_dir [EOL] self . aux_type = aux_type [EOL] coordinates = os . path . join ( input_dir , [string] ) [EOL] with open ( coordinates ) as f : [EOL] self . coordinates_dict = json . load ( f ) [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] if self . aux_type == [string] : [EOL] filename = [string] . format ( str ( fov_id + [number] ) ) [EOL] elif self . aux_type == [string] : [EOL] filename = [string] . format ( str ( fov_id + [number] ) ) [EOL] else : [EOL] msg = [string] . format ( self . aux_type ) [EOL] msg += [string] [EOL] raise ValueError ( msg ) [EOL] [EOL] file_path = os . path . join ( self . input_dir , filename ) [EOL] [EOL] [comment] [EOL] fov_c_id = f" [string] { fov_id : [string] }" [EOL] coordinates = { Coordinates . X : self . coordinates_dict [ fov_c_id ] [ [string] ] , Coordinates . Y : self . coordinates_dict [ fov_c_id ] [ [string] ] , } [EOL] [EOL] return IssCroppedBreastTile ( file_path , coordinates = coordinates ) [EOL] [EOL] [EOL] def format_data ( input_dir , output_dir , num_fov ) : [EOL] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] [EOL] aux_name_to_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } } [EOL] [EOL] write_experiment_json ( path = output_dir , fov_count = num_fov , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = aux_name_to_dimensions , primary_tile_fetcher = ISSCroppedBreastPrimaryTileFetcher ( input_dir ) , aux_tile_fetcher = { [string] : ISSCroppedBreastAuxTileFetcher ( input_dir , [string] ) , [string] : ISSCroppedBreastAuxTileFetcher ( input_dir , [string] ) , } , ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [docstring] [EOL] [EOL] s3_bucket = [string] [EOL] input_help_msg = [string] . format ( s3_bucket ) [EOL] output_help_msg = [string] [EOL] fov_help_msg = [string] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) , help = input_help_msg ) [EOL] parser . add_argument ( [string] , type = FsExistsType ( ) , help = output_help_msg ) [EOL] parser . add_argument ( [string] , type = int , help = fov_help_msg ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] format_data ( args . input_dir , args . output_dir , args . num_fov ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],starfish.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[starfish.core.types._constants.Coordinates,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[starfish.core.types._constants.Coordinates,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[starfish.core.types._constants.Coordinates,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[starfish.core.types._constants.Coordinates,typing.Any]$ 0 $typing.Dict[starfish.core.types._constants.Coordinates,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import data [EOL] [EOL] [comment] [EOL] e = data . MOUSE_V_HUMAN ( ) [EOL] [comment] [EOL] imgs = e . fov ( ) . get_image ( [string] ) [comment] [EOL] dots = e . fov ( ) . get_image ( [string] ) [comment] [EOL] nuclei = e . fov ( ) . get_image ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] imgs [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] e . codebook [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from starfish . image import ApplyTransform , LearnTransform [EOL] from starfish . types import Axes [EOL] [EOL] [EOL] def register ( imgs , dots , method = [string] ) : [EOL] mip_imgs = imgs . reduce ( dims = [ Axes . CH , Axes . ZPLANE ] , func = [string] ) [EOL] mip_dots = dots . reduce ( dims = [ Axes . CH , Axes . ZPLANE ] , func = [string] ) [EOL] learn_translation = LearnTransform . Translation ( reference_stack = mip_dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( mip_imgs ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] registered_imgs = warp . run ( imgs , transforms_list = transforms_list , in_place = False , verbose = True ) [EOL] return registered_imgs [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from starfish . image import Filter [EOL] [EOL] [EOL] def filter_white_tophat ( imgs , dots , masking_radius ) : [EOL] wth = Filter . WhiteTophat ( masking_radius = masking_radius ) [EOL] return wth . run ( imgs ) , wth . run ( dots ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from starfish . spots import FindSpots [EOL] [EOL] [EOL] def find_spots ( imgs , dots ) : [EOL] [EOL] p = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , measurement_type = [string] , ) [EOL] [EOL] intensities = p . run ( image_stack = imgs , reference_image = dots ) [EOL] return intensities [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from starfish . spots import DecodeSpots [EOL] [EOL] [EOL] def decode_spots ( codebook , spots ) : [EOL] decoder = DecodeSpots . PerRoundMaxChannel ( codebook = codebook ) [EOL] return decoder . run ( spots = spots ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import numpy as np [EOL] from starfish . image import Segment [EOL] from starfish . types import Axes [EOL] [EOL] [EOL] def segment ( registered_imgs , nuclei ) : [EOL] dapi_thresh = [number] [comment] [EOL] stain_thresh = [number] [comment] [EOL] min_dist = [number] [EOL] [EOL] registered_mp = registered_imgs . reduce ( dims = [ Axes . CH , Axes . ZPLANE ] , func = [string] ) . xarray . squeeze ( ) [EOL] stain = np . mean ( registered_mp , axis = [number] ) [EOL] stain = stain / stain . max ( ) [EOL] nuclei = nuclei . reduce ( dims = [ Axes . ROUND , Axes . CH , Axes . ZPLANE ] , func = [string] ) [EOL] [EOL] seg = Segment . Watershed ( nuclei_threshold = dapi_thresh , input_threshold = stain_thresh , min_distance = min_dist ) [EOL] masks = seg . run ( registered_imgs , nuclei ) [EOL] [EOL] return seg , masks [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . spots import AssignTargets [EOL] [EOL] [EOL] def make_expression_matrix ( masks , decoded ) : [EOL] al = AssignTargets . Label ( ) [EOL] labeled = al . run ( masks , decoded [ decoded . target != [string] ] ) [EOL] cg = labeled [ labeled . cell_id != [string] ] . to_expression_matrix ( ) [EOL] return cg [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] imgs_wth , dots_wth = filter_white_tophat ( imgs , dots , [number] ) [EOL] [EOL] [comment] [EOL] registered_imgs = register ( imgs_wth , dots_wth ) [EOL] [EOL] [comment] [EOL] spots = find_spots ( registered_imgs , dots_wth ) [EOL] [EOL] [comment] [EOL] decoded = decode_spots ( e . codebook , spots ) [EOL] [EOL] [comment] [EOL] seg , masks = segment ( registered_imgs , nuclei ) [EOL] [EOL] [comment] [EOL] mat = make_expression_matrix ( masks , decoded ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] spots . count_total_spots ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( decoded . to_features_dataframe ( ) . head ( [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] from starfish . types import Features [EOL] [EOL] genes , counts = np . unique ( decoded . loc [ decoded [ Features . PASSES_THRESHOLDS ] ] [ Features . TARGET ] , return_counts = True ) [EOL] table = pd . Series ( counts , index = genes ) . sort_values ( ascending = False ) [EOL] print ( table ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( mat . to_pandas ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import seaborn as sns [EOL] [EOL] plt . figure ( figsize = ( [number] , [number] ) ) [EOL] sns . set ( font_scale = [number] ) [EOL] sns . heatmap ( mat . data . T , yticklabels = [ [string] , [string] ] , xticklabels = [ [string] . format ( n + [number] ) for n in range ( [number] ) ] , cmap = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] import starfish [EOL] from starfish . image import ApplyTransform , Filter , LearnTransform , Segment [EOL] from starfish . spots import FindSpots , DecodeSpots , AssignTargets [EOL] from starfish . types import Axes , FunctionSource [EOL] [EOL] test = os . getenv ( [string] ) is not None [EOL] [EOL] [EOL] def iss_pipeline ( fov , codebook ) : [EOL] primary_image = fov . get_image ( starfish . FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] [comment] [EOL] learn_translation = LearnTransform . Translation ( reference_stack = fov . get_image ( [string] ) , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( primary_image . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] registered = warp . run ( primary_image , transforms_list = transforms_list , in_place = False , verbose = True ) [EOL] [EOL] [comment] [EOL] masking_radius = [number] [EOL] filt = Filter . WhiteTophat ( masking_radius , is_volume = False ) [EOL] filtered = filt . run ( registered , verbose = True , in_place = False ) [EOL] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , measurement_type = [string] , ) [EOL] [EOL] [comment] [EOL] dots_max = fov . get_image ( [string] ) . reduce ( ( Axes . ROUND , Axes . ZPLANE ) , func = [string] ) [EOL] [comment] [EOL] spots = bd . run ( reference_image = dots_max , image_stack = filtered ) [EOL] [EOL] [comment] [EOL] decoder = DecodeSpots . PerRoundMaxChannel ( codebook = codebook ) [EOL] decoded = decoder . run ( spots = spots ) [EOL] [EOL] [comment] [EOL] seg = Segment . Watershed ( nuclei_threshold = [number] , input_threshold = [number] , min_distance = [number] , ) [EOL] label_image = seg . run ( primary_image , fov . get_image ( [string] ) ) [EOL] [EOL] [comment] [EOL] ta = AssignTargets . Label ( ) [EOL] assigned = ta . run ( label_image , decoded ) [EOL] [EOL] return assigned , label_image [EOL] [EOL] [EOL] [comment] [EOL] def process_experiment ( experiment ) : [EOL] decoded_intensities = { } [EOL] regions = { } [EOL] for i , ( name_ , fov ) in enumerate ( experiment . items ( ) ) : [EOL] decoded , segmentation_results = iss_pipeline ( fov , experiment . codebook ) [EOL] decoded_intensities [ name_ ] = decoded [EOL] regions [ name_ ] = segmentation_results [EOL] if test and i == [number] : [EOL] [comment] [EOL] break [EOL] return decoded_intensities , regions [EOL] [EOL] [EOL] [comment] [EOL] if test : [EOL] exp = starfish . Experiment . from_json ( [string] ) [EOL] else : [EOL] exp = starfish . Experiment . from_json ( [string] ) [EOL] decoded_intensities , regions = process_experiment ( exp ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $starfish.core.experiment.experiment.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 0
from typing import List , Optional , Any , Tuple , Dict [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import Optional , Tuple [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish import FieldOfView , DecodedIntensityTable [EOL] from starfish . types import TraceBuildingStrategies [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] bandpass = starfish . image . Filter . Bandpass ( lshort = [number] , llong = [number] , threshold = [number] ) [EOL] [EOL] [comment] [EOL] glp = starfish . image . Filter . GaussianLowPass ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] [EOL] [comment] [EOL] clip1 = starfish . image . Filter . Clip ( p_min = [number] , p_max = [number] ) [EOL] [EOL] [comment] [EOL] clip2 = starfish . image . Filter . Clip ( p_min = [number] , p_max = [number] , is_volume = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] tlmpf = starfish . spots . FindSpots . TrackpyLocalMaxPeakFinder ( spot_diameter = [number] , min_mass = [number] , max_size = [number] , separation = [number] , preprocess = False , percentile = [number] , verbose = True , is_volume = True , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def processing_pipeline ( experiment , fov_name , n_processes = None ) : [EOL] [docstring] [EOL] [EOL] all_intensities = list ( ) [EOL] codebook = experiment . codebook [EOL] [EOL] print ( [string] ) [EOL] images = enumerate ( experiment [ fov_name ] . get_images ( FieldOfView . PRIMARY_IMAGES ) ) [EOL] [EOL] decoder = starfish . spots . DecodeSpots . PerRoundMaxChannel ( codebook = codebook , trace_building_strategy = TraceBuildingStrategies . SEQUENTIAL ) [EOL] [EOL] for image_number , primary_image in images : [EOL] print ( f" [string] { image_number } [string] " ) [EOL] filter_kwargs = dict ( in_place = True , verbose = True , n_processes = n_processes ) [EOL] clip1 . run ( primary_image , ** filter_kwargs ) [EOL] bandpass . run ( primary_image , ** filter_kwargs ) [EOL] glp . run ( primary_image , ** filter_kwargs ) [EOL] clip2 . run ( primary_image , ** filter_kwargs ) [EOL] [EOL] print ( [string] ) [EOL] spots = tlmpf . run ( primary_image ) [EOL] print ( [string] ) [EOL] decoded_intensities = decoder . run ( spots = spots ) [EOL] all_intensities . append ( decoded_intensities ) [EOL] [EOL] decoded = DecodedIntensityTable . concatenate_intensity_tables ( all_intensities ) [EOL] decoded = decoded [ decoded [ [string] ] > [number] ] [EOL] [EOL] return primary_image , decoded [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] experiment = starfish . data . allen_smFISH ( use_test_data = True ) [EOL] [EOL] image , intensities = processing_pipeline ( experiment , fov_name = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[starfish.ImageStack,starfish.IntensityTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Union , Dict [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] from IPython import get_ipython [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [comment] [EOL] ipython = get_ipython ( ) [EOL] ipython . magic ( [string] ) [EOL] ipython . magic ( [string] ) [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import data [EOL] from starfish import FieldOfView [EOL] from starfish . util . plot import imshow_plane [EOL] from starfish . types import Axes [EOL] [EOL] experiment = data . STARmap ( use_test_data = True ) [EOL] stack = experiment [ [string] ] . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] ch_r_max_projection = stack . reduce ( { Axes . CH , Axes . ROUND } , func = [string] ) [EOL] [EOL] f = plt . figure ( dpi = [number] ) [EOL] imshow_plane ( ch_r_max_projection , sel = { Axes . ZPLANE : [number] } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( experiment . codebook ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import image [EOL] [EOL] projection = stack . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) [EOL] reference_image = projection . sel ( { Axes . ROUND : [number] } ) [EOL] [EOL] ltt = image . LearnTransform . Translation ( reference_stack = reference_image , axes = Axes . ROUND , upsampling = [number] , ) [EOL] transforms = ltt . run ( projection ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from pprint import pprint [EOL] [EOL] pprint ( [ t [ [number] ] . translation for t in transforms . transforms ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] warp = image . ApplyTransform . Warp ( ) [EOL] stack = warp . run ( stack = stack , transforms_list = transforms , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . util . plot import diagnose_registration [EOL] [EOL] post_projection = stack . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) [EOL] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] sel_0 = { Axes . ROUND : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] sel_1 = { Axes . ROUND : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] diagnose_registration ( projection , sel_0 , sel_1 , ax = ax1 , title = [string] ) [EOL] diagnose_registration ( post_projection , sel_0 , sel_1 , ax = ax2 , title = [string] ) [EOL] f . tight_layout ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import ImageStack [EOL] from starfish . util . plot import intensity_histogram [EOL] [EOL] mh = image . Filter . MatchHistograms ( { Axes . CH , Axes . ROUND } ) [EOL] scaled = mh . run ( stack , in_place = False , verbose = True , n_processes = [number] ) [EOL] [EOL] def plot_scaling_result ( template , scaled ) : [EOL] f , ( before , after ) = plt . subplots ( ncols = [number] , nrows = [number] ) [EOL] for channel , ax in enumerate ( before ) : [EOL] title = f' [string] { channel }' [EOL] intensity_histogram ( template , sel = { Axes . CH : channel , Axes . ROUND : [number] } , ax = ax , title = title , log = True , bins = [number] , ) [EOL] ax . set_xlim ( ( [number] , [number] ) ) [EOL] for channel , ax in enumerate ( after ) : [EOL] title = f' [string] { channel }' [EOL] intensity_histogram ( scaled , sel = { Axes . CH : channel , Axes . ROUND : [number] } , ax = ax , title = title , log = True , bins = [number] , ) [EOL] ax . set_xlim ( ( [number] , [number] ) ) [EOL] f . tight_layout ( ) [EOL] return f [EOL] [EOL] f = plot_scaling_result ( stack , scaled ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import numpy as np [EOL] from starfish . spots import FindSpots [EOL] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = np . percentile ( np . ravel ( stack . xarray . values ) , [number] ) , exclude_border = [number] ) [EOL] [EOL] spots = bd . run ( scaled ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . spots import DecodeSpots [EOL] from starfish . types import TraceBuildingStrategies [EOL] [EOL] decoder = DecodeSpots . PerRoundMaxChannel ( codebook = experiment . codebook , anchor_round = [number] , search_radius = [number] , trace_building_strategy = TraceBuildingStrategies . NEAREST_NEIGHBOR ) [EOL] [EOL] decoded = decoder . run ( spots = spots ) [EOL] [EOL] decode_mask = decoded [ [string] ] != [string] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Union[builtins.int,typing.Tuple[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DecodeSpots.per_round_max_channel_decoder.PerRoundMaxChannel$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.spots.DecodeSpots.per_round_max_channel_decoder.PerRoundMaxChannel$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 $typing.Any$ 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from starfish import data , display [EOL] from starfish . image import ApplyTransform , LearnTransform [EOL] from starfish . spots import FindSpots [EOL] from starfish . types import Axes [EOL] from starfish . util . plot import imshow_plane [EOL] from starfish . core . spots . DecodeSpots . trace_builders import build_spot_traces_exact_match [EOL] [EOL] experiment = data . STARmap ( use_test_data = True ) [EOL] imgs = experiment [ [string] ] . get_image ( [string] ) [EOL] [EOL] [comment] [EOL] projection = imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) [EOL] reference_image = projection . sel ( { Axes . ROUND : [number] } ) [EOL] ltt = LearnTransform . Translation ( reference_stack = reference_image , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms = ltt . run ( projection ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] imgs = warp . run ( stack = imgs , transforms_list = transforms ) [EOL] [EOL] [comment] [EOL] dots = imgs . reduce ( { Axes . CH , Axes . ROUND } , func = [string] ) [EOL] [EOL] [comment] [EOL] imshow_plane ( dots , sel = { Axes . ZPLANE : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , is_volume = True , measurement_type = [string] , ) [EOL] [EOL] lmp = FindSpots . LocalMaxPeakFinder ( min_distance = [number] , stringency = [number] , min_obj_area = [number] , max_obj_area = [number] , is_volume = True ) [EOL] [EOL] tlmpf = FindSpots . TrackpyLocalMaxPeakFinder ( spot_diameter = [number] , min_mass = [number] , max_size = [number] , separation = [number] , preprocess = False , percentile = [number] , verbose = True , ) [EOL] [EOL] [comment] [EOL] crop_selection = { Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } [EOL] cropped_imgs = imgs . sel ( crop_selection ) [EOL] cropped_dots = dots . sel ( crop_selection ) [EOL] [EOL] [comment] [EOL] bd_spots = bd . run ( image_stack = cropped_imgs , reference_image = cropped_dots ) [EOL] lmp_spots = lmp . run ( image_stack = cropped_imgs , reference_image = cropped_dots ) [EOL] tlmpf_spots = tlmpf . run ( image_stack = cropped_imgs , reference_image = cropped_dots ) [EOL] [EOL] [comment] [EOL] bd_table = build_spot_traces_exact_match ( bd_spots ) [EOL] lmp_table = build_spot_traces_exact_match ( lmp_spots ) [EOL] tlmpf_table = build_spot_traces_exact_match ( tlmpf_spots ) [EOL] [EOL] [comment] [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [comment] [EOL] def get_cropped_coords ( table , x_min , x_max , y_min , y_max ) : [EOL] df = table . to_features_dataframe ( ) [EOL] df = df . loc [ df [ [string] ] . between ( x_min , x_max ) & df [ [string] ] . between ( y_min , y_max ) ] [EOL] return df [ [string] ] . values - x_min , df [ [string] ] . values - y_min , df [ [string] ] . values . astype ( int ) [EOL] bd_x , bd_y , bd_s = get_cropped_coords ( bd_table , [number] , [number] , [number] , [number] ) [EOL] lmp_x , lmp_y , lmp_s = get_cropped_coords ( lmp_table , [number] , [number] , [number] , [number] ) [EOL] tlmpf_x , tlmpf_y , tlmpf_s = get_cropped_coords ( tlmpf_table , [number] , [number] , [number] , [number] ) [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] f , ( ax1 , ax2 , ax3 ) = plt . subplots ( ncols = [number] ) [EOL] [EOL] [comment] [EOL] imshow_plane ( cropped_dots . reduce ( { Axes . ZPLANE } , func = [string] ) , sel = { Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } , ax = ax1 , title = [string] ) [EOL] imshow_plane ( cropped_dots . reduce ( { Axes . ZPLANE } , func = [string] ) , sel = { Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } , ax = ax2 , title = [string] ) [EOL] imshow_plane ( cropped_dots . reduce ( { Axes . ZPLANE } , func = [string] ) , sel = { Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } , ax = ax3 , title = [string] ) [EOL] [comment] [EOL] ax1 . scatter ( bd_x , bd_y , marker = [string] , facecolors = [string] , edgecolors = [string] , s = bd_s * [number] ) [EOL] ax2 . scatter ( lmp_x , lmp_y , marker = [string] , facecolors = [string] , edgecolors = [string] , s = lmp_s * [number] ) [EOL] ax3 . scatter ( tlmpf_x , tlmpf_y , marker = [string] , facecolors = [string] , edgecolors = [string] , s = tlmpf_s * [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.local_max_peak_finder.LocalMaxPeakFinder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Tuple[builtins.int,builtins.int]]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[starfish.core.types._constants.Axes,typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.local_max_peak_finder.LocalMaxPeakFinder$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] import os [EOL] [EOL] import starfish . data [EOL] from starfish import BinaryMaskCollection [EOL] from starfish . image import Filter [EOL] from starfish . types import Levels [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] experiment = starfish . data . MERFISH ( ) [EOL] fov = experiment [ [string] ] [EOL] dapi = fov . get_image ( [string] ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] def preprocess ( dapi ) : [EOL] blur = Filter . GaussianLowPass ( sigma = [number] ) [EOL] blurred = blur . run ( dapi ) [EOL] [EOL] clip = Filter . Clip ( p_min = [number] , p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] clipped = clip . run ( blurred ) [EOL] return clipped [EOL] [EOL] [EOL] dapi = preprocess ( dapi ) [EOL] [EOL] [comment] [EOL] roi_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] masks = BinaryMaskCollection . from_fiji_roi_set ( path_to_roi_set_zip = roi_path , original_image = dapi ) [EOL] [EOL] [comment] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . imshow ( dapi . xarray . values . squeeze ( ) ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( masks . to_label_image ( ) . xarray . values . squeeze ( ) , cmap = plt . cm . nipy_spectral ) [EOL] ax2 . set_title ( [string] ) [EOL] f . tight_layout ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import xarray as xr [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish . types import Axes [EOL] [EOL] experiment = starfish . data . ISS ( use_test_data = True ) [EOL] image = experiment [ [string] ] . get_image ( [string] ) [EOL] [EOL] image_2d = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] , Axes . ZPLANE : [number] } ) [EOL] [EOL] plt . imshow ( np . squeeze ( image_2d . xarray . values ) ) [EOL] plt . show ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] lightness = np . linspace ( [number] , [number] , image_2d . xarray . sizes [ Axes . X ] ) [EOL] gradient_data = np . tile ( lightness , reps = ( image_2d . xarray . sizes [ Axes . Y ] , [number] ) ) [EOL] gradient = xr . DataArray ( data = gradient_data [ np . newaxis , np . newaxis , np . newaxis , : , : ] , dims = ( Axes . ROUND . value , Axes . CH . value , Axes . ZPLANE . value , Axes . Y . value , Axes . X . value ) ) [EOL] [EOL] [comment] [EOL] data = image_2d . xarray . values / gradient . values [EOL] image_2d = starfish . ImageStack . from_numpy ( data ) [EOL] [EOL] [comment] [EOL] plt . imshow ( np . squeeze ( image_2d . xarray . values ) ) [EOL] plt . show ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] ewm = starfish . image . Filter . ElementWiseMultiply ( mult_array = gradient ) [EOL] corrected_image_2d = ewm . run ( image_2d , in_place = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] plt . imshow ( np . squeeze ( corrected_image_2d . xarray ) ) [EOL] plt . show ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.element_wise_mult.ElementWiseMultiply$ 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starfish.core.image.Filter.element_wise_mult.ElementWiseMultiply$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] from starfish import data [EOL] [EOL] experiment = data . ISS ( use_test_data = True ) [EOL] imgs = experiment [ [string] ] . get_image ( [string] ) [EOL] dots = experiment [ [string] ] . get_image ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . types import Axes [EOL] [EOL] projected_imgs = imgs . reduce ( { Axes . CH } , func = [string] ) [EOL] print ( projected_imgs ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import matplotlib [EOL] from starfish . util . plot import diagnose_registration [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] diagnose_registration ( projected_imgs , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . image import LearnTransform [EOL] [EOL] learn_translation = LearnTransform . Translation ( reference_stack = dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( projected_imgs ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] transforms_list . to_json ( [string] ) [EOL] print ( transforms_list ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . image import ApplyTransform [EOL] [EOL] warp = ApplyTransform . Warp ( ) [EOL] registered_imgs = warp . run ( imgs , transforms_list = transforms_list , in_place = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] diagnose_registration ( registered_imgs . reduce ( { Axes . CH } , func = [string] ) , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } , { Axes . ROUND : [number] } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 $typing.Any$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] from copy import deepcopy [EOL] from starfish import data , FieldOfView , display [EOL] from starfish . image import Filter [EOL] from starfish . spots import DetectPixels [EOL] from starfish . types import Axes , Features , Levels [EOL] [EOL] [comment] [EOL] experiment = data . MERFISH ( use_test_data = True ) [EOL] imgs = experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] [comment] [EOL] ghp = Filter . GaussianHighPass ( sigma = [number] ) [EOL] dpsf = Filter . DeconvolvePSF ( num_iter = [number] , sigma = [number] , level_method = Levels . SCALE_SATURATED_BY_CHUNK ) [EOL] glp = Filter . GaussianLowPass ( sigma = [number] ) [EOL] ghp . run ( imgs , in_place = True ) [EOL] dpsf . run ( imgs , in_place = True ) [EOL] glp . run ( imgs , in_place = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] scale_factors = { ( t [ Axes . ROUND ] , t [ Axes . CH ] ) : t [ [string] ] for t in experiment . extras [ [string] ] } [EOL] filtered_imgs = deepcopy ( imgs ) [EOL] for selector in imgs . _iter_axes ( ) : [EOL] data = filtered_imgs . get_slice ( selector ) [ [number] ] [EOL] scaled = data / scale_factors [ selector [ Axes . ROUND . value ] , selector [ Axes . CH . value ] ] [EOL] filtered_imgs . set_slice ( selector , scaled , [ Axes . ZPLANE ] ) [EOL] [EOL] [comment] [EOL] psd = DetectPixels . PixelSpotDecoder ( codebook = experiment . codebook , metric = [string] , norm_order = [number] , distance_threshold = [number] , magnitude_threshold = [number] , min_area = [number] , max_area = np . inf , ) [EOL] initial_spot_intensities , prop_results = psd . run ( filtered_imgs ) [EOL] [EOL] [comment] [EOL] spot_intensities = initial_spot_intensities . loc [ initial_spot_intensities [ Features . PASSES_THRESHOLDS ] ] [EOL] [EOL] [comment] [EOL] print ( f" [string] { prop_results . region_properties [ [number] ] . area }" ) [EOL] [EOL] [comment] [EOL] plt . imshow ( prop_results . label_image [ [number] ] ) [EOL] plt . title ( [string] ) [EOL] [EOL] [comment] [EOL] single_plane_max = filtered_imgs . reduce ( { Axes . ROUND , Axes . CH , Axes . ZPLANE } , func = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.richardson_lucy_deconvolution.DeconvolvePSF$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.richardson_lucy_deconvolution.DeconvolvePSF$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[typing.Any,typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[typing.Tuple[typing.Any,typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import starfish [EOL] import xarray [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish . image import Filter [EOL] from starfish . types import Axes [EOL] [EOL] experiment = starfish . data . ISS ( use_test_data = True ) [EOL] field_of_view = experiment [ [string] ] [EOL] image = field_of_view . get_image ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] clip_97 = Filter . Clip ( p_min = [number] ) [EOL] clipped = clip_97 . run ( image ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import xarray as xr [EOL] [EOL] [comment] [EOL] orig_plot = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] clip_plot = clipped . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . imshow ( orig_plot ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( clip_plot ) [EOL] ax2 . set_title ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . image import Filter [EOL] [EOL] masking_radius = [number] [EOL] filt = Filter . WhiteTophat ( masking_radius , is_volume = False ) [EOL] filtered = filt . run ( image , verbose = True , in_place = False ) [EOL] [EOL] orig_plot = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] wth_plot = filtered . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . imshow ( orig_plot ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( wth_plot ) [EOL] ax2 . set_title ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.FieldOfView$ 0 $starfish.Experiment$ 0 0 0 0 $starfish.ImageStack$ 0 $starfish.FieldOfView$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 $builtins.int$ 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] import os [EOL] import numpy as np [EOL] from copy import deepcopy [EOL] from starfish import BinaryMaskCollection , data [EOL] from starfish . core . experiment . experiment import FieldOfView [EOL] from starfish . image import Filter [EOL] from starfish . spots import DetectPixels , AssignTargets [EOL] from starfish . types import Axes , Features , Levels [EOL] [EOL] experiment = data . MERFISH ( ) [EOL] fov = experiment [ [string] ] [EOL] imgs = experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] dapi = fov . get_image ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] ghp = Filter . GaussianHighPass ( sigma = [number] ) [EOL] dpsf = Filter . DeconvolvePSF ( num_iter = [number] , sigma = [number] , level_method = Levels . SCALE_SATURATED_BY_CHUNK ) [EOL] glp = Filter . GaussianLowPass ( sigma = [number] ) [EOL] ghp . run ( imgs , in_place = True ) [EOL] dpsf . run ( imgs , in_place = True ) [EOL] glp . run ( imgs , in_place = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] scale_factors = { ( t [ Axes . ROUND ] , t [ Axes . CH ] ) : t [ [string] ] for t in experiment . extras [ [string] ] } [EOL] filtered_imgs = deepcopy ( imgs ) [EOL] for selector in imgs . _iter_axes ( ) : [EOL] data = filtered_imgs . get_slice ( selector ) [ [number] ] [EOL] scaled = data / scale_factors [ selector [ Axes . ROUND . value ] , selector [ Axes . CH . value ] ] [EOL] filtered_imgs . set_slice ( selector , scaled , [ Axes . ZPLANE ] ) [EOL] [EOL] [comment] [EOL] psd = DetectPixels . PixelSpotDecoder ( codebook = experiment . codebook , metric = [string] , norm_order = [number] , distance_threshold = [number] , magnitude_threshold = [number] , min_area = [number] , max_area = np . inf , ) [EOL] initial_spot_intensities , prop_results = psd . run ( filtered_imgs ) [EOL] [comment] [EOL] decoded = initial_spot_intensities . loc [ initial_spot_intensities [ Features . PASSES_THRESHOLDS ] ] [EOL] decoded_filtered = decoded [ decoded . target != [string] ] [EOL] [EOL] [comment] [EOL] roi_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] masks = BinaryMaskCollection . from_fiji_roi_set ( path_to_roi_set_zip = roi_path , original_image = dapi ) [EOL] [EOL] [comment] [EOL] al = AssignTargets . Label ( ) [EOL] labeled = al . run ( masks , decoded_filtered ) [EOL] [EOL] [comment] [EOL] labeled_filtered = labeled [ labeled . cell_id != [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] mat = labeled_filtered . to_expression_matrix ( ) [EOL] mat . to_pandas ( ) . iloc [ : , [number] : [number] ] . astype ( int ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] mat [ Features . AREA ] = ( Features . CELLS , [ mask . data . sum ( ) for _ , mask in masks ] ) [EOL] [EOL] [comment] [EOL] from skimage . measure import regionprops [EOL] mat [ [string] ] = ( Features . CELLS , [ regionprops ( mask . data . astype ( int ) , coordinates = [string] ) [ [number] ] . eccentricity for _ , mask in masks ] ) [EOL] [EOL] [comment] [EOL] mat [EOL] [EOL] [comment] [EOL] import seaborn as sns [EOL] sns . clustermap ( mat . data . T , yticklabels = mat . genes . data , xticklabels = [ [string] . format ( n + [number] ) for n in range ( [number] ) ] , cmap = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] mat . save ( [string] ) [EOL] [EOL] [comment] [EOL] mat . save_anndata ( [string] ) [EOL] [EOL] [comment] [EOL] mat . save_loom ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.richardson_lucy_deconvolution.DeconvolvePSF$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.richardson_lucy_deconvolution.DeconvolvePSF$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[typing.Any,typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[typing.Tuple[typing.Any,typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starfish.core.spots.AssignTargets.label.Label$ 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.spots.AssignTargets.label.Label$ 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
import starfish [EOL] import xarray [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import starfish [EOL] import starfish . data [EOL] from starfish . core . imagestack . parser . crop import CropParameters [EOL] [EOL] experiment = starfish . data . ISS ( use_test_data = True ) [EOL] field_of_view = experiment [ [string] ] [EOL] print ( field_of_view ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] y_slice = slice ( [number] , [number] ) [EOL] x_slice = slice ( [number] , [number] ) [EOL] image = field_of_view . get_image ( [string] , x = x_slice , y = y_slice ) [EOL] [EOL] print ( image ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . types import Axes [EOL] [EOL] cropped_image = image . sel ( { Axes . ROUND : ( [number] , [number] ) , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } ) [EOL] print ( cropped_image ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . image import Filter [EOL] [EOL] projected_image = image . reduce ( { Axes . CH } , func = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import xarray as xr [EOL] [EOL] [comment] [EOL] round_1_ch_0 = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] round_1_ch_1 = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] round_1_ch_2 = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] round_1_ch_3 = image . sel ( { Axes . CH : [number] , Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] round_1_proj = projected_image . sel ( { Axes . ROUND : [number] } ) . xarray . squeeze ( ) [EOL] [EOL] [comment] [EOL] f , ( ( ax1 , ax2 , ax3 ) , ( ax4 , ax5 , ax6 ) ) = plt . subplots ( nrows = [number] , ncols = [number] ) [EOL] ax1 . imshow ( round_1_ch_0 ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( round_1_ch_1 ) [EOL] ax2 . set_title ( [string] ) [EOL] ax4 . imshow ( round_1_ch_2 ) [EOL] ax4 . set_title ( [string] ) [EOL] ax5 . imshow ( round_1_ch_3 ) [EOL] ax5 . set_title ( [string] ) [EOL] [EOL] ax3 . imshow ( round_1_proj ) [EOL] ax3 . set_title ( [string] ) [EOL] [EOL] [comment] [EOL] ax6 . set_axis_off ( ) [EOL] [EOL] [comment] [EOL] f . tight_layout ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.FieldOfView$ 0 $starfish.Experiment$ 0 0 0 0 0 0 $starfish.FieldOfView$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.slice$ 0 0 0 0 0 0 0 0 $builtins.slice$ 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 $starfish.FieldOfView$ 0 0 0 0 0 0 0 $builtins.slice$ 0 0 0 $builtins.slice$ 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.ImageStack$ 0 0 0 0 $starfish.ImageStack$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 $starfish.ImageStack$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xarray.DataArray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] import os [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import starfish . data [EOL] from starfish . image import Filter [EOL] from starfish . types import Axes , Coordinates , Levels [EOL] [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] [EOL] experiment = starfish . data . MERFISH ( ) [EOL] fov = experiment [ [string] ] [EOL] dapi = fov . get_image ( [string] ) [EOL] [EOL] [comment] [EOL] def preprocess ( dapi ) : [EOL] blur = Filter . GaussianLowPass ( sigma = [number] ) [EOL] blurred = blur . run ( dapi ) [EOL] clip = Filter . Clip ( p_min = [number] , p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] clipped = clip . run ( blurred ) [EOL] return clipped [EOL] [EOL] dapi = preprocess ( dapi ) [EOL] [EOL] [comment] [EOL] ilastik_exe_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] ilastik_proj_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] ipp = Filter . IlastikPretrainedProbability ( ilastik_executable = ilastik_exe_path , ilastik_project = ilastik_proj_path ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] ilastik_exe_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] ilastik_proj_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] ipp = Filter . IlastikPretrainedProbability ( ilastik_executable = ilastik_exe_path , ilastik_project = ilastik_proj_path ) [EOL] [EOL] [comment] [EOL] h5_file_path = os . path . join ( os . path . dirname ( [string] ) , [string] ) [EOL] imported_probabilities = ipp . import_ilastik_probabilities ( path_to_h5_file = h5_file_path ) [EOL] [EOL] [comment] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . imshow ( dapi . xarray . values . squeeze ( ) ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( imported_probabilities . xarray . values . squeeze ( ) ) [EOL] ax2 . set_title ( [string] ) [EOL] f . tight_layout ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] clip = Filter . Clip ( p_min = [number] , p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] clipped_probabilities = clip . run ( imported_probabilities ) [EOL] [EOL] [comment] [EOL] from starfish . morphology import Binarize , Filter [EOL] prob_thresh = [number] [EOL] min_dist = [number] [EOL] min_allowed_size = [number] [EOL] max_allowed_size = [number] [EOL] binarized_probabilities = Binarize . ThresholdBinarize ( prob_thresh ) . run ( clipped_probabilities ) [EOL] labeled_masks = Filter . MinDistanceLabel ( min_dist , [number] ) . run ( binarized_probabilities ) [EOL] masks = Filter . AreaFilter ( min_area = min_allowed_size , max_area = max_allowed_size ) . run ( labeled_masks ) [EOL] [EOL] [comment] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . imshow ( imported_probabilities . xarray . values . squeeze ( ) ) [EOL] ax1 . set_title ( [string] ) [EOL] ax2 . imshow ( labeled_masks . to_label_image ( ) . xarray . values . squeeze ( ) , cmap = plt . cm . nipy_spectral ) [EOL] ax2 . set_title ( [string] ) [EOL] f . tight_layout ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.ilastik_pre_trained_probability.IlastikPretrainedProbability$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.ilastik_pre_trained_probability.IlastikPretrainedProbability$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.ilastik_pre_trained_probability.IlastikPretrainedProbability$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.morphology.binary_mask.binary_mask.BinaryMaskCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] import starfish . data [EOL] import matplotlib . pyplot as plt [EOL] from starfish . types import Axes [EOL] from starfish import FieldOfView [EOL] from starfish . util . plot import imshow_plane , intensity_histogram [EOL] [EOL] experiment = starfish . data . DARTFISH ( use_test_data = False ) [EOL] stack = experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] print ( stack ) [EOL] [EOL] [comment] [EOL] def imshow_3channels ( stack , r ) : [EOL] fig = plt . figure ( dpi = [number] ) [EOL] ax1 = fig . add_subplot ( [number] , title = [string] ) [EOL] ax2 = fig . add_subplot ( [number] , title = [string] ) [EOL] ax3 = fig . add_subplot ( [number] , title = [string] ) [EOL] imshow_plane ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , ax = ax1 ) [EOL] imshow_plane ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , ax = ax2 ) [EOL] imshow_plane ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , ax = ax3 ) [EOL] [EOL] [EOL] def plot_intensity_histograms ( ref , scaled_cr , scaled_c , scaled_r , r ) : [EOL] fig = plt . figure ( ) [EOL] ax10 = fig . add_subplot ( [number] , [number] , [number] ) [EOL] intensity_histogram ( scaled_cr , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax10 ) [EOL] ax10 . set_ylabel ( [string] , rotation = [number] , size = [string] ) [EOL] ax11 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_cr , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax11 ) [EOL] ax12 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_cr , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax12 ) [EOL] ax1 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( ref , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax1 ) [EOL] ax1 . set_title ( [string] ) [EOL] ax1 . set_ylabel ( [string] , rotation = [number] , size = [string] ) [EOL] ax2 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( ref , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax2 ) [EOL] ax2 . set_title ( [string] ) [EOL] ax3 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( ref , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax3 ) [EOL] ax3 . set_title ( [string] ) [EOL] ax4 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_c , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax4 ) [EOL] ax4 . set_ylabel ( [string] , rotation = [number] , size = [string] ) [EOL] ax5 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_c , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax5 ) [EOL] ax6 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_c , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax6 ) [EOL] ax7 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_r , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax7 ) [EOL] ax7 . set_ylabel ( [string] , rotation = [number] , size = [string] ) [EOL] ax8 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_r , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax8 ) [EOL] ax9 = fig . add_subplot ( [number] , [number] , [number] , sharex = ax10 ) [EOL] intensity_histogram ( scaled_r , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax9 ) [EOL] fig . tight_layout ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] imshow_3channels ( stack = stack , r = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] mh_cr = starfish . image . Filter . MatchHistograms ( { Axes . CH , Axes . ROUND } ) [EOL] [comment] [EOL] mh_c = starfish . image . Filter . MatchHistograms ( { Axes . CH } ) [EOL] [comment] [EOL] mh_r = starfish . image . Filter . MatchHistograms ( { Axes . ROUND } ) [EOL] [comment] [EOL] scaled_cr = mh_cr . run ( stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] scaled_c = mh_c . run ( stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] scaled_r = mh_r . run ( stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plot_intensity_histograms ( ref = stack , scaled_cr = scaled_cr , scaled_c = scaled_c , scaled_r = scaled_r , r = [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from starfish import data [EOL] [EOL] [comment] [EOL] experiment = data . ISS ( use_test_data = True ) [EOL] experiment [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] fov = experiment [ [string] ] [EOL] fov [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] image = fov . get_image ( [string] , x = slice ( [number] , [number] ) , y = slice ( [number] , [number] ) ) [EOL] image [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Union , Mapping [EOL] import tempfile [EOL] import builtins [EOL] import starfish [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Mapping , Union [EOL] [EOL] import numpy as np [EOL] [EOL] from starfish . core . types import Coordinates , CoordinateValue , Axes [EOL] [EOL] tile_2d_shape = ( [number] , [number] ) [EOL] num_z = [number] [EOL] num_r = [number] [EOL] num_c = [number] [EOL] [EOL] synthetic_data = np . random . random ( size = ( num_r , num_c , num_z ) + tile_2d_shape ) . astype ( np . float32 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import os , tempfile [EOL] from imageio import volread , volwrite [EOL] [EOL] dir = tempfile . TemporaryDirectory ( ) [EOL] [EOL] for r in range ( num_r ) : [EOL] for c in range ( num_c ) : [EOL] volwrite ( os . path . join ( dir . name , f" [string] { r } [string] { c } [string] " ) , synthetic_data [ r , c ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import functools [EOL] from starfish . experiment . builder import FetchedTile , TileFetcher [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_read_fn ( file_path ) : [EOL] return volread ( file_path , format = [string] ) [EOL] [EOL] class DemoFetchedTile ( FetchedTile ) : [EOL] def __init__ ( self , filename , z , * args , ** kwargs ) : [EOL] self . filename = filename [EOL] self . z = z [EOL] [EOL] @ property def shape ( self ) : [EOL] return { Axes . Y : tile_2d_shape [ [number] ] , Axes . X : tile_2d_shape [ [number] ] , } [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] * self . z , [number] * ( self . z + [number] ) ) , } [EOL] [EOL] def tile_data ( self ) : [EOL] return cached_read_fn ( self . filename ) [ self . z ] [EOL] [EOL] class DemoTileFetcher ( TileFetcher ) : [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] return DemoFetchedTile ( os . path . join ( dir . name , f" [string] { r } [string] { c } [string] " ) , zplane_label ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import ImageStack [EOL] [EOL] stack = ImageStack . from_tilefetcher ( DemoTileFetcher ( ) , { Axes . Y : tile_2d_shape [ [number] ] , Axes . X : tile_2d_shape [ [number] ] , } , fov = [number] , rounds = range ( num_r ) , chs = range ( num_c ) , zplanes = range ( num_z ) , group_by = ( Axes . ROUND , Axes . CH ) , ) [EOL] print ( repr ( stack ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[starfish.core.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.core.types.Coordinates],starfish.core.types.CoordinateValue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Union , List , Any , Tuple , Dict , Mapping [EOL] import tempfile [EOL] import builtins [EOL] import starfish [EOL] import examples [EOL] import typing [EOL] import numpy [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import os [EOL] import numpy as np [EOL] import skimage . io [EOL] import tempfile [EOL] [EOL] [comment] [EOL] fovs = [ [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , ] [EOL] [EOL] data = np . zeros ( ( [number] , [number] ) , dtype = np . float32 ) [EOL] [EOL] [comment] [EOL] inputdir = tempfile . TemporaryDirectory ( ) [EOL] primary_dir = os . path . join ( inputdir . name , [string] ) [EOL] nuclei_dir = os . path . join ( inputdir . name , [string] ) [EOL] os . mkdir ( primary_dir ) [EOL] os . mkdir ( nuclei_dir ) [EOL] [EOL] for fov_id , fov in enumerate ( fovs ) : [EOL] for round_label , ch_label , zplane_label in fov : [EOL] primary_path = os . path . join ( primary_dir , f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " ) [EOL] nuclei_path = os . path . join ( nuclei_dir , f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " ) [EOL] skimage . io . imsave ( primary_path , data ) [EOL] skimage . io . imsave ( nuclei_path , data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for dir in [ primary_dir , nuclei_dir ] : [EOL] print ( [string] ) [EOL] for file in sorted ( os . listdir ( dir ) ) : [EOL] print ( file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import functools [EOL] from imageio import volread [EOL] from skimage . io import imread [EOL] from typing import Mapping , Union [EOL] [EOL] from starfish . experiment . builder import FetchedTile [EOL] from starfish . types import Axes , Coordinates [EOL] [EOL] [EOL] [comment] [EOL] def read_fn ( file_path ) : [EOL] return imread ( file_path ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ functools . lru_cache ( maxsize = [number] ) def cached_3D_read_fn ( file_path ) : [EOL] return volread ( file_path ) [EOL] [EOL] [EOL] [comment] [EOL] class RNATile ( FetchedTile ) : [EOL] [EOL] def __init__ ( self , file_path , coordinates ) : [EOL] [docstring] [EOL] self . file_path = file_path [EOL] [EOL] [comment] [EOL] self . _coordinates = coordinates [EOL] [EOL] @ property def shape ( self ) : [EOL] return { Axes . Y : [number] , Axes . X : [number] } [comment] [EOL] [EOL] @ property def coordinates ( self ) : [EOL] return self . _coordinates [EOL] [EOL] def tile_data ( self ) : [EOL] return read_fn ( self . file_path ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] coordinates_of_fovs = [ { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } , { Coordinates . X : ( [number] , [number] ) , Coordinates . Y : ( [number] , [number] ) , Coordinates . Z : ( [number] , [number] ) , } , ] [EOL] [EOL] from starfish . experiment . builder import TileFetcher [EOL] [EOL] class PrimaryTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir ) : [EOL] self . input_dir = os . path . join ( input_dir ) [EOL] self . num_z = [number] [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] filename = f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " [EOL] return RNATile ( os . path . join ( self . input_dir , filename ) , coordinates_of_fovs [ fov_id ] ) [EOL] [EOL] class NucleiTileFetcher ( TileFetcher ) : [EOL] [EOL] def __init__ ( self , input_dir ) : [EOL] self . input_dir = os . path . join ( input_dir ) [EOL] self . num_z = [number] [EOL] [EOL] def get_tile ( self , fov_id , round_label , ch_label , zplane_label ) : [EOL] filename = f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " [EOL] return RNATile ( os . path . join ( self . input_dir , filename ) , coordinates_of_fovs [ fov_id ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from slicedimage import ImageFormat [EOL] from starfish . experiment . builder import write_experiment_json [EOL] [EOL] outputdir = tempfile . TemporaryDirectory ( ) [EOL] [EOL] primary_tile_fetcher = PrimaryTileFetcher ( primary_dir ) [EOL] nuclei_tile_fetcher = NucleiTileFetcher ( nuclei_dir ) [EOL] [EOL] [comment] [EOL] primary_image_dimensions = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } [EOL] aux_images_dimensions = { [string] : { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] , } , } [EOL] [EOL] write_experiment_json ( path = outputdir . name , fov_count = [number] , tile_format = ImageFormat . TIFF , primary_image_dimensions = primary_image_dimensions , aux_name_to_dimensions = aux_images_dimensions , primary_tile_fetcher = primary_tile_fetcher , aux_tile_fetcher = { [string] : nuclei_tile_fetcher } , dimension_order = ( Axes . ROUND , Axes . CH , Axes . ZPLANE ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( outputdir . name , [string] ) , [string] ) as fh : [EOL] print ( fh . read ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish import Experiment [EOL] [EOL] exp = Experiment . from_json ( os . path . join ( outputdir . name , [string] ) ) [EOL] print ( exp . fovs ( ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],builtins.tuple]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Mapping[typing.Union[starfish.core.types._constants.Coordinates,builtins.str],typing.Tuple[typing.Any,...]]$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Coordinates],builtins.tuple]$ 0 0 0 0 0 $typing.Mapping[starfish.types.Axes,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[starfish.core.types._constants.Coordinates,typing.Tuple[builtins.float,builtins.float]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Dict[starfish.core.types._constants.Coordinates,typing.Tuple[builtins.float,builtins.float]]]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $starfish.experiment.builder.FetchedTile$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Dict[starfish.core.types._constants.Coordinates,typing.Tuple[builtins.float,builtins.float]]]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 $examples.data_formatting.plot_format_tilefetcher.PrimaryTileFetcher$ 0 0 0 $builtins.str$ 0 0 $examples.data_formatting.plot_format_tilefetcher.NucleiTileFetcher$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Axes],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[builtins.str,typing.Mapping[typing.Union[builtins.str,starfish.types.Axes],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Axes],builtins.int]$ 0 $typing.Mapping[typing.Union[builtins.str,starfish.types.Axes],builtins.int]$ 0 0 0 $typing.Mapping[builtins.str,typing.Mapping[typing.Union[builtins.str,starfish.types.Axes],builtins.int]]$ 0 $examples.data_formatting.plot_format_tilefetcher.PrimaryTileFetcher$ 0 $examples.data_formatting.plot_format_tilefetcher.PrimaryTileFetcher$ 0 0 0 0 0 0 $examples.data_formatting.plot_format_tilefetcher.NucleiTileFetcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0
from typing import List , Any , Tuple , Dict [EOL] import tempfile [EOL] import starfish [EOL] import csv [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import csv [EOL] import os [EOL] import numpy as np [EOL] import shutil [EOL] import skimage . io [EOL] import tempfile [EOL] [EOL] [comment] [EOL] fovs = [ [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , ] [EOL] [EOL] coordinates_of_fovs = [ { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } , { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } , ] [EOL] [EOL] data = np . zeros ( ( [number] , [number] ) , dtype = np . float32 ) [EOL] [EOL] [comment] [EOL] inputdir = tempfile . TemporaryDirectory ( ) [EOL] primary_dir = os . path . join ( inputdir . name , [string] ) [EOL] nuclei_dir = os . path . join ( inputdir . name , [string] ) [EOL] os . mkdir ( primary_dir ) [EOL] os . mkdir ( nuclei_dir ) [EOL] [EOL] for fov_id , fov in enumerate ( fovs ) : [EOL] for round_label , ch_label , zplane_label in fov : [EOL] primary_path = os . path . join ( primary_dir , f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " ) [EOL] nuclei_path = os . path . join ( nuclei_dir , f" [string] { fov_id } [string] { round_label } [string] { ch_label } [string] { zplane_label } [string] " ) [EOL] skimage . io . imsave ( primary_path , data ) [EOL] skimage . io . imsave ( nuclei_path , data ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( primary_dir , [string] ) , [string] ) as fh : [EOL] csv_writer = csv . DictWriter ( fh , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] csv_writer . writeheader ( ) [EOL] for fov_id , ( fov_info , coordinate_of_fov ) in enumerate ( zip ( fovs , coordinates_of_fovs ) ) : [EOL] for round_label , ch_label , zplane_label in fov : [EOL] tile_coordinates = coordinate_of_fov . copy ( ) [EOL] tile_coordinates . update ( { [string] : fov_id , [string] : round_label , [string] : ch_label , [string] : zplane_label , } ) [EOL] csv_writer . writerow ( tile_coordinates ) [EOL] [EOL] [comment] [EOL] shutil . copyfile ( os . path . join ( primary_dir , [string] ) , os . path . join ( nuclei_dir , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for dir in [ primary_dir , nuclei_dir ] : [EOL] print ( [string] ) [EOL] for file in sorted ( os . listdir ( dir ) ) : [EOL] print ( file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( primary_dir , [string] ) , [string] ) as fh : [EOL] print ( fh . read ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] outputdir = tempfile . TemporaryDirectory ( ) [EOL] primary_out = os . path . join ( outputdir . name , [string] ) [EOL] nuclei_out = os . path . join ( outputdir . name , [string] ) [EOL] os . makedirs ( primary_out , exist_ok = True ) [EOL] os . makedirs ( nuclei_out , exist_ok = True ) [EOL] [EOL] from slicedimage import ImageFormat [EOL] from starfish . experiment . builder import format_structured_dataset [EOL] [EOL] format_structured_dataset ( primary_dir , os . path . join ( primary_dir , [string] ) , primary_out , ImageFormat . TIFF , ) [EOL] format_structured_dataset ( nuclei_dir , os . path . join ( nuclei_dir , [string] ) , nuclei_out , ImageFormat . TIFF , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for dir in [ primary_out , nuclei_out ] : [EOL] print ( [string] ) [EOL] for file in sorted ( os . listdir ( dir ) ) : [EOL] print ( file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] with open ( os . path . join ( primary_out , [string] ) , [string] ) as fh : [EOL] contents = fh . readlines ( ) [EOL] print ( [string] ) [EOL] print ( [string] . join ( contents ) ) [EOL] contents [ [number] ] = [string] . join ( [ contents [ [number] ] . strip ( [string] ) , [string] ] ) [EOL] contents . insert ( [number] , [string] ) [comment] [EOL] fh . seek ( [number] ) [comment] [EOL] fh . writelines ( contents ) [comment] [EOL] fh . seek ( [number] ) [EOL] print ( [string] ) [EOL] print ( fh . read ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( primary_out , [string] ) , [string] ) as fh : [EOL] print ( fh . read ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from starfish import Experiment [EOL] [EOL] exp = Experiment . from_json ( os . path . join ( primary_out , [string] ) ) [EOL] print ( exp . fovs ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $csv.DictWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictWriter$ 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tempfile.TemporaryDirectory[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $starfish.core.experiment.experiment.Experiment$ 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from starfish import data , FieldOfView [EOL] from starfish . image import ApplyTransform , LearnTransform , Filter [EOL] from starfish . types import Axes , TraceBuildingStrategies [EOL] from starfish . spots import FindSpots [EOL] [EOL] experiment = data . ISS ( ) [EOL] fov = experiment . fov ( ) [EOL] imgs = fov . get_image ( FieldOfView . PRIMARY_IMAGES ) [comment] [EOL] dots = fov . get_image ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] masking_radius = [number] [EOL] filt = Filter . WhiteTophat ( masking_radius , is_volume = False ) [EOL] filt . run ( imgs , in_place = True ) [EOL] filt . run ( dots , in_place = True ) [EOL] [EOL] [comment] [EOL] learn_translation = LearnTransform . Translation ( reference_stack = dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] warp . run ( imgs , transforms_list = transforms_list , in_place = True ) [EOL] [EOL] [comment] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , measurement_type = [string] , ) [EOL] spots = bd . run ( image_stack = imgs , reference_image = dots ) [EOL] [EOL] [EOL] [comment] [EOL] from starfish . spots import DecodeSpots [EOL] decoder = DecodeSpots . MetricDistance ( codebook = experiment . codebook , max_distance = [number] , min_intensity = [number] , metric = [string] , norm_order = [number] , trace_building_strategy = TraceBuildingStrategies . EXACT_MATCH ) [EOL] decoded_intensities = decoder . run ( spots = spots ) [EOL] [EOL] [comment] [EOL] from starfish . core . spots . DecodeSpots . trace_builders import build_spot_traces_exact_match [EOL] intensities = build_spot_traces_exact_match ( spots ) [EOL] [comment] [EOL] norm_intensities , vector_magnitude = experiment . codebook . _normalize_features ( intensities , norm_order = [number] ) [EOL] [comment] [EOL] distances = decoded_intensities . to_decoded_dataframe ( ) . data [ [string] ] . to_numpy ( ) [EOL] [comment] [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] ax1 . hist ( vector_magnitude , bins = [number] ) [EOL] ax1 . set_xlabel ( [string] ) [EOL] ax1 . set_ylabel ( [string] ) [EOL] ax2 . hist ( distances , bins = [number] ) [EOL] ax2 . set_xlabel ( [string] ) [EOL] ax2 . set_ylabel ( [string] ) [EOL] f . tight_layout [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 $typing.Any$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 $starfish.core.spots.DecodeSpots.metric_decoder.MetricDistance$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.spots.DecodeSpots.metric_decoder.MetricDistance$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $starfish.core.intensity_table.intensity_table.IntensityTable$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] import starfish . data [EOL] from starfish import FieldOfView [EOL] from starfish . types import Axes [EOL] experiment = starfish . data . DARTFISH ( use_test_data = False ) [EOL] stack = experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] print ( stack ) [EOL] [EOL] [comment] [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] from starfish . util . plot import intensity_histogram [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] f , ( ax1 , ax2 ) = plt . subplots ( ncols = [number] ) [EOL] f . suptitle ( [string] ) [EOL] [EOL] [comment] [EOL] intensity_histogram ( stack , sel = { Axes . ROUND : [number] , Axes . CH : [number] } , log = True , bins = [number] , ax = ax1 , title = [string] ) [EOL] [EOL] [comment] [EOL] intensity_histogram ( stack , sel = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) , Axes . ZPLANE : [number] } , log = True , bins = [number] , ax = ax2 , title = [string] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] import starfish . data [EOL] from starfish import FieldOfView [EOL] from starfish . types import Axes [EOL] df_experiment = starfish . data . DARTFISH ( use_test_data = False ) [EOL] df_stack = df_experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] print ( df_stack ) [EOL] [EOL] [comment] [EOL] mh_c = starfish . image . Filter . MatchHistograms ( { Axes . CH } ) [EOL] scaled_c = mh_c . run ( df_stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] mh_cr = starfish . image . Filter . MatchHistograms ( { Axes . CH , Axes . ROUND } ) [EOL] scaled_cr = mh_cr . run ( df_stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] bs_experiment = starfish . data . BaristaSeq ( use_test_data = False ) [EOL] bs_stack = bs_experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] print ( bs_stack ) [EOL] [EOL] mh_z = starfish . image . Filter . MatchHistograms ( { Axes . ZPLANE } ) [EOL] scaled_z = mh_z . run ( bs_stack , in_place = False , verbose = False , n_processes = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] import matplotlib [EOL] import matplotlib . pyplot as plt [EOL] from starfish . util . plot import intensity_histogram , imshow_plane [EOL] matplotlib . rcParams [ [string] ] = [number] [EOL] f , ( ( ax1 , ax2 ) , ( ax3 , ax4 ) ) = plt . subplots ( nrows = [number] , ncols = [number] ) [EOL] f . suptitle ( [string] ) [EOL] [EOL] intensity_histogram ( bs_stack , sel = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } , log = True , bins = [number] , ax = ax1 , title = [string] ) [EOL] intensity_histogram ( bs_stack , sel = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } , log = True , bins = [number] , ax = ax2 , title = [string] ) [EOL] intensity_histogram ( scaled_z , sel = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } , log = True , bins = [number] , ax = ax3 , title = [string] ) [EOL] intensity_histogram ( scaled_z , sel = { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } , log = True , bins = [number] , ax = ax4 , title = [string] ) [EOL] f . tight_layout ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.match_histograms.MatchHistograms$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] import starfish . data [EOL] import matplotlib . pyplot as plt [EOL] from starfish . types import Axes , Levels [EOL] from starfish import FieldOfView [EOL] from starfish . image import Filter [EOL] from starfish . util . plot import imshow_plane , intensity_histogram [EOL] [EOL] bs_experiment = starfish . data . BaristaSeq ( use_test_data = False ) [EOL] stack = bs_experiment . fov ( ) . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] [comment] [EOL] def plot_intensity_histograms ( stack , r , title ) : [EOL] fig = plt . figure ( dpi = [number] ) [EOL] ax1 = fig . add_subplot ( [number] , title = [string] ) [EOL] ax2 = fig . add_subplot ( [number] , title = [string] , sharex = ax1 , sharey = ax1 ) [EOL] ax3 = fig . add_subplot ( [number] , title = [string] , sharex = ax1 , sharey = ax1 ) [EOL] intensity_histogram ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax1 ) [EOL] intensity_histogram ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax2 ) [EOL] intensity_histogram ( stack , sel = { Axes . ROUND : r , Axes . CH : [number] } , log = True , bins = [number] , ax = ax3 ) [EOL] fig . tight_layout ( ) [EOL] fig . suptitle ( title ) [EOL] [EOL] [comment] [EOL] plot_intensity_histograms ( stack = stack , r = [number] , title = [string] ) [EOL] [EOL] [comment] [EOL] bad_clipper = Filter . ClipPercentileToZero ( p_min = [number] , p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] bad_stack = bad_clipper . run ( stack ) [EOL] [EOL] [comment] [EOL] plot_intensity_histograms ( bad_stack , r = [number] , title = [string] ) [EOL] [EOL] [comment] [EOL] clipper = Filter . ClipPercentileToZero ( p_min = [number] , p_max = [number] , is_volume = True , level_method = Levels . SCALE_BY_CHUNK ) [EOL] clipper . run ( stack , in_place = True ) [EOL] [EOL] [comment] [EOL] plot_intensity_histograms ( stack , r = [number] , title = [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip_percentile_to_zero.ClipPercentileToZero$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip_percentile_to_zero.ClipPercentileToZero$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip_percentile_to_zero.ClipPercentileToZero$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip_percentile_to_zero.ClipPercentileToZero$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from starfish import FieldOfView , data [EOL] from starfish . image import Filter [EOL] from starfish . spots import DecodeSpots , FindSpots [EOL] from starfish . types import Axes , TraceBuildingStrategies [EOL] experiment = data . osmFISH ( use_test_data = True ) [EOL] imgs = experiment [ [string] ] . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] [comment] [EOL] filter_ghp = Filter . GaussianHighPass ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] filter_laplace = Filter . Laplace ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] filter_ghp . run ( imgs , in_place = True ) [EOL] filter_laplace . run ( imgs , in_place = True ) [EOL] [EOL] [comment] [EOL] max_imgs = imgs . reduce ( { Axes . ZPLANE } , func = [string] ) [EOL] [EOL] [comment] [EOL] lmp = FindSpots . LocalMaxPeakFinder ( min_distance = [number] , stringency = [number] , min_obj_area = [number] , max_obj_area = [number] , is_volume = False ) [EOL] spots = lmp . run ( max_imgs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.laplace.Laplace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.laplace.Laplace$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.local_max_peak_finder.LocalMaxPeakFinder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.local_max_peak_finder.LocalMaxPeakFinder$ 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from starfish . image import ApplyTransform , LearnTransform , Filter [EOL] from starfish . types import Axes [EOL] from starfish import data , FieldOfView [EOL] from starfish . spots import FindSpots [EOL] from starfish . util . plot import imshow_plane [EOL] experiment = data . ISS ( ) [EOL] fov = experiment . fov ( ) [EOL] imgs = fov . get_image ( FieldOfView . PRIMARY_IMAGES ) [comment] [EOL] dots = fov . get_image ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] masking_radius = [number] [EOL] filt = Filter . WhiteTophat ( masking_radius , is_volume = False ) [EOL] filt . run ( imgs , in_place = True ) [EOL] filt . run ( dots , in_place = True ) [EOL] [EOL] [comment] [EOL] learn_translation = LearnTransform . Translation ( reference_stack = dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] warp . run ( imgs , transforms_list = transforms_list , in_place = True ) [EOL] [EOL] [comment] [EOL] imshow_plane ( dots , { Axes . X : ( [number] , [number] ) , Axes . Y : ( [number] , [number] ) } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , is_volume = False , measurement_type = [string] , ) [EOL] spots = bd . run ( image_stack = imgs , reference_image = dots )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 $typing.Any$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] from starfish import data [EOL] from starfish import FieldOfView [EOL] from starfish . image import Filter [EOL] from starfish . spots import FindSpots [EOL] [EOL] experiment = data . allen_smFISH ( use_test_data = True ) [EOL] img = experiment [ [string] ] . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] [comment] [EOL] bandpass = Filter . Bandpass ( lshort = [number] , llong = [number] , threshold = [number] ) [EOL] glp = Filter . GaussianLowPass ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] clip1 = Filter . Clip ( p_min = [number] , p_max = [number] ) [EOL] clip2 = Filter . Clip ( p_min = [number] , p_max = [number] , is_volume = True ) [EOL] clip1 . run ( img , in_place = True ) [EOL] bandpass . run ( img , in_place = True ) [EOL] glp . run ( img , in_place = True ) [EOL] clip2 . run ( img , in_place = True ) [EOL] [EOL] [EOL] tlmpf = FindSpots . TrackpyLocalMaxPeakFinder ( spot_diameter = [number] , min_mass = [number] , max_size = [number] , separation = [number] , preprocess = False , percentile = [number] , verbose = True , ) [EOL] spots = tlmpf . run ( img ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.bandpass.Bandpass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.bandpass.Bandpass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] import starfish . data [EOL] from starfish import FieldOfView [EOL] from starfish . types import Levels [EOL] from starfish . image import Filter [EOL] experiment = starfish . data . allen_smFISH ( use_test_data = True ) [EOL] image = experiment [ [string] ] . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] bandpass = Filter . Bandpass ( lshort = [number] , llong = [number] , threshold = [number] ) [EOL] glp = Filter . GaussianLowPass ( sigma = ( [number] , [number] , [number] ) , is_volume = True ) [EOL] clip1 = Filter . Clip ( p_min = [number] , p_max = [number] , level_method = Levels . SCALE_BY_CHUNK ) [EOL] clip2 = Filter . Clip ( p_min = [number] , p_max = [number] , is_volume = True , level_method = Levels . SCALE_BY_CHUNK ) [EOL] tlmpf = starfish . spots . FindSpots . TrackpyLocalMaxPeakFinder ( spot_diameter = [number] , min_mass = [number] , max_size = [number] , separation = [number] , noise_size = [number] , preprocess = False , percentile = [number] , verbose = True , is_volume = True , ) [EOL] clip1 . run ( image , in_place = True ) [EOL] bandpass . run ( image , in_place = True ) [EOL] glp . run ( image , in_place = True ) [EOL] clip2 . run ( image , in_place = True ) [EOL] spots = tlmpf . run ( image ) [EOL] [EOL] [comment] [EOL] from starfish . spots import DecodeSpots [EOL] decoder = DecodeSpots . SimpleLookupDecoder ( codebook = experiment . codebook ) [EOL] decoded_intensities = decoder . run ( spots = spots )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.bandpass.Bandpass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.bandpass.Bandpass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.gaussian_low_pass.GaussianLowPass$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.clip.Clip$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 $starfish.core.spots.DecodeSpots.simple_lookup_decoder.SimpleLookupDecoder$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starfish.core.intensity_table.decoded_intensity_table.DecodedIntensityTable$ 0 $starfish.core.spots.DecodeSpots.simple_lookup_decoder.SimpleLookupDecoder$ 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0
from typing import Any [EOL] import starfish [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from starfish . image import ApplyTransform , LearnTransform , Filter [EOL] from starfish . types import Axes [EOL] from starfish import data , display , FieldOfView [EOL] from starfish . spots import FindSpots [EOL] [EOL] experiment = data . ISS ( ) [EOL] fov = experiment . fov ( ) [EOL] imgs = fov . get_image ( FieldOfView . PRIMARY_IMAGES ) [comment] [EOL] dots = fov . get_image ( [string] ) [comment] [EOL] [EOL] [comment] [EOL] masking_radius = [number] [EOL] filt = Filter . WhiteTophat ( masking_radius , is_volume = False ) [EOL] filt . run ( imgs , in_place = True ) [EOL] filt . run ( dots , in_place = True ) [EOL] [EOL] [comment] [EOL] learn_translation = LearnTransform . Translation ( reference_stack = dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] warp . run ( imgs , transforms_list = transforms_list , in_place = True ) [EOL] [EOL] [comment] [EOL] bd = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , measurement_type = [string] , ) [EOL] dots_max = dots . reduce ( ( Axes . ROUND , Axes . ZPLANE ) , func = [string] ) [EOL] spots_from_ref = bd . run ( image_stack = imgs , reference_image = dots_max ) [EOL] spots_from_stack = bd . run ( image_stack = imgs ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from starfish . core . spots . DecodeSpots . trace_builders import build_spot_traces_exact_match , build_traces_sequential , build_traces_nearest_neighbors [EOL] [EOL] print ( [string] ) [EOL] print ( build_spot_traces_exact_match ( spots_from_ref ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] print ( build_traces_sequential ( spots_from_stack ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] print ( build_traces_nearest_neighbors ( spots_from_stack , search_radius = [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] print ( build_traces_nearest_neighbors ( spots_from_ref , search_radius = [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $starfish.core.image.Filter.white_tophat.WhiteTophat$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.LearnTransform.translation.Translation$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 0 0 0 0 $starfish.core.image._registration.ApplyTransform.warp.Warp$ 0 0 0 $typing.Any$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 $starfish.core.image._registration.transforms_list.TransformsList$ 0 0 0 0 0 0 0 0 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 $starfish.core.spots.FindSpots.blob.BlobDetector$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starfish.core.types._spot_finding_results.SpotFindingResults$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Union , List , Any , Tuple , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] dir_ , _ = os . path . split ( __file__ ) [EOL] root_dir = os . path . abspath ( os . path . join ( dir_ , [string] , [string] ) ) [EOL] sys . path . insert ( [number] , root_dir ) [EOL] [EOL] [comment] [EOL] import matplotlib [EOL] matplotlib . use ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , } [EOL] [EOL] [comment] [EOL] numpydoc_class_members_toctree = False [EOL] numpydoc_show_inherited_class_members = False [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] from sphinx_gallery . sorting import ExplicitOrder [EOL] sphinx_gallery_conf = { [string] : [ [string] , ] , [string] : ExplicitOrder ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) , [string] : [string] , [string] : [string] , [string] : ( [string] , [string] ) , [string] : [string] , [string] : False , [string] : f'{ dir_ } [string] ' , [string] : [number] , } [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] import sphinx_bootstrap_theme [EOL] html_theme_path = sphinx_bootstrap_theme . get_html_theme_path ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] html_favicon = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] def setup ( app ) : [EOL] app . add_stylesheet ( [string] ) [EOL] [EOL] html_theme_options = { [string] : [string] , [string] : [string] , [string] : [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , [string] : False , [string] : False , [string] : [string] , [string] : - [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_logo = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_sidebars = { [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] napoleon_google_docstring = True [EOL] napoleon_numpy_docstring = True [EOL] napoleon_include_init_with_doc = False [EOL] napoleon_include_private_with_doc = False [EOL] napoleon_include_special_with_doc = True [EOL] napoleon_use_admonition_for_examples = False [EOL] napoleon_use_admonition_for_notes = False [EOL] napoleon_use_admonition_for_references = False [EOL] napoleon_use_ivar = False [EOL] napoleon_use_param = True [EOL] napoleon_use_rtype = True [EOL] [EOL] [comment] [EOL] autodoc_mock_imports = [ [string] ] [EOL] [EOL] rst_epilog = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Tuple[builtins.str,builtins.str]],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] import starfish [EOL] from starfish import FieldOfView [EOL] from starfish . image import Filter [EOL] from starfish . image import ApplyTransform , LearnTransform [EOL] from starfish . spots import FindSpots , DecodeSpots [EOL] from starfish . types import Axes , FunctionSource [EOL] [EOL] [EOL] def process_fov ( field_num , experiment_str ) : [EOL] [docstring] [EOL] [EOL] fov_str = f" [string] { int ( field_num ) : [string] }" [EOL] [EOL] [comment] [EOL] experiment = starfish . Experiment . from_json ( experiment_str ) [EOL] [EOL] print ( f" [string] { fov_str }" ) [EOL] fov = experiment [ fov_str ] [EOL] [EOL] [comment] [EOL] imgs = fov . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] dots = fov . get_image ( [string] ) [EOL] nuclei = fov . get_image ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] learn_translation = LearnTransform . Translation ( reference_stack = dots , axes = Axes . ROUND , upsampling = [number] ) [EOL] transforms_list = learn_translation . run ( imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) ) [EOL] [EOL] print ( [string] ) [EOL] warp = ApplyTransform . Warp ( ) [EOL] registered_imgs = warp . run ( imgs , transforms_list = transforms_list , in_place = True , verbose = True ) [EOL] [EOL] print ( [string] ) [EOL] filt = Filter . WhiteTophat ( masking_radius = [number] , is_volume = False ) [EOL] [EOL] filtered_imgs = filt . run ( registered_imgs , verbose = True , in_place = True ) [EOL] filt . run ( dots , verbose = True , in_place = True ) [EOL] filt . run ( nuclei , verbose = True , in_place = True ) [EOL] [EOL] print ( [string] ) [EOL] detector = FindSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = [number] , measurement_type = [string] , ) [EOL] dots_max_projector = Filter . Reduce ( ( Axes . ROUND , Axes . ZPLANE ) , func = FunctionSource . np ( [string] ) ) [EOL] dots_max = dots_max_projector . run ( dots ) [EOL] [EOL] spots = detector . run ( image_stack = filtered_imgs , reference_image = dots_max ) [EOL] [EOL] decoder = DecodeSpots . PerRoundMaxChannel ( codebook = experiment . codebook ) [EOL] decoded = decoder . run ( spots = spots ) [EOL] df = decoded . to_decoded_dataframe ( ) [EOL] return df [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] from copy import deepcopy [EOL] [EOL] import starfish [EOL] from starfish import FieldOfView [EOL] from starfish . types import Features , Axes [EOL] from starfish . image import Filter [EOL] from starfish . types import Levels [EOL] from starfish . spots import DetectPixels [EOL] [EOL] [EOL] def process_fov ( field_num , experiment_str ) : [EOL] [docstring] [EOL] fov_str = f" [string] { int ( field_num ) : [string] }" [EOL] [comment] [EOL] experiment = starfish . Experiment . from_json ( experiment_str ) [EOL] [EOL] print ( f" [string] { fov_str }" ) [EOL] fov = experiment [ fov_str ] [EOL] imgs = fov . get_image ( FieldOfView . PRIMARY_IMAGES ) [EOL] [EOL] print ( [string] ) [EOL] ghp = Filter . GaussianHighPass ( sigma = [number] ) [EOL] high_passed = ghp . run ( imgs , verbose = True , in_place = False ) [EOL] [EOL] print ( [string] ) [EOL] dpsf = Filter . DeconvolvePSF ( num_iter = [number] , sigma = [number] , level_method = Levels . SCALE_SATURATED_BY_CHUNK ) [EOL] deconvolved = dpsf . run ( high_passed , verbose = True , in_place = False ) [EOL] [EOL] print ( [string] ) [EOL] glp = Filter . GaussianLowPass ( sigma = [number] ) [EOL] low_passed = glp . run ( deconvolved , in_place = False , verbose = True ) [EOL] [EOL] scale_factors = { ( t [ Axes . ROUND ] , t [ Axes . CH ] ) : t [ [string] ] for t in experiment . extras [ [string] ] } [EOL] filtered_imgs = deepcopy ( low_passed ) [EOL] [EOL] for selector in imgs . _iter_axes ( ) : [EOL] data = filtered_imgs . get_slice ( selector ) [ [number] ] [EOL] scaled = data / scale_factors [ selector [ Axes . ROUND . value ] , selector [ Axes . CH . value ] ] [EOL] filtered_imgs . set_slice ( selector , scaled , [ Axes . ZPLANE ] ) [EOL] [EOL] print ( [string] ) [EOL] psd = DetectPixels . PixelSpotDecoder ( codebook = experiment . codebook , metric = [string] , norm_order = [number] , distance_threshold = [number] , magnitude_threshold = [number] , min_area = [number] , max_area = np . inf , ) [EOL] [EOL] initial_spot_intensities , prop_results = psd . run ( filtered_imgs ) [EOL] [EOL] spot_intensities = initial_spot_intensities . loc [ initial_spot_intensities [ Features . PASSES_THRESHOLDS ] ] [EOL] df = spot_intensities . to_decoded_spots ( ) [EOL] return df [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import starfish [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] import starfish [EOL] from starfish . types import Axes [EOL] [EOL] [EOL] def process_fov ( field_num , experiment_str ) : [EOL] [docstring] [EOL] fov_str = f" [string] { int ( field_num ) : [string] }" [EOL] [EOL] [comment] [EOL] experiment = starfish . Experiment . from_json ( experiment_str ) [EOL] [EOL] fov = experiment [ fov_str ] [EOL] imgs = fov . get_image ( starfish . FieldOfView . PRIMARY_IMAGES ) [EOL] dots = imgs . reduce ( { Axes . CH , Axes . ZPLANE } , func = [string] ) [EOL] [EOL] [comment] [EOL] filt = starfish . image . Filter . WhiteTophat ( masking_radius = [number] , is_volume = False ) [EOL] filtered_imgs = filt . run ( imgs , verbose = True , in_place = False ) [EOL] filt . run ( dots , verbose = True , in_place = True ) [EOL] [EOL] [comment] [EOL] tmp = dots . sel ( { Axes . ROUND : [number] , Axes . CH : [number] , Axes . ZPLANE : [number] } ) [EOL] dots_threshold = np . percentile ( np . ravel ( tmp . xarray . values ) , [number] ) [EOL] [EOL] [comment] [EOL] p = starfish . spots . DetectSpots . BlobDetector ( min_sigma = [number] , max_sigma = [number] , num_sigma = [number] , threshold = dots_threshold , measurement_type = [string] , ) [EOL] [EOL] [comment] [EOL] intensities = p . run ( filtered_imgs , blobs_image = dots , blobs_axes = ( Axes . ROUND , Axes . ZPLANE ) ) [EOL] [EOL] [comment] [EOL] decoded = experiment . codebook . decode_per_round_max ( intensities ) [EOL] [EOL] [comment] [EOL] df = decoded . to_decoded_dataframe ( ) [EOL] return df [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0