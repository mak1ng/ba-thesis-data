from typing import Generator , Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import Iterator , NamedTuple [EOL] [EOL] from tia . cov import ( TestName , TestNames , FilePath , FilePaths , ) [EOL] [EOL] from functional import seq [EOL] from functional . pipeline import Sequence [EOL] [EOL] [EOL] class CoverageMapSingle ( NamedTuple ) : [EOL] [docstring] [EOL] test = ... [EOL] production_code = ... [EOL] [EOL] [EOL] CoverageMap = Sequence [comment] [EOL] [docstring] [EOL] [EOL] [EOL] class ImpactMapSingle ( NamedTuple ) : [EOL] [docstring] [EOL] production_code = ... [EOL] tests = ... [EOL] [EOL] [EOL] ImpactMap = Sequence [comment] [EOL] [EOL] [EOL] def get_coverage_map ( context_table_rows , line_table_rows , file_table_rows , tests ) : [EOL] [docstring] [EOL] coverage_map = [ ] [comment] [EOL] [comment] [EOL] context_table_rows . cache ( ) [EOL] line_table_rows . cache ( ) [EOL] file_table_rows . cache ( ) [EOL] for test_name in tests : [EOL] [comment] [EOL] test = context_table_rows . filter ( lambda x : test_name in x . context ) [comment] [EOL] test_id = test . head ( ) . context_id [EOL] covered_lines_rows = line_table_rows . filter ( lambda x : x . context_id == test_id ) [EOL] file_ids = ( l . file_id for l in covered_lines_rows ) [EOL] file_paths = set ( ) [EOL] for file_id in file_ids : [EOL] covered_file_rows = file_table_rows . filter ( lambda x : x . file_id == file_id ) [EOL] file_path = covered_file_rows . head ( ) . path [EOL] file_paths . add ( file_path ) [EOL] coverage_map . append ( CoverageMapSingle ( test_name , seq ( file_paths ) ) ) [EOL] del file_paths [comment] [EOL] return seq ( coverage_map ) [EOL] del coverage_map [comment] [EOL] [EOL] [EOL] def get_impact_map ( file_table_rows , line_table_rows , context_table_rows , file_paths ) : [EOL] [docstring] [EOL] impact_map = [ ] [comment] [EOL] [comment] [EOL] file_table_rows . cache ( ) [EOL] line_table_rows . cache ( ) [EOL] context_table_rows . cache ( ) [EOL] for file_path in file_paths : [EOL] [comment] [EOL] file = file_table_rows . filter ( lambda x : file_path in x . path ) [comment] [EOL] file_id = file . head ( ) . file_id [EOL] impacted_lines_rows = line_table_rows . filter ( lambda x : x . file_id == file_id ) [EOL] test_ids = ( l . context_id for l in impacted_lines_rows ) [EOL] tests = set ( ) [EOL] for test_id in test_ids : [EOL] impacted_context_rows = context_table_rows . filter ( lambda x : x . context_id == test_id ) [EOL] test = impacted_context_rows . head ( ) . context [EOL] [comment] [EOL] if test is not [string] or not [string] : [EOL] tests . add ( test ) [EOL] filter ( None , tests ) [comment] [EOL] impact_map . append ( ImpactMapSingle ( file_path , seq ( tests ) ) ) [EOL] del tests [comment] [EOL] return seq ( impact_map ) [EOL] del impact_map [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tia.cov.TestName$ 0 0 0 $tia.cov.FilePath.s$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tia.cov.FilePath$ 0 0 0 $tia.cov.TestNames$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List , Union , Iterator , Tuple , Generator [EOL] import typing [EOL] import strictyaml [EOL] import builtins [EOL] import pathlib [EOL] import tia [EOL] from pathlib import Path [EOL] [EOL] from glob import iglob [EOL] from strictyaml import YAML , Any , Bool , Enum , Map , Optional , Seq , Str , load [EOL] from strictyaml . exceptions import YAMLValidationError [EOL] from typing import Iterator , NamedTuple , Tuple , Generator , Union [EOL] [EOL] from tia . cov import FilePath [comment] [EOL] [EOL] CONFIG_FILE_NAME = [string] [EOL] [EOL] DirectoryPath = str [EOL] [EOL] [EOL] class FileConfig ( NamedTuple ) : [EOL] path = ... [EOL] full_scope = ... [EOL] [EOL] [EOL] class DirConfig ( NamedTuple ) : [EOL] path = ... [EOL] full_scope = ... [EOL] [EOL] [EOL] class AnalyzerPipelineConfig ( NamedTuple ) : [EOL] name = ... [EOL] dirs = ... [EOL] files = ... [EOL] full_scope_command = ... [EOL] partial_scope_command = ... [EOL] [EOL] [EOL] class AnalyzerPipelineConfigExpanded ( NamedTuple ) : [EOL] name = ... [EOL] files = ... [EOL] full_scope_command = ... [EOL] partial_scope_command = ... [EOL] [EOL] [EOL] [comment] [EOL] class PipelineConfig ( NamedTuple ) : [EOL] name = ... [EOL] coverage_db = ... [EOL] dirs = ... [EOL] files = ... [EOL] full_scope_command = ... [EOL] partial_scope_command = ... [EOL] [EOL] [EOL] class PipelineConfigExpanded ( NamedTuple ) : [EOL] name = ... [EOL] coverage_db = ... [EOL] files = ... [EOL] full_scope_command = ... [EOL] partial_scope_command = ... [EOL] [EOL] [EOL] class ConfigError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def read_file ( file_path ) : [EOL] [docstring] [EOL] config_file = Path ( file_path ) [EOL] if not config_file . is_file ( ) : [EOL] raise FileNotFoundError ( [string] . format ( name = config_file . name ) ) [EOL] if config_file . name != CONFIG_FILE_NAME : [EOL] raise ConfigError ( [string] . format ( name = config_file . name ) ) [EOL] return config_file . read_text ( ) [EOL] [EOL] [EOL] def read_and_validate_config ( strictyaml_config ) : [EOL] config_schema = Map ( { [string] : Any ( ) } ) [EOL] return load ( strictyaml_config , config_schema ) [EOL] [EOL] [EOL] def is_pipelines_config_valid ( strictyaml_pipelines ) : [EOL] [docstring] [EOL] pipelines_schema = Map ( { [string] : Seq ( Map ( { [string] : Str ( ) , [string] : Enum ( [ [string] , [string] ] ) , Optional ( [string] ) : Str ( ) , Optional ( [string] ) : Map ( { [string] : Str ( ) , [string] : Str ( ) } ) , Optional ( [string] ) : Seq ( Map ( { [string] : Str ( ) , Optional ( [string] , default = False ) : Bool ( ) } ) ) , Optional ( [string] ) : Seq ( Map ( { [string] : Str ( ) , Optional ( [string] , default = False ) : Bool ( ) } ) ) } ) ) } ) [EOL] try : [EOL] strictyaml_pipelines . revalidate ( pipelines_schema ) [EOL] return True [EOL] except YAMLValidationError : [EOL] return False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def expand_directory ( dir ) : [EOL] [docstring] [EOL] pattern = dir + [string] [EOL] for path in iglob ( pattern , recursive = True ) : [EOL] if path : [EOL] yield path [EOL] [EOL] [EOL] def get_pipeline_configs ( strictyaml_config ) : [EOL] pipelines = strictyaml_config [ [string] ] [EOL] for p in pipelines : [EOL] name = p [ [string] ] . value [EOL] full_scope_command = p [ [string] ] [ [string] ] . value [EOL] partial_scope_command = p [ [string] ] [ [string] ] . value [EOL] try : [EOL] directories = [ DirConfig ( d [ [string] ] . value , d [ [string] ] . value ) for d in p [ [string] ] ] [EOL] directories_immutable = tuple ( directories ) [EOL] except : [EOL] pass [comment] [EOL] try : [EOL] files = [ FileConfig ( d [ [string] ] . value , d [ [string] ] . value ) for d in p [ [string] ] ] [EOL] files_immutable = tuple ( files ) [EOL] except : [EOL] pass [comment] [EOL] if p [ [string] ] . value == [string] : [EOL] coverage_db = p [ [string] ] . value [EOL] pipeline_config = PipelineConfig ( name = name , coverage_db = coverage_db , dirs = directories_immutable , files = files_immutable , full_scope_command = full_scope_command , partial_scope_command = partial_scope_command ) [EOL] else : [comment] [EOL] pipeline_config = AnalyzerPipelineConfig ( name = name , dirs = directories_immutable , files = files_immutable , full_scope_command = full_scope_command , partial_scope_command = partial_scope_command ) [EOL] yield pipeline_config [EOL] [EOL] [EOL] [comment] [EOL] def expand_pipeline_config ( pipeline_config ) : [EOL] expanded_file_configs = [ ] [EOL] for d in pipeline_config . dirs : [EOL] file_paths = expand_directory ( d . path ) [EOL] for file_path in file_paths : [EOL] file_config = FileConfig ( file_path , d . full_scope ) [EOL] expanded_file_configs . append ( file_config ) [EOL] [comment] [EOL] file_configs = [ fc for fc in pipeline_config . files ] [EOL] file_configs . extend ( expanded_file_configs ) [EOL] file_config_generator = ( f for f in file_configs ) [EOL] if type ( pipeline_config ) is PipelineConfig : [EOL] expanded_config = PipelineConfigExpanded ( name = pipeline_config . name , coverage_db = pipeline_config . coverage_db , files = file_config_generator , full_scope_command = pipeline_config . full_scope_command , partial_scope_command = pipeline_config . partial_scope_command ) [EOL] elif type ( pipeline_config ) is AnalyzerPipelineConfig : [EOL] expanded_config = AnalyzerPipelineConfigExpanded ( name = pipeline_config . name , files = file_config_generator , full_scope_command = pipeline_config . full_scope_command , partial_scope_command = pipeline_config . partial_scope_command ) [EOL] else : [EOL] ConfigError ( [string] ) [EOL] return expanded_config [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[DirConfig,...]$ 0 0 0 $typing.Tuple[FileConfig,...]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Iterator[FileConfig]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[DirConfig,...]$ 0 0 0 $typing.Tuple[FileConfig,...]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Iterator[FileConfig]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[AnalyzerPipelineConfigExpanded,PipelineConfigExpanded]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] from enum import IntEnum [EOL] from pathlib import Path [EOL] from sys import stderr [EOL] import pprint [EOL] [EOL] import click [EOL] [EOL] from tia . cov import get_context_table , get_file_table , get_line_table [EOL] from tia . maps import get_coverage_map , get_impact_map [EOL] [EOL] [EOL] class ExitCode ( IntEnum ) : [EOL] ok = [number] [EOL] not_ok = [number] [EOL] [EOL] [EOL] @ click . group ( ) @ click . option ( [string] , [string] , is_flag = True , help = [string] ) @ click . option ( [string] , [string] , type = click . Path ( resolve_path = True ) , default = [string] , help = [string] , ) @ click . version_option ( ) @ click . pass_context def cli ( ctx , verbose , config_file ) : [EOL] ctx . obj = { [string] : verbose , } [EOL] if verbose : [EOL] print ( [string] . format ( click . format_filename ( config_file ) ) ) [EOL] config_file_path = Path ( config_file ) [EOL] [comment] [EOL] if not config_file_path . is_file ( ) : [EOL] click . echo ( [string] . format ( config_file_path ) , err = True ) [EOL] exit ( ExitCode . not_ok ) [EOL] if config_file_path . suffix not in [ [string] , [string] ] : [EOL] print ( [string] . format ( config_file_path ) ) [EOL] exit ( ExitCode . not_ok ) [EOL] [EOL] [EOL] @ cli . command ( help = [string] ) @ click . argument ( [string] , nargs = - [number] , required = False , type = click . Path ( resolve_path = False ) , default = None ) @ click . option ( [string] , [string] , type = click . Path ( resolve_path = True ) , default = [string] , help = [string] ) @ click . pass_context def impact ( ctx , files , coverage_database ) : [EOL] import pprint [EOL] verbose = ctx . obj [ [string] ] [comment] [EOL] if verbose : [EOL] if files : [EOL] print ( [string] ) [EOL] pprint . pprint ( files ) [EOL] print ( [string] ) [EOL] print ( coverage_database ) [EOL] coverage_database_path = Path ( coverage_database ) [EOL] if not coverage_database_path . is_file ( ) : [EOL] print ( [string] . format ( coverage_database_path ) , file = stderr ) [EOL] exit ( ExitCode . not_ok ) [EOL] [comment] [EOL] file_table = get_file_table ( coverage_database ) [EOL] line_table = get_line_table ( coverage_database ) [EOL] context_table = get_context_table ( coverage_database ) [EOL] impact_map = get_impact_map ( file_table , line_table , context_table , iter ( files ) ) [EOL] if verbose : [EOL] [comment] [EOL] print ( [string] ) [EOL] pprint . pprint ( impact_map ) [EOL] exit ( ExitCode . ok ) [EOL] else : [EOL] tests = impact_map . map ( lambda x : x . tests ) . flatten ( ) . sorted ( ) [EOL] print ( tests ) [EOL] exit ( ExitCode . ok ) [EOL] [EOL] [EOL] @ cli . command ( help = [string] ) @ click . argument ( [string] , nargs = - [number] , required = False , type = click . Path ( resolve_path = False ) , default = None ) @ click . option ( [string] , [string] , type = click . Path ( resolve_path = True ) , help = [string] ) @ click . pass_context def coverage ( ctx , tests , coverage_database ) : [EOL] verbose = ctx . obj [ [string] ] [comment] [EOL] if verbose : [EOL] if tests : [EOL] print ( [string] ) [EOL] pprint . pprint ( tests ) [EOL] print ( [string] ) [EOL] print ( coverage_database ) [EOL] coverage_database_path = Path ( coverage_database ) [EOL] if not coverage_database_path . is_file ( ) : [EOL] print ( [string] . format ( coverage_database_path ) , file = stderr ) [EOL] exit ( ExitCode . not_ok ) [EOL] [comment] [EOL] file_table = get_file_table ( coverage_database ) [EOL] line_table = get_line_table ( coverage_database ) [EOL] context_table = get_context_table ( coverage_database ) [EOL] coverage_map = get_coverage_map ( context_table , line_table , file_table , iter ( tests ) ) [EOL] if verbose : [EOL] print ( [string] ) [EOL] pprint . pprint ( coverage_map ) [EOL] exit ( ExitCode . ok ) [EOL] else : [EOL] production_code_files = coverage_map . map ( lambda x : x . production_code ) . flatten ( ) . sorted ( ) [EOL] print ( production_code_files ) [EOL] exit ( ExitCode . ok ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from functional import seq [EOL] from typing import Iterator , NamedTuple [EOL] [EOL] from functional . pipeline import Sequence [EOL] [EOL] Id = int [EOL] Ids = Sequence [comment] [EOL] [EOL] TestReference = str [EOL] Line = int [EOL] Lines = Sequence [comment] [EOL] [EOL] FilePath = str [EOL] FilePaths = Sequence [comment] [EOL] [EOL] TestName = str [EOL] TestNames = Sequence [comment] [EOL] [EOL] [EOL] class FileTableRow ( NamedTuple ) : [comment] [EOL] file_id = ... [EOL] path = ... [EOL] [EOL] [EOL] FileTable = Sequence [EOL] [EOL] [EOL] class ContextTableRow ( NamedTuple ) : [comment] [EOL] context_id = ... [EOL] context = ... [EOL] [EOL] [EOL] ContextTable = Sequence [EOL] [EOL] [EOL] class LineTableRow ( NamedTuple ) : [comment] [EOL] file_id = ... [EOL] context_id = ... [EOL] lineno = ... [EOL] [EOL] [EOL] LineTable = Sequence [EOL] [EOL] [EOL] def get_file_table ( db_path ) : [EOL] file_table_rows = seq . sqlite3 ( db_path , [string] ) . map ( lambda x : FileTableRow ( * x ) ) [EOL] return file_table_rows [EOL] [EOL] [EOL] def get_context_table ( db_path ) : [EOL] context_table_rows = seq . sqlite3 ( db_path , [string] ) . map ( lambda x : ContextTableRow ( * x ) ) [EOL] return context_table_rows [EOL] [EOL] [EOL] def get_line_table ( db_path ) : [EOL] line_table_rows = seq . sqlite3 ( db_path , [string] ) . map ( lambda x : LineTableRow ( * x ) ) [EOL] return line_table_rows [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Id$ 0 0 0 $FilePath$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Id$ 0 0 0 $TestReference$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Id$ 0 0 0 $Id$ 0 0 0 $Line$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Type , Any , Set [EOL] import typing [EOL] import git [EOL] [docstring] [EOL] [EOL] from git import Repo [EOL] [EOL] from typing import Iterator [EOL] [EOL] ChangedFile = str [EOL] ChangedFiles = Iterator [ ChangedFile ] [EOL] [EOL] [EOL] def get_repo ( path = [string] ) : [EOL] repo = Repo ( path ) [EOL] return repo [EOL] [EOL] [EOL] def get_untracked_files ( repo ) : [EOL] [docstring] [EOL] for f in repo . untracked_files : [EOL] yield f [EOL] [EOL] [EOL] def get_changed_staged_files ( repo ) : [EOL] [docstring] [EOL] hcommit = repo . head . commit [EOL] changes = hcommit . diff ( ) [EOL] [comment] [EOL] files = set ( ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in files : [EOL] yield f [EOL] del files [comment] [EOL] [EOL] [EOL] def get_changed_unstaged_files ( repo ) : [EOL] [docstring] [EOL] changes = repo . index . diff ( None ) [EOL] [comment] [EOL] files = set ( ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in files : [EOL] yield f [EOL] del files [comment] [EOL] [EOL] [EOL] def get_changed_files_non_ci ( repo ) : [EOL] [docstring] [EOL] unstaged_files = changed_unstaged_files ( repo ) [EOL] staged_files = changed_staged_files ( repo ) [EOL] yield from unstaged_files [EOL] yield from staged_files [EOL] [EOL] [EOL] def get_changed_files_ci ( repo ) : [EOL] [docstring] [EOL] hcommit = repo . head . commit [EOL] changes = hcommit . diff ( [string] ) [EOL] [comment] [EOL] files = set ( ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in changes . iter_change_type ( [string] ) : [EOL] files . add ( f . b_path ) [EOL] for f in files : [EOL] yield f [EOL] del files [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChangedFiles$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from os import getenv [EOL] [EOL] [EOL] def is_ci ( ) : [EOL] [comment] [EOL] if ( _is_appveyor_ci ( ) or _is_azure_ci ( ) or _is_circle_ci ( ) or _is_drone_ci ( ) or _is_gitlab_ci ( ) or _is_jenkins_ci ( ) or _is_scrutinizer_ci ( ) or _is_semaphore_ci ( ) or _is_shippable_ci ( ) or _is_travis_ci ( ) ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def _is_appveyor_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_azure_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_circle_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_drone_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_gitlab_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_jenkins_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_scrutinizer_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_semaphore_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_shippable_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_travis_ci ( ) : [EOL] [comment] [EOL] [comment] [EOL] ci_env_var = [string] [EOL] return _is_env_set ( ci_env_var ) [EOL] [EOL] [EOL] def _is_env_set ( env_var ) : [EOL] if getenv ( env_var , default = None ) is not None : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import typing [EOL] import click [EOL] import click [EOL] import pytest [EOL] from click . testing import CliRunner [EOL] [EOL] from tia . cli import ExitCode , cli [EOL] [EOL] pytestmark = [ pytest . mark . cli , pytest . mark . integration ] [EOL] [EOL] [EOL] def test_config_file_existing_and_valid_file_extension ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] assert [string] and [string] in result . output [EOL] assert result . exit_code == ExitCode . ok [EOL] [EOL] [EOL] def test_config_file_nonexisting ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert result . exit_code == ExitCode . not_ok [EOL] [EOL] [EOL] def test_config_file_invalid ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] assert result . exit_code == ExitCode . not_ok [EOL] [EOL] [EOL] def test_database_file_existing_and_valid_sqlite3_file ( ) : [EOL] runner = CliRunner ( ) [EOL] [comment] [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert [string] and [string] in result . output [EOL] assert result . exit_code == ExitCode . ok [EOL] [EOL] [EOL] def test_database_file_nonexisting ( ) : [EOL] runner = CliRunner ( ) [EOL] [comment] [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] assert result . exit_code == ExitCode . not_ok [EOL] [EOL] [EOL] def test_impact_single_file ( ) : [EOL] runner = CliRunner ( ) [EOL] [comment] [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert [string] in result . output [EOL] [EOL] [EOL] def test_impact_several_files ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert [string] in result . output [EOL] assert result . exit_code == ExitCode . ok [EOL] [EOL] [EOL] def test_coverage_single_file ( ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert [string] in result . output [EOL] assert result . exit_code == ExitCode . ok [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] [EOL] from tia . cov import get_context_table , get_file_table , get_line_table [EOL] from tia . maps import get_coverage_map , get_impact_map [EOL] [EOL] pytestmark = pytest . mark . integration [EOL] [EOL] [EOL] class TestCoverageMap : [EOL] def test_get_production_files_from_changed_test_files ( self ) : [EOL] db_path = [string] [EOL] changed_tests = [ [string] , [string] ] [EOL] file_table = get_file_table ( db_path ) [EOL] line_table = get_line_table ( db_path ) [EOL] context_table = get_context_table ( db_path ) [EOL] coverage_map = get_coverage_map ( context_table , line_table , file_table , changed_tests ) [EOL] first_coverage_mapping = coverage_map . first ( ) [EOL] assert first_coverage_mapping . test == [string] [EOL] assert first_coverage_mapping . production_code == [ [string] ] [EOL] last_coverage_mapping = coverage_map . last ( ) [EOL] assert last_coverage_mapping . test == [string] [EOL] assert last_coverage_mapping . production_code == [ [string] ] [EOL] [EOL] [EOL] class TestImpactMap : [EOL] def test_get_tests_impacted_by_changed_production_code_files ( self ) : [EOL] db_path = [string] [EOL] changed_production_code_files = [ [string] , [string] ] [EOL] file_table = get_file_table ( db_path ) [EOL] line_table = get_line_table ( db_path ) [EOL] context_table = get_context_table ( db_path ) [EOL] impact_map = get_impact_map ( file_table , line_table , context_table , changed_production_code_files ) [EOL] [EOL] first_impact_mapping = impact_map . first ( ) [EOL] assert first_impact_mapping . production_code == [string] [EOL] assert sorted ( first_impact_mapping . tests ) == sorted ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] last_impact_mapping = impact_map . last ( ) [EOL] assert last_impact_mapping . production_code == [string] [EOL] assert sorted ( last_impact_mapping . tests ) == sorted ( [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , List [EOL] import typing [EOL] import tia [EOL] import pytest [EOL] [EOL] from tia . cov import ( ContextTableRow , FileTableRow , LineTableRow , get_context_table , get_file_table , get_line_table , ) [EOL] [EOL] pytestmark = [ pytest . mark . coveragepy , pytest . mark . unit ] [EOL] [EOL] [comment] [EOL] context_table_rows = [ ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ContextTableRow ( context_id = [number] , context = [string] ) , ] [EOL] [EOL] [comment] [EOL] file_table_rows = [ FileTableRow ( file_id = [number] , path = [string] ) , FileTableRow ( file_id = [number] , path = [string] ) , FileTableRow ( file_id = [number] , path = [string] ) , ] [EOL] [EOL] [comment] [EOL] line_table_rows = [ LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , LineTableRow ( file_id = [number] , context_id = [number] , lineno = [number] ) , ] [EOL] [EOL] [EOL] class TestContextTable : [EOL] def test_get_table ( self ) : [EOL] db_path = [string] [EOL] table_rows_iterator = get_context_table ( db_path ) [EOL] table_rows = list ( table_rows_iterator ) [EOL] assert table_rows == context_table_rows [EOL] [EOL] [EOL] class TestFileTable : [EOL] def test_get_table ( self ) : [EOL] db_path = [string] [EOL] table_rows_iterator = get_file_table ( db_path ) [EOL] table_rows = list ( table_rows_iterator ) [EOL] assert table_rows == file_table_rows [EOL] [EOL] [EOL] class TestLineTable : [EOL] def test_get_table ( self ) : [EOL] db_path = [string] [EOL] table_rows_iterator = get_line_table ( db_path ) [EOL] table_rows = list ( table_rows_iterator ) [EOL] assert table_rows == line_table_rows [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tia.cov.ContextTableRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tia.cov.FileTableRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tia.cov.LineTableRowbuiltins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[tia.cov.ContextTableRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[tia.cov.FileTableRow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[tia.cov.LineTableRow]$ 0
import builtins [EOL] from typing import Union , Any , Tuple , List [EOL] import typing [EOL] import tia [EOL] from collections import OrderedDict [EOL] [EOL] import pytest [EOL] from pytest import raises [EOL] from strictyaml import YAML [EOL] [EOL] from tia . config import ( CONFIG_FILE_NAME , ConfigError , expand_directory , is_pipelines_config_valid , read_and_validate_config , read_file , get_pipeline_configs , AnalyzerPipelineConfig , PipelineConfig , AnalyzerPipelineConfigExpanded , PipelineConfigExpanded , FileConfig , DirConfig , expand_pipeline_config , ) [EOL] [EOL] pytestmark = [ pytest . mark . unit , pytest . mark . configuration ] [EOL] [EOL] [EOL] def test_reading_existing_valid_config_file_returns_string ( tmpdir ) : [EOL] cf = tmpdir . mkdir ( [string] ) . join ( CONFIG_FILE_NAME ) [EOL] expected_str = [string] [EOL] cf . write ( expected_str ) [EOL] file_path = str ( cf ) [EOL] assert read_file ( file_path ) == expected_str [EOL] [EOL] [EOL] def test_reading_existing_invalid_config_file_raises_error ( tmpdir ) : [EOL] invalid_config_file = [string] [EOL] cf = tmpdir . mkdir ( [string] ) . join ( invalid_config_file ) [EOL] file_content = [string] [EOL] cf . write ( file_content ) [comment] [EOL] file_path = str ( cf ) [EOL] expected_str = [string] [EOL] with raises ( ConfigError ) : [EOL] assert read_file ( file_path ) == expected_str [EOL] [EOL] [EOL] def test_reading_non_existing_config_file_raises_exception ( ) : [EOL] file_path = [string] + CONFIG_FILE_NAME [EOL] expected_str = [string] [EOL] with raises ( FileNotFoundError ) : [EOL] assert read_file ( file_path ) == expected_str [EOL] [EOL] [EOL] def test_read_valid_parent_key_config ( ) : [EOL] yaml_config = [string] [EOL] assert read_and_validate_config ( yaml_config ) == YAML ( OrderedDict ( [ ( [string] , [string] ) ] ) ) [EOL] [EOL] [EOL] def test_read_valid_explicit_full_blown_pipelines_config ( ) : [EOL] yaml_pipelines_config = [string] [EOL] yaml_pipelines = read_and_validate_config ( yaml_pipelines_config ) [EOL] expected_yaml_instance = YAML ( OrderedDict ( [ ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) , ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) , ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) ] ) ] ) ] ) ] ) ) [EOL] assert is_pipelines_config_valid ( yaml_pipelines ) == True [EOL] assert yaml_pipelines == expected_yaml_instance [EOL] [EOL] [EOL] def test_read_valid_implicit_full_blown_pipelines_config ( ) : [EOL] yaml_pipelines_config = [string] [EOL] yaml_pipelines = read_and_validate_config ( yaml_pipelines_config ) [EOL] expected_yaml_instance = YAML ( OrderedDict ( [ ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) ] ) ] ) ] ) ] ) ) [EOL] assert is_pipelines_config_valid ( yaml_pipelines ) == True [EOL] assert yaml_pipelines == expected_yaml_instance [EOL] [EOL] [EOL] def test_read_valid_single_pipeline_with_dirs_only_config ( ) : [EOL] yaml_pipelines_config = [string] [EOL] yaml_pipelines = read_and_validate_config ( yaml_pipelines_config ) [EOL] expected_yaml_instance = YAML ( OrderedDict ( [ ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) ] ) ] ) ] ) ) [EOL] assert is_pipelines_config_valid ( yaml_pipelines ) == True [EOL] assert yaml_pipelines == expected_yaml_instance [EOL] [EOL] [EOL] def test_read_valid_single_pipeline_with_files_only_config ( ) : [EOL] yaml_pipelines_config = [string] [EOL] yaml_pipelines = read_and_validate_config ( yaml_pipelines_config ) [EOL] expected_yaml_instance = YAML ( OrderedDict ( [ ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [ OrderedDict ( [ ( [string] , [string] ) , ( [string] , True ) ] ) , OrderedDict ( [ ( [string] , [string] ) , ( [string] , False ) ] ) ] ) ] ) ] ) ] ) ) [EOL] assert is_pipelines_config_valid ( yaml_pipelines ) == True [EOL] assert yaml_pipelines == expected_yaml_instance [EOL] [EOL] [EOL] def test_read_invalid_pipelines_config ( ) : [EOL] [docstring] [EOL] yaml_pipelines_config = [string] [EOL] config = read_and_validate_config ( yaml_pipelines_config ) [EOL] yaml_pipelines = config [ [string] ] [EOL] assert is_pipelines_config_valid ( yaml_pipelines ) == False [EOL] [EOL] [EOL] def test_directory_expansion ( tmp_path ) : [EOL] d = tmp_path / [string] [EOL] d . mkdir ( ) [EOL] sub = d / [string] [EOL] sub . mkdir ( ) [EOL] p = d / [string] [EOL] p . write_text ( [string] ) [EOL] p1 = d / [string] / [string] [EOL] p1 . write_text ( [string] ) [EOL] purepaths = list ( d . glob ( [string] ) ) [EOL] paths = [ p . as_posix ( ) for p in purepaths if p . is_file ( ) ] [EOL] expanded_dir = list ( expand_directory ( d . as_posix ( ) ) ) [EOL] assert paths == expanded_dir [EOL] [EOL] [EOL] def test_get_pipeline_configs ( ) : [EOL] yaml_overall_config = [string] [EOL] config = read_and_validate_config ( yaml_overall_config ) [EOL] pipeline_configs = tuple ( get_pipeline_configs ( config ) ) [EOL] assert pipeline_configs == ( PipelineConfig ( name = [string] , coverage_db = [string] , dirs = ( DirConfig ( path = [string] , full_scope = [string] ) , DirConfig ( path = [string] , full_scope = [string] ) ) , files = ( FileConfig ( path = [string] , full_scope = [string] ) , FileConfig ( path = [string] , full_scope = [string] ) ) , full_scope_command = [string] , partial_scope_command = [string] ) , AnalyzerPipelineConfig ( name = [string] , dirs = ( DirConfig ( path = [string] , full_scope = [string] ) , ) , files = ( FileConfig ( path = [string] , full_scope = [string] ) , ) , full_scope_command = [string] , partial_scope_command = [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from pytest import mark [EOL] [EOL] from tia . env import is_ci [EOL] [EOL] pytestmark = pytest . mark . unit [EOL] [EOL] [EOL] @ mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_is_ci ( monkeypatch , ci_env_var ) : [EOL] monkeypatch . setenv ( ci_env_var , [string] ) [EOL] assert is_ci ( ) [EOL] [EOL] [EOL] def test_is_no_ci ( ) : [EOL] [comment] [EOL] assert not is_ci ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0