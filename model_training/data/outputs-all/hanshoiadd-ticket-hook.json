[comment] [EOL] from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , packages = [ [string] ] , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional , List , Match [EOL] import argparse [EOL] import typing [EOL] import add_ticket_hook [EOL] [docstring] [EOL] from __future__ import print_function [EOL] [EOL] import sys [EOL] import re [EOL] import typing [comment] [EOL] import argparse [EOL] [EOL] from collections import namedtuple [EOL] from . import io [EOL] [EOL] [EOL] Options = namedtuple ( [string] , [string] ) [EOL] [EOL] [EOL] def parse_args ( argv = None ) : [EOL] [comment] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , nargs = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , default = False , ) [EOL] args = parser . parse_args ( argv ) [EOL] [EOL] assert args . filenames , [string] [EOL] assert args . prefixes , [string] [EOL] [EOL] prefixes = parse_prefixes ( args . prefixes ) [EOL] [EOL] return ( args . filenames [ [number] ] , Options ( prefixes = prefixes , strict = args . strict ) ) [EOL] [EOL] [EOL] def parse_prefixes ( prefixes ) : [EOL] [comment] [EOL] prefix_str = [string] . join ( prefixes ) [EOL] for char in [string] : [EOL] prefix_str = prefix_str . replace ( char , [string] ) [EOL] [EOL] return [ prefix for prefix in prefix_str . split ( [string] ) if prefix ] [EOL] [EOL] [EOL] def parse_ticket ( text , options ) : [EOL] [comment] [EOL] pattern = [string] . format ( [string] . join ( options . prefixes ) ) [EOL] match = re . search ( pattern , text ) [EOL] if match : [EOL] return match . group ( [number] ) [EOL] return None [EOL] [EOL] [EOL] def alter_message ( message , branch_name , options ) : [EOL] [comment] [EOL] [docstring] [EOL] ticket_from_commit = parse_ticket ( message , options ) [EOL] [EOL] if ticket_from_commit : [EOL] return message [EOL] [EOL] ticket_from_branch = parse_ticket ( branch_name , options ) [EOL] [EOL] if ticket_from_branch : [EOL] return [string] . format ( ticket_from_branch , message ) [EOL] [EOL] if options . strict : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] return message [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] try : [EOL] filename , options = parse_args ( sys . argv [ [number] : ] ) [EOL] branch_name = io . get_current_branch_name ( ) [EOL] message = io . read_commit_message ( filename ) [EOL] altered_message = alter_message ( message , branch_name , options ) [EOL] io . write_commit_message ( filename , altered_message ) [EOL] return [number] [EOL] except Exception as e : [EOL] print ( str ( e ) ) [EOL] return [number] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[add_ticket_hook.main.Options]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[add_ticket_hook.main.Options]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import subprocess [EOL] [EOL] [EOL] def read_commit_message ( filename ) : [EOL] [comment] [EOL] [docstring] [EOL] with open ( filename , [string] ) as f : [EOL] return f . read ( ) . strip ( ) [EOL] [EOL] [EOL] def write_commit_message ( filename , message ) : [EOL] [comment] [EOL] [docstring] [EOL] with open ( filename , [string] ) as f : [EOL] f . seek ( [number] ) [EOL] f . write ( message ) [EOL] f . truncate ( ) [EOL] [EOL] [EOL] def get_current_branch_name ( ) : [EOL] [comment] [EOL] try : [EOL] branch_name = subprocess . check_output ( [ [string] , [string] , [string] , [string] ] ) [EOL] return branch_name . strip ( [string] ) . decode ( [string] ) [EOL] except ( RuntimeError , AttributeError ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import add_ticket_hook [EOL] import pytest [EOL] from add_ticket_hook import main [EOL] [EOL] [EOL] @ pytest . fixture def options ( ) : [EOL] return main . Options ( prefixes = ( [string] , [string] , [string] ) , strict = False ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] ] ) def test_parse_ticket ( message , options ) : [EOL] assert main . parse_ticket ( message , options ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_parse_ticket_github_format ( message , options ) : [EOL] assert main . parse_ticket ( message , options ) == [string] [EOL] [EOL] [EOL] def test_parse_another_ticket ( options ) : [EOL] assert main . parse_ticket ( [string] , options ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) def test_ticket_not_found ( message , options ) : [EOL] assert main . parse_ticket ( message , options ) is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ [string] , [string] ] , [string] , [ [string] , [string] ] , False , ) , ( [ [string] , [string] , [string] ] , [string] , [ [string] ] , True ) , ( [ [string] , [string] , [string] ] , [string] , [ [string] ] , True , ) , ( [ [string] , [string] ] , [string] , [ [string] ] , False ) , ( [ [string] , [string] ] , [string] , [ [string] ] , False ) , ( [ [string] , [string] ] , [string] , [ [string] ] , False ) , ( [ [string] , [string] , [string] ] , [string] , [ [string] , [string] ] , False ) , ( [ [string] , [string] , [string] ] , [string] , [ [string] , [string] ] , False , ) , ( [ [string] , [string] , [string] , [string] ] , [string] , [ [string] , [string] ] , True , ) , ] , ) def test_parse_args ( args , filename , prefixes , strict ) : [EOL] _filename , options = main . parse_args ( args ) [EOL] assert _filename == filename [EOL] assert options . prefixes == prefixes [EOL] assert options . strict is strict [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ] , ) def test_alter_message ( message , branch_name , alt_msg , options ) : [EOL] assert main . alter_message ( message , branch_name , options ) == alt_msg [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ] , ) def test_alter_message_strict ( message , branch_name , alt_msg ) : [EOL] options = main . Options ( prefixes = ( [string] , [string] ) , strict = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] main . alter_message ( message , branch_name , options ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0