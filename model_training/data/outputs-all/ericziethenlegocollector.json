[comment] [EOL] [EOL] from setuptools import setup [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List , Any , Type , Tuple , Dict [EOL] import legocollector [EOL] import typing [EOL] from django . contrib . staticfiles import finders [EOL] from django . templatetags . static import static [EOL] from django . utils . html import format_html [EOL] from django_tables2 import CheckBoxColumn , Column , LinkColumn , Table [EOL] from django_tables2 . utils import Accessor [EOL] from django_tables2 . views import SingleTableMixin [comment] [EOL] [EOL] from . models import Part , UserPart [EOL] [EOL] [EOL] class PartImageColumn ( Column ) : [EOL] def render ( self , value ) : [EOL] rel_pic_path = F' [string] { value } [string] ' [EOL] abs_pic_path = finders . find ( rel_pic_path ) [EOL] pic_url = None [EOL] [EOL] if abs_pic_path : [EOL] pic_url = static ( rel_pic_path ) [EOL] else : [EOL] part = Part . objects . filter ( part_num = value ) . first ( ) [comment] [EOL] if part . image_url : [EOL] pic_url = part . image_url [EOL] [EOL] if pic_url : [EOL] img_class = [string] [EOL] else : [EOL] pic_url = [string] [EOL] img_class = [string] [EOL] [EOL] return format_html ( F' [string] { pic_url } [string] { img_class } [string] ' ) [EOL] [EOL] [EOL] class DecimalColumn ( Column ) : [EOL] def render ( self , value ) : [EOL] return [string] % (value) [EOL] [EOL] [EOL] class PartTable ( Table ) : [EOL] box_selection = CheckBoxColumn ( accessor = [string] ) [EOL] image = PartImageColumn ( accessor = [string] , verbose_name = [string] ) [EOL] [EOL] width = DecimalColumn ( accessor = [string] ) [EOL] height = DecimalColumn ( accessor = [string] ) [EOL] length = DecimalColumn ( accessor = [string] ) [EOL] [EOL] color_count = Column ( verbose_name = [string] , orderable = False , accessor = Accessor ( [string] ) ) [EOL] colors = Column ( verbose_name = [string] , orderable = False , accessor = Accessor ( [string] ) ) [EOL] [EOL] class Meta : [comment] [EOL] model = Part [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] attrs = { [string] : [string] } [EOL] empty_text = [string] [EOL] [EOL] [EOL] class UserPartTable ( Table ) : [EOL] part = LinkColumn ( None , accessor = [string] , args = [ Accessor ( [string] ) ] ) [EOL] [EOL] width = DecimalColumn ( accessor = [string] ) [EOL] height = DecimalColumn ( accessor = [string] ) [EOL] length = DecimalColumn ( accessor = [string] ) [EOL] [EOL] image = PartImageColumn ( accessor = [string] , verbose_name = [string] ) [EOL] [EOL] [comment] [EOL] qty = Column ( verbose_name = [string] , orderable = False , accessor = Accessor ( [string] ) ) [EOL] colors = Column ( verbose_name = [string] , orderable = False , accessor = Accessor ( [string] ) ) [EOL] [EOL] class Meta : [comment] [EOL] model = UserPart [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] attrs = { [string] : [string] } [EOL] empty_text = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , List , Any [EOL] import legocollector [EOL] import typing [EOL] import colorsys [EOL] import math [EOL] [EOL] from django . db import models [EOL] from django . db . models import Sum [EOL] from django . contrib . auth . models import User [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class PartCategory ( models . Model ) : [EOL] id = models . IntegerField ( primary_key = True , editable = False ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] @ property def height ( self ) : [EOL] if self . name in [ [string] , [string] ] : [EOL] return [number] [EOL] return None [EOL] [EOL] [EOL] class Color ( models . Model ) : [EOL] id = models . IntegerField ( primary_key = True , editable = False ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] rgb = models . CharField ( max_length = [number] ) [EOL] transparent = models . BooleanField ( default = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] color_step_hue = models . IntegerField ( editable = False , default = [number] ) [EOL] color_step_lumination = models . DecimalField ( max_digits = [number] , decimal_places = [number] , editable = False , default = [number] ) [EOL] color_step_value = models . IntegerField ( editable = False , default = [number] ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] @ property def rgb_ints ( self ) : [EOL] return ( int ( self . rgb [ : [number] ] , [number] ) , int ( self . rgb [ [number] : [number] ] , [number] ) , int ( self . rgb [ [number] : ] , [number] ) ) [EOL] [EOL] @ property def complimentary_color ( self ) : [EOL] [comment] [EOL] color = [string] [comment] [EOL] if self . solor_is_light ( self . rgb_ints [ [number] ] , self . rgb_ints [ [number] ] , self . rgb_ints [ [number] ] ) : [EOL] color = [string] [comment] [EOL] return color [EOL] [EOL] @ staticmethod def solor_is_light ( red , green , blue ) : [comment] [EOL] value = [number] - ( [number] * red + [number] * green + [number] * blue ) / [number] [EOL] return value < [number] [EOL] [EOL] @ staticmethod def color_step ( red , green , blue , repetitions = [number] ) : [EOL] lum = math . sqrt ( [number] * red + [number] * green + [number] * blue ) [EOL] [EOL] hue , _ , value = colorsys . rgb_to_hsv ( red , green , blue ) [EOL] [EOL] hue2 = int ( hue * repetitions ) [EOL] value2 = int ( value * repetitions ) [EOL] [EOL] if hue2 % [number] == [number] : [EOL] value2 = repetitions - value2 [EOL] lum = repetitions - lum [EOL] [EOL] return ( hue2 , lum , value2 ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [comment] [EOL] hlv = self . color_step ( self . rgb_ints [ [number] ] , self . rgb_ints [ [number] ] , self . rgb_ints [ [number] ] ) [EOL] self . color_step_hue = hlv [ [number] ] [EOL] self . color_step_lumination = hlv [ [number] ] [EOL] self . color_step_value = hlv [ [number] ] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Part ( models . Model ) : [EOL] part_num = models . CharField ( unique = True , max_length = [number] ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] width = models . DecimalField ( max_digits = [number] , decimal_places = [number] , blank = True , null = True ) [EOL] height = models . DecimalField ( max_digits = [number] , decimal_places = [number] , blank = True , null = True ) [EOL] length = models . DecimalField ( max_digits = [number] , decimal_places = [number] , blank = True , null = True ) [EOL] top_studs = models . PositiveIntegerField ( blank = True , null = True ) [EOL] bottom_studs = models . PositiveIntegerField ( blank = True , null = True ) [EOL] stud_rings = models . PositiveIntegerField ( blank = True , null = True ) [EOL] image_url = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] category = models . ForeignKey ( PartCategory , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [comment] [EOL] [comment] [EOL] if self . length is not None and self . width is not None : [EOL] if self . width > self . length : [EOL] temp_width = self . width [EOL] self . width = self . length [EOL] self . length = temp_width [EOL] [EOL] [comment] [EOL] if self . category and self . category . height : [EOL] self . height = self . category . height [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return F'{ self . name } [string] { self . part_num } [string] ' [EOL] [EOL] @ property def dimension_set_count ( self ) : [EOL] return [ self . width is not None , self . height is not None , self . length is not None ] . count ( True ) [EOL] [EOL] @ property def studs_set_count ( self ) : [EOL] return [ self . top_studs is not None , self . bottom_studs is not None , self . stud_rings is not None ] . count ( True ) [EOL] [EOL] @ property def available_colors ( self ) : [EOL] return Color . objects . filter ( setparts__part = self ) . distinct ( ) [EOL] [EOL] @ property def available_colors_count ( self ) : [EOL] return self . available_colors . count ( ) [EOL] [EOL] @ property def available_colors_str ( self ) : [EOL] return [string] . join ( c . name for c in self . available_colors . order_by ( [string] ) ) [EOL] [EOL] @ property def set_inventories ( self ) : [EOL] return list ( { sp . set_inventory for sp in self . setparts . all ( ) } ) [EOL] [EOL] @ property def set_count ( self ) : [EOL] return len ( self . set_inventories ) [EOL] [EOL] def get_related_parts ( self , * , parents , children , transitive , parts_processed = None ) : [EOL] related_parts = [ ] [EOL] [EOL] if not parts_processed : [EOL] parts_processed = [ ] [EOL] [EOL] my_related_parts = [ ] [EOL] if parents : [EOL] my_related_parts += [ r . parent_part for r in PartRelationship . objects . filter ( child_part = self ) ] [EOL] if children : [EOL] my_related_parts += [ r . child_part for r in PartRelationship . objects . filter ( parent_part = self ) ] [EOL] [EOL] if transitive : [EOL] parts_processed . append ( self . part_num ) [EOL] for part in my_related_parts : [EOL] if part . part_num not in parts_processed : [EOL] related_parts . append ( part ) [EOL] related_parts += part . get_related_parts ( parents = parents , children = children , transitive = transitive , parts_processed = parts_processed ) [EOL] else : [EOL] related_parts = my_related_parts [EOL] [EOL] return related_parts [EOL] [EOL] def related_part_count ( self , * , parents , children , transitive ) : [EOL] return len ( self . get_related_parts ( parents = parents , children = children , transitive = transitive ) ) [EOL] [EOL] [EOL] class PartRelationship ( models . Model ) : [EOL] child_part = models . ForeignKey ( Part , on_delete = models . CASCADE , related_name = [string] ) [EOL] parent_part = models . ForeignKey ( Part , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] [comment] [EOL] ALTERNATE_PART = [string] [EOL] DIFFERENT_MOLD = [string] [EOL] DIFFERENT_PRINT = [string] [EOL] DIFFERENT_PATTERN = [string] [EOL] [comment] [EOL] type_choices = [ ( ALTERNATE_PART , [string] ) , ( DIFFERENT_MOLD , [string] ) , ( DIFFERENT_PRINT , [string] ) , ( DIFFERENT_PATTERN , [string] ) , ] [EOL] relationship_type = models . CharField ( max_length = [number] , choices = type_choices ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return F'{ self . parent_part . part_num } [string] { self . relationship_type } [string] { self . child_part . part_num }' [EOL] [EOL] [EOL] class PartExternalId ( models . Model ) : [EOL] part = models . ForeignKey ( Part , on_delete = models . CASCADE , related_name = [string] ) [EOL] external_id = models . CharField ( max_length = [number] ) [EOL] [EOL] [comment] [EOL] BRICKLINK = [string] [EOL] BRICKOWL = [string] [EOL] BRICKSET = [string] [EOL] LDRAW = [string] [EOL] LEGO = [string] [EOL] PEERON = [string] [EOL] [comment] [EOL] provider_list = [ ( BRICKLINK , [string] ) , ( BRICKOWL , [string] ) , ( BRICKSET , [string] ) , ( LDRAW , [string] ) , ( LEGO , [string] ) , ( PEERON , [string] ) , ] [EOL] provider = models . CharField ( max_length = [number] , choices = provider_list ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] , [string] ) , ) [EOL] [EOL] [EOL] class UserPart ( models . Model ) : [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] part = models . ForeignKey ( Part , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] @ property def inventory_count ( self ) : [EOL] inv_count = Inventory . objects . filter ( userpart__user = self . user , userpart = self ) . aggregate ( Sum ( [string] ) ) [EOL] [comment] [EOL] return inv_count [ [string] ] or [number] [EOL] [EOL] @ property def used_colors ( self ) : [EOL] return Color . objects . filter ( inventory_colors__userpart = self ) . distinct ( ) [EOL] [EOL] @ property def used_colors_str ( self ) : [EOL] return [string] . join ( c . name for c in self . used_colors . order_by ( [string] ) ) [EOL] [EOL] @ property def unused_colors ( self ) : [EOL] return self . part . available_colors . exclude ( pk__in = self . used_colors ) [EOL] [EOL] def __str__ ( self ) : [EOL] return F'{ self . part . name } [string] { self . part . part_num } [string] ' [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . pk } ) [EOL] [EOL] [EOL] class Inventory ( models . Model ) : [EOL] userpart = models . ForeignKey ( UserPart , on_delete = models . CASCADE , related_name = [string] ) [EOL] color = models . ForeignKey ( Color , on_delete = models . CASCADE , related_name = [string] ) [EOL] qty = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return F'{ self . qty } [string] { self . color } [string] { self . userpart } [string] ' [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . pk , [string] : self . pk } ) [EOL] [EOL] [EOL] class SetPart ( models . Model ) : [EOL] [EOL] [comment] [EOL] set_inventory = models . PositiveIntegerField ( ) [EOL] part = models . ForeignKey ( Part , on_delete = models . CASCADE , related_name = [string] ) [EOL] color = models . ForeignKey ( Color , on_delete = models . CASCADE , related_name = [string] ) [EOL] qty = models . PositiveIntegerField ( ) [EOL] is_spare = models . BooleanField ( ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] , [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return F'{ self . part } [string] { self . qty } [string] { self . color }' [EOL]	
from typing import Type , List , Tuple , Any [EOL] import legocollector [EOL] import typing [EOL] from collections import namedtuple [EOL] [EOL] from django . forms import CharField , ModelForm , ValidationError , modelformset_factory [EOL] from django . forms . formsets import BaseFormSet [EOL] [EOL] from . fields import PartColorChoiceField [EOL] from . models import Inventory , UserPart [EOL] from . widgets import CustomSelectWidget [EOL] [EOL] [EOL] class UserPartUpdateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = UserPart [EOL] fields = ( [string] , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . user = kwargs . pop ( [string] ) [EOL] self . part = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean ( self ) : [EOL] [comment] [EOL] cleaned_data = super ( ) . clean ( ) [EOL] [EOL] [comment] [EOL] form_part = cleaned_data . get ( [string] ) [EOL] [EOL] if form_part != self . part : [EOL] if UserPart . objects . filter ( user = self . user , part = form_part ) . exists ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] return cleaned_data [EOL] [EOL] [EOL] class InventoryCreateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = Inventory [EOL] fields = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . userpart = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean ( self ) : [EOL] [comment] [EOL] cleaned_data = super ( ) . clean ( ) [EOL] [EOL] [comment] [EOL] color = cleaned_data . get ( [string] ) [EOL] [EOL] if Inventory . objects . filter ( userpart = self . userpart , color = color ) . exists ( ) : [EOL] raise ValidationError ( F' [string] { color } [string] ' ) [EOL] [EOL] return cleaned_data [EOL] [EOL] [EOL] class InventoryUpdateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = Inventory [EOL] fields = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . userpart = kwargs . pop ( [string] ) [EOL] self . color = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean ( self ) : [EOL] [comment] [EOL] cleaned_data = super ( ) . clean ( ) [EOL] [EOL] [comment] [EOL] form_color = cleaned_data . get ( [string] ) [EOL] [EOL] if form_color != self . color : [EOL] if Inventory . objects . filter ( userpart = self . userpart , color = form_color ) . exists ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] return cleaned_data [EOL] [EOL] [EOL] class InventoryForm ( ModelForm ) : [EOL] rgb = CharField ( disabled = True , required = False ) [EOL] [EOL] class Meta : [EOL] model = Inventory [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , userpart , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . initial_data = { } [EOL] [EOL] [comment] [EOL] queryset = userpart . part . available_colors [EOL] if [string] in kwargs : [EOL] self . initial_data = kwargs [ [string] ] [EOL] else : [EOL] queryset = userpart . unused_colors [EOL] [EOL] self . userpart = userpart [EOL] self . fields [ [string] ] = PartColorChoiceField ( label = [string] , required = True , queryset = queryset , widget = CustomSelectWidget ( attrs = { [string] : [string] } ) ) [EOL] [EOL] @ property def initial_color ( self ) : [EOL] return self . initial_data [ [string] ] if [string] in self . initial_data else None [EOL] [EOL] @ property def submitted_color ( self ) : [EOL] return self . cleaned_data [ [string] ] if [string] in self . cleaned_data else None [EOL] [EOL] @ property def color_changed ( self ) : [EOL] return self . initial_color != self . submitted_color [EOL] [EOL] @ property def initial_qty ( self ) : [EOL] return self . initial_data [ [string] ] if [string] in self . initial_data else None [EOL] [EOL] @ property def submitted_qty ( self ) : [EOL] return self . cleaned_data [ [string] ] if [string] in self . cleaned_data else None [EOL] [EOL] @ property def qty_changed ( self ) : [EOL] return self . initial_qty != self . submitted_qty [EOL] [EOL] @ property def marked_for_deletion ( self ) : [EOL] return ( [string] in self . cleaned_data ) and self . cleaned_data [ [string] ] [EOL] [EOL] @ property def initial_values_cleared ( self ) : [EOL] return self . initial_color and not self . submitted_color and ( self . submitted_qty is None ) [EOL] [EOL] def is_valid ( self ) : [EOL] valid = super ( ) . is_valid ( ) [comment] [EOL] [EOL] if ( self . submitted_color or ( self . submitted_qty is not None ) ) and not self . marked_for_deletion : [EOL] return valid [EOL] [EOL] return True [EOL] [EOL] def get_form_actions ( self ) : [EOL] FormActions = namedtuple ( [string] , [string] ) [EOL] [EOL] create_color = ( ) [EOL] update_color = ( ) [EOL] delete_color = None [EOL] [EOL] if self . is_valid ( ) : [EOL] [comment] [EOL] if ( self . marked_for_deletion or self . initial_values_cleared or ( self . initial_color and self . color_changed ) ) : [EOL] if self . initial_color : [EOL] delete_color = self . initial_color [EOL] [EOL] [comment] [EOL] if not self . marked_for_deletion : [EOL] if self . submitted_color : [EOL] if self . color_changed : [EOL] create_color = ( self . submitted_color , self . submitted_qty ) [EOL] elif self . qty_changed : [EOL] update_color = ( self . submitted_color , self . submitted_qty ) [EOL] [EOL] return FormActions ( create_color , update_color , delete_color ) [EOL] [EOL] def save ( self , commit = True ) : [EOL] instance = super ( ) . save ( commit = False ) [EOL] if commit : [EOL] instance . save ( ) [EOL] return instance [EOL] [EOL] [EOL] class BaseInventoryFormset ( BaseFormSet ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] userpart = kwargs . get ( [string] ) . get ( [string] ) [EOL] [EOL] self . queryset = Inventory . objects . filter ( userpart = userpart ) [EOL] [EOL] [comment] [EOL] def clean ( self ) : [EOL] [docstring] [EOL] [EOL] color_list = [ ] [EOL] duplicates = [ ] [EOL] [EOL] [comment] [EOL] if any ( self . errors ) : [EOL] return [EOL] [EOL] for form in self . forms : [EOL] [comment] [EOL] if self . can_delete and self . _should_delete_form ( form ) : [comment] [EOL] continue [EOL] [EOL] color = form . cleaned_data . get ( [string] ) [EOL] if color : [EOL] if color . name in color_list : [EOL] duplicates . append ( color . name ) [EOL] else : [EOL] color_list . append ( color . name ) [EOL] [EOL] if duplicates : [EOL] raise ValidationError ( F' [string] { set ( duplicates ) }' , code = [string] ) [EOL] [EOL] [EOL] InventoryFormset = modelformset_factory ( Inventory , form = InventoryForm , formset = BaseInventoryFormset , extra = [number] , can_delete = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[legocollector.inventory.forms.InventoryForm.get_form_actions.FormActions]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[legocollector.inventory.forms.InventoryForm.get_form_actions.FormActions]$ 0 $typing.Tuple[unknown,unknown]$ 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . views . generic import RedirectView [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , RedirectView . as_view ( pattern_name = [string] , permanent = False ) , name = [string] ) , path ( [string] , views . ColorListView . as_view ( ) , name = [string] ) , path ( [string] , views . PartListView . as_view ( ) , name = [string] ) , path ( [string] , views . UserPartListView . as_view ( ) , name = [string] ) , path ( [string] , views . import_userparts , name = [string] ) , path ( [string] , views . export_userparts , name = [string] ) , path ( [string] , views . FilteredPartListUserPartCreateView . as_view ( ) , name = [string] ) , path ( [string] , views . UserPartDeleteView . as_view ( ) , name = [string] ) , path ( [string] , views . UserPartUpdateView . as_view ( ) , name = [string] ) , path ( [string] , views . UserPartManageColorsView . as_view ( ) , name = [string] ) , path ( [string] , views . UserPartDetailView . as_view ( ) , name = [string] ) , path ( [string] , views . InventoryCreateView . as_view ( ) , name = [string] ) , path ( [string] , views . InventoryDeleteView . as_view ( ) , name = [string] ) , path ( [string] , views . InventoryUpdateView . as_view ( ) , name = [string] ) , path ( [string] , views . InventoryDetailView . as_view ( ) , name = [string] ) , path ( [string] , views . convert_color_id_to_rgb , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Dict [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import ( Color , Part , PartCategory , PartRelationship , PartExternalId , SetPart , UserPart , Inventory ) [EOL] [EOL] [EOL] class ColorAdmin ( admin . ModelAdmin ) : [EOL] fieldsets = [ ( [string] , { [string] : [ [string] , [string] ] } ) , ( [string] , { [string] : [ [string] , [string] ] } ) , ( [string] , { [string] : [ [string] , [string] , [string] ] } ) ] [EOL] readonly_fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = [ [string] ] [EOL] [EOL] [EOL] class PartAdmin ( admin . ModelAdmin ) : [EOL] fieldsets = [ ( [string] , { [string] : [ [string] , [string] , [string] , [string] ] } ) , ( [string] , { [string] : [ [string] , [string] , [string] ] } ) , ( [string] , { [string] : [ [string] , [string] , [string] ] } ) , ( [string] , { [string] : [ [string] ] } ) , ( [string] , { [string] : [ [string] ] } ) , ( [string] , { [string] : [ [string] ] } ) , ] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] search_fields = [ [string] , [string] , [string] ] [EOL] readonly_fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def related_parts ( self , obj ) : [comment] [EOL] return [string] . join ( p . part_num for p in obj . get_related_parts ( parents = True , children = True , transitive = True ) ) [EOL] [EOL] def related_part_count ( self , obj ) : [comment] [EOL] return F'{ obj . related_part_count ( parents = True , children = True , transitive = True ) }' [EOL] [EOL] def available_colors ( self , obj ) : [comment] [EOL] return [string] . join ( c . name for c in obj . available_colors . order_by ( [string] ) ) [EOL] [EOL] [EOL] class SetPartAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PartExternalIdpAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PartRelationshipAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] ) [EOL] [EOL] [EOL] class UserPartAdmin ( admin . ModelAdmin ) : [EOL] fieldsets = [ ( [string] , { [string] : [ [string] , [string] ] } ) , ] [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] readonly_fields = [ [string] , [string] ] [EOL] [EOL] def used_colors ( self , obj ) : [comment] [EOL] return [string] . join ( c . name for c in obj . used_colors . order_by ( [string] ) ) [EOL] [EOL] def unused_colors ( self , obj ) : [comment] [EOL] return [string] . join ( c . name for c in obj . unused_colors . order_by ( [string] ) ) [EOL] [EOL] [EOL] class InventoryAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] admin . site . register ( Color , ColorAdmin ) [EOL] admin . site . register ( Part , PartAdmin ) [EOL] admin . site . register ( SetPart , SetPartAdmin ) [EOL] admin . site . register ( PartCategory ) [EOL] admin . site . register ( PartRelationship , PartRelationshipAdmin ) [EOL] admin . site . register ( PartExternalId , PartExternalIdpAdmin ) [EOL] admin . site . register ( UserPart , UserPartAdmin ) [EOL] admin . site . register ( Inventory , InventoryAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.List[builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.List[builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.List[builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class InventoryConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
import builtins [EOL] from typing import Type , List , Dict [EOL] import legocollector [EOL] import typing [EOL] from django_filters import FilterSet , ModelChoiceFilter [EOL] from django_filters . views import FilterView [comment] [EOL] [EOL] from . models import UserPart , Part , PartCategory [EOL] [EOL] [EOL] class PartFilter ( FilterSet ) : [EOL] category = ModelChoiceFilter ( empty_label = [string] , field_name = [string] , queryset = PartCategory . objects . all ( ) ) [EOL] [EOL] class Meta : [EOL] model = Part [EOL] fields = { [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] ] , } [EOL] [EOL] [EOL] class UserPartFilter ( FilterSet ) : [EOL] [EOL] class Meta : [EOL] model = UserPart [EOL] fields = { [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] ] , } [EOL] [EOL] def __init__ ( self , data = None , queryset = None , * , request = None , prefix = None ) : [EOL] super ( ) . __init__ ( data , queryset , request = request , prefix = prefix ) [EOL] self . filters [ [string] ] = ModelChoiceFilter ( empty_label = [string] , field_name = [string] , queryset = PartCategory . objects . filter ( parts__user_parts__user = request . user ) . distinct ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . forms import ModelChoiceField [EOL] [EOL] [EOL] class PartColorChoiceField ( ModelChoiceField ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] def label_from_instance ( self , obj ) : [EOL] [comment] [EOL] if hasattr ( obj , [string] ) : [EOL] self . widget . custom_attrs . update ( { obj . pk : { [string] : obj . rgb } } ) [EOL] self . widget . custom_attrs . update ( { obj . pk : { [string] : F' [string] { obj . rgb } [string] { obj . complimentary_color }' } } ) [EOL] [EOL] return obj . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . forms import Select [EOL] [EOL] [EOL] [comment] [EOL] class CustomSelectWidget ( Select ) : [EOL] def __init__ ( self , attrs = None , choices = ( ) ) : [EOL] self . custom_attrs = { } [EOL] super ( ) . __init__ ( attrs , choices ) [EOL] [EOL] def create_option ( self , name , value , label , selected , index , subindex = None , attrs = None ) : [EOL] index = str ( index ) if subindex is None else [string] % ( index , subindex ) [EOL] if attrs is None : [EOL] attrs = { } [EOL] option_attrs = self . build_attrs ( self . attrs , attrs ) if self . option_inherits_attrs else { } [EOL] if selected : [EOL] option_attrs . update ( self . checked_attribute ) [EOL] if [string] in option_attrs : [EOL] option_attrs [ [string] ] = self . id_for_label ( option_attrs [ [string] ] , index ) [EOL] [EOL] [comment] [EOL] if len ( self . custom_attrs ) > [number] : [EOL] if value in self . custom_attrs : [EOL] custom_attr = self . custom_attrs [ value ] [EOL] for key , val in custom_attr . items ( ) : [EOL] option_attrs . update ( { key : val } ) [EOL] [EOL] return { [string] : name , [string] : value , [string] : label , [string] : selected , [string] : index , [string] : option_attrs , [string] : self . input_type , [string] : self . option_template_name , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Dict , List , Any [EOL] import legocollector [EOL] import csv [EOL] import typing [EOL] import _csv [EOL] import csv [EOL] import io [EOL] [EOL] from django . db import transaction [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] [EOL] from django . http import HttpResponse , HttpResponseRedirect , JsonResponse [EOL] from django . shortcuts import reverse [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic import DeleteView , DetailView , ListView , UpdateView [EOL] from django . views . generic . edit import CreateView [EOL] [EOL] from common . util import url_helper [EOL] [EOL] from . filters import ( UserPartFilter , PartFilter , FilterView ) [EOL] from . forms import ( UserPartUpdateForm , InventoryCreateForm , InventoryUpdateForm , InventoryFormset , ValidationError ) [EOL] from . models import Color , Part , UserPart , Inventory [EOL] from . tables import ( PartTable , UserPartTable , SingleTableMixin ) [EOL] [EOL] [EOL] def convert_color_id_to_rgb ( request ) : [EOL] color_id = request . GET . get ( [string] , None ) [EOL] [EOL] rgb = [string] [EOL] complimentary_color = [string] [EOL] if color_id : [EOL] color = Color . objects . filter ( id = color_id ) . first ( ) [EOL] if color : [EOL] rgb = color . rgb [EOL] complimentary_color = color . complimentary_color [EOL] data = { [string] : rgb , [string] : complimentary_color } [EOL] return JsonResponse ( data ) [EOL] [EOL] [EOL] @ login_required def import_userparts ( request ) : [EOL] [comment] [EOL] [EOL] csv_file = request . FILES [ [string] ] [EOL] if not csv_file . name . lower ( ) . endswith ( [string] ) : [EOL] messages . error ( request , [string] ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] [EOL] [comment] [EOL] if csv_file . multiple_chunks ( ) : [EOL] messages . error ( request , [string] % ( csv_file . size / ( [number] * [number] ) , ) ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] [EOL] csv_file . seek ( [number] ) [EOL] reader = csv . DictReader ( io . StringIO ( csv_file . read ( ) . decode ( [string] ) ) ) [EOL] with transaction . atomic ( ) : [EOL] for row in reader : [EOL] userpart , _ = UserPart . objects . update_or_create ( user = request . user , part = Part . objects . get ( part_num = row [ [string] ] ) , ) [EOL] inventory , _ = Inventory . objects . update_or_create ( userpart = userpart , color = Color . objects . get ( id = row [ [string] ] ) , defaults = { [string] : row [ [string] ] } ) [EOL] [EOL] inventory . save ( ) [EOL] userpart . save ( ) [EOL] [EOL] messages . info ( request , F' [string] { csv_file } [string] ' ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] @ login_required def export_userparts ( request ) : [EOL] [comment] [EOL] response = HttpResponse ( content_type = [string] ) [EOL] response [ [string] ] = [string] [EOL] [EOL] userparts = UserPart . objects . filter ( user = request . user ) [EOL] writer = csv . writer ( response ) [EOL] writer . writerow ( [ [string] , [string] , [string] ] ) [EOL] for userpart in userparts : [EOL] inventory_list = Inventory . objects . filter ( userpart = userpart . id ) [EOL] for inv in inventory_list : [EOL] writer . writerow ( [ userpart . part . part_num , inv . color . id , inv . qty ] ) [EOL] return response [EOL] [EOL] [EOL] class ColorListView ( ListView ) : [comment] [EOL] model = Color [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Color . objects . all ( ) [EOL] [EOL] [EOL] class PartListView ( LoginRequiredMixin , SingleTableMixin , FilterView ) : [comment] [EOL] model = Part [EOL] template_name = [string] [EOL] table_class = PartTable [EOL] filterset_class = PartFilter [EOL] [EOL] [EOL] class UserPartUpdateView ( LoginRequiredMixin , UpdateView ) : [comment] [EOL] model = UserPart [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] form_class = UserPartUpdateForm [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . user = self . request . user [EOL] try : [EOL] return super ( ) . form_valid ( form ) [EOL] except ValidationError : [EOL] form . add_error ( None , [string] ) [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] kwargs = super ( ) . get_form_kwargs ( ) [EOL] kwargs . update ( { [string] : self . request . user , [string] : self . object . part } ) [EOL] return kwargs [EOL] [EOL] [EOL] class UserPartDeleteView ( LoginRequiredMixin , DeleteView ) : [comment] [EOL] model = UserPart [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_cancel_url ( self ) : [EOL] userpart = self . kwargs [ [string] ] [EOL] return reverse_lazy ( [string] , kwargs = { [string] : userpart } ) [EOL] [EOL] [EOL] class UserPartDetailView ( LoginRequiredMixin , SingleTableMixin , DetailView ) : [comment] [EOL] model = UserPart [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] [comment] [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = Inventory . objects . filter ( userpart = self . object . id ) [EOL] return context [EOL] [EOL] [EOL] class UserPartListView ( LoginRequiredMixin , SingleTableMixin , FilterView ) : [comment] [EOL] model = UserPart [EOL] template_name = [string] [EOL] table_class = UserPartTable [EOL] filterset_class = UserPartFilter [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return UserPart . objects . filter ( user = self . request . user ) [EOL] [EOL] [EOL] class FilteredPartListUserPartCreateView ( LoginRequiredMixin , SingleTableMixin , FilterView ) : [comment] [EOL] model = Part [EOL] template_name = [string] [EOL] table_class = PartTable [EOL] filterset_class = PartFilter [EOL] [EOL] def post ( self , request , ** kwargs ) : [comment] [EOL] try : [EOL] part_id_list = self . get_part_ids_from_post ( ) [EOL] except ValidationError as error : [EOL] messages . error ( self . request , str ( error ) ) [EOL] [comment] [EOL] [comment] [EOL] response = HttpResponseRedirect ( reverse_lazy ( [string] ) ) [EOL] get_params_dic = { param : request . GET . get ( param ) for param in request . GET . keys ( ) if request . GET . get ( param ) } [EOL] url = url_helper . build_url ( response . url , get_params_dic ) [EOL] response [ [string] ] = url [EOL] return response [EOL] else : [EOL] for part_id in part_id_list : [EOL] userpart = UserPart . objects . create ( user = self . request . user , part_id = part_id ) [EOL] userpart . save ( ) [EOL] [EOL] if len ( part_id_list ) == [number] : [EOL] return HttpResponseRedirect ( reverse_lazy ( [string] , kwargs = { [string] : userpart . pk } ) ) [EOL] [EOL] return HttpResponseRedirect ( reverse_lazy ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def get_part_ids_from_post ( self ) : [EOL] [comment] [EOL] ids = self . request . POST . getlist ( [string] ) [EOL] [EOL] [comment] [EOL] if not ids : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] part_id_list = [ ] [EOL] for part_id in ids : [EOL] [comment] [EOL] if UserPart . objects . filter ( user = self . request . user , part = part_id ) . exists ( ) : [EOL] raise ValidationError ( [string] ) [EOL] part_id_list . append ( part_id ) [EOL] [EOL] [comment] [EOL] return part_id_list [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] return Part . objects . exclude ( user_parts__user = self . request . user ) . exclude ( setparts__isnull = True ) [EOL] [EOL] [EOL] class InventoryCreateView ( LoginRequiredMixin , CreateView ) : [comment] [EOL] model = Inventory [EOL] template_name = [string] [EOL] form_class = InventoryCreateForm [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . userpart = UserPart . objects . get ( id = self . kwargs . get ( [string] , [string] ) ) [EOL] try : [EOL] return super ( ) . form_valid ( form ) [EOL] except ValidationError : [EOL] form . add_error ( None , [string] ) [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] def get_cancel_url ( self ) : [EOL] return self . get_success_url ( ) [EOL] [EOL] def get_success_url ( self ) : [EOL] userpart = self . kwargs [ [string] ] [EOL] return reverse_lazy ( [string] , kwargs = { [string] : userpart } ) [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] kwargs = super ( ) . get_form_kwargs ( ) [EOL] kwargs . update ( { [string] : self . kwargs . get ( [string] , [string] ) } ) [EOL] return kwargs [EOL] [EOL] [EOL] class InventoryUpdateView ( LoginRequiredMixin , UpdateView ) : [comment] [EOL] model = Inventory [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] form_class = InventoryUpdateForm [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . userpart = UserPart . objects . get ( id = self . kwargs . get ( [string] , [string] ) ) [EOL] try : [EOL] return super ( ) . form_valid ( form ) [EOL] except ValidationError : [EOL] form . add_error ( None , [string] ) [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] kwargs = super ( ) . get_form_kwargs ( ) [EOL] kwargs . update ( { [string] : self . kwargs . get ( [string] , [string] ) , [string] : self . object . color } ) [EOL] return kwargs [EOL] [EOL] [EOL] class InventoryDeleteView ( LoginRequiredMixin , DeleteView ) : [comment] [EOL] model = Inventory [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_cancel_url ( self ) : [EOL] userpart = self . kwargs [ [string] ] [EOL] inventory = self . kwargs [ [string] ] [EOL] return reverse_lazy ( [string] , kwargs = { [string] : userpart , [string] : inventory } ) [EOL] [EOL] [EOL] class InventoryDetailView ( LoginRequiredMixin , DetailView ) : [comment] [EOL] model = Inventory [EOL] pk_url_kwarg = [string] [EOL] template_name = [string] [EOL] [EOL] [EOL] class UserPartManageColorsView ( LoginRequiredMixin , UpdateView ) : [comment] [EOL] model = UserPart [EOL] fields = [ ] [EOL] template_name = [string] [EOL] pk_url_kwarg = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] initial_data = [ { [string] : inv . color , [string] : inv . qty } for inv in Inventory . objects . filter ( userpart = self . object ) ] [EOL] if self . request . POST : [EOL] context [ [string] ] = InventoryFormset ( self . request . POST , initial = initial_data , form_kwargs = { [string] : self . object } ) [EOL] else : [EOL] context [ [string] ] = InventoryFormset ( initial = initial_data , form_kwargs = { [string] : self . object } ) [EOL] return context [EOL] [EOL] def form_valid ( self , form ) : [EOL] context = self . get_context_data ( ) [EOL] inventory_formset = context [ [string] ] [EOL] [EOL] [comment] [EOL] for inventory_form in inventory_formset : [EOL] if not inventory_form . is_valid ( ) : [EOL] form . add_error ( None , [string] ) [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] [comment] [EOL] if inventory_formset . non_form_errors ( ) : [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] create_or_update_dic = { } [EOL] delete_dic = { } [EOL] [comment] [EOL] for inventory_form in inventory_formset : [EOL] form_actions = inventory_form . get_form_actions ( ) [EOL] [EOL] if form_actions . create : [EOL] create_or_update_dic [ form_actions . create [ [number] ] . pk ] = form_actions . create [EOL] if form_actions . update : [EOL] create_or_update_dic [ form_actions . update [ [number] ] . pk ] = form_actions . update [EOL] if form_actions . delete : [EOL] delete_dic [ form_actions . delete . pk ] = form_actions . delete [EOL] [EOL] [comment] [EOL] for color_pk , color in delete_dic . items ( ) : [EOL] [comment] [EOL] if color_pk not in create_or_update_dic : [EOL] Inventory . objects . filter ( userpart = self . object , color = color ) . delete ( ) [EOL] [EOL] [comment] [EOL] for _ , inventory_tuple in create_or_update_dic . items ( ) : [EOL] Inventory . objects . update_or_create ( userpart = self . object , color = inventory_tuple [ [number] ] , defaults = { [string] : inventory_tuple [ [number] ] } ) [EOL] [EOL] return super ( ) . form_valid ( form ) [EOL]	builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] , [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Match , Tuple , Optional , Any [EOL] import decimal [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import re [EOL] [EOL] from decimal import Decimal [EOL] [EOL] from django . db import transaction [EOL] from django . core . management . base import BaseCommand [EOL] from inventory . models import Part [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . guess_dimensions ( ) [EOL] [EOL] def guess_dimensions ( self ) : [EOL] logger . info ( [string] ) [EOL] part_list = Part . objects . all ( ) [EOL] part_updates = [number] [EOL] with transaction . atomic ( ) : [EOL] for part in part_list : [EOL] if part . dimension_set_count == [number] : [EOL] guessed_dims = self . guess_dimension_from_name ( part . name ) [EOL] if guessed_dims : [EOL] part . width = guessed_dims [ [number] ] [EOL] part . length = guessed_dims [ [number] ] [EOL] part . height = guessed_dims [ [number] ] [EOL] part . save ( ) [EOL] [EOL] part_updates += [number] [EOL] [EOL] if part_updates and ( part_updates % [number] ) == [number] : [EOL] logger . info ( F' [string] { part_updates }' ) [EOL] [EOL] logger . info ( F' [string] { part_updates }' ) [EOL] [EOL] @ staticmethod def guess_dimension_from_name ( name ) : [EOL] dim_tup = None [EOL] pattern_2 = [string] [EOL] pattern_3 = [string] [EOL] [EOL] width = length = height = None [EOL] [EOL] [comment] [EOL] result = re . search ( pattern_3 , name ) [EOL] [EOL] if result : [EOL] height = Decimal ( result . group ( [string] ) ) [EOL] else : [EOL] [EOL] [comment] [EOL] result = re . search ( pattern_2 , name ) [EOL] [EOL] if result : [EOL] cand_w = Decimal ( result . group ( [string] ) ) [EOL] cand_h = Decimal ( result . group ( [string] ) ) [EOL] [EOL] if cand_w > cand_h : [EOL] length = cand_w [EOL] width = cand_h [EOL] else : [EOL] length = cand_h [EOL] width = cand_w [EOL] [EOL] dim_tup = ( width , length , height ) [EOL] [EOL] return dim_tup [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[decimal.Decimal,decimal.Decimal,typing.Optional[decimal.Decimal]]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $decimal.Decimal$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $decimal.Decimal$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 $typing.Tuple[decimal.Decimal,decimal.Decimal,typing.Optional[decimal.Decimal]]$ 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 $typing.Tuple[decimal.Decimal,decimal.Decimal,typing.Optional[decimal.Decimal]]$ 0
from typing import List , Dict , DefaultDict , Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] from collections import defaultdict [EOL] [EOL] from django . db import transaction [EOL] from django . core . management . base import BaseCommand [EOL] from inventory . models import Part [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] logger . info ( [string] ) [EOL] [EOL] processed_parts = { } [EOL] [EOL] attribute_updates = defaultdict ( int ) [EOL] [EOL] with transaction . atomic ( ) : [EOL] for idx , part in enumerate ( Part . objects . all ( ) , [number] ) : [EOL] if part . part_num not in processed_parts : [EOL] [comment] [EOL] part_list = self . set_related_attribs_for_part ( part , attribute_updates = attribute_updates ) [EOL] [EOL] [comment] [EOL] for rel_part in part_list : [EOL] processed_parts [ rel_part . part_num ] = True [EOL] [EOL] if ( idx % [number] ) == [number] : [EOL] logger . info ( F' [string] { idx } [string] ' ) [EOL] [EOL] self . print_update_details ( attribute_updates ) [EOL] [EOL] @ staticmethod def print_update_details ( attribute_updates ) : [EOL] logger . info ( [string] ) [EOL] logger . info ( F' [string] { attribute_updates [ [string] ] }' ) [EOL] for group , count in attribute_updates . items ( ) : [EOL] if group == [string] : [EOL] continue [EOL] logger . info ( F' [string] { group : [string] } [string] { count }' ) [EOL] [EOL] @ staticmethod def set_related_attribs_for_part ( part , * , attribute_updates ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] related_parts = part . get_related_parts ( parents = True , children = True , transitive = True ) [EOL] part_family = sorted ( related_parts + [ part ] , key = lambda p : p . dimension_set_count , reverse = True ) [EOL] [EOL] rel_attrib_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] master_part = part_family [ [number] ] [EOL] master_attribs = { name : getattr ( master_part , name ) for name in rel_attrib_fields if getattr ( master_part , name ) is not None } [EOL] [EOL] [comment] [EOL] for field in rel_attrib_fields : [EOL] if field not in master_attribs : [EOL] for rel_part in part_family : [EOL] val = getattr ( rel_part , field ) [EOL] if val is not None : [EOL] master_attribs [ field ] = val [EOL] break [EOL] [EOL] [comment] [EOL] for rel_part in part_family : [EOL] part_update = False [EOL] for field , value in master_attribs . items ( ) : [EOL] if getattr ( rel_part , field ) is None : [EOL] setattr ( rel_part , field , value ) [EOL] attribute_updates [ field ] += [number] [EOL] part_update = True [EOL] [EOL] if part_update : [EOL] rel_part . save ( ) [EOL] attribute_updates [ [string] ] += [number] [EOL] [EOL] if ( attribute_updates [ [string] ] % [number] ) == [number] : [EOL] logger . info ( F''' [string] { attribute_updates [ [string] ] }''' ) [EOL] [EOL] return part_family [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import List , Any [EOL] import logging [EOL] import typing [EOL] import json [EOL] import logging [EOL] import os [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from inventory . models import Part , PartExternalId [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] json_file_path = options [ [string] ] [EOL] [EOL] json_dic = { } [EOL] if os . path . exists ( json_file_path ) : [EOL] with open ( json_file_path , [string] , encoding = [string] ) as file_ptr : [EOL] json_dic = json . load ( file_ptr ) [EOL] else : [EOL] logger . error ( F' [string] { json_file_path } [string] ' ) [EOL] [EOL] self . import_ldraw_data ( json_dic ) [EOL] [EOL] @ staticmethod def import_ldraw_data ( data_dic ) : [EOL] logger . info ( [string] ) [EOL] parts_processed_counts = [number] [EOL] part_list = Part . objects . values_list ( [string] , flat = True ) [EOL] [EOL] ldraw_external_ids = [ e . external_id for e in PartExternalId . objects . filter ( provider = PartExternalId . LDRAW ) ] [EOL] [EOL] parts_not_found_list = [ ] [EOL] [EOL] with transaction . atomic ( ) : [EOL] for part_num , part_dic in data_dic . items ( ) : [comment] [EOL] part_list = [ ] [EOL] if part_num in ldraw_external_ids : [EOL] part_list = [ e . part for e in PartExternalId . objects . filter ( provider = PartExternalId . LDRAW , external_id = part_num ) ] [EOL] else : [EOL] part = Part . objects . filter ( part_num = part_num ) . first ( ) [EOL] if part : [EOL] part_list . append ( part ) [EOL] else : [EOL] parts_not_found_list . append ( part_num ) [EOL] [EOL] for part in part_list : [EOL] if [string] not in part_dic : [EOL] part . top_studs = part_dic [ [string] ] [EOL] part . bottom_studs = part_dic [ [string] ] [EOL] part . stud_rings = part_dic [ [string] ] [EOL] part . save ( ) [EOL] [EOL] parts_processed_counts += [number] [EOL] if ( parts_processed_counts % [number] ) == [number] : [EOL] logger . info ( F' [string] { parts_processed_counts } [string] ' ) [EOL] [EOL] logger . info ( F' [string] { sorted ( parts_not_found_list ) }' ) [EOL] logger . info ( F' [string] { parts_processed_counts } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 $typing.list$ 0 0 $typing.list$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.list$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0
from typing import Dict , DefaultDict , Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] from collections import defaultdict [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from inventory . models import Part , PartCategory [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] logger . info ( [string] ) [EOL] [EOL] self . show_category_details ( ) [EOL] self . show_part_details ( ) [EOL] [EOL] @ staticmethod def show_part_details ( ) : [EOL] logger . info ( [string] ) [EOL] check_not_none_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] parts_detail = { val : [number] for val in check_not_none_fields } [EOL] [EOL] part_count = [number] [EOL] dimension_set_count = defaultdict ( int ) [EOL] [EOL] [comment] [EOL] for part in Part . objects . all ( ) . iterator ( ) : [EOL] [EOL] part_count += [number] [EOL] dimension_set_count [ part . dimension_set_count ] += [number] [EOL] for name , attrib_name in check_not_none_fields . items ( ) : [EOL] if getattr ( part , attrib_name ) is not None : [EOL] parts_detail [ name ] += [number] [EOL] [EOL] [comment] [EOL] logger . info ( F' [string] { part_count }' ) [EOL] [EOL] [comment] [EOL] for name , count in parts_detail . items ( ) : [EOL] logger . info ( F' [string] { name : [string] } [string] { count : [string] } [string] { part_count - count : [string] }' ) [EOL] [EOL] [comment] [EOL] logger . info ( [string] ) [EOL] for dimension_count , part_count in sorted ( dimension_set_count . items ( ) ) : [EOL] logger . info ( F' [string] { dimension_count : [string] } [string] { part_count }' ) [EOL] [EOL] @ staticmethod def show_category_details ( ) : [EOL] logger . info ( [string] ) [EOL] [EOL] for category in PartCategory . objects . all ( ) . iterator ( ) : [EOL] logger . info ( F' [string] { category . parts . all ( ) . count ( ) : [string] } [string] { category . name }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.DefaultDict[typing.Any,builtins.int]$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict , Any [EOL] import logging [EOL] import csv [EOL] import typing [EOL] import csv [EOL] import json [EOL] import logging [EOL] import os [EOL] import time [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from ezscrape . scraping import scraper [EOL] from ezscrape . scraping . core import ScrapeConfig [EOL] from ezscrape . scraping . core import ScrapeStatus [EOL] [EOL] from inventory . models import Part [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . parts_per_scrape = [number] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , [string] , type = str , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] rebrickabe_api_key = options [ [string] ] [EOL] json_file_path = options [ [string] ] [EOL] parts_csv_path = options [ [string] ] [EOL] [EOL] self . scrape_rebrickable_parts ( rebrickabe_api_key , json_file_path , parts_csv_path ) [EOL] [EOL] def scrape_rebrickable_parts ( self , api_key , json_file_path , part_csv_path ) : [EOL] logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] part_nums , data_dic = self . _load_scrape_data ( json_file_path , part_csv_path ) [EOL] [EOL] [comment] [EOL] scrape_list , part_nums = self . _get_scrape_list ( part_nums , self . parts_per_scrape ) [EOL] while scrape_list : [EOL] [comment] [EOL] scrape_data = self . _scrape ( self . _form_scrape_url ( scrape_list , api_key ) ) [EOL] if scrape_data : [EOL] data_dic = self . _process_scrape_result ( scrape_data , data_dic ) [EOL] self . _save_scrape ( json_file_path , data_dic , part_nums ) [EOL] else : [EOL] self . _save_scrape ( json_file_path , data_dic , part_nums + scrape_list ) [EOL] [EOL] [comment] [EOL] scrape_list , part_nums = self . _get_scrape_list ( part_nums , self . parts_per_scrape ) [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] logger . info ( [string] ) [EOL] [EOL] @ staticmethod def _get_part_nums_from_rebrickable_csv ( part_csv_path ) : [EOL] part_num_list = [ ] [EOL] with open ( part_csv_path , encoding = [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] for row in reader : [EOL] part_num_list . append ( row [ [string] ] ) [EOL] [EOL] return part_num_list [EOL] [EOL] @ staticmethod def _get_scrape_list ( part_nums , count ) : [EOL] scrape_list = [ ] [EOL] leftover_part_nums = [ ] [EOL] [EOL] if len ( part_nums ) > count : [EOL] scrape_list = part_nums [ : count ] [EOL] leftover_part_nums = part_nums [ count : ] [EOL] else : [EOL] scrape_list = part_nums [EOL] [EOL] return ( scrape_list , leftover_part_nums ) [EOL] [EOL] @ staticmethod def _form_scrape_url ( part_nums , api_key ) : [EOL] part_list_str = [string] . join ( part_nums ) [EOL] [comment] [EOL] return F' [string] { part_list_str } [string] { api_key } [string] ' [EOL] [EOL] @ staticmethod def _load_scrape_data ( json_file_path , part_csv_path ) : [EOL] part_dic = { } [EOL] part_nums = [ ] [EOL] [EOL] [comment] [EOL] if os . path . exists ( json_file_path ) : [EOL] with open ( json_file_path , [string] , encoding = [string] ) as file_ptr : [EOL] json_dic = json . load ( file_ptr ) [EOL] [EOL] part_nums = json_dic [ [string] ] [EOL] part_dic = json_dic [ [string] ] [EOL] [EOL] [comment] [EOL] if not part_nums : [EOL] raise CommandError ( F' [string] { json_file_path } [string] ' ) [EOL] [EOL] [comment] [EOL] if part_csv_path : [EOL] if not part_nums : [EOL] part_nums = Command . _get_part_nums_from_rebrickable_csv ( part_csv_path ) [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] if not part_nums : [EOL] part_nums = [ x . part_num for x in Part . objects . all ( ) ] [EOL] [EOL] return ( part_nums , part_dic ) [EOL] [EOL] @ staticmethod def _scrape ( url ) : [EOL] logger . info ( F' [string] { url }' ) [EOL] json_result = { } [EOL] [EOL] result = scraper . scrape_url ( ScrapeConfig ( url ) ) [EOL] if result . status == ScrapeStatus . SUCCESS : [EOL] json_result = json . loads ( result . first_page . html ) [EOL] else : [EOL] logger . error ( F' [string] { result . error_msg }' ) [EOL] [EOL] return json_result [EOL] [EOL] @ staticmethod def _save_scrape ( json_file_path , data_dic , unscraped_list ) : [EOL] logger . info ( F' [string] { len ( unscraped_list ) }' ) [EOL] json_dic = { } [EOL] json_dic [ [string] ] = unscraped_list [EOL] json_dic [ [string] ] = data_dic [EOL] [EOL] with open ( json_file_path , [string] , encoding = [string] ) as file_ptr : [EOL] json . dump ( json_dic , file_ptr ) [EOL] [EOL] @ staticmethod def _process_scrape_result ( scrape_result , data_dic ) : [EOL] for result in scrape_result [ [string] ] : [EOL] result_dic = { } [EOL] part_num = result [ [string] ] [EOL] result_dic = result [EOL] data_dic [ part_num ] = result_dic [EOL] return data_dic [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0
from typing import List , OrderedDict , Dict , Any [EOL] import logging [EOL] import csv [EOL] import typing [EOL] import collections [EOL] import csv [EOL] import logging [EOL] import os [EOL] [EOL] from collections import OrderedDict [EOL] [EOL] from django . db import transaction [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from inventory . models import Color , PartCategory , Part , PartRelationship , SetPart [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] import_dir = options [ [string] ] [EOL] [EOL] [comment] [EOL] import_files = OrderedDict ( ) [EOL] [EOL] import_files [ os . path . join ( import_dir , [string] ) ] = self . _populate_colors [EOL] import_files [ os . path . join ( import_dir , [string] ) ] = self . _populate_part_categories [EOL] import_files [ os . path . join ( import_dir , [string] ) ] = self . _populate_parts [EOL] import_files [ os . path . join ( import_dir , [string] ) ] = self . _populate_relationships [EOL] import_files [ os . path . join ( import_dir , [string] ) ] = self . _populate_set_parts [EOL] [EOL] try : [EOL] self . _validate_config_path ( import_dir , import_files . keys ( ) ) [EOL] except ValueError as error : [EOL] raise CommandError ( F' [string] { error }' ) [EOL] [EOL] [comment] [EOL] for file_path , import_func in import_files . items ( ) : [EOL] with open ( file_path , encoding = [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] import_func ( reader ) [EOL] [EOL] @ staticmethod def _populate_colors ( csv_data ) : [EOL] logger . info ( [string] ) [EOL] with transaction . atomic ( ) : [EOL] for row in csv_data : [EOL] rgb = row [ [string] ] [EOL] [EOL] Color . objects . update_or_create ( id = row [ [string] ] , defaults = { [string] : rgb , [string] : row [ [string] ] , [string] : row [ [string] ] } ) [EOL] [EOL] @ staticmethod def _populate_part_categories ( csv_data ) : [EOL] logger . info ( [string] ) [EOL] with transaction . atomic ( ) : [EOL] for row in csv_data : [EOL] PartCategory . objects . update_or_create ( id = row [ [string] ] , defaults = { [string] : row [ [string] ] } ) [EOL] [EOL] @ staticmethod def _populate_parts ( csv_data ) : [EOL] logger . info ( [string] ) [EOL] part_list = Part . objects . values_list ( [string] , flat = True ) [EOL] create_count = [number] [EOL] with transaction . atomic ( ) : [EOL] for row in csv_data : [EOL] part_num = row [ [string] ] [EOL] if part_num not in part_list : [EOL] Part . objects . create ( part_num = row [ [string] ] , name = row [ [string] ] , category = PartCategory . objects . get ( id = row [ [string] ] ) ) [EOL] create_count += [number] [EOL] [EOL] if ( create_count % [number] ) == [number] : [EOL] logger . info ( F' [string] { create_count }' ) [EOL] logger . info ( F' [string] { create_count }' ) [EOL] [EOL] @ staticmethod def _populate_relationships ( csv_data ) : [EOL] logger . info ( [string] ) [EOL] with transaction . atomic ( ) : [EOL] relation_mapping = { [string] : PartRelationship . ALTERNATE_PART , [string] : PartRelationship . DIFFERENT_MOLD , [string] : PartRelationship . DIFFERENT_PRINT , [string] : PartRelationship . DIFFERENT_PATTERN } [EOL] [EOL] part_list = Part . objects . values_list ( [string] , flat = True ) [EOL] [EOL] for idx , row in enumerate ( csv_data , [number] ) : [EOL] rel_type = row [ [string] ] [EOL] child_part_num = row [ [string] ] [EOL] parent_part_num = row [ [string] ] [EOL] [EOL] if ( child_part_num in part_list ) and ( parent_part_num in part_list ) : [EOL] child_part = Part . objects . filter ( part_num = child_part_num ) . first ( ) [EOL] parent_part = Part . objects . filter ( part_num = parent_part_num ) . first ( ) [EOL] [EOL] if child_part and parent_part : [EOL] PartRelationship . objects . update_or_create ( child_part = child_part , parent_part = parent_part , defaults = { [string] : relation_mapping [ rel_type ] } ) [EOL] [EOL] if ( idx % [number] ) == [number] : [EOL] logger . info ( F' [string] { idx }' ) [EOL] [EOL] @ staticmethod def _populate_set_parts ( csv_data ) : [EOL] logger . info ( [string] ) [EOL] [EOL] logger . info ( [string] ) [EOL] with transaction . atomic ( ) : [EOL] SetPart . objects . all ( ) . delete ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] batch_size = [number] [comment] [EOL] batch_list = [ ] [EOL] csv_row_count = [number] [EOL] [EOL] [comment] [EOL] cached_parts = { p . part_num : p for p in Part . objects . all ( ) } [EOL] [EOL] logger . info ( [string] ) [EOL] with transaction . atomic ( ) : [EOL] for row in csv_data : [EOL] csv_row_count += [number] [EOL] [EOL] batch_list . append ( SetPart ( set_inventory = row [ [string] ] , color_id = row [ [string] ] , part = cached_parts [ row [ [string] ] ] , qty = row [ [string] ] , is_spare = row [ [string] ] ) ) [EOL] [EOL] if ( csv_row_count % batch_size ) == [number] : [EOL] SetPart . objects . bulk_create ( batch_list ) [EOL] batch_list . clear ( ) [EOL] logger . debug ( F' [string] { csv_row_count }' ) [EOL] [EOL] if ( csv_row_count % [number] ) == [number] : [EOL] logger . info ( F' [string] { csv_row_count }' ) [EOL] [EOL] if batch_list : [EOL] SetPart . objects . bulk_create ( batch_list ) [EOL] [EOL] logger . info ( [string] ) [EOL] logger . info ( F' [string] { csv_row_count }' ) [EOL] [EOL] @ staticmethod def _validate_config_path ( base_path , expected_file_list ) : [EOL] [comment] [EOL] if not os . path . exists ( base_path ) or not os . path . isdir ( base_path ) : [EOL] raise ValueError ( F'{ base_path } [string] ' ) [EOL] [EOL] [comment] [EOL] for file_path in expected_file_list : [EOL] if not os . path . exists ( file_path ) : [EOL] raise ValueError ( F' [string] { file_path } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] from defusedxml import ElementTree as ET [EOL] [EOL] from django . db import transaction [EOL] from django . core . management . base import BaseCommand [EOL] from inventory . models import Part , PartExternalId [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] parts_xml_path = options [ [string] ] [EOL] [EOL] logger . info ( [string] ) [EOL] [comment] [EOL] tree = ET . parse ( parts_xml_path ) [EOL] root = tree . getroot ( ) [EOL] [EOL] attributes_set_count = [number] [EOL] [EOL] bricklink_external_ids = [ e . external_id for e in PartExternalId . objects . filter ( provider = PartExternalId . BRICKLINK ) ] [EOL] [EOL] with transaction . atomic ( ) : [EOL] for idx , item_tag in enumerate ( root . findall ( [string] ) ) : [comment] [EOL] item_id = item_tag . find ( [string] ) . text [EOL] item_x = item_tag . find ( [string] ) . text [EOL] item_y = item_tag . find ( [string] ) . text [EOL] item_z = item_tag . find ( [string] ) . text [EOL] [EOL] if item_id and any ( [ item_x , item_y , item_z ] ) : [EOL] part_list = [ ] [EOL] [EOL] [comment] [EOL] if item_id in bricklink_external_ids : [EOL] [comment] [EOL] part_list = [ e . part for e in PartExternalId . objects . filter ( provider = PartExternalId . BRICKLINK , external_id = item_id ) ] [EOL] else : [EOL] part = Part . objects . filter ( part_num = item_id ) . first ( ) [EOL] if part : [EOL] part_list . append ( part ) [EOL] [EOL] [comment] [EOL] for part in part_list : [EOL] if item_x and item_y and ( item_y > item_x ) : [EOL] part . length = item_y [EOL] part . width = item_x [EOL] else : [EOL] part . length = item_x [EOL] part . width = item_y [EOL] part . height = item_z [EOL] part . save ( ) [EOL] [EOL] attributes_set_count += [number] [EOL] [EOL] if ( attributes_set_count % [number] ) == [number] : [EOL] logger . info ( F' [string] { attributes_set_count } [string] ' ) [EOL] else : [EOL] logger . debug ( F' [string] { item_id } [string] ' ) [EOL] [EOL] if ( idx % [number] ) == [number] : [EOL] logger . info ( F' [string] { idx }' ) [EOL] [EOL] logger . info ( F' [string] { attributes_set_count } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 $typing.list$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.list$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] from inventory . models import Color [EOL] [EOL] [EOL] class TestColorCreation ( TestCase ) : [comment] [EOL] [EOL] def setUp ( self ) : [EOL] self . color_red = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] [EOL] def test_colorcreation ( self ) : [EOL] self . assertFalse ( self . color_red . transparent ) [EOL] self . assertEqual ( self . color_red . id , [string] ) [EOL] self . assertEqual ( self . color_red . name , [string] ) [EOL] self . assertEqual ( self . color_red . rgb , [string] ) [EOL] self . assertEqual ( self . color_red . rgb_ints , ( [number] , [number] , [number] ) ) [EOL] self . assertEqual ( self . color_red . complimentary_color , [string] ) [EOL] self . assertEqual ( self . color_red . color_step_hue , [number] ) [EOL] self . assertAlmostEqual ( self . color_red . color_step_lumination , [number] , places = [number] , msg = None , delta = None ) [EOL] self . assertEqual ( self . color_red . color_step_value , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib . auth . models import User [EOL] from django . test import TestCase [EOL] [EOL] from inventory . models import Color , Inventory , Part , PartCategory , SetPart , UserPart [EOL] [EOL] [EOL] class TestInventoryColors ( TestCase ) : [comment] [EOL] [EOL] def setUp ( self ) : [EOL] self . user1 = User . objects . create_user ( username = [string] , email = [string] , password = [string] ) [EOL] self . user2 = User . objects . create_user ( username = [string] , email = [string] , password = [string] ) [EOL] [EOL] self . part_category1 = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] self . color1 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] self . color2 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] self . color3 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] [EOL] self . part1 = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 ) [EOL] [EOL] self . user_part1 = UserPart . objects . create ( user = self . user1 , part = self . part1 ) [EOL] self . user_part2 = UserPart . objects . create ( user = self . user2 , part = self . part1 ) [EOL] [EOL] self . set_part1 = SetPart . objects . create ( set_inventory = [number] , part = self . part1 , color = self . color1 , qty = [number] , is_spare = False ) [EOL] self . set_part2 = SetPart . objects . create ( set_inventory = [number] , part = self . part1 , color = self . color2 , qty = [number] , is_spare = False ) [EOL] [EOL] def test_colors_single_user ( self ) : [EOL] [comment] [EOL] self . assertEqual ( self . user_part1 . used_colors . count ( ) , [number] ) [EOL] [EOL] [comment] [EOL] Inventory . objects . create ( userpart = self . user_part1 , color = self . color1 , qty = [number] ) [EOL] result = self . user_part1 . used_colors [EOL] self . assertEqual ( result . count ( ) , [number] ) [EOL] self . assertTrue ( result . filter ( name = self . color1 . name ) . exists ( ) ) [EOL] [EOL] def test_colors_multi_user ( self ) : [EOL] Inventory . objects . create ( userpart = self . user_part1 , color = self . color1 , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part1 , color = self . color2 , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part1 , color = self . color3 , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part2 , color = self . color2 , qty = [number] ) [EOL] [EOL] result = self . user_part1 . used_colors [EOL] self . assertEqual ( result . count ( ) , [number] ) [EOL] self . assertTrue ( result . filter ( name = self . color1 . name ) . exists ( ) ) [EOL] self . assertTrue ( result . filter ( name = self . color2 . name ) . exists ( ) ) [EOL] self . assertTrue ( result . filter ( name = self . color3 . name ) . exists ( ) ) [EOL] [EOL] result = self . user_part2 . used_colors [EOL] self . assertEqual ( result . count ( ) , [number] ) [EOL] self . assertTrue ( result . filter ( name = self . color2 . name ) . exists ( ) ) [EOL] [EOL] def test_available_colors_to_select ( self ) : [EOL] Inventory . objects . create ( userpart = self . user_part1 , color = self . color1 , qty = [number] ) [EOL] [EOL] [comment] [EOL] result = self . user_part1 . unused_colors [EOL] self . assertEqual ( result . count ( ) , [number] ) [EOL] self . assertTrue ( result . filter ( name = self . color2 . name ) . exists ( ) ) [EOL] [EOL] [EOL] class TestInventoryQty ( TestCase ) : [comment] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create_user ( username = [string] , email = [string] , password = [string] ) [EOL] [EOL] self . part_category = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] self . part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category ) [EOL] self . part2 = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category ) [EOL] [EOL] self . user_part = UserPart . objects . create ( user = self . user , part = self . part ) [EOL] self . user_part2 = UserPart . objects . create ( user = self . user , part = self . part2 ) [EOL] [EOL] self . color_red = Color . objects . create ( id = [number] , name = [string] , rgb = [string] ) [EOL] self . color_black = Color . objects . create ( id = [number] , name = [string] , rgb = [string] ) [EOL] self . color_white = Color . objects . create ( id = [number] , name = [string] , rgb = [string] ) [EOL] [EOL] def test_no_colors_0_qty ( self ) : [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] def test_colors_with_0_qty ( self ) : [EOL] [comment] [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_red , qty = [number] ) [EOL] self . assertEqual ( self . user_part . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] [comment] [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_black , qty = [number] ) [EOL] self . assertEqual ( self . user_part . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] def test_color_with_qty ( self ) : [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_red , qty = [number] ) [EOL] self . assertEqual ( self . user_part . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] def test_multiple_colors_mixed_qty ( self ) : [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_red , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_black , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_white , qty = [number] ) [EOL] self . assertEqual ( self . user_part . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] def test_multiple_userpart_same_color ( self ) : [EOL] Inventory . objects . create ( userpart = self . user_part , color = self . color_red , qty = [number] ) [EOL] Inventory . objects . create ( userpart = self . user_part2 , color = self . color_red , qty = [number] ) [EOL] [EOL] self . assertEqual ( self . user_part . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part . inventory_count , [number] ) [EOL] [EOL] self . assertEqual ( self . user_part2 . used_colors . count ( ) , [number] ) [EOL] self . assertEqual ( self . user_part2 . inventory_count , [number] ) [EOL]	
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from parameterized import parameterized [EOL] [EOL] from inventory . models import PartCategory [EOL] [EOL] [EOL] class TestPartCategoryHeight ( TestCase ) : [EOL] [EOL] @ parameterized . expand ( [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] ) def test_no_height_for_category ( self , category ) : [EOL] category = PartCategory . objects . create ( name = category ) [EOL] self . assertIsNone ( category . height ) [EOL] [EOL] @ parameterized . expand ( [ ( [string] ) , ( [string] ) , ] ) def test_height_for_category ( self , name ) : [EOL] category = PartCategory . objects . create ( name = name ) [EOL] self . assertEqual ( category . height , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] from inventory . models import Color , Part , PartCategory , PartRelationship , SetPart [EOL] [EOL] [EOL] class TestGetRelatedParts ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] PartCategory . objects . create ( name = [string] ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = Part . objects . get ( part_num = [string] ) , child_part = Part . objects . get ( part_num = [string] ) , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] def test_related_parts_all_args_false ( self ) : [EOL] part_a = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertListEqual ( part_a . get_related_parts ( parents = False , children = False , transitive = False ) , [ ] ) [EOL] self . assertEqual ( part_a . related_part_count ( parents = False , children = False , transitive = False ) , [number] ) [EOL] [EOL] def test_related_parts_no_parents ( self ) : [EOL] part_b = Part . objects . get ( part_num = [string] ) [EOL] self . assertListEqual ( part_b . get_related_parts ( parents = True , children = False , transitive = True ) , [ ] ) [EOL] [EOL] def test_related_1_parent ( self ) : [EOL] part_a = Part . objects . get ( part_num = [string] ) [EOL] part_b = Part . objects . get ( part_num = [string] ) [EOL] part_c = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertListEqual ( part_a . get_related_parts ( parents = True , children = False , transitive = False ) , [ part_b ] ) [EOL] self . assertListEqual ( part_c . get_related_parts ( parents = True , children = False , transitive = False ) , [ part_a ] ) [EOL] self . assertListEqual ( part_a . get_related_parts ( parents = True , children = False , transitive = True ) , [ part_b ] ) [EOL] [EOL] def test_related_transitive_parent ( self ) : [EOL] part_a = Part . objects . get ( part_num = [string] ) [EOL] part_b = Part . objects . get ( part_num = [string] ) [EOL] part_c = Part . objects . get ( part_num = [string] ) [EOL] [EOL] parents = part_c . get_related_parts ( parents = True , children = False , transitive = True ) [EOL] self . assertEqual ( len ( parents ) , [number] ) [EOL] self . assertIn ( part_a , parents ) [EOL] self . assertIn ( part_b , parents ) [EOL] [EOL] def test_related_transitive_parent_circular ( self ) : [EOL] part_x = Part . objects . get ( part_num = [string] ) [EOL] part_y = Part . objects . get ( part_num = [string] ) [EOL] part_z = Part . objects . get ( part_num = [string] ) [EOL] [EOL] parents = part_x . get_related_parts ( parents = True , children = False , transitive = True ) [EOL] self . assertEqual ( len ( parents ) , [number] ) [EOL] self . assertIn ( part_y , parents ) [EOL] self . assertIn ( part_z , parents ) [EOL] [EOL] def test_related_parts_no_children ( self ) : [EOL] part_c = Part . objects . get ( part_num = [string] ) [EOL] self . assertListEqual ( part_c . get_related_parts ( parents = False , children = True , transitive = True ) , [ ] ) [EOL] [EOL] def test_related_1_child ( self ) : [EOL] part_1 = Part . objects . get ( part_num = [string] ) [EOL] part_2 = Part . objects . get ( part_num = [string] ) [EOL] part_3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertListEqual ( part_1 . get_related_parts ( parents = False , children = True , transitive = False ) , [ part_2 ] ) [EOL] self . assertListEqual ( part_2 . get_related_parts ( parents = False , children = True , transitive = False ) , [ part_3 ] ) [EOL] self . assertListEqual ( part_2 . get_related_parts ( parents = False , children = True , transitive = True ) , [ part_3 ] ) [EOL] [EOL] def test_related_transitive_children ( self ) : [EOL] part_1 = Part . objects . get ( part_num = [string] ) [EOL] part_2 = Part . objects . get ( part_num = [string] ) [EOL] part_3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] parents = part_1 . get_related_parts ( parents = False , children = True , transitive = True ) [EOL] self . assertEqual ( len ( parents ) , [number] ) [EOL] self . assertIn ( part_2 , parents ) [EOL] self . assertIn ( part_3 , parents ) [EOL] [EOL] def test_related_transitive_children_circular ( self ) : [EOL] part_x = Part . objects . get ( part_num = [string] ) [EOL] part_y = Part . objects . get ( part_num = [string] ) [EOL] part_z = Part . objects . get ( part_num = [string] ) [EOL] [EOL] parents = part_x . get_related_parts ( parents = False , children = True , transitive = True ) [EOL] self . assertEqual ( len ( parents ) , [number] ) [EOL] self . assertIn ( part_y , parents ) [EOL] self . assertIn ( part_z , parents ) [EOL] [EOL] def test_related_1_child_1_parent ( self ) : [EOL] part_1 = Part . objects . get ( part_num = [string] ) [EOL] part_2 = Part . objects . get ( part_num = [string] ) [EOL] part_3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] parents = part_2 . get_related_parts ( parents = True , children = True , transitive = False ) [EOL] self . assertEqual ( len ( parents ) , [number] ) [EOL] self . assertIn ( part_1 , parents ) [EOL] self . assertIn ( part_3 , parents ) [EOL] [EOL] def test_all_related_parts_transitive ( self ) : [EOL] part_1 = Part . objects . get ( part_num = [string] ) [EOL] part_2 = Part . objects . get ( part_num = [string] ) [EOL] part_3 = Part . objects . get ( part_num = [string] ) [EOL] part_a = Part . objects . get ( part_num = [string] ) [EOL] part_b = Part . objects . get ( part_num = [string] ) [EOL] part_c = Part . objects . get ( part_num = [string] ) [EOL] [EOL] part_list = [ part_1 , part_2 , part_3 , part_a , part_b , part_c ] [EOL] [EOL] related_parts = part_1 . get_related_parts ( parents = True , children = True , transitive = True ) [EOL] self . assertEqual ( sorted ( related_parts , key = lambda p : p . part_num ) , sorted ( [ part_2 , part_3 , part_a , part_b , part_c ] , key = lambda p : p . part_num ) ) [EOL] self . assertEqual ( part_1 . related_part_count ( parents = True , children = True , transitive = True ) , [number] ) [EOL] [EOL] for part in part_list : [EOL] target_list = part_list . copy ( ) [EOL] target_list . remove ( part ) [EOL] [EOL] related_parts = part . get_related_parts ( parents = True , children = True , transitive = True ) [EOL] self . assertEqual ( len ( related_parts ) , [number] ) [EOL] for target in target_list : [EOL] self . assertIn ( target , related_parts ) [EOL] [EOL] [EOL] class TestAvailableColors ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . part_category1 = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] self . color1 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] self . color2 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] self . color3 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] [EOL] self . part1 = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 ) [EOL] [EOL] self . set_part1 = SetPart . objects . create ( set_inventory = [number] , part = self . part1 , color = self . color1 , qty = [number] , is_spare = False ) [EOL] self . set_part2 = SetPart . objects . create ( set_inventory = [number] , part = self . part1 , color = self . color2 , qty = [number] , is_spare = False ) [EOL] [EOL] def test_available_colors ( self ) : [EOL] result = self . part1 . available_colors [EOL] self . assertEqual ( result . count ( ) , [number] ) [EOL] self . assertTrue ( result . filter ( name = self . color1 . name ) . exists ( ) ) [EOL] self . assertTrue ( result . filter ( name = self . color2 . name ) . exists ( ) ) [EOL] [EOL] [EOL] class TestDimensions ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . part_category1 = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] def test_dimension_no_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] [EOL] def test_dimension_single_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , width = [number] ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , height = [number] ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , length = [number] ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] [EOL] def test_dimension_2_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , width = [number] , length = [number] ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] [EOL] def test_dimension_all_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , width = [number] , height = [number] , length = [number] ) [EOL] self . assertEqual ( part . dimension_set_count , [number] ) [EOL] [EOL] [EOL] class TestStuds ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . part_category1 = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] def test_studs_no_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] [EOL] def test_studs_single_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , top_studs = [number] ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , bottom_studs = [number] ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , stud_rings = [number] ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] [EOL] def test_studs_2_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , top_studs = [number] , stud_rings = [number] ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] [EOL] def test_studs_all_attribs ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , top_studs = [number] , bottom_studs = [number] , stud_rings = [number] ) [EOL] self . assertEqual ( part . studs_set_count , [number] ) [EOL] [EOL] def test_swap_width_and_length ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category1 , width = [number] , height = [number] , length = [number] ) [EOL] self . assertEqual ( part . width , [number] ) [EOL] self . assertEqual ( part . length , [number] ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] part . width = [number] [EOL] part . save ( ) [EOL] [EOL] self . assertEqual ( part . width , [number] ) [EOL] self . assertEqual ( part . length , [number] ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] [EOL] class TestAutomaticHeight ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . category_no_height = PartCategory . objects . create ( name = [string] ) [EOL] self . category_plates = PartCategory . objects . create ( name = [string] ) [EOL] self . category_tiles = PartCategory . objects . create ( name = [string] ) [EOL] [EOL] def test_no_height ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] self . assertIsNone ( part . height ) [EOL] [EOL] def test_has_height ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] def test_create_height_overwritten ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) , height = [number] ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] def test_create_height_not_overwritten ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) , height = [number] ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] def test_update_category_height_overwritten ( self ) : [EOL] part = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) , height = [number] ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] part . category = PartCategory . objects . get ( name = [string] ) [EOL] part . save ( ) [EOL] self . assertEqual ( part . height , [number] ) [EOL] [EOL] [EOL] class TestSetInventories ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] PartCategory . objects . create ( name = [string] ) [EOL] [EOL] Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] self . color1 = Color . objects . create ( id = [string] , name = [string] , rgb = [string] ) [EOL] [EOL] def test_no_set ( self ) : [EOL] part = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertListEqual ( list ( part . set_inventories ) , [ ] ) [EOL] self . assertEqual ( part . set_count , [number] ) [EOL] [EOL] def test_single_set_inventory ( self ) : [EOL] part = Part . objects . get ( part_num = [string] ) [EOL] set_part = SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = False ) [EOL] [EOL] self . assertListEqual ( list ( part . set_inventories ) , [ set_part . set_inventory ] ) [EOL] self . assertEqual ( part . set_count , [number] ) [EOL] [EOL] def test_multiple_set_inventories ( self ) : [EOL] part = Part . objects . get ( part_num = [string] ) [EOL] set_part1 = SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = False ) [EOL] set_part2 = SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = False ) [EOL] set_part3 = SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = False ) [EOL] [EOL] self . assertListEqual ( part . set_inventories , [ set_part1 . set_inventory , set_part2 . set_inventory , set_part3 . set_inventory ] ) [EOL] self . assertEqual ( part . set_count , [number] ) [EOL] [EOL] def test_multiple_times_same_set_inventory ( self ) : [EOL] part = Part . objects . get ( part_num = [string] ) [EOL] SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = False ) [EOL] SetPart . objects . create ( set_inventory = [number] , part = part , color = self . color1 , qty = [number] , is_spare = True ) [EOL] [EOL] self . assertListEqual ( part . set_inventories , [ [number] ] ) [EOL] self . assertEqual ( part . set_count , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from collections import defaultdict [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from inventory . models import Part , PartCategory , PartRelationship [EOL] from inventory . management . commands . set_related_attributes import Command [EOL] [EOL] [EOL] class TestRelatedAttributes ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . attribute_updates = defaultdict ( int ) [EOL] [EOL] PartCategory . objects . create ( name = [string] ) [EOL] [EOL] self . part1 = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] self . part2 = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] self . part3 = Part . objects . create ( part_num = [string] , name = [string] , category = PartCategory . objects . get ( name = [string] ) ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = self . part1 , child_part = self . part2 , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] PartRelationship . objects . create ( parent_part = self . part2 , child_part = self . part3 , relationship_type = PartRelationship . ALTERNATE_PART ) [EOL] [EOL] def test_no_dims_no_studs_present ( self ) : [EOL] Command . set_related_attribs_for_part ( self . part1 , attribute_updates = self . attribute_updates ) [EOL] [EOL] part1 = Part . objects . get ( part_num = [string] ) [EOL] part2 = Part . objects . get ( part_num = [string] ) [EOL] part3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertEqual ( part1 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part2 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part3 . dimension_set_count , [number] ) [EOL] [EOL] self . assertEqual ( part1 . studs_set_count , [number] ) [EOL] self . assertEqual ( part2 . studs_set_count , [number] ) [EOL] self . assertEqual ( part3 . studs_set_count , [number] ) [EOL] [EOL] def test_copy_attributes ( self ) : [EOL] self . part1 . width = [number] [EOL] self . part1 . top_studs = [number] [EOL] self . part1 . image_url = [string] [EOL] self . part1 . save ( ) [EOL] [EOL] self . part2 . height = [number] [EOL] self . part2 . bottom_studs = [number] [EOL] self . part2 . save ( ) [EOL] [EOL] self . part3 . length = [number] [EOL] self . part3 . stud_rings = [number] [EOL] self . part3 . save ( ) [EOL] [EOL] Command . set_related_attribs_for_part ( self . part1 , attribute_updates = self . attribute_updates ) [EOL] [EOL] part1 = Part . objects . get ( part_num = [string] ) [EOL] part2 = Part . objects . get ( part_num = [string] ) [EOL] part3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertEqual ( part1 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part2 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part3 . dimension_set_count , [number] ) [EOL] [EOL] self . assertEqual ( part1 . width , [number] ) [EOL] self . assertEqual ( part2 . width , [number] ) [EOL] self . assertEqual ( part3 . width , [number] ) [EOL] [EOL] self . assertEqual ( part1 . height , [number] ) [EOL] self . assertEqual ( part2 . height , [number] ) [EOL] self . assertEqual ( part3 . height , [number] ) [EOL] [EOL] self . assertEqual ( part1 . length , [number] ) [EOL] self . assertEqual ( part2 . length , [number] ) [EOL] self . assertEqual ( part3 . length , [number] ) [EOL] [EOL] self . assertEqual ( part1 . top_studs , [number] ) [EOL] self . assertEqual ( part2 . top_studs , [number] ) [EOL] self . assertEqual ( part3 . top_studs , [number] ) [EOL] [EOL] self . assertEqual ( part1 . bottom_studs , [number] ) [EOL] self . assertEqual ( part2 . bottom_studs , [number] ) [EOL] self . assertEqual ( part3 . bottom_studs , [number] ) [EOL] [EOL] self . assertEqual ( part1 . stud_rings , [number] ) [EOL] self . assertEqual ( part2 . stud_rings , [number] ) [EOL] self . assertEqual ( part3 . stud_rings , [number] ) [EOL] [EOL] self . assertEqual ( part1 . image_url , [string] ) [EOL] self . assertEqual ( part2 . image_url , [string] ) [EOL] self . assertEqual ( part3 . image_url , [string] ) [EOL] [EOL] self . assertEqual ( self . attribute_updates [ [string] ] , [number] ) [EOL] [EOL] def test_clashing_values ( self ) : [EOL] self . part1 . width = [number] [EOL] self . part1 . height = [number] [EOL] self . part1 . top_studs = [number] [EOL] self . part1 . image_url = [string] [EOL] self . part1 . save ( ) [EOL] [EOL] self . part2 . width = [number] [EOL] self . part2 . bottom_studs = [number] [EOL] self . part2 . save ( ) [EOL] [EOL] self . part3 . length = [number] [EOL] self . part3 . bottom_studs = [number] [EOL] self . part3 . save ( ) [EOL] [EOL] Command . set_related_attribs_for_part ( self . part1 , attribute_updates = self . attribute_updates ) [EOL] [EOL] part1 = Part . objects . get ( part_num = [string] ) [EOL] part2 = Part . objects . get ( part_num = [string] ) [EOL] part3 = Part . objects . get ( part_num = [string] ) [EOL] [EOL] self . assertEqual ( part1 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part2 . dimension_set_count , [number] ) [EOL] self . assertEqual ( part3 . dimension_set_count , [number] ) [EOL] [EOL] self . assertEqual ( part1 . width , [number] ) [EOL] self . assertEqual ( part2 . width , [number] ) [EOL] self . assertEqual ( part3 . width , [number] ) [EOL] [EOL] self . assertEqual ( part1 . height , [number] ) [EOL] self . assertEqual ( part2 . height , [number] ) [EOL] self . assertEqual ( part3 . height , [number] ) [EOL] [EOL] self . assertEqual ( part1 . length , [number] ) [EOL] self . assertEqual ( part2 . length , [number] ) [EOL] self . assertEqual ( part3 . length , [number] ) [EOL] [EOL] self . assertEqual ( part1 . top_studs , [number] ) [EOL] self . assertEqual ( part2 . top_studs , [number] ) [EOL] self . assertEqual ( part3 . top_studs , [number] ) [EOL] [EOL] self . assertEqual ( part1 . bottom_studs , [number] ) [EOL] self . assertEqual ( part2 . bottom_studs , [number] ) [EOL] self . assertEqual ( part3 . bottom_studs , [number] ) [EOL] [EOL] self . assertEqual ( part1 . stud_rings , None ) [EOL] self . assertEqual ( part2 . stud_rings , None ) [EOL] self . assertEqual ( part3 . stud_rings , None ) [EOL] [EOL] self . assertEqual ( part1 . image_url , [string] ) [EOL] self . assertEqual ( part2 . image_url , [string] ) [EOL] self . assertEqual ( part3 . image_url , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from django . test import TestCase [EOL] [EOL] from inventory . forms import InventoryForm [EOL] from inventory . models import Color , Part , PartCategory , SetPart , UserPart [EOL] [EOL] [EOL] class TestFormProcessing ( TestCase ) : [comment] [EOL] [EOL] def setUp ( self ) : [EOL] self . initian_data = { [string] : True } [EOL] self . no_initian_data = { } [EOL] [EOL] self . user = User . objects . create_user ( username = [string] , email = [string] , password = [string] ) [EOL] [EOL] self . part_category = PartCategory . objects . create ( id = [number] , name = [string] ) [EOL] [EOL] self . part = Part . objects . create ( part_num = [string] , name = [string] , category = self . part_category ) [EOL] [EOL] self . user_part = UserPart . objects . create ( user = self . user , part = self . part ) [EOL] [EOL] self . color_red = Color . objects . create ( id = [number] , name = [string] , rgb = [string] ) [EOL] self . color_black = Color . objects . create ( id = [number] , name = [string] , rgb = [string] ) [EOL] [EOL] self . set_part1 = SetPart . objects . create ( set_inventory = [number] , part = self . part , color = self . color_red , qty = [number] , is_spare = False ) [EOL] self . set_part2 = SetPart . objects . create ( set_inventory = [number] , part = self . part , color = self . color_black , qty = [number] , is_spare = False ) [EOL] [EOL] self . default_qty = [number] [EOL] [EOL] def run_form ( self , * , new_color = None , new_qty = None , removed = None , initial_color = None , initial_qty = None ) : [EOL] [EOL] form_data = { } [EOL] if new_color : [EOL] form_data [ [string] ] = new_color . pk [EOL] if new_qty is not None : [EOL] form_data [ [string] ] = new_qty [EOL] [EOL] form = InventoryForm ( userpart = self . user_part , data = form_data ) [EOL] [EOL] if initial_color : [EOL] if initial_qty is None : [EOL] initial_qty = self . default_qty [EOL] form . initial_data = { [string] : initial_color , [string] : initial_qty } [EOL] [EOL] form . full_clean ( ) [EOL] [EOL] if removed : [EOL] form . cleaned_data [ [string] ] = True [EOL] [EOL] return form [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def run_form_is_valid_test ( self , expected_value , * , new_color = None , new_qty = None , removed = None , initial_color = None ) : [EOL] form = self . run_form ( new_color = new_color , new_qty = new_qty , removed = removed , initial_color = initial_color ) [EOL] [EOL] if expected_value : [EOL] self . assertTrue ( form . is_valid ( ) , str ( form . errors ) + F' [string] { form . cleaned_data }' ) [EOL] else : [EOL] self . assertFalse ( form . is_valid ( ) , str ( form . errors ) + F' [string] { form . cleaned_data }' ) [EOL] [EOL] def test_cleaned_data_populated ( self ) : [EOL] form = self . run_form ( new_color = self . color_red , new_qty = [number] , removed = True , initial_color = self . color_black ) [EOL] [EOL] self . assertIn ( [string] , form . cleaned_data ) [EOL] self . assertIn ( [string] , form . cleaned_data ) [EOL] self . assertTrue ( form . initial_data ) [EOL] self . assertIn ( [string] , form . cleaned_data ) [EOL] [EOL] def test_empty_form ( self ) : [EOL] self . run_form_is_valid_test ( True ) [EOL] [EOL] def test_remove_form_always_valid ( self ) : [EOL] self . run_form_is_valid_test ( True , removed = True ) [EOL] self . run_form_is_valid_test ( True , removed = True , new_color = self . color_red ) [EOL] self . run_form_is_valid_test ( True , removed = True , new_color = self . color_red , new_qty = [number] ) [EOL] self . run_form_is_valid_test ( True , removed = True , initial_color = self . color_black ) [EOL] self . run_form_is_valid_test ( True , removed = True , initial_color = self . color_black , new_color = self . color_red ) [EOL] self . run_form_is_valid_test ( True , removed = True , initial_color = self . color_black , new_color = self . color_red , new_qty = [number] ) [EOL] self . run_form_is_valid_test ( True , removed = True , initial_color = self . color_black , new_qty = [number] ) [EOL] self . run_form_is_valid_test ( True , removed = True , new_qty = [number] ) [EOL] [EOL] def test_form_values_removed_for_deletion ( self ) : [EOL] self . run_form_is_valid_test ( True , initial_color = self . color_black ) [EOL] [EOL] def test_form_newly_populated_form ( self ) : [EOL] self . run_form_is_valid_test ( True , new_color = self . color_red , new_qty = [number] ) [EOL] [EOL] def test_form_unchanged ( self ) : [EOL] self . run_form_is_valid_test ( True , initial_color = self . color_black , new_color = self . color_red , new_qty = [number] ) [EOL] [EOL] def test_form_new_form_incomplete ( self ) : [EOL] self . run_form_is_valid_test ( False , new_qty = [number] ) [EOL] self . run_form_is_valid_test ( False , new_color = self . color_red ) [EOL] [EOL] def test_form_incomplete_after_edit ( self ) : [EOL] self . run_form_is_valid_test ( False , initial_color = self . color_black , new_qty = [number] ) [EOL] self . run_form_is_valid_test ( False , initial_color = self . color_black , new_color = self . color_red ) [EOL] [EOL] def test_form_incomplete_color_removed_qty_0 ( self ) : [EOL] self . run_form_is_valid_test ( False , initial_color = self . color_black , new_qty = [number] ) [EOL] [EOL] def test_form_incomplete_qty_removed ( self ) : [EOL] self . run_form_is_valid_test ( False , initial_color = self . color_black , new_color = self . color_black ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def run_form_action_test ( self , * , expected_create = ( ) , expected_update = ( ) , expected_delete = None , new_color = None , new_qty = None , removed = None , initial_color = None , initial_qty = [number] ) : [EOL] form = self . run_form ( new_color = new_color , new_qty = new_qty , removed = removed , initial_color = initial_color , initial_qty = initial_qty ) [EOL] [EOL] form_action = form . get_form_actions ( ) [EOL] [EOL] self . assertTupleEqual ( form_action . create , expected_create ) [EOL] self . assertTupleEqual ( form_action . update , expected_update ) [EOL] self . assertEqual ( form_action . delete , expected_delete ) [EOL] [EOL] def test_new_form_blank_no_action ( self ) : [EOL] self . run_form_action_test ( ) [EOL] [EOL] def test_new_form_new_inventory_create ( self ) : [EOL] self . run_form_action_test ( expected_create = ( self . color_red , [number] ) , new_color = self . color_red , new_qty = [number] ) [EOL] [EOL] def test_invalid_forms_no_actions ( self ) : [EOL] self . run_form_action_test ( new_qty = [number] ) [EOL] self . run_form_action_test ( new_color = self . color_red ) [EOL] self . run_form_action_test ( initial_color = self . color_black , new_qty = [number] ) [EOL] self . run_form_action_test ( initial_color = self . color_black , new_color = self . color_red ) [EOL] [EOL] def test_removed_initial_data_delete ( self ) : [EOL] self . run_form_action_test ( expected_delete = self . color_black , removed = True , initial_color = self . color_black ) [EOL] self . run_form_action_test ( expected_delete = self . color_black , removed = True , initial_color = self . color_black , new_color = self . color_red ) [EOL] self . run_form_action_test ( expected_delete = self . color_black , removed = True , initial_color = self . color_black , new_color = self . color_red , new_qty = [number] ) [EOL] self . run_form_action_test ( expected_delete = self . color_black , removed = True , initial_color = self . color_black , new_qty = [number] ) [EOL] [EOL] def test_removed_no_initial_data_no_action ( self ) : [EOL] self . run_form_action_test ( removed = True ) [EOL] self . run_form_action_test ( removed = True , new_color = self . color_red ) [EOL] self . run_form_action_test ( removed = True , new_color = self . color_red , new_qty = [number] ) [EOL] self . run_form_action_test ( removed = True , new_qty = [number] ) [EOL] [EOL] def test_cleared_data_delete ( self ) : [EOL] self . run_form_action_test ( expected_delete = self . color_black , initial_color = self . color_black ) [EOL] [EOL] def test_clear_qty_only_no_action ( self ) : [EOL] self . run_form_action_test ( initial_color = self . color_black , initial_qty = [number] , new_color = self . color_black ) [EOL] [EOL] def test_clear_color_only_no_action ( self ) : [EOL] self . run_form_action_test ( initial_color = self . color_black , initial_qty = [number] , new_qty = [number] ) [EOL] [EOL] def test_replace_old_color ( self ) : [EOL] self . run_form_action_test ( expected_create = ( self . color_red , [number] ) , expected_delete = self . color_black , initial_color = self . color_black , initial_qty = [number] , new_color = self . color_red , new_qty = [number] ) [EOL] self . run_form_action_test ( expected_create = ( self . color_red , [number] ) , expected_delete = self . color_black , initial_color = self . color_black , initial_qty = [number] , new_color = self . color_red , new_qty = [number] ) [EOL] [EOL] def test_populated_form_no_changes_no_action ( self ) : [EOL] self . run_form_action_test ( initial_color = self . color_black , initial_qty = [number] , new_color = self . color_black , new_qty = [number] ) [EOL] [EOL] def test_populated_form_change_qty_update ( self ) : [EOL] self . run_form_action_test ( expected_update = ( self . color_black , [number] ) , initial_color = self . color_black , initial_qty = [number] , new_color = self . color_black , new_qty = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] def test_success ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Tuple , List , Dict , Any [EOL] import typing [EOL] import pathlib [EOL] import os [EOL] [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] from utils import ldraw_studcount_parser as ldraw_parser [EOL] from utils . ldraw_studcount_parser import FileListDic , FileType , LineType [EOL] [EOL] REL_THIS_FILE_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] LDRAW_TEST_FILE_DIR = Path ( [string] ) / [string] / [string] / [string] [EOL] LDRAW_PARTS_DIR = LDRAW_TEST_FILE_DIR / [string] [EOL] LDRAW_PRIMITIVES_DIR = LDRAW_TEST_FILE_DIR / [string] [EOL] LDRAW_PARTS_DIR_UNOFFICIAL = LDRAW_TEST_FILE_DIR / [string] [EOL] LDRAW_PRIMITIVES_DIR_UNOFFICIAL = LDRAW_TEST_FILE_DIR / [string] [EOL] [EOL] [EOL] def test_invalid_parts_line ( ) : [EOL] line = [string] [EOL] assert ldraw_parser . line_type_from_line ( line ) == LineType . UNKNOWN [EOL] [EOL] [EOL] LINE_TYPES = [ ( LineType . COMMENT , [string] ) , ( LineType . PART , [string] ) , ( LineType . LINE , [string] ) , ( LineType . TRIANGLE , [string] ) , ( LineType . QUAD , [string] ) , ( LineType . OPTIONAL , [string] ) ] [EOL] @ pytest . mark . parametrize ( [string] , LINE_TYPES ) def test_identify_line_type ( line_type , line ) : [EOL] assert ldraw_parser . line_type_from_line ( line ) == line_type [EOL] [EOL] [EOL] UNKNOWN_PART_LINES = [ ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , UNKNOWN_PART_LINES ) def test_identify_unknown_line_type ( line ) : [EOL] assert ldraw_parser . line_type_from_line ( line ) == LineType . UNKNOWN [EOL] [EOL] [EOL] def test_get_part_file_from_part_line ( ) : [EOL] part_line = [string] [EOL] assert ldraw_parser . get_file_from_part_line ( part_line ) == Path ( [string] ) [EOL] [EOL] [EOL] TOP_STAT_FILES = [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , TOP_STAT_FILES ) def test_file_is_top_stud_file ( file_name ) : [EOL] assert ldraw_parser . get_ldraw_file_type ( file_name ) == FileType . TOP_STUD [EOL] [EOL] [EOL] UNKNOWN_FILES = [ ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , UNKNOWN_FILES ) def test_unknown_file ( file_name ) : [EOL] assert ldraw_parser . get_ldraw_file_type ( file_name ) == FileType . UNKNOWN [EOL] [EOL] [EOL] def test_find_subdir_file ( ) : [EOL] file_name = Path ( [string] ) [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] key = Path ( file_name ) [EOL] assert key in file_dic [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , TOP_STAT_FILES ) def test_build_dir_finds_top_stud_primitives ( file_name ) : [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] key = Path ( file_name ) [EOL] assert key in file_dic [EOL] [EOL] primitives_dir = os . path . join ( LDRAW_TEST_FILE_DIR , [string] ) [EOL] assert Path ( primitives_dir ) / file_name == file_dic [ key ] [EOL] [EOL] [EOL] def test_get_sub_files_from_file ( ) : [EOL] file_name = os . path . join ( [string] , [string] ) [EOL] key = Path ( file_name ) [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key in file_dic [EOL] [EOL] file_path = file_dic [ key ] [EOL] ldraw_file = ldraw_parser . LdrawFile ( file_path ) [EOL] [EOL] sup_part_files = ldraw_file . sup_part_files [EOL] [EOL] assert len ( sup_part_files ) == [number] [EOL] assert sup_part_files . count ( Path ( [string] ) ) == [number] [EOL] assert sup_part_files . count ( Path ( [string] ) ) == [number] [EOL] [EOL] [EOL] def test_get_top_top_studs_for_unknown_file ( ) : [EOL] assert ldraw_parser . get_stud_count_for_file_type ( [string] , ldraw_parser . FileType . TOP_STUD ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , TOP_STAT_FILES ) def test_get_top_top_studs_for_stud_files ( file_name ) : [EOL] assert ldraw_parser . get_stud_count_for_file_type ( file_name , ldraw_parser . FileType . TOP_STUD ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] TOP_STUD_PARTS = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , TOP_STUD_PARTS ) def test_get_top_studs ( top_studs , part_num ) : [EOL] file_name = F'{ part_num } [string] ' [EOL] key = Path ( file_name ) [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key in file_dic [EOL] file_path = file_dic [ key ] [EOL] [EOL] processed_files_dic = { } [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic ) [EOL] assert top_studs == processed_files_dic [ file_path ] [ [string] ] [EOL] [EOL] [EOL] def test_processed_files_dic_specified ( ) : [EOL] file_name = [string] [EOL] key = Path ( file_name ) [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] file_path = file_dic [ key ] [EOL] processed_files_dic = { } [EOL] [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic ) [EOL] assert len ( processed_files_dic . values ( ) ) == [number] [EOL] [EOL] assert processed_files_dic [ LDRAW_PARTS_DIR / [string] ] [ [string] ] == [number] [EOL] assert processed_files_dic [ LDRAW_PRIMITIVES_DIR / [string] ] [ [string] ] == [number] [EOL] assert processed_files_dic [ LDRAW_PRIMITIVES_DIR / [string] ] [ [string] ] == [number] [EOL] [EOL] [EOL] def test_file_visited_count ( ) : [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] file_path = file_dic [ [string] ] [EOL] file_visited_count = { } [EOL] processed_files_dic = { } [EOL] [EOL] [comment] [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic , file_visited_count ) [EOL] assert len ( file_visited_count . values ( ) ) == [number] [EOL] assert file_visited_count [ LDRAW_PARTS_DIR / [string] ] == [number] [EOL] assert file_visited_count [ LDRAW_PRIMITIVES_DIR / [string] ] == [number] [EOL] assert file_visited_count [ LDRAW_PRIMITIVES_DIR / [string] ] == [number] [EOL] [EOL] [comment] [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic , file_visited_count ) [EOL] assert len ( file_visited_count . values ( ) ) == [number] [EOL] assert file_visited_count [ LDRAW_PARTS_DIR / [string] ] == [number] [EOL] assert file_visited_count [ LDRAW_PRIMITIVES_DIR / [string] ] == [number] [EOL] assert file_visited_count [ LDRAW_PRIMITIVES_DIR / [string] ] == [number] [EOL] [EOL] [EOL] def test_calc_top_studs_for_part_list ( ) : [EOL] part_list = [ [string] , [string] , [string] ] [EOL] part_list = [ Path ( LDRAW_PARTS_DIR ) / F'{ p } [string] ' for p in part_list ] [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] [EOL] top_studs_dic = ldraw_parser . calc_top_studs_for_part_list ( part_list , file_dic ) [EOL] [EOL] assert len ( top_studs_dic ) == [number] [EOL] [EOL] [comment] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] [EOL] [comment] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [comment] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] [EOL] [comment] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] assert top_studs_dic [ [string] ] [ [string] ] == [number] [EOL] [EOL] [EOL] UNOFFICIAL_FILES = [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , UNOFFICIAL_FILES ) def test_unofficial_missing_parts_included ( file_name ) : [EOL] key = Path ( file_name ) [EOL] [EOL] [comment] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key not in file_dic [EOL] [EOL] [comment] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR , unofficial_parts_dir = LDRAW_PARTS_DIR_UNOFFICIAL , unofficial_primitives_dir = LDRAW_PRIMITIVES_DIR_UNOFFICIAL ) [EOL] assert key in file_dic [EOL] [EOL] [EOL] def test_can_handle_duplicate_unofficial_files ( ) : [EOL] duplicate_part_file = [string] [EOL] key = Path ( duplicate_part_file ) [EOL] [EOL] [comment] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key in file_dic [EOL] [EOL] [comment] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR , unofficial_parts_dir = LDRAW_PARTS_DIR_UNOFFICIAL , unofficial_primitives_dir = LDRAW_PRIMITIVES_DIR_UNOFFICIAL ) [EOL] assert key in file_dic [EOL] [EOL] [EOL] TOP_STUD_MISSING_UNOFFICIAL_PARTS = [ ( [number] , [string] ) , ( [number] , [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , TOP_STUD_MISSING_UNOFFICIAL_PARTS ) def test_unofficial_missing_part_top_studs ( top_studs , part_num ) : [EOL] file_name = F'{ part_num } [string] ' [EOL] key = Path ( file_name ) [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR , unofficial_parts_dir = LDRAW_PARTS_DIR_UNOFFICIAL , unofficial_primitives_dir = LDRAW_PRIMITIVES_DIR_UNOFFICIAL ) [EOL] [EOL] assert key in file_dic [EOL] file_path = file_dic [ key ] [EOL] [EOL] processed_files_dic = { } [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic ) [EOL] assert top_studs == processed_files_dic [ file_path ] [ [string] ] [EOL] [EOL] [EOL] def test_unofficial_file_with_missing_subparts ( ) : [EOL] part_with_missing_subs = [string] [EOL] part_with_missing_subs = [string] [EOL] key = Path ( part_with_missing_subs ) [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR , unofficial_parts_dir = LDRAW_PARTS_DIR_UNOFFICIAL , unofficial_primitives_dir = LDRAW_PRIMITIVES_DIR_UNOFFICIAL ) [EOL] [EOL] assert key in file_dic [EOL] file_path = file_dic [ key ] [EOL] [EOL] with pytest . raises ( ldraw_parser . SubfileMissingError ) : [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic ) [EOL] [EOL] [EOL] def test_generate_part_list_to_process ( ) : [EOL] duplicate_part_file = [string] [EOL] official_key = Path ( LDRAW_PARTS_DIR ) / duplicate_part_file [EOL] unofficial_key = Path ( LDRAW_PARTS_DIR_UNOFFICIAL ) / duplicate_part_file [EOL] [EOL] [comment] [EOL] part_list = ldraw_parser . generate_part_list_to_process ( [ LDRAW_PARTS_DIR , LDRAW_PARTS_DIR_UNOFFICIAL ] ) [EOL] assert official_key in part_list [EOL] assert unofficial_key not in part_list [EOL] [EOL] [comment] [EOL] part_list = ldraw_parser . generate_part_list_to_process ( [ LDRAW_PARTS_DIR_UNOFFICIAL , LDRAW_PARTS_DIR ] ) [EOL] assert official_key not in part_list [EOL] assert unofficial_key in part_list [EOL] [EOL] [EOL] UNDERSIDE_STUD_FILES = [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , UNDERSIDE_STUD_FILES ) def test_file_is_underside_stud_file ( file_name ) : [EOL] assert ldraw_parser . get_ldraw_file_type ( file_name ) == FileType . UNDERSIDE_STUD [EOL] [EOL] [EOL] BOTTOM_STUD_PARTS = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , BOTTOM_STUD_PARTS ) def test_get_bottom_studs ( top_studs , part_num ) : [EOL] file_name = F'{ part_num } [string] ' [EOL] key = Path ( file_name ) [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key in file_dic [EOL] file_path = file_dic [ key ] [EOL] [EOL] ldraw_parser . print_sub_files ( file_dic [ key ] , file_dic , prefix = [string] ) [EOL] [EOL] processed_files_dic = { } [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic ) [EOL] assert top_studs == processed_files_dic [ file_path ] [ [string] ] [EOL] [EOL] [EOL] STUD_RING_FILES = [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , STUD_RING_FILES ) def test_file_is_stud_ring_file ( file_name ) : [EOL] assert ldraw_parser . get_ldraw_file_type ( file_name ) == FileType . STUD_RING [EOL] [EOL] [EOL] STUD_RING_COUNT_PARTS = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ] [EOL] @ pytest . mark . parametrize ( [string] , STUD_RING_COUNT_PARTS ) def test_get_stud_ring_count ( top_studs , part_num ) : [EOL] file_name = F'{ part_num } [string] ' [EOL] key = Path ( file_name ) [EOL] [EOL] file_dic = FileListDic ( parts_dir = LDRAW_PARTS_DIR , primitives_dir = LDRAW_PRIMITIVES_DIR ) [EOL] assert key in file_dic [EOL] file_path = file_dic [ key ] [EOL] [EOL] ldraw_parser . print_sub_files ( file_dic [ key ] , file_dic , prefix = [string] ) [EOL] [EOL] processed_files_dic = { } [EOL] ldraw_parser . calc_top_studs_for_part_file ( file_path , file_dic , processed_files_dic ) [EOL] assert top_studs == processed_files_dic [ file_path ] [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[EOL] from urllib . parse import urlencode , quote_plus [EOL] [EOL] [EOL] def build_url ( base_url , get_param_dic ) : [EOL] return F'{ base_url } [string] { urlencode ( get_param_dic , quote_via = quote_plus ) }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0