[comment] [EOL] from typing import List , Tuple , Any [EOL] import logging [EOL] import subprocess [EOL] import typing [EOL] import builtins [EOL] import locale [EOL] import logging [EOL] import platform [EOL] import subprocess [EOL] [EOL] [comment] [EOL] import chardet [comment] [EOL] [EOL] [comment] [EOL] import lib_platform [comment] [EOL] [EOL] [EOL] def _disable_chardet_confidence_logging ( ) : [EOL] logging . getLogger ( [string] ) . setLevel ( logging . INFO ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . INFO ) [EOL] [EOL] [EOL] _disable_chardet_confidence_logging ( ) [EOL] [EOL] logger = logging . getLogger ( ) [EOL] [EOL] [EOL] def detect_encoding ( raw_bytes ) : [EOL] [docstring] [EOL] detected = chardet . detect ( raw_bytes ) [EOL] encoding = str ( detected [ [string] ] ) [EOL] confidence = detected [ [string] ] [EOL] [comment] [EOL] if confidence < [number] : [EOL] encoding = get_encoding ( ) [EOL] return encoding [EOL] [EOL] [EOL] def get_encoding ( ) : [EOL] if lib_platform . is_platform_posix : [EOL] return get_encoding_linux ( ) [EOL] elif lib_platform . is_platform_windows : [EOL] return get_encoding_windows ( ) [EOL] else : [EOL] raise RuntimeError ( [string] . format ( platform . system ( ) ) ) [EOL] [EOL] [EOL] def get_encoding_linux ( ) : [EOL] os_encoding = locale . getpreferredencoding ( ) [EOL] return os_encoding [EOL] [EOL] [EOL] def get_encoding_windows ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] encodings = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [comment] [EOL] [EOL] os_encoding = locale . getpreferredencoding ( ) [EOL] [EOL] if lib_platform . is_platform_windows_wine : [comment] [EOL] logger . warning ( [string] ) [EOL] chcp_response = [string] [EOL] elif lib_platform . is_platform_posix : [comment] [EOL] chcp_response = [string] [EOL] else : [EOL] my_process = subprocess . Popen ( [ [string] ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = True ) [EOL] stdout , stderr = my_process . communicate ( ) [EOL] chcp_response = stdout . decode ( os_encoding ) [EOL] [EOL] for encoding_number , encoding in encodings : [EOL] if encoding_number in chcp_response : [EOL] return encoding [EOL] [EOL] logger . warning ( [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0