[comment] [EOL] from typing import Dict , List , Any [EOL] import cryptography [EOL] import typing [EOL] [docstring] [EOL] import sys [EOL] import urllib . parse [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . backends import default_backend [EOL] [EOL] SUBJECT_FIELDS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def print_subject ( cert ) : [EOL] subject = [ ] [EOL] for field in cert . subject : [EOL] subject . append ( [string] . format ( SUBJECT_FIELDS [ field . oid . dotted_string ] , field . value ) ) [EOL] [EOL] return [string] . join ( list ( subject ) ) [EOL] [EOL] def loadCert ( filename ) : [EOL] with open ( filename , [string] ) as open_file : [EOL] cert_bytes = open_file . read ( ) [EOL] cert = x509 . load_pem_x509_certificate ( cert_bytes , default_backend ( ) ) [EOL] subject = print_subject ( cert ) [EOL] [EOL] print ( urllib . parse . quote_plus ( subject ) ) [EOL] print ( subject ) [EOL] [EOL] if __name__ == [string] : [EOL] loadCert ( sys . argv [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , List [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] import os [EOL] import json [EOL] import subprocess [EOL] [EOL] import requests [EOL] [EOL] OLD_SERVER = [string] [EOL] NEW_SERVER = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] PARAMS = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] session = requests . Session ( ) [EOL] [EOL] for params in PARAMS : [EOL] old_response = session . get ( OLD_SERVER , params = params ) [EOL] new_response = session . get ( NEW_SERVER , params = params ) [EOL] [EOL] with open ( [string] , [string] ) as open_file : [EOL] open_file . write ( json . dumps ( old_response . json ( ) , indent = [number] , sort_keys = True ) ) [EOL] [EOL] with open ( [string] , [string] ) as open_file : [EOL] open_file . write ( json . dumps ( new_response . json ( ) , indent = [number] , sort_keys = True ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] . format ( params ) ) [EOL] subprocess . run ( [ [string] , [string] , [string] ] ) [EOL] print ( [string] ) [EOL] [EOL] os . remove ( [string] ) [EOL] os . remove ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $requests.models.Response$ 0 $requests.sessions.Session$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $requests.models.Response$ 0 $requests.sessions.Session$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import datetime [EOL] import cryptography [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] from cryptography import x509 [EOL] from cryptography . x509 . oid import NameOID [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives import serialization [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] [EOL] import sertifikatsok [EOL] [EOL] def _generate_key ( ) : [EOL] return rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) ) [EOL] [EOL] def _gen_cert ( ** kwargs ) : [EOL] [docstring] [EOL] not_before = kwargs . pop ( [string] , datetime . datetime . now ( ) ) [EOL] common_name = kwargs . pop ( [string] , [string] ) [EOL] ou = kwargs . pop ( [string] , [string] ) [EOL] sign = kwargs . pop ( [string] , False ) [EOL] crypt = kwargs . pop ( [string] , False ) [EOL] auth = kwargs . pop ( [string] , False ) [EOL] sn = kwargs . pop ( [string] , [string] ) [EOL] [EOL] key = _generate_key ( ) [EOL] subject = issuer = x509 . Name ( [ x509 . NameAttribute ( NameOID . COUNTRY_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATIONAL_UNIT_NAME , ou ) , x509 . NameAttribute ( NameOID . COMMON_NAME , common_name ) , x509 . NameAttribute ( NameOID . SERIAL_NUMBER , sn ) , ] ) [EOL] cert = x509 . CertificateBuilder ( ) . subject_name ( subject ) . issuer_name ( issuer ) . public_key ( key . public_key ( ) ) . serial_number ( x509 . random_serial_number ( ) ) . not_valid_before ( not_before ) . not_valid_after ( not_before + datetime . timedelta ( days = [number] ) ) . add_extension ( x509 . CertificatePolicies ( [ x509 . PolicyInformation ( x509 . ObjectIdentifier ( [string] ) , None ) ] ) , critical = False ) . add_extension ( x509 . KeyUsage ( digital_signature = auth , content_commitment = sign , key_encipherment = crypt , data_encipherment = crypt , key_agreement = False , key_cert_sign = False , crl_sign = False , encipher_only = False , decipher_only = False ) , critical = True ) . sign ( key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return cert . public_bytes ( serialization . Encoding . DER ) [EOL] [EOL] def _gen_qcert ( ** kwargs ) : [EOL] [docstring] [EOL] ldap_params = kwargs . pop ( [string] , [string] ) [EOL] dn = kwargs . pop ( [string] , [string] ) [EOL] [EOL] cert = _gen_cert ( ** kwargs ) [EOL] return sertifikatsok . QualifiedCertificate ( cert , dn , ldap_params ) [EOL] [EOL] [EOL] def test_subject_order ( ) : [EOL] assert sertifikatsok . subject_order ( [string] ) == [number] [EOL] assert sertifikatsok . subject_order ( [string] ) == [number] [EOL] assert sertifikatsok . subject_order ( [string] ) == [number] [EOL] [EOL] def test_get_prod_issuer_cert_ok ( ) : [EOL] [docstring] [EOL] issuer = sertifikatsok . get_issuer_cert ( [string] , [string] ) [EOL] assert ( issuer . subject . get_attributes_for_oid ( NameOID . COMMON_NAME ) [ [number] ] . value == [string] ) [EOL] [EOL] def test_get_test_issuer_cert_ok ( ) : [EOL] [docstring] [EOL] issuer = sertifikatsok . get_issuer_cert ( [string] , [string] ) [EOL] assert ( issuer . subject . get_attributes_for_oid ( NameOID . COMMON_NAME ) [ [number] ] . value == [string] ) [EOL] [EOL] def test_get_test_issuer_from_prod ( ) : [EOL] [docstring] [EOL] issuer = sertifikatsok . get_issuer_cert ( [string] , [string] ) [EOL] assert issuer is None [EOL] [EOL] def test_get_issuer_cert_fail ( ) : [EOL] [docstring] [EOL] issuer = sertifikatsok . get_issuer_cert ( [string] , [string] ) [EOL] assert issuer is None [EOL] [EOL] def test_is_issued_to_underenhet ( ) : [EOL] [docstring] [EOL] cert1 = _gen_qcert ( ou = [string] ) [EOL] cert2 = _gen_qcert ( ou = [string] ) [EOL] cert3 = _gen_qcert ( ou = [string] ) [EOL] cert4 = _gen_qcert ( ou = [string] ) [EOL] cert5 = _gen_qcert ( ou = [string] ) [EOL] cert6 = _gen_qcert ( ) [EOL] [EOL] assert cert1 . is_issued_to_underenhet ( ) is True [EOL] assert cert2 . is_issued_to_underenhet ( ) is True [EOL] assert cert3 . is_issued_to_underenhet ( ) is True [EOL] assert cert4 . is_issued_to_underenhet ( ) is False [EOL] assert cert5 . is_issued_to_underenhet ( ) is False [EOL] assert cert6 . is_issued_to_underenhet ( ) is False [EOL] [EOL] def test_auth_cert ( ) : [EOL] [docstring] [EOL] cert = _gen_qcert ( auth = True ) [EOL] assert cert . get_display_name ( ) == ( [string] , [string] ) [EOL] assert cert . get_key_usages ( ) == [string] [EOL] assert cert . get_roles ( ) == [ [string] ] [EOL] [EOL] def test_sign_cert ( ) : [EOL] [docstring] [EOL] cert = _gen_qcert ( sign = True ) [EOL] assert cert . get_display_name ( ) == ( [string] , [string] ) [EOL] assert cert . get_key_usages ( ) == [string] [EOL] assert cert . get_roles ( ) == [ [string] ] [EOL] [EOL] def test_crypt_cert ( ) : [EOL] [docstring] [EOL] cert = _gen_qcert ( crypt = True ) [EOL] assert cert . get_display_name ( ) == ( [string] , [string] ) [EOL] assert cert . get_key_usages ( ) == [string] [EOL] assert cert . get_roles ( ) == [ [string] ] [EOL] [EOL] def test_crypt_and_auth_cert ( ) : [EOL] [docstring] [EOL] cert = _gen_qcert ( crypt = True , auth = True ) [EOL] assert cert . get_display_name ( ) == ( [string] , [string] ) [EOL] assert cert . get_key_usages ( ) == [string] [EOL] assert cert . get_roles ( ) == [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] [EOL] def test_separate_certsets_normal_buypass ( ) : [EOL] [docstring] [EOL] [EOL] auth1 = _gen_qcert ( crypt = True , auth = True ) [EOL] sign1 = _gen_qcert ( sign = True ) [EOL] auth2 = _gen_qcert ( crypt = True , auth = True ) [EOL] sign2 = _gen_qcert ( sign = True ) [EOL] [EOL] qualified_certs = [ auth1 , sign1 , auth2 , sign2 ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ auth1 , sign1 ] [EOL] assert cert_sets [ [number] ] . certs == [ auth2 , sign2 ] [EOL] [EOL] def test_separate_certsets_normal_commfides ( ) : [EOL] [docstring] [EOL] [EOL] auth1 = _gen_qcert ( auth = True ) [EOL] sign1 = _gen_qcert ( sign = True ) [EOL] crypt1 = _gen_qcert ( crypt = True ) [EOL] auth2 = _gen_qcert ( auth = True ) [EOL] sign2 = _gen_qcert ( sign = True ) [EOL] crypt2 = _gen_qcert ( crypt = True ) [EOL] [EOL] [EOL] qualified_certs = [ auth1 , sign1 , crypt1 , auth2 , sign2 , crypt2 ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ auth1 , sign1 , crypt1 ] [EOL] assert cert_sets [ [number] ] . certs == [ auth2 , sign2 , crypt2 ] [EOL] [EOL] def test_separate_certsets_subject ( ) : [EOL] [docstring] [EOL] [EOL] auth = _gen_qcert ( crypt = True , auth = True , cn = [string] ) [EOL] sign = _gen_qcert ( sign = True , cn = [string] ) [EOL] [EOL] qualified_certs = [ auth , sign ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ auth ] [EOL] assert cert_sets [ [number] ] . certs == [ sign ] [EOL] [EOL] def test_separate_certsets_only_date ( ) : [EOL] [docstring] [EOL] [EOL] date1 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] date2 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] auth = _gen_qcert ( crypt = True , auth = True , not_before = date1 ) [EOL] sign = _gen_qcert ( sign = True , not_before = date2 ) [EOL] [EOL] qualified_certs = [ auth , sign ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ auth ] [EOL] assert cert_sets [ [number] ] . certs == [ sign ] [EOL] [EOL] def test_separate_certsets_wrong_order ( ) : [EOL] [docstring] [EOL] [EOL] date1 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] date2 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] auth = _gen_qcert ( crypt = True , auth = True , not_before = date2 ) [EOL] sign = _gen_qcert ( sign = True , not_before = date1 ) [EOL] [EOL] qualified_certs = [ auth , sign ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ auth ] [EOL] assert cert_sets [ [number] ] . certs == [ sign ] [EOL] [EOL] def test_separate_certsets_slow_cryptocert ( ) : [EOL] [docstring] [EOL] [EOL] date1 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] date2 = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] auth = _gen_qcert ( auth = True , not_before = date1 ) [EOL] sign = _gen_qcert ( sign = True , not_before = date1 ) [EOL] crypt = _gen_qcert ( crypt = True , not_before = date2 ) [EOL] [EOL] qualified_certs = [ auth , sign , crypt ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] [EOL] def test_separate_certsets_serialnumber_commfides ( ) : [EOL] [docstring] [EOL] [EOL] auth = _gen_qcert ( auth = True , cn = [string] , sn = [string] ) [EOL] sign = _gen_qcert ( sign = True , cn = [string] , sn = [string] ) [EOL] crypt = _gen_qcert ( crypt = True , cn = [string] , sn = [string] ) [EOL] [EOL] qualified_certs = [ auth , sign , crypt ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] [EOL] def test_separate_certsets_same_keyusage ( ) : [EOL] [docstring] [EOL] [EOL] sign1 = _gen_qcert ( sign = True ) [EOL] sign2 = _gen_qcert ( sign = True ) [EOL] [EOL] qualified_certs = [ sign1 , sign2 ] [EOL] cert_sets = sertifikatsok . separate_certificate_sets ( qualified_certs ) [EOL] [EOL] assert len ( cert_sets ) == [number] [EOL] assert cert_sets [ [number] ] . certs == [ sign1 ] [EOL] assert cert_sets [ [number] ] . certs == [ sign2 ] [EOL]	
from typing import List , Type , Dict , Any , Union [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import api [EOL] import logging [EOL] import logging . config [EOL] from datetime import datetime [EOL] from functools import wraps [EOL] [EOL] import aiotask_context as context [EOL] [EOL] audit_logger = logging . getLogger ( [string] ) [EOL] performance_logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class CorrelationFilter ( logging . Filter ) : [EOL] def filter ( self , record ) : [EOL] record . correlation_id = context . get ( [string] ) [EOL] return True [EOL] [EOL] [EOL] def configure_logging ( log_level , log_files ) : [EOL] [docstring] [EOL] handlers = { [string] : { [string] : log_level , [string] : [string] , [string] : [ [string] ] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] ] , } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } [EOL] if log_files : [EOL] for handler in handlers : [EOL] handlers [ handler ] [ [string] ] = [string] [EOL] handlers [ handler ] [ [string] ] = log_files . format ( handler ) [EOL] else : [EOL] for handler in handlers : [EOL] handlers [ handler ] [ [string] ] = [string] [EOL] [EOL] log_settings = { [string] : [number] , [string] : False , [string] : handlers , [string] : { [string] : { [string] : CorrelationFilter } } , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , [string] : { [string] : { [string] : log_level , [string] : [ [string] ] , [string] : True } , [string] : { [string] : [string] , [string] : [ [string] ] , [string] : False , } , [string] : { [string] : [string] , [string] : [ [string] ] , [string] : False , } , [string] : { [string] : [string] , [string] : [ [string] ] , [string] : False } , } , } [EOL] logging . config . dictConfig ( log_settings ) [EOL] [EOL] [EOL] def performance_log ( id_param = None ) : [EOL] def config_decorator ( func ) : [EOL] @ wraps ( func ) async def wrapper ( * args , ** kwargs ) : [EOL] start = datetime . now ( ) [EOL] return_value = await func ( * args , ** kwargs ) [EOL] [EOL] time_taken = int ( ( datetime . now ( ) - start ) . total_seconds ( ) * [number] ) [EOL] id_arg = args [ id_param ] if id_param is not None else [string] [EOL] method = f"{ func . __qualname__ } [string] { id_arg } [string] " [EOL] [EOL] performance_logger . info ( [string] , method , time_taken , context . get ( [string] ) , ) [EOL] return return_value [EOL] [EOL] return wrapper [EOL] [EOL] return config_decorator [EOL] [EOL] [EOL] def audit_log ( request ) : [EOL] ip = request . headers . get ( [string] ) [EOL] if not ip : [EOL] ip = request . remote [EOL] [EOL] audit_logger . info ( [string] , ip , request . query . get ( [string] ) , request . query . get ( [string] ) , request . query . get ( [string] ) , context . get ( [string] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import builtins [EOL] import cryptography [EOL] import typing [EOL] from cryptography . x509 import Name [EOL] [EOL] from . constants import SUBJECT_FIELDS [EOL] [EOL] [EOL] def get_subject_order ( field ) : [EOL] [docstring] [EOL] order = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] field_name = field . split ( [string] ) [ [number] ] [EOL] try : [EOL] return order [ field_name ] [EOL] except KeyError : [EOL] return [number] [EOL] [EOL] [EOL] def stringify_x509_name ( name ) : [EOL] subject = [ ] [EOL] for field in name : [EOL] try : [EOL] subject . append ( [string] . format ( SUBJECT_FIELDS [ field . oid . dotted_string ] , field . value ) ) [EOL] except KeyError : [EOL] [comment] [EOL] subject . append ( [string] . format ( field . oid . dotted_string , field . value ) ) [EOL] return [string] . join ( list ( subject ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] [EOL] from . web import run [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( run ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import argparse [EOL] import logging [EOL] import typing [EOL] import argparse [EOL] import asyncio [EOL] import json [EOL] import logging [EOL] import uuid [EOL] [EOL] import aiotask_context as context [EOL] import uvloop [EOL] from aiohttp import web [EOL] [EOL] from . crypto import AppCrlRetriever , CertRetriever [EOL] from . enums import Environment [EOL] from . errors import ClientError [EOL] from . logging import configure_logging , performance_log [EOL] from . search import CertificateSearch [EOL] from . serialization import sertifikatsok_serialization [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ web . middleware async def error_middleware ( request , handler ) : [EOL] try : [EOL] return await handler ( request ) [EOL] except web . HTTPException : [comment] [EOL] raise [EOL] except ClientError as error : [EOL] return web . Response ( text = json . dumps ( { [string] : error . args [ [number] ] } , ensure_ascii = False ) , status = [number] , content_type = [string] , ) [EOL] except : [EOL] logger . exception ( [string] ) [EOL] return web . Response ( text = json . dumps ( { [string] : [string] } , ensure_ascii = False , ) , status = [number] , content_type = [string] , ) [EOL] [EOL] [EOL] @ web . middleware async def correlation_middleware ( request , handler ) : [EOL] correlation_id = str ( uuid . uuid4 ( ) ) [EOL] context . set ( key = [string] , value = correlation_id ) [EOL] request [ [string] ] = correlation_id [EOL] response = await handler ( request ) [EOL] response . headers [ [string] ] = correlation_id [EOL] return response [EOL] [EOL] [EOL] async def init_app ( app ) : [EOL] app [ [string] ] = AppCrlRetriever ( ) [EOL] app [ [string] ] = { Environment . TEST : CertRetriever . create ( Environment . TEST ) , Environment . PROD : CertRetriever . create ( Environment . PROD ) , } [EOL] [EOL] [EOL] @ performance_log ( ) async def api_endpoint ( request ) : [EOL] [docstring] [EOL] [EOL] certificate_search = CertificateSearch . create_from_request ( request ) [EOL] [EOL] search_response = await certificate_search . get_response ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] response = web . Response ( text = json . dumps ( search_response , ensure_ascii = False , default = sertifikatsok_serialization ) , status = [number] , content_type = [string] , ) [EOL] [EOL] if search_response . cacheable : [EOL] cache_control = [string] [EOL] else : [EOL] cache_control = [string] [EOL] [EOL] response . headers [ [string] ] = cache_control [EOL] [EOL] return response [EOL] [EOL] [EOL] def run ( ) : [EOL] asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ( ) ) [EOL] asyncio . get_event_loop ( ) . set_task_factory ( context . task_factory ) [EOL] [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] , action = [string] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] if args . log_level : [EOL] log_level = getattr ( logging , args . log_level ) [EOL] elif args . dev : [EOL] log_level = logging . DEBUG [EOL] else : [EOL] log_level = logging . INFO [EOL] configure_logging ( log_level , args . log_files ) [EOL] [EOL] app = web . Application ( middlewares = [ error_middleware , correlation_middleware ] ) [EOL] app . router . add_get ( [string] , api_endpoint ) [EOL] app . on_startup . append ( init_app ) [EOL] [EOL] if args . dev : [EOL] from aiohttp_swagger import setup_swagger [EOL] [EOL] setup_swagger ( app ) [EOL] [EOL] web . run_app ( app , port = args . port , host = args . host , path = args . path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class SertifikatSokError ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class ClientError ( SertifikatSokError ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class ServerError ( SertifikatSokError ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class CouldNotGetValidCRLError ( SertifikatSokError ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class ConfigurationError ( SertifikatSokError ) : [EOL] [docstring] [EOL] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Set [EOL] import logging [EOL] import crypto [EOL] import qcert [EOL] import api [EOL] import typing [EOL] import builtins [EOL] import enums [EOL] import asyncio [EOL] import logging [EOL] from typing import List [EOL] [EOL] import attr [EOL] import bonsai [EOL] [EOL] from . constants import ( EMAIL_REGEX , LDAP_RETRIES , LDAP_TIMEOUT , ORG_NUMBER_REGEX , PERSONAL_SERIAL_REGEX , ) [EOL] from . crypto import CertValidator [EOL] from . enums import CertType , Environment , SearchAttribute [EOL] from . errors import ClientError [EOL] from . logging import audit_log , performance_log [EOL] from . qcert import QualifiedCertificate , QualifiedCertificateSet [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ attr . s ( slots = True ) class CertificateSearch : [EOL] env = attr . ib ( ) [EOL] typ = attr . ib ( ) [EOL] query = attr . ib ( ) [EOL] search_attr = attr . ib ( ) [EOL] correlation_id = attr . ib ( ) [EOL] cert_validator = attr . ib ( ) [EOL] errors = attr . ib ( factory = list ) [EOL] warnings = attr . ib ( factory = list ) [EOL] _ldap_servers = attr . ib ( factory = list ) [EOL] results = attr . ib ( factory = list ) [EOL] [EOL] @ classmethod def create ( cls , env , typ , query , attr , cert_validator , correlation_id ) : [EOL] [EOL] if attr is None : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if typ == CertType . ENTERPRISE and ORG_NUMBER_REGEX . fullmatch ( query ) : [EOL] search_attr = SearchAttribute . SN [EOL] query = query . replace ( [string] , [string] ) [EOL] elif typ == CertType . PERSONAL and PERSONAL_SERIAL_REGEX . fullmatch ( query ) : [EOL] search_attr = SearchAttribute . SN [EOL] query = query [EOL] elif typ == CertType . PERSONAL and EMAIL_REGEX . fullmatch ( query ) : [EOL] search_attr = SearchAttribute . MAIL [EOL] query = bonsai . escape_filter_exp ( query ) [EOL] else : [EOL] search_attr = SearchAttribute . CN [EOL] query = bonsai . escape_filter_exp ( query ) [EOL] else : [EOL] search_attr = attr [EOL] query = bonsai . escape_filter_exp ( query ) [EOL] [EOL] return cls ( env , typ , query , search_attr , correlation_id , cert_validator ) [EOL] [EOL] @ classmethod def create_from_request ( cls , request ) : [EOL] [EOL] try : [EOL] env = Environment ( request . query . get ( [string] ) ) [EOL] except ValueError : [EOL] raise ClientError ( [string] ) [EOL] [EOL] raw_type = request . query . get ( [string] ) [EOL] if raw_type == [string] : [EOL] typ = CertType . ENTERPRISE [EOL] [comment] [EOL] elif raw_type in [ [string] , [string] ] : [EOL] typ = CertType . PERSONAL [EOL] else : [EOL] raise ClientError ( [string] ) [EOL] [EOL] query = request . query . get ( [string] ) [EOL] if not query : [EOL] raise ClientError ( [string] ) [EOL] [EOL] raw_attr = request . query . get ( [string] ) [EOL] if raw_attr is not None : [EOL] try : [EOL] attr = SearchAttribute ( raw_attr ) [EOL] except ValueError : [EOL] raise ClientError ( [string] ) [EOL] else : [EOL] attr = None [EOL] [EOL] cert_validator = CertValidator ( request . app [ [string] ] [ env ] , request . app [ [string] ] . get_retriever_for_request ( ) , ) [EOL] [EOL] audit_log ( request ) [EOL] [EOL] return cls . create ( env , typ , query , attr , cert_validator , request [ [string] ] , ) [EOL] [EOL] @ property def search_filter ( self ) : [EOL] return f" [string] { self . search_attr . value } [string] { self . query } [string] " [EOL] [EOL] @ performance_log ( ) async def query_buypass ( self ) : [EOL] logger . debug ( [string] ) [EOL] if self . env == Environment . TEST : [EOL] server = [string] [EOL] base = [string] [EOL] else : [EOL] server = [string] [EOL] base = [string] [EOL] [EOL] self . _ldap_servers . append ( server ) [EOL] [EOL] try : [EOL] self . results . extend ( await self . do_ldap_search ( server , base , retry = True ) ) [EOL] except ( bonsai . LDAPError , asyncio . TimeoutError ) : [EOL] logger . exception ( [string] ) [EOL] self . errors . append ( [string] ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] [EOL] @ performance_log ( ) async def query_commfides ( self ) : [EOL] logger . debug ( [string] ) [EOL] if self . env == Environment . TEST : [EOL] server = [string] [EOL] else : [EOL] server = [string] [EOL] [EOL] if self . typ == CertType . PERSONAL : [EOL] [comment] [EOL] [comment] [EOL] base = [string] [EOL] else : [EOL] base = [string] [EOL] [EOL] self . _ldap_servers . append ( server ) [EOL] [EOL] try : [EOL] self . results . extend ( await self . do_ldap_search ( server , base ) ) [EOL] except ( bonsai . LDAPError , asyncio . TimeoutError ) : [EOL] logger . exception ( [string] ) [EOL] self . errors . append ( [string] ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] [EOL] async def do_ldap_search ( self , server , base , retry = False ) : [EOL] [docstring] [EOL] client = bonsai . LDAPClient ( f" [string] { server }" ) [EOL] count = [number] [EOL] all_results = [ ] [EOL] search_filter = self . search_filter [EOL] logger . debug ( [string] , server ) [EOL] with ( await client . connect ( is_async = True , timeout = LDAP_TIMEOUT ) ) as conn : [EOL] while count < LDAP_RETRIES : [EOL] logger . debug ( [string] , search_filter , server ) [EOL] results = await conn . search ( base , bonsai . LDAPSearchScope . SUBTREE , search_filter , attrlist = [ [string] ] , ) [EOL] all_results += results [EOL] [EOL] if len ( results ) == [number] and retry : [EOL] certs_to_exclude = [string] [EOL] for result in results : [EOL] certs_to_exclude += f" [string] { str ( result . dn ) . split ( [string] ) [ [number] ] } [string] " [EOL] search_filter = [string] . format ( search_filter , certs_to_exclude ) [EOL] count += [number] [EOL] else : [EOL] count = LDAP_RETRIES + [number] [EOL] [EOL] logger . debug ( [string] , server ) [EOL] [comment] [EOL] [comment] [EOL] if len ( results ) == [number] and retry : [EOL] logger . warning ( [string] , self . search_filter , server , ) [EOL] self . warnings . append ( [string] ) [EOL] [EOL] return await self . _parse_ldap_results ( all_results , server , base ) [EOL] [EOL] @ performance_log ( id_param = [number] ) async def _parse_ldap_results ( self , search_results , server , base ) : [EOL] [docstring] [EOL] logger . debug ( [string] , server ) [EOL] [EOL] qualified_certs = [ ] [EOL] for result in search_results : [EOL] raw_cert = result . get ( [string] ) [EOL] if raw_cert is None or len ( raw_cert ) < [number] : [EOL] [comment] [EOL] continue [EOL] [EOL] try : [EOL] qualified_cert = await QualifiedCertificate . create ( raw_cert [ [number] ] , ( server , base ) , self . cert_validator , ) [EOL] except ValueError : [EOL] [comment] [EOL] logging . exception ( [string] ) [EOL] self . errors . append ( [string] ) [EOL] continue [EOL] [EOL] if qualified_cert . type in ( self . typ , CertType . UNKNOWN ) : [EOL] qualified_certs . append ( qualified_cert ) [EOL] [EOL] logger . debug ( [string] , server ) [EOL] return qualified_certs [EOL] [EOL] async def get_response ( self ) : [EOL] tasks = [ self . query_buypass , self . query_commfides ] [EOL] [EOL] if self . typ == CertType . PERSONAL and self . search_attr == SearchAttribute . SN : [EOL] [comment] [EOL] [comment] [EOL] ca_id = self . search_filter . split ( [string] ) [ [number] ] [EOL] if ca_id in ( [string] ) : [EOL] tasks = [ self . query_buypass ] [EOL] elif ca_id in ( [string] , [string] ) : [EOL] tasks = [ self . query_commfides ] [EOL] elif self . search_attr == SearchAttribute . MAIL : [EOL] [comment] [EOL] tasks = [ self . query_buypass ] [EOL] self . warnings . append ( [string] ) [EOL] [EOL] await asyncio . gather ( * [ task ( ) for task in tasks ] ) [EOL] self . errors . extend ( self . cert_validator . errors ) [EOL] return CertificateSearchResponse . create ( self ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True , slots = True ) class CertificateSearchResponse : [EOL] search = attr . ib ( ) [EOL] cert_sets = attr . ib ( ) [EOL] warnings = attr . ib ( ) [EOL] errors = attr . ib ( ) [EOL] [EOL] @ classmethod def create ( cls , search ) : [EOL] cert_sets = QualifiedCertificateSet . create_sets_from_certs ( search . results ) [EOL] return cls ( search , cert_sets , search . warnings , search . errors ) [EOL] [EOL] @ property def cacheable ( self ) : [EOL] return not self . errors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $enums.Environment$ 0 0 0 0 0 0 0 $enums.CertType$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $enums.SearchAttribute$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $crypto.CertValidator$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[qcert.QualifiedCertificate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $api.sertifikatsok.enums.Environment$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $api.sertifikatsok.crypto.CertValidator$ 0 0 0 0 0 0 0 0 0 0 $api.sertifikatsok.enums.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $api.sertifikatsok.enums.Environment$ 0 $builtins.str$ 0 $typing.Any$ 0 $None$ 0 $api.sertifikatsok.crypto.CertValidator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $CertificateSearch$ 0 0 0 0 0 0 0 $typing.List[qcert.QualifiedCertificate.Set]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $CertificateSearch$ 0 0 0 $typing.List[api.sertifikatsok.qcert.QualifiedCertificateSet]$ 0 0 0 0 0 $CertificateSearch$ 0 0 0 0 0 0 0 $CertificateSearch$ 0 $typing.List[api.sertifikatsok.qcert.QualifiedCertificateSet]$ 0 $CertificateSearch$ 0 0 0 $CertificateSearch$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Dict , Pattern [EOL] import api [EOL] import typing [EOL] import re [EOL] [EOL] from . enums import CertType [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] LDAP_TIMEOUT = [number] [EOL] LDAP_RETRIES = [number] [EOL] [EOL] ORG_NUMBER_REGEX = re . compile ( [string] ) [EOL] UNDERENHET_REGEX = re . compile ( [string] ) [EOL] PERSONAL_SERIAL_REGEX = re . compile ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] EMAIL_REGEX = re . compile ( [string] ) [EOL] [EOL] SUBJECT_FIELDS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] KEY_USAGES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] EXTENDED_KEY_USAGES = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] KNOWN_CERT_TYPES = { ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] , ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] , ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . ENTERPRISE , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , ( [string] , [string] ) : ( CertType . PERSONAL , [string] ) , } [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,builtins.str],typing.Tuple[api.sertifikatsok.enums.CertType,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from enum import Enum [EOL] [EOL] [EOL] class CertType ( Enum ) : [EOL] PERSONAL = [number] [EOL] ENTERPRISE = [number] [EOL] UNKNOWN = [number] [EOL] [EOL] [EOL] class Environment ( Enum ) : [EOL] TEST = [string] [EOL] PROD = [string] [EOL] [EOL] [EOL] class CertificateStatus ( Enum ) : [EOL] OK = [number] [EOL] EXPIRED = [number] [EOL] REVOKED = [number] [EOL] INVALID = [number] [EOL] UNKNOWN = [number] [EOL] [EOL] [EOL] class CertificateRoles ( Enum ) : [EOL] AUTH = [number] [EOL] SIGN = [number] [EOL] CRYPT = [number] [EOL] [EOL] [EOL] class SearchAttribute ( Enum ) : [EOL] CN = [string] [EOL] MAIL = [string] [EOL] OU = [string] [EOL] O = [string] [EOL] SN = [string] [EOL] CSN = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Set , Dict , Any , Union [EOL] import qcert [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] import enums [EOL] [docstring] [EOL] import base64 [EOL] import codecs [EOL] from datetime import datetime [EOL] from functools import singledispatch [EOL] from operator import attrgetter [EOL] from typing import Dict , Tuple , Union [EOL] [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . serialization import Encoding [EOL] [EOL] from . enums import ( CertificateRoles , CertificateStatus , CertType , Environment , SearchAttribute , ) [EOL] from . qcert import QualifiedCertificate , QualifiedCertificateSet [EOL] from . search import CertificateSearchResponse [EOL] [EOL] [EOL] @ singledispatch def sertifikatsok_serialization ( val ) : [EOL] [docstring] [EOL] return str ( val ) [EOL] [EOL] [EOL] @ sertifikatsok_serialization . register ( QualifiedCertificate ) def qualified_certificate ( val ) : [EOL] [EOL] dumped = { } [EOL] name , usage = _get_norwegian_display_name ( val ) [EOL] dumped [ [string] ] = name [EOL] info = { } [EOL] info [ [string] ] = usage [EOL] info [ [string] ] = format ( val . cert . serial_number , [string] ) [EOL] info [ [string] ] = str ( val . cert . serial_number ) [EOL] [EOL] [comment] [EOL] info [ [string] ] = codecs . encode ( val . cert . fingerprint ( hashes . SHA1 ( ) ) , [string] ) . decode ( [string] ) [EOL] info [ [string] ] = val . print_subject ( full = True ) [EOL] info [ [string] ] = val . issuer [EOL] info [ [string] ] = val . cert . not_valid_before . isoformat ( ) [EOL] info [ [string] ] = val . cert . not_valid_after . isoformat ( ) [EOL] info [ [string] ] = val . get_key_usages ( ) [EOL] eku = val . get_extended_key_usages ( ) [EOL] info [ [string] ] = eku if eku != None else [string] [EOL] [EOL] [comment] [EOL] if val . type == CertType . UNKNOWN : [EOL] info [ [string] ] = f" [string] { val . description } [string] " [EOL] else : [EOL] info [ [string] ] = val . description [EOL] [EOL] info [ [string] ] = _get_norwegian_cert_status ( val . status , val . revocation_date ) [EOL] [EOL] dumped [ [string] ] = info [EOL] dumped [ [string] ] = base64 . b64encode ( val . cert . public_bytes ( Encoding . DER ) ) . decode ( [string] ) [EOL] [EOL] return dumped [EOL] [EOL] [EOL] @ sertifikatsok_serialization . register ( QualifiedCertificateSet ) def qualified_certificate_set ( val ) : [EOL] dumped = { } [EOL] [EOL] dumped [ [string] ] = [ ] [EOL] if val . underenhet : [EOL] dumped [ [string] ] . append ( [string] ) [EOL] if val . typ == CertType . UNKNOWN : [EOL] dumped [ [string] ] . append ( [string] ) [EOL] [EOL] dumped [ [string] ] = val . issuer [EOL] [EOL] if [string] in val . issuer : [EOL] dumped [ [string] ] = [string] [EOL] elif [string] in val . issuer : [EOL] dumped [ [string] ] = [string] [EOL] [EOL] dumped [ [string] ] = _get_norwegian_cert_status ( val . status , None ) [EOL] [EOL] dumped [ [string] ] = val . org_number [EOL] dumped [ [string] ] = val . subject [EOL] dumped [ [string] ] = val . valid_from [EOL] dumped [ [string] ] = val . valid_to [EOL] [EOL] dumped [ [string] ] = val . ldap [EOL] dumped [ [string] ] = [ ] [EOL] [EOL] dumped [ [string] ] = val . certs [EOL] [EOL] return dumped [EOL] [EOL] [EOL] @ sertifikatsok_serialization . register ( CertificateSearchResponse ) def certificate_search ( val ) : [EOL] result = { } [EOL] [EOL] errors = set ( ) [EOL] for error in val . errors + val . warnings : [EOL] errors . add ( _get_norwegian_error_message ( error ) ) [EOL] [EOL] result [ [string] ] = list ( errors ) [EOL] [EOL] result [ [string] ] = [ ] [EOL] for cert_set in val . cert_sets : [EOL] result [ [string] ] . append ( cert_set ) [EOL] [EOL] result [ [string] ] . sort ( key = attrgetter ( [string] ) , reverse = True ) [EOL] [EOL] [comment] [EOL] if ( val . search . typ == CertType . ENTERPRISE [EOL] and val . search . search_attr == SearchAttribute . SN [EOL] and val . search . results ) : [EOL] subject = result [ [string] ] [ [number] ] . subject . split ( [string] ) [EOL] try : [EOL] org_name = [ part . split ( [string] ) [ [number] ] for part in subject if part . startswith ( [string] ) ] [ [number] ] [EOL] except IndexError : [EOL] result [ [string] ] = val . search . query [EOL] else : [EOL] result [ [string] ] = [string] . format ( org_name , val . search . query ) [EOL] else : [EOL] result [ [string] ] = val . search . query [EOL] [EOL] if val . search . env == Environment . TEST : [EOL] search_env = [string] [EOL] elif val . search . env == Environment . PROD : [EOL] search_env = [string] [EOL] else : [EOL] search_env = [string] [EOL] [EOL] if val . search . typ == CertType . PERSONAL : [EOL] search_type = [string] [EOL] elif val . search . typ == CertType . ENTERPRISE : [EOL] search_type = [string] [EOL] else : [EOL] search_type = [string] [EOL] [EOL] result [ [string] ] = { [string] : search_type , [string] : val . search . search_filter , [string] : search_env , [string] : [string] . join ( val . search . _ldap_servers ) , [string] : val . search . correlation_id , } [EOL] [EOL] return result [EOL] [EOL] [EOL] def _get_norwegian_cert_status ( cert_status , revocation_date ) : [EOL] if cert_status == CertificateStatus . OK : [EOL] return [string] [EOL] elif cert_status == CertificateStatus . EXPIRED : [EOL] return [string] [EOL] elif cert_status == CertificateStatus . REVOKED : [EOL] if revocation_date : [EOL] return f" [string] { revocation_date } [string] " [EOL] return [string] [EOL] elif cert_status == CertificateStatus . INVALID : [EOL] return [string] [EOL] return [string] [EOL] [EOL] [EOL] def _get_norwegian_display_name ( cert ) : [EOL] [docstring] [EOL] if len ( cert . roles ) == [number] : [EOL] return [string] , [string] [EOL] elif CertificateRoles . SIGN in cert . roles : [EOL] return [string] , [string] [EOL] elif CertificateRoles . CRYPT in cert . roles and CertificateRoles . AUTH in cert . roles : [EOL] return [string] , [string] [EOL] elif CertificateRoles . CRYPT in cert . roles : [EOL] return [string] , [string] [EOL] elif CertificateRoles . AUTH in cert . roles : [EOL] return [string] , [string] [EOL] return [string] , [string] [EOL] [EOL] [EOL] def _get_norwegian_error_message ( error_code ) : [EOL] if error_code == [string] : [EOL] return [string] [EOL] if error_code == [string] : [EOL] return [string] [EOL] if error_code == [string] : [EOL] return ( [string] [string] ) [EOL] if error_code == [string] : [EOL] return ( [string] [string] ) [EOL] if error_code == [string] : [EOL] return ( [string] [string] ) [EOL] if error_code == [string] : [EOL] return ( [string] [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0