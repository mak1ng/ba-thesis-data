[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import os [EOL] import sys [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , ] [EOL] [EOL] napoleon_google_docstring = False [EOL] napoleon_use_param = False [EOL] napoleon_use_ivar = True [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
	0
import codecs [EOL] [EOL] def encode_macaroon ( macaroon ) : [EOL] encoded_macaroon = codecs . encode ( macaroon , [string] ) [EOL] [EOL] return encoded_macaroon [EOL] [EOL] def read_file ( file_path ) : [EOL] opened_file = open ( file_path , [string] ) . read ( ) [EOL] [EOL] return opened_file	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import builtins [EOL] import abc [EOL] from typing import Dict , List , Tuple [EOL] import json [EOL] [EOL] class LNDClientAbstraction ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abc . abstractmethod def address_new ( self , address_type = None ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channel_close ( self , funding_txid , output_index ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channel_open ( self , spend_unconfirmed , push_sat , remote_csv_delay , private , node_pubkey , minimum_confirmations , node_pubkey_string , local_funding_amount , sat_per_byte , min_htlc_msat , target_confirmations ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channel_policy_update ( self , chan_point , time_lock_delta , base_fee_msat , fee_rate , is_global ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channels_balance ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channels_closed ( self , cooperative , local_force , remote_force , breach , funding_canceled , abandoned ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channels_list ( self , active_only , inactive_only , public_only , private_only ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channels_open ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def channels_pending ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def fee_estimate ( self , target_confirmations ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def fee_report ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def generate_seed ( self , aezeed_passphrase = None , seed_entropy = None ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def graph_describe ( self , include_unannounced = False ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def graph_info ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def graph_channel_info ( self , channel_id ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def graph_node_info ( self , pub_key , include_channels ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def graph_query_routes ( self , pub_key , amount , final_cltv_delta , fee_fixed_limit , fee_percent_limit , ignored_nodes , source_pub_key , use_mission_control ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def info ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def invoice_add ( self , amount_paid_must , settle_date , add_index , description_hash , r_preimage , state , cltv_expiry , route_hints , r_hash , creation_date , settle_index , memo , private , expiry , fallback_address , settled , amount_paid , payment_request , amount_paid_sat , value ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def invoice_lookup ( self , r_hash_string , r_hash ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def invoices_list ( self , pending_only , index_offset , num_max_invoices , reverse ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def invoices_subscribe ( self , add_index , settle_index ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def message_sign ( self , msg ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def message_verify ( self , msg , signiture ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def payment_send ( self , outgoing_channel_id , dest , fee_limit , payment_hash_string , dest_string , final_cltv_delta , payment_hash , payment_request , cltv_limit , amount ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def payment_route ( self , route , payment_hash , payment_hash_string ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def payments_list ( self , include_incomplete ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def payments_delete_all ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def peers_list ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def peer_disconnect ( self , pub_key ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def peer_connect ( self , perm , address ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def transaction_send ( self , send_all , target_confirmations , amount , sat_per_byte , address ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def transactions_list ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def unspent_list ( self , minimum_confirmations , maximum_confirmations ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def wallet_balance ( self ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def wallet_init ( self , wallet_password , cipher_seed_mnemonic = None , aezeed_passphrase = None , recovery_window = [number] , channel_backups = None ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def wallet_unlock ( self , wallet_password , recovery_window = [number] , channel_backups = None ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.bool$ 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.dict$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.float$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.list$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.list$ 0 $builtins.bytes$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 $builtins.dict$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.bytes$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.dict$ 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import lnd [EOL] import typing [EOL] import builtins [EOL] from typing import List , Tuple [EOL] [EOL] from lnd . client . abstraction import LNDClientAbstraction [EOL] [EOL] class LNDClientBase ( object ) : [EOL] [docstring] [EOL] [EOL] _implementor = ... [EOL] [EOL] def __init__ ( self , implementor ) : [EOL] self . _implementor = implementor [EOL] [EOL] def address_new ( self , address_type = None ) : [EOL] response = self . _implementor . address_new ( address_type ) [EOL] [EOL] return response [EOL] [EOL] def channel_close ( self , funding_txid , output_index ) : [EOL] response = self . _implementor . channel_close ( funding_txid , output_index ) [EOL] [EOL] return response [EOL] [EOL] def channel_open ( self , spend_unconfirmed , push_sat , remote_csv_delay , private , node_pubkey , minimum_confirmations , node_pubkey_string , local_funding_amount , sat_per_byte , min_htlc_msat , target_confirmations ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def channel_policy_update ( self , chan_point , time_lock_delta , base_fee_msat , fee_rate , is_global ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def channels_balance ( self ) : [EOL] response = self . _implementor . channels_balance ( ) [EOL] [EOL] return response [EOL] [EOL] def channels_closed ( self , cooperative , local_force , remote_force , breach , funding_canceled , abandoned ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def channels_list ( self , active_only = False , inactive_only = False , public_only = False , private_only = False ) : [EOL] response = self . _implementor . channels_list ( active_only , inactive_only , public_only , private_only ) [EOL] [EOL] return response [EOL] [EOL] def channels_open ( self ) : [EOL] response = self . _implementor . channels_open ( ) [EOL] [EOL] return response [EOL] [EOL] def channels_pending ( self ) : [EOL] response = self . _implementor . channels_pending ( ) [EOL] [EOL] return response [EOL] [EOL] def fee_estimate ( self , target_confirmations ) : [EOL] response = self . _implementor . fee_estimate ( target_confirmations ) [EOL] [EOL] return response [EOL] [EOL] def fee_report ( self ) : [EOL] response = self . _implementor . fee_report ( ) [EOL] [EOL] return response [EOL] [EOL] def generate_seed ( self , aezeed_passphrase = None , seed_entropy = None ) : [EOL] response = self . _implementor . generate_seed ( aezeed_passphrase , seed_entropy ) [EOL] [EOL] return response [EOL] [EOL] def graph_describe ( self , include_unannounced = False ) : [EOL] response = self . _implementor . graph_describe ( include_unannounced ) [EOL] [EOL] return response [EOL] [EOL] def graph_info ( self ) : [EOL] response = self . _implementor . graph_info ( ) [EOL] [EOL] return response [EOL] [EOL] def graph_channel_info ( self , channel_id ) : [EOL] response = self . _implementor . graph_channel_info ( channel_id ) [EOL] [EOL] return response [EOL] [EOL] def graph_node_info ( self , pub_key , include_channels = False ) : [EOL] response = self . _implementor . graph_node_info ( pub_key , include_channels ) [EOL] [EOL] return response [EOL] [EOL] def graph_query_routes ( self , pub_key , amount , final_cltv_delta , fee_fixed_limit , fee_percent_limit , ignored_nodes , source_pub_key , use_mission_control ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def info ( self ) : [EOL] response = self . _implementor . info ( ) [EOL] [EOL] return response [EOL] [EOL] def invoice_add ( self , amount_paid_must , settle_date , add_index , description_hash , r_preimage , state , cltv_expiry , route_hints , r_hash , creation_date , settle_index , memo , private , expiry , fallback_address , settled , amount_paid , payment_request , amount_paid_sat , value ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def invoice_lookup ( self , r_hash_string , r_hash ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def invoices_list ( self , pending_only , index_offset , reverse , num_max_invoices ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def invoices_subscribe ( self , add_index , settle_index ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def message_sign ( self , msg ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def message_verify ( self , msg , signiture ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def payment_send ( self , outgoing_channel_id , dest , fee_limit , payment_hash_string , dest_string , final_cltv_delta , payment_hash , payment_request , cltv_limit , amount ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def payment_route ( self , route , payment_hash , payment_hash_string ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def payments_list ( self , include_incomplete = False ) : [EOL] response = self . _implementor . payments_list ( include_incomplete ) [EOL] [EOL] return response [EOL] [EOL] def payments_delete_all ( self ) : [EOL] response = self . _implementor . payments_delete_all ( ) [EOL] [EOL] return response [EOL] [EOL] def peers_list ( self ) : [EOL] response = self . _implementor . peers_list ( ) [EOL] [EOL] return response [EOL] [EOL] def peer_disconnect ( self , pub_key ) : [EOL] response = self . _implementor . peer_disconnect ( pub_key ) [EOL] [EOL] return response [EOL] [EOL] def peer_connect ( self , perm , address ) : [EOL] response = self . _implementor . peer_connect ( perm , address ) [EOL] [EOL] return response [EOL] [EOL] def transaction_send ( self , send_all , target_confirmations , amount , sat_per_byte , address ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def transactions_list ( self ) : [EOL] response = self . _implementor . transactions_list ( ) [EOL] [EOL] return response [EOL] [EOL] def unspent_list ( self , minimum_confirmations , maximum_confirmations ) : [EOL] response = self . _implementor . unspent_list ( minimum_confirmations , maximum_confirmations ) [EOL] [EOL] return response [EOL] [EOL] def wallet_balance ( self ) : [EOL] response = self . _implementor . wallet_balance ( ) [EOL] [EOL] return response [EOL] [EOL] def wallet_init ( self , wallet_password , cipher_seed_mnemonic = None , aezeed_passphrase = None , recovery_window = [number] , channel_backups = None ) : [EOL] response = self . _implementor . wallet_init ( wallet_password , cipher_seed_mnemonic , aezeed_passphrase , recovery_window , channel_backups ) [EOL] [EOL] return response [EOL] [EOL] def wallet_unlock ( self , wallet_password , recovery_window = [number] , channel_backups = None ) : [EOL] response = self . _implementor . wallet_unlock ( wallet_password , recovery_window , channel_backups ) [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lnd.client.abstraction.LNDClientAbstraction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lnd.client.abstraction.LNDClientAbstraction$ 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.bool$ 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.dict$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.float$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.list$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.list$ 0 $builtins.bytes$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 $builtins.dict$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.bytes$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.dict$ 0 $builtins.bytes$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bool$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 $typing.List[builtins.str]$ 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 0 0 $builtins.bytes$ 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0
from typing import Any , Optional , Tuple [EOL] import lnd [EOL] import typing [EOL] import os [EOL] import pytest [EOL] import time [EOL] [EOL] import urllib3 [EOL] urllib3 . disable_warnings ( urllib3 . exceptions . InsecureRequestWarning ) [EOL] [EOL] from lnd . client . rest import LND [EOL] [EOL] URL = [string] [EOL] CERT_PATH = ( [string] , [string] ) [EOL] MACAROON_PATH = [string] [EOL] [EOL] TEST_ENV = os . environ . get ( [string] , None ) [EOL] if TEST_ENV == [string] : [EOL] CERT_PATH = ( [string] , [string] ) [EOL] MACAROON_PATH = [string] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def state ( ) : [EOL] return { } [EOL] [EOL] @ pytest . fixture def lnd ( ) : [EOL] lnd = LND ( URL , CERT_PATH , MACAROON_PATH , ssl_verify = False ) [EOL] [EOL] return lnd [EOL] [EOL] @ pytest . mark . int def test_generate_seed ( state , lnd ) : [EOL] mnemonic = lnd . generate_seed ( ) . json ( ) [EOL] [EOL] cipher_seed_mnemonic = mnemonic [ [string] ] [EOL] enciphered_seed = mnemonic [ [string] ] [EOL] [EOL] assert isinstance ( cipher_seed_mnemonic , list ) [EOL] assert isinstance ( enciphered_seed , str ) [EOL] [EOL] state [ [string] ] = cipher_seed_mnemonic [EOL] [EOL] @ pytest . mark . int def test_wallet_init ( state , lnd ) : [EOL] cipher_seed_mnemonic = state [ [string] ] [EOL] ret = lnd . wallet_init ( [string] , cipher_seed_mnemonic = cipher_seed_mnemonic ) [EOL] [EOL] assert ret . status_code == [number] [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] @ pytest . mark . int def test_info ( state , lnd ) : [EOL] ret = lnd . info ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_address_new ( state , lnd ) : [EOL] ret = lnd . address_new ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_channels_balance ( state , lnd ) : [EOL] ret = lnd . channels_balance ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_channels_list ( state , lnd ) : [EOL] ret = lnd . channels_list ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ pytest . mark . int def test_fee_report ( state , lnd ) : [EOL] ret = lnd . fee_report ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_graph_describe ( state , lnd ) : [EOL] ret = lnd . graph_describe ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_graph_info ( state , lnd ) : [EOL] ret = lnd . graph_info ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_payments_list ( state , lnd ) : [EOL] ret = lnd . payments_list ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_peers_list ( state , lnd ) : [EOL] ret = lnd . peers_list ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL] [EOL] @ pytest . mark . int def test_wallet_balance ( state , lnd ) : [EOL] ret = lnd . wallet_balance ( ) [EOL] print ( ret . json ( ) ) [EOL] assert ret . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] from lnd . utils import encode_macaroon , read_file [EOL] [EOL] MACAROON_PATH = [string] [EOL] [EOL] FAKE_MACAROON = [string] [EOL] [EOL] def test_macaroon_encoding ( ) : [EOL] macaroon = read_file ( MACAROON_PATH ) [EOL] encoded_macaroon = encode_macaroon ( macaroon ) [EOL] [EOL] assert isinstance ( encoded_macaroon , bytes ) [EOL] assert encoded_macaroon == FAKE_MACAROON	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from lnd . client import LNDClientBase [EOL] from lnd . client . abstraction import LNDClientAbstraction [EOL] [EOL] [EOL] def dummy_implementor ( Cls ) : [EOL] class NewCls ( object ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] def fake_method ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] for method in Cls . __dict__ . get ( [string] ) : [EOL] setattr ( NewCls , method , fake_method ) [EOL] [EOL] return NewCls [EOL] [EOL] @ dummy_implementor class DummyClientImplmentor ( LNDClientAbstraction ) : [EOL] pass [EOL] [EOL] class DummyClient ( LNDClientBase ) : [EOL] pass [EOL] [EOL] @ pytest . fixture def client ( ) : [EOL] [comment] [EOL] return DummyClient ( DummyClientImplmentor ( ) ) [EOL] [EOL] def test_implements_address_new ( client ) : [EOL] _ = client . address_new ( ) [EOL] _ = client . address_new ( [string] ) [EOL] [EOL] def test_implements_channel_close ( client ) : [EOL] _ = client . channel_close ( [string] , [number] ) [EOL] [EOL] def test_channels_balance ( client ) : [EOL] _ = client . channels_balance ( ) [EOL] [EOL] def test_channels_list ( client ) : [EOL] _ = client . channels_list ( ) [EOL] _ = client . channels_list ( active_only = True ) [EOL] _ = client . channels_list ( inactive_only = True ) [EOL] _ = client . channels_list ( public_only = True ) [EOL] _ = client . channels_list ( private_only = True ) [EOL] [EOL] def test_channels_open ( client ) : [EOL] _ = client . channels_open ( ) [EOL] [EOL] def test_channels_pending ( client ) : [EOL] _ = client . channels_pending ( ) [EOL] [EOL] def test_fee_estimate ( client ) : [EOL] _ = client . fee_estimate ( target_confirmations = [number] ) [EOL] [EOL] def test_fee_report ( client ) : [EOL] _ = client . fee_report ( ) [EOL] [EOL] def test_generate_seed ( client ) : [EOL] _ = client . generate_seed ( ) [EOL] _ = client . generate_seed ( aezeed_passphrase = [string] ) [EOL] _ = client . generate_seed ( seed_entropy = [string] ) [EOL] [EOL] def test_graph_describe ( client ) : [EOL] _ = client . graph_describe ( include_unannounced = True ) [EOL] [EOL] def test_graph_info ( client ) : [EOL] _ = client . graph_info ( ) [EOL] [EOL] def test_graph_channel_info ( client ) : [EOL] _ = client . graph_channel_info ( [string] ) [EOL] [EOL] def test_graph_node_info ( client ) : [EOL] _ = client . graph_node_info ( [string] , True ) [EOL] [EOL] def test_info ( client ) : [EOL] _ = client . info ( ) [EOL] [EOL] def test_payments_list ( client ) : [EOL] _ = client . payments_list ( True ) [EOL] [EOL] def test_payments_delete_all ( client ) : [EOL] _ = client . payments_delete_all ( ) [EOL] [EOL] def test_peers_list ( client ) : [EOL] _ = client . peers_list ( ) [EOL] [EOL] def test_peer_disconnect ( client ) : [EOL] _ = client . peer_disconnect ( [string] ) [EOL] [EOL] def test_peer_connect ( client ) : [EOL] _ = client . peer_connect ( True , address = ( [string] , [string] ) ) [EOL] [EOL] def test_transactions_list ( client ) : [EOL] _ = client . transactions_list ( ) [EOL] [EOL] def test_unspent_list ( client ) : [EOL] _ = client . unspent_list ( [number] , [number] ) [EOL] [EOL] def test_wallet_balance ( client ) : [EOL] _ = client . wallet_balance ( ) [EOL] [EOL] def test_wallet_init ( client ) : [EOL] _ = client . wallet_init ( [string] ) [EOL] _ = client . wallet_init ( [string] , cipher_seed_mnemonic = [ [string] , [string] , [string] ] , aezeed_passphrase = [string] , recovery_window = [number] ) [EOL] [EOL] def test_wallet_unlock ( client ) : [EOL] _ = client . wallet_unlock ( [string] ) [EOL] _ = client . wallet_unlock ( [string] , [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import lnd [EOL] import typing [EOL] import tests [EOL] import pytest [EOL] import requests [EOL] [EOL] from lnd . client . rest import LND , LNDRESTClient , LNDRESTClientError [EOL] [EOL] URL = [string] [EOL] CERT_PATH = [string] [EOL] MACAROON_PATH = [string] [EOL] [EOL] class MockResponse : [EOL] @ staticmethod def json ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def lnd_rest_client ( monkeypatch ) : [EOL] lnd = LNDRESTClient ( URL , CERT_PATH , MACAROON_PATH , ssl_verify = False ) [EOL] [EOL] def mock_get ( * args , ** kwargs ) : [EOL] return MockResponse ( ) [EOL] [EOL] def mock_post ( * args , ** kwargs ) : [EOL] return MockResponse ( ) [EOL] [EOL] monkeypatch . setattr ( requests , [string] , mock_get ) [EOL] monkeypatch . setattr ( requests , [string] , mock_post ) [EOL] [EOL] return lnd [EOL] [EOL] def test_rest_client_initialize ( lnd_rest_client ) : [EOL] assert lnd_rest_client . url == URL [EOL] assert lnd_rest_client . certificate_path == CERT_PATH [EOL] assert lnd_rest_client . macaroon_path == MACAROON_PATH [EOL] assert lnd_rest_client . ssl_verify == False [EOL] [EOL] def test_client_implements_rest ( lnd_rest_client ) : [EOL] assert isinstance ( lnd_rest_client , LNDRESTClient ) [EOL] [EOL] def test_client_endpoint_method ( lnd_rest_client ) : [EOL] route = [string] [EOL] [EOL] assert lnd_rest_client . _endpoint ( route ) == f'{ URL }{ route }' [EOL] [EOL] def test_client_get_request ( lnd_rest_client ) : [EOL] result = lnd_rest_client . _get_request ( [string] ) [EOL] [EOL] assert result . json ( ) . get ( [string] ) == [string] [EOL] [EOL] def test_client_handle_error ( lnd_rest_client ) : [EOL] error_response = MockResponse ( ) [EOL] [EOL] def json_error ( ) : [EOL] return { [string] : [string] } [EOL] [EOL] setattr ( error_response , [string] , json_error ) [EOL] [EOL] with pytest . raises ( LNDRESTClientError ) : [EOL] lnd_rest_client . _handle_error ( error_response ) [EOL] [EOL] def test_client_post_request ( lnd_rest_client ) : [EOL] result = lnd_rest_client . _post_request ( [string] , { [string] : [string] } ) [EOL] [EOL] assert result . json ( ) . get ( [string] ) == [string] [EOL] [EOL] def test_info ( lnd_rest_client ) : [EOL] response = lnd_rest_client . info ( ) [EOL] print ( response ) [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_generate_seed ( lnd_rest_client ) : [EOL] response = lnd_rest_client . generate_seed ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] response = lnd_rest_client . generate_seed ( aezeed_passphrase = [string] , seed_entropy = [string] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_address_new ( lnd_rest_client ) : [EOL] response = lnd_rest_client . address_new ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] response = lnd_rest_client . address_new ( [string] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_channels_balance ( lnd_rest_client ) : [EOL] response = lnd_rest_client . channels_balance ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_channels_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . channels_list ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_fee_estimate ( lnd_rest_client ) : [EOL] response = lnd_rest_client . fee_estimate ( [number] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_fee_report ( lnd_rest_client ) : [EOL] response = lnd_rest_client . fee_report ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_graph_describe ( lnd_rest_client ) : [EOL] response = lnd_rest_client . graph_describe ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_graph_info ( lnd_rest_client ) : [EOL] response = lnd_rest_client . graph_info ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_graph_channel_info ( lnd_rest_client ) : [EOL] response = lnd_rest_client . graph_channel_info ( [string] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_graph_node_info ( lnd_rest_client ) : [EOL] response = lnd_rest_client . graph_node_info ( [string] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_invoices_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . invoices_list ( True , [number] , True ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_invoices_subsribe ( lnd_rest_client ) : [EOL] response = lnd_rest_client . invoices_subscribe ( [string] , [string] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_payments_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . payments_list ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_peers_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . peers_list ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_transactions_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . transactions_list ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_unspent_list ( lnd_rest_client ) : [EOL] response = lnd_rest_client . unspent_list ( [number] , [number] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_wallet_balance ( lnd_rest_client ) : [EOL] response = lnd_rest_client . wallet_balance ( ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_lnd_wallet_init ( lnd_rest_client ) : [EOL] response = lnd_rest_client . wallet_init ( [string] , [ [string] ] , [string] , [number] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_lnd_wallet_unlock ( lnd_rest_client ) : [EOL] response = lnd_rest_client . wallet_unlock ( [string] , [number] ) [EOL] [EOL] assert isinstance ( response , MockResponse ) [EOL] [EOL] def test_lnd_client_initialize ( ) : [EOL] lnd = LND ( URL , CERT_PATH , MACAROON_PATH ) [EOL] [EOL] assert isinstance ( lnd . _implementor , LNDRESTClient ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0