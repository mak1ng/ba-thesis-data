import pathlib [EOL] import pathlib [EOL] [EOL] from setuptools import setup [EOL] [EOL] [comment] [EOL] HERE = pathlib . Path ( __file__ ) . parent [EOL] [EOL] [comment] [EOL] README = ( HERE / [string] ) . read_text ( ) [EOL] [EOL] [comment] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = README , long_description_content_type = [string] , url = [string] , author = [string] , author_email = [string] , license = [string] , classifiers = [ [string] , [string] , [string] , ] , packages = [ [string] ] , include_package_data = True , install_requires = [ [string] ] , entry_points = { } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Type , Any , Dict [EOL] import builtins [EOL] import typing [EOL] from . schema import get_openapi_schema [EOL] [EOL] [EOL] class OpenApiParam ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , location , data_type = None , default = None , required = True ) : [EOL] self . name = name [EOL] self . location = location [EOL] self . data_type = data_type [EOL] self . default = default [EOL] self . required = required [EOL] [EOL] def as_dict ( self ) : [EOL] [docstring] [EOL] openapi_dict = { [string] : self . required , [string] : self . name , [string] : self . location } [EOL] [EOL] schema = { } [EOL] [EOL] if self . data_type is not None : [EOL] schema = get_openapi_schema ( self . data_type ) [EOL] if self . default is not None : [EOL] schema [ [string] ] = self . default [EOL] [EOL] schema [ [string] ] = self . name . title ( ) [EOL] openapi_dict [ [string] ] = schema [EOL] return openapi_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Type[typing.Any]$ 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0
from typing import List , Union , Any , Dict [EOL] import marshmallow [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] import marshmallow [EOL] [EOL] [EOL] def get_openapi_schema_from_marshmallow_field ( marshmallow_field ) : [EOL] [docstring] [EOL] if isinstance ( marshmallow_field , marshmallow . fields . Nested ) : [EOL] if isinstance ( marshmallow_field . nested , str ) : [EOL] return { [string] : f' [string] { strip_schema_from_name ( marshmallow_field . nested ) }' } [EOL] else : [EOL] return { [string] : f' [string] { strip_schema_from_name ( marshmallow_field . nested . __name__ ) }' } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . String ) : [EOL] return { [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . Boolean ) : [EOL] return { [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . Integer ) : [EOL] return { [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . Float ) : [EOL] return { [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . Date ) : [EOL] return { [string] : [string] , [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . DateTime ) : [EOL] return { [string] : [string] , [string] : [string] } [EOL] if isinstance ( marshmallow_field , marshmallow . fields . List ) : [EOL] return { [string] : [string] , [string] : get_openapi_schema_from_marshmallow_field ( marshmallow_field . inner ) } [EOL] [EOL] [EOL] def get_openapi_schema_from_mashmallow_schema ( data_type , reference = True ) : [EOL] [docstring] [EOL] class_name = strip_schema_from_name ( data_type . __name__ ) [EOL] if reference : [EOL] return { [string] : f' [string] { class_name }' } [EOL] if issubclass ( data_type , marshmallow . Schema ) : [EOL] openapi_schema = { class_name : { [string] : class_name , [string] : [ name for name , field in data_type . _declared_fields . items ( ) if field . required ] , [string] : [string] , [string] : { name : get_openapi_schema_from_marshmallow_field ( field ) for name , field in data_type . _declared_fields . items ( ) } } } [EOL] for _ , field in data_type . _declared_fields . items ( ) : [EOL] if isinstance ( field , marshmallow . fields . Nested ) : [EOL] nested_schema = field . nested [EOL] if isinstance ( nested_schema , str ) : [EOL] nested_schema = marshmallow . class_registry . get_class ( nested_schema ) [EOL] if strip_schema_from_name ( nested_schema . __name__ ) not in openapi_schema . keys ( ) : [EOL] openapi_schema . update ( get_openapi_schema_from_mashmallow_schema ( nested_schema , reference = reference ) ) [EOL] return openapi_schema [EOL] [EOL] [EOL] def strip_schema_from_name ( name ) : [EOL] return name [ : - [number] ] if name . endswith ( [string] ) else name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , List , Union , Any , Type [EOL] import path [EOL] import builtins [EOL] import typing [EOL] import security [EOL] import openapi_specgen [EOL] from typing import List , Optional [EOL] [EOL] from . path import OpenApiPath [EOL] from . schema import get_openapi_schema , get_openapi_type [EOL] from . security import OpenApiSecurity [EOL] [EOL] [EOL] class OpenApi ( ) : [EOL] [docstring] [EOL] version = [string] [EOL] title = None [EOL] paths = None [EOL] security = None [EOL] [EOL] def __init__ ( self , title , paths , security = None ) : [EOL] [docstring] [EOL] self . title = title [EOL] self . paths = paths [EOL] self . security = security [EOL] [EOL] def as_dict ( self ) : [EOL] [docstring] [EOL] openapi_dict = { [string] : self . version , [string] : { [string] : self . title , [string] : self . version } , [string] : { } , [string] : { [string] : { } } } [EOL] for openapi_path in self . paths : [EOL] if openapi_dict [ [string] ] . get ( openapi_path . path ) is None : [EOL] openapi_dict [ [string] ] [ openapi_path . path ] = { } [EOL] openapi_dict [ [string] ] [ openapi_path . path ] . update ( openapi_path . as_dict ( ) [ openapi_path . path ] ) [EOL] [EOL] if openapi_path . request_body : [EOL] if get_openapi_type ( openapi_path . request_body ) == [string] : [EOL] openapi_dict [ [string] ] [ [string] ] . update ( get_openapi_schema ( openapi_path . request_body , reference = False ) ) [EOL] [EOL] for param in openapi_path . params : [EOL] if get_openapi_type ( param . data_type ) == [string] : [EOL] openapi_dict [ [string] ] [ [string] ] . update ( get_openapi_schema ( param . data_type , reference = False ) ) [EOL] [EOL] for resp in openapi_path . responses : [EOL] if get_openapi_type ( resp . data_type ) == [string] : [EOL] openapi_dict [ [string] ] [ [string] ] . update ( get_openapi_schema ( resp . data_type , reference = False ) ) [EOL] if self . security : [EOL] openapi_dict [ [string] ] = self . security . get_security_reference ( ) [EOL] openapi_dict [ [string] ] [ [string] ] = self . security . as_dict ( ) [EOL] [EOL] return openapi_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Dict [EOL] import builtins [EOL] import typing [EOL] from . schema import get_openapi_schema [EOL] [EOL] [EOL] class OpenApiResponse ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , descr , status_code = [string] , data_type = None , http_content_type = [string] ) : [EOL] [EOL] self . descr = descr [EOL] self . data_type = data_type [EOL] self . status_code = status_code [EOL] self . http_content_type = http_content_type [EOL] [EOL] def as_dict ( self ) : [EOL] [docstring] [EOL] openapi_dict = { self . status_code : { [string] : self . descr } } [EOL] [EOL] if self . data_type is None : [EOL] return openapi_dict [EOL] [EOL] openapi_dict [ self . status_code ] [ [string] ] = { self . http_content_type : { [string] : get_openapi_schema ( self . data_type ) } } [EOL] [EOL] return openapi_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . openapi import OpenApi [EOL] from . param import OpenApiParam [EOL] from . path import OpenApiPath [EOL] from . security import OpenApiSecurity , ApiKeyAuth , BearerAuth [EOL] from . response import OpenApiResponse [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Dict [EOL] import builtins [EOL] import typing [EOL] import response [EOL] import param [EOL] import openapi_specgen [EOL] from typing import List [EOL] [EOL] from . param import OpenApiParam [EOL] from . response import OpenApiResponse [EOL] from . schema import get_openapi_schema [EOL] [EOL] [EOL] class OpenApiPath ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , path , method , responses , params = [ ] , descr = [string] , summary = [string] , request_body = None , ) : [EOL] self . path = path [EOL] self . method = method [EOL] self . responses = responses [EOL] self . params = params [EOL] self . summary = summary [EOL] self . descr = descr [EOL] self . request_body = request_body [EOL] [EOL] def as_dict ( self ) : [EOL] [docstring] [EOL] openapi_dict = { self . path : { self . method : { [string] : self . descr , [string] : self . summary , [string] : f' [string] { self . method } [string] { self . path }' , [string] : { k : v for response in self . responses for k , v in response . as_dict ( ) . items ( ) } , [string] : [ param . as_dict ( ) for param in self . params ] } } } [EOL] if self . request_body is not None : [EOL] openapi_dict [ self . path ] [ self . method ] [ [string] ] = { [string] : { [string] : { [string] : get_openapi_schema ( self . request_body ) } } } [EOL] return openapi_dict [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[openapi_specgen.response.OpenApiResponse]$ 0 $typing.List[openapi_specgen.param.OpenApiParam]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[openapi_specgen.response.OpenApiResponse]$ 0 $typing.List[openapi_specgen.response.OpenApiResponse]$ 0 0 0 $typing.List[openapi_specgen.param.OpenApiParam]$ 0 $typing.List[openapi_specgen.param.OpenApiParam]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any],builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any],builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any],builtins.str]]]]$ 0 0 0 0 0
[EOL] from typing import Dict , Optional , List , Any , Type [EOL] import openapi_specgen [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from typing import List , Optional [EOL] [EOL] [EOL] @ dataclass class BasicAuth : [EOL] protocol_type = [string] [EOL] scheme = [string] [EOL] [EOL] def as_dict ( self ) : [EOL] return { [string] : self . protocol_type , [string] : self . scheme } [EOL] [EOL] [EOL] @ dataclass class BearerAuth : [EOL] protocol_type = [string] [EOL] scheme = [string] [EOL] [EOL] def as_dict ( self ) : [EOL] return { [string] : self . protocol_type , [string] : self . scheme } [EOL] [EOL] [EOL] @ dataclass class ApiKeyAuth : [EOL] protocol_type = [string] [EOL] in_location = [string] [EOL] name = [string] [EOL] [EOL] def as_dict ( self ) : [EOL] return { [string] : self . protocol_type , [string] : self . in_location , [string] : self . name } [EOL] [EOL] [EOL] @ dataclass class OpenApiSecurity : [EOL] basic_auth = None [EOL] bearer_auth = None [EOL] api_key_auth = None [EOL] [EOL] def as_dict ( self ) : [EOL] auth_options = { } [EOL] self . _add_if_defined ( auth_options , self . basic_auth , [string] ) [EOL] self . _add_if_defined ( auth_options , self . bearer_auth , [string] ) [EOL] self . _add_if_defined ( auth_options , self . api_key_auth , [string] ) [EOL] [EOL] return auth_options [EOL] [EOL] def get_security_reference ( self ) : [EOL] [docstring] [EOL] auth_ref = [ ] [EOL] self . _append_ref_if_defined ( auth_ref , self . api_key_auth , [string] ) [EOL] self . _append_ref_if_defined ( auth_ref , self . basic_auth , [string] ) [EOL] self . _append_ref_if_defined ( auth_ref , self . bearer_auth , [string] ) [EOL] return auth_ref [EOL] [EOL] def _append_ref_if_defined ( self , auth_ref , prop , key ) : [EOL] if prop : [EOL] auth_ref . append ( { key : [ ] } ) [EOL] [EOL] def _add_if_defined ( self , auth_options , prop , key ) : [EOL] if prop : [EOL] auth_options [ key ] = prop . as_dict ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[BasicAuth]$ 0 0 0 $typing.Optional[BearerAuth]$ 0 0 0 $typing.Optional[ApiKeyAuth]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Dict [EOL] import openapi_specgen [EOL] import typing [EOL] import pytest [EOL] [EOL] from openapi_specgen import OpenApiResponse [EOL] [EOL] from . utils import DataclassObject [EOL] [EOL] [EOL] def test_response_primitive ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } } } [EOL] openapi_response = OpenApiResponse ( [string] , data_type = str ) [EOL] assert expected_openapi_dict == openapi_response . as_dict ( ) [EOL] [EOL] [EOL] def test_response_object ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } } } [EOL] openapi_response = OpenApiResponse ( [string] , data_type = DataclassObject ) [EOL] assert expected_openapi_dict == openapi_response . as_dict ( ) [EOL] [EOL] [EOL] def test_response_empty ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : [string] } } [EOL] openapi_response = OpenApiResponse ( [string] , [string] ) [EOL] assert expected_openapi_dict == openapi_response . as_dict ( ) [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_response_format ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_response_headers ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_response_any_of ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_response_links ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_response_multiple_media_types ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Dict [EOL] import typing [EOL] from datetime import date , datetime [EOL] from typing import List [EOL] [EOL] import pytest [EOL] from openapi_specgen . schema import get_openapi_schema [EOL] [EOL] from . utils import ( DataclassNestedObject , DataclassObject , MarshmallowNestedSchema , MarshmallowSchema ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( str , { [string] : [string] } ) , ( date , { [string] : [string] , [string] : [string] } ) , ( datetime , { [string] : [string] , [string] : [string] } ) , ( int , { [string] : [string] } ) , ( float , { [string] : [string] } ) , ( bool , { [string] : [string] } ) , ( DataclassObject , { [string] : [string] } ) , ( List , { [string] : [string] , [string] : { } } ) , ( List [ DataclassObject ] , { [string] : [string] , [string] : { [string] : [string] } } ) , ( List [ str ] , { [string] : [string] , [string] : { [string] : [string] } } ) , ( List [ int ] , { [string] : [string] , [string] : { [string] : [string] } } ) , ( List [ float ] , { [string] : [string] , [string] : { [string] : [string] } } ) , ( List [ bool ] , { [string] : [string] , [string] : { [string] : [string] } } ) ] ) def test_openapi_schema ( data_type , openapi_schema ) : [EOL] assert openapi_schema == get_openapi_schema ( data_type ) [EOL] [EOL] [EOL] def test_dataclass_schema ( ) : [EOL] expected_openapi_schema = { [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } } [EOL] assert expected_openapi_schema == get_openapi_schema ( DataclassObject , reference = False ) [EOL] [EOL] [EOL] def test_dataclass_nested_objects ( ) : [EOL] expected_openapi_schema = { [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] , [string] ] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } } } , [string] : { [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } } [EOL] assert expected_openapi_schema == get_openapi_schema ( DataclassNestedObject , reference = False ) [EOL] [EOL] [EOL] def test_marshmallow_schema ( ) : [EOL] expected_openapi_schema = { [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } } [EOL] assert expected_openapi_schema == get_openapi_schema ( MarshmallowSchema , reference = False ) [EOL] [EOL] [EOL] def test_marshmallow_nested_schema ( ) : [EOL] expected_openapi_schema = { [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } , [string] : { [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] } , [string] : { [string] : [string] } } } } [EOL] assert expected_openapi_schema == get_openapi_schema ( MarshmallowNestedSchema , reference = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import openapi_specgen [EOL] import typing [EOL] from typing import List [EOL] [EOL] import pytest [EOL] [EOL] from openapi_specgen import OpenApiParam [EOL] [EOL] from . utils import DataclassObject [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] ) , ( [string] ) , ( [string] ) , ( [string] ) ] ) def test_param_location ( location ) : [EOL] expected_param_dict = { [string] : True , [string] : { [string] : [string] , [string] : [string] } , [string] : [string] , [string] : location } [EOL] openapi_param = OpenApiParam ( [string] , location , str ) [EOL] assert expected_param_dict == openapi_param . as_dict ( ) [EOL] [EOL] [EOL] def test_param_optinal ( ) : [EOL] expected_param_dict = { [string] : False , [string] : { [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] } [EOL] openapi_param = OpenApiParam ( [string] , [string] , str , required = False ) [EOL] assert expected_param_dict == openapi_param . as_dict ( ) [EOL] [EOL] [EOL] def test_param_default ( ) : [EOL] expected_param_dict = { [string] : True , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] } [EOL] openapi_param = OpenApiParam ( [string] , [string] , str , [string] ) [EOL] assert expected_param_dict == openapi_param . as_dict ( ) [EOL] [EOL] [EOL] def test_param_any_type ( ) : [EOL] expected_param_dict = { [string] : True , [string] : { [string] : [string] } , [string] : [string] , [string] : [string] } [EOL] openapi_param = OpenApiParam ( [string] , [string] ) [EOL] assert expected_param_dict == openapi_param . as_dict ( ) [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_param_enum ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_param_examples ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_param_empty_value ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_param_nullable ( ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_param_deprecated ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Dict [EOL] import openapi_specgen [EOL] import typing [EOL] from openapi_specgen import OpenApiParam , OpenApiPath , OpenApiResponse [EOL] [EOL] from . utils import MarshmallowSchema [EOL] [EOL] [EOL] def test_path_with_params ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : [string] } } , [string] : [ { [string] : True , [string] : { [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] } ] } } } [EOL] openapi_path = OpenApiPath ( [string] , [string] , [ OpenApiResponse ( [string] ) ] , [ OpenApiParam ( [string] , [string] , str ) ] , [string] , [string] ) [EOL] assert expected_openapi_dict == openapi_path . as_dict ( ) [EOL] [EOL] [EOL] def test_path_no_params ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : [string] } } , [string] : [ ] } } } [EOL] openapi_path = OpenApiPath ( [string] , [string] , [ OpenApiResponse ( [string] ) ] , descr = [string] , summary = [string] ) [EOL] assert expected_openapi_dict == openapi_path . as_dict ( ) [EOL] [EOL] [EOL] def test_path_with_request_body ( ) : [EOL] expected_openapi_dict = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : { [string] : { [string] : [string] } } } } , [string] : { [string] : { [string] : [string] } } , [string] : [ ] } } } [EOL] openapi_path = OpenApiPath ( [string] , [string] , [ OpenApiResponse ( [string] ) ] , descr = [string] , summary = [string] , request_body = MarshmallowSchema ) [EOL] assert expected_openapi_dict == openapi_path . as_dict ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import tests [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from datetime import date , datetime [EOL] from typing import List [EOL] [EOL] from marshmallow import Schema , fields [EOL] [EOL] [EOL] @ dataclass class DataclassObject ( ) : [EOL] str_field = ... [EOL] int_field = ... [EOL] float_field = ... [EOL] boolean_field = ... [EOL] list_field = ... [EOL] date_field = ... [EOL] datetime_field = ... [EOL] [EOL] [EOL] @ dataclass class DataclassNestedObject ( ) : [EOL] str_field = ... [EOL] nested_object = ... [EOL] [EOL] [EOL] class MarshmallowSchema ( Schema ) : [EOL] str_field = fields . String ( required = True ) [EOL] int_field = fields . Integer ( ) [EOL] float_field = fields . Float ( ) [EOL] boolean_field = fields . Boolean ( ) [EOL] list_field = fields . List ( fields . String ( ) ) [EOL] date_field = fields . Date ( ) [EOL] datetime_field = fields . DateTime ( ) [EOL] [EOL] [EOL] class MarshmallowNestedSchema ( Schema ) : [EOL] str_field = fields . String ( required = True ) [EOL] int_field = fields . Integer ( ) [EOL] float_field = fields . Float ( ) [EOL] boolean_field = fields . Boolean ( ) [EOL] list_field = fields . List ( fields . String ( ) ) [EOL] nested_schema = fields . Nested ( [string] ) [EOL] self_reference = fields . Nested ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 $typing.List$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date.time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $DataclassObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List , Union , Any , Dict [EOL] import openapi_specgen [EOL] import typing [EOL] from openapi_specgen import ( ApiKeyAuth , BearerAuth , OpenApi , OpenApiParam , OpenApiPath , OpenApiResponse , OpenApiSecurity ) [EOL] [EOL] from . utils import DataclassNestedObject , MarshmallowSchema [EOL] [EOL] [EOL] def test_openapi_with_dataclass ( ) : [EOL] expected_openapi_dict = { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } } } , [string] : [ { [string] : True , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } } ] } } } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } , [string] : { [string] : [string] , [string] : [ [string] , [string] ] , [string] : [string] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } } } } } } [EOL] [EOL] test_resp = OpenApiResponse ( [string] , data_type = DataclassNestedObject ) [EOL] test_param = OpenApiParam ( [string] , [string] , data_type = str ) [EOL] test_path = OpenApiPath ( [string] , [string] , [ test_resp ] , [ test_param ] ) [EOL] test_api = OpenApi ( [string] , [ test_path ] ) [EOL] assert expected_openapi_dict == test_api . as_dict ( ) [EOL] [EOL] [EOL] def test_openapi_with_marshmallow ( ) : [EOL] expected_openapi_dict = { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , [string] : [ { [string] : [ ] } , { [string] : [ ] } ] , [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : { [string] : [string] , [string] : { [string] : { [string] : { [string] : [string] } } } } } , [string] : [ { [string] : True , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } } ] } } } , [string] : { [string] : { [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] , [string] : { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , } } } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } } } } [EOL] [EOL] test_resp = OpenApiResponse ( [string] , data_type = MarshmallowSchema ) [EOL] test_param = OpenApiParam ( [string] , [string] , data_type = str ) [EOL] test_path = OpenApiPath ( [string] , [string] , [ test_resp ] , [ test_param ] ) [EOL] test_security = OpenApiSecurity ( bearer_auth = BearerAuth ( ) , api_key_auth = ApiKeyAuth ( ) ) [EOL] test_api = OpenApi ( [string] , [ test_path ] , security = test_security ) [EOL] print ( test_api . as_dict ( ) ) [EOL] assert expected_openapi_dict == test_api . as_dict ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0