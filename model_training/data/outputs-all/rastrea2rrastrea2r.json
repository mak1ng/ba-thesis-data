import sys [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import requests [EOL] import logging [EOL] import requests [EOL] import traceback [EOL] [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] enable_trace = True [EOL] [EOL] [EOL] def http_post_request ( url , headers = None , body = None , auth = None ) : [EOL] headers = headers or { } [EOL] body = body or [string] [EOL] try : [EOL] logging . debug ( [string] + url ) [EOL] logging . debug ( [string] + str ( headers ) ) [EOL] [comment] [EOL] result = requests . post ( url , headers = headers , json = body , auth = auth , verify = False ) [EOL] logging . debug ( [string] + str ( result . status_code ) ) [EOL] [comment] [EOL] return result [EOL] except Exception as e : [EOL] logging . error ( [string] . format ( error = str ( e ) , url = url , headers = headers , body = body , stack_trace = traceback . format_exc ( ) ) if enable_trace else [string] ) [EOL] [EOL] [EOL] def http_get_request ( url , headers = None , auth = None ) : [EOL] headers = headers or { } [EOL] try : [EOL] logging . debug ( [string] + url ) [EOL] logging . debug ( [string] + str ( headers ) ) [EOL] result = requests . get ( url , headers = headers , auth = auth , verify = False ) [EOL] logging . debug ( [string] + str ( result . status_code ) ) [EOL] [comment] [EOL] return str ( result . text ) [EOL] except Exception as e : [EOL] logging . error ( [string] . format ( error = str ( e ) , url = url , headers = headers , stack_trace = traceback . format_exc ( ) if enable_trace else [string] ) ) [EOL] [EOL] [EOL] def http_delete_request ( url , headers = None , auth = None ) : [EOL] try : [EOL] headers = headers or { } [EOL] logging . debug ( [string] + url ) [EOL] logging . debug ( [string] + str ( headers ) ) [EOL] result = requests . delete ( url , headers = headers , auth = auth , verify = False ) [EOL] logging . debug ( [string] + str ( result . status_code ) ) [EOL] [comment] [EOL] [EOL] except Exception as e : [EOL] logging . error ( [string] . format ( error = str ( e ) , url = url , headers = headers , stack_trace = traceback . format_exc ( ) if enable_trace else [string] ) ) [EOL] raise [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0
from typing import List [EOL] import configparser [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] import sys [EOL] import os [EOL] import logging [EOL] from logging . handlers import RotatingFileHandler [EOL] import configparser [EOL] [EOL] __version__ = [string] [EOL] [EOL] [comment] [EOL] config = configparser . ConfigParser ( ) [EOL] config . read ( os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , [string] , [string] ) ) [EOL] [EOL] ENABLE_TRACE = config [ [string] ] [ [string] ] [EOL] AUTH_USER = config [ [string] ] [ [string] ] [EOL] AUTH_PASSWD = config [ [string] ] [ [string] ] [EOL] SERVER_PORT = config [ [string] ] [ [string] ] [EOL] CLIENT_VERSION = config [ [string] ] [ [string] ] [EOL] API_VERSION = config [ [string] ] [ [string] ] [EOL] WINDOWS_COMMANDS = config [ [string] ] [ [string] ] . split ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] if [string] not in config : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . setLevel ( logging . INFO ) [EOL] lformat = logging . Formatter ( [string] ) [EOL] [EOL] [comment] [EOL] if [string] in config [ [string] ] and int ( config [ [string] ] [ [string] ] ) != [number] : [EOL] debug = int ( config [ [string] ] [ [string] ] ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] logging . debug ( [string] ) [EOL] else : [EOL] [comment] [EOL] lsh = logging . StreamHandler ( sys . stdout ) [EOL] lsh . setFormatter ( lformat ) [EOL] lsh . setLevel ( logging . INFO ) [EOL] logger . addHandler ( lsh ) [EOL] [EOL] [comment] [EOL] if [string] in config [ [string] ] : [EOL] lfh = RotatingFileHandler ( config [ [string] ] [ [string] ] , maxBytes = ( [number] * [number] ) , backupCount = [number] ) [EOL] lfh . setFormatter ( lformat ) [EOL] logger . addHandler ( lfh ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 $logging.Formatter$ 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 $logging.Formatter$ 0 0 $logging.Logger$ 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] from typing import Any , Optional , Dict , List , Tuple [EOL] import logging [EOL] import typing [EOL] import zipfile [EOL] import io [EOL] import hashlib [EOL] import mimetypes [EOL] import argparse [EOL] import subprocess [EOL] import os [EOL] [EOL] [comment] [EOL] import glob [EOL] import hashlib [EOL] import platform [EOL] import psutil [comment] [EOL] import shutil [EOL] import subprocess [EOL] import sys [EOL] import yara [EOL] import zipfile [EOL] from argparse import ArgumentParser [EOL] from mimetypes import MimeTypes [EOL] from requests import post [EOL] from time import gmtime , strftime [EOL] from requests . auth import HTTPBasicAuth [EOL] import json [EOL] import logging [EOL] import traceback [EOL] [EOL] from utils . http_utils import http_get_request , http_post_request [EOL] from rastrea2r import ENABLE_TRACE , AUTH_USER , AUTH_PASSWD , SERVER_PORT , CLIENT_VERSION , API_VERSION , WINDOWS_COMMANDS [EOL] [EOL] __version__ = CLIENT_VERSION [EOL] [EOL] [docstring] [EOL] logger = logging . getLogger ( __name__ ) [EOL] BLOCKSIZE = [number] [EOL] mime = MimeTypes ( ) [EOL] [EOL] [EOL] def hashfile ( file ) : [EOL] [docstring] [EOL] [EOL] hasher = hashlib . sha256 ( ) [EOL] [EOL] with open ( file , [string] ) as afile : [EOL] buf = afile . read ( BLOCKSIZE ) [EOL] hasher . update ( buf ) [EOL] [EOL] return ( hasher . hexdigest ( ) ) [EOL] [EOL] [EOL] def yaradisk ( path , server , rule , silent ) : [EOL] [docstring] [EOL] [EOL] results = [ ] [EOL] rule_url = server + [string] + SERVER_PORT + API_VERSION + [string] + rule [EOL] logger . debug ( [string] + rule_url ) [EOL] rule_text = http_get_request ( url = rule_url , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + rule + [string] + server + [string] ) [EOL] [comment] [EOL] logger . debug ( [string] + path + [string] ) [EOL] [EOL] rule_bin = yara . compile ( sources = { [string] : rule_text } ) [EOL] [EOL] for root , dirs , filenames in os . walk ( path ) : [EOL] for name in filenames : [EOL] try : [EOL] file_path = os . path . join ( root , name ) [EOL] [EOL] mime_type = mime . guess_type ( file_path ) [EOL] if [string] in mime_type [ [number] ] : [comment] [EOL] doc = zipfile . ZipFile ( file_path ) [comment] [EOL] for doclist in doc . namelist ( ) : [EOL] matches = rule_bin . match ( data = doc . read ( doclist ) ) [EOL] if matches : [EOL] break [EOL] else : [EOL] matches = rule_bin . match ( filepath = file_path ) [EOL] [EOL] if matches : [EOL] result = { [string] : str ( matches [ [number] ] ) , [string] : file_path , [string] : [string] , [string] : os . environ [ [string] ] } [EOL] if not silent : [EOL] logger . debug ( result ) [EOL] [EOL] results . append ( result ) [EOL] [EOL] except Exception as e : [EOL] logging . error ( [string] . format ( error = str ( e ) , stack_trace = traceback . format_exc ( ) if ENABLE_TRACE else [string] ) ) [EOL] [EOL] if len ( results ) > [number] : [EOL] logger . debug ( [string] + str ( results ) ) [EOL] headers = { [string] : [string] , [string] : [string] } [EOL] results_url = server + [string] + SERVER_PORT + API_VERSION + [string] [EOL] response = http_post_request ( url = results_url , body = json . dumps ( results ) , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . error ( [string] + response . text ) [EOL] [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def yaramem ( server , rule , silent ) : [EOL] [docstring] [EOL] [EOL] results = [ ] [EOL] rule_url = server + [string] + SERVER_PORT + API_VERSION + [string] + rule [EOL] rule_text = http_get_request ( url = rule_url , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + rule + [string] + server + [string] ) [EOL] [comment] [EOL] logger . debug ( [string] ) [EOL] [EOL] mypid = os . getpid ( ) [EOL] [EOL] rule_bin = yara . compile ( source = rule_text ) [EOL] [EOL] for process in psutil . process_iter ( ) : [EOL] try : [EOL] pinfo = process . as_dict ( attrs = [ [string] , [string] , [string] , [string] ] ) [EOL] except psutil . NoSuchProcess : [EOL] pass [EOL] else : [EOL] if not silent : [EOL] print ( pinfo ) [EOL] [EOL] client_pid = pinfo [ [string] ] [EOL] client_pname = pinfo [ [string] ] [EOL] client_ppath = pinfo [ [string] ] [EOL] client_pcmd = pinfo [ [string] ] [EOL] [EOL] if client_pid != mypid : [EOL] try : [EOL] matches = rule_bin . match ( pid = client_pid ) [EOL] except : [EOL] if not silent : [EOL] logger . debug ( [string] % client_pid ) [EOL] continue [EOL] [EOL] if matches : [EOL] result = { [string] : str ( matches ) , [string] : client_ppath , [string] : client_pid , [string] : [string] , [string] : os . environ [ [string] ] } [EOL] if not silent : [EOL] logger . debug ( result ) [EOL] [EOL] results . append ( result ) [EOL] [EOL] if len ( results ) > [number] : [EOL] headers = { [string] : [string] , [string] : [string] } [EOL] results_url = server + [string] + SERVER_PORT + API_VERSION + [string] [EOL] response = http_post_request ( url = results_url , body = json . dumps ( results ) , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . error ( [string] + response . text ) [EOL] [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def memdump ( tool_server , output_server , silent ) : [EOL] [docstring] [EOL] [EOL] smb_bin = tool_server + [string] [comment] [EOL] [EOL] smb_data = output_server + [string] + [string] + os . environ [ [string] ] [comment] [EOL] if not os . path . exists ( [string] + smb_data ) : [EOL] os . makedirs ( [string] + smb_data ) [EOL] [EOL] if not silent : [EOL] print ( [string] + [string] + smb_data ) [EOL] [EOL] tool = ( [string] ) [comment] [EOL] [EOL] fullcommand = tool . split ( ) [EOL] commandname = fullcommand [ [number] ] . split ( [string] ) [EOL] [EOL] recivedt = strftime ( [string] , gmtime ( ) ) [comment] [EOL] [EOL] f = open ( [string] + smb_data + [string] + recivedt + [string] + os . environ [ [string] ] + [string] + commandname [ [number] ] + [string] , [string] ) [EOL] [EOL] if not silent : [EOL] print ( [string] + [string] + smb_data + [string] + recivedt + [string] + os . environ [ [string] ] + [string] + commandname [ [number] ] + [string] ) [EOL] [EOL] pst = subprocess . call ( [string] + smb_bin + [string] + tool , stdout = f ) [EOL] [EOL] with open ( [string] + smb_data + [string] + recivedt + [string] + os . environ [ [string] ] + [string] + [string] , [string] ) as g : [EOL] g . write ( [string] % ( f . name , hashfile ( f . name ) ) ) [EOL] [EOL] [EOL] def triage ( tool_server , output_server , silent ) : [EOL] [docstring] [EOL] [EOL] createt = strftime ( [string] , gmtime ( ) ) [comment] [EOL] smb_bin = tool_server + [string] [comment] [EOL] [EOL] smb_data = output_server + [string] + [string] + os . environ [ [string] ] + [string] + createt [comment] [EOL] if not os . path . exists ( [string] + smb_data ) : [EOL] os . makedirs ( [string] + smb_data ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + [string] + smb_data ) [EOL] [EOL] with open ( [string] + smb_data + [string] + createt + [string] + os . environ [ [string] ] + [string] + [string] , [string] ) as g : [EOL] for task in WINDOWS_COMMANDS : [comment] [EOL] [EOL] fullcommand = str . replace ( task , [string] , [string] ) [EOL] commandname = fullcommand . split ( [string] ) [EOL] logger . debug ( [string] + fullcommand ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + task + [string] + [string] + smb_data + [string] + createt + [string] + os . environ [ [string] ] + [string] + commandname [ [number] ] + [string] ) [EOL] [EOL] f = open ( [string] + smb_data + [string] + createt + [string] + os . environ [ [string] ] + [string] + commandname [ [number] ] + [string] , [string] ) [EOL] [EOL] pst = subprocess . call ( [string] + smb_bin + [string] + fullcommand , stdout = f ) [EOL] [EOL] g . write ( [string] % ( f . name , hashfile ( f . name ) ) ) [EOL] [EOL] [EOL] def webhist ( tool_server , output_server , histuser , silent ) : [EOL] [docstring] [EOL] [EOL] createt = strftime ( [string] , gmtime ( ) ) [comment] [EOL] smb_bin = tool_server + [string] [comment] [EOL] [EOL] [comment] [EOL] si = subprocess . STARTUPINFO ( ) [EOL] si . dwFlags = subprocess . CREATE_NEW_CONSOLE | subprocess . STARTF_USESHOWWINDOW [EOL] si . wShowWindow = subprocess . SW_HIDE [EOL] [EOL] smb_data = output_server + [string] + [string] + os . environ [ [string] ] + [string] + createt [comment] [EOL] if not os . path . exists ( [string] + smb_data ) : [EOL] os . makedirs ( [string] + smb_data ) [EOL] [EOL] if not silent : [EOL] print ( [string] + smb_data ) [EOL] [EOL] if histuser == [string] : [EOL] user_dirs = next ( os . walk ( [string] ) ) [ [number] ] [EOL] else : [EOL] user_dirs = [ histuser ] [EOL] [EOL] for user_dir in user_dirs : [EOL] [comment] [EOL] bhv_command = [string] + smb_bin + [string] [EOL] [comment] [EOL] webhist_output = [string] + smb_data + [string] + createt + [string] + os . environ [ [string] ] + [string] + user_dir + [string] [EOL] [comment] [EOL] ie5to9_history_dir = [string] + user_dir [EOL] ie10_cache_dir = [string] + user_dir + [string] [EOL] ie10_tmp_cache_dir = [string] + user_dir + [string] [EOL] ff_profile_dir = [string] + user_dir + [string] [EOL] chrome_profile_dir = [string] + user_dir + [string] [EOL] [comment] [EOL] if os . path . exists ( ie5to9_history_dir ) : [EOL] bhv_command = bhv_command + [string] + ie5to9_history_dir + [string] [EOL] [comment] [EOL] if os . path . exists ( ie10_cache_dir + [string] ) : [EOL] [comment] [EOL] if not os . path . exists ( ie10_tmp_cache_dir ) : [EOL] os . makedirs ( ie10_tmp_cache_dir ) [EOL] [comment] [EOL] for i in os . listdir ( ie10_cache_dir ) : [EOL] subprocess . call ( [string] + smb_bin + [string] + ie10_cache_dir + i + [string] + ie10_tmp_cache_dir , startupinfo = si ) [EOL] [comment] [EOL] subprocess . call ( [string] , cwd = ie10_tmp_cache_dir ) [EOL] bhv_command = bhv_command + [string] + ie10_tmp_cache_dir + [string] [EOL] [comment] [EOL] first_history = True [EOL] if os . path . exists ( ff_profile_dir ) : [EOL] ff_profiles = next ( os . walk ( ff_profile_dir ) ) [ [number] ] [EOL] for ff_profile in ff_profiles : [EOL] if os . path . exists ( ff_profile_dir + ff_profile + [string] ) : [EOL] if first_history : [EOL] bhv_command = bhv_command + [string] + ff_profile_dir + ff_profile + [string] [EOL] first_history = False [EOL] else : [EOL] bhv_command = bhv_command + [string] + ff_profile_dir + ff_profile + [string] [EOL] [comment] [EOL] first_history = True [EOL] if os . path . exists ( chrome_profile_dir ) : [EOL] [comment] [EOL] chrome_profile_dirs = glob . glob ( chrome_profile_dir + [string] ) + glob . glob ( chrome_profile_dir + [string] ) [EOL] for chrome_profile in chrome_profile_dirs : [EOL] if os . path . exists ( chrome_profile + [string] ) : [EOL] if first_history : [EOL] bhv_command = bhv_command + [string] + chrome_profile + [string] [EOL] first_history = False [EOL] else : [EOL] bhv_command = bhv_command + [string] + chrome_profile + [string] [EOL] [comment] [EOL] bhv_command = bhv_command + [string] + webhist_output + [string] [EOL] if not silent : [EOL] print ( bhv_command ) [EOL] subprocess . call ( bhv_command , startupinfo = si ) [EOL] [comment] [EOL] g = open ( [string] + smb_data + [string] + createt + [string] + os . environ [ [string] ] + [string] + [string] , [string] ) [EOL] g . write ( [string] % ( webhist_output , hashfile ( webhist_output ) ) ) [EOL] [comment] [EOL] if os . path . exists ( ie10_tmp_cache_dir ) : [EOL] shutil . rmtree ( ie10_tmp_cache_dir ) [EOL] [EOL] [EOL] def prefetch ( tool_server , output_server , silent ) : [EOL] [docstring] [EOL] createt = strftime ( [string] , gmtime ( ) ) [EOL] [EOL] try : [EOL] smb_bin = tool_server + [string] [EOL] [EOL] smb_data = output_server + [string] + [string] + os . environ [ [string] ] + [string] + createt [EOL] [EOL] if not os . path . exists ( [string] + smb_data ) : [EOL] os . makedirs ( [string] + smb_data ) [EOL] [EOL] if not silent : [EOL] print ( [string] + [string] + smb_data ) [EOL] [EOL] user_dirs = next ( os . walk ( [string] ) ) [ [number] ] [EOL] b = True [EOL] for f in user_dirs : [EOL] if f . endswith ( [string] ) : [EOL] cmd = [string] + smb_bin + [string] [EOL] cmd = cmd + [string] + [string] + f + [string] + [string] + smb_data + [string] + f + [string] [EOL] [EOL] p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] p . communicate ( ) [EOL] [EOL] if b : [EOL] b = False [EOL] smb_data2 = [string] + output_server + [string] + [string] + os . environ [ [string] ] + [string] + createt + [string] [EOL] if not os . path . exists ( smb_data2 ) : [EOL] os . makedirs ( smb_data2 ) [EOL] [EOL] cmd_main = [string] + smb_bin + [string] [EOL] cmd_main = cmd_main + [string] + smb_data2 + [string] + [string] + [string] [EOL] [EOL] p2 = subprocess . Popen ( cmd_main , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] p2 . communicate ( ) [EOL] [EOL] except : [EOL] print ( [string] ) [EOL] pass [EOL] [EOL] [EOL] def collect ( tool_server , output_server , silent ) : [EOL] [docstring] [EOL] [EOL] smb_bin = tool_server + [string] [comment] [EOL] [EOL] smb_data = output_server + [string] + [string] + os . environ [ [string] ] [comment] [EOL] if not os . path . exists ( [string] + smb_data ) : [EOL] os . makedirs ( [string] + smb_data ) [EOL] [EOL] if not silent : [EOL] print ( [string] + [string] + smb_data ) [EOL] [EOL] recivedt = strftime ( [string] , gmtime ( ) ) [comment] [EOL] [EOL] tool = ( [string] + smb_data + [string] + os . environ [ [string] ] + [string] ) [comment] [EOL] print ( tool ) [EOL] [EOL] fullcommand = tool . split ( ) [EOL] commandname = fullcommand [ [number] ] . split ( [string] ) [EOL] [EOL] if not silent : [EOL] print ( [string] + [string] + smb_data + [string] + os . environ [ [string] ] + [string] ) [EOL] [EOL] subprocess . call ( [string] + smb_bin + [string] + tool ) [EOL] [EOL] with open ( [string] + smb_data + [string] + recivedt + [string] , [string] ) as g : [EOL] g . write ( [string] % ( [string] + smb_data + [string] + os . environ [ [string] ] + [string] , hashfile ( [string] + smb_data + [string] + os . environ [ [string] ] + [string] ) ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = ArgumentParser ( description = [string] ) [EOL] [EOL] subparsers = parser . add_subparsers ( dest = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , default = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] parser . add_argument ( [string] , [string] , action = [string] , version = [string] + __version__ ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] if args . mode == [string] : [EOL] yaradisk ( args . path , args . server , args . rule , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] yaramem ( args . server , args . rule , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] memdump ( args . TOOLS_server , args . DATA_server , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] triage ( args . TOOLS_server , args . DATA_server , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] webhist ( args . TOOLS_server , args . DATA_server , args . username , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] prefetch ( args . TOOLS_server , args . DATA_server , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] collect ( args . TOOLS_server , args . DATA_server , args . silent ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $mimetypes.MimeTypes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mimetypes.MimeTypes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import argparse [EOL] import logging [EOL] import os [EOL] import psutil [comment] [EOL] import yara [EOL] from argparse import ArgumentParser [EOL] from requests . auth import HTTPBasicAuth [EOL] from utils import http_utils [EOL] from rastrea2r import ENABLE_TRACE , AUTH_USER , AUTH_PASSWD , SERVER_PORT , CLIENT_VERSION , API_VERSION [EOL] import json [EOL] import logging [EOL] import traceback [EOL] [EOL] __version__ = CLIENT_VERSION [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def yaradisk ( path , server , rule , silent ) : [EOL] [docstring] [EOL] [EOL] results = [ ] [EOL] rule_url = server + [string] + SERVER_PORT + API_VERSION + [string] + rule [EOL] logger . debug ( [string] + rule_url ) [EOL] rule_text = http_utils . http_get_request ( url = rule_url , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + rule + [string] + server + [string] ) [EOL] [comment] [EOL] logger . debug ( [string] + path + [string] ) [EOL] [EOL] rule_bin = yara . compile ( sources = { [string] : rule_text } ) [EOL] [EOL] for root , dirs , filenames in os . walk ( path ) : [EOL] for name in filenames : [EOL] try : [EOL] file_path = os . path . join ( root , name ) [EOL] matches = rule_bin . match ( filepath = file_path ) [EOL] [EOL] if matches : [EOL] result = { [string] : matches [ [number] ] , [string] : file_path , [string] : [string] , [string] : os . uname ( ) [ [number] ] } [EOL] if not silent : [EOL] logger . debug ( result ) [EOL] [EOL] results . append ( result ) [EOL] [EOL] except Exception as e : [EOL] logging . error ( [string] . format ( error = str ( e ) , stack_trace = traceback . format_exc ( ) if ENABLE_TRACE else [string] ) ) [EOL] [EOL] if len ( results ) > [number] : [EOL] headers = { [string] : [string] , [string] : [string] } [EOL] results_url = server + [string] + SERVER_PORT + API_VERSION + [string] [EOL] response = http_utils . http_post_request ( url = results_url , body = json . dumps ( results ) , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . error ( [string] + response . text ) [EOL] [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def yaramem ( server , rule , silent ) : [EOL] [docstring] [EOL] [EOL] results = [ ] [EOL] rule_url = server + [string] + SERVER_PORT + API_VERSION + [string] + rule [EOL] rule_text = http_utils . http_get_request ( url = rule_url , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) ) [EOL] [EOL] if not silent : [EOL] logger . debug ( [string] + rule + [string] + server + [string] ) [EOL] [comment] [EOL] logger . debug ( [string] ) [EOL] [EOL] mypid = os . getpid ( ) [EOL] [EOL] rule_bin = yara . compile ( source = rule_text ) [EOL] [EOL] for process in psutil . process_iter ( ) : [EOL] try : [EOL] pinfo = process . as_dict ( attrs = [ [string] , [string] , [string] ] ) [EOL] except psutil . NoSuchProcess : [EOL] pass [EOL] else : [EOL] if not silent : [EOL] print ( pinfo ) [EOL] [EOL] client_pid = pinfo [ [string] ] [EOL] client_pname = pinfo [ [string] ] [EOL] [comment] [EOL] client_pcmd = pinfo [ [string] ] [EOL] [EOL] if client_pid != mypid : [EOL] try : [EOL] matches = rule_bin . match ( pid = client_pid ) [EOL] except : [EOL] if not silent : [EOL] print ( [string] % client_pid ) [EOL] continue [EOL] [EOL] if matches : [EOL] result = { [string] : matches , [string] : client_pid , [string] : [string] , [string] : os . uname ( ) [ [number] ] } [EOL] if not silent : [EOL] logger . debug ( result ) [EOL] [EOL] results . append ( result ) [EOL] [EOL] if len ( results ) > [number] : [EOL] headers = { [string] : [string] , [string] : [string] } [EOL] results_url = server + [string] + SERVER_PORT + API_VERSION + [string] [EOL] response = http_utils . http_post_request ( url = results_url , body = json . dumps ( results ) , auth = HTTPBasicAuth ( AUTH_USER , AUTH_PASSWD ) , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . error ( [string] + response . text ) [EOL] [EOL] else : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = ArgumentParser ( description = [string] ) [EOL] [EOL] subparsers = parser . add_subparsers ( dest = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] list_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] list_parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] [EOL] parser . add_argument ( [string] , [string] , action = [string] , version = [string] + __version__ ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] if args . mode == [string] : [EOL] yaradisk ( args . path , args . server , args . rule , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] yaramem ( args . server , args . rule , args . silent ) [EOL] [EOL] elif args . mode == [string] : [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] import unittest [EOL] [EOL] [EOL] class BasicTestCase ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_basic ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( True ) [EOL] [EOL] @ unittest . skip ( [string] ) def test_version ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( hasattr ( rastrea2r , [string] ) ) [EOL] self . assertIsInstance ( rastrea2r . __version__ , str ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] import rastrea2r [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( f' [string] { rastrea2r . __version__ }' ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0