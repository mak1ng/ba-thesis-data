[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] from flask_dialogflow import __version__ [EOL] [EOL] with open ( [string] ) as fp : [EOL] long_description = fp . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = __version__ , packages = find_packages ( ) , url = [string] , python_requires = [string] , license = [string] , author = [string] , author_email = [string] , description = [string] , long_description = long_description , long_description_content_type = [string] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , entry_points = { [string] : [ [string] ] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] import sys [EOL] sys . path . insert ( [number] , os . path . dirname ( os . path . abspath ( [string] ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] autodoc_member_order = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import jinja2 [EOL] import unittest [EOL] import flask_dialogflow [EOL] import random [EOL] import typing [EOL] [docstring] [EOL] from functools import partial [EOL] from random import Random [EOL] from unittest . mock import Mock [EOL] [EOL] import pytest [EOL] from jinja2 import Environment , TemplateError , TemplateNotFound [EOL] [EOL] from flask_dialogflow . templating import YamlLoaderWithRandomization [EOL] [EOL] [EOL] @ pytest . fixture def env ( ) : [EOL] return Environment ( ) [EOL] [EOL] [EOL] @ pytest . fixture def loader ( templates_file ) : [EOL] return YamlLoaderWithRandomization ( templates_file ) [EOL] [EOL] [EOL] class TestYamlLoaderWithRandomization : [EOL] [EOL] def test_path ( self , loader ) : [EOL] assert loader . path . basename == [string] [EOL] [EOL] def test_get_source_with_simple_template ( self , env , loader ) : [EOL] source , * _ = loader . get_source ( env , [string] ) [EOL] assert source == [string] [EOL] [EOL] def test_get_source_with_list_template ( self , env , loader ) : [EOL] source , * _ = loader . get_source ( env , [string] ) [EOL] assert [string] in source [EOL] [EOL] def test_get_source_with_weighted_template ( self , env , loader ) : [EOL] source , * _ = loader . get_source ( env , [string] ) [EOL] assert [string] in source [EOL] [EOL] def test_get_source_filename ( self , env , loader ) : [EOL] _ , filename , __ = loader . get_source ( env , [string] ) [EOL] assert filename == loader . path [EOL] [EOL] def test_get_source_uptodate ( self , env , loader ) : [EOL] * _ , uptodate = loader . get_source ( env , [string] ) [EOL] assert callable ( uptodate ) [EOL] assert uptodate ( ) is False [EOL] [EOL] def test_random_list_choice ( self , loader ) : [EOL] rand = Random ( [number] ) [EOL] assert loader . _get_randomized_source ( [string] , rand ) == [string] [EOL] assert loader . _get_randomized_source ( [string] , rand ) == [string] [EOL] assert loader . _get_randomized_source ( [string] , rand ) == [string] [EOL] [EOL] def test_random_weighted_choice ( self , loader ) : [EOL] rand = Random ( [number] ) [EOL] tmpl = [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] [EOL] def test_random_weighted_choice_with_complex_template ( self , loader ) : [EOL] rand = Random ( [number] ) [EOL] tmpl = [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] assert loader . _get_randomized_source ( tmpl , rand ) == [string] [EOL] [EOL] def test_random_list_choice_with_env_caching ( self , env , loader ) : [EOL] loader . _get_randomized_source = partial ( loader . _get_randomized_source , rand = Random ( [number] ) ) [EOL] env . loader = loader [EOL] assert env . get_template ( [string] ) . render ( ) == [string] [EOL] assert env . get_template ( [string] ) . render ( ) == [string] [EOL] assert env . get_template ( [string] ) . render ( ) == [string] [EOL] [EOL] def test_random_weighted_choice_with_env_caching ( self , env , loader ) : [EOL] loader . _get_randomized_source = partial ( loader . _get_randomized_source , rand = Random ( [number] ) ) [EOL] env . loader = loader [EOL] tmpl = [string] [EOL] assert env . get_template ( tmpl ) . render ( ) == [string] [EOL] assert env . get_template ( tmpl ) . render ( ) == [string] [EOL] assert env . get_template ( tmpl ) . render ( ) == [string] [EOL] [EOL] def test_reload_mapping_when_should_update ( self , env , loader , monkeypatch ) : [EOL] monkeypatch . setattr ( loader . __class__ , [string] , True ) [EOL] reload_mock = Mock ( ) [EOL] monkeypatch . setattr ( loader , [string] , reload_mock ) [EOL] _ = loader . get_source ( env , [string] ) [EOL] reload_mock . assert_called_once ( ) [EOL] [EOL] def test_dont_reload_mapping_when_when_not_should_update ( self , env , loader , monkeypatch ) : [EOL] monkeypatch . setattr ( loader . __class__ , [string] , False ) [EOL] reload_mock = Mock ( ) [EOL] monkeypatch . setattr ( loader , [string] , reload_mock ) [EOL] _ = loader . get_source ( env , [string] ) [EOL] reload_mock . assert_not_called ( ) [EOL] [EOL] def test_TemplateNotFound_error ( self , env , loader ) : [EOL] with pytest . raises ( TemplateNotFound ) : [EOL] loader . get_source ( env , [string] ) [EOL] [EOL] def test_list_templates ( self , loader ) : [EOL] rv = loader . list_templates ( ) [EOL] assert hasattr ( rv , [string] ) [EOL] assert len ( list ( rv ) ) == len ( loader . mapping ) [EOL] assert all ( isinstance ( tmpl , str ) for tmpl in rv ) [EOL] [EOL] [EOL] def test_validate_randomizable_template ( env , loader ) : [EOL] with pytest . raises ( TemplateError ) : [EOL] loader . get_source ( env , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.templating.YamlLoaderWithRandomization$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $random.Random$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import flask_dialogflow [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] from flask import Flask [EOL] [EOL] from flask_dialogflow . agent import ( DialogflowAgent , DialogflowConversation , DIALOGFLOW_VERSIONS ) [EOL] [EOL] TEST_RESOURCES = Path ( __file__ ) . parent / [string] [EOL] [EOL] [EOL] @ pytest . fixture ( params = ( TEST_RESOURCES / [string] ) . glob ( [string] ) ) def aog_webhook_request ( request ) : [EOL] with open ( request . param , encoding = [string] ) as f : [EOL] yield json . load ( f ) [EOL] [EOL] [EOL] @ pytest . fixture def aog_payload ( aog_webhook_request ) : [EOL] return aog_webhook_request [ [string] ] [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def templates_file ( tmpdir ) : [EOL] templates_file = tmpdir / [string] [EOL] with open ( templates_file , [string] ) as f : [EOL] f . write ( [string] ) [EOL] return templates_file [EOL] [EOL] [EOL] @ pytest . fixture def app ( ) : [EOL] return Flask ( __name__ ) [EOL] [EOL] [EOL] @ pytest . fixture ( params = DIALOGFLOW_VERSIONS ) def agent ( templates_file , request ) : [EOL] agent = DialogflowAgent ( templates_file = templates_file , version = request . param ) [EOL] [EOL] @ agent . handle ( [string] ) def handler ( conv ) : [EOL] return conv [EOL] [EOL] return agent [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Tuple , Dict [EOL] import flask_dialogflow [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from dataclasses import dataclass [EOL] from typing import Optional [EOL] [EOL] import pytest [EOL] from marshmallow import Schema , fields [EOL] [EOL] from flask_dialogflow . json import JSONType , JSONTypeSchema , ModuleLocalNested [EOL] [EOL] [EOL] @ pytest . fixture def schema ( ) : [EOL] [EOL] class FooSchema ( JSONTypeSchema ) : [EOL] bar = fields . Str ( ) [EOL] [EOL] return FooSchema [EOL] [EOL] [EOL] @ pytest . fixture def cls ( schema ) : [EOL] [EOL] @ dataclass class Foo ( JSONType , schema = schema ) : [EOL] bar = None [EOL] [EOL] return Foo [EOL] [EOL] [EOL] class TestJSONTypeSchema : [EOL] [EOL] def test_schema_subclass ( self , schema ) : [EOL] assert issubclass ( schema , Schema ) [EOL] [EOL] def test_has_object_class_attr ( self , schema ) : [EOL] assert hasattr ( schema , [string] ) [EOL] [EOL] def test_has_post_load_hook ( self , schema ) : [EOL] [docstring] [EOL] assert [string] in schema . _hooks [ ( [string] , False ) ] [EOL] [EOL] def test_make_obj_is_post_load_hook ( self , schema , cls ) : [EOL] [docstring] [EOL] assert hasattr ( schema . make_obj , [string] ) [EOL] expected_hook = { ( [string] , False ) : { [string] : False } } [EOL] assert schema . make_obj . __marshmallow_hook__ == expected_hook [EOL] [EOL] [EOL] class TestJSONType : [EOL] [EOL] def test_immediate_subclasses_must_declare_schema ( self ) : [EOL] with pytest . raises ( AttributeError ) : [EOL] class Foo ( JSONType ) : pass [EOL] [EOL] def test_indirect_subclasses_can_inherit_schema_from_direct_subclass ( self , cls ) : [EOL] class Bar ( cls ) : pass [EOL] assert hasattr ( Bar , [string] ) [EOL] assert Bar . __marshmallow_schema__ == cls . __marshmallow_schema__ [EOL] [EOL] def test_error_when_schema_not_JSONTypeSchema ( self ) : [EOL] with pytest . raises ( TypeError ) : [EOL] class Foo ( JSONType , schema = Schema ) : pass [EOL] [EOL] def test_has_schema_attr ( self , cls ) : [EOL] assert hasattr ( cls , [string] ) [EOL] assert issubclass ( cls . __marshmallow_schema__ , JSONTypeSchema ) [EOL] [EOL] def test_from_json ( self , schema , cls ) : [EOL] assert hasattr ( cls , [string] ) [EOL] assert callable ( cls . from_json ) [EOL] assert cls . from_json ( { [string] : [string] } ) == cls ( [string] ) [EOL] [EOL] def test_from_json_without_object_cls ( self , schema , cls ) : [EOL] schema . __marshmallow_object_class__ = None [EOL] assert cls . from_json ( { [string] : [string] } ) == { [string] : [string] } [EOL] [EOL] def test_to_json ( self , schema , cls ) : [EOL] assert hasattr ( cls , [string] ) [EOL] assert callable ( cls . to_json ) [EOL] assert cls ( [string] ) . to_json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] class TestModuleLocalNested : [EOL] [EOL] def test_with_schema_instance ( self ) : [EOL] res = ModuleLocalNested ( Schema ( ) ) [EOL] assert isinstance ( res , fields . Nested ) [EOL] [EOL] def test_with_module_name ( mself ) : [EOL] res = ModuleLocalNested ( [string] , module_name = [string] ) [EOL] assert isinstance ( res , fields . Nested ) [EOL] assert res . nested == [string] [EOL] [EOL] def test_still_works_without_module_name ( self ) : [EOL] res = ModuleLocalNested ( [string] ) [EOL] assert isinstance ( res , fields . Nested ) [EOL] assert res . nested == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,builtins.bool],typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,builtins.bool],typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0 0 0 $flask_dialogflow.json.ModuleLocalNested$ 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any [EOL] import flask_dialogflow [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from dataclasses import fields , dataclass , asdict [EOL] from datetime import datetime , timedelta , timezone [EOL] [EOL] import pytest [EOL] [EOL] from flask_dialogflow . google_apis . actions_on_google_v2 import ( User , UserProfile , AppRequest , Input , BasicCard , TableCard , MediaResponse , CarouselBrowse , OrderUpdate , OpenUrlAction , SimpleSelect , ListSelect , CarouselSelect , CollectionSelect , ProposedOrder , OrderOptions , PaymentOptions , PresentationOptions , ) [EOL] from flask_dialogflow . integrations . actions_on_google import ( UserFacade , V2ActionsOnGoogleDialogflowConversation , ssmlify , ) [EOL] from flask_dialogflow . json import JSON [EOL] [EOL] [EOL] class TestUserFacade : [EOL] [EOL] def test_can_init_without_user_obj ( self ) : [EOL] assert UserFacade ( ) [EOL] [EOL] @ pytest . fixture def user ( self ) : [EOL] return User ( user_id = [string] , id_token = [string] , profile = UserProfile ( ) , access_token = [string] , locale = [string] , last_seen = datetime . now ( timezone . utc ) , user_storage = None , ) [EOL] [EOL] @ pytest . fixture def user_facade ( self , user ) : [EOL] return UserFacade ( user ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ f . name for f in fields ( User ) ] ) def test_all_user_attrs_accessible_through_facade ( self , attr , user_facade ) : [EOL] assert getattr ( user_facade , attr , [string] ) != [string] [EOL] [EOL] def test_last_seen_before ( self , user_facade ) : [EOL] assert isinstance ( user_facade . last_seen_before , timedelta ) [EOL] assert user_facade . last_seen_before . days < [number] [EOL] [EOL] def test_user_storage_initialization ( self , user_facade ) : [EOL] assert isinstance ( user_facade . user_storage , user_facade . _user_storage_default_factory ) [EOL] [EOL] def test_user_storage_with_existing_storage ( self , user ) : [EOL] user . user_storage = [string] [EOL] user_facade = UserFacade ( user ) [EOL] assert isinstance ( user_facade . user_storage , user_facade . _user_storage_default_factory ) [EOL] assert user_facade . user_storage [ [string] ] == [number] [EOL] [EOL] def test_delete_user_storage ( self , user_facade ) : [EOL] del user_facade . user_storage [EOL] assert hasattr ( user_facade , [string] ) [EOL] default = user_facade . _user_storage_default_factory ( ) [EOL] assert user_facade . user_storage == default [EOL] assert user_facade . _serialize_user_storage ( ) is None [EOL] [EOL] def test_custom_user_storage_class ( self , user ) : [EOL] @ dataclass class Foo : [EOL] bar = None [EOL] [EOL] user_facade = UserFacade ( user , user_storage_default_factory = Foo , user_storage_serializer = asdict , user_storage_deserializer = lambda data : Foo ( ** data ) , ) [EOL] [EOL] assert isinstance ( user_facade . user_storage , Foo ) [EOL] assert user_facade . user_storage . bar is None [EOL] user_facade . user_storage . bar = [number] [EOL] assert user_facade . user_storage . bar == [number] [EOL] assert user_facade . _serialize_user_storage ( ) == { [string] : [number] } [EOL] [EOL] def test_serialize_user_storage ( self , user_facade ) : [EOL] user_facade . user_storage [ [string] ] = [string] [EOL] assert user_facade . _serialize_user_storage ( ) == [string] [EOL] [EOL] [EOL] class TestV2ActionsOnGoogleDialogflowConversation : [EOL] [EOL] def test_from_request_json ( self , aog_payload ) : [EOL] assert V2ActionsOnGoogleDialogflowConversation . from_webhook_request_payload ( aog_payload ) [EOL] [EOL] @ pytest . fixture def conv ( self , aog_payload ) : [EOL] return V2ActionsOnGoogleDialogflowConversation . from_webhook_request_payload ( aog_payload ) [EOL] [EOL] def test_app_request ( self , conv ) : [EOL] assert isinstance ( conv . app_request , AppRequest ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ f . name for f in fields ( User ) ] ) def test_user ( self , conv , user_attr ) : [EOL] [docstring] [EOL] assert hasattr ( conv . user , user_attr ) [EOL] [EOL] def test_inputs ( self , conv ) : [EOL] assert all ( isinstance ( inp , Input ) for inp in conv . inputs ) [EOL] [EOL] def test_surface ( self , conv ) : [EOL] assert isinstance ( conv . surface , tuple ) [EOL] if conv . surface : [EOL] assert isinstance ( conv . surface [ [number] ] , str ) [EOL] [EOL] def test_surface_when_surface_None ( self , conv ) : [EOL] conv . app_request . surface = None [EOL] assert conv . surface == tuple ( ) [EOL] [EOL] def test_has_screen ( self , conv ) : [EOL] assert isinstance ( conv . has_screen , bool ) [EOL] [EOL] def test_available_surfaces ( self , conv ) : [EOL] assert isinstance ( conv . available_surfaces , tuple ) [EOL] if conv . available_surfaces : [EOL] assert isinstance ( conv . available_surfaces [ [number] ] , str ) [EOL] [EOL] def test_available_surfaces_when_available_surfaces_None ( self , conv ) : [EOL] conv . app_request . available_surfaces = None [EOL] assert conv . available_surfaces == tuple ( ) [EOL] [EOL] def test_is_in_sandbox ( self , conv ) : [EOL] assert isinstance ( conv . is_in_sandbox , bool ) [EOL] [EOL] def test_ask ( self , conv ) : [EOL] conv . ask ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] is None [EOL] assert sr [ [string] ] == [string] [EOL] [EOL] def test_ask_with_automatic_ssml_off ( self , conv ) : [EOL] conv . text_to_speech_as_ssml = False [EOL] conv . ask ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] == [string] [EOL] assert sr [ [string] ] is None [EOL] [EOL] def test_ask_ssml ( self , conv ) : [EOL] conv . text_to_speech_as_ssml = False [EOL] conv . ask_ssml ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] is None [EOL] assert sr [ [string] ] == [string] [EOL] [EOL] def test_ask_does_expect_response ( self , conv ) : [EOL] conv . ask ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] assert resp [ [string] ] is True [EOL] [EOL] def test_tell ( self , conv ) : [EOL] conv . tell ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] is None [EOL] assert sr [ [string] ] == [string] [EOL] [EOL] def test_tell_with_automatic_ssml_off ( self , conv ) : [EOL] conv . text_to_speech_as_ssml = False [EOL] conv . tell ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] == [string] [EOL] assert sr [ [string] ] is None [EOL] [EOL] def test_tell_ssml ( self , conv ) : [EOL] conv . text_to_speech_as_ssml = False [EOL] conv . tell_ssml ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] is None [EOL] assert sr [ [string] ] == [string] [EOL] [EOL] def test_tell_doesnt_expect_response ( self , conv ) : [EOL] conv . tell ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] assert resp [ [string] ] is False [EOL] [EOL] def test_display ( self , conv ) : [EOL] conv . ask ( [string] ) [EOL] conv . display ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr [ [string] ] == [string] [EOL] assert sr [ [string] ] == [string] [EOL] [EOL] def test_display_with_multiple_rich_response_items ( self , conv ) : [EOL] conv . ask ( [string] ) [EOL] conv . ask ( [string] ) [EOL] conv . show_basic_card ( BasicCard ( ) ) [EOL] conv . display ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] sr0 = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr0 [ [string] ] == [string] [EOL] assert sr0 [ [string] ] is None [EOL] sr1 = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert sr1 [ [string] ] == [string] [EOL] assert sr1 [ [string] ] == [string] [EOL] [EOL] def test_display_raises_ValueError_when_no_text_set ( self , conv ) : [EOL] with pytest . raises ( ValueError ) : [EOL] conv . display ( [string] ) [EOL] [EOL] def test_suggest ( self , conv ) : [EOL] conv . suggest ( [string] , [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] rr = resp [ [string] ] [EOL] assert rr [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] assert rr [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] def test_show_basic_card ( self , conv ) : [EOL] card = BasicCard ( title = [string] ) [EOL] conv . show_basic_card ( card ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] bc = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert bc == card . to_json ( ) [EOL] [EOL] def test_show_image ( self , conv ) : [EOL] url = [string] [EOL] conv . show_image ( url = url , accessibility_text = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] bc = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert bc [ [string] ] [ [string] ] == url [EOL] [EOL] def test_show_table_card ( self , conv ) : [EOL] table_card = TableCard ( ) [EOL] conv . show_table_card ( table_card ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] tc = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert tc == table_card . to_json ( ) [EOL] [EOL] def test_play_media_response ( self , conv ) : [EOL] media_response = MediaResponse ( ) [EOL] conv . play_media_response ( media_response ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] mr = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert mr == media_response . to_json ( ) [EOL] [EOL] def test_show_browsing_carousel ( self , conv ) : [EOL] carousel_browse = CarouselBrowse ( ) [EOL] conv . show_carousel_browse ( carousel_browse ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] cb = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert cb == carousel_browse . to_json ( ) [EOL] [EOL] def test_show_order_update ( self , conv ) : [EOL] order_update = OrderUpdate ( ) [EOL] conv . show_order_update ( order_update ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] struct_resp = resp [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] ou = struct_resp [ [string] ] [EOL] assert ou == order_update . to_json ( ) [EOL] [EOL] def test_suggest_link_out ( self , conv ) : [EOL] conv . suggest_link_out ( [string] , [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] los = resp [ [string] ] [ [string] ] [EOL] assert los [ [string] ] == [string] [EOL] assert los [ [string] ] [ [string] ] == [string] [EOL] [EOL] def test_ask_for_permission ( self , conv ) : [EOL] conv . ask_for_permission ( reason = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_confirmation ( self , conv ) : [EOL] conv . ask_for_confirmation ( [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_sign_in ( self , conv ) : [EOL] conv . ask_for_sign_in ( reason = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_datetime ( self , conv ) : [EOL] conv . ask_for_datetime ( request_text = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_date ( self , conv ) : [EOL] conv . ask_for_date ( request_text = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_time ( self , conv ) : [EOL] conv . ask_for_time ( request_text = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_screen_surface ( self , conv ) : [EOL] conv . ask_for_screen_surface ( [string] , [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_new_surface ( self , conv ) : [EOL] conv . ask_for_new_surface ( [ [string] ] , [string] , [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_link ( self , conv ) : [EOL] conv . ask_for_link ( OpenUrlAction ( url = [string] ) ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_simple_selection ( self , conv ) : [EOL] simple_select = SimpleSelect ( ) [EOL] conv . ask_for_simple_selection ( simple_select ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = simple_select . to_json ( ) ) [EOL] [EOL] def test_ask_for_list_selection ( self , conv ) : [EOL] list_select = ListSelect ( ) [EOL] conv . ask_for_list_selection ( list_select ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = list_select . to_json ( ) ) [EOL] [EOL] def test_ask_for_collection_selection ( self , conv ) : [EOL] collection_select = CollectionSelect ( ) [EOL] conv . ask_for_collection_selection ( collection_select ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = collection_select . to_json ( ) ) [EOL] [EOL] def test_ask_for_carousel_selection ( self , conv ) : [EOL] carousel_select = CarouselSelect ( ) [EOL] conv . ask_for_carousel_selection ( carousel_select ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = carousel_select . to_json ( ) ) [EOL] [EOL] def test_ask_for_delivery_address ( self , conv ) : [EOL] conv . ask_for_delivery_address ( reason = [string] ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , [string] , is_ = [string] ) [EOL] [EOL] def test_ask_for_transaction_requirements_check ( self , conv ) : [EOL] order_options = OrderOptions ( ) [EOL] payment_options = PaymentOptions ( ) [EOL] conv . ask_for_transaction_requirements_check ( order_options , payment_options ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = order_options . to_json ( ) ) [EOL] _assert ( resp , [string] , is_ = payment_options . to_json ( ) ) [EOL] [EOL] def test_ask_for_transaction_decision ( self , conv ) : [EOL] proposed_order = ProposedOrder ( ) [EOL] order_options = OrderOptions ( ) [EOL] payment_options = PaymentOptions ( ) [EOL] presentation_options = PresentationOptions ( ) [EOL] conv . ask_for_transaction_decision ( proposed_order , order_options , payment_options , presentation_options , ) [EOL] resp = conv . to_webhook_response_payload ( ) [EOL] _assert_system_intent_is ( resp , [string] ) [EOL] _assert ( resp , [string] , is_ = proposed_order . to_json ( ) ) [EOL] _assert ( resp , [string] , is_ = order_options . to_json ( ) ) [EOL] _assert ( resp , [string] , is_ = payment_options . to_json ( ) ) [EOL] _assert ( resp , [string] , is_ = presentation_options . to_json ( ) ) [EOL] [EOL] [EOL] def _assert_system_intent_is ( resp , intent ) : [EOL] [docstring] [EOL] assert resp [ [string] ] [ [string] ] == f' [string] { intent }' [EOL] [EOL] [EOL] def _assert ( resp , * keys , is_ ) : [EOL] [docstring] [EOL] data = resp [ [string] ] [ [string] ] [EOL] keys = list ( keys ) [EOL] while keys : [EOL] data = data [ keys . pop ( [number] ) ] [EOL] assert data == is_ [EOL] [EOL] [EOL] def test_ssmlify ( ) : [EOL] assert ssmlify ( [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.UserFacade[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.TableCard$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.TableCard$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.TableCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.MediaResponse$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.MediaResponse$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.MediaResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselBrowse$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselBrowse$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselBrowse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderUpdate$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderUpdate$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderUpdate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.SimpleSelect$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.SimpleSelect$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.SimpleSelect$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ListSelect$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ListSelect$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ListSelect$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CollectionSelect$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CollectionSelect$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CollectionSelect$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselSelect$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselSelect$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.CarouselSelect$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ProposedOrder$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PresentationOptions$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ProposedOrder$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 $flask_dialogflow.google_apis.actions_on_google_v2.PresentationOptions$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.ProposedOrder$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.OrderOptions$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PaymentOptions$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.PresentationOptions$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Generator , Any , Iterable , Tuple [EOL] import _importlib_modulespec [EOL] import flask_dialogflow [EOL] import builtins [EOL] import types [EOL] import typing [EOL] [docstring] [EOL] import inspect [EOL] from dataclasses import is_dataclass , fields [EOL] from enum import Enum [EOL] from types import ModuleType [EOL] from typing import Iterable , Type [EOL] [EOL] import pytest [EOL] [EOL] from flask_dialogflow . agent import DIALOGFLOW_VERSIONS [EOL] from flask_dialogflow . google_apis import ( JSONType , JSONTypeSchema , actions_on_google_v2 , dialogflow_v2 , dialogflow_v2beta1 , import_dialogflow_api ) [EOL] from flask_dialogflow . utils import fqn [EOL] [EOL] [EOL] def generate_module_classes ( module ) : [EOL] for _ , cls in inspect . getmembers ( module , inspect . isclass ) : [EOL] if cls . __module__ == module . __name__ : [EOL] yield cls [EOL] [EOL] [EOL] GOOGLE_API_MODULES = ( actions_on_google_v2 , dialogflow_v2 , dialogflow_v2beta1 ) [EOL] GOOGLE_API_MODULE_CLASS = ( cls for mod in GOOGLE_API_MODULES for cls in generate_module_classes ( mod ) ) [EOL] GOOGLE_API_TYPES = ( cls for mod in GOOGLE_API_MODULES for cls in generate_module_classes ( mod ) if issubclass ( cls , JSONType ) ) [EOL] GOOGLE_API_TYPE_SCHEMAS = ( cls for mod in GOOGLE_API_MODULES for cls in generate_module_classes ( mod ) if issubclass ( cls , JSONTypeSchema ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = GOOGLE_API_MODULE_CLASS , ids = fqn ) def google_api_module_class ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_class_is_either_type_or_schema_or_enum ( google_api_module_class ) : [EOL] assert issubclass ( google_api_module_class , ( JSONType , JSONTypeSchema , Enum ) ) , ( [string] [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = GOOGLE_API_TYPES , ids = fqn ) def google_api_type ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_type_is_dataclass ( google_api_type ) : [EOL] assert is_dataclass ( google_api_type ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = GOOGLE_API_TYPE_SCHEMAS , ids = fqn ) def google_api_type_schema ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_each_type_field_maps_to_a_schema_field ( google_api_type ) : [EOL] schema = google_api_type . __marshmallow_schema__ [EOL] for field in fields ( google_api_type ) : [EOL] assert field . name in _schema_field_names ( schema ) [EOL] [EOL] [EOL] def test_each_schema_field_maps_to_a_type_field ( google_api_type_schema ) : [EOL] api_type = google_api_type_schema . __marshmallow_object_class__ [EOL] schema = google_api_type_schema [EOL] for field_name , field_obj in schema . _declared_fields . items ( ) : [EOL] name = field_obj . attribute or field_name [EOL] assert name in _type_field_names ( api_type ) [EOL] [EOL] [EOL] def _schema_field_names ( schema ) : [EOL] [docstring] [EOL] return tuple ( ( field_obj . attribute or field_name ) for field_name , field_obj in schema . _declared_fields . items ( ) ) [EOL] [EOL] [EOL] def _type_field_names ( api_type ) : [EOL] return tuple ( field . name for field in fields ( api_type ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , DIALOGFLOW_VERSIONS ) def test_import_dialogflow_api ( version ) : [EOL] mod_name = f' [string] { version }' [EOL] mod = import_dialogflow_api ( version ) [EOL] assert isinstance ( mod , ModuleType ) [EOL] assert mod . __name__ == mod_name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from flask_dialogflow . cli import intents , contexts , integrations [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def runner ( app , agent ) : [EOL] agent . init_app ( app ) [EOL] return app . test_cli_runner ( ) [EOL] [EOL] [EOL] def test_intents_cmd ( runner ) : [EOL] res = runner . invoke ( intents ) [EOL] assert [string] in res . output [EOL] [EOL] [EOL] def test_contexts_cmd ( runner ) : [EOL] res = runner . invoke ( contexts ) [EOL] assert [string] in res . output [EOL] [EOL] [EOL] def test_integrations_cmd ( runner ) : [EOL] res = runner . invoke ( integrations ) [EOL] assert [string] in res . output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import flask_dialogflow [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from flask_dialogflow . exceptions import AmbiguousIntegrationError [EOL] from flask_dialogflow . google_apis . dialogflow_v2 import OriginalDetectIntentRequest [EOL] from flask_dialogflow . integrations import ( AbstractIntegrationConversation , GenericIntegrationConversation , IntegrationRegistry ) [EOL] [EOL] [EOL] class TestAbstractIntegrationConversation : [EOL] [EOL] def test_from_webhook_request_payload ( self ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] AbstractIntegrationConversation . from_webhook_request_payload ( { } ) [EOL] [EOL] def to_webhook_response_payload ( self ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] AbstractIntegrationConversation ( ) . to_webhook_response_payload ( ) [EOL] [EOL] [EOL] class TestGenericIntegrationConversation : [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( None , { } ) , ( { } , { } ) , ( { [string] : [string] , [string] : [number] } , { [string] : [string] , [string] : [number] } ) ] ) def test_from_webhook_request_payload ( self , payload , expected_data ) : [EOL] conv = GenericIntegrationConversation . from_webhook_request_payload ( payload ) [EOL] assert isinstance ( conv , AbstractIntegrationConversation ) [EOL] assert conv . _data == expected_data [EOL] [EOL] @ pytest . fixture def conv ( self ) : [EOL] return GenericIntegrationConversation . from_webhook_request_payload ( { [string] : [string] , [string] : [number] } ) [EOL] [EOL] def test_getitem ( self , conv ) : [EOL] assert conv [ [string] ] == conv . _data [ [string] ] [EOL] [EOL] def test_setitem ( self , conv ) : [EOL] conv [ [string] ] = [number] [EOL] assert conv . _data [ [string] ] == [number] [EOL] [EOL] def test_delitem ( self , conv ) : [EOL] del conv [ [string] ] [EOL] assert [string] not in conv . _data [EOL] [EOL] def test_len ( self , conv ) : [EOL] assert len ( conv ) == len ( conv . _data ) [EOL] [EOL] def test_iter ( self , conv ) : [EOL] assert list ( iter ( conv ) ) == list ( iter ( conv . _data ) ) [EOL] [EOL] def test_to_webhook_response_payload ( self , conv ) : [EOL] assert conv . to_webhook_response_payload ( ) == conv . _data [EOL] [EOL] [EOL] class TestIntegrationRegistry : [EOL] [EOL] def test_init ( self ) : [EOL] reg = IntegrationRegistry ( ) [EOL] assert ( reg . default_integration_conv_cls == GenericIntegrationConversation ) [EOL] assert reg . _integrations == { } [EOL] [EOL] @ pytest . fixture def registry ( self ) : [EOL] return IntegrationRegistry ( ) [EOL] [EOL] def test_register ( self , registry ) : [EOL] registry . register ( [string] , object , [string] ) [EOL] assert registry . _integrations [ ( [string] , [string] ) ] == ( object , { } ) [EOL] [EOL] def test_error_on_duplicate_registration ( self , registry ) : [EOL] registry . register ( [string] , object , [string] ) [EOL] with pytest . raises ( AmbiguousIntegrationError ) : [EOL] registry . register ( [string] , object , [string] ) [EOL] [EOL] def test_lookup ( self , registry ) : [EOL] registry . register ( [string] , object , [string] ) [EOL] assert registry . lookup ( [string] , [string] ) == ( object , { } ) [EOL] [EOL] def test_lookup_source_only ( self , registry ) : [EOL] registry . register ( [string] , object ) [EOL] assert registry . lookup ( [string] ) == ( object , { } ) [EOL] [EOL] def test_lookup_non_registered ( self , registry ) : [EOL] assert registry . lookup ( [string] ) is None [EOL] [EOL] def test_unregister ( self , registry ) : [EOL] registry . register ( [string] , object ) [EOL] assert registry . lookup ( [string] ) is not None [EOL] registry . unregister ( [string] ) [EOL] assert registry . lookup ( [string] ) is None [EOL] [EOL] def test_unregister_does_nothing_when_not_registered ( self , registry ) : [EOL] registry . unregister ( [string] ) [EOL] [EOL] @ pytest . fixture def odir ( self ) : [EOL] return OriginalDetectIntentRequest ( source = [string] , version = [string] , payload = { [string] : [number] } ) [EOL] [EOL] def test_init_integration_convs_with_custom_conv ( self , registry , odir ) : [EOL] class FooConv ( GenericIntegrationConversation ) : [EOL] pass [EOL] registry . register ( [string] , FooConv , [string] ) [EOL] convs = registry . init_integration_convs ( odir ) [EOL] assert isinstance ( convs [ [string] ] , FooConv ) [EOL] assert isinstance ( convs [ [string] ] , GenericIntegrationConversation ) [EOL] [EOL] def test_init_integration_convs_without_custom_conv ( self , registry , odir ) : [EOL] convs = registry . init_integration_convs ( odir ) [EOL] assert isinstance ( convs [ [string] ] , GenericIntegrationConversation ) [EOL] assert isinstance ( convs [ [string] ] , GenericIntegrationConversation ) [EOL] [EOL] def test_list_entries ( self , registry ) : [EOL] registry . register ( [string] , object ) [EOL] entries = list ( registry . list_entries ( ) ) [EOL] assert entries == [ ( [string] , None , object , { } ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.IntegrationRegistry$ 0 0 0 0 0 0 0 $flask_dialogflow.integrations.IntegrationRegistry$ 0 0 0 0 0 0 0 $flask_dialogflow.integrations.IntegrationRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from flask_dialogflow . agent import build_webhook_request [EOL] from flask_dialogflow . google_apis . actions_on_google_v2 import User [EOL] from flask_dialogflow . utils import fqn [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( User , [string] ) , ( User . from_json , [string] ) , ( build_webhook_request , [string] ) , ] ) def test_fqn ( obj , expected ) : [EOL] assert fqn ( obj ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import flask_dialogflow [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from flask_dialogflow . agent import DialogflowConversation [EOL] from flask_dialogflow . context import ContextManager [EOL] from flask_dialogflow . conversation import ( V2DialogflowConversation , V2beta1DialogflowConversation ) [EOL] from flask_dialogflow . google_apis . dialogflow_v2 import Sentiment [EOL] from flask_dialogflow . integrations import GenericIntegrationConversation [EOL] from flask_dialogflow . integrations . actions_on_google import ( V2ActionsOnGoogleDialogflowConversation ) [EOL] [EOL] [EOL] class TestDialogflowConversation : [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ V2DialogflowConversation , V2beta1DialogflowConversation ] ) def test_empty_init ( self , conv_cls ) : [EOL] conv = conv_cls ( ) [EOL] assert isinstance ( conv . webhook_request , conv . _df . WebhookRequest ) [EOL] assert isinstance ( conv . contexts , ContextManager ) [EOL] assert isinstance ( conv . integrations [ [string] ] , GenericIntegrationConversation ) [EOL] assert isinstance ( conv . to_webhook_response ( ) , conv . _df . WebhookResponse ) [EOL] [EOL] @ pytest . fixture def conv ( self , agent ) : [EOL] df = agent . _df [EOL] webhook_request = df . WebhookRequest ( session = [string] , query_result = df . QueryResult ( intent = df . Intent ( display_name = [string] ) , query_text = [string] , language_code = [string] , all_required_params_present = True , intent_detection_confidence = [number] , speech_recognition_confidence = [number] , sentiment_analysis_result = df . SentimentAnalysisResult ( df . Sentiment ( [number] , [number] ) ) , output_contexts = [ df . Context ( [string] ) ] ) , original_detect_intent_request = df . OriginalDetectIntentRequest ( source = [string] , version = [string] ) ) [EOL] return agent . _initialize_conversation ( webhook_request ) [EOL] [EOL] def test_webhook_request ( self , conv ) : [EOL] assert isinstance ( conv . webhook_request , conv . _df . WebhookRequest ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , None ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , None ) , ( [string] , { } ) , ( [string] , True ) , ( [string] , [number] ) , ( [string] , { } ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , Sentiment ( [number] , [number] ) ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , { } ) , ] ) def test_conv_attrs ( self , conv , attr , expected ) : [EOL] assert getattr ( conv , attr ) == expected [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , V2ActionsOnGoogleDialogflowConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ( [string] , GenericIntegrationConversation ) , ] ) def test_integration_convs ( self , source , integration_conv , agent ) : [EOL] [EOL] @ agent . handle ( [string] ) def handler ( conv ) : [EOL] assert isinstance ( getattr ( conv , source ) , integration_conv ) [EOL] return conv [EOL] [EOL] agent . test_request ( [string] ) [EOL] [EOL] def test_context ( self , conv ) : [EOL] assert [string] in conv . contexts [EOL] [EOL] def test_ask ( self , conv ) : [EOL] conv . ask ( [string] ) [EOL] resp = conv . to_webhook_response ( ) [EOL] assert resp . fulfillment_messages [ [number] ] . text . text [ [number] ] == [string] [EOL] [EOL] def test_tell ( self , conv ) : [EOL] if not isinstance ( conv , V2beta1DialogflowConversation ) : [EOL] pytest . skip ( [string] ) [EOL] conv . tell ( [string] ) [EOL] resp = conv . to_webhook_response ( ) [EOL] assert resp . fulfillment_messages [ [number] ] . text . text [ [number] ] == [string] [EOL] assert resp . end_interaction [EOL] [EOL] def test_show_quick_replies ( self , conv ) : [EOL] conv . show_quick_replies ( [string] , [string] , title = [string] ) [EOL] resp = conv . to_webhook_response ( ) [EOL] qr = resp . fulfillment_messages [ [number] ] . quick_replies [EOL] assert qr . quick_replies == [ [string] , [string] ] [EOL] assert qr . title == [string] [EOL] [EOL] def test_show_card ( self , conv ) : [EOL] card = conv . _df . Card ( [string] ) [EOL] conv . show_card ( card ) [EOL] resp = conv . to_webhook_response ( ) [EOL] assert resp . fulfillment_messages [ [number] ] . card == card [EOL] [EOL] def test_show_image ( self , conv ) : [EOL] img = conv . _df . Image ( [string] ) [EOL] conv . show_image ( img ) [EOL] resp = conv . to_webhook_response ( ) [EOL] assert resp . fulfillment_messages [ [number] ] . image == img [EOL] [EOL] def test_alternative_query_results ( self , conv ) : [EOL] if not isinstance ( conv , V2beta1DialogflowConversation ) : [EOL] pytest . skip ( [string] ) [EOL] assert conv . alternative_query_results == [ ] [EOL] [EOL] def test_ctx_set_builds_full_name ( self , conv ) : [EOL] conv . contexts . set ( [string] ) [EOL] assert conv . contexts . get ( [string] ) . name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import flask_dialogflow [EOL] [docstring] [EOL] from flask_dialogflow . exceptions import ( DialogflowAgentError , AmbiguousHandlerError , AmbiguousIntegrationError , ContextNotRegisteredError , ContextClassNotSerializableError , ) [EOL] from flask_dialogflow . integrations import GenericIntegrationConversation [EOL] [EOL] [EOL] def test_DialogflowAgentError ( ) : [EOL] assert [string] in str ( DialogflowAgentError ( [string] ) ) [EOL] [EOL] [EOL] def test_AmbiguousHandlerError ( ) : [EOL] def handler ( ) : [EOL] return [EOL] err = AmbiguousHandlerError ( intent = [string] , existing_handler = handler ) [EOL] assert [string] in str ( err ) [EOL] assert __name__ + [string] in str ( err ) [EOL] [EOL] [EOL] def test_AmbiguousIntegrationError ( ) : [EOL] err = AmbiguousIntegrationError ( source = [string] , existing_cls = GenericIntegrationConversation , version = [string] ) [EOL] assert [string] in str ( err ) [EOL] assert str ( GenericIntegrationConversation ) in str ( err ) [EOL] assert [string] in str ( err ) [EOL] [EOL] [EOL] def test_ContextNotRegisteredError ( ) : [EOL] assert [string] in str ( ContextNotRegisteredError ( display_name = [string] ) ) [EOL] [EOL] [EOL] def test_ContextClassNotSerializableError ( ) : [EOL] class Foo : [EOL] pass [EOL] err = ContextClassNotSerializableError ( Foo ) [EOL] assert [string] in str ( err ) [EOL] assert str ( Foo ) in str ( err ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Callable , Union [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from typing import Union , Type , Callable [EOL] [EOL] [EOL] def fqn ( obj ) : [EOL] [docstring] [EOL] module = obj . __module__ + [string] if hasattr ( obj , [string] ) else [string] [EOL] name = obj . __qualname__ if hasattr ( obj , [string] ) else str ( obj ) [EOL] return module + name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Optional , Any [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] import inspect [EOL] from typing import Type , Optional , TYPE_CHECKING [EOL] [EOL] from flask_dialogflow . json import JSONType [EOL] [EOL] if TYPE_CHECKING : [comment] [EOL] from flask_dialogflow . agent import ConversationHandler [EOL] from flask_dialogflow . integrations import AbstractIntegrationConversation [EOL] [EOL] [EOL] class DialogflowAgentError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class AmbiguousHandlerError ( DialogflowAgentError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , intent , existing_handler ) : [EOL] handler_path = ( inspect . getmodule ( existing_handler ) . __name__ + [string] + existing_handler . __name__ ) [EOL] msg = ( f' [string] { intent } [string] ' f' [string] { handler_path } [string] ' ) [EOL] super ( ) . __init__ ( msg ) [EOL] [EOL] [EOL] class AmbiguousIntegrationError ( DialogflowAgentError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , source , existing_cls , version = None , ) : [EOL] msg = ( f" [string] { source } [string] { version } [string] " f" [string] { existing_cls } [string] " ) [EOL] super ( ) . __init__ ( msg ) [EOL] [EOL] [EOL] class ContextNotRegisteredError ( DialogflowAgentError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , display_name ) : [EOL] super ( ) . __init__ ( f' [string] { display_name } [string] ' ) [EOL] [EOL] [EOL] class ContextClassNotSerializableError ( DialogflowAgentError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , cls ) : [EOL] msg = ( f' [string] ' f' [string] { JSONType . __name__ } [string] ' f' [string] { cls } [string] ' ) [EOL] super ( ) . __init__ ( msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Type['AbstractIntegrationConversation']$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Type['AbstractIntegrationConversation']$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] from typing import Type , Union , Any , Callable , Iterable , Mapping , Tuple , MutableSequence , Dict , Optional , MutableMapping [EOL] import flask [EOL] import flask_dialogflow [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] import logging [EOL] import os [EOL] from typing import ( Callable , Optional , Tuple , Type , Mapping , Any , Iterable , MutableMapping , Dict , MutableSequence , Union , ) [EOL] [EOL] from flask import Flask , jsonify , request [EOL] from jinja2 . loaders import ChoiceLoader [EOL] [EOL] from flask_dialogflow . context import ( CTX_KEEP_AROUND_LIFESPAN , CtxT , Context , ContextRegistry , ContextRegistryEntry , ContextDefaultFactory , ContextDeserializer , ContextSerializer , ContextManager , SessionContext , make_full_ctx_name , ) [EOL] from flask_dialogflow . conversation import ( V2DialogflowConversation , V2beta1DialogflowConversation , ) [EOL] from flask_dialogflow . exceptions import ( DialogflowAgentError , AmbiguousHandlerError , ContextClassNotSerializableError ) [EOL] from flask_dialogflow . google_apis import ( dialogflow_v2 , dialogflow_v2beta1 , import_dialogflow_api ) [EOL] from flask_dialogflow . integrations import ( AbstractIntegrationConversation , IntegrationRegistry , IntegrationRegistryEntry ) [EOL] from flask_dialogflow . integrations . actions_on_google import ( V2ActionsOnGoogleDialogflowConversation , UserStorageDefaultFactory , UserStorageDeserializer , UserStorageSerializer , ) [EOL] from flask_dialogflow . json import JSONType [EOL] from flask_dialogflow . templating import YamlLoaderWithRandomization [EOL] [EOL] [EOL] DIALOGFLOW_VERSIONS = { [string] : V2DialogflowConversation , [string] : V2beta1DialogflowConversation , } [EOL] [EOL] [comment] [EOL] DialogflowConversation = Union [ V2DialogflowConversation , V2beta1DialogflowConversation ] [EOL] ConversationHandler = Callable [ [ DialogflowConversation ] , DialogflowConversation ] [EOL] WebhookRequest = Union [ dialogflow_v2 . WebhookRequest , dialogflow_v2beta1 . WebhookRequest ] [EOL] WebhookResponse = Union [ dialogflow_v2 . WebhookResponse , dialogflow_v2beta1 . WebhookResponse ] [EOL] [EOL] [EOL] def _validate_dialogflow_version ( version ) : [EOL] if version not in DIALOGFLOW_VERSIONS : [EOL] raise ValueError ( f' [string] { version } [string] ' f' [string] { DIALOGFLOW_VERSIONS . keys ( ) } [string] ' ) [EOL] [EOL] [EOL] class DialogflowAgent : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , app = None , version = [string] , route = [string] , templates_file = [string] , debug = False , aog_user_storage_default_factory = dict , aog_user_storage_deserializer = json . loads , aog_user_storage_serializer = json . dumps , aog_text_to_speech_as_ssml = True , ) : [EOL] _validate_dialogflow_version ( version ) [EOL] self . _conv_cls = DIALOGFLOW_VERSIONS [ version ] [EOL] self . _df = import_dialogflow_api ( version ) [EOL] [EOL] self . app = app [EOL] self . route = route [EOL] self . templates_file = templates_file [EOL] [EOL] self . debug = debug or os . getenv ( [string] ) [EOL] self . logger = logging . getLogger ( [string] ) [EOL] self . logger . addHandler ( _create_default_handler ( ) ) [EOL] if self . debug : [EOL] self . logger . setLevel ( logging . DEBUG ) [EOL] self . _handler_registry = { } [EOL] [EOL] self . _integration_registry = IntegrationRegistry ( ) [EOL] self . register_integration ( source = [string] , integration_conv_cls = V2ActionsOnGoogleDialogflowConversation , version = [string] , integration_conv_cls_kwargs = { [string] : aog_user_storage_serializer , [string] : aog_user_storage_deserializer , [string] : aog_user_storage_default_factory , [string] : aog_text_to_speech_as_ssml } ) [EOL] [EOL] self . _context_registry = ContextRegistry ( ) [EOL] [EOL] [comment] [EOL] self . context ( [string] , keep_around = True , default_factory = SessionContext ) ( SessionContext ) [EOL] [EOL] if app is not None : [EOL] self . init_app ( app = app ) [EOL] [EOL] def init_app ( self , app , route = None , templates_file = None ) : [EOL] [docstring] [EOL] app . add_url_rule ( route or self . route , view_func = self . _flask_view_func , methods = [ [string] ] , ) [EOL] [EOL] [comment] [EOL] templates_file = templates_file or self . templates_file [EOL] templates_path = os . path . join ( app . root_path , templates_file ) [EOL] app . jinja_loader = ChoiceLoader ( [ app . jinja_loader , YamlLoaderWithRandomization ( templates_path ) ] ) [EOL] app . jinja_env . auto_reload = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not hasattr ( app , [string] ) : [EOL] app . extensions = { } [EOL] app . extensions [ [string] ] = self [EOL] [EOL] [comment] [EOL] app . shell_context_processor ( self . _flask_shell_context_processor ) [EOL] [EOL] def register_handler ( self , intent , handler ) : [EOL] [docstring] [EOL] if intent in self . _handler_registry : [EOL] raise AmbiguousHandlerError ( intent , self . _handler_registry [ intent ] ) [EOL] self . _handler_registry [ intent ] = handler [EOL] [EOL] def handle ( self , intent ) : [EOL] [docstring] [EOL] [EOL] def decorator ( f ) : [EOL] self . register_handler ( intent , handler = f ) [EOL] return f [EOL] [EOL] return decorator [EOL] [EOL] def register_integration ( self , source , integration_conv_cls , version = None , integration_conv_cls_kwargs = None , ) : [EOL] [docstring] [EOL] self . _integration_registry . register ( source = source , integration_conversation = integration_conv_cls , version = version , integration_conversation_kwargs = integration_conv_cls_kwargs ) [EOL] [EOL] def integration ( self , source , version = None , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] def decorator ( cls ) : [EOL] self . register_integration ( source , cls , version , kwargs ) [EOL] return cls [EOL] [EOL] return decorator [EOL] [EOL] def register_context ( self , display_name , keep_around = False , default_factory = None , deserializer = None , serializer = None , ) : [EOL] [docstring] [EOL] self . _context_registry . register ( display_name = display_name , keep_around = keep_around , default_factory = default_factory , deserializer = deserializer , serializer = serializer , ) [EOL] [EOL] def context ( self , display_name , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] def decorator ( cls ) : [EOL] if issubclass ( cls , JSONType ) : [EOL] kwargs [ [string] ] = kwargs . get ( [string] , cls . to_json ) [EOL] kwargs [ [string] ] = kwargs . get ( [string] , cls . from_json ) [EOL] kwargs [ [string] ] = kwargs . get ( [string] , cls ) [EOL] if not ( kwargs . get ( [string] ) and kwargs . get ( [string] ) ) : [EOL] raise ContextClassNotSerializableError ( cls ) [EOL] self . register_context ( display_name , ** kwargs ) [EOL] return cls [EOL] [EOL] return decorator [EOL] [EOL] def list_handler ( self ) : [EOL] [docstring] [EOL] yield from self . _handler_registry . items ( ) [EOL] [EOL] def list_integrations ( self ) : [EOL] [docstring] [EOL] yield from self . _integration_registry . list_entries ( ) [EOL] [EOL] def list_contexts ( self ) : [EOL] [docstring] [EOL] yield from self . _context_registry . list_entries ( ) [EOL] [EOL] def test_request ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] webhook_request = build_webhook_request ( * args , ** kwargs ) [EOL] webhook_response = self . _handle_request ( webhook_request ) [EOL] return TestWebhookResponse . from_webhook_response ( webhook_response ) [EOL] [EOL] def _flask_view_func ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] request_payload = request . get_json ( ) [EOL] self . _log_json ( request_payload ) [EOL] webhook_request = self . _df . WebhookRequest . from_json ( request_payload ) [EOL] webhook_response = self . _handle_request ( webhook_request ) [EOL] response_body = webhook_response . to_json ( ) [EOL] self . _log_json ( response_body ) [EOL] return jsonify ( response_body ) [EOL] [EOL] def _lookup_conversation_handler ( self , conv ) : [EOL] [docstring] [EOL] intent = conv . webhook_request . query_result . intent . display_name [EOL] try : [EOL] handler = self . _handler_registry [ intent ] [EOL] except KeyError : [EOL] raise DialogflowAgentError ( f' [string] { intent } [string] ' ) [EOL] return handler [EOL] [EOL] def _handle_request ( self , webhook_request ) : [EOL] [docstring] [EOL] conv = self . _initialize_conversation ( webhook_request ) [EOL] handler = self . _lookup_conversation_handler ( conv ) [EOL] conv = handler ( conv ) [EOL] self . _serialize_context_params ( conv . contexts ) [EOL] webhook_response = conv . to_webhook_response ( ) [EOL] return webhook_response [EOL] [EOL] def _initialize_conversation ( self , webhook_request ) : [EOL] [docstring] [EOL] contexts = [ Context . from_context ( ctx ) for ctx in webhook_request . query_result . output_contexts ] [EOL] self . _deserialize_context_params ( contexts ) [EOL] self . _initialize_default_contexts ( contexts , webhook_request . session ) [EOL] self . _reset_lifespan_of_keep_around_contexts ( contexts ) [EOL] context_manager = ContextManager ( contexts = contexts , session = webhook_request . session , context_registry = self . _context_registry ) [EOL] integration_convs = self . _integration_registry . init_integration_convs ( webhook_request . original_detect_intent_request ) [EOL] return self . _conv_cls ( webhook_request , context_manager = context_manager , integration_convs = integration_convs , ) [EOL] [EOL] def _initialize_default_contexts ( self , contexts , session ) : [EOL] [docstring] [EOL] present = set ( ctx . display_name for ctx in contexts ) [EOL] missing = self . _context_registry . have_default_factories ( ) - present [EOL] for name in missing : [EOL] default_factory = self . _context_registry . get_default_factory ( name ) [EOL] parameters = default_factory ( ) [EOL] ctx_name = make_full_ctx_name ( session , name ) [EOL] ctx = Context ( ctx_name , parameters = parameters ) [EOL] contexts . append ( ctx ) [EOL] [EOL] def _reset_lifespan_of_keep_around_contexts ( self , contexts ) : [EOL] [docstring] [EOL] for ctx in contexts : [EOL] name = ctx . display_name [EOL] if ( name in self . _context_registry [EOL] and self . _context_registry . should_keep_around ( name ) ) : [EOL] ctx . lifespan_count = CTX_KEEP_AROUND_LIFESPAN [EOL] [EOL] def _serialize_context_params ( self , contexts ) : [EOL] [docstring] [EOL] for ctx in contexts : [EOL] if ctx . display_name in self . _context_registry : [EOL] serializer = self . _context_registry . get_serializer ( ctx . display_name ) [EOL] if serializer : [EOL] ctx . parameters = serializer ( ctx . parameters ) [EOL] [EOL] def _deserialize_context_params ( self , contexts ) : [EOL] [docstring] [EOL] for ctx in contexts : [EOL] if ctx . display_name in self . _context_registry : [EOL] deserializer = self . _context_registry . get_deserializer ( ctx . display_name ) [EOL] if deserializer : [EOL] ctx . parameters = deserializer ( ctx . parameters ) [EOL] [EOL] def _log_json ( self , json_data , level = logging . DEBUG , header = None , indent = [number] , ensure_ascii = False , ) : [EOL] [docstring] [EOL] header = f'{ header } [string] ' if header else [string] [EOL] msg = json . dumps ( json_data , indent = indent , ensure_ascii = ensure_ascii ) [EOL] self . logger . log ( level , header + msg ) [EOL] [EOL] def _flask_shell_context_processor ( self ) : [EOL] [docstring] [EOL] return { [string] : self } [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . __class__ . __name__ } [string] { self . __module__ } [string] " [EOL] [EOL] [EOL] def _create_default_handler ( ) : [EOL] handler = logging . StreamHandler ( ) [EOL] handler . setFormatter ( logging . Formatter ( [string] ) ) [EOL] return handler [EOL] [EOL] [EOL] def build_webhook_request ( intent = [string] , action = None , source = None , session = [string] , parameters = None , contexts = None , payload = None , is_fallback = False , dialogflow_version = [string] , ) : [EOL] [docstring] [EOL] _validate_dialogflow_version ( dialogflow_version ) [EOL] df = import_dialogflow_api ( dialogflow_version ) [EOL] return df . WebhookRequest ( session = session , query_result = df . QueryResult ( intent = df . Intent ( display_name = intent , is_fallback = is_fallback ) , action = action , parameters = parameters , output_contexts = list ( contexts or [ ] ) ) , original_detect_intent_request = df . OriginalDetectIntentRequest ( source = source , payload = payload ) ) [EOL] [EOL] [EOL] class TestWebhookResponse ( dialogflow_v2beta1 . WebhookResponse ) : [EOL] [docstring] [EOL] [EOL] __test__ = False [comment] [EOL] [EOL] @ classmethod def from_webhook_response ( cls , webhook_response ) : [EOL] [docstring] [EOL] return cls . from_json ( webhook_response . to_json ( ) ) [EOL] [EOL] def text_responses ( self ) : [EOL] [docstring] [EOL] for msg in ( self . fulfillment_messages or [ ] ) : [EOL] if msg . text : [EOL] yield from msg . text . text [EOL] [EOL] def has_context ( self , display_name ) : [EOL] [docstring] [EOL] return any ( ctx . name . endswith ( display_name ) for ctx in self . output_contexts ) [EOL] [EOL] def context ( self , display_name ) : [EOL] [docstring] [EOL] try : [EOL] return [ ctx for ctx in self . output_contexts if ctx . name . endswith ( display_name ) ] [ [number] ] [EOL] except IndexError : [EOL] raise ValueError ( f' [string] { display_name } [string] ' ) [EOL]	
[comment] [EOL] from typing import List , Literal , Tuple , Any [EOL] import typing_extensions [EOL] import typing [EOL] [docstring] [EOL] [EOL] import click [EOL] from flask import current_app [EOL] from flask . cli import AppGroup [EOL] [EOL] from tabulate import tabulate [EOL] [EOL] from flask_dialogflow . utils import fqn [EOL] [EOL] [EOL] @ click . group ( cls = AppGroup ) def agent_cli ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ agent_cli . command ( [string] ) def intents ( ) : [EOL] [docstring] [EOL] with current_app . app_context ( ) : [EOL] agent = current_app . extensions [ [string] ] [EOL] data = list ( agent . list_handler ( ) ) [EOL] data . sort ( key = lambda intent_handler : intent_handler [ [number] ] ) [EOL] table_data = [ ( intent , fqn ( handler ) ) for intent , handler in data ] [EOL] table = tabulate ( table_data , headers = ( [string] , [string] ) ) [EOL] click . echo ( table ) [EOL] [EOL] [EOL] @ agent_cli . command ( [string] ) def contexts ( ) : [EOL] [docstring] [EOL] with current_app . app_context ( ) : [EOL] agent = current_app . extensions [ [string] ] [EOL] context_processors = list ( agent . list_contexts ( ) ) [EOL] data = [ ( ctx . display_name , fqn ( ctx . default_factory ) , ctx . keep_around ) for ctx in context_processors ] [EOL] headers = ( [string] , [string] , [string] ) [EOL] table = tabulate ( data , headers ) [EOL] click . echo ( table ) [EOL] [EOL] [EOL] @ agent_cli . command ( [string] ) def integrations ( ) : [EOL] [docstring] [EOL] with current_app . app_context ( ) : [EOL] agent = current_app . extensions [ [string] ] [EOL] data = list ( agent . list_integrations ( ) ) [EOL] headers = ( [string] , [string] , [string] , [string] ) [EOL] table = tabulate ( data , headers ) [EOL] click . echo ( table ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Union , Any , Optional , MutableMapping [EOL] import flask_dialogflow [EOL] import builtins [EOL] import marshmallow [EOL] import typing [EOL] [docstring] [EOL] from dataclasses import dataclass [EOL] from typing import Type , Optional , MutableMapping , Any , Union [EOL] [EOL] from marshmallow import post_load , Schema , EXCLUDE , post_dump [EOL] from marshmallow . fields import Nested [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] JSON = MutableMapping [ str , Any ] [EOL] [EOL] [EOL] @ dataclass class JSONType : [EOL] [docstring] [EOL] [EOL] def __init_subclass__ ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init_subclass__ ( ) [EOL] schema = kwargs . pop ( [string] , None ) [EOL] if not schema : [comment] [EOL] try : [EOL] schema = getattr ( cls , [string] ) [EOL] except AttributeError : [EOL] raise AttributeError ( [string] [string] ) [EOL] if not issubclass ( schema , JSONTypeSchema ) : [EOL] raise TypeError ( f' [string] { JSONTypeSchema . __name__ } [string] ' ) [EOL] cls . __marshmallow_schema__ = schema [EOL] schema . __marshmallow_object_class__ = cls [EOL] [EOL] @ classmethod def from_json ( cls , data , schema_kwargs = None , load_kwargs = None ) : [EOL] [docstring] [EOL] schema_kwargs = schema_kwargs or { } [EOL] load_kwargs = load_kwargs or { } [EOL] schema = cls . __marshmallow_schema__ ( ** schema_kwargs ) [EOL] return schema . load ( data , ** load_kwargs ) [EOL] [EOL] def to_json ( self , schema_kwargs = None , dump_kwargs = None ) : [EOL] [docstring] [EOL] schema_kwargs = schema_kwargs or { } [EOL] dump_kwargs = dump_kwargs or { } [EOL] schema = self . __marshmallow_schema__ ( ** schema_kwargs ) [EOL] return schema . dump ( self , ** dump_kwargs ) [EOL] [EOL] [EOL] class JSONTypeSchema ( Schema ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] unknown = EXCLUDE [EOL] [EOL] def __init_subclass__ ( cls , ** kwargs ) : [EOL] super ( ) . __init_subclass__ ( ** kwargs ) [EOL] cls . __marshmallow_object_class__ = None [EOL] [EOL] @ post_load def make_obj ( self , data ) : [EOL] if not callable ( self . __class__ . __marshmallow_object_class__ ) : [EOL] return data [EOL] return self . __class__ . __marshmallow_object_class__ ( ** data ) [EOL] [EOL] @ post_dump def remove_skip_values ( self , data ) : [EOL] data_copy = data . copy ( ) [EOL] for key , value in data_copy . items ( ) : [EOL] if value is None : [EOL] del data [ key ] [EOL] elif type ( value ) is list and len ( value ) == [number] : [EOL] del data [ key ] [EOL] elif type ( value ) is dict and len ( value ) == [number] : [EOL] del data [ key ] [EOL] return data [EOL] [EOL] [EOL] class ModuleLocalNested ( Nested ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , nested , module_name = None , * args , ** kwargs ) : [EOL] if isinstance ( nested , str ) and module_name : [EOL] nested = module_name + [string] + nested [EOL] super ( ) . __init__ ( nested , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , DefaultDict , Any , List , Mapping , ContextManager , Optional [EOL] import V2DialogflowConversation [EOL] import flask_dialogflow [EOL] import builtins [EOL] import typing [EOL] import V2beta1DialogflowConversation [EOL] [docstring] [EOL] from collections import defaultdict [EOL] from typing import Optional , Mapping , Any , DefaultDict , List [EOL] [EOL] from flask_dialogflow . context import ContextManager , SessionContext , Context [EOL] from flask_dialogflow . google_apis import import_dialogflow_api [EOL] from flask_dialogflow . integrations import ( AbstractIntegrationConversation , GenericIntegrationConversation ) [EOL] from flask_dialogflow . integrations . actions_on_google import ( V2ActionsOnGoogleDialogflowConversation ) [EOL] [EOL] [EOL] class V2DialogflowConversation : [EOL] [docstring] [EOL] [EOL] _df = import_dialogflow_api ( [string] ) [EOL] [EOL] def __init__ ( self , webhook_request = None , context_manager = None , integration_convs = None , ) : [EOL] [docstring] [EOL] if webhook_request is None : [EOL] odir = self . _df . OriginalDetectIntentRequest ( ) [EOL] webhook_request = self . _df . WebhookRequest ( query_result = self . _df . QueryResult ( intent = self . _df . Intent ( ) ) , original_detect_intent_request = odir , ) [EOL] self . _webhook_request = webhook_request [EOL] self . _contexts = context_manager or ContextManager ( contexts = [ Context ( [string] , parameters = SessionContext ( ) ) ] ) [EOL] self . _integration_convs = defaultdict ( GenericIntegrationConversation ) [EOL] if integration_convs : [EOL] self . _integration_convs . update ( integration_convs ) [EOL] [EOL] self . _session_ctx = self . contexts . get ( [string] ) . parameters [EOL] self . _webhook_response = self . _df . WebhookResponse ( ) [EOL] [EOL] if self . webhook_request . query_result . intent . is_fallback : [EOL] self . _session_ctx . fallback_level += [number] [EOL] else : [EOL] self . _session_ctx . fallback_level = [number] [EOL] [EOL] @ property def webhook_request ( self ) : [EOL] [docstring] [EOL] return self . _webhook_request [EOL] [EOL] @ property def session ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . session [EOL] [EOL] @ property def response_id ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . response_id [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ property def query_text ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . query_text [EOL] [EOL] @ property def language_code ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . language_code [EOL] [EOL] @ property def intent ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . intent . display_name [EOL] [EOL] @ property def action ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . action [EOL] [EOL] @ property def contexts ( self ) : [EOL] [docstring] [EOL] return self . _contexts [EOL] [EOL] @ property def parameters ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . parameters [EOL] [EOL] @ property def all_required_params_present ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . all_required_params_present [EOL] [EOL] @ property def fallback_level ( self ) : [EOL] [docstring] [EOL] return self . _session_ctx . fallback_level [EOL] [EOL] @ property def diagnostic_info ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . diagnostic_info [EOL] [EOL] @ property def intent_detection_confidence ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . intent_detection_confidence [EOL] [EOL] @ property def speech_recognition_confidence ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . query_result . speech_recognition_confidence [EOL] [EOL] @ property def sentiment ( self ) : [EOL] [docstring] [EOL] res = self . webhook_request . query_result . sentiment_analysis_result [EOL] return res . query_text_sentiment if res else None [EOL] [EOL] [comment] [EOL] [EOL] @ property def source ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . original_detect_intent_request . source [EOL] [EOL] @ property def version ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . original_detect_intent_request . version [EOL] [EOL] @ property def payload ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . original_detect_intent_request . payload [EOL] [EOL] @ property def integrations ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [EOL] [EOL] [comment] [EOL] [EOL] def ask ( self , * texts ) : [EOL] [docstring] [EOL] self . _add_fulfillment_message ( text = self . _df . Text ( list ( texts ) ) ) [EOL] [EOL] def show_quick_replies ( self , * quick_replies , title = None ) : [EOL] [docstring] [EOL] self . _add_fulfillment_message ( quick_replies = self . _df . QuickReplies ( title = title , quick_replies = list ( quick_replies ) ) ) [EOL] [EOL] def show_card ( self , card ) : [EOL] [docstring] [EOL] self . _add_fulfillment_message ( card = card ) [EOL] [EOL] def show_image ( self , image ) : [EOL] [docstring] [EOL] self . _add_fulfillment_message ( image = image ) [EOL] [EOL] def _add_fulfillment_message ( self , ** name_and_message ) : [EOL] self . _webhook_response . fulfillment_messages . append ( self . _df . Message ( ** name_and_message ) ) [EOL] [EOL] [comment] [EOL] [EOL] @ property def google ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def facebook ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def slack ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def telegram ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def kik ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def skype ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def twilio ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def twilio_ip ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def line ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def spark ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def tropo ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] @ property def viber ( self ) : [EOL] [docstring] [EOL] return self . _integration_convs [ [string] ] [EOL] [EOL] def __getattr__ ( self , item ) : [EOL] return self . _integration_convs [ item ] [EOL] [EOL] def to_webhook_response ( self ) : [EOL] [docstring] [EOL] self . _webhook_response . output_contexts = self . _contexts . as_list ( ) [EOL] for integration , integration_conv in self . _integration_convs . items ( ) : [EOL] self . _webhook_response . payload [ integration ] = integration_conv . to_webhook_response_payload ( ) [EOL] return self . _webhook_response [EOL] [EOL] [EOL] class V2beta1DialogflowConversation ( V2DialogflowConversation ) : [EOL] [docstring] [EOL] [EOL] _df = import_dialogflow_api ( [string] ) [EOL] [EOL] def tell ( self , * texts ) : [EOL] [docstring] [EOL] self . ask ( * texts ) [EOL] self . _webhook_response . end_interaction = True [EOL] [EOL] @ property def alternative_query_results ( self ) : [EOL] [docstring] [EOL] return self . webhook_request . alternative_query_results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $V2DialogflowConversation._df.Card$ 0 0 0 0 0 0 0 0 0 $V2DialogflowConversation._df.Card$ 0 $V2DialogflowConversation._df.Card$ 0 0 0 0 $None$ 0 0 0 $V2DialogflowConversation._df.Image$ 0 0 0 0 0 0 0 0 0 $V2DialogflowConversation._df.Image$ 0 $V2DialogflowConversation._df.Image$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.actions_on_google.V2ActionsOnGoogleDialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.GenericIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.integrations.AbstractIntegrationConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $V2DialogflowConversation._df.WebhookResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[V2beta1DialogflowConversation._df.QueryResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] __version__ = [string] [comment] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Optional , List , Type [EOL] import flask_dialogflow [EOL] import functools [EOL] import typing [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] from flask_dialogflow . google_apis . dialogflow_v2 import * [EOL] from flask_dialogflow . google_apis . dialogflow_v2 import ( _WebhookRequestSchema , _WebhookResponseSchema , _MessageSchema , _QueryResultSchema , ) [EOL] [EOL] Nested = partial ( ModuleLocalNested , module_name = __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _WebhookRequestSchema ( _WebhookRequestSchema ) : [EOL] alternativeQueryResults = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class WebhookRequest ( WebhookRequest , schema = _WebhookRequestSchema ) : [EOL] alternative_query_results = field ( default_factory = list ) [EOL] [EOL] [EOL] class _MessageSchema ( _MessageSchema ) : [EOL] telephonyPlayAudio = Nested ( [string] , attribute = [string] ) [EOL] telephonySynthesizeSpeech = Nested ( [string] , attribute = [string] ) [EOL] telephonyTransferCall = Nested ( [string] , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class Message ( Message , schema = _MessageSchema ) : [EOL] telephony_play_audio = None [EOL] telephony_synthesize_speech = None [EOL] telephony_transfer_call = None [EOL] [EOL] [EOL] class Platform ( Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] PLATFORM_UNSPECIFIED = None [EOL] FACEBOOK = [string] [comment] [EOL] SLACK = [string] [EOL] TELEGRAM = [string] [comment] [EOL] KIK = [string] [EOL] SKYPE = [string] [comment] [EOL] TWILIO = [string] [comment] [EOL] TWILIO_IP = [string] [comment] [EOL] LINE = [string] [comment] [EOL] SPARK = [string] [comment] [EOL] TROPO = [string] [comment] [EOL] VIBER = [string] [EOL] ACTIONS_ON_GOOGLE = [string] [EOL] TELEPHONY = [string] [EOL] GOOGLE_HANGOUTS = [string] [EOL] [EOL] [EOL] class _QueryResultSchema ( _QueryResultSchema ) : [EOL] knowledgeAnswers = Nested ( [string] , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class QueryResult ( QueryResult , schema = _QueryResultSchema ) : [EOL] knowledge_answers = field ( default_factory = list ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _TelephonyPlayAudioSchema ( GoogleTypeSchema ) : [EOL] audioUri = Str ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class TelephonyPlayAudio ( GoogleType , schema = _TelephonyPlayAudioSchema ) : [EOL] audio_uri = ... [EOL] [EOL] [EOL] class _TelephonySynthesizeSpeechSchema ( GoogleTypeSchema ) : [EOL] text = Str ( ) [EOL] ssml = Str ( ) [EOL] [EOL] [EOL] @ dataclass class TelephonySynthesizeSpeech ( GoogleType , schema = _TelephonySynthesizeSpeechSchema ) : [EOL] text = None [EOL] ssml = None [EOL] [EOL] [EOL] class _TelephonyTransferCallSchema ( GoogleTypeSchema ) : [EOL] phoneNumber = Str ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class TelephonyTransferCall ( GoogleType , schema = _TelephonyTransferCallSchema ) : [EOL] phone_number = ... [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _KnowledgeAnswersSchema ( GoogleTypeSchema ) : [EOL] answers = ListF ( Nested ( [string] ) ) [EOL] [EOL] [EOL] @ dataclass class KnowledgeAnswers ( GoogleType , schema = _KnowledgeAnswersSchema ) : [EOL] answers = field ( default_factory = list ) [EOL] [EOL] [EOL] class MatchConfidenceLevel ( Enum ) : [EOL] MATCH_CONFIDENCE_LEVEL_UNSPECIFIED = [string] [EOL] HIGH = [string] [EOL] MEDIUM = [string] [EOL] LOW = [string] [EOL] [EOL] [EOL] class _AnswerSchema ( GoogleTypeSchema ) : [EOL] source = Str ( ) [EOL] answer = Str ( ) [EOL] faqQuestion = Str ( attribute = [string] ) [EOL] matchConfidenceLevel = EnumField ( MatchConfidenceLevel , attribute = [string] ) [EOL] matchConfidence = Float ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class Answer ( GoogleType , schema = _AnswerSchema ) : [EOL] source = None [EOL] answer = None [EOL] faq_question = None [EOL] match_confidence_level = None [EOL] match_confidence = None [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _WebhookResponseSchema ( _WebhookResponseSchema ) : [EOL] endInteraction = Bool ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class WebhookResponse ( WebhookResponse , schema = _WebhookResponseSchema ) : [EOL] end_interaction = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0
[comment] [EOL] from typing import Type , Any , List , Dict , Optional [EOL] import flask_dialogflow [EOL] import functools [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [comment] [EOL] [EOL] from enum import Enum [EOL] from functools import partial [EOL] from typing import Optional , Any , Dict , List [EOL] [EOL] from dataclasses import dataclass , field [EOL] [EOL] from flask_dialogflow . google_apis import ( GoogleType , GoogleTypeSchema , Str , Int , ModuleLocalNested , Bool , Float , ListF , DictF , EnumField , Raw , ) [EOL] [EOL] Nested = partial ( ModuleLocalNested , module_name = __name__ ) [EOL] [EOL] [EOL] class _WebhookRequestSchema ( GoogleTypeSchema ) : [EOL] session = Str ( ) [EOL] responseId = Str ( attribute = [string] ) [EOL] queryResult = Nested ( [string] , attribute = [string] ) [EOL] originalDetectIntentRequest = Nested ( [string] , attribute = [string] , ) [EOL] [EOL] [EOL] @ dataclass class WebhookRequest ( GoogleType , schema = _WebhookRequestSchema ) : [EOL] session = None [EOL] response_id = None [EOL] query_result = None [EOL] original_detect_intent_request = None [EOL] [EOL] [EOL] class _QueryResultSchema ( GoogleTypeSchema ) : [EOL] intent = Nested ( [string] ) [EOL] languageCode = Str ( attribute = [string] ) [EOL] allRequiredParamsPresent = Bool ( attribute = [string] ) [EOL] queryText = Str ( attribute = [string] ) [EOL] speechRecognitionConfidence = Float ( attribute = [string] ) [EOL] action = Str ( ) [EOL] parameters = DictF ( ) [EOL] fulfillmentText = Str ( attribute = [string] ) [EOL] fulfillmentMessages = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] webhookSource = Str ( attribute = [string] ) [EOL] webhookPayload = DictF ( attribute = [string] ) [EOL] outputContexts = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] intentDetectionConfidence = Float ( attribute = [string] ) [EOL] diagnosticInfo = DictF ( attribute = [string] ) [EOL] sentimentAnalysisResult = Nested ( [string] , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class QueryResult ( GoogleType , schema = _QueryResultSchema ) : [EOL] intent = ... [EOL] language_code = None [EOL] all_required_params_present = None [EOL] query_text = None [EOL] speech_recognition_confidence = None [EOL] action = None [EOL] parameters = field ( default_factory = dict ) [EOL] fulfillment_text = None [EOL] fulfillment_messages = field ( default_factory = list ) [EOL] webhook_source = None [EOL] webhook_payload = field ( default_factory = dict ) [EOL] output_contexts = field ( default_factory = list ) [EOL] intent_detection_confidence = None [EOL] diagnostic_info = field ( default_factory = dict ) [EOL] sentiment_analysis_result = None [EOL] [EOL] [EOL] class WebhookState ( Enum ) : [EOL] WEBHOOK_STATE_UNSPECIFIED = [string] [EOL] WEBHOOK_STATE_ENABLED = [string] [EOL] WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = ( [string] ) [EOL] [EOL] [EOL] class _IntentSchema ( GoogleTypeSchema ) : [EOL] name = Str ( ) [EOL] displayName = Str ( attribute = [string] ) [EOL] isFallback = Bool ( attribute = [string] ) [EOL] webhookState = EnumField ( WebhookState , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class Intent ( GoogleType , schema = _IntentSchema ) : [EOL] name = None [EOL] display_name = None [EOL] is_fallback = None [EOL] webhook_state = None [EOL] [EOL] [EOL] class _ContextSchema ( GoogleTypeSchema ) : [EOL] name = Str ( ) [EOL] lifespanCount = Int ( attribute = [string] ) [EOL] parameters = DictF ( keys = Str ( ) , values = Raw ( ) ) [EOL] [EOL] [EOL] @ dataclass class Context ( GoogleType , schema = _ContextSchema ) : [EOL] name = None [EOL] lifespan_count = None [EOL] parameters = field ( default_factory = dict ) [EOL] [EOL] [EOL] class _SentimentAnalysisResultSchema ( GoogleTypeSchema ) : [EOL] queryTextSentiment = Nested ( [string] , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class SentimentAnalysisResult ( GoogleType , schema = _SentimentAnalysisResultSchema ) : [EOL] query_text_sentiment = ... [EOL] [EOL] [EOL] class _SentimentSchema ( GoogleTypeSchema ) : [EOL] score = Float ( ) [EOL] magnitude = Float ( ) [EOL] [EOL] [EOL] @ dataclass class Sentiment ( GoogleType , schema = _SentimentSchema ) : [EOL] score = None [EOL] magnitude = None [EOL] [EOL] [EOL] class Platform ( Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] PLATFORM_UNSPECIFIED = None [EOL] FACEBOOK = [string] [comment] [EOL] SLACK = [string] [EOL] TELEGRAM = [string] [comment] [EOL] KIK = [string] [EOL] SKYPE = [string] [comment] [EOL] TWILIO = [string] [comment] [EOL] TWILIO_IP = [string] [comment] [EOL] LINE = [string] [comment] [EOL] SPARK = [string] [comment] [EOL] TROPO = [string] [comment] [EOL] VIBER = [string] [EOL] ACTIONS_ON_GOOGLE = [string] [EOL] [EOL] [EOL] class _MessageSchema ( GoogleTypeSchema ) : [EOL] platform = EnumField ( Platform ) [EOL] text = Nested ( [string] ) [EOL] suggestions = Nested ( [string] ) [EOL] listSelect = Nested ( [string] , attribute = [string] ) [EOL] carouselSelect = Nested ( [string] , attribute = [string] ) [EOL] image = Nested ( [string] ) [EOL] quickReplies = Nested ( [string] , attribute = [string] ) [EOL] card = Nested ( [string] ) [EOL] basicCard = Nested ( [string] , attribute = [string] ) [EOL] linkOutSuggestion = Nested ( [string] , attribute = [string] ) [EOL] simpleResponses = Nested ( [string] , attribute = [string] ) [EOL] payload = DictF ( keys = Str ( ) , values = Raw ( ) ) [EOL] [EOL] [EOL] @ dataclass class Message ( GoogleType , schema = _MessageSchema ) : [EOL] platform = None [EOL] text = None [EOL] suggestions = None [EOL] list_select = None [EOL] carousel_select = None [EOL] image = None [EOL] quick_replies = None [EOL] card = None [EOL] basic_card = None [EOL] link_out_suggestion = None [EOL] simple_responses = None [EOL] payload = field ( default_factory = dict ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class _TextSchema ( GoogleTypeSchema ) : [EOL] text = ListF ( Str ( ) ) [EOL] [EOL] [EOL] @ dataclass class Text ( GoogleType , schema = _TextSchema ) : [EOL] text = field ( default_factory = list ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class _ImageSchema ( GoogleTypeSchema ) : [EOL] imageUri = Str ( attribute = [string] ) [EOL] accessibilityText = Str ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class Image ( GoogleType , schema = _ImageSchema ) : [EOL] image_uri = None [EOL] accessibility_text = None [EOL] [EOL] [EOL] class _CardSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] buttons = ListF ( Nested ( [string] ) ) [EOL] subtitle = Str ( ) [EOL] imageUri = Str ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class Card ( GoogleType , schema = _CardSchema ) : [EOL] title = None [EOL] buttons = field ( default_factory = list ) [EOL] subtitle = None [EOL] image_uri = None [EOL] [EOL] [EOL] class _CardButtonSchema ( GoogleTypeSchema ) : [EOL] text = Str ( ) [EOL] description = Str ( ) [EOL] [EOL] [EOL] @ dataclass class CardButton ( GoogleType , schema = _CardButtonSchema ) : [EOL] text = None [EOL] description = None [EOL] [EOL] [EOL] class _QuickRepliesSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] quickReplies = ListF ( Str ( ) , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class QuickReplies ( GoogleType , schema = _QuickRepliesSchema ) : [EOL] title = None [EOL] quick_replies = field ( default_factory = list ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class _SimpleResponsesSchema ( GoogleTypeSchema ) : [EOL] simpleResponses = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class SimpleResponses ( GoogleType , schema = _SimpleResponsesSchema ) : [EOL] simple_responses = field ( default_factory = list ) [EOL] [EOL] [EOL] class _SimpleResponseSchema ( GoogleTypeSchema ) : [EOL] textToSpeech = Str ( attribute = [string] ) [EOL] ssml = Str ( ) [EOL] displayText = Str ( attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class SimpleResponse ( GoogleType , schema = _SimpleResponseSchema ) : [EOL] text_to_speech = None [EOL] ssml = None [EOL] display_text = None [EOL] [EOL] [EOL] class _BasicCardSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] subtitle = Str ( ) [EOL] formattedText = Str ( attribute = [string] ) [EOL] buttons = ListF ( Nested ( [string] ) ) [EOL] image = Nested ( [string] ) [EOL] [EOL] [EOL] @ dataclass class BasicCard ( GoogleType , schema = _BasicCardSchema ) : [EOL] title = None [EOL] subtitle = None [EOL] formatted_text = None [EOL] buttons = field ( default_factory = list ) [EOL] image = None [EOL] [EOL] [EOL] class _BasicCardButtonSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] openUriAction = Nested ( [string] , attribute = [string] ) [EOL] [EOL] [EOL] @ dataclass class BasicCardButton ( GoogleType , schema = _BasicCardButtonSchema ) : [EOL] title = None [EOL] open_uri_action = None [EOL] [EOL] [EOL] class _OpenUriActionSchema ( GoogleTypeSchema ) : [EOL] uri = Str ( ) [EOL] [EOL] [EOL] @ dataclass class OpenUriAction ( GoogleType , schema = _OpenUriActionSchema ) : [EOL] uri = None [EOL] [EOL] [EOL] class _ListSelectSchema ( GoogleTypeSchema ) : [EOL] items = ListF ( Nested ( [string] ) ) [EOL] title = Str ( ) [EOL] [EOL] [EOL] @ dataclass class ListSelect ( GoogleType , schema = _ListSelectSchema ) : [EOL] items = field ( default_factory = list ) [EOL] title = None [EOL] [EOL] [EOL] class _ListSelectItemSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] info = Nested ( [string] ) [EOL] image = Nested ( [string] ) [EOL] description = Str ( ) [EOL] [EOL] [EOL] @ dataclass class ListSelectItem ( GoogleType , schema = _ListSelectItemSchema ) : [EOL] title = ... [EOL] info = ... [EOL] image = None [EOL] description = None [EOL] [EOL] [EOL] class _SelectItemInfoSchema ( GoogleTypeSchema ) : [EOL] key = Str ( ) [EOL] synonyms = ListF ( Str ( ) ) [EOL] [EOL] [EOL] @ dataclass class SelectItemInfo ( GoogleType , schema = _SelectItemInfoSchema ) : [EOL] key = ... [EOL] synonyms = field ( default_factory = list ) [EOL] [EOL] [EOL] class _SuggestionsSchema ( GoogleTypeSchema ) : [EOL] items = ListF ( Nested ( [string] ) ) [EOL] [EOL] [EOL] @ dataclass class Suggestions ( GoogleType , schema = _SuggestionsSchema ) : [EOL] items = field ( default_factory = list ) [EOL] [EOL] [EOL] class _SuggestionSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] [EOL] [EOL] @ dataclass class Suggestion ( GoogleType , schema = _SuggestionSchema ) : [EOL] title = ... [EOL] [EOL] [EOL] class _CarouselSelectSchema ( GoogleTypeSchema ) : [EOL] items = ListF ( Nested ( [string] ) ) [EOL] [EOL] [EOL] @ dataclass class CarouselSelect ( GoogleType , schema = _CarouselSelectSchema ) : [EOL] items = ... [EOL] [EOL] [EOL] class _CarouselSelectItemSchema ( GoogleTypeSchema ) : [EOL] title = Str ( ) [EOL] info = Nested ( [string] ) [EOL] image = Nested ( [string] ) [EOL] description = Str ( ) [EOL] [EOL] [EOL] @ dataclass class CarouselSelectItem ( GoogleType , schema = _CarouselSelectItemSchema ) : [EOL] title = ... [EOL] info = ... [EOL] image = None [EOL] description = None [EOL] [EOL] [EOL] class _LinkOutSuggestionSchema ( GoogleTypeSchema ) : [EOL] destinationName = Str ( attribute = [string] ) [EOL] uri = Str ( ) [EOL] [EOL] [EOL] @ dataclass class LinkOutSuggestion ( GoogleType , schema = _LinkOutSuggestionSchema ) : [EOL] destination_name = ... [EOL] uri = ... [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _OriginalDetectIntentRequestSchema ( GoogleTypeSchema ) : [EOL] source = Str ( ) [EOL] version = Str ( ) [EOL] payload = DictF ( keys = Str ( ) , values = Raw ( ) ) [EOL] [EOL] [EOL] @ dataclass class OriginalDetectIntentRequest ( GoogleType , schema = _OriginalDetectIntentRequestSchema ) : [EOL] source = None [EOL] version = None [EOL] payload = field ( default_factory = dict ) [EOL] [EOL] [EOL] class _WebhookResponseSchema ( GoogleTypeSchema ) : [EOL] followupEventInput = Nested ( [string] , attribute = [string] ) [EOL] outputContexts = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] fulfillmentText = Str ( attribute = [string] ) [EOL] fulfillmentMessages = ListF ( Nested ( [string] ) , attribute = [string] ) [EOL] payload = DictF ( keys = Str ( ) , values = Raw ( ) ) [EOL] source = Str ( ) [EOL] [EOL] [EOL] @ dataclass class WebhookResponse ( GoogleType , schema = _WebhookResponseSchema ) : [EOL] followup_event_input = None [EOL] output_contexts = field ( default_factory = list ) [EOL] fulfillment_text = None [EOL] fulfillment_messages = field ( default_factory = list ) [EOL] payload = field ( default_factory = dict ) [EOL] source = None [EOL] [EOL] [EOL] class _EventInputSchema ( GoogleTypeSchema ) : [EOL] languageCode = Str ( attribute = [string] ) [EOL] name = Str ( ) [EOL] parameters = DictF ( keys = Str ( ) , values = Raw ( ) ) [EOL] [EOL] [EOL] @ dataclass class EventInput ( GoogleType , schema = _EventInputSchema ) : [EOL] language_code = ... [EOL] name = ... [EOL] parameters = field ( default_factory = dict ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional['QueryResult']$ 0 0 0 $typing.Optional['OriginalDetectIntentRequest']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Intent'$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List['Message']$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List['Context']$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional['SentimentAnalysisResult']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional['WebhookState']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Sentiment'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional['str']$ 0 0 0 $typing.Optional['Suggestions']$ 0 0 0 $typing.Optional['ListSelect']$ 0 0 0 $typing.Optional['CarouselSelect']$ 0 0 0 $typing.Optional['Image']$ 0 0 0 $typing.Optional['QuickReplies']$ 0 0 0 $typing.Optional['Card']$ 0 0 0 $typing.Optional['BasicCard']$ 0 0 0 $typing.Optional['LinkOutSuggestion']$ 0 0 0 $typing.Optional['SimpleResponses']$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List['CardButton']$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['SimpleResponse']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List['BasicCardButton']$ 0 0 0 0 0 0 0 0 $typing.Optional['Image']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional['OpenUriAction']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['ListSelectItem']$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $'SelectItemInfo'$ 0 0 0 $typing.Optional['Image']$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['Suggestion']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['CarouselSelectItem']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $'SelectItemInfo'$ 0 0 0 $typing.Optional['Image']$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional['EventInput']$ 0 0 0 $typing.List['Context']$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List['Message']$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , DefaultDict , Any , Iterable , Mapping , Tuple , Optional , Iterator [EOL] import flask_dialogflow [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from abc import abstractmethod [EOL] from collections import defaultdict [EOL] from collections . abc import MutableMapping [EOL] from typing import ( Optional , Iterator , Type , Mapping , Tuple , DefaultDict , Iterable ) [EOL] [EOL] from flask_dialogflow . exceptions import AmbiguousIntegrationError [EOL] from flask_dialogflow . google_apis . dialogflow_v2 import OriginalDetectIntentRequest [EOL] from flask_dialogflow . json import JSON [EOL] [EOL] [EOL] class AbstractIntegrationConversation : [EOL] [docstring] [EOL] [EOL] @ classmethod @ abstractmethod def from_webhook_request_payload ( cls , payload = None , ** kwargs ) : [EOL] [docstring] [EOL] raise NotImplementedError [EOL] [EOL] @ abstractmethod def to_webhook_response_payload ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError [comment] [EOL] [EOL] [EOL] class GenericIntegrationConversation ( AbstractIntegrationConversation , MutableMapping ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , data = None ) : [EOL] self . _data = data or { } [EOL] [EOL] def __setitem__ ( self , k , v ) : [EOL] return self . _data . __setitem__ ( k , v ) [EOL] [EOL] def __delitem__ ( self , v ) : [EOL] return self . _data . __delitem__ ( v ) [EOL] [EOL] def __getitem__ ( self , k ) : [EOL] return self . _data . __getitem__ ( k ) [EOL] [EOL] def __len__ ( self ) : [EOL] return self . _data . __len__ ( ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return self . _data . __iter__ ( ) [EOL] [EOL] @ classmethod def from_webhook_request_payload ( cls , payload = None , ** kwargs ) : [EOL] return cls ( payload ) [EOL] [EOL] def to_webhook_response_payload ( self ) : [EOL] return self . _data [EOL] [EOL] [EOL] IntegrationRegistryEntry = Tuple [ str , Optional [ str ] , [string] , Optional [ Mapping ] ] [EOL] [EOL] [EOL] class IntegrationRegistry : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , default_integration_conv_cls = GenericIntegrationConversation ) : [EOL] [docstring] [EOL] self . default_integration_conv_cls = default_integration_conv_cls [EOL] self . _integrations = { } [EOL] [EOL] def register ( self , source , integration_conversation , version = None , integration_conversation_kwargs = None ) : [EOL] [docstring] [EOL] key = ( source , version ) [EOL] if key in self . _integrations : [EOL] existing_cls , _ = self . _integrations [ key ] [EOL] raise AmbiguousIntegrationError ( source , existing_cls , version ) [EOL] val = ( integration_conversation , integration_conversation_kwargs or { } ) [EOL] self . _integrations [ key ] = val [EOL] [EOL] def lookup ( self , source , version = None ) : [EOL] [docstring] [EOL] return self . _integrations . get ( ( source , version ) ) [EOL] [EOL] def unregister ( self , source , version = None ) : [EOL] [docstring] [EOL] key = ( source , version ) [EOL] if key in self . _integrations : [EOL] del self . _integrations [ key ] [EOL] [EOL] def init_integration_convs ( self , odir ) : [EOL] [docstring] [EOL] integrations = defaultdict ( self . default_integration_conv_cls ) [EOL] key = ( odir . source , odir . version ) [EOL] conv_cls = self . lookup ( odir . source , odir . version ) [EOL] cls , kwargs = conv_cls or ( self . default_integration_conv_cls , { } ) [EOL] integrations [ odir . source ] = cls . from_webhook_request_payload ( odir . payload , ** kwargs ) [EOL] for other_key in ( set ( self . _integrations ) - set ( key ) ) : [EOL] if other_key != key : [EOL] cls , kwargs = self . _integrations [ other_key ] [EOL] integrations [ other_key [ [number] ] ] = cls . from_webhook_request_payload ( ** kwargs ) [EOL] return integrations [EOL] [EOL] def list_entries ( self ) : [EOL] [docstring] [EOL] for k , v in self . _integrations . items ( ) : [EOL] yield k [ [number] ] , k [ [number] ] , v [ [number] ] , v [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[builtins.str,'AbstractIntegrationConversation']$ 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.dialogflow_v2.OriginalDetectIntentRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[IntegrationRegistryEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] import flask_dialogflow [EOL] import datetime [EOL] import flask [EOL] [docstring] [EOL] [EOL] from flask import Flask , render_template as __ [EOL] [EOL] from flask_dialogflow . agent import DialogflowAgent [EOL] from flask_dialogflow . conversation import V2DialogflowConversation [EOL] from flask_dialogflow . google_apis . actions_on_google_v2 import ( BasicCard , Image , MediaResponse , MediaType , MediaObject , ) [EOL] [EOL] app = Flask ( __name__ ) [EOL] agent = DialogflowAgent ( app , templates_file = [string] ) [EOL] [EOL] [EOL] @ agent . handle ( [string] ) def welcome ( conv ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] conv . google . ask ( [string] ) [EOL] return conv [EOL] [EOL] [EOL] @ agent . handle ( [string] ) def get_date ( conv ) : [EOL] [docstring] [EOL] import datetime [EOL] today = datetime . datetime . today ( ) [EOL] [EOL] conv . google . tell ( __ ( [string] , date = today ) ) [EOL] return conv [EOL] [EOL] [EOL] FERNSEHTURM_CARD = BasicCard ( title = [string] , subtitle = [string] , image = Image ( url = [string] , accessibility_text = [string] ) , formatted_text = ( [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [EOL] BRANDENBURGER_TOR_CARD = BasicCard ( title = [string] , subtitle = [string] , image = Image ( url = [string] , accessibility_text = [string] ) , formatted_text = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [EOL] @ agent . handle ( [string] ) def get_berlin_picture ( conv ) : [EOL] [docstring] [EOL] conv . google . tell ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not conv . google . user . user_storage . get ( [string] ) : [EOL] conv . google . show_basic_card ( FERNSEHTURM_CARD ) [EOL] conv . google . user . user_storage [ [string] ] = True [EOL] else : [EOL] conv . google . show_basic_card ( BRANDENBURGER_TOR_CARD ) [EOL] conv . google . user . user_storage [ [string] ] = False [EOL] [EOL] return conv [EOL] [EOL] [EOL] @ agent . handle ( [string] ) def get_media_response ( conv ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] conv . google . tell ( [string] ) [EOL] media_response = MediaResponse ( media_type = MediaType . AUDIO , media_objects = [ MediaObject ( name = [string] , description = [string] , content_url = [string] , large_image = Image ( url = [string] , accessibility_text = [string] ) ) ] ) [EOL] conv . google . play_media_response ( media_response ) [EOL] return conv [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 0 0 0 $flask_dialogflow.conversation.V2DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 0 0 0 $flask_dialogflow.conversation.V2DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 0 0 0 $flask_dialogflow.conversation.V2DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.google_apis.actions_on_google_v2.BasicCard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_dialogflow.agent.DialogflowAgent$ 0 0 0 0 0 0 $flask_dialogflow.conversation.V2DialogflowConversation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0