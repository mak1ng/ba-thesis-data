	0
window_title = [string] [EOL] update_in_progress = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] fetching_update = ( [string] [string] ) [EOL] updating_tails_env = ( [string] [string] ) [EOL] finished = [string] [EOL] finished_dialog_message = [string] [EOL] finished_dialog_title = [string] [EOL] missing_sudo_password = [string] [EOL] update_failed_dialog_title = [string] [EOL] update_failed_generic_reason = ( [string] [string] [string] ) [EOL] update_failed_sig_failure = ( [string] [string] [string] ) [EOL] tailsconfig_failed_sudo_password = ( [string] [string] ) [EOL] tailsconfig_failed_generic_reason = ( [string] [string] [string] [string] ) [EOL] tailsconfig_failed_timeout = ( [string] [string] [string] [string] ) [EOL] install_update_button = [string] [EOL] install_later_button = [string] [EOL] sudo_password_text = ( [string] [string] [string] [string] ) [EOL] main_tab = [string] [EOL] output_tab = [string] [EOL] initial_text_box = ( [string] [string] ) [EOL] doing_setup = [string] [EOL] no_password_set_message = ( [string] [string] [string] ) [EOL] app_is_already_running = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import xml [EOL] import typing [EOL] import os [EOL] import sys [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def main ( ) : [EOL] args = sys . argv [ [number] : ] [EOL] if not args : [EOL] usage ( ) [EOL] sys . exit ( [number] ) [EOL] if [string] in args or [string] in args : [EOL] usage ( ) [EOL] sys . exit ( [number] ) [EOL] merge_results ( args [ : ] ) [EOL] [EOL] [EOL] def merge_results ( xml_files ) : [EOL] failures = [number] [EOL] tests = [number] [EOL] errors = [number] [EOL] time = [number] [EOL] cases = [ ] [EOL] [EOL] for file_name in xml_files : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tree = ET . parse ( file_name ) [comment] [EOL] test_suite = tree . getroot ( ) [EOL] failures += int ( test_suite . attrib [ [string] ] ) [EOL] tests += int ( test_suite . attrib [ [string] ] ) [EOL] errors += int ( test_suite . attrib [ [string] ] ) [EOL] time += float ( test_suite . attrib [ [string] ] ) [EOL] cases . append ( test_suite . getchildren ( ) ) [EOL] [EOL] new_root = ET . Element ( [string] ) [EOL] new_root . attrib [ [string] ] = [string] % failures [EOL] new_root . attrib [ [string] ] = [string] % tests [EOL] new_root . attrib [ [string] ] = [string] % errors [EOL] new_root . attrib [ [string] ] = [string] % time [EOL] for case in cases : [EOL] new_root . extend ( case ) [EOL] new_tree = ET . ElementTree ( new_root ) [EOL] ET . dump ( new_tree ) [EOL] [EOL] [EOL] def usage ( ) : [EOL] this_file = os . path . basename ( __file__ ) [EOL] print ( [string] % this_file ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import io [EOL] import os [EOL] import yaml [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] target_host = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def securedrop_import_testinfra_vars ( hostname , with_header = False ) : [EOL] [docstring] [EOL] filepath = os . path . join ( os . path . dirname ( __file__ ) , [string] , hostname + [string] ) [EOL] with io . open ( filepath , [string] ) as f : [EOL] hostvars = yaml . safe_load ( f ) [EOL] [EOL] if with_header : [EOL] hostvars = dict ( securedrop_test_vars = hostvars ) [EOL] [EOL] return hostvars [EOL] [EOL] [EOL] def lookup_molecule_info ( ) : [EOL] [docstring] [EOL] molecule_instance_config_path = os . path . abspath ( os . environ [ [string] ] ) [EOL] with open ( molecule_instance_config_path , [string] ) as f : [EOL] molecule_instance_config = yaml . safe_load ( f ) [EOL] return molecule_instance_config [EOL] [EOL] [EOL] def pytest_namespace ( ) : [EOL] return securedrop_import_testinfra_vars ( target_host , with_header = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_cron_apt_dependencies ( host , dependency ) : [EOL] [docstring] [EOL] assert host . package ( dependency ) . is_installed [EOL] [EOL] [EOL] def test_cron_apt_config ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] assert f . contains ( [string] ) [EOL] assert f . contains ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] ) def test_cron_apt_repo_list ( host , repo ) : [EOL] [docstring] [EOL] repo_config = repo . format ( fpf_apt_repo_url = test_vars . fpf_apt_repo_url , securedrop_target_platform = host . system_info . codename ) [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] repo_regex = [string] . format ( re . escape ( repo_config ) ) [EOL] assert f . contains ( repo_regex ) [EOL] [EOL] [EOL] def test_cron_apt_repo_config_update ( host ) : [EOL] [docstring] [EOL] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] repo_config = str ( [string] [string] [string] ) [EOL] assert f . contains ( [string] . format ( repo_config ) ) [EOL] [EOL] [EOL] def test_cron_apt_delete_vanilla_kernels ( host ) : [EOL] [docstring] [EOL] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] command = str ( [string] [string] [string] ) [EOL] assert f . contains ( [string] . format ( command ) ) [EOL] [EOL] [EOL] def test_cron_apt_repo_config_upgrade ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] assert f . contains ( [string] ) [EOL] repo_config = str ( [string] [string] [string] [string] ) [EOL] assert f . contains ( re . escape ( repo_config ) ) [EOL] [EOL] [EOL] def test_cron_apt_config_deprecated ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert not f . exists [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] ) def test_cron_apt_cron_jobs ( host , cron_job ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . mode == [number] [EOL] [EOL] regex_job = [string] . format ( re . escape ( cron_job [ [string] ] ) ) [EOL] if cron_job [ [string] ] == [string] : [EOL] assert f . contains ( regex_job ) [EOL] else : [EOL] assert not f . contains ( regex_job ) [EOL] [EOL] [EOL] def test_cron_apt_all_packages_updated ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [string] in c . stdout [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] SUPPORTED_CODENAMES = ( [string] ) [EOL] SUPPORTED_RELEASES = ( [string] ) [EOL] [EOL] [EOL] def test_ansible_version ( host ) : [EOL] [docstring] [EOL] localhost = host . get_host ( [string] ) [EOL] c = localhost . check_output ( [string] ) [EOL] assert c . startswith ( [string] ) [EOL] [EOL] [EOL] def test_platform ( host ) : [EOL] [docstring] [EOL] assert host . system_info . type == [string] [EOL] assert host . system_info . distribution == [string] [EOL] assert host . system_info . codename in SUPPORTED_CODENAMES [EOL] assert host . system_info . release in SUPPORTED_RELEASES [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , ] ) def test_tor_mirror_absent ( host , repo_file ) : [EOL] [docstring] [EOL] f = host . file ( repo_file ) [EOL] assert not f . exists [EOL] [EOL] [EOL] def test_tor_keyring_absent ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] package = [string] [EOL] c = host . run ( [string] . format ( package ) ) [EOL] assert c . rc == [number] [EOL] error_text = [string] . format ( package ) [EOL] assert error_text in c . stderr . strip ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_tor_mirror_fingerprint ( host , tor_key_info ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert tor_key_info not in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_tor_repo_absent ( host , repo_pattern ) : [EOL] [docstring] [EOL] cmd = [string] . format ( repo_pattern ) [EOL] c = host . run ( cmd ) [EOL] [comment] [EOL] assert c . rc != [number] [EOL] assert c . stdout == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] import textwrap [EOL] [EOL] [EOL] def test_sudoers_config ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] sudoers_config = f . content_string [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert re . search ( [string] , sudoers_config , re . M ) [EOL] assert re . search ( [string] , sudoers_config , re . M ) [EOL] assert re . search ( [string] , sudoers_config , re . M ) [EOL] assert re . search ( [string] [string] , sudoers_config , re . M ) [EOL] assert re . search ( [string] , sudoers_config , re . M ) [EOL] assert re . search ( [string] , sudoers_config , re . M ) [EOL] [EOL] [EOL] def test_sudoers_tmux_env ( host ) : [EOL] [docstring] [EOL] [EOL] host_file = host . file ( [string] ) [EOL] expected_content = textwrap . dedent ( [string] ) [EOL] assert host_file . content_string . strip ( ) == expected_content [EOL] [EOL] [EOL] def test_tmux_installed ( host ) : [EOL] [docstring] [EOL] assert host . package ( [string] ) . is_installed [EOL] [EOL] [EOL] def test_sudoers_tmux_env_deprecated ( host ) : [EOL] [docstring] [EOL] [EOL] admin_user = [string] [EOL] [EOL] f = host . file ( [string] . format ( admin_user ) ) [EOL] assert not f . contains ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] KERNEL_VERSION = pytest . securedrop_test_vars . grsec_version [EOL] [EOL] [EOL] def test_ssh_motd_disabled ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert not f . contains ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] . format ( KERNEL_VERSION ) , [string] , [string] , ] ) def test_grsecurity_apt_packages ( host , package ) : [EOL] [docstring] [EOL] assert host . package ( package ) . is_installed [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_generic_kernels_absent ( host , package ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] c = host . run ( [string] . format ( package ) ) [EOL] assert c . rc == [number] [EOL] error_text = [string] . format ( package ) [EOL] assert error_text in c . stderr . strip ( ) [EOL] [EOL] [EOL] def test_grsecurity_lock_file ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . size == [number] [EOL] [EOL] [EOL] def test_grsecurity_kernel_is_running ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . stdout . strip ( ) . endswith ( [string] ) [EOL] assert c . stdout . strip ( ) == [string] . format ( KERNEL_VERSION ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ] ) def test_grsecurity_sysctl_options ( host , sysctl_opt ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] assert host . sysctl ( sysctl_opt [ [number] ] ) == sysctl_opt [ [number] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_grsecurity_paxtest ( host , paxtest_check ) : [EOL] [docstring] [EOL] if host . exists ( [string] ) : [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert [string] not in c . stdout [EOL] regex = [string] . format ( re . escape ( paxtest_check ) ) [EOL] assert re . search ( regex , c . stdout ) [EOL] [EOL] [EOL] def test_grub_pc_marked_manual ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert c . stdout . strip ( ) == [string] [EOL] [EOL] [EOL] def test_apt_autoremove ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert [string] not in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_pax_flags ( host , binary ) : [EOL] [docstring] [EOL] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . contains ( [string] . format ( binary ) ) [EOL] [EOL] c = host . run ( [string] . format ( binary ) ) [EOL] assert c . rc == [number] [EOL] [EOL] assert [string] . format ( binary ) in c . stdout [EOL] assert [string] in c . stdout [EOL] [comment] [EOL] [comment] [EOL] assert [string] not in c . stdout [EOL] assert [string] not in c . stdout [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_wireless_disabled_in_kernel_config ( host , kernel_opts ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] kernel_config_path = [string] . format ( KERNEL_VERSION ) [EOL] kernel_config = host . file ( kernel_config_path ) . content_string [EOL] [EOL] line = [string] . format ( kernel_opts ) [EOL] assert line in kernel_config [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_kernel_options_enabled_config ( host , kernel_opts ) : [EOL] [docstring] [EOL] [EOL] with host . sudo ( ) : [EOL] kernel_config_path = [string] . format ( KERNEL_VERSION ) [EOL] kernel_config = host . file ( kernel_config_path ) . content_string [EOL] [EOL] line = [string] . format ( kernel_opts ) [EOL] assert line in kernel_config [EOL] [EOL] [EOL] def test_mds_mitigations_and_smt_disabled ( host ) : [EOL] [docstring] [EOL] [EOL] with host . sudo ( ) : [EOL] grub_config_path = [string] [EOL] grub_config = host . file ( grub_config_path ) [EOL] [EOL] assert grub_config . contains ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_ip6tables_drop_everything ( host ) : [EOL] [docstring] [EOL] desired_ip6tables_output = [string] . lstrip ( ) . rstrip ( ) [EOL] [EOL] with host . sudo ( ) : [EOL] c = host . check_output ( [string] ) [EOL] assert c == desired_ip6tables_output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Pattern , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] testinfra_hosts = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ] ) def test_sysctl_options ( host , sysctl_opt ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] assert host . sysctl ( sysctl_opt [ [number] ] ) == sysctl_opt [ [number] ] [EOL] [EOL] [EOL] def test_dns_setting ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] assert f . contains ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_blacklisted_kernel_modules ( host , kernel_module ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] ) [EOL] assert kernel_module not in c . stdout [EOL] [EOL] f = host . file ( [string] ) [EOL] assert f . contains ( [string] . format ( kernel_module ) ) [EOL] [EOL] [EOL] def test_swap_disabled ( host ) : [EOL] [docstring] [EOL] hostname = host . check_output ( [string] ) [EOL] [EOL] [comment] [EOL] if hostname . startswith ( [string] ) : [EOL] return True [EOL] [EOL] c = host . check_output ( [string] ) [EOL] [comment] [EOL] assert not re . search ( [string] , c , re . M ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] rgx = re . compile ( [string] ) [EOL] [EOL] assert re . search ( rgx , c ) [EOL] [EOL] [EOL] def test_twofactor_disabled_on_tty ( host ) : [EOL] [docstring] [EOL] [EOL] pam_auth_file = host . file ( [string] ) . content_string [EOL] [EOL] assert [string] not in pam_auth_file [EOL] assert [string] not in pam_auth_file [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_sshd_config ( host , sshd_opts ) : [EOL] [docstring] [EOL] [EOL] sshd_config_file = host . file ( [string] ) . content_string [EOL] [EOL] line = [string] . format ( sshd_opts [ [number] ] , sshd_opts [ [number] ] ) [EOL] assert line in sshd_config_file [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_no_ecrypt_messages_in_logs ( host , logfile ) : [EOL] [docstring] [EOL] error_message = [string] [EOL] with host . sudo ( ) : [EOL] f = host . file ( logfile ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert error_message not in f . content_string [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_unused_packages_are_removed ( host , package ) : [EOL] [docstring] [EOL] assert host . package ( package ) . is_installed is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Pattern , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] alert_level_regex = re . compile ( [string] ) [EOL] rule_id_regex = re . compile ( [string] ) [EOL] sdvars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . log_events_without_ossec_alerts ) def test_ossec_false_positives_suppressed ( host , log_event ) : [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( log_event [ [string] ] ) ) [EOL] assert [string] not in c . stderr [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . log_events_with_ossec_alerts ) def test_ossec_expected_alerts_are_present ( host , log_event ) : [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( log_event [ [string] ] ) ) [EOL] assert [string] in c . stderr [EOL] alert_level = alert_level_regex . findall ( c . stderr ) [ [number] ] [EOL] assert alert_level == log_event [ [string] ] [EOL] rule_id = rule_id_regex . findall ( c . stderr ) [ [number] ] [EOL] assert rule_id == log_event [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_ossec_connectivity ( host ) : [EOL] [docstring] [EOL] desired_output = [string] . format ( securedrop_test_vars . app_hostname , os . environ . get ( [string] , securedrop_test_vars . app_ip ) ) [EOL] with host . sudo ( ) : [EOL] c = host . check_output ( [string] ) [EOL] assert c == desired_output [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . mark . xfail @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_ossec_keyfiles ( host , keyfile ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] f = host . file ( keyfile ) [EOL] assert f . is_file [EOL] [comment] [EOL] [comment] [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . mark . xfail def test_procmail_log ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] [EOL] [EOL] def test_ossec_authd ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] ) [EOL] assert c . stdout == [string] [EOL] assert c . rc != [number] [EOL] [EOL] [EOL] def test_hosts_files ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] [EOL] app_ip = os . environ . get ( [string] , securedrop_test_vars . app_ip ) [EOL] app_host = securedrop_test_vars . app_hostname [EOL] [EOL] assert f . contains ( [string] ) [EOL] assert f . contains ( [string] . format ( app_ip , app_host ) ) [EOL] [EOL] [EOL] def test_ossec_log_contains_no_malformed_events ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] ) [EOL] assert not f . contains ( [string] ) [EOL] [EOL] [EOL] def test_regression_hosts ( host ) : [EOL] [docstring] [EOL] assert host . check_output ( [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Pattern , Any [EOL] import typing [EOL] import os [EOL] import re [EOL] import pytest [EOL] [EOL] sdvars = pytest . securedrop_test_vars [EOL] testinfra_hosts = [ [string] , [string] ] [EOL] [EOL] [EOL] def test_hosts_files ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] [EOL] mon_ip = os . environ . get ( [string] , sdvars . mon_ip ) [EOL] mon_host = sdvars . monitor_hostname [EOL] [EOL] assert f . contains ( [string] ) [EOL] assert f . contains ( [string] . format ( mon_ip , mon_host ) ) [EOL] [EOL] [EOL] def test_hosts_duplicate ( host ) : [EOL] [docstring] [EOL] assert host . check_output ( [string] ) == [string] [EOL] [EOL] [EOL] def test_ossec_agent_installed ( host ) : [EOL] [docstring] [EOL] assert host . package ( [string] ) . is_installed [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . mark . xfail def test_ossec_keyfile_present ( host ) : [EOL] [docstring] [EOL] pattern = [string] . format ( sdvars . app_hostname , os . environ . get ( [string] , sdvars . app_ip ) ) [EOL] regex = re . compile ( pattern ) [EOL] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] ) [EOL] assert f . exists [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . content_string [EOL] assert bool ( re . search ( regex , f . content ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] sdvars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . tor_services ) def test_tor_service_directories ( host , tor_service ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] . format ( tor_service [ [string] ] ) ) [EOL] assert f . is_directory [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . tor_services ) def test_tor_service_hostnames ( host , tor_service ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] ths_hostname_regex = [string] [EOL] ths_hostname_regex_v3 = [string] [EOL] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] . format ( tor_service [ [string] ] ) ) [EOL] assert f . is_file [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] [EOL] [comment] [EOL] assert re . search ( ths_hostname_regex , f . content_string ) [EOL] [EOL] if tor_service [ [string] ] and tor_service [ [string] ] == [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] aths_hostname_regex = ths_hostname_regex + [string] + tor_service [ [string] ] [EOL] assert re . search ( [string] . format ( aths_hostname_regex ) , f . content_string ) [EOL] elif tor_service [ [string] ] and tor_service [ [string] ] == [number] : [EOL] [comment] [EOL] [comment] [EOL] client_auth = host . file ( [string] . format ( tor_service [ [string] ] ) ) [EOL] assert client_auth . is_file [EOL] elif tor_service [ [string] ] == [number] : [EOL] assert re . search ( [string] . format ( ths_hostname_regex ) , f . content_string ) [EOL] else : [EOL] assert re . search ( [string] . format ( ths_hostname_regex_v3 ) , f . content_string ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . tor_services ) def test_tor_services_config ( host , tor_service ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] dir_regex = [string] . format ( tor_service [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] remote_port = tor_service [ [string] ] [ [number] ] [EOL] try : [EOL] local_port = tor_service [ [string] ] [ [number] ] [EOL] except IndexError : [EOL] local_port = remote_port [EOL] [EOL] [comment] [EOL] [comment] [EOL] if tor_service [ [string] ] == [number] : [EOL] version_string = [string] [EOL] else : [EOL] version_string = [string] [EOL] [EOL] port_regex = [string] . format ( remote_port , local_port ) [EOL] [EOL] assert f . contains ( [string] . format ( dir_regex ) ) [EOL] assert f . contains ( [string] . format ( port_regex ) ) [EOL] [EOL] if version_string : [EOL] service_regex = [string] . join ( [ dir_regex , version_string , port_regex ] ) [EOL] else : [EOL] service_regex = [string] . join ( [ dir_regex , port_regex ] ) [EOL] [EOL] if tor_service [ [string] ] and tor_service [ [string] ] == [number] : [EOL] auth_regex = [string] . format ( tor_service [ [string] ] ) [EOL] assert f . contains ( [string] . format ( auth_regex ) ) [EOL] service_regex += [string] . format ( auth_regex ) [EOL] [EOL] [comment] [EOL] assert service_regex in f . content_string [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os . path [EOL] import pytest [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] sdvars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . pip_deps ) def test_app_pip_deps ( host , exp_pip_pkg ) : [EOL] [docstring] [EOL] pip = host . pip_package . get_packages ( pip_path = os . path . join ( sdvars . securedrop_venv_bin , [string] ) ) [EOL] assert pip [ exp_pip_pkg [ [string] ] ] [ [string] ] == exp_pip_pkg [ [string] ] [EOL] [EOL] [EOL] def test_app_wsgi ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] with host . sudo ( ) : [EOL] assert f . is_file [EOL] assert f . mode == [number] [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . contains ( [string] ) [EOL] assert f . contains ( [string] ) [EOL] [EOL] [EOL] def test_pidfile ( host ) : [EOL] [docstring] [EOL] assert not host . file ( [string] ) . exists [EOL] assert not host . file ( [string] ) . exists [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . app_directories ) def test_app_directories ( host , app_dir ) : [EOL] [docstring] [EOL] f = host . file ( app_dir ) [EOL] with host . sudo ( ) : [EOL] assert f . is_directory [EOL] assert f . user == sdvars . securedrop_user [EOL] assert f . group == sdvars . securedrop_user [EOL] assert f . mode == [number] [EOL] [EOL] [EOL] def test_app_code_pkg ( host ) : [EOL] [docstring] [EOL] assert host . package ( [string] ) . is_installed [EOL] [EOL] [EOL] def test_app_code_venv ( host ) : [EOL] [docstring] [EOL] cmd = [string] . format ( sdvars . securedrop_venv , sdvars . securedrop_venv ) [EOL] [EOL] result = host . run ( cmd ) [EOL] assert result . rc == [number] [EOL] [EOL] [EOL] def test_supervisor_not_installed ( host ) : [EOL] [docstring] [EOL] assert host . package ( [string] ) . is_installed is False [EOL] [EOL] [EOL] def test_gpg_key_in_keyring ( host ) : [EOL] [docstring] [EOL] with host . sudo ( sdvars . securedrop_user ) : [EOL] c = host . run ( [string] [string] ) [EOL] assert [string] in c . stdout [EOL] [EOL] [EOL] def test_ensure_logo ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] . format ( sdvars . securedrop_code ) ) [EOL] with host . sudo ( ) : [EOL] assert f . mode == [number] [EOL] assert f . user == sdvars . securedrop_user [EOL] assert f . group == sdvars . securedrop_user [EOL] [EOL] [EOL] def test_securedrop_tmp_clean_cron ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] cronlist = host . run ( [string] ) . stdout [EOL] cronjob = [string] . format ( sdvars . securedrop_code ) [EOL] assert cronjob in cronlist [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] sdvars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_apparmor_pkg ( host , pkg ) : [EOL] [docstring] [EOL] assert host . package ( pkg ) . is_installed [EOL] [EOL] [EOL] def test_apparmor_enabled ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] assert host . run ( [string] ) . rc == [number] [EOL] [EOL] [EOL] apache2_capabilities = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , apache2_capabilities ) def test_apparmor_apache_capabilities ( host , cap ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert cap in c . stdout [EOL] [EOL] [EOL] def test_apparmor_apache_exact_capabilities ( host ) : [EOL] [docstring] [EOL] c = host . check_output ( [string] ) [EOL] assert str ( len ( apache2_capabilities ) ) == c [EOL] [EOL] [EOL] tor_capabilities = [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , tor_capabilities ) def test_apparmor_tor_capabilities ( host , cap ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert cap in c . stdout [EOL] [EOL] [EOL] def test_apparmor_tor_exact_capabilities ( host ) : [EOL] [docstring] [EOL] c = host . check_output ( [string] [string] ) [EOL] assert str ( len ( tor_capabilities ) ) == c [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , ] ) def test_apparmor_ensure_not_disabled ( host , profile ) : [EOL] [docstring] [EOL] f = host . file ( [string] . format ( profile ) ) [EOL] with host . sudo ( ) : [EOL] assert not f . exists [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . apparmor_complain ) def test_app_apparmor_complain ( host , complain_pkg ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] awk = ( [string] [string] ) [EOL] c = host . check_output ( [string] . format ( awk ) ) [EOL] assert complain_pkg in c [EOL] [EOL] [EOL] def test_app_apparmor_complain_count ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . check_output ( [string] ) [EOL] assert c == str ( len ( sdvars . apparmor_complain ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sdvars . apparmor_enforce ) def test_apparmor_enforced ( host , aa_enforced ) : [EOL] awk = ( [string] [string] ) [EOL] with host . sudo ( ) : [EOL] c = host . check_output ( [string] . format ( awk ) ) [EOL] assert aa_enforced in c [EOL] [EOL] [EOL] def test_apparmor_total_profiles ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] total_expected = str ( len ( sdvars . apparmor_enforce ) + len ( sdvars . apparmor_complain ) ) [EOL] [comment] [EOL] [comment] [EOL] assert host . check_output ( [string] ) >= total_expected [EOL] [EOL] [EOL] def test_aastatus_unconfined ( host ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] expected_unconfined = [number] [EOL] [EOL] unconfined_chk = str ( [string] [string] . format ( expected_unconfined ) ) [EOL] with host . sudo ( ) : [EOL] aa_status_output = host . check_output ( [string] ) [EOL] assert unconfined_chk in aa_status_output [EOL] [EOL] [EOL] def test_aa_no_denies_in_syslog ( host ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] ) [EOL] assert [string] not in f . content_string [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [comment] [EOL] wanted_apache_headers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] [string] [string] [string] [string] , [string] [string] [string] [string] [string] [string] , [string] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , wanted_apache_headers ) def test_apache_headers_journalist_interface ( host , header ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] header_regex = [string] . format ( re . escape ( header ) ) [EOL] assert re . search ( header_regex , f . content_string , re . M ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] common_apache2_directory_declarations = [string] . lstrip ( ) . rstrip ( ) . format ( apache_allow_from = securedrop_test_vars . apache_allow_from , securedrop_code = securedrop_test_vars . securedrop_code ) [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] . format ( securedrop_test_vars . apache_listening_address ) , [string] . format ( securedrop_test_vars . securedrop_code ) , ( [string] [string] ) , [string] , [string] , [string] . format ( securedrop_test_vars . securedrop_code ) , [string] . strip ( [string] ) . format ( securedrop_test_vars . securedrop_code ) , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_apache_config_journalist_interface ( host , apache_opt ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] regex = [string] . format ( re . escape ( apache_opt ) ) [EOL] assert re . search ( regex , f . content_string , re . M ) [EOL] [EOL] [EOL] def test_apache_journalist_interface_vhost ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert common_apache2_directory_declarations in f . content_string [EOL] [EOL] [EOL] def test_apache_logging_journalist_interface ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] if f . size == [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] host . check_output ( [string] ) [EOL] [EOL] assert f . size > [number] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert not f . contains ( [string] ) [EOL] assert f . contains ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_apache_enabled_sites ( host , apache_site ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( apache_site ) ) [EOL] assert [string] . format ( apache_site ) in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , ] ) def test_apache_disabled_sites ( host , apache_site ) : [EOL] [docstring] [EOL] c = host . run ( [string] . format ( apache_site ) ) [EOL] assert [string] . format ( apache_site ) in c . stderr [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] def test_apache_service ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] s = host . service ( [string] ) [EOL] assert s . is_running [EOL] assert s . is_enabled [EOL] [EOL] [EOL] def test_apache_user ( host ) : [EOL] [docstring] [EOL] u = host . user ( [string] ) [EOL] assert u . exists [EOL] assert u . home == [string] [EOL] assert u . shell == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_apache_listening ( host , port ) : [EOL] [docstring] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] s = host . socket ( [string] . format ( securedrop_test_vars . apache_listening_address , port ) ) [EOL] assert s . is_listening [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , securedrop_test_vars . wanted_apache_headers ) def test_apache_headers_source_interface ( host , header ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] header_regex = [string] . format ( re . escape ( header ) ) [EOL] assert re . search ( header_regex , f . content_string , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] . format ( securedrop_test_vars . apache_listening_address ) , [string] . format ( securedrop_test_vars . securedrop_code ) , [string] , [string] , [string] , [string] , [string] . format ( securedrop_test_vars . securedrop_code ) , [string] . strip ( [string] ) . format ( securedrop_test_vars . securedrop_code ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] . format ( securedrop_test_vars . apache_source_log ) , ] ) def test_apache_config_source_interface ( host , apache_opt ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] regex = [string] . format ( re . escape ( apache_opt ) ) [EOL] assert re . search ( regex , f . content_string , re . M ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] import re [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , ] ) def test_apache_apt_packages ( host , package ) : [EOL] [docstring] [EOL] assert host . package ( package ) . is_installed [EOL] [EOL] [EOL] def test_apache_security_config_deprecated ( host ) : [EOL] [docstring] [EOL] assert not host . file ( [string] ) . exists [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_apache_config_settings ( host , apache_opt ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] assert re . search ( [string] . format ( re . escape ( apache_opt ) ) , f . content_string , re . M ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_apache_ports_config ( host , port ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] [EOL] listening_regex = [string] . format ( re . escape ( securedrop_test_vars . apache_listening_address ) , port ) [EOL] assert f . contains ( listening_regex ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_apache_modules_present ( host , apache_module ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( apache_module ) ) [EOL] assert [string] . format ( apache_module ) in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] ) def test_apache_modules_absent ( host , apache_module ) : [EOL] [docstring] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] . format ( apache_module ) ) [EOL] assert [string] . format ( apache_module ) in c . stderr [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , securedrop_test_vars . allowed_apache_logfiles ) def test_apache_logfiles_present ( host , logfile ) : [EOL] [docstring] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] f = host . file ( logfile ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] [EOL] [EOL] def test_apache_logfiles_no_extras ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] c = host . run ( [string] ) [EOL] assert int ( c . stdout ) == len ( securedrop_test_vars . allowed_apache_logfiles ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] ] [EOL] securedrop_test_vars = pytest . securedrop_test_vars [EOL] [EOL] [EOL] def test_apache_default_docroot_is_absent ( host ) : [EOL] [docstring] [EOL] assert not host . file ( [string] ) . exists [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_securedrop_application_apt_dependencies ( host , package ) : [EOL] [docstring] [EOL] assert host . package ( package ) . is_installed [EOL] [EOL] [EOL] def test_securedrop_application_test_locale ( host ) : [EOL] [docstring] [EOL] securedrop_config = host . file ( [string] . format ( securedrop_test_vars . securedrop_code ) ) [EOL] with host . sudo ( ) : [EOL] assert securedrop_config . is_file [EOL] assert securedrop_config . contains ( [string] ) [EOL] assert securedrop_config . content_string . count ( [string] ) == [number] [EOL] assert securedrop_config . content_string . count ( [string] ) == [number] [EOL] assert [string] in securedrop_config . content_string [EOL] [EOL] [EOL] def test_securedrop_application_test_journalist_key ( host ) : [EOL] [docstring] [EOL] pubkey_file = host . file ( [string] . format ( securedrop_test_vars . securedrop_data ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] assert pubkey_file . is_file [EOL] assert pubkey_file . user == [string] [EOL] assert pubkey_file . group == [string] [EOL] assert pubkey_file . mode == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] securedrop_config = host . file ( [string] . format ( securedrop_test_vars . securedrop_code ) ) [EOL] with host . sudo ( ) : [EOL] assert securedrop_config . is_file [EOL] assert securedrop_config . user == securedrop_test_vars . securedrop_user [EOL] assert securedrop_config . group == securedrop_test_vars . securedrop_user [EOL] assert securedrop_config . mode == [number] [EOL] assert securedrop_config . contains ( [string] ) [EOL] [EOL] [EOL] def test_securedrop_application_sqlite_db ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] f = host . file ( [string] . format ( securedrop_test_vars . securedrop_data ) ) [EOL] assert f . is_file [EOL] assert f . user == securedrop_test_vars . securedrop_user [EOL] assert f . group == securedrop_test_vars . securedrop_user [EOL] assert f . mode == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] testinfra_hosts = [ [string] ] [EOL] [EOL] [EOL] def test_haveged_config ( host ) : [EOL] [docstring] [EOL] f = host . file ( [string] ) [EOL] assert f . is_file [EOL] assert f . user == [string] [EOL] assert f . group == [string] [EOL] assert f . mode == [number] [EOL] assert f . contains ( [string] ) [EOL] [EOL] [EOL] def test_haveged_no_duplicate_lines ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert c . stdout == [string] [EOL] [EOL] [EOL] def test_haveged_is_running ( host ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] with host . sudo ( ) : [EOL] s = host . service ( [string] ) [EOL] assert s . is_running [EOL] assert s . is_enabled [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os [EOL] import io [EOL] import pytest [EOL] import yaml [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] REPO_ROOT = os . path . abspath ( os . path . join ( __file__ , os . path . pardir , os . path . pardir , os . path . pardir , os . path . pardir , ) ) [EOL] ANSIBLE_BASE = os . path . join ( REPO_ROOT , [string] , [string] ) [EOL] [EOL] [EOL] def find_ansible_playbooks ( ) : [EOL] [docstring] [EOL] playbooks = [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for f in os . listdir ( ANSIBLE_BASE ) : [EOL] [comment] [EOL] if f . endswith ( [string] ) : [EOL] [comment] [EOL] if f not in [ [string] , [string] ] : [EOL] playbooks . append ( os . path . join ( ANSIBLE_BASE , f ) ) [EOL] [comment] [EOL] assert len ( playbooks ) > [number] [EOL] return playbooks [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , find_ansible_playbooks ( ) ) def test_max_fail_percentage ( host , playbook ) : [EOL] [docstring] [EOL] with io . open ( playbook , [string] ) as f : [EOL] playbook_yaml = yaml . safe_load ( f ) [EOL] [comment] [EOL] for play in playbook_yaml : [EOL] assert [string] in play [EOL] assert play [ [string] ] == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , find_ansible_playbooks ( ) ) def test_any_errors_fatal ( host , playbook ) : [EOL] [docstring] [EOL] with io . open ( playbook , [string] ) as f : [EOL] playbook_yaml = yaml . safe_load ( f ) [EOL] [comment] [EOL] for play in playbook_yaml : [EOL] assert [string] in play [EOL] [comment] [EOL] assert play [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , find_ansible_playbooks ( ) ) def test_locale ( host , playbook ) : [EOL] [docstring] [EOL] with io . open ( os . path . join ( ANSIBLE_BASE , playbook ) , [string] ) as f : [EOL] playbook_yaml = yaml . safe_load ( f ) [EOL] for play in playbook_yaml : [EOL] assert [string] in play [EOL] assert play [ [string] ] [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] [EOL] [EOL] testinfra_hosts = [ [string] , [string] , ] [EOL] TOR_DOWNLOAD_DIR = [string] [EOL] TOR_PACKAGES = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL] [comment] [EOL] TOR_VERSION_TEMPLATE = [string] [EOL] [EOL] [EOL] def test_tor_apt_repo ( host ) : [EOL] [docstring] [EOL] repo_file = [string] [comment] [EOL] f = host . file ( repo_file ) [EOL] assert f . exists [EOL] assert f . contains ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , TOR_PACKAGES ) def test_tor_package_versions ( host , pkg ) : [EOL] [docstring] [EOL] tor_version = TOR_VERSION_TEMPLATE . format ( host . system_info . codename ) [EOL] package_name = [string] . format ( pkg [ [string] ] , tor_version , pkg [ [string] ] ) [EOL] filepath = os . path . join ( TOR_DOWNLOAD_DIR , package_name ) [EOL] f = host . file ( filepath ) [EOL] assert f . exists [EOL] assert f . is_file [EOL] [EOL] cmd = [string] . format ( filepath ) [EOL] package_version = host . check_output ( cmd ) [EOL] assert package_version == tor_version [EOL] [EOL] [EOL] def test_tor_package_platform ( host ) : [EOL] [docstring] [EOL] assert host . system_info . type == [string] [EOL] assert host . system_info . distribution == [string] [EOL] assert host . system_info . codename in ( [string] , [string] ) [EOL] assert host . system_info . release in ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Literal , List , Optional [EOL] import typing [EOL] import typing_extensions [EOL] import pytest [EOL] import os [EOL] [EOL] [EOL] SECUREDROP_TARGET_PLATFORM = os . environ . get ( [string] ) [EOL] SECUREDROP_PYTHON_VERSION = os . environ . get ( [string] , [string] ) [EOL] [EOL] testinfra_hosts = [ [string] . format ( SECUREDROP_TARGET_PLATFORM ) ] [EOL] [EOL] [EOL] def test_sass_gem_installed ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert [string] in c . stdout [EOL] assert c . rc == [number] [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] [string] ) def test_build_all_packages_updated ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] assert c . rc == [number] [EOL] assert [string] in c . stdout [EOL] [EOL] [EOL] def test_python_version ( host ) : [EOL] [docstring] [EOL] c = host . run ( [string] ) [EOL] version_string = [string] . format ( SECUREDROP_PYTHON_VERSION ) [EOL] assert c . stdout . startswith ( version_string ) [EOL] [EOL] [EOL] def test_dh_virtualenv ( host ) : [EOL] [docstring] [EOL] expected_version = [string] if host . system_info . codename == [string] else [string] [EOL] version_string = [string] . format ( expected_version ) [EOL] c = host . run ( [string] ) [EOL] assert c . stdout . startswith ( version_string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import io [EOL] import yaml [EOL] [EOL] [EOL] def pytest_namespace ( ) : [EOL] [docstring] [EOL] filepath = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] with io . open ( filepath , [string] ) as f : [EOL] securedrop_test_vars = yaml . safe_load ( f ) [EOL] [EOL] [comment] [EOL] securedrop_target_platform = os . environ . get ( [string] ) [EOL] securedrop_test_vars [ [string] ] = securedrop_target_platform [EOL] [comment] [EOL] return dict ( securedrop_test_vars = securedrop_test_vars ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_build_ossec_apt_dependencies ( host , build_path ) : [EOL] [docstring] [EOL] assert not host . file ( build_path ) . exists [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import argparse [EOL] import logging [EOL] import typing [EOL] import subprocess [EOL] import argparse [EOL] import logging [EOL] import os [EOL] import shutil [EOL] import subprocess [EOL] import sys [EOL] [EOL] sdlog = logging . getLogger ( __name__ ) [EOL] [EOL] DIR = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] VENV_DIR = os . path . join ( DIR , [string] ) [EOL] [EOL] [EOL] def setup_logger ( verbose = False ) : [EOL] [docstring] [EOL] [comment] [EOL] sdlog . setLevel ( logging . DEBUG ) [EOL] level = logging . DEBUG if verbose else logging . INFO [EOL] [EOL] stdout = logging . StreamHandler ( sys . stdout ) [EOL] stdout . setFormatter ( logging . Formatter ( [string] ) ) [EOL] stdout . setLevel ( level ) [EOL] sdlog . addHandler ( stdout ) [EOL] [EOL] [EOL] def run_command ( command ) : [EOL] [docstring] [EOL] popen = subprocess . Popen ( command , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) [EOL] for stdout_line in iter ( popen . stdout . readline , [string] ) : [EOL] yield stdout_line [EOL] popen . stdout . close ( ) [EOL] return_code = popen . wait ( ) [EOL] if return_code : [EOL] raise subprocess . CalledProcessError ( return_code , command ) [EOL] [EOL] [EOL] def is_tails ( ) : [EOL] try : [EOL] id = subprocess . check_output ( [string] , shell = True ) . decode ( [string] ) . strip ( ) [EOL] except subprocess . CalledProcessError : [EOL] id = None [EOL] [EOL] [comment] [EOL] if id == [string] : [EOL] if os . uname ( ) [ [number] ] == [string] : [EOL] id = [string] [EOL] [EOL] return id == [string] [EOL] [EOL] [EOL] def clean_up_tails3_venv ( virtualenv_dir = VENV_DIR ) : [EOL] [docstring] [EOL] if is_tails ( ) : [EOL] try : [EOL] dist = subprocess . check_output ( [string] , shell = True ) . strip ( ) [EOL] except subprocess . CalledProcessError : [EOL] dist = None [EOL] [EOL] [comment] [EOL] if dist == [string] : [EOL] python_lib_path = os . path . join ( virtualenv_dir , [string] ) [EOL] if os . path . exists ( os . path . join ( python_lib_path ) ) : [EOL] sdlog . info ( [string] [string] ) [EOL] shutil . rmtree ( virtualenv_dir ) [EOL] sdlog . info ( [string] ) [EOL] [EOL] [EOL] def checkenv ( args ) : [EOL] clean_up_tails3_venv ( VENV_DIR ) [EOL] if not os . path . exists ( os . path . join ( VENV_DIR , [string] ) ) : [EOL] sdlog . error ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def maybe_torify ( ) : [EOL] if is_tails ( ) : [EOL] return [ [string] ] [EOL] else : [EOL] return [ ] [EOL] [EOL] [EOL] def install_apt_dependencies ( args ) : [EOL] [docstring] [EOL] sdlog . info ( [string] ) [EOL] sdlog . info ( ( [string] [string] ) ) [EOL] [EOL] apt_command = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] for output_line in run_command ( apt_command ) : [EOL] print ( output_line . decode ( [string] ) . rstrip ( ) ) [EOL] except subprocess . CalledProcessError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sdlog . error ( ( [string] [string] ) ) [EOL] raise [EOL] [EOL] [EOL] def envsetup ( args , virtualenv_dir = VENV_DIR ) : [EOL] [docstring] [EOL] [comment] [EOL] clean_up_tails3_venv ( virtualenv_dir ) [EOL] [EOL] [comment] [EOL] if not os . path . exists ( virtualenv_dir ) : [EOL] [EOL] install_apt_dependencies ( args ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sdlog . info ( [string] ) [EOL] try : [EOL] sdlog . debug ( subprocess . check_output ( maybe_torify ( ) + [ [string] , [string] , virtualenv_dir ] , stderr = subprocess . STDOUT ) ) [EOL] except subprocess . CalledProcessError as e : [EOL] sdlog . debug ( e . output ) [EOL] sdlog . error ( ( [string] [string] ) ) [EOL] sdlog . debug ( [string] ) [EOL] if os . path . exists ( virtualenv_dir ) : [EOL] shutil . rmtree ( virtualenv_dir ) [EOL] raise [EOL] else : [EOL] sdlog . info ( [string] ) [EOL] [EOL] install_pip_dependencies ( args ) [EOL] if os . path . exists ( os . path . join ( DIR , [string] ) ) : [EOL] install_pip_self ( args ) [EOL] [EOL] sdlog . info ( [string] ) [EOL] [EOL] [EOL] def install_pip_self ( args ) : [EOL] pip_install_cmd = [ os . path . join ( VENV_DIR , [string] , [string] ) , [string] , [string] , DIR ] [EOL] try : [EOL] subprocess . check_output ( maybe_torify ( ) + pip_install_cmd , stderr = subprocess . STDOUT ) [EOL] except subprocess . CalledProcessError as e : [EOL] sdlog . debug ( e . output ) [EOL] sdlog . error ( [string] ) [EOL] raise [EOL] [EOL] [EOL] def install_pip_dependencies ( args , pip_install_cmd = [ os . path . join ( VENV_DIR , [string] , [string] ) , [string] , [string] , [string] , os . path . join ( DIR , [string] ) , [string] , [string] , [string] , [string] , ] ) : [EOL] [docstring] [EOL] [EOL] sdlog . info ( [string] ) [EOL] try : [EOL] pip_output = subprocess . check_output ( maybe_torify ( ) + pip_install_cmd , stderr = subprocess . STDOUT ) [EOL] except subprocess . CalledProcessError as e : [EOL] sdlog . debug ( e . output ) [EOL] sdlog . error ( ( [string] [string] ) ) [EOL] raise [EOL] [EOL] sdlog . debug ( pip_output ) [EOL] if [string] in str ( pip_output ) : [EOL] sdlog . info ( [string] ) [EOL] else : [EOL] sdlog . info ( [string] ) [EOL] [EOL] [EOL] def parse_argv ( argv ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , action = [string] , default = False , help = [string] ) [EOL] parser . set_defaults ( func = envsetup ) [EOL] [EOL] subparsers = parser . add_subparsers ( ) [EOL] [EOL] envsetup_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] envsetup_parser . set_defaults ( func = envsetup ) [EOL] [EOL] checkenv_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] checkenv_parser . set_defaults ( func = checkenv ) [EOL] [EOL] return parser . parse_args ( argv ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] args = parse_argv ( sys . argv [ [number] : ] ) [EOL] setup_logger ( args . v ) [EOL] [EOL] try : [EOL] args . func ( args ) [EOL] except Exception : [EOL] sys . exit ( [number] ) [EOL] else : [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import setuptools [EOL] [EOL] setuptools . setup ( setup_requires = [ [string] , [string] ] , d2to1 = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Pattern , Any [EOL] import typing [EOL] from flaky import flaky [EOL] import os [EOL] import io [EOL] import pexpect [EOL] import pytest [EOL] import re [EOL] import requests [EOL] import shutil [EOL] import subprocess [EOL] import tempfile [EOL] [EOL] SD_DIR = [string] [EOL] CURRENT_DIR = os . path . dirname ( __file__ ) [EOL] ANSIBLE_BASE = [string] [EOL] [comment] [EOL] [comment] [EOL] ANSI_ESCAPE = re . compile ( [string] ) [EOL] [EOL] [EOL] OUTPUT1 = [string] [EOL] [EOL] WHEN_BOTH_TRUE = [string] [EOL] [EOL] WHEN_ONLY_V2 = [string] [EOL] [EOL] JOURNALIST_ALERT_OUTPUT = [string] [EOL] [EOL] HTTPS_OUTPUT = [string] [EOL] [EOL] [EOL] def setup_function ( function ) : [EOL] global SD_DIR [EOL] SD_DIR = tempfile . mkdtemp ( ) [EOL] ANSIBLE_BASE = [string] . format ( SD_DIR ) [EOL] [EOL] for name in [ [string] , [string] ] : [EOL] shutil . copytree ( os . path . join ( CURRENT_DIR , [string] , name ) , os . path . join ( ANSIBLE_BASE , name ) ) [EOL] [EOL] for name in [ [string] , [string] ] : [EOL] shutil . copy ( os . path . join ( CURRENT_DIR , [string] , name ) , ANSIBLE_BASE ) [EOL] [EOL] cmd = [string] . format ( ANSIBLE_BASE ) . split ( ) [EOL] subprocess . check_call ( cmd ) [EOL] for name in [ [string] , [string] , [string] , [string] ] : [EOL] subprocess . check_call ( [string] . format ( CURRENT_DIR , name , ANSIBLE_BASE ) . split ( ) ) [EOL] for name in [ [string] , [string] , [string] , [string] ] : [EOL] dircmd = [string] . format ( SD_DIR , name ) [EOL] subprocess . check_call ( dircmd . split ( ) ) [EOL] [EOL] [EOL] def teardown_function ( function ) : [EOL] subprocess . check_call ( [string] . format ( SD_DIR ) . split ( ) ) [EOL] [EOL] [EOL] def verify_username_prompt ( child ) : [EOL] child . expect ( [string] ) [EOL] [EOL] [EOL] def verify_reboot_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_ipv4_appserver_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_ipv4_monserver_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_hostname_app_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_hostname_mon_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_dns_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_app_gpg_key_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_https_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_https_cert_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] [EOL] def verify_https_cert_key_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] [EOL] def verify_https_cert_chain_file_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_app_gpg_fingerprint_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_ossec_gpg_key_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_ossec_gpg_fingerprint_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_admin_email_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_journalist_gpg_key_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_journalist_fingerprint_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_journalist_email_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] [EOL] [EOL] def verify_smtp_relay_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_smtp_port_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_sasl_domain_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_sasl_username_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] [EOL] def verify_sasl_password_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] [EOL] def verify_ssh_over_lan_prompt ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_locales_prompt ( child ) : [EOL] child . expect ( [string] ) [comment] [EOL] [EOL] [EOL] def verify_v2_onion_for_first_time ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_v3_onion_for_first_time ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_v3_onion_when_v2_is_enabled ( child ) : [EOL] child . expect ( [string] , timeout = [number] ) [comment] [EOL] assert ANSI_ESCAPE . sub ( [string] , child . buffer . decode ( [string] ) ) . strip ( ) == [string] [comment] [EOL] [EOL] [EOL] def verify_install_has_valid_config ( ) : [EOL] [docstring] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] child . expect ( [string] , timeout = [number] ) [EOL] child . close ( ) [EOL] [EOL] [EOL] def test_install_with_no_config ( ) : [EOL] [docstring] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] child . expect ( [string] , timeout = [number] ) [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] [EOL] def test_sdconfig_on_first_run ( ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] verify_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_reboot_prompt ( child ) [EOL] child . sendline ( [string] ) [comment] [EOL] verify_ipv4_appserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ipv4_monserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_app_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_mon_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_dns_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_https_prompt ( child ) [EOL] [comment] [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ossec_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_ossec_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_admin_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_relay_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_port_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_domain_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_password_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ssh_over_lan_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_locales_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_v2_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_v3_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] with open ( os . path . join ( SD_DIR , [string] ) ) as fobj : [comment] [EOL] data = fobj . read ( ) [EOL] assert data == OUTPUT1 [EOL] [EOL] verify_install_has_valid_config ( ) [EOL] [EOL] [EOL] def test_sdconfig_both_v2_v3_true ( ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] verify_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_reboot_prompt ( child ) [EOL] child . sendline ( [string] ) [comment] [EOL] verify_ipv4_appserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ipv4_monserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_app_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_mon_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_dns_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_https_prompt ( child ) [EOL] [comment] [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ossec_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_ossec_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_admin_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_relay_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_port_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_domain_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_password_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ssh_over_lan_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_locales_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_v2_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_v3_onion_when_v2_is_enabled ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] with open ( os . path . join ( SD_DIR , [string] ) ) as fobj : [comment] [EOL] data = fobj . read ( ) [EOL] assert data == WHEN_BOTH_TRUE [EOL] [EOL] verify_install_has_valid_config ( ) [EOL] [EOL] [EOL] def test_sdconfig_only_v2_true ( ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] verify_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_reboot_prompt ( child ) [EOL] child . sendline ( [string] ) [comment] [EOL] verify_ipv4_appserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ipv4_monserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_app_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_mon_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_dns_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_https_prompt ( child ) [EOL] [comment] [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ossec_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_ossec_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_admin_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_relay_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_port_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_domain_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_password_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ssh_over_lan_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_locales_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_v2_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_v3_onion_when_v2_is_enabled ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] with open ( os . path . join ( SD_DIR , [string] ) ) as fobj : [comment] [EOL] data = fobj . read ( ) [EOL] assert data == WHEN_ONLY_V2 [EOL] [EOL] verify_install_has_valid_config ( ) [EOL] [EOL] [EOL] def test_sdconfig_enable_journalist_alerts ( ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] verify_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_reboot_prompt ( child ) [EOL] child . sendline ( [string] ) [comment] [EOL] verify_ipv4_appserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ipv4_monserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_app_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_mon_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_dns_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_https_prompt ( child ) [EOL] [comment] [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ossec_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_ossec_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_admin_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] [comment] [EOL] verify_journalist_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_relay_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_port_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_domain_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_password_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ssh_over_lan_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_locales_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_v2_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_v3_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] with open ( os . path . join ( SD_DIR , [string] ) ) as fobj : [comment] [EOL] data = fobj . read ( ) [EOL] assert JOURNALIST_ALERT_OUTPUT == data [EOL] [EOL] verify_install_has_valid_config ( ) [EOL] [EOL] [EOL] def test_sdconfig_enable_https_on_source_interface ( ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , SD_DIR ) ) [EOL] verify_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_reboot_prompt ( child ) [EOL] child . sendline ( [string] ) [comment] [EOL] verify_ipv4_appserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ipv4_monserver_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_app_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_hostname_mon_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_dns_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_https_prompt ( child ) [EOL] [comment] [EOL] [comment] [EOL] child . sendline ( [string] ) [EOL] verify_https_cert_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_https_cert_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_https_cert_chain_file_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_app_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ossec_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_ossec_gpg_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_admin_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] [comment] [EOL] verify_journalist_gpg_key_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_fingerprint_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_journalist_email_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_relay_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_smtp_port_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_domain_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_username_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_sasl_password_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_ssh_over_lan_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_locales_prompt ( child ) [EOL] child . sendline ( [string] ) [EOL] verify_v2_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] verify_v3_onion_for_first_time ( child ) [EOL] child . sendline ( [string] * [number] + [string] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] with open ( os . path . join ( SD_DIR , [string] ) ) as fobj : [comment] [EOL] data = fobj . read ( ) [EOL] assert HTTPS_OUTPUT == data [EOL] [EOL] verify_install_has_valid_config ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] GIT_CONFIG = [string] [EOL] [EOL] [EOL] @ pytest . fixture def securedrop_git_repo ( tmpdir ) : [EOL] cwd = os . getcwd ( ) [EOL] os . chdir ( str ( tmpdir ) ) [EOL] [comment] [EOL] cmd = [ [string] , [string] , [string] ] [EOL] subprocess . check_call ( cmd ) [EOL] os . chdir ( os . path . join ( str ( tmpdir ) , [string] ) ) [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] [comment] [EOL] with io . open ( [string] , [string] ) as fobj : [EOL] fobj . write ( GIT_CONFIG ) [EOL] [comment] [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] yield tmpdir [EOL] [EOL] [comment] [EOL] test_name = str ( tmpdir ) . split ( [string] ) [ - [number] ] [EOL] try : [EOL] subprocess . check_call ( [ [string] , [string] . format ( str ( tmpdir ) ) , [string] . format ( CURRENT_DIR , test_name ) ] ) [EOL] except subprocess . CalledProcessError : [EOL] [comment] [EOL] pass [EOL] [EOL] os . chdir ( cwd ) [EOL] [EOL] [EOL] def set_reliable_keyserver ( gpgdir ) : [EOL] [comment] [EOL] [comment] [EOL] gpgconf_path = os . path . join ( gpgdir , [string] ) [EOL] if not os . path . exists ( gpgconf_path ) : [EOL] os . mkdir ( gpgdir ) [EOL] with open ( gpgconf_path , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] [comment] [EOL] os . chmod ( gpgdir , [number] ) [EOL] [EOL] [EOL] @ flaky ( max_runs = [number] ) def test_check_for_update_when_updates_needed ( securedrop_git_repo ) : [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] ansible_base = os . path . join ( str ( securedrop_git_repo ) , [string] ) [EOL] fullcmd = [string] . format ( cmd , ansible_base ) [EOL] child = pexpect . spawn ( fullcmd ) [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] [EOL] @ flaky ( max_runs = [number] ) def test_check_for_update_when_updates_not_needed ( securedrop_git_repo ) : [EOL] [comment] [EOL] github_url = [string] [comment] [EOL] latest_release = requests . get ( github_url ) . json ( ) [EOL] latest_tag = str ( latest_release [ [string] ] ) [EOL] [EOL] subprocess . check_call ( [ [string] , [string] , latest_tag ] ) [EOL] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] ansible_base = os . path . join ( str ( securedrop_git_repo ) , [string] ) [EOL] fullcmd = [string] . format ( cmd , ansible_base ) [EOL] child = pexpect . spawn ( fullcmd ) [EOL] child . expect ( [string] , timeout = [number] ) [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] [EOL] @ flaky ( max_runs = [number] ) def test_update ( securedrop_git_repo ) : [EOL] gpgdir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] set_reliable_keyserver ( gpgdir ) [EOL] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] ansible_base = os . path . join ( str ( securedrop_git_repo ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , ansible_base ) ) [EOL] [EOL] output = child . read ( ) [EOL] assert [string] in output [EOL] assert [string] in output [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus == [number] [EOL] assert child . signalstatus is None [EOL] [EOL] [EOL] @ flaky ( max_runs = [number] ) def test_update_fails_when_no_signature_present ( securedrop_git_repo ) : [EOL] gpgdir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] set_reliable_keyserver ( gpgdir ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] [EOL] [comment] [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] ansible_base = os . path . join ( str ( securedrop_git_repo ) , [string] ) [EOL] child = pexpect . spawn ( [string] . format ( cmd , ansible_base ) ) [EOL] output = child . read ( ) [EOL] assert [string] not in output [EOL] assert [string] in output [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] [EOL] [comment] [EOL] assert child . exitstatus != [number] [EOL] assert child . signalstatus != [number] [EOL] [EOL] [EOL] @ flaky ( max_runs = [number] ) def test_update_with_duplicate_branch_and_tag ( securedrop_git_repo ) : [EOL] gpgdir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] set_reliable_keyserver ( gpgdir ) [EOL] [EOL] github_url = [string] [comment] [EOL] latest_release = requests . get ( github_url ) . json ( ) [EOL] latest_tag = str ( latest_release [ [string] ] ) [EOL] [EOL] [comment] [EOL] subprocess . check_call ( [ [string] , [string] , [string] , latest_tag ] ) [EOL] [comment] [EOL] subprocess . check_call ( [string] . split ( ) ) [EOL] [EOL] cmd = os . path . join ( os . path . dirname ( CURRENT_DIR ) , [string] ) [EOL] ansible_base = os . path . join ( str ( securedrop_git_repo ) , [string] ) [EOL] [EOL] child = pexpect . spawn ( [string] . format ( cmd , ansible_base ) ) [EOL] output = child . read ( ) [EOL] [comment] [EOL] assert [string] not in output [EOL] assert [string] not in output [EOL] assert [string] in output [EOL] [EOL] child . expect ( pexpect . EOF , timeout = [number] ) [comment] [EOL] child . close ( ) [EOL] assert child . exitstatus != [number] [EOL] assert child . signalstatus != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import Dict , Tuple , Any , Literal , List , Optional [EOL] import typing_extensions [EOL] import io [EOL] import securedrop [EOL] import typing [EOL] import requests [EOL] import screenshots [EOL] from glob import glob [EOL] from urllib . parse import urljoin [EOL] [EOL] import os [EOL] import re [EOL] import requests [EOL] import sys [EOL] [EOL] [comment] [EOL] DEFAULT_BASE_URL = [string] [EOL] [EOL] [comment] [EOL] SCREENSHOTS_DIRECTORY = os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] [comment] [EOL] SCREENSHOTS_GLOB = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CANONICALIZATION_RULES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] PROJECT_SLUG = [string] [EOL] COMPONENT_SLUG = [string] [EOL] [EOL] [comment] [EOL] REQUEST_LIMIT = [number] [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] token = os . getenv ( [string] , None ) [EOL] base_url = os . getenv ( [string] , DEFAULT_BASE_URL ) [EOL] [EOL] if token is None : [EOL] raise BadOrMissingTokenError ( [string] , base_url ) [EOL] [EOL] screenshot_files = glob ( os . path . join ( SCREENSHOTS_DIRECTORY , SCREENSHOTS_GLOB ) ) [EOL] if len ( screenshot_files ) == [number] : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] uploader = WeblateUploader ( token = token , base_url = base_url , project = PROJECT_SLUG , component = COMPONENT_SLUG , files = screenshot_files , request_limit = REQUEST_LIMIT , canonicalization_rules = CANONICALIZATION_RULES , ) [EOL] uploader . upload ( ) [EOL] [EOL] [EOL] class WeblateUploader ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , token , base_url , project , component , files , request_limit , canonicalization_rules = ( ) , ) : [EOL] [EOL] if len ( token ) != [number] : [EOL] raise BadOrMissingTokenError ( [string] , base_url ) [EOL] [EOL] self . base_url = base_url [EOL] self . screenshots_endpoint = urljoin ( base_url , [string] ) [EOL] self . project = project [EOL] self . component = component [EOL] self . files = files [EOL] self . request_limit = request_limit [EOL] self . canonicalization_rules = canonicalization_rules [EOL] self . user_agent = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . session = requests . Session ( ) [EOL] headers = { [string] : self . user_agent , [string] : [string] . format ( token ) , } [EOL] self . session . headers . update ( headers ) [EOL] [EOL] def get_existing_screenshots ( self ) : [EOL] [docstring] [EOL] next_screenshots_url = self . screenshots_endpoint [EOL] [EOL] [comment] [EOL] [comment] [EOL] screenshots = [ ] [EOL] request_count = [number] [EOL] while next_screenshots_url is not None : [EOL] response = self . session . get ( next_screenshots_url ) [EOL] response . raise_for_status ( ) [EOL] screenshots_page = response . json ( ) [EOL] next_screenshots_url = screenshots_page [ [string] ] [EOL] screenshots += screenshots_page [ [string] ] [EOL] request_count += [number] [EOL] if request_count >= self . request_limit : [EOL] msg = [string] . format ( self . request_limit ) [EOL] raise RequestLimitError ( msg ) [EOL] return screenshots [EOL] [EOL] def _canonicalize ( self , filename ) : [EOL] [docstring] [EOL] for pattern , repl in self . canonicalization_rules : [EOL] filename = re . sub ( pattern , repl , filename ) [EOL] return filename [EOL] [EOL] def upload ( self , check_existing_screenshots = True ) : [EOL] [docstring] [EOL] if check_existing_screenshots is True : [EOL] existing_screenshots = self . get_existing_screenshots ( ) [EOL] else : [EOL] existing_screenshots = [ ] [EOL] [EOL] for file in self . files : [EOL] basename = os . path . basename ( file ) [EOL] canonical_name = self . _canonicalize ( basename ) [EOL] existing_screenshot_url = None [EOL] [EOL] for screenshot in existing_screenshots : [EOL] if screenshot [ [string] ] == canonical_name : [EOL] existing_screenshot_url = screenshot [ [string] ] [EOL] break [EOL] [EOL] image = { [string] : open ( file , [string] ) } [EOL] [EOL] if existing_screenshot_url is not None : [EOL] print ( [string] . format ( basename ) ) [EOL] response = self . session . post ( existing_screenshot_url , files = image ) [EOL] response . raise_for_status ( ) [EOL] else : [EOL] fields = { [string] : canonical_name , [string] : [string] , [string] : [string] , } [EOL] print ( [string] . format ( basename ) ) [EOL] response = self . session . post ( self . screenshots_endpoint , files = image , data = fields ) [EOL] response . raise_for_status ( ) [EOL] [EOL] result_url = urljoin ( self . base_url , [string] . format ( self . project , self . component ) ) [EOL] print ( [string] . format ( result_url ) ) [EOL] [EOL] [EOL] class BadOrMissingTokenError ( Exception ) : [EOL] def __init__ ( self , reason = [string] , base_url = None ) : [EOL] if base_url is not None : [EOL] reason += [string] . format ( urljoin ( base_url , [string] ) ) [EOL] super ( ) . __init__ ( reason ) [EOL] [EOL] [EOL] class RequestLimitError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,io.BufferedReader]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,io.BufferedReader]$ 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,io.BufferedReader]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $requests.models.Response$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] db = SQLAlchemy ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] strings = [ [string] , [string] + [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Pattern , Any , List , Set , Optional , Match [EOL] import typing [EOL] import logging [EOL] import argparse [EOL] from __future__ import print_function [EOL] import argparse [EOL] import io [EOL] import logging [EOL] import os [EOL] import glob [EOL] import re [EOL] import signal [EOL] import subprocess [EOL] import sys [EOL] import textwrap [EOL] import version [EOL] [EOL] from os . path import dirname , join , realpath [EOL] [EOL] from sh import git , pybabel , sed , msgmerge , xgettext , msgfmt [EOL] [EOL] logging . basicConfig ( format = [string] ) [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class I18NTool ( object ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] SUPPORTED_LANGUAGES = { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , } [EOL] [EOL] def file_is_modified ( self , path ) : [EOL] dir = dirname ( path ) [EOL] return subprocess . call ( [ [string] , [string] , dir , [string] , [string] , path ] ) [EOL] [EOL] def ensure_i18n_remote ( self , args ) : [EOL] k = { [string] : args . root } [EOL] if [string] not in git . remote ( ** k ) . stdout : [EOL] git . remote . add ( [string] , args . url , ** k ) [EOL] git . fetch ( [string] , ** k ) [EOL] [EOL] def translate_messages ( self , args ) : [EOL] messages_file = os . path . join ( args . translations_dir , [string] ) [EOL] [EOL] if args . extract_update : [EOL] if not os . path . exists ( args . translations_dir ) : [EOL] os . makedirs ( args . translations_dir ) [EOL] sources = args . sources . split ( [string] ) [EOL] pybabel . extract ( [string] , [string] , args . mapping , [string] , messages_file , [string] , [string] , args . version , [string] , [string] , * sources ) [EOL] sed ( [string] , [string] , [string] , messages_file ) [EOL] [EOL] if ( self . file_is_modified ( messages_file ) and len ( os . listdir ( args . translations_dir ) ) > [number] ) : [EOL] tglob = [string] . format ( args . translations_dir ) [EOL] for translation in glob . iglob ( tglob ) : [EOL] msgmerge ( [string] , [string] , translation , messages_file ) [EOL] log . warning ( [string] . format ( messages_file ) ) [EOL] else : [EOL] log . warning ( [string] ) [EOL] [EOL] if args . compile and len ( os . listdir ( args . translations_dir ) ) > [number] : [EOL] pybabel . compile ( [string] , args . translations_dir ) [EOL] [EOL] def translate_desktop ( self , args ) : [EOL] messages_file = os . path . join ( args . translations_dir , [string] ) [EOL] [EOL] if args . extract_update : [EOL] sources = args . sources . split ( [string] ) [EOL] k = { [string] : args . translations_dir } [EOL] xgettext ( [string] , [string] , [string] , [string] , [string] , args . version , [string] , [string] , * sources , ** k ) [EOL] sed ( [string] , [string] , [string] , messages_file , ** k ) [EOL] [EOL] if self . file_is_modified ( messages_file ) : [EOL] for f in os . listdir ( args . translations_dir ) : [EOL] if not f . endswith ( [string] ) : [EOL] continue [EOL] po_file = os . path . join ( args . translations_dir , f ) [EOL] msgmerge ( [string] , po_file , messages_file ) [EOL] log . warning ( [string] + messages_file ) [EOL] else : [EOL] log . warning ( [string] ) [EOL] [EOL] if args . compile : [EOL] pos = [ f for f in os . listdir ( args . translations_dir ) if f . endswith ( [string] ) ] [EOL] linguas = [ l [ : - [number] ] for l in pos ] [EOL] content = [string] . join ( linguas ) + [string] [EOL] open ( join ( args . translations_dir , [string] ) , [string] ) . write ( content ) [EOL] [EOL] for source in args . sources . split ( [string] ) : [EOL] target = source . rstrip ( [string] ) [EOL] msgfmt ( [string] , [string] , source , [string] , target , [string] , [string] , _cwd = args . translations_dir ) [EOL] [EOL] def set_translate_parser ( self , subps , parser , translations_dir , sources ) : [EOL] parser . add_argument ( [string] , action = [string] , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , default = translations_dir , help = [string] . format ( translations_dir ) ) [EOL] parser . add_argument ( [string] , default = version . __version__ , help = ( [string] [string] . format ( version . __version__ ) ) ) [EOL] parser . add_argument ( [string] , default = sources , help = [string] . format ( sources ) ) [EOL] [EOL] def set_translate_messages_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = ( [string] [string] ) ) [EOL] translations_dir = join ( dirname ( realpath ( __file__ ) ) , [string] ) [EOL] sources = [string] [EOL] self . set_translate_parser ( subps , parser , translations_dir , sources ) [EOL] mapping = [string] [EOL] parser . add_argument ( [string] , default = mapping , help = [string] . format ( mapping ) ) [EOL] parser . set_defaults ( func = self . translate_messages ) [EOL] [EOL] def set_translate_desktop_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = ( [string] [string] ) ) [EOL] translations_dir = join ( dirname ( realpath ( __file__ ) ) , [string] ) [EOL] sources = [string] [EOL] self . set_translate_parser ( subps , parser , translations_dir , sources ) [EOL] parser . set_defaults ( func = self . translate_desktop ) [EOL] [EOL] @ staticmethod def require_git_email_name ( git_dir ) : [EOL] cmd = ( [string] [string] . format ( d = git_dir ) ) [EOL] if subprocess . call ( cmd , shell = True ) : [comment] [EOL] if [string] in io . open ( [string] ) . read ( ) : [EOL] log . error ( [string] [string] [string] ) [EOL] raise Exception ( cmd + [string] ) [EOL] return True [EOL] [EOL] def update_docs ( self , args ) : [EOL] l10n_content = [string] [EOL] for ( code , info ) in sorted ( I18NTool . SUPPORTED_LANGUAGES . items ( ) ) : [EOL] l10n_content += [string] + info [ [string] ] + [string] + code + [string] [EOL] includes = join ( args . documentation_dir , [string] ) [EOL] l10n_txt = join ( includes , [string] ) [EOL] io . open ( l10n_txt , mode = [string] ) . write ( l10n_content ) [EOL] self . require_git_email_name ( includes ) [EOL] if self . file_is_modified ( l10n_txt ) : [EOL] k = { [string] : includes } [EOL] git . add ( [string] , ** k ) [EOL] msg = [string] [EOL] git . commit ( [string] , msg , [string] , ** k ) [EOL] log . warning ( l10n_txt + [string] ) [EOL] git_show_out = git . show ( ** k ) [EOL] log . warning ( git_show_out ) [EOL] else : [EOL] log . warning ( l10n_txt + [string] ) [EOL] [EOL] def set_update_docs_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = ( [string] ) ) [EOL] documentation_dir = join ( dirname ( realpath ( __file__ ) ) , [string] , [string] ) [EOL] parser . add_argument ( [string] , default = documentation_dir , help = ( [string] [string] . format ( documentation_dir ) ) ) [EOL] parser . set_defaults ( func = self . update_docs ) [EOL] [EOL] def update_from_weblate ( self , args ) : [EOL] self . ensure_i18n_remote ( args ) [EOL] codes = list ( I18NTool . SUPPORTED_LANGUAGES . keys ( ) ) [EOL] if args . supported_languages : [EOL] codes = args . supported_languages . split ( [string] ) [EOL] for code in sorted ( codes ) : [EOL] info = I18NTool . SUPPORTED_LANGUAGES [ code ] [EOL] [EOL] def need_update ( p ) : [EOL] exists = os . path . exists ( join ( args . root , p ) ) [EOL] k = { [string] : args . root } [EOL] git . checkout ( [string] , [string] , p , ** k ) [EOL] git . reset ( [string] , [string] , p , ** k ) [EOL] if not exists : [EOL] return True [EOL] else : [EOL] return self . file_is_modified ( join ( args . root , p ) ) [EOL] [EOL] def add ( p ) : [EOL] git ( [string] , args . root , [string] , p ) [EOL] [EOL] updated = False [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] p = [string] . format ( l = code ) [comment] [EOL] if need_update ( p ) : [EOL] add ( p ) [EOL] updated = True [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] desktop_code = info [ [string] ] [EOL] p = join ( [string] , [string] . format ( l = desktop_code ) ) [comment] [EOL] if need_update ( p ) : [EOL] add ( p ) [EOL] updated = True [EOL] [EOL] if updated : [EOL] self . upstream_commit ( args , code ) [EOL] [EOL] def translators ( self , args , path , commit_range ) : [EOL] [docstring] [EOL] translation_re = re . compile ( [string] ) [EOL] [EOL] path_changes = git ( [string] , [string] , args . root , [string] , [string] , commit_range , [string] , path , _encoding = [string] ) [EOL] path_changes = [string] . format ( path_changes ) [EOL] path_changes = [ c . split ( [string] ) for c in path_changes . strip ( ) . split ( [string] ) ] [EOL] path_changes = [ c for c in path_changes if len ( c ) > [number] and translation_re . match ( c [ [number] ] ) ] [EOL] [EOL] path_authors = [ c [ [number] ] for c in path_changes ] [EOL] return set ( path_authors ) [EOL] [EOL] def upstream_commit ( self , args , code ) : [EOL] self . require_git_email_name ( args . root ) [EOL] authors = set ( ) [EOL] diffs = [string] . format ( git ( [string] , [string] , args . root , [string] , [string] , [string] ) ) [EOL] [EOL] for path in sorted ( diffs . strip ( ) . split ( [string] ) ) : [EOL] previous_message = [string] . format ( git ( [string] , [string] , args . root , [string] , [string] , [string] , path , _encoding = [string] ) ) [EOL] update_re = re . compile ( [string] ) [EOL] m = update_re . search ( previous_message ) [EOL] if m : [EOL] origin = m . group ( [number] ) [EOL] else : [EOL] origin = [string] [EOL] authors |= self . translators ( args , path , [string] . format ( origin ) ) [EOL] [EOL] authors = [string] . join ( sorted ( authors ) ) [EOL] [EOL] current = git ( [string] , args . root , [string] , [string] ) [EOL] info = I18NTool . SUPPORTED_LANGUAGES [ code ] [EOL] message = textwrap . dedent ( [string] ) . format ( remote = args . url , name = info [ [string] ] , authors = authors , code = code , current = current ) [EOL] git ( [string] , args . root , [string] , [string] , message ) [EOL] [EOL] def set_update_from_weblate_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = ( [string] ) ) [EOL] root = join ( dirname ( realpath ( __file__ ) ) , [string] ) [EOL] parser . add_argument ( [string] , default = root , help = ( [string] [string] . format ( root ) ) ) [EOL] url = [string] [EOL] parser . add_argument ( [string] , default = url , help = ( [string] [string] . format ( url ) ) ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . set_defaults ( func = self . update_from_weblate ) [EOL] [EOL] def set_list_locales_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = ( [string] ) ) [EOL] parser . add_argument ( [string] , action = [string] , help = ( [string] ) ) [EOL] parser . set_defaults ( func = self . list_locales ) [EOL] [EOL] def list_locales ( self , args ) : [EOL] if args . lines : [EOL] for l in sorted ( list ( self . SUPPORTED_LANGUAGES . keys ( ) ) + [ [string] ] ) : [EOL] print ( l ) [EOL] elif args . python : [EOL] print ( sorted ( list ( self . SUPPORTED_LANGUAGES . keys ( ) ) + [ [string] ] ) ) [EOL] else : [EOL] print ( [string] . join ( sorted ( list ( self . SUPPORTED_LANGUAGES . keys ( ) ) + [ [string] ] ) ) ) [EOL] [EOL] def set_list_translators_parser ( self , subps ) : [EOL] parser = subps . add_parser ( [string] , help = ( [string] ) ) [EOL] root = join ( dirname ( realpath ( __file__ ) ) , [string] ) [EOL] parser . add_argument ( [string] , default = root , help = ( [string] [string] . format ( root ) ) ) [EOL] url = [string] [EOL] parser . add_argument ( [string] , default = url , help = ( [string] [string] . format ( url ) ) ) [EOL] parser . add_argument ( [string] , action = [string] , help = ( [string] [string] ) ) [EOL] parser . set_defaults ( func = self . list_translators ) [EOL] [EOL] def get_last_sync ( self ) : [EOL] commits = git ( [string] , [string] , [string] , [string] , _encoding = [string] ) [EOL] for commit in commits : [EOL] commit_hash , msg = commit . split ( [string] , [number] ) [EOL] if msg . startswith ( [string] ) : [EOL] return commit_hash [EOL] return [string] [EOL] [EOL] def list_translators ( self , args ) : [EOL] self . ensure_i18n_remote ( args ) [EOL] app_template = [string] [EOL] desktop_template = [string] [EOL] last_sync = self . get_last_sync ( ) [EOL] for code , info in sorted ( I18NTool . SUPPORTED_LANGUAGES . items ( ) ) : [EOL] translators = set ( [ ] ) [EOL] paths = [ app_template . format ( code ) , desktop_template . format ( info [ [string] ] ) , ] [EOL] for path in paths : [EOL] try : [EOL] commit_range = [string] [EOL] if last_sync and not args . all : [EOL] commit_range = [string] . format ( last_sync , commit_range ) [EOL] t = self . translators ( args , path , commit_range ) [EOL] translators . update ( t ) [EOL] except Exception as e : [EOL] print ( [string] . format ( path , e ) , file = sys . stderr ) [EOL] print ( [string] . format ( code , info [ [string] ] , [string] . join ( sorted ( translators ) ) ) ) [EOL] [EOL] def get_args ( self ) : [EOL] parser = argparse . ArgumentParser ( prog = __file__ , description = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] ) [EOL] subps = parser . add_subparsers ( ) [EOL] [EOL] self . set_translate_messages_parser ( subps ) [EOL] self . set_translate_desktop_parser ( subps ) [EOL] self . set_update_docs_parser ( subps ) [EOL] self . set_update_from_weblate_parser ( subps ) [EOL] self . set_list_translators_parser ( subps ) [EOL] self . set_list_locales_parser ( subps ) [EOL] [EOL] return parser [EOL] [EOL] def setup_verbosity ( self , args ) : [EOL] if args . verbose : [EOL] logging . getLogger ( [string] ) . setLevel ( logging . INFO ) [EOL] log . setLevel ( logging . DEBUG ) [EOL] else : [EOL] log . setLevel ( logging . INFO ) [EOL] [EOL] def main ( self , argv ) : [EOL] try : [EOL] args = self . get_args ( ) . parse_args ( argv ) [EOL] self . setup_verbosity ( args ) [EOL] return args . func ( args ) [EOL] except KeyboardInterrupt : [EOL] return signal . SIGINT [EOL] [EOL] [EOL] if __name__ == [string] : [comment] [EOL] sys . exit ( I18NTool ( ) . main ( sys . argv [ [number] : ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $logging.Logger$ 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 $typing.Pattern[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $builtins.str$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 0 0 $argparse._SubParsersAction$ 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Union , Any [EOL] import builtins [EOL] import flask [EOL] import sdconfig [EOL] import typing [EOL] import werkzeug [EOL] from typing import Union [EOL] [EOL] import werkzeug [EOL] from flask import ( Blueprint , render_template , request , g , redirect , url_for , flash , session ) [EOL] from flask_babel import gettext [EOL] [EOL] from db import db [EOL] from journalist_app . utils import ( make_password , set_diceware_password , set_name , validate_user , validate_hotp_secret ) [EOL] from sdconfig import SDConfig [EOL] [EOL] [EOL] def make_blueprint ( config ) : [EOL] view = Blueprint ( [string] , __name__ ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def edit ( ) : [EOL] password = make_password ( config ) [EOL] return render_template ( [string] , password = password ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def change_name ( ) : [EOL] first_name = request . form . get ( [string] ) [EOL] last_name = request . form . get ( [string] ) [EOL] set_name ( g . user , first_name , last_name ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def new_password ( ) : [EOL] user = g . user [EOL] current_password = request . form . get ( [string] ) [EOL] token = request . form . get ( [string] ) [EOL] error_message = gettext ( [string] ) [EOL] [comment] [EOL] if validate_user ( user . username , current_password , token , error_message ) : [EOL] password = request . form . get ( [string] ) [EOL] set_diceware_password ( user , password ) [EOL] session . pop ( [string] , None ) [EOL] session . pop ( [string] , None ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) def new_two_factor ( ) : [EOL] if request . method == [string] : [EOL] token = request . form [ [string] ] [EOL] if g . user . verify_token ( token ) : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] [EOL] return render_template ( [string] , user = g . user ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) def reset_two_factor_totp ( ) : [EOL] g . user . is_totp = True [EOL] g . user . regenerate_totp_shared_secret ( ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) def reset_two_factor_hotp ( ) : [EOL] otp_secret = request . form . get ( [string] , None ) [EOL] if otp_secret : [EOL] if not validate_hotp_secret ( g . user , otp_secret ) : [EOL] return render_template ( [string] ) [EOL] g . user . set_hotp_secret ( otp_secret ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] return render_template ( [string] ) [EOL] [EOL] return view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $werkzeug.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $werkzeug.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,werkzeug.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $werkzeug.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,werkzeug.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] import os [EOL] [EOL] from flask import ( Blueprint , render_template , request , url_for , redirect , g , current_app , flash , abort ) [EOL] from flask_babel import gettext [EOL] from sqlalchemy . exc import IntegrityError [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from db import db [EOL] from models import ( InstanceConfig , Journalist , InvalidUsernameException , FirstOrLastNameError , PasswordError ) [EOL] from journalist_app . decorators import admin_required [EOL] from journalist_app . utils import ( make_password , commit_account_changes , set_diceware_password , validate_hotp_secret , revoke_token ) [EOL] from journalist_app . forms import LogoForm , NewUserForm , SubmissionPreferencesForm [EOL] [EOL] [EOL] def make_blueprint ( config ) : [EOL] view = Blueprint ( [string] , __name__ ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) @ admin_required def index ( ) : [EOL] users = Journalist . query . all ( ) [EOL] return render_template ( [string] , users = users ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) @ admin_required def manage_config ( ) : [EOL] [comment] [EOL] submission_preferences_form = SubmissionPreferencesForm ( prevent_document_uploads = not current_app . instance_config . allow_document_uploads ) [EOL] logo_form = LogoForm ( ) [EOL] if logo_form . validate_on_submit ( ) : [EOL] f = logo_form . logo . data [EOL] custom_logo_filepath = os . path . join ( current_app . static_folder , [string] , [string] ) [EOL] try : [EOL] f . save ( custom_logo_filepath ) [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] except Exception : [EOL] flash ( [string] [string] , [string] ) [EOL] finally : [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] for field , errors in list ( logo_form . errors . items ( ) ) : [EOL] for error in errors : [EOL] flash ( error , [string] ) [EOL] return render_template ( [string] , submission_preferences_form = submission_preferences_form , logo_form = logo_form ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) @ admin_required def update_submission_preferences ( ) : [EOL] form = SubmissionPreferencesForm ( ) [EOL] if form . validate_on_submit ( ) : [EOL] [comment] [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] value = not bool ( request . form . get ( [string] ) ) [EOL] InstanceConfig . set ( [string] , value ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) @ admin_required def add_user ( ) : [EOL] form = NewUserForm ( ) [EOL] if form . validate_on_submit ( ) : [EOL] form_valid = True [EOL] username = request . form [ [string] ] [EOL] first_name = request . form [ [string] ] [EOL] last_name = request . form [ [string] ] [EOL] password = request . form [ [string] ] [EOL] is_admin = bool ( request . form . get ( [string] ) ) [EOL] [EOL] try : [EOL] otp_secret = None [EOL] if request . form . get ( [string] , False ) : [EOL] otp_secret = request . form . get ( [string] , [string] ) [EOL] new_user = Journalist ( username = username , password = password , first_name = first_name , last_name = last_name , is_admin = is_admin , otp_secret = otp_secret ) [EOL] db . session . add ( new_user ) [EOL] db . session . commit ( ) [EOL] except PasswordError : [EOL] flash ( gettext ( [string] [string] ) , [string] ) [EOL] form_valid = False [EOL] except InvalidUsernameException as e : [EOL] form_valid = False [EOL] flash ( [string] + str ( e ) , [string] ) [EOL] except IntegrityError as e : [EOL] db . session . rollback ( ) [EOL] form_valid = False [EOL] if [string] in str ( e ) : [EOL] flash ( gettext ( [string] . format ( user = username ) ) , [string] ) [EOL] else : [EOL] flash ( gettext ( [string] [string] [string] ) , [string] ) [EOL] current_app . logger . error ( [string] [string] . format ( username , e ) ) [EOL] [EOL] if form_valid : [EOL] return redirect ( url_for ( [string] , uid = new_user . id ) ) [EOL] [EOL] return render_template ( [string] , password = make_password ( config ) , form = form ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) @ admin_required def new_user_two_factor ( ) : [EOL] user = Journalist . query . get ( request . args [ [string] ] ) [EOL] [EOL] if request . method == [string] : [EOL] token = request . form [ [string] ] [EOL] if user . verify_token ( token ) : [EOL] flash ( gettext ( [string] [string] ) . format ( user = user . username ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] [EOL] return render_template ( [string] , user = user ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) @ admin_required def reset_two_factor_totp ( ) : [EOL] uid = request . form [ [string] ] [EOL] user = Journalist . query . get ( uid ) [EOL] user . is_totp = True [EOL] user . regenerate_totp_shared_secret ( ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] , uid = uid ) ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) @ admin_required def reset_two_factor_hotp ( ) : [EOL] uid = request . form [ [string] ] [EOL] otp_secret = request . form . get ( [string] , None ) [EOL] if otp_secret : [EOL] user = Journalist . query . get ( uid ) [EOL] if not validate_hotp_secret ( user , otp_secret ) : [EOL] return render_template ( [string] , uid = uid ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] , uid = uid ) ) [EOL] else : [EOL] return render_template ( [string] , uid = uid ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) @ admin_required def edit_user ( user_id ) : [EOL] user = Journalist . query . get ( user_id ) [EOL] [EOL] if request . method == [string] : [EOL] if request . form . get ( [string] , None ) : [EOL] new_username = request . form [ [string] ] [EOL] [EOL] try : [EOL] Journalist . check_username_acceptable ( new_username ) [EOL] except InvalidUsernameException as e : [EOL] flash ( [string] + str ( e ) , [string] ) [EOL] return redirect ( url_for ( [string] , user_id = user_id ) ) [EOL] [EOL] if new_username == user . username : [EOL] pass [EOL] elif Journalist . query . filter_by ( username = new_username ) . one_or_none ( ) : [EOL] flash ( gettext ( [string] ) . format ( user = new_username ) , [string] ) [EOL] return redirect ( url_for ( [string] , user_id = user_id ) ) [EOL] else : [EOL] user . username = new_username [EOL] [EOL] try : [EOL] first_name = request . form [ [string] ] [EOL] Journalist . check_name_acceptable ( first_name ) [EOL] user . first_name = first_name [EOL] except FirstOrLastNameError as e : [EOL] flash ( gettext ( [string] . format ( e ) ) , [string] ) [EOL] return redirect ( url_for ( [string] , user_id = user_id ) ) [EOL] [EOL] try : [EOL] last_name = request . form [ [string] ] [EOL] Journalist . check_name_acceptable ( last_name ) [EOL] user . last_name = last_name [EOL] except FirstOrLastNameError as e : [EOL] flash ( gettext ( [string] . format ( e ) ) , [string] ) [EOL] return redirect ( url_for ( [string] , user_id = user_id ) ) [EOL] [EOL] user . is_admin = bool ( request . form . get ( [string] ) ) [EOL] [EOL] commit_account_changes ( user ) [EOL] [EOL] password = make_password ( config ) [EOL] return render_template ( [string] , user = user , password = password ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ admin_required def delete_user ( user_id ) : [EOL] user = Journalist . query . get ( user_id ) [EOL] if user_id == g . user . id : [EOL] [comment] [EOL] [comment] [EOL] current_app . logger . error ( [string] . format ( g . user . username ) ) [EOL] abort ( [number] ) [EOL] elif user : [EOL] db . session . delete ( user ) [EOL] db . session . commit ( ) [EOL] flash ( gettext ( [string] ) . format ( user = user . username ) , [string] ) [EOL] else : [EOL] current_app . logger . error ( [string] . format ( g . user . username , user_id ) ) [EOL] abort ( [number] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ admin_required def new_password ( user_id ) : [EOL] try : [EOL] user = Journalist . query . get ( user_id ) [EOL] except NoResultFound : [EOL] abort ( [number] ) [EOL] [EOL] password = request . form . get ( [string] ) [EOL] if set_diceware_password ( user , password ) is not False : [EOL] if user . last_token is not None : [EOL] revoke_token ( user , user . last_token ) [EOL] user . session_nonce += [number] [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] , user_id = user_id ) ) [EOL] [EOL] @ view . route ( [string] ) @ admin_required def ossec_test ( ) : [EOL] current_app . logger . error ( [string] ) [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return view [EOL]	
[comment] [EOL] [EOL] from typing import Type , Any [EOL] import typing [EOL] import securedrop [EOL] from flask_babel import lazy_gettext as gettext [EOL] from flask_wtf import FlaskForm [EOL] from flask_wtf . file import FileField , FileAllowed , FileRequired [EOL] from wtforms import ( TextAreaField , StringField , BooleanField , HiddenField , ValidationError ) [EOL] from wtforms . validators import InputRequired , Optional [EOL] [EOL] from models import Journalist [EOL] [EOL] [EOL] def otp_secret_validation ( form , field ) : [EOL] strip_whitespace = field . data . replace ( [string] , [string] ) [EOL] if len ( strip_whitespace ) != [number] : [EOL] raise ValidationError ( gettext ( [string] [string] . format ( num_chars = len ( strip_whitespace ) ) ) ) [EOL] [EOL] [EOL] def minimum_length_validation ( form , field ) : [EOL] if len ( field . data ) < Journalist . MIN_USERNAME_LEN : [EOL] raise ValidationError ( gettext ( [string] [string] . format ( min_chars = Journalist . MIN_USERNAME_LEN ) ) ) [EOL] [EOL] [EOL] def name_length_validation ( form , field ) : [EOL] if len ( field . data ) > Journalist . MAX_NAME_LEN : [EOL] raise ValidationError ( gettext ( [string] . format ( max_chars = Journalist . MAX_NAME_LEN ) ) ) [EOL] [EOL] [EOL] def check_invalid_usernames ( form , field ) : [EOL] if field . data in Journalist . INVALID_USERNAMES : [EOL] raise ValidationError ( gettext ( [string] ) ) [EOL] [EOL] [EOL] class NewUserForm ( FlaskForm ) : [EOL] username = StringField ( [string] , validators = [ InputRequired ( message = gettext ( [string] ) ) , minimum_length_validation , check_invalid_usernames ] ) [EOL] first_name = StringField ( [string] , validators = [ name_length_validation , Optional ( ) ] ) [EOL] last_name = StringField ( [string] , validators = [ name_length_validation , Optional ( ) ] ) [EOL] password = HiddenField ( [string] ) [EOL] is_admin = BooleanField ( [string] ) [EOL] is_hotp = BooleanField ( [string] ) [EOL] otp_secret = StringField ( [string] , validators = [ otp_secret_validation , Optional ( ) ] ) [EOL] [EOL] [EOL] class ReplyForm ( FlaskForm ) : [EOL] message = TextAreaField ( [string] , id = [string] , validators = [ InputRequired ( message = gettext ( [string] ) ) , ] , ) [EOL] [EOL] [EOL] class SubmissionPreferencesForm ( FlaskForm ) : [EOL] prevent_document_uploads = BooleanField ( [string] ) [EOL] [EOL] [EOL] class LogoForm ( FlaskForm ) : [EOL] logo = FileField ( validators = [ FileRequired ( message = gettext ( [string] ) ) , FileAllowed ( [ [string] ] , message = gettext ( [string] ) ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.NewUserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.ReplyForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.ReplyForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.SubmissionPreferencesForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.journalist_app.forms.LogoForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import ( Blueprint , redirect , url_for , render_template , flash , request , abort , send_file , current_app ) [EOL] from flask_babel import gettext [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from db import db [EOL] from models import Submission [EOL] from journalist_app . forms import ReplyForm [EOL] from journalist_app . utils import ( make_star_true , make_star_false , get_source , delete_collection , col_download_unread , col_download_all , col_star , col_un_star , col_delete ) [EOL] [EOL] [EOL] def make_blueprint ( config ) : [EOL] view = Blueprint ( [string] , __name__ ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def add_star ( filesystem_id ) : [EOL] make_star_true ( filesystem_id ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def remove_star ( filesystem_id ) : [EOL] make_star_false ( filesystem_id ) [EOL] db . session . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] ) def col ( filesystem_id ) : [EOL] form = ReplyForm ( ) [EOL] source = get_source ( filesystem_id ) [EOL] source . has_key = current_app . crypto_util . get_fingerprint ( filesystem_id ) [EOL] return render_template ( [string] , filesystem_id = filesystem_id , source = source , form = form ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def delete_single ( filesystem_id ) : [EOL] [docstring] [EOL] source = get_source ( filesystem_id ) [EOL] try : [EOL] delete_collection ( filesystem_id ) [EOL] except ValueError as e : [EOL] current_app . logger . error ( [string] , e ) [EOL] abort ( [number] ) [EOL] [EOL] flash ( gettext ( [string] ) . format ( source_name = source . journalist_designation ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) def process ( ) : [EOL] actions = { [string] : col_download_unread , [string] : col_download_all , [string] : col_star , [string] : col_un_star , [string] : col_delete } [EOL] if [string] not in request . form : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] cols_selected = request . form . getlist ( [string] ) [EOL] action = request . form [ [string] ] [EOL] [EOL] if action not in actions : [EOL] return abort ( [number] ) [EOL] [EOL] method = actions [ action ] [EOL] return method ( cols_selected ) [EOL] [EOL] @ view . route ( [string] ) def download_single_file ( filesystem_id , fn ) : [EOL] [docstring] [EOL] if [string] in fn or fn . startswith ( [string] ) : [EOL] abort ( [number] ) [EOL] [EOL] [comment] [EOL] if not fn . endswith ( [string] ) : [EOL] try : [EOL] Submission . query . filter ( Submission . filename == fn ) . one ( ) . downloaded = True [EOL] db . session . commit ( ) [EOL] except NoResultFound as e : [EOL] current_app . logger . error ( [string] + fn + [string] % ( e , ) ) [EOL] [EOL] return send_file ( current_app . storage . path ( filesystem_id , fn ) , mimetype = [string] ) [EOL] [EOL] return view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from contextlib import contextmanager [EOL] [EOL] import journalist_app [EOL] from sdconfig import config [EOL] [EOL] [EOL] @ contextmanager def app_context ( ) : [EOL] with journalist_app . create_app ( config ) . app_context ( ) : [EOL] yield [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import redirect , url_for , request [EOL] from functools import wraps [EOL] [EOL] from source_app . utils import logged_in [EOL] [EOL] [EOL] def login_required ( f ) : [EOL] @ wraps ( f ) def decorated_function ( * args , ** kwargs ) : [EOL] if not logged_in ( ) : [EOL] return redirect ( url_for ( [string] ) ) [EOL] return f ( * args , ** kwargs ) [EOL] return decorated_function [EOL] [EOL] [EOL] def ignore_static ( f ) : [EOL] [docstring] [EOL] @ wraps ( f ) def decorated_function ( * args , ** kwargs ) : [EOL] if request . path . startswith ( [string] ) : [EOL] return [comment] [EOL] return f ( * args , ** kwargs ) [EOL] return decorated_function [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import flask [EOL] import operator [EOL] import os [EOL] import io [EOL] [EOL] from base64 import urlsafe_b64encode [EOL] from datetime import datetime [EOL] from flask import ( Blueprint , render_template , flash , redirect , url_for , g , session , current_app , request , Markup , abort ) [EOL] from flask_babel import gettext [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] import store [EOL] [EOL] from db import db [EOL] from models import Source , Submission , Reply , get_one_or_else [EOL] from source_app . decorators import login_required [EOL] from source_app . utils import ( logged_in , generate_unique_codename , async_genkey , normalize_timestamps , valid_codename , get_entropy_estimate ) [EOL] from source_app . forms import LoginForm , SubmissionForm [EOL] [EOL] [EOL] def make_blueprint ( config ) : [EOL] view = Blueprint ( [string] , __name__ ) [EOL] [EOL] @ view . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) def generate ( ) : [EOL] if logged_in ( ) : [EOL] flash ( gettext ( [string] [string] [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] codename = generate_unique_codename ( config ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tab_id = urlsafe_b64encode ( os . urandom ( [number] ) ) . decode ( ) [EOL] codenames = session . get ( [string] , { } ) [EOL] codenames [ tab_id ] = codename [EOL] session [ [string] ] = codenames [EOL] [EOL] session [ [string] ] = True [EOL] return render_template ( [string] , codename = codename , tab_id = tab_id ) [EOL] [EOL] @ view . route ( [string] ) def select_logo ( ) : [EOL] if os . path . exists ( os . path . join ( current_app . static_folder , [string] , [string] ) ) : [EOL] return redirect ( url_for ( [string] , filename = [string] ) ) [EOL] else : [EOL] return redirect ( url_for ( [string] , filename = [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = [ [string] ] ) def create ( ) : [EOL] if session . get ( [string] , False ) : [EOL] flash ( gettext ( [string] + [string] ) , [string] ) [EOL] else : [EOL] tab_id = request . form [ [string] ] [EOL] codename = session [ [string] ] [ tab_id ] [EOL] session [ [string] ] = codename [EOL] [EOL] del session [ [string] ] [EOL] [EOL] filesystem_id = current_app . crypto_util . hash_codename ( codename ) [EOL] try : [EOL] source = Source ( filesystem_id , current_app . crypto_util . display_id ( ) ) [EOL] except ValueError as e : [EOL] current_app . logger . error ( e ) [EOL] flash ( gettext ( [string] [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] db . session . add ( source ) [EOL] try : [EOL] db . session . commit ( ) [EOL] except IntegrityError as e : [EOL] db . session . rollback ( ) [EOL] current_app . logger . error ( [string] % ( e , ) ) [EOL] [EOL] [comment] [EOL] del session [ [string] ] [EOL] [EOL] [comment] [EOL] try : [EOL] del session [ [string] ] [EOL] except KeyError : [EOL] pass [EOL] [EOL] abort ( [number] ) [EOL] else : [EOL] os . mkdir ( current_app . storage . path ( filesystem_id ) ) [EOL] [EOL] session [ [string] ] = True [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ login_required def lookup ( ) : [EOL] replies = [ ] [EOL] source_inbox = Reply . query . filter ( Reply . source_id == g . source . id ) . filter ( Reply . deleted_by_source == False ) . all ( ) [comment] [EOL] [EOL] for reply in source_inbox : [EOL] reply_path = current_app . storage . path ( g . filesystem_id , reply . filename , ) [EOL] try : [EOL] with io . open ( reply_path , [string] ) as f : [EOL] contents = f . read ( ) [EOL] reply_obj = current_app . crypto_util . decrypt ( g . codename , contents ) [EOL] reply . decrypted = reply_obj [EOL] except UnicodeDecodeError : [EOL] current_app . logger . error ( [string] % reply . filename ) [EOL] except FileNotFoundError : [EOL] current_app . logger . error ( [string] % reply . filename ) [EOL] else : [EOL] reply . date = datetime . utcfromtimestamp ( os . stat ( reply_path ) . st_mtime ) [EOL] replies . append ( reply ) [EOL] [EOL] [comment] [EOL] replies . sort ( key = operator . attrgetter ( [string] ) , reverse = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not current_app . crypto_util . get_fingerprint ( g . filesystem_id ) and g . source . flagged : [EOL] db_uri = current_app . config [ [string] ] [EOL] async_genkey ( current_app . crypto_util , db_uri , g . filesystem_id , g . codename ) [EOL] [EOL] return render_template ( [string] , allow_document_uploads = current_app . instance_config . allow_document_uploads , codename = g . codename , replies = replies , flagged = g . source . flagged , new_user = session . get ( [string] , None ) , haskey = current_app . crypto_util . get_fingerprint ( g . filesystem_id ) , form = SubmissionForm ( ) , ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ login_required def submit ( ) : [EOL] allow_document_uploads = current_app . instance_config . allow_document_uploads [EOL] form = SubmissionForm ( ) [EOL] if not form . validate ( ) : [EOL] for field , errors in form . errors . items ( ) : [EOL] for error in errors : [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] msg = request . form [ [string] ] [EOL] fh = None [EOL] if allow_document_uploads and [string] in request . files : [EOL] fh = request . files [ [string] ] [EOL] [EOL] [comment] [EOL] if not ( msg or fh ) : [EOL] if allow_document_uploads : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] else : [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] fnames = [ ] [EOL] journalist_filename = g . source . journalist_filename [EOL] first_submission = g . source . interaction_count == [number] [EOL] [EOL] if msg : [EOL] g . source . interaction_count += [number] [EOL] fnames . append ( current_app . storage . save_message_submission ( g . filesystem_id , g . source . interaction_count , journalist_filename , msg ) ) [EOL] if fh : [EOL] g . source . interaction_count += [number] [EOL] fnames . append ( current_app . storage . save_file_submission ( g . filesystem_id , g . source . interaction_count , journalist_filename , fh . filename , fh . stream ) ) [EOL] [EOL] if first_submission : [EOL] flash_message = render_template ( [string] ) [EOL] flash ( Markup ( flash_message ) , [string] ) [EOL] [EOL] else : [EOL] if msg and not fh : [EOL] html_contents = gettext ( [string] ) [EOL] elif fh and not msg : [EOL] html_contents = gettext ( [string] ) [EOL] else : [EOL] html_contents = gettext ( [string] [string] ) [EOL] [EOL] flash_message = render_template ( [string] , html_contents = html_contents ) [EOL] flash ( Markup ( flash_message ) , [string] ) [EOL] [EOL] new_submissions = [ ] [EOL] for fname in fnames : [EOL] submission = Submission ( g . source , fname ) [EOL] db . session . add ( submission ) [EOL] new_submissions . append ( submission ) [EOL] [EOL] if g . source . pending : [EOL] g . source . pending = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] entropy_avail = get_entropy_estimate ( ) [EOL] if entropy_avail >= [number] : [EOL] db_uri = current_app . config [ [string] ] [EOL] [EOL] async_genkey ( current_app . crypto_util , db_uri , g . filesystem_id , g . codename ) [EOL] current_app . logger . info ( [string] . format ( entropy_avail ) ) [EOL] else : [EOL] current_app . logger . warn ( [string] . format ( entropy_avail ) ) [EOL] [EOL] g . source . last_updated = datetime . utcnow ( ) [EOL] db . session . commit ( ) [EOL] [EOL] for sub in new_submissions : [EOL] store . async_add_checksum_for_file ( sub ) [EOL] [EOL] normalize_timestamps ( g . filesystem_id ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ login_required def delete ( ) : [EOL] [docstring] [EOL] [EOL] query = Reply . query . filter_by ( filename = request . form [ [string] ] , source_id = g . source . id ) [EOL] reply = get_one_or_else ( query , current_app . logger , abort ) [EOL] reply . deleted_by_source = True [EOL] db . session . add ( reply ) [EOL] db . session . commit ( ) [EOL] [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , ) ) @ login_required def batch_delete ( ) : [EOL] replies = Reply . query . filter ( Reply . source_id == g . source . id ) . filter ( Reply . deleted_by_source == False ) . all ( ) [comment] [EOL] if len ( replies ) == [number] : [EOL] current_app . logger . error ( [string] [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] for reply in replies : [EOL] reply . deleted_by_source = True [EOL] db . session . add ( reply ) [EOL] db . session . commit ( ) [EOL] [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ view . route ( [string] , methods = ( [string] , [string] ) ) def login ( ) : [EOL] form = LoginForm ( ) [EOL] if form . validate_on_submit ( ) : [EOL] codename = request . form [ [string] ] . strip ( ) [EOL] if valid_codename ( codename ) : [EOL] session . update ( codename = codename , logged_in = True ) [EOL] return redirect ( url_for ( [string] , from_login = [string] ) ) [EOL] else : [EOL] current_app . logger . info ( [string] ) [EOL] flash ( gettext ( [string] ) , [string] ) [EOL] return render_template ( [string] , form = form ) [EOL] [EOL] @ view . route ( [string] ) def logout ( ) : [EOL] [docstring] [EOL] if logged_in ( ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] user_locale = g . locale [EOL] session . clear ( ) [EOL] session [ [string] ] = user_locale [EOL] [EOL] return render_template ( [string] ) [EOL] else : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return view [EOL]	
from typing import Type [EOL] import typing [EOL] import securedrop [EOL] from flask import current_app [EOL] from flask_babel import lazy_gettext as gettext [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import FileField , PasswordField , TextAreaField [EOL] from wtforms . validators import InputRequired , Regexp , Length , ValidationError [EOL] [EOL] from models import Source , Submission [EOL] [EOL] [EOL] class LoginForm ( FlaskForm ) : [EOL] codename = PasswordField ( [string] , validators = [ InputRequired ( message = gettext ( [string] ) ) , Length ( [number] , Source . MAX_CODENAME_LEN , message = gettext ( [string] [string] . format ( max_codename_len = Source . MAX_CODENAME_LEN ) ) ) , Regexp ( [string] , message = gettext ( [string] ) ) ] ) [EOL] [EOL] [EOL] class SubmissionForm ( FlaskForm ) : [EOL] msg = TextAreaField ( [string] , render_kw = { [string] : gettext ( [string] ) } ) [EOL] fh = FileField ( [string] ) [EOL] [EOL] def validate_msg ( self , field ) : [EOL] if len ( field . data ) > Submission . MAX_MESSAGE_LEN : [EOL] message = gettext ( [string] ) [EOL] if current_app . instance_config . allow_document_uploads : [EOL] message = [string] . format ( message , gettext ( [string] ) ) [EOL] raise ValidationError ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.source_app.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.source_app.forms.SubmissionForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[securedrop.source_app.forms.SubmissionForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] from os . path import abspath , dirname , join , realpath [EOL] import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sys . path . append ( abspath ( join ( dirname ( realpath ( __file__ ) ) , [string] , [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Optional , Union , Any [EOL] import typing [EOL] import io [EOL] import zipfile [EOL] import mock [EOL] import gzip [EOL] import os [EOL] import random [EOL] import re [EOL] import zipfile [EOL] from base64 import b32encode [EOL] from binascii import unhexlify [EOL] from distutils . version import StrictVersion [EOL] from io import BytesIO [EOL] [EOL] import mock [EOL] import pytest [EOL] from bs4 import BeautifulSoup [EOL] from flask import current_app , escape , g , session [EOL] from pyotp import HOTP , TOTP [EOL] [EOL] import journalist_app as journalist_app_module [EOL] from . import utils [EOL] from . utils . instrument import InstrumentedApp [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] [EOL] [EOL] [comment] [EOL] random . seed ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True , scope = [string] ) def patch_get_entropy_estimate ( ) : [EOL] mock_get_entropy_estimate = mock . patch ( [string] , return_value = [number] ) . start ( ) [EOL] [EOL] yield [EOL] [EOL] mock_get_entropy_estimate . stop ( ) [EOL] [EOL] [EOL] def _login_user ( app , user_dict ) : [EOL] resp = app . post ( [string] , data = { [string] : user_dict [ [string] ] , [string] : user_dict [ [string] ] , [string] : TOTP ( user_dict [ [string] ] ) . now ( ) } , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] assert hasattr ( g , [string] ) [comment] [EOL] [EOL] [EOL] def test_submit_message ( source_app , journalist_app , test_journo ) : [EOL] [docstring] [EOL] test_msg = [string] [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } , follow_redirects = True ) [EOL] filesystem_id = g . filesystem_id [EOL] [comment] [EOL] resp = app . post ( [string] , data = dict ( msg = test_msg , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] app . get ( [string] ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] col = soup . select ( [string] ) [ [number] ] [EOL] unread_span = col . select ( [string] ) [ [number] ] [EOL] assert [string] in unread_span . get_text ( ) [EOL] [EOL] col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] submission_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] assert [string] in submission_url [EOL] span = soup . select ( [string] ) [ [number] ] [EOL] assert re . compile ( [string] ) . match ( span [ [string] ] ) [EOL] [EOL] resp = app . get ( submission_url ) [EOL] assert resp . status_code == [number] [EOL] decrypted_data = journalist_app . crypto_util . gpg . decrypt ( resp . data ) [EOL] assert decrypted_data . ok [EOL] assert decrypted_data . data . decode ( [string] ) == test_msg [EOL] [EOL] [comment] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] doc_name = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . post ( [string] , data = dict ( action = [string] , filesystem_id = filesystem_id , doc_names_selected = doc_name ) ) [EOL] [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] assert [string] in text [EOL] [EOL] [comment] [EOL] doc_name = soup . select [EOL] doc_name = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . post ( [string] , data = dict ( action = [string] , filesystem_id = filesystem_id , doc_names_selected = doc_name , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] assert [string] in text [EOL] [EOL] [comment] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert not ( os . path . exists ( current_app . storage . path ( filesystem_id , doc_name ) ) ) [EOL] utils . asynchronous . wait_for_assertion ( assertion ) [EOL] [EOL] [EOL] def test_submit_file ( source_app , journalist_app , test_journo ) : [EOL] [docstring] [EOL] test_file_contents = [string] [EOL] test_filename = [string] [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } , follow_redirects = True ) [EOL] filesystem_id = g . filesystem_id [EOL] [comment] [EOL] resp = app . post ( [string] , data = dict ( msg = [string] , fh = ( BytesIO ( test_file_contents ) , test_filename ) , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] app . get ( [string] ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] col = soup . select ( [string] ) [ [number] ] [EOL] unread_span = col . select ( [string] ) [ [number] ] [EOL] assert [string] in unread_span . get_text ( ) [EOL] [EOL] col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] submission_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] assert [string] in submission_url [EOL] span = soup . select ( [string] ) [ [number] ] [EOL] assert re . compile ( [string] ) . match ( span [ [string] ] ) [EOL] [EOL] resp = app . get ( submission_url ) [EOL] assert resp . status_code == [number] [EOL] decrypted_data = journalist_app . crypto_util . gpg . decrypt ( resp . data ) [EOL] assert decrypted_data . ok [EOL] [EOL] sio = BytesIO ( decrypted_data . data ) [EOL] with gzip . GzipFile ( mode = [string] , fileobj = sio ) as gzip_file : [EOL] unzipped_decrypted_data = gzip_file . read ( ) [EOL] mtime = gzip_file . mtime [EOL] assert unzipped_decrypted_data == test_file_contents [EOL] [comment] [EOL] assert mtime == [number] [EOL] [EOL] [comment] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] doc_name = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . post ( [string] , data = dict ( action = [string] , filesystem_id = filesystem_id , doc_names_selected = doc_name ) ) [EOL] [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] soup = BeautifulSoup ( resp . data , [string] ) [EOL] [EOL] [comment] [EOL] doc_name = soup . select [EOL] doc_name = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . post ( [string] , data = dict ( action = [string] , filesystem_id = filesystem_id , doc_names_selected = doc_name , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] soup = BeautifulSoup ( resp . data , [string] ) [EOL] [EOL] [comment] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert not ( os . path . exists ( current_app . storage . path ( filesystem_id , doc_name ) ) ) [EOL] utils . asynchronous . wait_for_assertion ( assertion ) [EOL] [EOL] [EOL] def _helper_test_reply ( journalist_app , source_app , config , test_journo , test_reply , expected_success = True ) : [EOL] test_msg = [string] [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } , follow_redirects = True ) [EOL] codename = session [ [string] ] [EOL] filesystem_id = g . filesystem_id [EOL] [comment] [EOL] resp = app . post ( [string] , data = dict ( msg = test_msg , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] assert not g . source . flagged [EOL] app . get ( [string] ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] soup = BeautifulSoup ( resp . data , [string] ) [EOL] col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] [EOL] resp = app . get ( col_url ) [EOL] assert resp . status_code == [number] [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] resp = app . post ( [string] , data = dict ( codename = codename ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] assert not g . source . flagged [EOL] app . get ( [string] ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . post ( [string] , data = dict ( filesystem_id = filesystem_id ) ) [EOL] assert resp . status_code == [number] [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] resp = app . post ( [string] , data = dict ( codename = codename ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] app . get ( [string] ) [EOL] assert g . source . flagged [EOL] app . get ( [string] ) [EOL] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert current_app . crypto_util . get_fingerprint ( filesystem_id ) is not None [EOL] utils . asynchronous . wait_for_assertion ( assertion , [number] ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] for i in range ( [number] ) : [EOL] resp = app . post ( [string] , data = dict ( filesystem_id = filesystem_id , message = test_reply ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] if not expected_success : [EOL] pass [EOL] else : [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] resp = app . get ( col_url ) [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] filesystem_id = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] checkbox_values = [ soup . select ( [string] ) [ [number] ] [ [string] ] ] [EOL] resp = app . post ( [string] , data = dict ( filesystem_id = filesystem_id , action = [string] , doc_names_selected = checkbox_values ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] zf = zipfile . ZipFile ( BytesIO ( resp . data ) , [string] ) [EOL] data = zf . read ( zf . namelist ( ) [ [number] ] ) [EOL] _can_decrypt_with_key ( journalist_app , data ) [EOL] _can_decrypt_with_key ( journalist_app , data , codename ) [EOL] [EOL] [comment] [EOL] last_reply_number = len ( soup . select ( [string] ) ) - [number] [EOL] _helper_filenames_delete ( app , soup , last_reply_number ) [EOL] [EOL] with source_app . test_client ( ) as app : [EOL] resp = app . post ( [string] , data = dict ( codename = codename ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] resp = app . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] [EOL] if not expected_success : [EOL] [comment] [EOL] assert [string] not in text [EOL] else : [EOL] assert ( [string] in text ) [EOL] assert test_reply in text , text [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] msgid = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . post ( [string] , data = dict ( filesystem_id = filesystem_id , reply_filename = msgid ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] in text [EOL] [EOL] app . get ( [string] ) [EOL] [EOL] [EOL] def _helper_filenames_delete ( journalist_app , soup , i ) : [EOL] filesystem_id = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] checkbox_values = [ soup . select ( [string] ) [ i ] [ [string] ] ] [EOL] [EOL] [comment] [EOL] resp = journalist_app . post ( [string] , data = dict ( filesystem_id = filesystem_id , action = [string] , doc_names_selected = checkbox_values ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert ( ( [string] [string] ) in text ) [EOL] [EOL] [comment] [EOL] resp = journalist_app . post ( [string] , data = dict ( filesystem_id = filesystem_id , action = [string] , doc_names_selected = checkbox_values ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in resp . data . decode ( [string] ) [EOL] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert not any ( [ os . path . exists ( current_app . storage . path ( filesystem_id , doc_name ) ) for doc_name in checkbox_values ] ) [EOL] utils . asynchronous . wait_for_assertion ( assertion ) [EOL] [EOL] [EOL] def _can_decrypt_with_key ( journalist_app , msg , passphrase = None ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] using_gpg_2_1 = StrictVersion ( journalist_app . crypto_util . gpg . binary_version ) >= StrictVersion ( [string] ) [EOL] [EOL] if passphrase : [EOL] passphrase = journalist_app . crypto_util . hash_codename ( passphrase , salt = journalist_app . crypto_util . scrypt_gpg_pepper ) [EOL] elif using_gpg_2_1 : [EOL] passphrase = [string] [EOL] [EOL] decrypted_data = journalist_app . crypto_util . gpg . decrypt ( msg , passphrase = passphrase ) [EOL] assert decrypted_data . ok , [string] . format ( decrypted_data . stderr ) [EOL] [EOL] [EOL] def test_reply_normal ( journalist_app , source_app , test_journo , config ) : [EOL] [docstring] [EOL] journalist_app . crypto_util . gpg . _encoding = [string] [EOL] source_app . crypto_util . gpg . _encoding = [string] [EOL] _helper_test_reply ( journalist_app , source_app , config , test_journo , [string] , True ) [EOL] [EOL] [EOL] def test_unicode_reply_with_ansi_env ( journalist_app , source_app , test_journo , config ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] journalist_app . crypto_util . gpg . _encoding = [string] [EOL] source_app . crypto_util . gpg . _encoding = [string] [EOL] _helper_test_reply ( journalist_app , source_app , config , test_journo , [string] , True ) [EOL] [EOL] [EOL] def test_delete_collection ( mocker , source_app , journalist_app , test_journo ) : [EOL] [docstring] [EOL] async_genkey = mocker . patch ( [string] ) [EOL] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } ) [EOL] resp = app . post ( [string] , data = dict ( msg = [string] , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] [comment] [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] first_col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . get ( first_col_url ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [comment] [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] delete_form_inputs = soup . select ( [string] ) [ [number] ] ( [string] ) [EOL] filesystem_id = delete_form_inputs [ [number] ] [ [string] ] [EOL] col_name = delete_form_inputs [ [number] ] [ [string] ] [EOL] [EOL] resp = app . post ( [string] + filesystem_id , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] text = resp . data . decode ( [string] ) [EOL] assert escape ( [string] . format ( col_name ) ) in text [EOL] assert [string] in text [EOL] assert async_genkey . called [EOL] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert not os . path . exists ( current_app . storage . path ( filesystem_id ) ) [EOL] [EOL] utils . asynchronous . wait_for_assertion ( assertion ) [EOL] [EOL] [EOL] def test_delete_collections ( mocker , journalist_app , source_app , test_journo ) : [EOL] [docstring] [EOL] async_genkey = mocker . patch ( [string] ) [EOL] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] num_sources = [number] [EOL] for i in range ( num_sources ) : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } ) [EOL] app . post ( [string] , data = dict ( msg = [string] + str ( i ) + [string] , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] app . get ( [string] ) [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] [comment] [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] checkbox_values = [ checkbox [ [string] ] for checkbox in soup . select ( [string] ) ] [EOL] [EOL] resp = app . post ( [string] , data = dict ( action = [string] , cols_selected = checkbox_values ) , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] text = resp . data . decode ( [string] ) [EOL] assert [string] . format ( num_sources ) in text [EOL] assert async_genkey . called [EOL] [EOL] [comment] [EOL] journalist_app_module . utils . purge_deleted_sources ( ) [EOL] [EOL] [comment] [EOL] def assertion ( ) : [EOL] assert not ( any ( [ os . path . exists ( current_app . storage . path ( filesystem_id ) ) for filesystem_id in checkbox_values ] ) ) [EOL] [EOL] utils . asynchronous . wait_for_assertion ( assertion ) [EOL] [EOL] [EOL] def _helper_filenames_submit ( app ) : [EOL] app . post ( [string] , data = dict ( msg = [string] , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] app . post ( [string] , data = dict ( msg = [string] , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] app . post ( [string] , data = dict ( msg = [string] , fh = ( BytesIO ( [string] ) , [string] ) , ) , follow_redirects = True ) [EOL] [EOL] [EOL] def test_filenames ( source_app , journalist_app , test_journo ) : [EOL] [docstring] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } ) [EOL] _helper_filenames_submit ( app ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] first_col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . get ( first_col_url ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [comment] [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] submission_filename_re = [string] [EOL] for i , submission_link in enumerate ( soup . select ( [string] ) ) : [EOL] filename = str ( submission_link . contents [ [number] ] ) [EOL] assert re . match ( submission_filename_re . format ( i + [number] ) , filename ) [EOL] [EOL] [EOL] def test_filenames_delete ( journalist_app , source_app , test_journo ) : [EOL] [docstring] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] app . post ( [string] , data = { [string] : tab_id } ) [EOL] _helper_filenames_submit ( app ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] resp = app . get ( [string] ) [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] first_col_url = soup . select ( [string] ) [ [number] ] [ [string] ] [EOL] resp = app . get ( first_col_url ) [EOL] assert resp . status_code == [number] [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] _helper_filenames_delete ( app , soup , [number] ) [EOL] resp = app . get ( first_col_url ) [EOL] soup = BeautifulSoup ( resp . data . decode ( [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] submission_filename_re = [string] [EOL] filename = str ( soup . select ( [string] ) [ [number] ] . contents [ [number] ] ) [EOL] assert re . match ( submission_filename_re . format ( [number] ) , filename ) [EOL] filename = str ( soup . select ( [string] ) [ [number] ] . contents [ [number] ] ) [EOL] assert re . match ( submission_filename_re . format ( [number] ) , filename ) [EOL] filename = str ( soup . select ( [string] ) [ [number] ] . contents [ [number] ] ) [EOL] assert re . match ( submission_filename_re . format ( [number] ) , filename ) [EOL] [EOL] [EOL] def test_user_change_password ( journalist_app , test_journo ) : [EOL] [docstring] [EOL] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] [comment] [EOL] new_pw = [string] [EOL] assert new_pw != test_journo [ [string] ] [comment] [EOL] app . post ( [string] , data = dict ( password = new_pw , current_password = test_journo [ [string] ] , token = TOTP ( test_journo [ [string] ] ) . now ( ) ) ) [EOL] [comment] [EOL] app . get ( [string] ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] [comment] [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( [string] , data = dict ( username = test_journo [ [string] ] , password = new_pw , token = TOTP ( test_journo [ [string] ] ) . now ( ) ) ) [EOL] ins . assert_redirects ( resp , [string] ) [EOL] [EOL] [EOL] def test_login_after_regenerate_hotp ( journalist_app , test_journo ) : [EOL] [docstring] [EOL] [EOL] otp_secret = [string] [EOL] b32_otp_secret = b32encode ( unhexlify ( otp_secret ) ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_journo ) [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] resp = app . post ( [string] , data = dict ( otp_secret = otp_secret ) ) [EOL] [comment] [EOL] ins . assert_redirects ( resp , [string] ) [EOL] [EOL] resp = app . post ( [string] , data = dict ( token = HOTP ( b32_otp_secret ) . at ( [number] ) ) ) [EOL] [comment] [EOL] ins . assert_redirects ( resp , [string] ) [EOL] [EOL] [comment] [EOL] app . get ( [string] ) [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] with InstrumentedApp ( journalist_app ) as ins : [EOL] [comment] [EOL] resp = app . post ( [string] , data = dict ( username = test_journo [ [string] ] , password = test_journo [ [string] ] , token = HOTP ( b32_otp_secret ) . at ( [number] ) ) ) [EOL] ins . assert_redirects ( resp , [string] ) [EOL] [EOL] [EOL] def test_prevent_document_uploads ( source_app , journalist_app , test_admin ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_admin ) [EOL] form = journalist_app_module . forms . SubmissionPreferencesForm ( prevent_document_uploads = True ) [EOL] resp = app . post ( [string] , data = form . data , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] resp = app . post ( [string] , data = { [string] : tab_id } , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] assert [string] in text [EOL] assert len ( soup . select ( [string] ) ) == [number] [EOL] [EOL] [EOL] def test_no_prevent_document_uploads ( source_app , journalist_app , test_admin ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] with journalist_app . test_client ( ) as app : [EOL] _login_user ( app , test_admin ) [EOL] resp = app . post ( [string] , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [comment] [EOL] with source_app . test_client ( ) as app : [EOL] app . get ( [string] ) [EOL] tab_id = next ( iter ( session [ [string] ] . keys ( ) ) ) [EOL] resp = app . post ( [string] , data = { [string] : tab_id } , follow_redirects = True ) [EOL] assert resp . status_code == [number] [EOL] [EOL] text = resp . data . decode ( [string] ) [EOL] soup = BeautifulSoup ( text , [string] ) [EOL] assert [string] in text [EOL] assert len ( soup . select ( [string] ) ) == [number] [EOL]	
[comment] [EOL] [EOL] from qa_loader import QaLoader [EOL] [EOL] [EOL] def test_load_data ( journalist_app , config ) : [EOL] [comment] [EOL] QaLoader ( config ) . load ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import io [EOL] import os [EOL] [EOL] from source_app . utils import check_url_file [EOL] [EOL] [EOL] def test_check_url_file ( config ) : [EOL] [EOL] assert check_url_file ( [string] , [string] ) is None [EOL] [EOL] try : [EOL] def write_url_file ( path , content ) : [EOL] url_file = open ( path , [string] ) [EOL] url_file . write ( [string] . format ( content ) ) [EOL] [EOL] url_path = [string] [EOL] [EOL] onion_test_url = [string] [EOL] write_url_file ( url_path , onion_test_url ) [EOL] assert check_url_file ( url_path , [string] ) == onion_test_url [EOL] [EOL] onion_test_url = [string] [EOL] write_url_file ( url_path , onion_test_url ) [EOL] assert check_url_file ( url_path , [string] ) == onion_test_url [EOL] [EOL] write_url_file ( url_path , [string] ) [EOL] assert check_url_file ( url_path , [string] ) is None [EOL] finally : [EOL] if os . path . exists ( url_path ) : [EOL] os . unlink ( url_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Pattern , List , Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] import re [EOL] import subprocess [EOL] [EOL] from alembic . config import Config as AlembicConfig [EOL] from alembic . script import ScriptDirectory [EOL] from os import path [EOL] from sqlalchemy import text [EOL] [EOL] from db import db [EOL] from journalist_app import create_app [EOL] [EOL] MIGRATION_PATH = path . join ( path . dirname ( __file__ ) , [string] , [string] , [string] ) [EOL] [EOL] ALL_MIGRATIONS = [ x . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] for x in os . listdir ( MIGRATION_PATH ) if x . endswith ( [string] ) ] [EOL] [EOL] WHITESPACE_REGEX = re . compile ( [string] ) [EOL] [EOL] [EOL] def list_migrations ( cfg_path , head ) : [EOL] cfg = AlembicConfig ( cfg_path ) [EOL] script = ScriptDirectory . from_config ( cfg ) [EOL] migrations = [ x . revision for x in script . walk_revisions ( base = [string] , head = head ) ] [EOL] migrations . reverse ( ) [EOL] return migrations [EOL] [EOL] [EOL] def upgrade ( alembic_config , migration ) : [EOL] subprocess . check_call ( [ [string] , [string] , migration ] , cwd = path . dirname ( alembic_config ) ) [EOL] [EOL] [EOL] def downgrade ( alembic_config , migration ) : [EOL] subprocess . check_call ( [ [string] , [string] , migration ] , cwd = path . dirname ( alembic_config ) ) [EOL] [EOL] [EOL] def get_schema ( app ) : [EOL] with app . app_context ( ) : [EOL] result = list ( db . engine . execute ( text ( [string] ) ) ) [EOL] [EOL] return { ( x [ [number] ] , x [ [number] ] , x [ [number] ] ) : x [ [number] ] for x in result } [EOL] [EOL] [EOL] def assert_schemas_equal ( left , right ) : [EOL] for ( k , v ) in list ( left . items ( ) ) : [EOL] if k not in right : [EOL] raise AssertionError ( [string] . format ( k ) ) [EOL] if not ddl_equal ( v , right [ k ] ) : [EOL] raise AssertionError ( [string] . format ( k , v , right [ k ] ) ) [EOL] right . pop ( k ) [EOL] [EOL] if right : [EOL] raise AssertionError ( [string] . format ( list ( right . keys ( ) ) ) ) [EOL] [EOL] [EOL] def ddl_equal ( left , right ) : [EOL] [docstring] [EOL] [comment] [EOL] if left is None and right is None : [EOL] return True [EOL] [EOL] left = [ x for x in WHITESPACE_REGEX . split ( left ) if x ] [EOL] right = [ x for x in WHITESPACE_REGEX . split ( right ) if x ] [EOL] [EOL] [comment] [EOL] left = [ x . replace ( [string] , [string] ) . replace ( [string] , [string] ) for x in left ] [EOL] right = [ x . replace ( [string] , [string] ) . replace ( [string] , [string] ) for x in right ] [EOL] [EOL] return sorted ( left ) == sorted ( right ) [EOL] [EOL] [EOL] def test_alembic_head_matches_db_models ( journalist_app , alembic_config , config ) : [EOL] [docstring] [EOL] models_schema = get_schema ( journalist_app ) [EOL] [EOL] os . remove ( config . DATABASE_FILE ) [EOL] [EOL] [comment] [EOL] subprocess . check_call ( [ [string] , config . DATABASE_FILE , [string] ] ) [EOL] upgrade ( alembic_config , [string] ) [EOL] [EOL] [comment] [EOL] app = create_app ( config ) [EOL] alembic_schema = get_schema ( app ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] alembic_schema = { k : v for k , v in list ( alembic_schema . items ( ) ) if k [ [number] ] != [string] } [EOL] [EOL] assert_schemas_equal ( alembic_schema , models_schema ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ALL_MIGRATIONS ) def test_alembic_migration_upgrade ( alembic_config , config , migration ) : [EOL] [comment] [EOL] for mig in list_migrations ( alembic_config , migration ) : [EOL] upgrade ( alembic_config , mig ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ALL_MIGRATIONS ) def test_alembic_migration_downgrade ( alembic_config , config , migration ) : [EOL] [comment] [EOL] upgrade ( alembic_config , migration ) [EOL] [EOL] [comment] [EOL] migrations = list_migrations ( alembic_config , migration ) [EOL] migrations . reverse ( ) [EOL] [EOL] for mig in migrations : [EOL] downgrade ( alembic_config , mig ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ALL_MIGRATIONS ) def test_schema_unchanged_after_up_then_downgrade ( alembic_config , config , migration ) : [EOL] [comment] [EOL] app = create_app ( config ) [EOL] [EOL] migrations = list_migrations ( alembic_config , migration ) [EOL] [EOL] if len ( migrations ) > [number] : [EOL] target = migrations [ - [number] ] [EOL] upgrade ( alembic_config , target ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] original_schema = get_schema ( app ) [EOL] [EOL] upgrade ( alembic_config , [string] ) [EOL] downgrade ( alembic_config , [string] ) [EOL] [EOL] reverted_schema = get_schema ( app ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if len ( migrations ) == [number] : [EOL] reverted_schema = { k : v for k , v in list ( reverted_schema . items ( ) ) if k [ [number] ] != [string] } [EOL] [EOL] assert_schemas_equal ( reverted_schema , original_schema ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ALL_MIGRATIONS ) def test_upgrade_with_data ( alembic_config , config , migration ) : [EOL] migrations = list_migrations ( alembic_config , migration ) [EOL] if len ( migrations ) == [number] : [EOL] [comment] [EOL] return [EOL] [EOL] [comment] [EOL] last_migration = migrations [ - [number] ] [EOL] upgrade ( alembic_config , last_migration ) [EOL] [EOL] [comment] [EOL] mod_name = [string] . format ( migration ) [EOL] mod = __import__ ( mod_name , fromlist = [ [string] ] ) [EOL] [EOL] [comment] [EOL] upgrade_tester = mod . UpgradeTester ( config = config ) [EOL] upgrade_tester . load_data ( ) [EOL] [EOL] [comment] [EOL] upgrade ( alembic_config , migration ) [EOL] [EOL] [comment] [EOL] upgrade_tester . check_upgrade ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ALL_MIGRATIONS ) def test_downgrade_with_data ( alembic_config , config , migration ) : [EOL] [comment] [EOL] upgrade ( alembic_config , migration ) [EOL] [EOL] [comment] [EOL] mod_name = [string] . format ( migration ) [EOL] mod = __import__ ( mod_name , fromlist = [ [string] ] ) [EOL] [EOL] [comment] [EOL] downgrade_tester = mod . DowngradeTester ( config = config ) [EOL] downgrade_tester . load_data ( ) [EOL] [EOL] [comment] [EOL] downgrade ( alembic_config , [string] ) [EOL] [EOL] [comment] [EOL] downgrade_tester . check_downgrade ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import datetime [EOL] import os [EOL] from datetime import datetime [EOL] from datetime import timedelta [EOL] [EOL] from db import db [EOL] import i18n [EOL] import i18n_tool [EOL] import journalist_app [EOL] import source_app [EOL] import template_filters [EOL] from flask import session [EOL] from sh import pybabel [EOL] from . utils . env import TESTS_DIR [EOL] [EOL] os . environ [ [string] ] = [string] [comment] [EOL] [EOL] [EOL] def verify_rel_datetime_format ( app ) : [EOL] with app . test_client ( ) as c : [EOL] c . get ( [string] ) [EOL] assert session . get ( [string] ) is None [EOL] result = template_filters . rel_datetime_format ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] assert [string] == result [EOL] [EOL] result = template_filters . rel_datetime_format ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , fmt = [string] ) [EOL] assert [string] == result [EOL] [EOL] test_time = datetime . utcnow ( ) - timedelta ( hours = [number] ) [EOL] result = template_filters . rel_datetime_format ( test_time , relative = True ) [EOL] assert [string] == result [EOL] [EOL] c . get ( [string] ) [EOL] assert session . get ( [string] ) == [string] [EOL] result = template_filters . rel_datetime_format ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] assert [string] == result [EOL] [EOL] result = template_filters . rel_datetime_format ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) , fmt = [string] ) [EOL] assert [string] == result [EOL] [EOL] test_time = datetime . utcnow ( ) - timedelta ( hours = [number] ) [EOL] result = template_filters . rel_datetime_format ( test_time , relative = True ) [EOL] assert [string] in result [EOL] [EOL] [EOL] def verify_filesizeformat ( app ) : [EOL] with app . test_client ( ) as c : [EOL] c . get ( [string] ) [EOL] assert session . get ( [string] ) is None [EOL] assert [string] == template_filters . filesizeformat ( [number] ) [EOL] assert [string] == template_filters . filesizeformat ( [number] ) [EOL] value = [number] * [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] [EOL] c . get ( [string] ) [EOL] assert session . get ( [string] ) == [string] [EOL] assert [string] == template_filters . filesizeformat ( [number] ) [EOL] assert [string] == template_filters . filesizeformat ( [number] ) [EOL] value = [number] * [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] == template_filters . filesizeformat ( value ) [EOL] value *= [number] [EOL] assert [string] in template_filters . filesizeformat ( value ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_source_filters ( config ) : [EOL] do_test ( config , source_app . create_app ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_journalist_filters ( config ) : [EOL] do_test ( config , journalist_app . create_app ) [EOL] [EOL] [EOL] def do_test ( config , create_app ) : [EOL] config . SUPPORTED_LOCALES = [ [string] , [string] ] [EOL] config . TRANSLATION_DIRS = config . TEMP_DIR [EOL] i18n_tool . I18NTool ( ) . main ( [ [string] , [string] , [string] , os . path . join ( TESTS_DIR , [string] ) , [string] , config . TEMP_DIR , [string] , os . path . join ( TESTS_DIR , [string] ) , [string] , [string] , ] ) [EOL] [EOL] for l in ( [string] , [string] ) : [EOL] pot = os . path . join ( config . TEMP_DIR , [string] ) [EOL] pybabel ( [string] , [string] , pot , [string] , config . TEMP_DIR , [string] , l ) [EOL] [EOL] app = create_app ( config ) [EOL] with app . app_context ( ) : [EOL] db . create_all ( ) [EOL] [EOL] assert i18n . LOCALES == config . SUPPORTED_LOCALES [EOL] verify_filesizeformat ( app ) [EOL] verify_rel_datetime_format ( app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tempfile [EOL] import time [EOL] import json [EOL] [EOL] import pytest [EOL] from selenium . common . exceptions import NoSuchElementException [EOL] [EOL] [EOL] class SourceNavigationStepsMixin : [EOL] def _is_on_source_homepage ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _is_logged_in ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _is_on_lookup_page ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _is_on_generate_page ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _is_on_logout_page ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _source_visits_source_homepage ( self ) : [EOL] self . driver . get ( self . source_location ) [EOL] assert self . _is_on_source_homepage ( ) [EOL] [EOL] def _source_checks_instance_metadata ( self ) : [EOL] self . driver . get ( self . source_location + [string] ) [EOL] j = json . loads ( self . driver . find_element_by_tag_name ( [string] ) . text ) [EOL] assert j [ [string] ] == [string] [EOL] assert j [ [string] ] == self . source_app . jinja_env . globals [ [string] ] [EOL] assert j [ [string] ] != [string] [EOL] [EOL] def _source_clicks_submit_documents_on_homepage ( self ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert self . _is_on_generate_page ( ) [EOL] [EOL] def _source_regenerates_codename ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def _source_chooses_to_submit_documents ( self ) : [EOL] self . _source_clicks_submit_documents_on_homepage ( ) [EOL] [EOL] codename = self . driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] assert len ( codename . text ) > [number] [EOL] self . source_name = codename . text [EOL] [EOL] def _source_shows_codename ( self , verify_source_name = True ) : [EOL] content = self . driver . find_element_by_id ( [string] ) [EOL] assert not content . is_displayed ( ) [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : content . is_displayed ( ) ) [EOL] assert content . is_displayed ( ) [EOL] content_content = self . driver . find_element_by_css_selector ( [string] ) [EOL] if verify_source_name : [EOL] assert content_content . text == self . source_name [EOL] [EOL] def _source_hides_codename ( self ) : [EOL] content = self . driver . find_element_by_id ( [string] ) [EOL] assert content . is_displayed ( ) [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : not content . is_displayed ( ) ) [EOL] assert not content . is_displayed ( ) [EOL] [EOL] def _source_sees_no_codename ( self ) : [EOL] codename = self . driver . find_elements_by_css_selector ( [string] ) [EOL] assert len ( codename ) == [number] [EOL] [EOL] def _source_chooses_to_login ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_elements_by_id ( [string] ) ) [EOL] [EOL] def _source_hits_cancel_at_login_page ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] [EOL] self . driver . get ( self . source_location ) [EOL] [EOL] assert self . _is_on_source_homepage ( ) [EOL] [EOL] def _source_proceeds_to_login ( self ) : [EOL] self . safe_send_keys_by_id ( [string] , self . source_name ) [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] [comment] [EOL] assert self . _is_logged_in ( ) [EOL] [EOL] replies = self . driver . find_elements_by_id ( [string] ) [EOL] assert len ( replies ) == [number] [EOL] [EOL] def _source_enters_codename_in_login_form ( self ) : [EOL] self . safe_send_keys_by_id ( [string] , [string] ) [EOL] [EOL] def _source_hits_cancel_at_submit_page ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] headline = self . driver . find_element_by_class_name ( [string] ) [EOL] assert [string] == headline . text [EOL] [EOL] def _source_continues_to_submit_page ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def submit_page_loaded ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] headline = self . driver . find_element_by_class_name ( [string] ) [EOL] assert [string] == headline . text [EOL] [EOL] self . wait_for ( submit_page_loaded ) [EOL] [EOL] def _source_continues_to_submit_page_with_colliding_journalist_designation ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] flash_error = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] == flash_error . text [EOL] [EOL] def _source_submits_a_file ( self ) : [EOL] with tempfile . NamedTemporaryFile ( ) as file : [EOL] file . write ( self . secret_message . encode ( [string] ) ) [EOL] file . seek ( [number] ) [EOL] [EOL] filename = file . name [EOL] [EOL] self . safe_send_keys_by_css_selector ( [string] , filename ) [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] self . wait_for_source_key ( self . source_name ) [EOL] [EOL] def file_submitted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] notification = self . driver . find_element_by_css_selector ( [string] ) [EOL] expected_notification = [string] [EOL] assert expected_notification in notification . text [EOL] [EOL] [comment] [EOL] self . wait_for ( file_submitted , timeout = ( self . timeout * [number] ) ) [EOL] [EOL] [comment] [EOL] time . sleep ( self . timeout ) [EOL] [EOL] def _source_submits_a_message ( self ) : [EOL] self . _source_enters_text_in_message_field ( ) [EOL] self . _source_clicks_submit_button_on_submission_page ( ) [EOL] [EOL] def message_submitted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] notification = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in notification . text [EOL] [EOL] self . wait_for ( message_submitted ) [EOL] [EOL] [comment] [EOL] time . sleep ( self . timeout ) [EOL] [EOL] def _source_enters_text_in_message_field ( self ) : [EOL] self . safe_send_keys_by_css_selector ( [string] , self . secret_message ) [EOL] [EOL] def _source_clicks_submit_button_on_submission_page ( self ) : [EOL] submit_button = self . driver . find_element_by_id ( [string] ) [EOL] submit_button . click ( ) [EOL] [EOL] def _source_deletes_a_journalist_reply ( self ) : [EOL] [comment] [EOL] reply_filename_element = self . driver . find_element_by_name ( [string] ) [EOL] reply_filename = reply_filename_element . get_attribute ( [string] ) [EOL] [EOL] delete_button_id = [string] . format ( reply_filename ) [EOL] delete_button = self . driver . find_element_by_id ( delete_button_id ) [EOL] delete_button . click ( ) [EOL] [EOL] def confirm_displayed ( ) : [EOL] confirm_button_id = [string] . format ( reply_filename ) [EOL] confirm_button = self . driver . find_element_by_id ( confirm_button_id ) [EOL] confirm_button . location_once_scrolled_into_view [EOL] assert confirm_button . is_displayed ( ) [EOL] [EOL] self . wait_for ( confirm_displayed ) [EOL] [EOL] confirm_button_id = [string] . format ( reply_filename ) [EOL] confirm_button = self . driver . find_element_by_id ( confirm_button_id ) [EOL] confirm_button . click ( ) [EOL] [EOL] def reply_deleted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] notification = self . driver . find_element_by_class_name ( [string] ) [EOL] assert [string] in notification . text [EOL] [EOL] self . wait_for ( reply_deleted ) [EOL] [EOL] def _source_logs_out ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] assert self . _is_on_logout_page ( ) [EOL] [EOL] def _source_not_found ( self ) : [EOL] self . driver . get ( self . source_location + [string] ) [EOL] message = self . driver . find_element_by_id ( [string] ) [EOL] assert message . is_displayed ( ) [EOL] [EOL] def _source_visits_use_tor ( self ) : [EOL] self . driver . get ( self . source_location + [string] ) [EOL] [EOL] def _source_tor2web_warning ( self ) : [EOL] self . driver . get ( self . source_location + [string] ) [EOL] [EOL] def _source_why_journalist_key ( self ) : [EOL] self . driver . get ( self . source_location + [string] ) [EOL] [EOL] def _source_waits_for_session_to_timeout ( self ) : [EOL] time . sleep ( self . session_expiration + [number] ) [EOL] [EOL] def _source_sees_session_timeout_message ( self ) : [EOL] notification = self . driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] expected_text = [string] [EOL] assert expected_text in notification . text [EOL] [EOL] def _source_sees_document_attachment_item ( self ) : [EOL] assert self . driver . find_element_by_class_name ( [string] ) is not None [EOL] [EOL] def _source_does_not_sees_document_attachment_item ( self ) : [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_class_name ( [string] ) [EOL] [EOL] def _source_sees_already_logged_in_in_other_tab_message ( self ) : [EOL] notification = self . driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] expected_text = [string] [EOL] assert expected_text in notification . text [EOL] [EOL] def _source_sees_redirect_already_logged_in_message ( self ) : [EOL] notification = self . driver . find_element_by_css_selector ( [string] ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] expected_text = [string] [EOL] assert expected_text in notification . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0
	0
from typing import Dict , List , Any [EOL] import typing [EOL] import gzip [EOL] import requests [EOL] from __future__ import print_function [EOL] [EOL] import gzip [EOL] import logging [EOL] import os [EOL] import random [EOL] import re [EOL] import tempfile [EOL] import time [EOL] from os . path import dirname [EOL] [EOL] import pytest [EOL] import requests [EOL] from selenium . common . exceptions import NoSuchElementException [EOL] from selenium . common . exceptions import TimeoutException [EOL] from selenium . webdriver . common . action_chains import ActionChains [EOL] from selenium . webdriver . common . by import By [EOL] from selenium . webdriver . common . keys import Keys [EOL] from selenium . webdriver . support import expected_conditions [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] [EOL] [comment] [EOL] CLICK_ATTEMPTS = [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_journalist_usernames ( ) : [EOL] yield [string] [EOL] yield [string] [EOL] yield [string] [EOL] while True : [EOL] num = random . randint ( [number] , [number] ) [EOL] yield [string] + str ( num ) [EOL] [EOL] [EOL] journalist_usernames = get_journalist_usernames ( ) [EOL] [EOL] [EOL] class JournalistNavigationStepsMixin : [EOL] def _get_submission_content ( self , file_url , raw_content ) : [EOL] if not file_url . endswith ( [string] ) : [EOL] return str ( raw_content ) [EOL] [EOL] with tempfile . TemporaryFile ( ) as fp : [EOL] fp . write ( raw_content . data ) [EOL] fp . seek ( [number] ) [EOL] [EOL] gzf = gzip . GzipFile ( mode = [string] , fileobj = fp ) [EOL] content = gzf . read ( ) [EOL] [EOL] return content [EOL] [EOL] def return_downloaded_content ( self , url , cookies ) : [EOL] [docstring] [EOL] proxies = None [EOL] if [string] in url : [EOL] proxies = { [string] : [string] , [string] : [string] } [EOL] r = requests . get ( url , cookies = cookies , proxies = proxies , stream = True ) [EOL] if r . status_code != [number] : [EOL] raise Exception ( [string] ) [EOL] data = [string] [EOL] for chunk in r . iter_content ( [number] ) : [EOL] data += chunk [EOL] return data [EOL] [EOL] def _input_text_in_login_form ( self , username , password , token ) : [EOL] self . driver . get ( self . journalist_location + [string] ) [EOL] self . safe_send_keys_by_css_selector ( [string] , username ) [EOL] self . safe_send_keys_by_css_selector ( [string] , password ) [EOL] self . safe_send_keys_by_css_selector ( [string] , token ) [EOL] [EOL] def _try_login_user ( self , username , password , token ) : [EOL] self . _input_text_in_login_form ( username , password , token ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def _login_user ( self , username , password , otp , maxtries = [number] ) : [EOL] token = str ( otp . now ( ) ) [EOL] for i in range ( maxtries ) : [EOL] [EOL] self . _try_login_user ( username , password , token ) [EOL] [comment] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) , timeout = self . timeout * [number] ) [EOL] if self . driver . current_url != self . journalist_location + [string] : [EOL] new_token = str ( otp . now ( ) ) [EOL] while token == new_token : [EOL] time . sleep ( [number] ) [EOL] new_token = str ( otp . now ( ) ) [EOL] token = new_token [EOL] else : [EOL] return [EOL] [EOL] [comment] [EOL] assert self . driver . current_url == self . journalist_location + [string] , ( self . driver . current_url + [string] + self . journalist_location ) [EOL] [EOL] def _is_on_journalist_homepage ( self ) : [EOL] return self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] def _journalist_logs_in ( self ) : [EOL] [comment] [EOL] self . user = self . admin_user [ [string] ] [EOL] self . user_pw = self . admin_user [ [string] ] [EOL] self . _login_user ( self . user , self . user_pw , self . admin_user [ [string] ] ) [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] def _journalist_visits_col ( self ) : [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] def _journalist_selects_first_doc ( self ) : [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] self . wait_for ( lambda : expected_conditions . element_located_to_be_selected ( ( By . CSS_SELECTOR , [string] ) ) ) [EOL] [EOL] assert self . driver . find_element_by_css_selector ( [string] ) . is_selected ( ) [EOL] [EOL] def _journalist_clicks_on_modal ( self , click_id ) : [EOL] self . safe_click_by_id ( click_id ) [EOL] [EOL] def _journalist_clicks_delete_collections_cancel_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def _journalist_clicks_delete_selected_cancel_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def _journalist_clicks_delete_collection_cancel_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def _journalist_clicks_delete_collections_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def collection_deleted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( collection_deleted ) [EOL] [EOL] def _journalist_clicks_delete_selected_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def submission_deleted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( submission_deleted ) [EOL] [EOL] def _journalist_clicks_delete_collection_on_modal ( self ) : [EOL] self . _journalist_clicks_on_modal ( [string] ) [EOL] [EOL] def _journalist_clicks_delete_link ( self , click_id , displayed_id ) : [EOL] self . safe_click_by_id ( click_id ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( displayed_id ) ) [EOL] [EOL] def _journalist_clicks_delete_selected_link ( self ) : [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _journalist_clicks_delete_collections_link ( self ) : [EOL] self . _journalist_clicks_delete_link ( [string] , [string] ) [EOL] [EOL] def _journalist_clicks_delete_collection_link ( self ) : [EOL] self . _journalist_clicks_delete_link ( [string] , [string] ) [EOL] [EOL] def _journalist_uses_delete_selected_button_confirmation ( self ) : [EOL] selected_count = len ( self . driver . find_elements_by_name ( [string] ) ) [EOL] assert selected_count > [number] [EOL] [EOL] self . _journalist_selects_first_doc ( ) [EOL] self . _journalist_clicks_delete_selected_link ( ) [EOL] self . _journalist_clicks_delete_selected_cancel_on_modal ( ) [EOL] assert selected_count == len ( self . driver . find_elements_by_name ( [string] ) ) [EOL] [EOL] self . _journalist_clicks_delete_selected_link ( ) [EOL] self . _journalist_clicks_delete_selected_on_modal ( ) [EOL] [EOL] def docs_deleted ( ) : [EOL] assert selected_count > len ( self . driver . find_elements_by_name ( [string] ) ) [EOL] [EOL] self . wait_for ( docs_deleted ) [EOL] [EOL] def _journalist_uses_delete_collection_button_confirmation ( self ) : [EOL] self . _journalist_clicks_delete_collection_link ( ) [EOL] self . _journalist_clicks_delete_collection_cancel_on_modal ( ) [EOL] self . _journalist_clicks_delete_collection_link ( ) [EOL] self . _journalist_clicks_delete_collection_on_modal ( ) [EOL] [EOL] [comment] [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] def _journalist_uses_delete_collections_button_confirmation ( self ) : [EOL] sources = self . driver . find_elements_by_class_name ( [string] ) [EOL] assert len ( sources ) > [number] [EOL] [EOL] try : [EOL] [comment] [EOL] self . driver . find_element_by_id ( [string] ) [EOL] self . safe_click_by_id ( [string] ) [EOL] except NoSuchElementException : [EOL] self . safe_click_all_by_css_selector ( [string] ) [EOL] [EOL] self . _journalist_clicks_delete_collections_link ( ) [EOL] self . _journalist_clicks_delete_collections_cancel_on_modal ( ) [EOL] [EOL] sources = self . driver . find_elements_by_class_name ( [string] ) [EOL] assert len ( sources ) > [number] [EOL] [EOL] self . _journalist_clicks_delete_collections_link ( ) [EOL] self . _journalist_clicks_delete_collections_on_modal ( ) [EOL] [EOL] [comment] [EOL] def no_sources ( ) : [EOL] assert len ( self . driver . find_elements_by_class_name ( [string] ) ) == [number] [EOL] [EOL] self . wait_for ( no_sources ) [EOL] [EOL] def _admin_logs_in ( self ) : [EOL] self . admin = self . admin_user [ [string] ] [EOL] self . admin_pw = self . admin_user [ [string] ] [EOL] self . _login_user ( self . admin , self . admin_pw , self . admin_user [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] [comment] [EOL] assert self . driver . find_element_by_id ( [string] ) [EOL] [EOL] def _admin_visits_admin_interface ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _admin_visits_system_config_page ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def config_page_loaded ( ) : [EOL] assert self . driver . find_element_by_id ( [string] ) [EOL] [EOL] self . wait_for ( config_page_loaded ) [EOL] [EOL] def _admin_updates_logo_image ( self ) : [EOL] dir_name = dirname ( dirname ( dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] image_path = os . path . abspath ( os . path . join ( dir_name , [string] ) ) [EOL] [EOL] self . safe_send_keys_by_id ( [string] , image_path ) [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def updated_image ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] [comment] [EOL] self . wait_for ( updated_image , timeout = self . timeout * [number] ) [EOL] [EOL] def _admin_disallows_document_uploads ( self ) : [EOL] if not self . driver . find_element_by_id ( [string] ) . is_selected ( ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def preferences_saved ( ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] self . wait_for ( preferences_saved , timeout = self . timeout * [number] ) [EOL] [EOL] def _admin_allows_document_uploads ( self ) : [EOL] if self . driver . find_element_by_id ( [string] ) . is_selected ( ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def preferences_saved ( ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] self . wait_for ( preferences_saved , timeout = self . timeout * [number] ) [EOL] [EOL] def _add_user ( self , username , first_name = [string] , last_name = [string] , is_admin = False , hotp = None ) : [EOL] self . safe_send_keys_by_css_selector ( [string] , username ) [EOL] [EOL] if first_name : [EOL] self . safe_send_keys_by_id ( [string] , first_name ) [EOL] [EOL] if last_name : [EOL] self . safe_send_keys_by_id ( [string] , last_name ) [EOL] [EOL] if hotp : [EOL] self . safe_click_all_by_css_selector ( [string] ) [EOL] self . safe_send_keys_by_css_selector ( [string] , hotp ) [EOL] [EOL] if is_admin : [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _admin_adds_a_user_with_invalid_username ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] [comment] [EOL] btns = self . driver . find_elements_by_tag_name ( [string] ) [EOL] assert [string] in [ el . text for el in btns ] [EOL] [EOL] invalid_username = [string] [EOL] [EOL] self . safe_send_keys_by_css_selector ( [string] , invalid_username ) [EOL] [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] error_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] [string] in error_msg . text [EOL] [EOL] def _admin_adds_a_user ( self , is_admin = False , new_username = [string] ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] [comment] [EOL] btns = self . driver . find_elements_by_tag_name ( [string] ) [EOL] assert [string] in [ el . text for el in btns ] [EOL] [EOL] password = self . driver . find_element_by_css_selector ( [string] ) . text . strip ( ) [EOL] [EOL] if not new_username : [EOL] new_username = next ( journalist_usernames ) [EOL] self . new_user = dict ( username = new_username , first_name = [string] , last_name = [string] , password = password ) [EOL] self . _add_user ( self . new_user [ [string] ] , first_name = self . new_user [ [string] ] , last_name = self . new_user [ [string] ] , is_admin = is_admin ) [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] h1s = [ h1 . text for h1 in self . driver . find_elements_by_tag_name ( [string] ) ] [EOL] assert [string] in h1s [EOL] [EOL] shared_secret = ( self . driver . find_element_by_css_selector ( [string] ) . text . strip ( ) . replace ( [string] , [string] ) ) [EOL] self . create_new_totp ( shared_secret ) [EOL] [EOL] [comment] [EOL] self . safe_send_keys_by_css_selector ( [string] , str ( self . new_totp . now ( ) ) ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def user_token_added ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] flash_msg = self . driver . find_elements_by_css_selector ( [string] ) [EOL] assert [string] . format ( self . new_user [ [string] ] ) in [ el . text for el in flash_msg ] [EOL] [EOL] self . wait_for ( user_token_added ) [EOL] [EOL] def _admin_deletes_user ( self ) : [EOL] for i in range ( CLICK_ATTEMPTS ) : [EOL] try : [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] self . alert_wait ( ) [EOL] self . alert_accept ( ) [EOL] break [EOL] except TimeoutException : [EOL] [comment] [EOL] [comment] [EOL] logging . info ( [string] ) [EOL] [EOL] def user_deleted ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( user_deleted ) [EOL] [EOL] def _admin_can_send_test_alert ( self ) : [EOL] alert_button = self . driver . find_element_by_id ( [string] ) [EOL] alert_button . click ( ) [EOL] [EOL] def test_alert_sent ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( test_alert_sent ) [EOL] [EOL] def _logout ( self ) : [EOL] [comment] [EOL] self . safe_click_by_id ( [string] ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] [comment] [EOL] def login_page ( ) : [EOL] assert [string] in self . driver . page_source [EOL] [EOL] self . wait_for ( login_page ) [EOL] [EOL] def _check_login_with_otp ( self , otp ) : [EOL] self . _logout ( ) [EOL] self . _login_user ( self . new_user [ [string] ] , self . new_user [ [string] ] , otp ) [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] def _new_user_can_log_in ( self ) : [EOL] [comment] [EOL] self . _logout ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [comment] [EOL] self . _login_user ( self . new_user [ [string] ] , self . new_user [ [string] ] , self . new_totp ) [EOL] [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_id ( [string] ) [EOL] [EOL] def _new_admin_user_can_log_in ( self ) : [EOL] [comment] [EOL] self . _check_login_with_otp ( self . new_totp ) [EOL] [EOL] [comment] [EOL] self . _admin_visits_admin_interface ( ) [EOL] [EOL] def _edit_account ( self ) : [EOL] edit_account_link = self . driver . find_element_by_id ( [string] ) [EOL] edit_account_link . click ( ) [EOL] [EOL] [comment] [EOL] def edit_page_loaded ( ) : [EOL] h1s = self . driver . find_elements_by_tag_name ( [string] ) [ [number] ] [EOL] assert [string] == h1s . text [EOL] [EOL] self . wait_for ( edit_page_loaded ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_partial_link_text ( [string] ) [EOL] [comment] [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_css_selector ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_css_selector ( [string] ) [EOL] [comment] [EOL] totp_reset_button = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] [EOL] assert [string] in totp_reset_button . get_attribute ( [string] ) [EOL] hotp_reset_button = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] [EOL] assert [string] in hotp_reset_button . get_attribute ( [string] ) [EOL] [EOL] def _edit_user ( self , username , is_admin = False ) : [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] new_user_edit_links = [ el for el in self . driver . find_elements_by_tag_name ( [string] ) if el . get_attribute ( [string] ) == username ] [EOL] [EOL] assert [number] == len ( new_user_edit_links ) [EOL] new_user_edit_links [ [number] ] . click ( ) [EOL] [EOL] def edit_user_page_loaded ( ) : [EOL] h1s = self . driver . find_elements_by_tag_name ( [string] ) [ [number] ] [EOL] assert [string] . format ( username ) == h1s . text [EOL] [EOL] self . wait_for ( edit_user_page_loaded ) [EOL] [EOL] [comment] [EOL] admin_interface_link = self . driver . find_element_by_partial_link_text ( [string] ) [EOL] assert re . search ( [string] , admin_interface_link . get_attribute ( [string] ) ) [EOL] [comment] [EOL] [comment] [EOL] username_field = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert username_field . get_attribute ( [string] ) == username [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] username_field = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert bool ( username_field . get_attribute ( [string] ) ) == is_admin [EOL] [comment] [EOL] [comment] [EOL] totp_reset_button = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] [EOL] assert [string] in totp_reset_button . get_attribute ( [string] ) [EOL] totp_reset_uid = totp_reset_button . find_element_by_name ( [string] ) [EOL] assert totp_reset_uid . is_displayed ( ) is False [EOL] hotp_reset_button = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] [EOL] assert [string] in hotp_reset_button . get_attribute ( [string] ) [EOL] [EOL] hotp_reset_uid = hotp_reset_button . find_element_by_name ( [string] ) [EOL] assert hotp_reset_uid . is_displayed ( ) is False [EOL] [EOL] def _admin_editing_invalid_username ( self ) : [EOL] [comment] [EOL] self . _logout ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] self . _login_user ( self . admin , self . admin_pw , self . admin_user [ [string] ] ) [EOL] [EOL] [comment] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] new_user_edit_links = [ el for el in self . driver . find_elements_by_tag_name ( [string] ) if ( el . get_attribute ( [string] ) == self . new_user [ [string] ] ) ] [EOL] assert len ( new_user_edit_links ) == [number] [EOL] new_user_edit_links [ [number] ] . click ( ) [EOL] [EOL] def can_edit_user ( ) : [EOL] h = self . driver . find_elements_by_tag_name ( [string] ) [ [number] ] [EOL] assert [string] . format ( self . new_user [ [string] ] ) == h . text [EOL] [EOL] self . wait_for ( can_edit_user ) [EOL] [EOL] new_username = [string] [EOL] [EOL] self . safe_send_keys_by_css_selector ( [string] , Keys . CONTROL + [string] ) [EOL] self . safe_send_keys_by_css_selector ( [string] , Keys . DELETE ) [EOL] self . safe_send_keys_by_css_selector ( [string] , new_username ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def user_edited ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( user_edited ) [EOL] [EOL] def _admin_can_edit_new_user ( self ) : [EOL] [comment] [EOL] self . _logout ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] self . _login_user ( self . admin , self . admin_pw , self . admin_user [ [string] ] ) [EOL] [EOL] [comment] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] new_user_edit_links = [ el for el in self . driver . find_elements_by_tag_name ( [string] ) if ( el . get_attribute ( [string] ) == self . new_user [ [string] ] ) ] [EOL] assert len ( new_user_edit_links ) == [number] [EOL] new_user_edit_links [ [number] ] . click ( ) [EOL] [EOL] def can_edit_user ( ) : [EOL] h = self . driver . find_elements_by_tag_name ( [string] ) [ [number] ] [EOL] assert [string] . format ( self . new_user [ [string] ] ) == h . text [EOL] [EOL] self . wait_for ( can_edit_user ) [EOL] [EOL] new_characters = [string] [EOL] new_username = self . new_user [ [string] ] + new_characters [EOL] [EOL] self . safe_send_keys_by_css_selector ( [string] , new_characters ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def user_edited ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] flash_msg = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in flash_msg . text [EOL] [EOL] self . wait_for ( user_edited ) [EOL] [EOL] def can_edit_user2 ( ) : [EOL] assert [string] . format ( new_username ) in self . driver . page_source [EOL] [EOL] self . wait_for ( can_edit_user2 ) [EOL] [EOL] [comment] [EOL] self . new_user [ [string] ] = new_username [EOL] [EOL] [comment] [EOL] self . _logout ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] self . _login_user ( self . new_user [ [string] ] , self . new_user [ [string] ] , self . new_totp ) [EOL] [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] [comment] [EOL] self . _logout ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] self . _login_user ( self . admin , self . admin_pw , self . admin_user [ [string] ] ) [EOL] [EOL] [comment] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] selector = [string] . format ( self . new_user [ [string] ] ) [EOL] new_user_edit_links = self . driver . find_elements_by_css_selector ( selector ) [EOL] assert len ( new_user_edit_links ) == [number] [EOL] self . safe_click_by_css_selector ( selector ) [EOL] [EOL] self . wait_for ( can_edit_user ) [EOL] [EOL] new_password = self . driver . find_element_by_css_selector ( [string] ) . text . strip ( ) [EOL] self . new_user [ [string] ] = new_password [EOL] [EOL] reset_pw_btn = self . driver . find_element_by_css_selector ( [string] ) [EOL] reset_pw_btn . click ( ) [EOL] [EOL] def update_password_success ( ) : [EOL] assert [string] in self . driver . page_source [EOL] [EOL] [comment] [EOL] self . wait_for ( update_password_success ) [EOL] [EOL] [comment] [EOL] self . _logout ( ) [EOL] self . _login_user ( self . new_user [ [string] ] , self . new_user [ [string] ] , self . new_totp ) [EOL] [EOL] assert self . _is_on_journalist_homepage ( ) [EOL] [EOL] def _journalist_checks_messages ( self ) : [EOL] self . driver . get ( self . journalist_location ) [EOL] [EOL] [comment] [EOL] code_names = self . driver . find_elements_by_class_name ( [string] ) [EOL] assert [number] != len ( code_names ) , code_names [EOL] assert [number] <= len ( code_names ) , code_names [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] [comment] [EOL] unread_span = self . driver . find_element_by_css_selector ( [string] ) [EOL] assert [string] in unread_span . text [EOL] [EOL] def _journalist_stars_and_unstars_single_message ( self ) : [EOL] [comment] [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_id ( [string] ) [EOL] [EOL] [comment] [EOL] self . driver . find_element_by_class_name ( [string] ) . click ( ) [EOL] [EOL] def message_starred ( ) : [EOL] starred = self . driver . find_elements_by_id ( [string] ) [EOL] assert [number] == len ( starred ) [EOL] [EOL] self . wait_for ( message_starred ) [EOL] [EOL] [comment] [EOL] self . driver . find_element_by_class_name ( [string] ) . click ( ) [EOL] [EOL] def message_unstarred ( ) : [EOL] with pytest . raises ( NoSuchElementException ) : [EOL] self . driver . find_element_by_id ( [string] ) [EOL] [EOL] self . wait_for ( message_unstarred ) [EOL] [EOL] def _journalist_selects_all_sources_then_selects_none ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] checkboxes = self . driver . find_elements_by_id ( [string] ) [EOL] for checkbox in checkboxes : [EOL] assert checkbox . is_selected ( ) [EOL] [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] checkboxes = self . driver . find_elements_by_id ( [string] ) [EOL] for checkbox in checkboxes : [EOL] assert checkbox . is_selected ( ) is False [EOL] [EOL] def _journalist_selects_the_first_source ( self ) : [EOL] self . driver . find_element_by_css_selector ( [string] ) . click ( ) [EOL] [EOL] def _journalist_selects_all_documents ( self ) : [EOL] checkboxes = self . driver . find_elements_by_name ( [string] ) [EOL] for checkbox in checkboxes : [EOL] checkbox . click ( ) [EOL] [EOL] def _journalist_downloads_message ( self ) : [EOL] self . _journalist_selects_the_first_source ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] submissions = self . driver . find_elements_by_css_selector ( [string] ) [EOL] assert [number] == len ( submissions ) [EOL] [EOL] file_url = submissions [ [number] ] . get_attribute ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def cookie_string_from_selenium_cookies ( cookies ) : [EOL] result = { } [EOL] for cookie in cookies : [EOL] result [ cookie [ [string] ] ] = cookie [ [string] ] [EOL] return result [EOL] [EOL] cks = cookie_string_from_selenium_cookies ( self . driver . get_cookies ( ) ) [EOL] raw_content = self . return_downloaded_content ( file_url , cks ) [EOL] [EOL] decrypted_submission = self . gpg . decrypt ( raw_content ) [EOL] submission = self . _get_submission_content ( file_url , decrypted_submission ) [EOL] if type ( submission ) == bytes : [EOL] submission = submission . decode ( [string] ) [EOL] [EOL] assert self . secret_message == submission [EOL] [EOL] def _journalist_composes_reply ( self ) : [EOL] reply_text = ( [string] [string] ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] self . safe_send_keys_by_id ( [string] , reply_text ) [EOL] [EOL] def _journalist_sends_reply_to_source ( self ) : [EOL] self . _journalist_composes_reply ( ) [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] [EOL] def reply_stored ( ) : [EOL] if not hasattr ( self , [string] ) : [EOL] assert [string] in self . driver . page_source [EOL] [EOL] self . wait_for ( reply_stored ) [EOL] [EOL] def _visit_edit_account ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def _visit_edit_secret ( self , otp_type , tooltip_text = [string] ) : [EOL] reset_form = self . wait_for ( lambda : self . driver . find_element_by_id ( [string] + otp_type ) ) [EOL] assert [string] + otp_type in reset_form . get_attribute ( [string] ) [EOL] reset_button = self . driver . find_elements_by_css_selector ( [string] + otp_type ) [ [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] reset_button . location_once_scrolled_into_view [EOL] ActionChains ( self . driver ) . move_to_element ( reset_button ) . perform ( ) [EOL] [EOL] def explanatory_tooltip_is_correct ( ) : [EOL] explanatory_tooltip = self . driver . find_element_by_css_selector ( [string] + otp_type + [string] ) [EOL] [EOL] explanatory_tooltip_opacity = explanatory_tooltip . value_of_css_property ( [string] ) [EOL] assert explanatory_tooltip_opacity == [string] [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] assert explanatory_tooltip . text == tooltip_text [EOL] [EOL] self . wait_for ( explanatory_tooltip_is_correct ) [EOL] [EOL] reset_form . submit ( ) [EOL] [EOL] alert = self . driver . switch_to_alert ( ) [EOL] alert . accept ( ) [EOL] [EOL] def _set_hotp_secret ( self ) : [EOL] self . safe_send_keys_by_css_selector ( [string] , [string] ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def _visit_edit_hotp_secret ( self ) : [EOL] self . _visit_edit_secret ( [string] , [string] ) [EOL] [EOL] def _visit_edit_totp_secret ( self ) : [EOL] self . _visit_edit_secret ( [string] , [string] [string] ) [EOL] [EOL] def _admin_visits_add_user ( self ) : [EOL] add_user_btn = self . driver . find_element_by_css_selector ( [string] ) [EOL] self . wait_for ( lambda : add_user_btn . is_enabled ( ) and add_user_btn . is_displayed ( ) ) [EOL] add_user_btn . click ( ) [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def _admin_visits_edit_user ( self ) : [EOL] selector = [string] . format ( self . new_user [ [string] ] ) [EOL] new_user_edit_links = self . driver . find_elements_by_css_selector ( selector ) [EOL] assert len ( new_user_edit_links ) == [number] [EOL] self . safe_click_by_css_selector ( selector ) [EOL] try : [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] except NoSuchElementException : [EOL] [comment] [EOL] self . safe_click_by_css_selector ( selector ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] [EOL] def retry_2fa_pop_ups ( self , navigation_step , button_to_click ) : [EOL] [docstring] [EOL] [EOL] for i in range ( CLICK_ATTEMPTS ) : [EOL] try : [EOL] try : [EOL] [comment] [EOL] self . wait_for ( lambda : self . driver . find_elements_by_id ( button_to_click ) [ [number] ] ) [EOL] except IndexError : [EOL] [comment] [EOL] [comment] [EOL] self . alert_wait ( ) [EOL] self . alert_accept ( ) [EOL] break [EOL] [EOL] [comment] [EOL] navigation_step ( ) [EOL] [EOL] self . alert_wait ( ) [EOL] self . alert_accept ( ) [EOL] break [EOL] except TimeoutException : [EOL] [comment] [EOL] [comment] [EOL] logging . info ( [string] ) [EOL] [EOL] def _admin_visits_reset_2fa_hotp ( self ) : [EOL] def _admin_visits_reset_2fa_hotp_step ( ) : [EOL] [comment] [EOL] [comment] [EOL] hotp_reset_button = self . driver . find_elements_by_id ( [string] ) [ [number] ] [EOL] hotp_reset_button . location_once_scrolled_into_view [EOL] ActionChains ( self . driver ) . move_to_element ( hotp_reset_button ) . perform ( ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] tip_opacity = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] . value_of_css_property ( [string] ) [EOL] tip_text = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] . text [EOL] [EOL] assert tip_opacity == [string] [EOL] [EOL] if not hasattr ( self , [string] ) : [EOL] assert tip_text == [string] [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] [comment] [EOL] self . retry_2fa_pop_ups ( _admin_visits_reset_2fa_hotp_step , [string] ) [EOL] [EOL] def _admin_visits_edit_hotp ( self ) : [EOL] self . wait_for ( lambda : self . driver . find_element_by_css_selector ( [string] ) ) [EOL] [EOL] def _admin_visits_reset_2fa_totp ( self ) : [EOL] def _admin_visits_reset_2fa_totp_step ( ) : [EOL] totp_reset_button = self . driver . find_elements_by_id ( [string] ) [ [number] ] [EOL] assert [string] in totp_reset_button . get_attribute ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] totp_reset_button = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] [EOL] totp_reset_button . location_once_scrolled_into_view [EOL] ActionChains ( self . driver ) . move_to_element ( totp_reset_button ) . perform ( ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] tip_opacity = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] . value_of_css_property ( [string] ) [EOL] tip_text = self . driver . find_elements_by_css_selector ( [string] ) [ [number] ] . text [EOL] [EOL] assert tip_opacity == [string] [EOL] if not hasattr ( self , [string] ) : [EOL] expected_text = ( [string] [string] ) [EOL] assert tip_text == expected_text [EOL] [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] [comment] [EOL] self . retry_2fa_pop_ups ( _admin_visits_reset_2fa_totp_step , [string] ) [EOL] [EOL] def _admin_creates_a_user ( self , hotp ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] self . new_user = dict ( username = [string] , first_name = [string] , last_name = [string] , password = [string] ) [EOL] self . _add_user ( self . new_user [ [string] ] , first_name = self . new_user [ [string] ] , last_name = self . new_user [ [string] ] , is_admin = False , hotp = hotp ) [EOL] [EOL] def _journalist_delete_all ( self ) : [EOL] for checkbox in self . driver . find_elements_by_name ( [string] ) : [EOL] checkbox . click ( ) [EOL] [EOL] delete_selected_link = self . driver . find_element_by_id ( [string] ) [EOL] ActionChains ( self . driver ) . move_to_element ( delete_selected_link ) . click ( ) . perform ( ) [EOL] [EOL] def _journalist_confirm_delete_selected ( self ) : [EOL] self . wait_for ( lambda : expected_conditions . element_to_be_clickable ( ( By . ID , [string] ) ) ) [EOL] confirm_btn = self . driver . find_element_by_id ( [string] ) [EOL] confirm_btn . location_once_scrolled_into_view [EOL] ActionChains ( self . driver ) . move_to_element ( confirm_btn ) . click ( ) . perform ( ) [EOL] [EOL] def _source_delete_key ( self ) : [EOL] filesystem_id = self . source_app . crypto_util . hash_codename ( self . source_name ) [EOL] self . source_app . crypto_util . delete_reply_keypair ( filesystem_id ) [EOL] [EOL] def _journalist_continues_after_flagging ( self ) : [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) ) [EOL] continue_link = self . driver . find_element_by_id ( [string] ) [EOL] [EOL] actions = ActionChains ( self . driver ) [EOL] actions . move_to_element ( continue_link ) . perform ( ) [EOL] continue_link . click ( ) [EOL] [EOL] def _journalist_delete_none ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] [EOL] def _journalist_delete_all_confirmation ( self ) : [EOL] self . safe_click_all_by_css_selector ( [string] ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def _journalist_delete_one ( self ) : [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] el = WebDriverWait ( self . driver , self . timeout , self . poll_frequency ) . until ( expected_conditions . element_to_be_clickable ( ( By . ID , [string] ) ) ) [EOL] el . location_once_scrolled_into_view [EOL] ActionChains ( self . driver ) . move_to_element ( el ) . click ( ) . perform ( ) [EOL] [EOL] def _journalist_flags_source ( self ) : [EOL] self . safe_click_by_id ( [string] ) [EOL] [EOL] def _journalist_visits_admin ( self ) : [EOL] self . driver . get ( self . journalist_location + [string] ) [EOL] [EOL] def _journalist_fail_login ( self ) : [EOL] self . _try_login_user ( [string] , [string] , [string] ) [EOL] [EOL] def _journalist_fail_login_many ( self ) : [EOL] self . user = [string] [EOL] for _ in range ( [number] + [number] ) : [EOL] self . _try_login_user ( self . user , [string] , [string] ) [EOL] [EOL] def _admin_enters_journalist_account_details_hotp ( self , username , hotp_secret ) : [EOL] self . safe_send_keys_by_css_selector ( [string] , username ) [EOL] self . safe_send_keys_by_css_selector ( [string] , hotp_secret ) [EOL] self . safe_click_by_css_selector ( [string] ) [EOL] [EOL] def _journalist_uses_js_filter_by_sources ( self ) : [EOL] filter_box = self . safe_send_keys_by_id ( [string] , [string] ) [EOL] sources = self . driver . find_elements_by_class_name ( [string] ) [EOL] assert len ( sources ) > [number] [EOL] for source in sources : [EOL] assert source . is_displayed ( ) is False [EOL] filter_box . clear ( ) [EOL] filter_box . send_keys ( Keys . RETURN ) [EOL] [EOL] for source in sources : [EOL] assert source . is_displayed ( ) is True [EOL] [EOL] def _journalist_source_selection_honors_filter ( self ) : [EOL] [docstring] [EOL] [EOL] self . wait_for ( lambda : self . driver . find_element_by_id ( [string] ) , [number] ) [EOL] [EOL] [comment] [EOL] filter_box = self . driver . find_element_by_id ( [string] ) [EOL] filter_box . clear ( ) [EOL] filter_box . send_keys ( Keys . RETURN ) [EOL] [EOL] [comment] [EOL] sources = self . driver . find_elements_by_class_name ( [string] ) [EOL] assert len ( sources ) > [number] [EOL] first_source_designation = sources [ [number] ] . text [EOL] [EOL] [comment] [EOL] filter_box . send_keys ( first_source_designation ) [EOL] for source in sources : [EOL] assert source . text == first_source_designation or source . is_displayed ( ) is False [EOL] [EOL] [comment] [EOL] select_all = self . driver . find_element_by_id ( [string] ) [EOL] select_all . click ( ) [EOL] [EOL] source_rows = self . driver . find_elements_by_css_selector ( [string] ) [EOL] for source_row in source_rows : [EOL] source_designation = source_row . get_attribute ( [string] ) [EOL] checkbox = source_row . find_element_by_css_selector ( [string] ) [EOL] if source_designation == first_source_designation : [EOL] assert checkbox . is_selected ( ) [EOL] else : [EOL] assert not checkbox . is_selected ( ) [EOL] [EOL] [comment] [EOL] filter_box . clear ( ) [EOL] filter_box . send_keys ( Keys . RETURN ) [EOL] [EOL] [comment] [EOL] select_all . click ( ) [EOL] for source_row in source_rows : [EOL] checkbox = source_row . find_element_by_css_selector ( [string] ) [EOL] assert checkbox . is_selected ( ) [EOL] [EOL] [comment] [EOL] filter_box . send_keys ( first_source_designation ) [EOL] [EOL] [comment] [EOL] select_none = self . driver . find_element_by_id ( [string] ) [EOL] select_none . click ( ) [EOL] for source_row in source_rows : [EOL] source_designation = source_row . get_attribute ( [string] ) [EOL] checkbox = source_row . find_element_by_css_selector ( [string] ) [EOL] if source_designation == first_source_designation : [EOL] assert not checkbox . is_selected ( ) [EOL] else : [EOL] assert checkbox . is_selected ( ) [EOL] [EOL] [comment] [EOL] filter_box . clear ( ) [EOL] filter_box . send_keys ( Keys . RETURN ) [EOL] select_none . click ( ) [EOL] [EOL] for source_row in source_rows : [EOL] assert source_row . is_displayed ( ) [EOL] checkbox = source_row . find_element_by_css_selector ( [string] ) [EOL] assert not checkbox . is_selected ( ) [EOL] [EOL] def _journalist_uses_js_buttons_to_download_unread ( self ) : [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] checkboxes = self . driver . find_elements_by_name ( [string] ) [EOL] assert len ( checkboxes ) > [number] [EOL] for checkbox in checkboxes : [EOL] assert checkbox . is_selected ( ) [EOL] [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] checkboxes = self . driver . find_elements_by_name ( [string] ) [EOL] for checkbox in checkboxes : [EOL] assert checkbox . is_selected ( ) is False [EOL] [EOL] self . driver . find_element_by_id ( [string] ) . click ( ) [EOL] checkboxes = self . driver . find_elements_by_name ( [string] ) [EOL] for checkbox in checkboxes : [EOL] classes = checkbox . get_attribute ( [string] ) [EOL] assert [string] in classes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gzip.GzipFile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $gzip.GzipFile$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from flask_babel import gettext [EOL] [EOL] print ( gettext ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] import time [EOL] [EOL] [comment] [EOL] REDIS_SUCCESS_RETURN_VALUE = [string] [EOL] [EOL] [EOL] def wait_for_redis_worker ( job , timeout = [number] ) : [EOL] [docstring] [EOL] start_time = time . time ( ) [EOL] while time . time ( ) - start_time < timeout : [EOL] if job . result == REDIS_SUCCESS_RETURN_VALUE : [EOL] return [EOL] elif job . result not in ( None , REDIS_SUCCESS_RETURN_VALUE ) : [EOL] assert False , [string] [EOL] time . sleep ( [number] ) [EOL] assert False , [string] [EOL] [EOL] [EOL] def wait_for_assertion ( assertion_expression , timeout = [number] ) : [EOL] [docstring] [EOL] start_time = time . time ( ) [EOL] while time . time ( ) - start_time < timeout : [EOL] try : [EOL] return assertion_expression ( ) [EOL] except AssertionError : [EOL] time . sleep ( [number] ) [EOL] [comment] [EOL] return assertion_expression ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def get_api_headers ( token = [string] ) : [EOL] if token : [EOL] return { [string] : [string] . format ( token ) , [string] : [string] , [string] : [string] , } [EOL] return { [string] : [string] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [EOL] class UpgradeTester ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] pass [EOL] [EOL] def load_data ( self ) : [EOL] pass [EOL] [EOL] def check_upgrade ( self ) : [EOL] pass [EOL] [EOL] [EOL] class DowngradeTester ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] pass [EOL] [EOL] def load_data ( self ) : [EOL] pass [EOL] [EOL] def check_downgrade ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import random [EOL] from uuid import uuid4 [EOL] [EOL] from db import db [EOL] from journalist_app import create_app [EOL] import sqlalchemy [EOL] import pytest [EOL] [EOL] from . helpers import bool_or_none , random_bool , random_chars , random_datetime [EOL] [EOL] [EOL] class UpgradeTester : [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] with self . app . app_context ( ) : [EOL] self . add_source ( ) [EOL] self . valid_source_id = [number] [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] @ staticmethod def add_source ( ) : [EOL] filesystem_id = random_chars ( [number] ) if random_bool ( ) else None [EOL] params = { [string] : str ( uuid4 ( ) ) , [string] : filesystem_id , [string] : random_chars ( [number] ) , [string] : bool_or_none ( ) , [string] : random_datetime ( nullable = True ) , [string] : bool_or_none ( ) , [string] : random . randint ( [number] , [number] ) , } [EOL] sql = [string] [EOL] [EOL] db . engine . execute ( sqlalchemy . text ( sql ) , ** params ) [EOL] [EOL] def check_upgrade ( self ) : [EOL] [docstring] [EOL] with self . app . app_context ( ) : [EOL] sources = db . engine . execute ( sqlalchemy . text ( [string] ) ) . fetchall ( ) [EOL] assert len ( sources ) == [number] [EOL] [EOL] [EOL] class DowngradeTester : [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] pass [EOL] [EOL] def check_downgrade ( self ) : [EOL] [docstring] [EOL] with self . app . app_context ( ) : [EOL] with pytest . raises ( sqlalchemy . exc . OperationalError ) : [EOL] sources = db . engine . execute ( sqlalchemy . text ( [string] ) ) . fetchall ( ) [EOL] assert len ( sources ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import random [EOL] import uuid [EOL] [EOL] from sqlalchemy import text [EOL] from sqlalchemy . exc import NoSuchColumnError [EOL] [EOL] from db import db [EOL] from journalist_app import create_app [EOL] from . helpers import random_chars [EOL] [EOL] random . seed ( [string] ) [EOL] [EOL] [EOL] class Helper : [EOL] [EOL] def __init__ ( self ) : [EOL] self . journalist_id = None [EOL] [EOL] def create_journalist ( self ) : [EOL] if self . journalist_id is not None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] params = { [string] : str ( uuid . uuid4 ( ) ) , [string] : random_chars ( [number] ) , } [EOL] sql = [string] [EOL] self . journalist_id = db . engine . execute ( text ( sql ) , ** params ) . lastrowid [EOL] [EOL] def create_journalist_after_migration ( self ) : [EOL] if self . journalist_id is not None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] params = { [string] : str ( uuid . uuid4 ( ) ) , [string] : random_chars ( [number] ) , [string] : random_chars ( [number] ) , [string] : random_chars ( [number] ) } [EOL] sql = [string] [EOL] self . journalist_id = db . engine . execute ( text ( sql ) , ** params ) . lastrowid [EOL] [EOL] [EOL] class UpgradeTester ( Helper ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] Helper . __init__ ( self ) [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] with self . app . app_context ( ) : [EOL] self . create_journalist ( ) [EOL] [EOL] def check_upgrade ( self ) : [EOL] [docstring] [EOL] with self . app . app_context ( ) : [EOL] journalists_sql = [string] [EOL] journalists = db . engine . execute ( text ( journalists_sql ) ) . fetchall ( ) [EOL] for journalist in journalists : [EOL] assert journalist [ [string] ] is None [EOL] assert journalist [ [string] ] is None [EOL] [EOL] [EOL] class DowngradeTester ( Helper ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] Helper . __init__ ( self ) [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] with self . app . app_context ( ) : [EOL] self . create_journalist_after_migration ( ) [EOL] [EOL] def check_downgrade ( self ) : [EOL] [docstring] [EOL] with self . app . app_context ( ) : [EOL] journalists_sql = [string] [EOL] journalists = db . engine . execute ( text ( journalists_sql ) ) . fetchall ( ) [EOL] for journalist in journalists : [EOL] try : [EOL] assert journalist [ [string] ] [EOL] except NoSuchColumnError : [EOL] pass [EOL] try : [EOL] assert journalist [ [string] ] [EOL] except NoSuchColumnError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import random [EOL] import uuid [EOL] [EOL] from sqlalchemy import text [EOL] from sqlalchemy . exc import NoSuchColumnError [EOL] [EOL] from db import db [EOL] from journalist_app import create_app [EOL] from . helpers import random_bool , random_chars , random_datetime , bool_or_none [EOL] [EOL] random . seed ( [string] ) [EOL] [EOL] [EOL] def add_source ( ) : [EOL] filesystem_id = random_chars ( [number] ) if random_bool ( ) else None [EOL] params = { [string] : filesystem_id , [string] : str ( uuid . uuid4 ( ) ) , [string] : random_chars ( [number] ) , [string] : bool_or_none ( ) , [string] : random_datetime ( nullable = True ) , [string] : bool_or_none ( ) , [string] : random . randint ( [number] , [number] ) , } [EOL] sql = [string] [EOL] db . engine . execute ( text ( sql ) , ** params ) [EOL] [EOL] [EOL] class UpgradeTester ( ) : [EOL] [EOL] [docstring] [EOL] [EOL] SOURCE_NUM = [number] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] with self . app . app_context ( ) : [EOL] [EOL] for _ in range ( self . SOURCE_NUM ) : [EOL] add_source ( ) [EOL] [EOL] for sid in range ( [number] , self . SOURCE_NUM , [number] ) : [EOL] for _ in range ( random . randint ( [number] , [number] ) ) : [EOL] self . add_submission ( sid ) [EOL] [EOL] [comment] [EOL] for sid in range ( self . SOURCE_NUM , self . SOURCE_NUM + [number] ) : [EOL] self . add_submission ( sid ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] @ staticmethod def add_submission ( source_id ) : [EOL] params = { [string] : source_id , [string] : random_chars ( [number] ) , [string] : random . randint ( [number] , [number] * [number] * [number] ) , [string] : bool_or_none ( ) , } [EOL] sql = [string] [EOL] db . engine . execute ( text ( sql ) , ** params ) [EOL] [EOL] def check_upgrade ( self ) : [EOL] with self . app . app_context ( ) : [EOL] submissions = db . engine . execute ( text ( [string] ) ) . fetchall ( ) [EOL] [EOL] for submission in submissions : [EOL] assert submission . uuid is not None [EOL] [EOL] [EOL] class DowngradeTester ( ) : [EOL] [EOL] SOURCE_NUM = [number] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . app = create_app ( config ) [EOL] [EOL] def load_data ( self ) : [EOL] with self . app . app_context ( ) : [EOL] [EOL] for _ in range ( self . SOURCE_NUM ) : [EOL] add_source ( ) [EOL] [EOL] for sid in range ( [number] , self . SOURCE_NUM , [number] ) : [EOL] for _ in range ( random . randint ( [number] , [number] ) ) : [EOL] self . add_submission ( sid ) [EOL] [EOL] [comment] [EOL] for sid in range ( self . SOURCE_NUM , self . SOURCE_NUM + [number] ) : [EOL] self . add_submission ( sid ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] @ staticmethod def add_submission ( source_id ) : [EOL] params = { [string] : source_id , [string] : str ( uuid . uuid4 ( ) ) , [string] : random_chars ( [number] ) , [string] : random . randint ( [number] , [number] * [number] * [number] ) , [string] : bool_or_none ( ) , } [EOL] sql = [string] [EOL] db . engine . execute ( text ( sql ) , ** params ) [EOL] [EOL] def check_downgrade ( self ) : [EOL] [docstring] [EOL] with self . app . app_context ( ) : [EOL] sql = [string] [EOL] submissions = db . engine . execute ( text ( sql ) ) . fetchall ( ) [EOL] [EOL] for submission in submissions : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] assert submission [ [string] ] is None [EOL] except NoSuchColumnError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Type [EOL] import typing [EOL] from __future__ import absolute_import , division , print_function , unicode_literals [EOL] [EOL] import sys [EOL] [EOL] import ansible [EOL] [EOL] try : [EOL] [comment] [EOL] from ansible . plugins . callback import CallbackBase [EOL] except ImportError : [EOL] CallbackBase = object [EOL] [EOL] [EOL] def print_red_bold ( text ) : [EOL] print ( [string] + text + [string] ) [EOL] [EOL] [EOL] class CallbackModule ( CallbackBase ) : [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] [comment] [EOL] viable_start = [ [number] , [number] , [number] ] [EOL] viable_end = [ [number] , [number] , [number] ] [EOL] ansible_version = [ int ( v ) for v in ansible . __version__ . split ( [string] ) ] [EOL] if not ( viable_start <= ansible_version < viable_end ) : [EOL] print_red_bold ( [string] [string] . format ( viable_start = [string] . join ( str ( v ) for v in viable_start ) , viable_end = [string] . join ( str ( v ) for v in viable_end ) , ) ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Tuple , List , Any [EOL] import typing [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] on_rtd = os . environ . get ( [string] , None ) == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if on_rtd : [EOL] html_theme = [string] [EOL] else : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import sphinx_rtd_theme [EOL] [EOL] html_theme = [string] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_logo = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , author , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] , ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] linkcheck_retries = [number] [EOL] linkcheck_workers = [number] [EOL] [EOL] linkcheck_ignore = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0