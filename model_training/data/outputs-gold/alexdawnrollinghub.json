from setuptools import find_packages , setup [EOL] [EOL] setup ( name = [string] , version = [string] , packages = find_packages ( ) , include_package_data = True , zip_safe = False , install_requires = [ [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import functools [EOL] from flask import ( Blueprint , flash , g , redirect , render_template , request , session , url_for ) [EOL] from werkzeug . security import check_password_hash , generate_password_hash [EOL] from rollinghub . db import get_db [EOL] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , [string] ) ) def register ( ) : [EOL] if request . method == [string] : [EOL] email = request . form [ [string] ] [EOL] nickname = request . form [ [string] ] [EOL] password = request . form [ [string] ] [EOL] password2 = request . form [ [string] ] [EOL] db , cur = get_db ( ) [EOL] error = None [EOL] if not email : [EOL] error = [string] [EOL] elif not nickname : [EOL] error = [string] [EOL] elif not password : [EOL] error = [string] [EOL] elif password != password2 : [EOL] error = [string] [EOL] else : [EOL] cur . execute ( [string] , ( email , ) ) [EOL] if cur . fetchone ( ) is not None : [EOL] error = [string] . format ( email ) [EOL] else : [EOL] cur . execute ( [string] , ( nickname , ) ) [EOL] if cur . fetchone ( ) is not None : [EOL] error = [string] . format ( nickname ) [EOL] [EOL] if error is None : [EOL] cur . execute ( [string] , ( email , nickname , generate_password_hash ( password ) ) ) [EOL] db . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] flash ( error ) [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , [string] ) ) def login ( ) : [EOL] if request . method == [string] : [EOL] email = request . form [ [string] ] [EOL] password = request . form [ [string] ] [EOL] db , cur = get_db ( ) [EOL] error = None [EOL] cur . execute ( [string] , ( email , ) ) [EOL] user = cur . fetchone ( ) [EOL] if user is None or not check_password_hash ( user [ [string] ] , password ) : [EOL] error = [string] [EOL] if error is None : [EOL] session . clear ( ) [EOL] session [ [string] ] = user [ [string] ] [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] flash ( error ) [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def logout ( ) : [EOL] session . clear ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ bp . before_app_request def load_logged_in_user ( ) : [EOL] user_id = session . get ( [string] ) [EOL] if user_id is None : [EOL] g . user = None [EOL] else : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( user_id , ) ) [EOL] g . user = cur . fetchone ( ) [EOL] [EOL] [EOL] def login_required ( view ) : [EOL] @ functools . wraps ( view ) def wrapped_view ( * args , ** kwargs ) : [EOL] if g . user is None : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return view ( * args , ** kwargs ) [EOL] return wrapped_view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Literal [EOL] import typing [EOL] import typing_extensions [EOL] import click [EOL] from flask import current_app , g [EOL] from flask . cli import with_appcontext [EOL] import psycopg2 [EOL] import psycopg2 . extras [EOL] [EOL] [EOL] def get_db ( ) : [EOL] if [string] not in g : [EOL] url = current_app . config [ [string] ] [EOL] sslmode = [string] if current_app . config [ [string] ] else [string] [EOL] g . db = psycopg2 . connect ( url , sslmode = sslmode ) [EOL] return g . db , g . db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] [EOL] [EOL] def close_db ( e = None ) : [EOL] db = g . pop ( [string] , None ) [EOL] if db is not None : [EOL] db . close ( ) [EOL] [EOL] [EOL] def init_db ( ) : [EOL] db , cur = get_db ( ) [EOL] with current_app . open_resource ( [string] ) as f : [EOL] cur . execute ( f . read ( ) ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] def init_app ( app ) : [EOL] app . teardown_appcontext ( close_db ) [EOL] app . cli . add_command ( init_db_command ) [EOL] [EOL] [EOL] @ click . command ( [string] ) @ with_appcontext def init_db_command ( ) : [EOL] init_db ( ) [EOL] click . echo ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rollinghub import create_app [EOL] [EOL] app = create_app ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Tuple , Any [EOL] import typing [EOL] import flask [EOL] from flask import ( Blueprint , current_app , flash , g , redirect , render_template , request , url_for , send_file ) [EOL] from werkzeug . exceptions import abort [EOL] from werkzeug . utils import secure_filename [EOL] from iso3166 import countries as countries_list [EOL] import io [EOL] [EOL] [EOL] from rollinghub . auth import login_required [EOL] from rollinghub . db import get_db [EOL] from rollinghub . zipper import make_zip , extract_zip [EOL] [EOL] [EOL] bp = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] def allowed_file ( filename ) : [EOL] return [string] in filename and filename . rsplit ( [string] , [number] ) [ [number] ] . lower ( ) in current_app . config [ [string] ] [EOL] [EOL] [EOL] @ bp . route ( [string] ) def index ( ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] ) [EOL] posts = cur . fetchall ( ) [EOL] return render_template ( [string] , posts = posts ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def image ( model_id ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( model_id , ) ) [EOL] model = cur . fetchone ( ) [EOL] return send_file ( io . BytesIO ( model [ [string] ] ) , mimetype = [string] , attachment_filename = model [ [string] ] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def download ( model_id ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( model_id , ) ) [EOL] model = cur . fetchone ( ) [EOL] files = [ ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) , ( [string] , model [ [string] ] ) ] [EOL] folder_name = [string] . format ( model [ [string] ] , model [ [string] ] , model [ [string] ] ) [EOL] built_zip = make_zip ( folder_name , files ) [EOL] return send_file ( built_zip , mimetype = [string] , as_attachment = True , attachment_filename = [string] . format ( folder_name ) ) [EOL] [EOL] [EOL] def add_model_to_db ( db , cur , dict_values ) : [EOL] cur . execute ( [string] , dict_values ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , [string] ) ) @ login_required def create ( ) : [EOL] if request . method == [string] : [EOL] model_title = request . form [ [string] ] [EOL] model_type = request . form [ [string] ] [EOL] countries = request . form . get ( [string] ) [EOL] manufacturer_ref = request . form . get ( [string] ) [EOL] model_tags = list ( request . form . get ( [string] , [string] ) ) [EOL] model_description = request . form [ [string] ] [EOL] variant_name = request . form [ [string] ] [EOL] variant_description = request . form [ [string] ] [EOL] variant_tags = list ( request . form [ [string] ] ) [EOL] livery_name = request . form [ [string] ] [EOL] livery_description = request . form [ [string] ] [EOL] operator_ref = request . form . get ( [string] ) [EOL] request . files [ [string] ] [EOL] error = None [EOL] if not model_title : [EOL] error = [string] [EOL] if [string] not in request . files or [string] not in request . files : [EOL] flash ( [string] ) [EOL] return redirect ( request . url ) [EOL] files = request . files [ [string] ] [EOL] image = request . files [ [string] ] [EOL] if files . filename == [string] or image . filename == [string] : [EOL] error = [string] [EOL] if error is not None : [EOL] flash ( error ) [EOL] if files and image and allowed_file ( files . filename ) and allowed_file ( image . filename ) : [EOL] imagename = secure_filename ( image . filename ) [EOL] zip_files = extract_zip ( files ) [EOL] db , cur = get_db ( ) [EOL] add_model_to_db ( db , cur , { [string] : model_title , [string] : model_description , [string] : g . user [ [string] ] , [string] : model_type , [string] : countries , [string] : manufacturer_ref , [string] : model_tags , [string] : imagename , [string] : image . read ( ) , [string] : zip_files [ [string] ] , [string] : zip_files [ [string] ] , [string] : zip_files [ [string] ] , [string] : zip_files [ [string] ] , [string] : zip_files [ [string] ] , [string] : variant_name , [string] : variant_description , [string] : variant_tags , [string] : zip_files [ [string] ] , [string] : livery_name , [string] : livery_description , [string] : operator_ref , [string] : zip_files [ [string] ] } ) [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] flash ( [string] ) [EOL] return render_template ( [string] , countries_list = countries_list ) [EOL] [EOL] [EOL] def get_post ( id , check_author = True ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( id , ) ) [EOL] post = cur . fetchone ( ) [EOL] if post is None : [EOL] abort ( [number] , [string] . format ( id ) ) [EOL] if check_author and post [ [string] ] != g . user [ [string] ] : [EOL] abort ( [number] ) [EOL] return post [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , [string] ) ) @ login_required def update ( id ) : [EOL] post = get_post ( id ) [EOL] if request . method == [string] : [EOL] title = request . form [ [string] ] [EOL] body = request . form [ [string] ] [EOL] error = None [EOL] if not title : [EOL] error = [string] [EOL] if error is not None : [EOL] flash ( error ) [EOL] else : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( title , body , id ) ) [EOL] db . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return render_template ( [string] , post = post ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ login_required def delete ( id ) : [EOL] get_post ( id ) [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] , ( id , ) ) [EOL] db . commit ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import psycopg2 [EOL] import psycopg2 . extras [EOL] import os [EOL] [EOL] [EOL] def get_db ( ) : [EOL] url = os . environ [ [string] ] [EOL] sslmode = [string] [EOL] db = psycopg2 . connect ( url , sslmode = sslmode ) [EOL] return db , db . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) [EOL] [EOL] [EOL] def init_db ( ) : [EOL] db , cur = get_db ( ) [EOL] with open ( [string] , [string] ) as f : [EOL] cur . execute ( f . read ( ) ) [EOL] db . commit ( ) [EOL] [EOL] [EOL] init_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import zipfile [EOL] import io [EOL] import zipfile [EOL] import io [EOL] import os [EOL] [EOL] [EOL] def extract_zip ( input_zip ) : [EOL] input_zip = zipfile . ZipFile ( input_zip ) [EOL] return { os . path . basename ( name ) : input_zip . read ( name ) for name in input_zip . namelist ( ) } [EOL] [EOL] [EOL] def make_zip ( folder_name , zip_files ) : [EOL] file_in_mem = io . BytesIO ( ) [EOL] with zipfile . ZipFile ( file_in_mem , [string] , zipfile . ZIP_DEFLATED , False ) as output_zip : [EOL] for f in zip_files : [EOL] output_zip . writestr ( [string] . join ( [ folder_name , f [ [number] ] ] ) , f [ [number] ] ) [EOL] for zfile in output_zip . filelist : [EOL] zfile . create_system = [number] [EOL] file_in_mem . seek ( [number] ) [EOL] return file_in_mem [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import os [EOL] from flask import Flask [EOL] from . import db , auth , model [EOL] [EOL] [EOL] def create_app ( test_config = None ) : [EOL] app = Flask ( __name__ , instance_relative_config = True ) [EOL] app . config . from_mapping ( SECRET_KEY = ( os . environ [ [string] ] if os . environ . get ( [string] ) else [string] ) , DATABASE = os . environ [ [string] ] , SSL_REQUIRE = True if os . environ . get ( [string] ) else False , MAX_CONTENT_LENGTH = [number] * [number] * [number] , ALLOWED_EXTENSIONS = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] } ) [EOL] if test_config is None : [EOL] app . config . from_pyfile ( [string] , silent = True ) [EOL] else : [EOL] app . config . from_mapping ( test_config ) [EOL] try : [EOL] os . makedirs ( app . instance_path ) [EOL] except OSError : [EOL] pass [EOL] db . init_app ( app ) [EOL] app . register_blueprint ( auth . bp ) [EOL] app . register_blueprint ( model . bp ) [EOL] app . add_url_rule ( [string] , endpoint = [string] ) [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rollinghub import create_app [EOL] [EOL] [EOL] def test_config ( ) : [EOL] assert not create_app ( ) . testing [EOL] assert create_app ( { [string] : True } ) . testing [EOL] [EOL] [EOL] def test_hello ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert bytes ( [string] , [string] ) in response . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import psycopg2 [EOL] [EOL] import pytest [EOL] from rollinghub . db import get_db [EOL] [EOL] [EOL] def test_get_close_db ( app ) : [EOL] with app . app_context ( ) : [EOL] db , cur = get_db ( ) [EOL] db2 , cur2 = get_db ( ) [EOL] assert db == db2 [EOL] [EOL] with pytest . raises ( psycopg2 . InterfaceError ) as e : [EOL] cur . execute ( [string] ) [EOL] [EOL] assert [string] in str ( e . value ) [EOL] [EOL] [EOL] def test_init_db_command ( runner , monkeypatch ) : [EOL] class Recorder ( object ) : [EOL] called = False [EOL] [EOL] def fake_init_db ( ) : [EOL] Recorder . called = True [EOL] [EOL] monkeypatch . setattr ( [string] , fake_init_db ) [EOL] result = runner . invoke ( args = [ [string] ] ) [EOL] assert [string] in result . output [EOL] assert Recorder . called [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] from rollinghub import create_app [EOL] from rollinghub . db import get_db , init_db [EOL] [EOL] [EOL] with open ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) , [string] ) as f : [EOL] _data_sql = f . read ( ) . decode ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def app ( ) : [EOL] app = create_app ( { [string] : True , [string] : os . environ [ [string] ] , } ) [EOL] [EOL] with app . app_context ( ) : [EOL] init_db ( ) [EOL] db , cur = get_db ( ) [EOL] cur . execute ( _data_sql ) [EOL] db . commit ( ) [EOL] yield app [EOL] [EOL] [EOL] @ pytest . fixture def client ( app ) : [EOL] return app . test_client ( ) [EOL] [EOL] [EOL] @ pytest . fixture def runner ( app ) : [EOL] return app . test_cli_runner ( ) [EOL] [EOL] [EOL] class AuthActions ( object ) : [EOL] def __init__ ( self , client ) : [EOL] self . _client = client [EOL] [EOL] def login ( self , email = [string] , password = [string] ) : [EOL] return self . _client . post ( [string] , data = { [string] : email , [string] : password } ) [EOL] [EOL] def logout ( self ) : [EOL] return self . _client . get ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def auth ( client ) : [EOL] return AuthActions ( client ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from rollinghub . db import get_db [EOL] [EOL] [EOL] def test_index ( client , auth ) : [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] [EOL] auth . login ( ) [EOL] response = client . get ( [string] ) [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] assert [string] in response . data [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , ) ) def test_login_required ( client , path ) : [EOL] response = client . post ( path ) [EOL] assert response . headers [ [string] ] == [string] [EOL] [EOL] [EOL] def test_author_required ( app , client , auth ) : [EOL] [comment] [EOL] with app . app_context ( ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] ) [EOL] db . commit ( ) [EOL] [EOL] auth . login ( ) [EOL] [comment] [EOL] assert client . post ( [string] ) . status_code == [number] [EOL] assert client . post ( [string] ) . status_code == [number] [EOL] [comment] [EOL] assert [string] not in client . get ( [string] ) . data [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , ) ) def test_exists_required ( client , auth , path ) : [EOL] auth . login ( ) [EOL] assert client . post ( path ) . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from flask import g , session [EOL] from rollinghub . db import get_db [EOL] [EOL] [EOL] def test_register ( client , app ) : [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] response = client . post ( [string] , data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] assert [string] == response . headers [ [string] ] [EOL] [EOL] with app . app_context ( ) : [EOL] db , cur = get_db ( ) [EOL] cur . execute ( [string] ) [EOL] assert cur . fetchone ( ) is not None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( ( [string] , [string] , [string] , [string] , [string] ) , ( ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ) ) def test_register_validate_input ( client , email , nickname , password , password2 , message ) : [EOL] response = client . post ( [string] , data = { [string] : email , [string] : nickname , [string] : password , [string] : password2 } ) [EOL] assert message in response . data [EOL] [EOL] [EOL] def test_login ( client , auth ) : [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] response = auth . login ( ) [EOL] assert response . headers [ [string] ] == [string] [EOL] [EOL] with client : [EOL] client . get ( [string] ) [EOL] assert session [ [string] ] == [number] [EOL] assert g . user [ [string] ] == [number] [EOL] assert g . user [ [string] ] == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( ( [string] , [string] , [string] ) , ( ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ) ) def test_login_validate_input ( auth , email , password , message ) : [EOL] response = auth . login ( email , password ) [EOL] assert message in response . data [EOL] [EOL] [EOL] def test_logout ( client , auth ) : [EOL] auth . login ( ) [EOL] [EOL] with client : [EOL] auth . logout ( ) [EOL] assert [string] not in session [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0