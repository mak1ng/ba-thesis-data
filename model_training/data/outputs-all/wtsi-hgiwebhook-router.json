from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import os [EOL] from typing import List [EOL] import sys [EOL] [EOL] from elasticsearch import Elasticsearch [EOL] from elasticsearch_dsl import MultiSearch , Search [EOL] from elasticsearch . exceptions import NotFoundError [EOL] [EOL] from . models import extract_route_dict [EOL] [EOL] [EOL] class StatisticQueryier : [EOL] def __init__ ( self , elasticurl ) : [EOL] self . _es = Elasticsearch ( elasticurl ) [EOL] self . _index = [string] [EOL] [EOL] [comment] [EOL] self . _es . indices . create ( index = self . _index , ignore = [number] ) [EOL] [EOL] def _logs_query ( self , uuid , success ) : [EOL] search = Search ( using = self . _es , index = self . _index ) [EOL] [EOL] return search . query ( [string] , uuid = uuid ) . query ( [string] , success = success ) [EOL] [EOL] def get_route_logs ( self , uuid ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] return [ x for x in self . _logs_query ( uuid , False ) . sort ( [string] ) . execute ( ) . hits ] [EOL] [EOL] def get_route_stats ( self , uuid ) : [EOL] [docstring] [EOL] [EOL] successes = self . _logs_query ( uuid , True ) . count ( ) [EOL] failures = self . _logs_query ( uuid , False ) . count ( ) [EOL] [EOL] return { [string] : successes , [string] : failures } [EOL] [EOL] def get_many_routes_stats ( self , uuids ) : [EOL] [docstring] [EOL] [EOL] msearch = MultiSearch ( using = self . _es , index = self . _index ) [EOL] [EOL] for uuid in uuids : [EOL] msearch = msearch . add ( self . _logs_query ( uuid , True ) ) [EOL] msearch = msearch . add ( self . _logs_query ( uuid , False ) ) [EOL] [EOL] responses = msearch . execute ( ) [EOL] [EOL] assert len ( responses ) == len ( uuids ) * [number] [EOL] [EOL] route_stats = [ ] [EOL] for i in range ( len ( uuids ) ) : [EOL] route_stats . append ( { [string] : responses [ i * [number] ] . hits . total , [string] : responses [ i * [number] + [number] ] . hits . total } ) [EOL] [EOL] return route_stats [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from . auth import test_auth [EOL] from . configserver import ConfigServer , get_postgres_db , main , start_server [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Type , Any [EOL] import server [EOL] import typing [EOL] from peewee import ( BooleanField , CharField , Database , DoesNotExist , ForeignKeyField , IntegerField , Model , Proxy , SqliteDatabase ) [EOL] [EOL] proxy_db = Proxy ( ) [EOL] [EOL] class Route ( Model ) : [EOL] uuid = CharField ( unique = True ) [EOL] name = CharField ( ) [EOL] destination = CharField ( ) [EOL] no_ssl_verification = BooleanField ( ) [EOL] rate_limit = IntegerField ( ) [EOL] token = CharField ( ) [EOL] [comment] [EOL] token_id = CharField ( ) [EOL] [EOL] class Meta : [EOL] database = proxy_db [EOL] [EOL] def extract_route_dict ( route ) : [EOL] [docstring] [EOL] public_fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] new_ob = { } [EOL] [EOL] for field in public_fields : [EOL] new_ob [ field ] = getattr ( route , field ) [EOL] [EOL] return new_ob [EOL] [EOL] class UserLink ( Model ) : [EOL] user = CharField ( ) [EOL] route = ForeignKeyField ( Route , to_field = [string] , on_delete = [string] ) [EOL] [EOL] class Meta : [EOL] database = proxy_db [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Type , Any [EOL] import argparse [EOL] import builtins [EOL] import server [EOL] import typing [EOL] import peewee [EOL] import argparse [EOL] import json [EOL] import os [EOL] from functools import partial [EOL] from http import HTTPStatus [EOL] from typing import Callable , Type , Any [EOL] import time [EOL] import logging [EOL] [EOL] import connexion [EOL] import flask [EOL] from flask_cors import CORS [EOL] from peewee import Database , PostgresqlDatabase , SqliteDatabase , OperationalError [EOL] [EOL] from . auth import * [EOL] from . ConnexionDespatcher import ConnexionDespatcher [EOL] from . errors import * [EOL] from . logging import * [EOL] from . models import Route , UserLink , proxy_db [EOL] from . RouteDataMapper import RouteDataMapper [EOL] from . StatisticQueryier import StatisticQueryier [EOL] from . UserLinkDataMapper import UserLinkDataMapper [EOL] [EOL] logger = ConfigServerLogger ( ) [EOL] DB_CONNECT_RETRY_ATTEMPTS = [number] [EOL] [EOL] class ConfigServer : [EOL] [docstring] [EOL] def __init__ ( self , use_test_auth , db , config_JSON ) : [EOL] self . _db = db [EOL] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( DB_CONNECT_RETRY_ATTEMPTS ) : [EOL] try : [EOL] db . connect ( ) [EOL] except OperationalError : [EOL] logger . warning ( [string] , extra = { [string] : i + [number] , [string] : DB_CONNECT_RETRY_ATTEMPTS } ) [EOL] [EOL] if i + [number] == DB_CONNECT_RETRY_ATTEMPTS - [number] : [EOL] raise [EOL] else : [EOL] logger . info ( [string] ) [EOL] break [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] proxy_db . initialize ( db ) [EOL] db . create_tables ( [ Route , UserLink ] , safe = True ) [EOL] db . close ( ) [EOL] [EOL] user_link_dm = UserLinkDataMapper ( ) [EOL] route_dm = RouteDataMapper ( user_link_dm ) [EOL] [EOL] if [string] in os . environ : [EOL] password_prefix = f"{ os . environ [ [string] ] } [string] { os . environ [ [string] ] } [string] " [EOL] else : [EOL] password_prefix = [string] [EOL] stat_queryier = StatisticQueryier ( f" [string] { password_prefix }{ os . environ [ [string] ] } [string] " ) [EOL] [EOL] self . depatcher = ConnexionDespatcher ( use_test_auth , route_dm , user_link_dm , stat_queryier , logger , config_JSON [ [string] ] ) [EOL] [EOL] self . app = connexion . App ( __name__ , specification_dir = [string] , server = [string] , auth_all_paths = ( not use_test_auth ) ) [EOL] CORS ( self . app . app , origins = f"{ config_JSON [ [string] ] } [string] " ) [EOL] [EOL] self . _set_error_handlers ( ) [EOL] self . _setup_logging ( ) [EOL] [EOL] self . app . app . after_request ( self . on_after_request ) [EOL] [EOL] standard_securities = [ { [string] : [string] , [string] : [string] } ] [EOL] [EOL] self . app . add_api ( [string] , resolver = connexion . Resolver ( self . depatcher . resolve_name ) , validate_responses = True , arguments = { [string] : [ ] if use_test_auth else standard_securities , [string] : not use_test_auth } ) [EOL] [EOL] def _setup_logging ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] logging . getLogger ( [string] ) . setLevel ( logging . CRITICAL ) [EOL] [EOL] add_file_log_handler ( logging . root ) [EOL] logging . root . addHandler ( logging . StreamHandler ( ) ) [EOL] [EOL] [comment] [EOL] add_file_log_handler ( self . app . app . logger ) [EOL] [EOL] @ staticmethod def on_after_request ( response ) : [EOL] logger . log_http_request ( response ) [EOL] [EOL] return response [EOL] [EOL] def _set_error_handler ( self , error_class , error_num , error_message , error_code ) : [EOL] [docstring] [EOL] def handler ( error ) : [EOL] logger . warning ( error . __repr__ ( ) ) [EOL] return flask . make_response ( flask . jsonify ( { [string] : error_message , [string] : error_num } ) , error_code ) [EOL] self . app . add_error_handler ( error_class , handler ) [EOL] [EOL] def _set_error_handlers ( self ) : [EOL] self . _set_error_handler ( InvalidRouteUUIDError , [number] , [string] , HTTPStatus . NOT_FOUND ) [EOL] self . _set_error_handler ( InvalidRouteTokenError , [number] , [string] , HTTPStatus . NOT_FOUND ) [EOL] self . _set_error_handler ( NotAuthorisedError , [number] , [string] , HTTPStatus . FORBIDDEN ) [EOL] self . _set_error_handler ( InvalidURLError , [number] , [string] , HTTPStatus . BAD_REQUEST ) [EOL] self . _set_error_handler ( InvalidCredentialsError , [number] , [string] , HTTPStatus . BAD_REQUEST ) [EOL] self . _set_error_handler ( RouteLinkNotFound , [number] , [string] , HTTPStatus . NOT_FOUND ) [EOL] [EOL] def close ( self ) : [EOL] self . _db . close ( ) [EOL] [EOL] def get_postgres_db ( ) : [EOL] return PostgresqlDatabase ( os . environ [ [string] ] , user = os . environ [ [string] ] , password = os . environ [ [string] ] , host = os . environ [ [string] ] , autorollback = True ) [EOL] [EOL] def start_server ( debug , port , host , config_JSON ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] server = ConfigServer ( use_test_auth = debug , db = get_postgres_db ( ) , config_JSON = config_JSON ) [EOL] [EOL] logger . info ( [string] , extra = { [string] : port , [string] : host } ) [EOL] [EOL] server . app . run ( port = port , host = host ) [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , action = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , action = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , type = int , default = [number] ) [EOL] parser . add_argument ( [string] , help = [string] , default = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , default = [string] ) [EOL] [EOL] options = parser . parse_args ( ) [EOL] [EOL] with open ( options . config_JSON ) as config_file : [EOL] config_JSON = json . load ( config_file ) [EOL] [EOL] if options . verbose : [EOL] logging . getLogger ( ) . setLevel ( logging . INFO ) [EOL] [EOL] if options . debug : [EOL] logger . warning ( [string] ) [EOL] [EOL] start_server ( options . debug , options . port , options . host , config_JSON ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.Exception]$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.Exception]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class InvalidCredentialsError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class NotAuthorisedError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidRouteUUIDError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class RouteLinkNotFound ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidURLError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidRouteTokenError ( Exception ) : [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import RouteDataMapper [EOL] import urllib [EOL] import builtins [EOL] import server [EOL] import typing [EOL] import StatisticQueryier [EOL] import UserLinkDataMapper [EOL] import logging [EOL] import copy [EOL] from functools import wraps [EOL] from http import HTTPStatus [EOL] from typing import Callable , Type [EOL] from urllib . parse import urlparse [EOL] import flask [EOL] [EOL] from . errors import * [EOL] from . auth import * [EOL] from . logging import ConfigServerLogger [EOL] from . models import extract_route_dict [EOL] from . RouteDataMapper import RouteDataMapper [EOL] from . StatisticQueryier import StatisticQueryier [EOL] from . UserLinkDataMapper import UserLinkDataMapper [EOL] [EOL] [comment] [EOL] route_data_mapper_mappings = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] user_link_data_mapper_mapppings = { [string] : [string] , [string] : [string] } [EOL] [EOL] [comment] [EOL] [comment] [EOL] status_codes = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] class ConnexionDespatcher : [EOL] [docstring] [EOL] def __init__ ( self , use_test_auth , route_data_mapper , user_link_data_mapper , statistic_queryier , logger , google_oauth_client_id ) : [EOL] self . _use_test_auth = use_test_auth [EOL] self . _route_data_mapper = route_data_mapper [EOL] self . _user_link_data_mapper = user_link_data_mapper [EOL] self . _statistic_queryier = statistic_queryier [EOL] self . _logger = logger [EOL] self . _google_oauth_client_id = google_oauth_client_id [EOL] [EOL] def resolve_name ( self , name ) : [EOL] [docstring] [EOL] try : [EOL] func = getattr ( self . _route_data_mapper , route_data_mapper_mappings [ name ] ) [EOL] except KeyError : [EOL] try : [EOL] func = getattr ( self . _user_link_data_mapper , user_link_data_mapper_mapppings [ name ] ) [EOL] except KeyError : [EOL] func = getattr ( self , name ) [EOL] [EOL] @ wraps ( func ) def connextion_wrapper ( * args , ** kwargs ) : [EOL] [docstring] [EOL] user = [string] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if name != [string] : [EOL] if self . _use_test_auth : [EOL] user = test_auth ( ) [EOL] else : [EOL] user = normal_auth ( self . _google_oauth_client_id ) [EOL] [EOL] if [string] in func . __code__ . co_varnames : [EOL] resp = func ( * args , user = user , ** kwargs ) [EOL] else : [EOL] resp = func ( * args , ** kwargs ) [EOL] [EOL] code = status_codes . get ( name ) [EOL] [comment] [EOL] if code is not None : [EOL] resp = ( resp , code ) [EOL] except : [EOL] resp = [string] [EOL] raise [EOL] finally : [EOL] self . _logger . log_swagger_request ( name , kwargs , resp , user ) [EOL] [EOL] return resp [EOL] [EOL] return connextion_wrapper [EOL] [EOL] def create_route ( self , new_route , user ) : [EOL] [comment] [EOL] acceptable_schemes = [ [string] , [string] ] [EOL] [EOL] new_route = copy . deepcopy ( new_route ) [EOL] new_route [ [string] ] = new_route . get ( [string] , False ) [EOL] new_route [ [string] ] = new_route . get ( [string] , [number] ) [EOL] [EOL] try : [EOL] url_ob = urlparse ( new_route [ [string] ] ) [EOL] except SyntaxError : [EOL] raise InvalidURLError ( ) [EOL] [EOL] if url_ob . scheme not in acceptable_schemes : [EOL] raise InvalidURLError ( ) [EOL] [EOL] route = self . _route_data_mapper . add ( user = user , ** new_route ) [EOL] [EOL] return route [EOL] [EOL] [EOL] def add_route_link ( self , user , uuid ) : [EOL] [comment] [EOL] route = self . _route_data_mapper . get ( uuid ) [EOL] [EOL] self . _user_link_data_mapper . add_user_link ( user , uuid ) [EOL] [EOL] return route [EOL] [EOL] def get_all_routes_stats ( self , user ) : [EOL] user_routes = self . _user_link_data_mapper . get_users_links ( user ) [EOL] uuids = [ route [ [string] ] for route in user_routes ] [EOL] [EOL] if len ( uuids ) == [number] : [EOL] return [ ] [EOL] [EOL] stats = self . _statistic_queryier . get_many_routes_stats ( uuids ) [EOL] [EOL] for ( i , stat ) in enumerate ( stats ) : [EOL] stat [ [string] ] = uuids [ i ] [EOL] [EOL] return stats [EOL] [EOL] def get_route_link ( self , user , uuid ) : [EOL] if not self . _user_link_data_mapper . has_user_link ( user , uuid ) : [EOL] raise RouteLinkNotFound ( ) [EOL] [EOL] return self . _route_data_mapper . get ( uuid ) [EOL] [EOL] def get_route_logs ( self , uuid ) : [EOL] [comment] [EOL] self . _route_data_mapper . get ( uuid ) [EOL] [EOL] return self . _statistic_queryier . get_route_logs ( uuid ) [EOL] [EOL] def get_route_stats ( self , uuid ) : [EOL] [comment] [EOL] self . _route_data_mapper . get ( uuid ) [EOL] [EOL] return self . _statistic_queryier . get_route_stats ( uuid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.object$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] import flask [EOL] from pythonjsonlogger import jsonlogger [EOL] from cmreslogging . handlers import CMRESHandler [EOL] import os [EOL] import sys [EOL] import requests [EOL] import time [EOL] [EOL] LOGGING_CONFIG = [string] [EOL] [EOL] def add_file_log_handler ( logger ) : [EOL] [docstring] [EOL] handler = logging . FileHandler ( [string] ) [EOL] json_formatter = jsonlogger . JsonFormatter ( LOGGING_CONFIG ) [EOL] handler . setFormatter ( json_formatter ) [EOL] logger . addHandler ( handler ) [EOL] [EOL] class ConfigServerLogger : [EOL] def __init__ ( self ) : [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . propagate = False [EOL] logger . setLevel ( logging . INFO ) [EOL] json_formatter = jsonlogger . JsonFormatter ( LOGGING_CONFIG ) [EOL] [EOL] stdout_handler = logging . StreamHandler ( ) [EOL] stdout_handler . setFormatter ( json_formatter ) [EOL] logger . addHandler ( stdout_handler ) [EOL] [EOL] [comment] [EOL] [EOL] first_time_check = True [EOL] while True : [EOL] try : [EOL] es_json = requests . get ( f""" [string] { os . environ [ [string] ] } [string] """ ) . json ( ) [EOL] if es_json [ [string] ] != [string] : [EOL] logger . info ( f" [string] { es_json [ [string] ] } [string] " ) [EOL] break [EOL] except requests . exceptions . ConnectionError : [EOL] pass [EOL] [EOL] if first_time_check : [EOL] logger . warn ( [string] ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] first_time_check = False [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] print ( [string] , file = sys . stderr ) [EOL] es_handler = CMRESHandler ( hosts = [ { [string] : os . environ [ [string] ] , [string] : [number] } ] , auth_type = CMRESHandler . AuthType . BASIC_AUTH , es_index_name = [string] ) [EOL] logger . addHandler ( es_handler ) [EOL] logger . warn ( [string] ) [EOL] print ( [string] , file = sys . stderr ) [EOL] [EOL] [EOL] self . logger = logger [EOL] self . info = logger . info [EOL] self . warning = logger . warning [EOL] self . error = logger . error [EOL] [EOL] def log_http_request ( self , response ) : [EOL] request = flask . request [EOL] if response . status_code < [number] : [EOL] log_method = self . logger . info [EOL] elif [number] <= response . status_code < [number] : [EOL] log_method = self . logger . warning [EOL] else : [EOL] log_method = self . logger . error [EOL] [EOL] log_method ( [string] , extra = { [string] : request . method , [string] : request . url , [string] : request . remote_addr , [string] : str ( request . user_agent ) , [string] : response . status_code } ) [EOL] [EOL] def log_swagger_request ( self , method_name , swagger_params , response , user ) : [EOL] self . logger . info ( [string] , extra = { [string] : method_name , [string] : swagger_params , [string] : user , [string] : response } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 $flask.wrappers.Request$ 0 0 0 $flask.wrappers.Request$ 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.wrappers.Request$ 0 0 0 0 0 $flask.wrappers.Request$ 0 0 0 0 0 $flask.wrappers.Request$ 0 0 0 0 0 0 0 $flask.wrappers.Request$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import server [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from abc import ABC , ABCMeta [EOL] [EOL] from peewee import DoesNotExist [EOL] [EOL] from . errors import * [EOL] from . models import Route , UserLink , extract_route_dict [EOL] [EOL] [EOL] class UserLinkDataMapper : [EOL] [docstring] [EOL] [EOL] def _try_get_link ( self , user , uuid ) : [EOL] return UserLink . get ( ( UserLink . route == uuid ) & ( UserLink . user == user ) ) [EOL] [EOL] def add_user_link ( self , user , uuid ) : [EOL] try : [EOL] link = self . _try_get_link ( user , uuid ) [EOL] except DoesNotExist : [EOL] link = UserLink ( user = user , route = uuid ) [EOL] [EOL] link . save ( ) [EOL] [EOL] def has_user_link ( self , user , uuid ) : [EOL] try : [EOL] self . _try_get_link ( user , uuid ) [EOL] except DoesNotExist : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] def get_users_links ( self , user ) : [EOL] routes = Route . select ( ) . join ( UserLink ) . where ( UserLink . user == user ) [EOL] [EOL] return [ extract_route_dict ( route ) for route in routes ] [EOL] [EOL] def remove_user_link ( self , user , uuid ) : [EOL] try : [EOL] link = self . _try_get_link ( user , uuid ) [EOL] except DoesNotExist as e : [EOL] pass [comment] [EOL] else : [EOL] link . delete_instance ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.UserLink$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.UserLink$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.UserLink$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from . configserver import main [EOL] [EOL] main ( )	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import server [EOL] import typing [EOL] import models [EOL] import UserLinkDataMapper [EOL] import logging [EOL] import logging [EOL] import secrets [EOL] import uuid [EOL] [EOL] from peewee import DoesNotExist [EOL] [EOL] from . errors import * [EOL] from . models import Route , extract_route_dict [EOL] from . UserLinkDataMapper import UserLinkDataMapper [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] TOKEN_ID_LENGTH = [number] [EOL] [EOL] class RouteDataMapper : [EOL] [docstring] [EOL] def __init__ ( self , user_link_datamapper ) : [EOL] self . _user_link_datamapper = user_link_datamapper [EOL] [EOL] def _get_route_from_uuid ( self , uuid ) : [EOL] try : [EOL] return Route . get ( Route . uuid == uuid ) [EOL] except DoesNotExist as e : [EOL] raise InvalidRouteUUIDError ( ) from e [EOL] [EOL] @ staticmethod def _generate_new_token ( ) : [EOL] [docstring] [EOL] token_id = secrets . token_urlsafe ( ) [ : TOKEN_ID_LENGTH ] [EOL] token = token_id + secrets . token_urlsafe ( ) [EOL] [EOL] return token , token_id [EOL] [EOL] def update ( self , uuid , new_info ) : [EOL] route = self . _get_route_from_uuid ( uuid ) [EOL] for key in new_info : [EOL] setattr ( route , key , new_info [ key ] ) [EOL] [EOL] route . save ( ) [EOL] [EOL] def delete ( self , uuid ) : [EOL] try : [EOL] route = self . _get_route_from_uuid ( uuid ) [EOL] except InvalidRouteUUIDError : [EOL] pass [comment] [EOL] else : [EOL] route . delete_instance ( ) [EOL] [EOL] def get ( self , uuid ) : [EOL] return extract_route_dict ( self . _get_route_from_uuid ( uuid ) ) [EOL] [EOL] def get_by_token ( self , token ) : [EOL] token_id = token [ : TOKEN_ID_LENGTH ] [EOL] routes = Route . select ( ) . where ( Route . token_id == token_id ) [EOL] [EOL] if len ( routes ) != [number] : [EOL] raise InvalidRouteTokenError ( ) [EOL] else : [EOL] if secrets . compare_digest ( routes [ [number] ] . token , token ) : [EOL] return extract_route_dict ( routes [ [number] ] ) [EOL] else : [EOL] raise InvalidRouteTokenError ( ) [EOL] [EOL] def add ( self , user , ** kwargs ) : [EOL] route_uuid = str ( uuid . uuid4 ( ) ) [EOL] token , token_id = RouteDataMapper . _generate_new_token ( ) [EOL] [EOL] route = Route ( ** kwargs , uuid = route_uuid , token = token , token_id = token_id ) [EOL] [EOL] route . save ( ) [EOL] [EOL] self . _user_link_datamapper . add_user_link ( user , route_uuid ) [EOL] [EOL] return extract_route_dict ( route ) [EOL] [EOL] def regenerate_token ( self , uuid ) : [EOL] route = self . _get_route_from_uuid ( uuid ) [EOL] new_token , new_token_id = RouteDataMapper . _generate_new_token ( ) [EOL] route . token = new_token [EOL] route . token_id = new_token_id [EOL] route . save ( ) [EOL] [EOL] return { ** extract_route_dict ( route ) , [string] : new_token } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.Route$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.Route$ 0 0 0 0 0 $config-server.configserver.models.Route$ 0 0 0 0 0 $config-server.configserver.models.Route$ 0 0 0 0 0 0 0 0 0 0 0 $config-server.configserver.models.Route$ 0 0 0 0 0 0 0