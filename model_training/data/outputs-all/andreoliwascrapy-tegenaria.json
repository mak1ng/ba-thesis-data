[comment] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import tegenaria [EOL] import builtins [EOL] [docstring] [EOL] from sqlalchemy . dialects import postgresql [EOL] from sqlalchemy . sql . functions import func [EOL] [EOL] from tegenaria . database import Column , Model , SurrogatePK , db , reference_column , relationship [EOL] [EOL] [EOL] class Apartment ( SurrogatePK , Model ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] url = Column ( db . String ( ) , unique = True , nullable = False ) [EOL] active = Column ( db . Boolean , default = True , nullable = False ) [EOL] title = Column ( db . String ( ) ) [EOL] address = Column ( db . String ( ) ) [EOL] neighborhood = Column ( db . String ( ) ) [EOL] rooms = Column ( db . Numeric ( [number] , [number] ) ) [EOL] size = Column ( db . Numeric ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] cold_rent_price = Column ( db . Numeric ( [number] , [number] ) ) [EOL] warm_rent_price = Column ( db . Numeric ( [number] , [number] ) ) [EOL] additional_price = Column ( db . Numeric ( [number] , [number] ) ) [EOL] heating_price = Column ( db . Numeric ( [number] , [number] ) ) [EOL] [EOL] opinion_id = reference_column ( [string] , True ) [EOL] opinion = relationship ( [string] ) [EOL] [EOL] description = Column ( db . String ( ) ) [EOL] equipment = Column ( db . String ( ) ) [EOL] location = Column ( db . String ( ) ) [EOL] other = Column ( db . String ( ) ) [EOL] availability = Column ( db . Date ) [EOL] comments = Column ( db . String ( ) ) [EOL] [EOL] json = db . Column ( postgresql . JSONB ( none_as_null = True ) , nullable = False ) [EOL] errors = db . Column ( postgresql . JSONB ( none_as_null = True ) ) [EOL] [EOL] created_at = Column ( db . DateTime , default = func . now ( ) ) [EOL] updated_at = Column ( db . DateTime , onupdate = func . now ( ) , default = func . now ( ) ) [EOL] [EOL] distances = relationship ( [string] ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . id , self . url , self . opinion . title if self . opinion else [string] ) [EOL] [EOL] @ classmethod def get_or_create ( cls , url ) : [EOL] [docstring] [EOL] return cls . query . filter_by ( url = url ) . first ( ) or Apartment ( ) [EOL] [EOL] [EOL] class Opinion ( SurrogatePK , Model ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] title = Column ( db . String ( ) ) [EOL] [EOL] [EOL] class Pin ( SurrogatePK , Model ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] name = Column ( db . String ( ) ) [EOL] address = Column ( db . String ( ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . name , self . address ) [EOL] [EOL] [EOL] class Distance ( SurrogatePK , Model ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] apartment_id = reference_column ( [string] ) [EOL] apartment = relationship ( [string] ) [EOL] [EOL] pin_id = reference_column ( [string] ) [EOL] pin = relationship ( [string] ) [EOL] [EOL] meters = Column ( db . Integer ( ) , nullable = False ) [EOL] minutes = Column ( db . Integer ( ) , nullable = False ) [EOL] [EOL] [comment] [EOL] json = db . Column ( postgresql . JSONB ( none_as_null = True ) , nullable = False ) [EOL] updated_at = Column ( db . DateTime , nullable = False , onupdate = func . now ( ) , default = func . now ( ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . apartment . address , self . pin . address , self . meters , self . minutes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Apartment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[tegenaria.models.Opinion]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[tegenaria.models.Pin]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Pin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Distance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Pattern , Type [EOL] import typing [EOL] import tegenaria [EOL] import builtins [EOL] [docstring] [EOL] import re [EOL] [EOL] from scrapy import Field , Item [EOL] from scrapy . loader . processors import Join , MapCompose [EOL] [EOL] REGEX_DIGITS_SEPARATORS_ONLY = re . compile ( [string] ) [EOL] REGEX_DECIMAL_POINT = re . compile ( [string] ) [EOL] REGEX_DECIMAL_COMMA = re . compile ( [string] ) [EOL] REGEX_GROUP_OF_THREE_COMMA = re . compile ( [string] ) [EOL] REGEX_GROUP_OF_THREE_POINT = re . compile ( [string] ) [EOL] [EOL] [EOL] def clean_number ( value ) : [EOL] [docstring] [EOL] digits_separators = REGEX_DIGITS_SEPARATORS_ONLY . findall ( value ) [EOL] value = [string] . join ( digits_separators ) [EOL] [EOL] if REGEX_DECIMAL_POINT . match ( value ) or REGEX_GROUP_OF_THREE_COMMA . match ( value ) : [EOL] value = value . replace ( [string] , [string] ) [EOL] elif REGEX_DECIMAL_COMMA . match ( value ) or REGEX_GROUP_OF_THREE_POINT . match ( value ) : [EOL] value = value . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] for ending in ( [string] , [string] ) : [EOL] if value . endswith ( ending ) : [EOL] value = value [ [number] : - len ( ending ) ] [EOL] return value [EOL] [EOL] [EOL] class ApartmentItem ( Item ) : [EOL] [docstring] [EOL] [EOL] url = Field ( output_processor = Join ( ) ) [EOL] active = Field ( output_processor = Join ( ) ) [EOL] title = Field ( output_processor = Join ( ) ) [EOL] address = Field ( output_processor = Join ( ) ) [EOL] neighborhood = Field ( output_processor = Join ( ) ) [EOL] rooms = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] size = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] [EOL] cold_rent_price = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] warm_rent_price = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] additional_price = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] heating_price = Field ( input_processor = MapCompose ( clean_number ) , output_processor = Join ( ) ) [EOL] [EOL] comments = Field ( output_processor = Join ( ) ) [EOL] description = Field ( output_processor = Join ( ) ) [EOL] equipment = Field ( output_processor = Join ( ) ) [EOL] location = Field ( output_processor = Join ( ) ) [EOL] availability = Field ( output_processor = Join ( ) ) [EOL] other = Field ( output_processor = Join ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.items.ApartmentItem]$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from flask_debugtoolbar import DebugToolbarExtension [EOL] from flask_migrate import Migrate [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] db = SQLAlchemy ( ) [EOL] [EOL] migrate = Migrate ( ) [EOL] [EOL] debug_toolbar = DebugToolbarExtension ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[docstring] [EOL]	0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import tegenaria [EOL] import tests [EOL] [docstring] [EOL] from factory import Sequence [EOL] from factory . alchemy import SQLAlchemyModelFactory [EOL] [EOL] from tegenaria . database import db [EOL] from tegenaria . models import Pin [EOL] [EOL] [EOL] class BaseFactory ( SQLAlchemyModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] [EOL] abstract = True [EOL] sqlalchemy_session = db . session [EOL] [EOL] [EOL] class PinFactory ( BaseFactory ) : [EOL] [docstring] [EOL] [EOL] name = Sequence ( lambda n : [string] . format ( n ) ) [EOL] address = Sequence ( lambda n : [string] . format ( n ) ) [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] [EOL] model = Pin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[tests.factories.BaseFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.factories.PinFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.factories.PinFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tegenaria.models.Pin]$ 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] from sqlalchemy . dialects import postgresql [EOL] [EOL] from tegenaria . generic import add_mandatory_column [EOL] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [docstring] [EOL] add_mandatory_column ( [string] , [string] , postgresql . JSONB ( astext_type = sa . Text ( ) ) , [string] ) [EOL] op . add_column ( [string] , sa . Column ( [string] , postgresql . JSONB ( astext_type = sa . Text ( ) ) , nullable = True ) ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . BOOLEAN ( ) , nullable = False ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( ) , type_ = sa . Numeric ( precision = [number] , scale = [number] ) , existing_nullable = True , postgresql_using = [string] , ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( ) , type_ = sa . Numeric ( precision = [number] , scale = [number] ) , existing_nullable = True , postgresql_using = [string] , ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( ) , type_ = sa . Numeric ( precision = [number] , scale = [number] ) , existing_nullable = True , postgresql_using = [string] , ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . VARCHAR ( ) , type_ = sa . Numeric ( precision = [number] , scale = [number] ) , existing_nullable = True , postgresql_using = [string] , ) [EOL] [EOL] add_mandatory_column ( [string] , [string] , postgresql . JSONB ( astext_type = sa . Text ( ) ) , [string] ) [EOL] add_mandatory_column ( [string] , [string] , sa . Integer ( ) , [string] ) [EOL] add_mandatory_column ( [string] , [string] , sa . Integer ( ) , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [docstring] [EOL] add_mandatory_column ( [string] , [string] , sa . VARCHAR ( ) , [string] ) [EOL] add_mandatory_column ( [string] , [string] , sa . INTEGER ( ) , [string] ) [EOL] add_mandatory_column ( [string] , [string] , sa . VARCHAR ( ) , [string] ) [EOL] add_mandatory_column ( [string] , [string] , sa . INTEGER ( ) , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . Numeric ( precision = [number] , scale = [number] ) , type_ = sa . VARCHAR ( ) , existing_nullable = True , ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . Numeric ( precision = [number] , scale = [number] ) , type_ = sa . VARCHAR ( ) , existing_nullable = True ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . Numeric ( precision = [number] , scale = [number] ) , type_ = sa . VARCHAR ( ) , existing_nullable = True ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . Numeric ( precision = [number] , scale = [number] ) , type_ = sa . VARCHAR ( ) , existing_nullable = True , ) [EOL] [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . VARCHAR ( ) , autoincrement = False , nullable = True ) ) [EOL] op . alter_column ( [string] , [string] , existing_type = sa . BOOLEAN ( ) , nullable = True ) [EOL] op . drop_column ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import sqlalchemy as sa [EOL] from alembic import op [EOL] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [docstring] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . NUMERIC ( precision = [number] , scale = [number] ) , type_ = sa . Numeric ( precision = [number] , scale = [number] ) , existing_nullable = True , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] [docstring] [EOL] op . alter_column ( [string] , [string] , existing_type = sa . Numeric ( precision = [number] , scale = [number] ) , type_ = sa . NUMERIC ( precision = [number] , scale = [number] ) , existing_nullable = True , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0